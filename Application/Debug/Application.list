
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e0  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020d0  0804db90  0804db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804fc60  0804fc60  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0804fc60  0804fc60  0001fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804fc68  0804fc68  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804fc68  0804fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804fc6c  0804fc6c  0001fc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  0804fc70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e0  2**0
                  CONTENTS
 10 .bss          00000c78  200000e0  200000e0  000200e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d58  20000d58  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ac7e  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005892  00000000  00000000  0004ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  00050620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f60  00000000  00000000  000527b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c2e7  00000000  00000000  00054710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c578  00000000  00000000  000809f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f01b2  00000000  00000000  000acf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019d121  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000981c  00000000  00000000  0019d174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804db78 	.word	0x0804db78

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804db78 	.word	0x0804db78

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 fbf4 	bl	8042d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8d4 	bl	8040748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb44 	bl	8040c2c <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f93c 	bl	8040820 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f94e 	bl	8040848 <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 faee 	bl	8040b8c <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f97c 	bl	80408ac <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f9ba 	bl	804092c <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa38 	bl	8040a2c <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa6c 	bl	8040a98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 faba 	bl	8040b38 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00b fda8 	bl	804c118 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405c8:	2300      	movs	r3, #0
 80405ca:	461a      	mov	r2, r3
 80405cc:	2301      	movs	r3, #1
 80405ce:	4951      	ldr	r1, [pc, #324]	; (8040714 <main+0x180>)
 80405d0:	4851      	ldr	r0, [pc, #324]	; (8040718 <main+0x184>)
 80405d2:	f00c fa6f 	bl	804cab4 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80405d6:	2300      	movs	r3, #0
 80405d8:	2201      	movs	r2, #1
 80405da:	4619      	mov	r1, r3
 80405dc:	484f      	ldr	r0, [pc, #316]	; (804071c <main+0x188>)
 80405de:	f00c f9cb 	bl	804c978 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405e2:	f001 fd49 	bl	8042078 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405e6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405ea:	2001      	movs	r0, #1
 80405ec:	f001 fdc6 	bl	804217c <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405f0:	2001      	movs	r0, #1
 80405f2:	f001 fe27 	bl	8042244 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405fa:	f001 fed1 	bl	80423a0 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 80405fe:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8040602:	2001      	movs	r0, #1
 8040604:	f001 fe6c 	bl	80422e0 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8040608:	2100      	movs	r1, #0
 804060a:	2001      	movs	r0, #1
 804060c:	f001 fe2a 	bl	8042264 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040610:	4943      	ldr	r1, [pc, #268]	; (8040720 <main+0x18c>)
 8040612:	2000      	movs	r0, #0
 8040614:	f001 fdb2 	bl	804217c <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8040618:	2000      	movs	r0, #0
 804061a:	f001 fe13 	bl	8042244 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 804061e:	f001 ffe9 	bl	80425f4 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040622:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040626:	f001 febb 	bl	80423a0 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804062a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804062e:	f001 fe83 	bl	8042338 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040632:	483c      	ldr	r0, [pc, #240]	; (8040724 <main+0x190>)
 8040634:	f001 fe68 	bl	8042308 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8040638:	483b      	ldr	r0, [pc, #236]	; (8040728 <main+0x194>)
 804063a:	f001 fe97 	bl	804236c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 804063e:	2301      	movs	r3, #1
 8040640:	4a35      	ldr	r2, [pc, #212]	; (8040718 <main+0x184>)
 8040642:	2100      	movs	r1, #0
 8040644:	2000      	movs	r0, #0
 8040646:	f001 ff17 	bl	8042478 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804064a:	f04f 30ff 	mov.w	r0, #4294967295
 804064e:	f001 fe5b 	bl	8042308 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040652:	f001 fd87 	bl	8042164 <BSP_LCD_GetYSize>
 8040656:	4603      	mov	r3, r0
 8040658:	085b      	lsrs	r3, r3, #1
 804065a:	b29b      	uxth	r3, r3
 804065c:	3b1b      	subs	r3, #27
 804065e:	b299      	uxth	r1, r3
 8040660:	2301      	movs	r3, #1
 8040662:	4a32      	ldr	r2, [pc, #200]	; (804072c <main+0x198>)
 8040664:	2000      	movs	r0, #0
 8040666:	f001 ff07 	bl	8042478 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804066a:	f001 fd7b 	bl	8042164 <BSP_LCD_GetYSize>
 804066e:	4603      	mov	r3, r0
 8040670:	085b      	lsrs	r3, r3, #1
 8040672:	b29b      	uxth	r3, r3
 8040674:	3b0c      	subs	r3, #12
 8040676:	b299      	uxth	r1, r3
 8040678:	2301      	movs	r3, #1
 804067a:	4a2d      	ldr	r2, [pc, #180]	; (8040730 <main+0x19c>)
 804067c:	2000      	movs	r0, #0
 804067e:	f001 fefb 	bl	8042478 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040682:	f001 fd6f 	bl	8042164 <BSP_LCD_GetYSize>
 8040686:	4603      	mov	r3, r0
 8040688:	085b      	lsrs	r3, r3, #1
 804068a:	b29b      	uxth	r3, r3
 804068c:	3303      	adds	r3, #3
 804068e:	b299      	uxth	r1, r3
 8040690:	2301      	movs	r3, #1
 8040692:	4a28      	ldr	r2, [pc, #160]	; (8040734 <main+0x1a0>)
 8040694:	2000      	movs	r0, #0
 8040696:	f001 feef 	bl	8042478 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804069a:	f00b fd63 	bl	804c164 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 804069e:	2201      	movs	r2, #1
 80406a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406a4:	4824      	ldr	r0, [pc, #144]	; (8040738 <main+0x1a4>)
 80406a6:	f003 fcff 	bl	80440a8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406ae:	f002 fbab 	bl	8042e08 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406b2:	2200      	movs	r2, #0
 80406b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406b8:	481f      	ldr	r0, [pc, #124]	; (8040738 <main+0x1a4>)
 80406ba:	f003 fcf5 	bl	80440a8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406c2:	f002 fba1 	bl	8042e08 <HAL_Delay>
    if (ota_update_request){
 80406c6:	4b1d      	ldr	r3, [pc, #116]	; (804073c <main+0x1a8>)
 80406c8:	781b      	ldrb	r3, [r3, #0]
 80406ca:	2b00      	cmp	r3, #0
 80406cc:	d0e5      	beq.n	804069a <main+0x106>
    	printf("OTA Update Requested...\r\n");
 80406ce:	481c      	ldr	r0, [pc, #112]	; (8040740 <main+0x1ac>)
 80406d0:	f00c f9d8 	bl	804ca84 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406d4:	2201      	movs	r2, #1
 80406d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406da:	4817      	ldr	r0, [pc, #92]	; (8040738 <main+0x1a4>)
 80406dc:	f003 fce4 	bl	80440a8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80406e0:	2201      	movs	r2, #1
 80406e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80406e6:	4814      	ldr	r0, [pc, #80]	; (8040738 <main+0x1a4>)
 80406e8:	f003 fcde 	bl	80440a8 <HAL_GPIO_WritePin>
    	go_to_ota_app(&huart1);
 80406ec:	4815      	ldr	r0, [pc, #84]	; (8040744 <main+0x1b0>)
 80406ee:	f000 fbeb 	bl	8040ec8 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406f2:	2200      	movs	r2, #0
 80406f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406f8:	480f      	ldr	r0, [pc, #60]	; (8040738 <main+0x1a4>)
 80406fa:	f003 fcd5 	bl	80440a8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80406fe:	2200      	movs	r2, #0
 8040700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040704:	480c      	ldr	r0, [pc, #48]	; (8040738 <main+0x1a4>)
 8040706:	f003 fccf 	bl	80440a8 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 804070a:	4b0c      	ldr	r3, [pc, #48]	; (804073c <main+0x1a8>)
 804070c:	2200      	movs	r2, #0
 804070e:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8040710:	e7c3      	b.n	804069a <main+0x106>
 8040712:	bf00      	nop
 8040714:	0804db90 	.word	0x0804db90
 8040718:	20000358 	.word	0x20000358
 804071c:	0804dbb0 	.word	0x0804dbb0
 8040720:	d0130000 	.word	0xd0130000
 8040724:	ffff0000 	.word	0xffff0000
 8040728:	20000048 	.word	0x20000048
 804072c:	0804dbd0 	.word	0x0804dbd0
 8040730:	0804dbe0 	.word	0x0804dbe0
 8040734:	0804dbe8 	.word	0x0804dbe8
 8040738:	40021800 	.word	0x40021800
 804073c:	200003bc 	.word	0x200003bc
 8040740:	0804dbf0 	.word	0x0804dbf0
 8040744:	200002e0 	.word	0x200002e0

08040748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040748:	b580      	push	{r7, lr}
 804074a:	b094      	sub	sp, #80	; 0x50
 804074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804074e:	f107 0320 	add.w	r3, r7, #32
 8040752:	2230      	movs	r2, #48	; 0x30
 8040754:	2100      	movs	r1, #0
 8040756:	4618      	mov	r0, r3
 8040758:	f00c f826 	bl	804c7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804075c:	f107 030c 	add.w	r3, r7, #12
 8040760:	2200      	movs	r2, #0
 8040762:	601a      	str	r2, [r3, #0]
 8040764:	605a      	str	r2, [r3, #4]
 8040766:	609a      	str	r2, [r3, #8]
 8040768:	60da      	str	r2, [r3, #12]
 804076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804076c:	2300      	movs	r3, #0
 804076e:	60bb      	str	r3, [r7, #8]
 8040770:	4b29      	ldr	r3, [pc, #164]	; (8040818 <SystemClock_Config+0xd0>)
 8040772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040774:	4a28      	ldr	r2, [pc, #160]	; (8040818 <SystemClock_Config+0xd0>)
 8040776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804077a:	6413      	str	r3, [r2, #64]	; 0x40
 804077c:	4b26      	ldr	r3, [pc, #152]	; (8040818 <SystemClock_Config+0xd0>)
 804077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040784:	60bb      	str	r3, [r7, #8]
 8040786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040788:	2300      	movs	r3, #0
 804078a:	607b      	str	r3, [r7, #4]
 804078c:	4b23      	ldr	r3, [pc, #140]	; (804081c <SystemClock_Config+0xd4>)
 804078e:	681b      	ldr	r3, [r3, #0]
 8040790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040794:	4a21      	ldr	r2, [pc, #132]	; (804081c <SystemClock_Config+0xd4>)
 8040796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804079a:	6013      	str	r3, [r2, #0]
 804079c:	4b1f      	ldr	r3, [pc, #124]	; (804081c <SystemClock_Config+0xd4>)
 804079e:	681b      	ldr	r3, [r3, #0]
 80407a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80407a4:	607b      	str	r3, [r7, #4]
 80407a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80407a8:	2301      	movs	r3, #1
 80407aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80407ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80407b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407b2:	2302      	movs	r3, #2
 80407b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80407b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80407ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80407bc:	2310      	movs	r3, #16
 80407be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80407c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80407c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407c6:	2302      	movs	r3, #2
 80407c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80407ca:	2307      	movs	r3, #7
 80407cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407ce:	f107 0320 	add.w	r3, r7, #32
 80407d2:	4618      	mov	r0, r3
 80407d4:	f005 fe74 	bl	80464c0 <HAL_RCC_OscConfig>
 80407d8:	4603      	mov	r3, r0
 80407da:	2b00      	cmp	r3, #0
 80407dc:	d001      	beq.n	80407e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407de:	f000 fb6d 	bl	8040ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407e2:	230f      	movs	r3, #15
 80407e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407e6:	2302      	movs	r3, #2
 80407e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407ea:	2300      	movs	r3, #0
 80407ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80407f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80407fa:	f107 030c 	add.w	r3, r7, #12
 80407fe:	2102      	movs	r1, #2
 8040800:	4618      	mov	r0, r3
 8040802:	f006 f8d5 	bl	80469b0 <HAL_RCC_ClockConfig>
 8040806:	4603      	mov	r3, r0
 8040808:	2b00      	cmp	r3, #0
 804080a:	d001      	beq.n	8040810 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 804080c:	f000 fb56 	bl	8040ebc <Error_Handler>
  }
}
 8040810:	bf00      	nop
 8040812:	3750      	adds	r7, #80	; 0x50
 8040814:	46bd      	mov	sp, r7
 8040816:	bd80      	pop	{r7, pc}
 8040818:	40023800 	.word	0x40023800
 804081c:	40007000 	.word	0x40007000

08040820 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040820:	b580      	push	{r7, lr}
 8040822:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040824:	4b06      	ldr	r3, [pc, #24]	; (8040840 <MX_CRC_Init+0x20>)
 8040826:	4a07      	ldr	r2, [pc, #28]	; (8040844 <MX_CRC_Init+0x24>)
 8040828:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 804082a:	4805      	ldr	r0, [pc, #20]	; (8040840 <MX_CRC_Init+0x20>)
 804082c:	f002 fc0d 	bl	804304a <HAL_CRC_Init>
 8040830:	4603      	mov	r3, r0
 8040832:	2b00      	cmp	r3, #0
 8040834:	d001      	beq.n	804083a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8040836:	f000 fb41 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 804083a:	bf00      	nop
 804083c:	bd80      	pop	{r7, pc}
 804083e:	bf00      	nop
 8040840:	200000fc 	.word	0x200000fc
 8040844:	40023000 	.word	0x40023000

08040848 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8040848:	b580      	push	{r7, lr}
 804084a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 804084c:	4b15      	ldr	r3, [pc, #84]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804084e:	4a16      	ldr	r2, [pc, #88]	; (80408a8 <MX_DMA2D_Init+0x60>)
 8040850:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8040852:	4b14      	ldr	r3, [pc, #80]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040854:	2200      	movs	r2, #0
 8040856:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8040858:	4b12      	ldr	r3, [pc, #72]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804085a:	2200      	movs	r2, #0
 804085c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 804085e:	4b11      	ldr	r3, [pc, #68]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040860:	2200      	movs	r2, #0
 8040862:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040864:	4b0f      	ldr	r3, [pc, #60]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040866:	2200      	movs	r2, #0
 8040868:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 804086a:	4b0e      	ldr	r3, [pc, #56]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804086c:	2200      	movs	r2, #0
 804086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040870:	4b0c      	ldr	r3, [pc, #48]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040872:	2200      	movs	r2, #0
 8040874:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8040876:	4b0b      	ldr	r3, [pc, #44]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040878:	2200      	movs	r2, #0
 804087a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 804087c:	4809      	ldr	r0, [pc, #36]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804087e:	f002 fdbf 	bl	8043400 <HAL_DMA2D_Init>
 8040882:	4603      	mov	r3, r0
 8040884:	2b00      	cmp	r3, #0
 8040886:	d001      	beq.n	804088c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040888:	f000 fb18 	bl	8040ebc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 804088c:	2101      	movs	r1, #1
 804088e:	4805      	ldr	r0, [pc, #20]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040890:	f003 f824 	bl	80438dc <HAL_DMA2D_ConfigLayer>
 8040894:	4603      	mov	r3, r0
 8040896:	2b00      	cmp	r3, #0
 8040898:	d001      	beq.n	804089e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 804089a:	f000 fb0f 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 804089e:	bf00      	nop
 80408a0:	bd80      	pop	{r7, pc}
 80408a2:	bf00      	nop
 80408a4:	20000104 	.word	0x20000104
 80408a8:	4002b000 	.word	0x4002b000

080408ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80408ac:	b580      	push	{r7, lr}
 80408ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80408b0:	4b1b      	ldr	r3, [pc, #108]	; (8040920 <MX_I2C3_Init+0x74>)
 80408b2:	4a1c      	ldr	r2, [pc, #112]	; (8040924 <MX_I2C3_Init+0x78>)
 80408b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80408b6:	4b1a      	ldr	r3, [pc, #104]	; (8040920 <MX_I2C3_Init+0x74>)
 80408b8:	4a1b      	ldr	r2, [pc, #108]	; (8040928 <MX_I2C3_Init+0x7c>)
 80408ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80408bc:	4b18      	ldr	r3, [pc, #96]	; (8040920 <MX_I2C3_Init+0x74>)
 80408be:	2200      	movs	r2, #0
 80408c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80408c2:	4b17      	ldr	r3, [pc, #92]	; (8040920 <MX_I2C3_Init+0x74>)
 80408c4:	2200      	movs	r2, #0
 80408c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80408c8:	4b15      	ldr	r3, [pc, #84]	; (8040920 <MX_I2C3_Init+0x74>)
 80408ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80408d0:	4b13      	ldr	r3, [pc, #76]	; (8040920 <MX_I2C3_Init+0x74>)
 80408d2:	2200      	movs	r2, #0
 80408d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80408d6:	4b12      	ldr	r3, [pc, #72]	; (8040920 <MX_I2C3_Init+0x74>)
 80408d8:	2200      	movs	r2, #0
 80408da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80408dc:	4b10      	ldr	r3, [pc, #64]	; (8040920 <MX_I2C3_Init+0x74>)
 80408de:	2200      	movs	r2, #0
 80408e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80408e2:	4b0f      	ldr	r3, [pc, #60]	; (8040920 <MX_I2C3_Init+0x74>)
 80408e4:	2200      	movs	r2, #0
 80408e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80408e8:	480d      	ldr	r0, [pc, #52]	; (8040920 <MX_I2C3_Init+0x74>)
 80408ea:	f005 f819 	bl	8045920 <HAL_I2C_Init>
 80408ee:	4603      	mov	r3, r0
 80408f0:	2b00      	cmp	r3, #0
 80408f2:	d001      	beq.n	80408f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80408f4:	f000 fae2 	bl	8040ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80408f8:	2100      	movs	r1, #0
 80408fa:	4809      	ldr	r0, [pc, #36]	; (8040920 <MX_I2C3_Init+0x74>)
 80408fc:	f005 f954 	bl	8045ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8040900:	4603      	mov	r3, r0
 8040902:	2b00      	cmp	r3, #0
 8040904:	d001      	beq.n	804090a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8040906:	f000 fad9 	bl	8040ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 804090a:	2100      	movs	r1, #0
 804090c:	4804      	ldr	r0, [pc, #16]	; (8040920 <MX_I2C3_Init+0x74>)
 804090e:	f005 f987 	bl	8045c20 <HAL_I2CEx_ConfigDigitalFilter>
 8040912:	4603      	mov	r3, r0
 8040914:	2b00      	cmp	r3, #0
 8040916:	d001      	beq.n	804091c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8040918:	f000 fad0 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 804091c:	bf00      	nop
 804091e:	bd80      	pop	{r7, pc}
 8040920:	20000144 	.word	0x20000144
 8040924:	40005c00 	.word	0x40005c00
 8040928:	000186a0 	.word	0x000186a0

0804092c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 804092c:	b580      	push	{r7, lr}
 804092e:	b08e      	sub	sp, #56	; 0x38
 8040930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8040932:	1d3b      	adds	r3, r7, #4
 8040934:	2234      	movs	r2, #52	; 0x34
 8040936:	2100      	movs	r1, #0
 8040938:	4618      	mov	r0, r3
 804093a:	f00b ff35 	bl	804c7a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 804093e:	4b39      	ldr	r3, [pc, #228]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040940:	4a39      	ldr	r2, [pc, #228]	; (8040a28 <MX_LTDC_Init+0xfc>)
 8040942:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8040944:	4b37      	ldr	r3, [pc, #220]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040946:	2200      	movs	r2, #0
 8040948:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804094a:	4b36      	ldr	r3, [pc, #216]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804094c:	2200      	movs	r2, #0
 804094e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040950:	4b34      	ldr	r3, [pc, #208]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040952:	2200      	movs	r2, #0
 8040954:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8040956:	4b33      	ldr	r3, [pc, #204]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040958:	2200      	movs	r2, #0
 804095a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 804095c:	4b31      	ldr	r3, [pc, #196]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804095e:	2209      	movs	r2, #9
 8040960:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8040962:	4b30      	ldr	r3, [pc, #192]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040964:	2201      	movs	r2, #1
 8040966:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8040968:	4b2e      	ldr	r3, [pc, #184]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804096a:	221d      	movs	r2, #29
 804096c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 804096e:	4b2d      	ldr	r3, [pc, #180]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040970:	2203      	movs	r2, #3
 8040972:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8040974:	4b2b      	ldr	r3, [pc, #172]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040976:	f240 120d 	movw	r2, #269	; 0x10d
 804097a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 804097c:	4b29      	ldr	r3, [pc, #164]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804097e:	f240 1243 	movw	r2, #323	; 0x143
 8040982:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8040984:	4b27      	ldr	r3, [pc, #156]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040986:	f240 1217 	movw	r2, #279	; 0x117
 804098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 804098c:	4b25      	ldr	r3, [pc, #148]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804098e:	f240 1247 	movw	r2, #327	; 0x147
 8040992:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8040994:	4b23      	ldr	r3, [pc, #140]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040996:	2200      	movs	r2, #0
 8040998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 804099c:	4b21      	ldr	r3, [pc, #132]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804099e:	2200      	movs	r2, #0
 80409a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80409a4:	4b1f      	ldr	r3, [pc, #124]	; (8040a24 <MX_LTDC_Init+0xf8>)
 80409a6:	2200      	movs	r2, #0
 80409a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80409ac:	481d      	ldr	r0, [pc, #116]	; (8040a24 <MX_LTDC_Init+0xf8>)
 80409ae:	f005 f977 	bl	8045ca0 <HAL_LTDC_Init>
 80409b2:	4603      	mov	r3, r0
 80409b4:	2b00      	cmp	r3, #0
 80409b6:	d001      	beq.n	80409bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80409b8:	f000 fa80 	bl	8040ebc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80409bc:	2300      	movs	r3, #0
 80409be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80409c0:	23f0      	movs	r3, #240	; 0xf0
 80409c2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80409c4:	2300      	movs	r3, #0
 80409c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80409c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409cc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80409ce:	2302      	movs	r3, #2
 80409d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80409d2:	23ff      	movs	r3, #255	; 0xff
 80409d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80409d6:	2300      	movs	r3, #0
 80409d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80409da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80409de:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80409e0:	2307      	movs	r3, #7
 80409e2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80409e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80409e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80409ea:	23f0      	movs	r3, #240	; 0xf0
 80409ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80409ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80409f4:	2300      	movs	r3, #0
 80409f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80409fa:	2300      	movs	r3, #0
 80409fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040a00:	2300      	movs	r3, #0
 8040a02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8040a06:	1d3b      	adds	r3, r7, #4
 8040a08:	2200      	movs	r2, #0
 8040a0a:	4619      	mov	r1, r3
 8040a0c:	4805      	ldr	r0, [pc, #20]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040a0e:	f005 fad9 	bl	8045fc4 <HAL_LTDC_ConfigLayer>
 8040a12:	4603      	mov	r3, r0
 8040a14:	2b00      	cmp	r3, #0
 8040a16:	d001      	beq.n	8040a1c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040a18:	f000 fa50 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8040a1c:	bf00      	nop
 8040a1e:	3738      	adds	r7, #56	; 0x38
 8040a20:	46bd      	mov	sp, r7
 8040a22:	bd80      	pop	{r7, pc}
 8040a24:	20000198 	.word	0x20000198
 8040a28:	40016800 	.word	0x40016800

08040a2c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8040a2c:	b580      	push	{r7, lr}
 8040a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040a30:	4b17      	ldr	r3, [pc, #92]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a32:	4a18      	ldr	r2, [pc, #96]	; (8040a94 <MX_SPI5_Init+0x68>)
 8040a34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040a36:	4b16      	ldr	r3, [pc, #88]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8040a3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8040a3e:	4b14      	ldr	r3, [pc, #80]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a40:	2200      	movs	r2, #0
 8040a42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040a44:	4b12      	ldr	r3, [pc, #72]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a46:	2200      	movs	r2, #0
 8040a48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040a4a:	4b11      	ldr	r3, [pc, #68]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a4c:	2200      	movs	r2, #0
 8040a4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040a50:	4b0f      	ldr	r3, [pc, #60]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a52:	2200      	movs	r2, #0
 8040a54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040a56:	4b0e      	ldr	r3, [pc, #56]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8040a5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040a5e:	4b0c      	ldr	r3, [pc, #48]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a60:	2218      	movs	r2, #24
 8040a62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040a64:	4b0a      	ldr	r3, [pc, #40]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a66:	2200      	movs	r2, #0
 8040a68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a6a:	4b09      	ldr	r3, [pc, #36]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a6c:	2200      	movs	r2, #0
 8040a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a70:	4b07      	ldr	r3, [pc, #28]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a72:	2200      	movs	r2, #0
 8040a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a76:	4b06      	ldr	r3, [pc, #24]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a78:	220a      	movs	r2, #10
 8040a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a7c:	4804      	ldr	r0, [pc, #16]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a7e:	f006 fc3a 	bl	80472f6 <HAL_SPI_Init>
 8040a82:	4603      	mov	r3, r0
 8040a84:	2b00      	cmp	r3, #0
 8040a86:	d001      	beq.n	8040a8c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a88:	f000 fa18 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a8c:	bf00      	nop
 8040a8e:	bd80      	pop	{r7, pc}
 8040a90:	20000240 	.word	0x20000240
 8040a94:	40015000 	.word	0x40015000

08040a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a98:	b580      	push	{r7, lr}
 8040a9a:	b086      	sub	sp, #24
 8040a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040a9e:	f107 0308 	add.w	r3, r7, #8
 8040aa2:	2200      	movs	r2, #0
 8040aa4:	601a      	str	r2, [r3, #0]
 8040aa6:	605a      	str	r2, [r3, #4]
 8040aa8:	609a      	str	r2, [r3, #8]
 8040aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040aac:	463b      	mov	r3, r7
 8040aae:	2200      	movs	r2, #0
 8040ab0:	601a      	str	r2, [r3, #0]
 8040ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040ab4:	4b1e      	ldr	r3, [pc, #120]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ab6:	4a1f      	ldr	r2, [pc, #124]	; (8040b34 <MX_TIM1_Init+0x9c>)
 8040ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040aba:	4b1d      	ldr	r3, [pc, #116]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040abc:	2200      	movs	r2, #0
 8040abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040ac0:	4b1b      	ldr	r3, [pc, #108]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ac2:	2200      	movs	r2, #0
 8040ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040ac6:	4b1a      	ldr	r3, [pc, #104]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040ace:	4b18      	ldr	r3, [pc, #96]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ad0:	2200      	movs	r2, #0
 8040ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040ad4:	4b16      	ldr	r3, [pc, #88]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ad6:	2200      	movs	r2, #0
 8040ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040ada:	4b15      	ldr	r3, [pc, #84]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040adc:	2200      	movs	r2, #0
 8040ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040ae0:	4813      	ldr	r0, [pc, #76]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ae2:	f007 f9e7 	bl	8047eb4 <HAL_TIM_Base_Init>
 8040ae6:	4603      	mov	r3, r0
 8040ae8:	2b00      	cmp	r3, #0
 8040aea:	d001      	beq.n	8040af0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040aec:	f000 f9e6 	bl	8040ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040af6:	f107 0308 	add.w	r3, r7, #8
 8040afa:	4619      	mov	r1, r3
 8040afc:	480c      	ldr	r0, [pc, #48]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040afe:	f007 fba1 	bl	8048244 <HAL_TIM_ConfigClockSource>
 8040b02:	4603      	mov	r3, r0
 8040b04:	2b00      	cmp	r3, #0
 8040b06:	d001      	beq.n	8040b0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040b08:	f000 f9d8 	bl	8040ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040b0c:	2300      	movs	r3, #0
 8040b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040b10:	2300      	movs	r3, #0
 8040b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040b14:	463b      	mov	r3, r7
 8040b16:	4619      	mov	r1, r3
 8040b18:	4805      	ldr	r0, [pc, #20]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040b1a:	f007 fdbd 	bl	8048698 <HAL_TIMEx_MasterConfigSynchronization>
 8040b1e:	4603      	mov	r3, r0
 8040b20:	2b00      	cmp	r3, #0
 8040b22:	d001      	beq.n	8040b28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040b24:	f000 f9ca 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040b28:	bf00      	nop
 8040b2a:	3718      	adds	r7, #24
 8040b2c:	46bd      	mov	sp, r7
 8040b2e:	bd80      	pop	{r7, pc}
 8040b30:	20000298 	.word	0x20000298
 8040b34:	40010000 	.word	0x40010000

08040b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b38:	b580      	push	{r7, lr}
 8040b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b3c:	4b11      	ldr	r3, [pc, #68]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b3e:	4a12      	ldr	r2, [pc, #72]	; (8040b88 <MX_USART1_UART_Init+0x50>)
 8040b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b42:	4b10      	ldr	r3, [pc, #64]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040b4a:	4b0e      	ldr	r3, [pc, #56]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b4c:	2200      	movs	r2, #0
 8040b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040b50:	4b0c      	ldr	r3, [pc, #48]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b52:	2200      	movs	r2, #0
 8040b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040b56:	4b0b      	ldr	r3, [pc, #44]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b58:	2200      	movs	r2, #0
 8040b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040b5c:	4b09      	ldr	r3, [pc, #36]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b5e:	220c      	movs	r2, #12
 8040b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b62:	4b08      	ldr	r3, [pc, #32]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b64:	2200      	movs	r2, #0
 8040b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b68:	4b06      	ldr	r3, [pc, #24]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b6a:	2200      	movs	r2, #0
 8040b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b6e:	4805      	ldr	r0, [pc, #20]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b70:	f007 fe22 	bl	80487b8 <HAL_UART_Init>
 8040b74:	4603      	mov	r3, r0
 8040b76:	2b00      	cmp	r3, #0
 8040b78:	d001      	beq.n	8040b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040b7a:	f000 f99f 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040b7e:	bf00      	nop
 8040b80:	bd80      	pop	{r7, pc}
 8040b82:	bf00      	nop
 8040b84:	200002e0 	.word	0x200002e0
 8040b88:	40011000 	.word	0x40011000

08040b8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040b8c:	b580      	push	{r7, lr}
 8040b8e:	b088      	sub	sp, #32
 8040b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040b92:	1d3b      	adds	r3, r7, #4
 8040b94:	2200      	movs	r2, #0
 8040b96:	601a      	str	r2, [r3, #0]
 8040b98:	605a      	str	r2, [r3, #4]
 8040b9a:	609a      	str	r2, [r3, #8]
 8040b9c:	60da      	str	r2, [r3, #12]
 8040b9e:	611a      	str	r2, [r3, #16]
 8040ba0:	615a      	str	r2, [r3, #20]
 8040ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040ba4:	4b1f      	ldr	r3, [pc, #124]	; (8040c24 <MX_FMC_Init+0x98>)
 8040ba6:	4a20      	ldr	r2, [pc, #128]	; (8040c28 <MX_FMC_Init+0x9c>)
 8040ba8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040baa:	4b1e      	ldr	r3, [pc, #120]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bac:	2201      	movs	r2, #1
 8040bae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040bb0:	4b1c      	ldr	r3, [pc, #112]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bb2:	2200      	movs	r2, #0
 8040bb4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040bb6:	4b1b      	ldr	r3, [pc, #108]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bb8:	2204      	movs	r2, #4
 8040bba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040bbc:	4b19      	ldr	r3, [pc, #100]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bbe:	2210      	movs	r2, #16
 8040bc0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040bc2:	4b18      	ldr	r3, [pc, #96]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bc4:	2240      	movs	r2, #64	; 0x40
 8040bc6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040bc8:	4b16      	ldr	r3, [pc, #88]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040bce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040bd0:	4b14      	ldr	r3, [pc, #80]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bd2:	2200      	movs	r2, #0
 8040bd4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040bd6:	4b13      	ldr	r3, [pc, #76]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040bdc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040bde:	4b11      	ldr	r3, [pc, #68]	; (8040c24 <MX_FMC_Init+0x98>)
 8040be0:	2200      	movs	r2, #0
 8040be2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040be4:	4b0f      	ldr	r3, [pc, #60]	; (8040c24 <MX_FMC_Init+0x98>)
 8040be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040bea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040bec:	2302      	movs	r3, #2
 8040bee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040bf0:	2307      	movs	r3, #7
 8040bf2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040bf4:	2304      	movs	r3, #4
 8040bf6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040bf8:	2307      	movs	r3, #7
 8040bfa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040bfc:	2303      	movs	r3, #3
 8040bfe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040c00:	2302      	movs	r3, #2
 8040c02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040c04:	2302      	movs	r3, #2
 8040c06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040c08:	1d3b      	adds	r3, r7, #4
 8040c0a:	4619      	mov	r1, r3
 8040c0c:	4805      	ldr	r0, [pc, #20]	; (8040c24 <MX_FMC_Init+0x98>)
 8040c0e:	f006 fae1 	bl	80471d4 <HAL_SDRAM_Init>
 8040c12:	4603      	mov	r3, r0
 8040c14:	2b00      	cmp	r3, #0
 8040c16:	d001      	beq.n	8040c1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040c18:	f000 f950 	bl	8040ebc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040c1c:	bf00      	nop
 8040c1e:	3720      	adds	r7, #32
 8040c20:	46bd      	mov	sp, r7
 8040c22:	bd80      	pop	{r7, pc}
 8040c24:	20000324 	.word	0x20000324
 8040c28:	a0000140 	.word	0xa0000140

08040c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040c2c:	b580      	push	{r7, lr}
 8040c2e:	b08e      	sub	sp, #56	; 0x38
 8040c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c36:	2200      	movs	r2, #0
 8040c38:	601a      	str	r2, [r3, #0]
 8040c3a:	605a      	str	r2, [r3, #4]
 8040c3c:	609a      	str	r2, [r3, #8]
 8040c3e:	60da      	str	r2, [r3, #12]
 8040c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c42:	2300      	movs	r3, #0
 8040c44:	623b      	str	r3, [r7, #32]
 8040c46:	4b85      	ldr	r3, [pc, #532]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c4a:	4a84      	ldr	r2, [pc, #528]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c4c:	f043 0304 	orr.w	r3, r3, #4
 8040c50:	6313      	str	r3, [r2, #48]	; 0x30
 8040c52:	4b82      	ldr	r3, [pc, #520]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c56:	f003 0304 	and.w	r3, r3, #4
 8040c5a:	623b      	str	r3, [r7, #32]
 8040c5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040c5e:	2300      	movs	r3, #0
 8040c60:	61fb      	str	r3, [r7, #28]
 8040c62:	4b7e      	ldr	r3, [pc, #504]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c66:	4a7d      	ldr	r2, [pc, #500]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c68:	f043 0320 	orr.w	r3, r3, #32
 8040c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8040c6e:	4b7b      	ldr	r3, [pc, #492]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c72:	f003 0320 	and.w	r3, r3, #32
 8040c76:	61fb      	str	r3, [r7, #28]
 8040c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040c7a:	2300      	movs	r3, #0
 8040c7c:	61bb      	str	r3, [r7, #24]
 8040c7e:	4b77      	ldr	r3, [pc, #476]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c82:	4a76      	ldr	r2, [pc, #472]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040c88:	6313      	str	r3, [r2, #48]	; 0x30
 8040c8a:	4b74      	ldr	r3, [pc, #464]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040c92:	61bb      	str	r3, [r7, #24]
 8040c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c96:	2300      	movs	r3, #0
 8040c98:	617b      	str	r3, [r7, #20]
 8040c9a:	4b70      	ldr	r3, [pc, #448]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c9e:	4a6f      	ldr	r2, [pc, #444]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ca0:	f043 0301 	orr.w	r3, r3, #1
 8040ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8040ca6:	4b6d      	ldr	r3, [pc, #436]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040caa:	f003 0301 	and.w	r3, r3, #1
 8040cae:	617b      	str	r3, [r7, #20]
 8040cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040cb2:	2300      	movs	r3, #0
 8040cb4:	613b      	str	r3, [r7, #16]
 8040cb6:	4b69      	ldr	r3, [pc, #420]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cba:	4a68      	ldr	r2, [pc, #416]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cbc:	f043 0302 	orr.w	r3, r3, #2
 8040cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8040cc2:	4b66      	ldr	r3, [pc, #408]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cc6:	f003 0302 	and.w	r3, r3, #2
 8040cca:	613b      	str	r3, [r7, #16]
 8040ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040cce:	2300      	movs	r3, #0
 8040cd0:	60fb      	str	r3, [r7, #12]
 8040cd2:	4b62      	ldr	r3, [pc, #392]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cd6:	4a61      	ldr	r2, [pc, #388]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8040cde:	4b5f      	ldr	r3, [pc, #380]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040ce6:	60fb      	str	r3, [r7, #12]
 8040ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040cea:	2300      	movs	r3, #0
 8040cec:	60bb      	str	r3, [r7, #8]
 8040cee:	4b5b      	ldr	r3, [pc, #364]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf2:	4a5a      	ldr	r2, [pc, #360]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cf4:	f043 0310 	orr.w	r3, r3, #16
 8040cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfa:	4b58      	ldr	r3, [pc, #352]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cfe:	f003 0310 	and.w	r3, r3, #16
 8040d02:	60bb      	str	r3, [r7, #8]
 8040d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040d06:	2300      	movs	r3, #0
 8040d08:	607b      	str	r3, [r7, #4]
 8040d0a:	4b54      	ldr	r3, [pc, #336]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d0e:	4a53      	ldr	r2, [pc, #332]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d10:	f043 0308 	orr.w	r3, r3, #8
 8040d14:	6313      	str	r3, [r2, #48]	; 0x30
 8040d16:	4b51      	ldr	r3, [pc, #324]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d1a:	f003 0308 	and.w	r3, r3, #8
 8040d1e:	607b      	str	r3, [r7, #4]
 8040d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040d22:	2200      	movs	r2, #0
 8040d24:	2116      	movs	r1, #22
 8040d26:	484e      	ldr	r0, [pc, #312]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040d28:	f003 f9be 	bl	80440a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040d2c:	2200      	movs	r2, #0
 8040d2e:	2180      	movs	r1, #128	; 0x80
 8040d30:	484c      	ldr	r0, [pc, #304]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d32:	f003 f9b9 	bl	80440a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040d36:	2200      	movs	r2, #0
 8040d38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040d3c:	484a      	ldr	r0, [pc, #296]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040d3e:	f003 f9b3 	bl	80440a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040d42:	2200      	movs	r2, #0
 8040d44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040d48:	4848      	ldr	r0, [pc, #288]	; (8040e6c <MX_GPIO_Init+0x240>)
 8040d4a:	f003 f9ad 	bl	80440a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040d4e:	2316      	movs	r3, #22
 8040d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d52:	2301      	movs	r3, #1
 8040d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d56:	2300      	movs	r3, #0
 8040d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d5a:	2300      	movs	r3, #0
 8040d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d62:	4619      	mov	r1, r3
 8040d64:	483e      	ldr	r0, [pc, #248]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040d66:	f002 fee7 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040d6a:	2301      	movs	r3, #1
 8040d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8040d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d74:	2300      	movs	r3, #0
 8040d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d7c:	4619      	mov	r1, r3
 8040d7e:	4839      	ldr	r0, [pc, #228]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d80:	f002 feda 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040d84:	f248 0306 	movw	r3, #32774	; 0x8006
 8040d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040d8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d90:	2300      	movs	r3, #0
 8040d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d98:	4619      	mov	r1, r3
 8040d9a:	4832      	ldr	r0, [pc, #200]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d9c:	f002 fecc 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040da0:	2380      	movs	r3, #128	; 0x80
 8040da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040da4:	2301      	movs	r3, #1
 8040da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040da8:	2300      	movs	r3, #0
 8040daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040dac:	2300      	movs	r3, #0
 8040dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040db4:	4619      	mov	r1, r3
 8040db6:	482b      	ldr	r0, [pc, #172]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040db8:	f002 febe 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040dbc:	2320      	movs	r3, #32
 8040dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040dc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dc6:	2300      	movs	r3, #0
 8040dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dce:	4619      	mov	r1, r3
 8040dd0:	4823      	ldr	r0, [pc, #140]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040dd2:	f002 feb1 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040dd6:	2304      	movs	r3, #4
 8040dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040dda:	2300      	movs	r3, #0
 8040ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dde:	2300      	movs	r3, #0
 8040de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040de6:	4619      	mov	r1, r3
 8040de8:	4821      	ldr	r0, [pc, #132]	; (8040e70 <MX_GPIO_Init+0x244>)
 8040dea:	f002 fea5 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040df4:	2300      	movs	r3, #0
 8040df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040df8:	2300      	movs	r3, #0
 8040dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e00:	4619      	mov	r1, r3
 8040e02:	4819      	ldr	r0, [pc, #100]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040e04:	f002 fe98 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040e08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e0e:	2301      	movs	r3, #1
 8040e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e12:	2300      	movs	r3, #0
 8040e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e16:	2300      	movs	r3, #0
 8040e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e1e:	4619      	mov	r1, r3
 8040e20:	4811      	ldr	r0, [pc, #68]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040e22:	f002 fe89 	bl	8043b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040e26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e2c:	2301      	movs	r3, #1
 8040e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e30:	2300      	movs	r3, #0
 8040e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e34:	2300      	movs	r3, #0
 8040e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e3c:	4619      	mov	r1, r3
 8040e3e:	480b      	ldr	r0, [pc, #44]	; (8040e6c <MX_GPIO_Init+0x240>)
 8040e40:	f002 fe7a 	bl	8043b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8040e44:	2200      	movs	r2, #0
 8040e46:	2100      	movs	r1, #0
 8040e48:	2006      	movs	r0, #6
 8040e4a:	f002 f8d0 	bl	8042fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8040e4e:	2006      	movs	r0, #6
 8040e50:	f002 f8e9 	bl	8043026 <HAL_NVIC_EnableIRQ>

}
 8040e54:	bf00      	nop
 8040e56:	3738      	adds	r7, #56	; 0x38
 8040e58:	46bd      	mov	sp, r7
 8040e5a:	bd80      	pop	{r7, pc}
 8040e5c:	40023800 	.word	0x40023800
 8040e60:	40020800 	.word	0x40020800
 8040e64:	40020000 	.word	0x40020000
 8040e68:	40020c00 	.word	0x40020c00
 8040e6c:	40021800 	.word	0x40021800
 8040e70:	40020400 	.word	0x40020400

08040e74 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8040e74:	b580      	push	{r7, lr}
 8040e76:	b082      	sub	sp, #8
 8040e78:	af00      	add	r7, sp, #0
 8040e7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040e7c:	1d39      	adds	r1, r7, #4
 8040e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8040e82:	2201      	movs	r2, #1
 8040e84:	4803      	ldr	r0, [pc, #12]	; (8040e94 <__io_putchar+0x20>)
 8040e86:	f007 fce4 	bl	8048852 <HAL_UART_Transmit>
	return ch;
 8040e8a:	687b      	ldr	r3, [r7, #4]
}
 8040e8c:	4618      	mov	r0, r3
 8040e8e:	3708      	adds	r7, #8
 8040e90:	46bd      	mov	sp, r7
 8040e92:	bd80      	pop	{r7, pc}
 8040e94:	200002e0 	.word	0x200002e0

08040e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040e98:	b580      	push	{r7, lr}
 8040e9a:	b082      	sub	sp, #8
 8040e9c:	af00      	add	r7, sp, #0
 8040e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040ea0:	687b      	ldr	r3, [r7, #4]
 8040ea2:	681b      	ldr	r3, [r3, #0]
 8040ea4:	4a04      	ldr	r2, [pc, #16]	; (8040eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040ea6:	4293      	cmp	r3, r2
 8040ea8:	d101      	bne.n	8040eae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040eaa:	f001 ff8d 	bl	8042dc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040eae:	bf00      	nop
 8040eb0:	3708      	adds	r7, #8
 8040eb2:	46bd      	mov	sp, r7
 8040eb4:	bd80      	pop	{r7, pc}
 8040eb6:	bf00      	nop
 8040eb8:	40001000 	.word	0x40001000

08040ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040ebc:	b480      	push	{r7}
 8040ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040ec0:	b672      	cpsid	i
}
 8040ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ec4:	e7fe      	b.n	8040ec4 <Error_Handler+0x8>
	...

08040ec8 <go_to_ota_app>:

ETX_OTA_EX_ etx_ota_download_and_flash(UART_HandleTypeDef *huart);


void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8040ec8:	b580      	push	{r7, lr}
 8040eca:	b082      	sub	sp, #8
 8040ecc:	af00      	add	r7, sp, #0
 8040ece:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8040ed0:	480f      	ldr	r0, [pc, #60]	; (8040f10 <go_to_ota_app+0x48>)
 8040ed2:	f00b fdd7 	bl	804ca84 <puts>
    if( etx_ota_download_and_flash(huart) != ETX_OTA_EX_OK )
 8040ed6:	6878      	ldr	r0, [r7, #4]
 8040ed8:	f000 f822 	bl	8040f20 <etx_ota_download_and_flash>
 8040edc:	4603      	mov	r3, r0
 8040ede:	2b00      	cmp	r3, #0
 8040ee0:	d00d      	beq.n	8040efe <go_to_ota_app+0x36>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8040ee2:	480c      	ldr	r0, [pc, #48]	; (8040f14 <go_to_ota_app+0x4c>)
 8040ee4:	f00b fdce 	bl	804ca84 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8040ee8:	2200      	movs	r2, #0
 8040eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040eee:	480a      	ldr	r0, [pc, #40]	; (8040f18 <go_to_ota_app+0x50>)
 8040ef0:	f003 f8da 	bl	80440a8 <HAL_GPIO_WritePin>
    HAL_Delay(10000);
 8040ef4:	f242 7010 	movw	r0, #10000	; 0x2710
 8040ef8:	f001 ff86 	bl	8042e08 <HAL_Delay>
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_NVIC_SystemReset();
    }
}
 8040efc:	e004      	b.n	8040f08 <go_to_ota_app+0x40>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8040efe:	4807      	ldr	r0, [pc, #28]	; (8040f1c <go_to_ota_app+0x54>)
 8040f00:	f00b fdc0 	bl	804ca84 <puts>
      HAL_NVIC_SystemReset();
 8040f04:	f002 f89d 	bl	8043042 <HAL_NVIC_SystemReset>
}
 8040f08:	bf00      	nop
 8040f0a:	3708      	adds	r7, #8
 8040f0c:	46bd      	mov	sp, r7
 8040f0e:	bd80      	pop	{r7, pc}
 8040f10:	0804dc0c 	.word	0x0804dc0c
 8040f14:	0804dc2c 	.word	0x0804dc2c
 8040f18:	40021800 	.word	0x40021800
 8040f1c:	0804dc4c 	.word	0x0804dc4c

08040f20 <etx_ota_download_and_flash>:

ETX_OTA_EX_ etx_ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8040f20:	b480      	push	{r7}
 8040f22:	b083      	sub	sp, #12
 8040f24:	af00      	add	r7, sp, #0
 8040f26:	6078      	str	r0, [r7, #4]
	// TODO:
	return ETX_OTA_EX_OK;
 8040f28:	2300      	movs	r3, #0
}
 8040f2a:	4618      	mov	r0, r3
 8040f2c:	370c      	adds	r7, #12
 8040f2e:	46bd      	mov	sp, r7
 8040f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f34:	4770      	bx	lr
	...

08040f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040f38:	b480      	push	{r7}
 8040f3a:	b083      	sub	sp, #12
 8040f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f3e:	2300      	movs	r3, #0
 8040f40:	607b      	str	r3, [r7, #4]
 8040f42:	4b10      	ldr	r3, [pc, #64]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f46:	4a0f      	ldr	r2, [pc, #60]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8040f4e:	4b0d      	ldr	r3, [pc, #52]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f56:	607b      	str	r3, [r7, #4]
 8040f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040f5a:	2300      	movs	r3, #0
 8040f5c:	603b      	str	r3, [r7, #0]
 8040f5e:	4b09      	ldr	r3, [pc, #36]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f62:	4a08      	ldr	r2, [pc, #32]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040f68:	6413      	str	r3, [r2, #64]	; 0x40
 8040f6a:	4b06      	ldr	r3, [pc, #24]	; (8040f84 <HAL_MspInit+0x4c>)
 8040f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040f72:	603b      	str	r3, [r7, #0]
 8040f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040f76:	bf00      	nop
 8040f78:	370c      	adds	r7, #12
 8040f7a:	46bd      	mov	sp, r7
 8040f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f80:	4770      	bx	lr
 8040f82:	bf00      	nop
 8040f84:	40023800 	.word	0x40023800

08040f88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040f88:	b480      	push	{r7}
 8040f8a:	b085      	sub	sp, #20
 8040f8c:	af00      	add	r7, sp, #0
 8040f8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040f90:	687b      	ldr	r3, [r7, #4]
 8040f92:	681b      	ldr	r3, [r3, #0]
 8040f94:	4a0b      	ldr	r2, [pc, #44]	; (8040fc4 <HAL_CRC_MspInit+0x3c>)
 8040f96:	4293      	cmp	r3, r2
 8040f98:	d10d      	bne.n	8040fb6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040f9a:	2300      	movs	r3, #0
 8040f9c:	60fb      	str	r3, [r7, #12]
 8040f9e:	4b0a      	ldr	r3, [pc, #40]	; (8040fc8 <HAL_CRC_MspInit+0x40>)
 8040fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040fa2:	4a09      	ldr	r2, [pc, #36]	; (8040fc8 <HAL_CRC_MspInit+0x40>)
 8040fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8040fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8040faa:	4b07      	ldr	r3, [pc, #28]	; (8040fc8 <HAL_CRC_MspInit+0x40>)
 8040fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040fb2:	60fb      	str	r3, [r7, #12]
 8040fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8040fb6:	bf00      	nop
 8040fb8:	3714      	adds	r7, #20
 8040fba:	46bd      	mov	sp, r7
 8040fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fc0:	4770      	bx	lr
 8040fc2:	bf00      	nop
 8040fc4:	40023000 	.word	0x40023000
 8040fc8:	40023800 	.word	0x40023800

08040fcc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8040fcc:	b580      	push	{r7, lr}
 8040fce:	b084      	sub	sp, #16
 8040fd0:	af00      	add	r7, sp, #0
 8040fd2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8040fd4:	687b      	ldr	r3, [r7, #4]
 8040fd6:	681b      	ldr	r3, [r3, #0]
 8040fd8:	4a0e      	ldr	r2, [pc, #56]	; (8041014 <HAL_DMA2D_MspInit+0x48>)
 8040fda:	4293      	cmp	r3, r2
 8040fdc:	d115      	bne.n	804100a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8040fde:	2300      	movs	r3, #0
 8040fe0:	60fb      	str	r3, [r7, #12]
 8040fe2:	4b0d      	ldr	r3, [pc, #52]	; (8041018 <HAL_DMA2D_MspInit+0x4c>)
 8040fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040fe6:	4a0c      	ldr	r2, [pc, #48]	; (8041018 <HAL_DMA2D_MspInit+0x4c>)
 8040fe8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040fec:	6313      	str	r3, [r2, #48]	; 0x30
 8040fee:	4b0a      	ldr	r3, [pc, #40]	; (8041018 <HAL_DMA2D_MspInit+0x4c>)
 8040ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040ff6:	60fb      	str	r3, [r7, #12]
 8040ff8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8040ffa:	2200      	movs	r2, #0
 8040ffc:	2105      	movs	r1, #5
 8040ffe:	205a      	movs	r0, #90	; 0x5a
 8041000:	f001 fff5 	bl	8042fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8041004:	205a      	movs	r0, #90	; 0x5a
 8041006:	f002 f80e 	bl	8043026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 804100a:	bf00      	nop
 804100c:	3710      	adds	r7, #16
 804100e:	46bd      	mov	sp, r7
 8041010:	bd80      	pop	{r7, pc}
 8041012:	bf00      	nop
 8041014:	4002b000 	.word	0x4002b000
 8041018:	40023800 	.word	0x40023800

0804101c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 804101c:	b580      	push	{r7, lr}
 804101e:	b08a      	sub	sp, #40	; 0x28
 8041020:	af00      	add	r7, sp, #0
 8041022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041024:	f107 0314 	add.w	r3, r7, #20
 8041028:	2200      	movs	r2, #0
 804102a:	601a      	str	r2, [r3, #0]
 804102c:	605a      	str	r2, [r3, #4]
 804102e:	609a      	str	r2, [r3, #8]
 8041030:	60da      	str	r2, [r3, #12]
 8041032:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8041034:	687b      	ldr	r3, [r7, #4]
 8041036:	681b      	ldr	r3, [r3, #0]
 8041038:	4a29      	ldr	r2, [pc, #164]	; (80410e0 <HAL_I2C_MspInit+0xc4>)
 804103a:	4293      	cmp	r3, r2
 804103c:	d14b      	bne.n	80410d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 804103e:	2300      	movs	r3, #0
 8041040:	613b      	str	r3, [r7, #16]
 8041042:	4b28      	ldr	r3, [pc, #160]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 8041044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041046:	4a27      	ldr	r2, [pc, #156]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 8041048:	f043 0304 	orr.w	r3, r3, #4
 804104c:	6313      	str	r3, [r2, #48]	; 0x30
 804104e:	4b25      	ldr	r3, [pc, #148]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 8041050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041052:	f003 0304 	and.w	r3, r3, #4
 8041056:	613b      	str	r3, [r7, #16]
 8041058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804105a:	2300      	movs	r3, #0
 804105c:	60fb      	str	r3, [r7, #12]
 804105e:	4b21      	ldr	r3, [pc, #132]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 8041060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041062:	4a20      	ldr	r2, [pc, #128]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 8041064:	f043 0301 	orr.w	r3, r3, #1
 8041068:	6313      	str	r3, [r2, #48]	; 0x30
 804106a:	4b1e      	ldr	r3, [pc, #120]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 804106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804106e:	f003 0301 	and.w	r3, r3, #1
 8041072:	60fb      	str	r3, [r7, #12]
 8041074:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8041076:	f44f 7300 	mov.w	r3, #512	; 0x200
 804107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804107c:	2312      	movs	r3, #18
 804107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8041080:	2301      	movs	r3, #1
 8041082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041084:	2300      	movs	r3, #0
 8041086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8041088:	2304      	movs	r3, #4
 804108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 804108c:	f107 0314 	add.w	r3, r7, #20
 8041090:	4619      	mov	r1, r3
 8041092:	4815      	ldr	r0, [pc, #84]	; (80410e8 <HAL_I2C_MspInit+0xcc>)
 8041094:	f002 fd50 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8041098:	f44f 7380 	mov.w	r3, #256	; 0x100
 804109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804109e:	2312      	movs	r3, #18
 80410a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80410a2:	2301      	movs	r3, #1
 80410a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80410a6:	2300      	movs	r3, #0
 80410a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80410aa:	2304      	movs	r3, #4
 80410ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80410ae:	f107 0314 	add.w	r3, r7, #20
 80410b2:	4619      	mov	r1, r3
 80410b4:	480d      	ldr	r0, [pc, #52]	; (80410ec <HAL_I2C_MspInit+0xd0>)
 80410b6:	f002 fd3f 	bl	8043b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80410ba:	2300      	movs	r3, #0
 80410bc:	60bb      	str	r3, [r7, #8]
 80410be:	4b09      	ldr	r3, [pc, #36]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 80410c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80410c2:	4a08      	ldr	r2, [pc, #32]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 80410c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80410c8:	6413      	str	r3, [r2, #64]	; 0x40
 80410ca:	4b06      	ldr	r3, [pc, #24]	; (80410e4 <HAL_I2C_MspInit+0xc8>)
 80410cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80410ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80410d2:	60bb      	str	r3, [r7, #8]
 80410d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80410d6:	bf00      	nop
 80410d8:	3728      	adds	r7, #40	; 0x28
 80410da:	46bd      	mov	sp, r7
 80410dc:	bd80      	pop	{r7, pc}
 80410de:	bf00      	nop
 80410e0:	40005c00 	.word	0x40005c00
 80410e4:	40023800 	.word	0x40023800
 80410e8:	40020800 	.word	0x40020800
 80410ec:	40020000 	.word	0x40020000

080410f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b09a      	sub	sp, #104	; 0x68
 80410f4:	af00      	add	r7, sp, #0
 80410f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80410f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80410fc:	2200      	movs	r2, #0
 80410fe:	601a      	str	r2, [r3, #0]
 8041100:	605a      	str	r2, [r3, #4]
 8041102:	609a      	str	r2, [r3, #8]
 8041104:	60da      	str	r2, [r3, #12]
 8041106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8041108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804110c:	2230      	movs	r2, #48	; 0x30
 804110e:	2100      	movs	r1, #0
 8041110:	4618      	mov	r0, r3
 8041112:	f00b fb49 	bl	804c7a8 <memset>
  if(hltdc->Instance==LTDC)
 8041116:	687b      	ldr	r3, [r7, #4]
 8041118:	681b      	ldr	r3, [r3, #0]
 804111a:	4a85      	ldr	r2, [pc, #532]	; (8041330 <HAL_LTDC_MspInit+0x240>)
 804111c:	4293      	cmp	r3, r2
 804111e:	f040 8102 	bne.w	8041326 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8041122:	2308      	movs	r3, #8
 8041124:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8041126:	2331      	movs	r3, #49	; 0x31
 8041128:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 804112a:	2302      	movs	r3, #2
 804112c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 804112e:	2300      	movs	r3, #0
 8041130:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8041132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041136:	4618      	mov	r0, r3
 8041138:	f005 fe8c 	bl	8046e54 <HAL_RCCEx_PeriphCLKConfig>
 804113c:	4603      	mov	r3, r0
 804113e:	2b00      	cmp	r3, #0
 8041140:	d001      	beq.n	8041146 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8041142:	f7ff febb 	bl	8040ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8041146:	2300      	movs	r3, #0
 8041148:	623b      	str	r3, [r7, #32]
 804114a:	4b7a      	ldr	r3, [pc, #488]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 804114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804114e:	4a79      	ldr	r2, [pc, #484]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041150:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041154:	6453      	str	r3, [r2, #68]	; 0x44
 8041156:	4b77      	ldr	r3, [pc, #476]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804115a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804115e:	623b      	str	r3, [r7, #32]
 8041160:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8041162:	2300      	movs	r3, #0
 8041164:	61fb      	str	r3, [r7, #28]
 8041166:	4b73      	ldr	r3, [pc, #460]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804116a:	4a72      	ldr	r2, [pc, #456]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 804116c:	f043 0320 	orr.w	r3, r3, #32
 8041170:	6313      	str	r3, [r2, #48]	; 0x30
 8041172:	4b70      	ldr	r3, [pc, #448]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041176:	f003 0320 	and.w	r3, r3, #32
 804117a:	61fb      	str	r3, [r7, #28]
 804117c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804117e:	2300      	movs	r3, #0
 8041180:	61bb      	str	r3, [r7, #24]
 8041182:	4b6c      	ldr	r3, [pc, #432]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041186:	4a6b      	ldr	r2, [pc, #428]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041188:	f043 0301 	orr.w	r3, r3, #1
 804118c:	6313      	str	r3, [r2, #48]	; 0x30
 804118e:	4b69      	ldr	r3, [pc, #420]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041192:	f003 0301 	and.w	r3, r3, #1
 8041196:	61bb      	str	r3, [r7, #24]
 8041198:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804119a:	2300      	movs	r3, #0
 804119c:	617b      	str	r3, [r7, #20]
 804119e:	4b65      	ldr	r3, [pc, #404]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411a2:	4a64      	ldr	r2, [pc, #400]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411a4:	f043 0302 	orr.w	r3, r3, #2
 80411a8:	6313      	str	r3, [r2, #48]	; 0x30
 80411aa:	4b62      	ldr	r3, [pc, #392]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411ae:	f003 0302 	and.w	r3, r3, #2
 80411b2:	617b      	str	r3, [r7, #20]
 80411b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80411b6:	2300      	movs	r3, #0
 80411b8:	613b      	str	r3, [r7, #16]
 80411ba:	4b5e      	ldr	r3, [pc, #376]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411be:	4a5d      	ldr	r2, [pc, #372]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80411c4:	6313      	str	r3, [r2, #48]	; 0x30
 80411c6:	4b5b      	ldr	r3, [pc, #364]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80411ce:	613b      	str	r3, [r7, #16]
 80411d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80411d2:	2300      	movs	r3, #0
 80411d4:	60fb      	str	r3, [r7, #12]
 80411d6:	4b57      	ldr	r3, [pc, #348]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411da:	4a56      	ldr	r2, [pc, #344]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411dc:	f043 0304 	orr.w	r3, r3, #4
 80411e0:	6313      	str	r3, [r2, #48]	; 0x30
 80411e2:	4b54      	ldr	r3, [pc, #336]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411e6:	f003 0304 	and.w	r3, r3, #4
 80411ea:	60fb      	str	r3, [r7, #12]
 80411ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80411ee:	2300      	movs	r3, #0
 80411f0:	60bb      	str	r3, [r7, #8]
 80411f2:	4b50      	ldr	r3, [pc, #320]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411f6:	4a4f      	ldr	r2, [pc, #316]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 80411f8:	f043 0308 	orr.w	r3, r3, #8
 80411fc:	6313      	str	r3, [r2, #48]	; 0x30
 80411fe:	4b4d      	ldr	r3, [pc, #308]	; (8041334 <HAL_LTDC_MspInit+0x244>)
 8041200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041202:	f003 0308 	and.w	r3, r3, #8
 8041206:	60bb      	str	r3, [r7, #8]
 8041208:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 804120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804120e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041210:	2302      	movs	r3, #2
 8041212:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041214:	2300      	movs	r3, #0
 8041216:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041218:	2300      	movs	r3, #0
 804121a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804121c:	230e      	movs	r3, #14
 804121e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8041220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041224:	4619      	mov	r1, r3
 8041226:	4844      	ldr	r0, [pc, #272]	; (8041338 <HAL_LTDC_MspInit+0x248>)
 8041228:	f002 fc86 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 804122c:	f641 0358 	movw	r3, #6232	; 0x1858
 8041230:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041232:	2302      	movs	r3, #2
 8041234:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041236:	2300      	movs	r3, #0
 8041238:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804123a:	2300      	movs	r3, #0
 804123c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804123e:	230e      	movs	r3, #14
 8041240:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041242:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041246:	4619      	mov	r1, r3
 8041248:	483c      	ldr	r0, [pc, #240]	; (804133c <HAL_LTDC_MspInit+0x24c>)
 804124a:	f002 fc75 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 804124e:	2303      	movs	r3, #3
 8041250:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041252:	2302      	movs	r3, #2
 8041254:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041256:	2300      	movs	r3, #0
 8041258:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804125a:	2300      	movs	r3, #0
 804125c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 804125e:	2309      	movs	r3, #9
 8041260:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041262:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041266:	4619      	mov	r1, r3
 8041268:	4835      	ldr	r0, [pc, #212]	; (8041340 <HAL_LTDC_MspInit+0x250>)
 804126a:	f002 fc65 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 804126e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8041272:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041274:	2302      	movs	r3, #2
 8041276:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041278:	2300      	movs	r3, #0
 804127a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804127c:	2300      	movs	r3, #0
 804127e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041280:	230e      	movs	r3, #14
 8041282:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041284:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041288:	4619      	mov	r1, r3
 804128a:	482d      	ldr	r0, [pc, #180]	; (8041340 <HAL_LTDC_MspInit+0x250>)
 804128c:	f002 fc54 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8041290:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8041294:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041296:	2302      	movs	r3, #2
 8041298:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804129a:	2300      	movs	r3, #0
 804129c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804129e:	2300      	movs	r3, #0
 80412a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80412a2:	230e      	movs	r3, #14
 80412a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80412a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80412aa:	4619      	mov	r1, r3
 80412ac:	4825      	ldr	r0, [pc, #148]	; (8041344 <HAL_LTDC_MspInit+0x254>)
 80412ae:	f002 fc43 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80412b2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80412b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412b8:	2302      	movs	r3, #2
 80412ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412bc:	2300      	movs	r3, #0
 80412be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80412c0:	2300      	movs	r3, #0
 80412c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80412c4:	230e      	movs	r3, #14
 80412c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80412c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80412cc:	4619      	mov	r1, r3
 80412ce:	481e      	ldr	r0, [pc, #120]	; (8041348 <HAL_LTDC_MspInit+0x258>)
 80412d0:	f002 fc32 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80412d4:	2348      	movs	r3, #72	; 0x48
 80412d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412d8:	2302      	movs	r3, #2
 80412da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412dc:	2300      	movs	r3, #0
 80412de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80412e0:	2300      	movs	r3, #0
 80412e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80412e4:	230e      	movs	r3, #14
 80412e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80412e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80412ec:	4619      	mov	r1, r3
 80412ee:	4817      	ldr	r0, [pc, #92]	; (804134c <HAL_LTDC_MspInit+0x25c>)
 80412f0:	f002 fc22 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80412f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80412f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412fa:	2302      	movs	r3, #2
 80412fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412fe:	2300      	movs	r3, #0
 8041300:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041302:	2300      	movs	r3, #0
 8041304:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8041306:	2309      	movs	r3, #9
 8041308:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804130a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804130e:	4619      	mov	r1, r3
 8041310:	480c      	ldr	r0, [pc, #48]	; (8041344 <HAL_LTDC_MspInit+0x254>)
 8041312:	f002 fc11 	bl	8043b38 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8041316:	2200      	movs	r2, #0
 8041318:	2105      	movs	r1, #5
 804131a:	2058      	movs	r0, #88	; 0x58
 804131c:	f001 fe67 	bl	8042fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8041320:	2058      	movs	r0, #88	; 0x58
 8041322:	f001 fe80 	bl	8043026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8041326:	bf00      	nop
 8041328:	3768      	adds	r7, #104	; 0x68
 804132a:	46bd      	mov	sp, r7
 804132c:	bd80      	pop	{r7, pc}
 804132e:	bf00      	nop
 8041330:	40016800 	.word	0x40016800
 8041334:	40023800 	.word	0x40023800
 8041338:	40021400 	.word	0x40021400
 804133c:	40020000 	.word	0x40020000
 8041340:	40020400 	.word	0x40020400
 8041344:	40021800 	.word	0x40021800
 8041348:	40020800 	.word	0x40020800
 804134c:	40020c00 	.word	0x40020c00

08041350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8041350:	b580      	push	{r7, lr}
 8041352:	b08a      	sub	sp, #40	; 0x28
 8041354:	af00      	add	r7, sp, #0
 8041356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041358:	f107 0314 	add.w	r3, r7, #20
 804135c:	2200      	movs	r2, #0
 804135e:	601a      	str	r2, [r3, #0]
 8041360:	605a      	str	r2, [r3, #4]
 8041362:	609a      	str	r2, [r3, #8]
 8041364:	60da      	str	r2, [r3, #12]
 8041366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8041368:	687b      	ldr	r3, [r7, #4]
 804136a:	681b      	ldr	r3, [r3, #0]
 804136c:	4a19      	ldr	r2, [pc, #100]	; (80413d4 <HAL_SPI_MspInit+0x84>)
 804136e:	4293      	cmp	r3, r2
 8041370:	d12c      	bne.n	80413cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8041372:	2300      	movs	r3, #0
 8041374:	613b      	str	r3, [r7, #16]
 8041376:	4b18      	ldr	r3, [pc, #96]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 8041378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804137a:	4a17      	ldr	r2, [pc, #92]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 804137c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041380:	6453      	str	r3, [r2, #68]	; 0x44
 8041382:	4b15      	ldr	r3, [pc, #84]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 8041384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804138a:	613b      	str	r3, [r7, #16]
 804138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 804138e:	2300      	movs	r3, #0
 8041390:	60fb      	str	r3, [r7, #12]
 8041392:	4b11      	ldr	r3, [pc, #68]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 8041394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041396:	4a10      	ldr	r2, [pc, #64]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 8041398:	f043 0320 	orr.w	r3, r3, #32
 804139c:	6313      	str	r3, [r2, #48]	; 0x30
 804139e:	4b0e      	ldr	r3, [pc, #56]	; (80413d8 <HAL_SPI_MspInit+0x88>)
 80413a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80413a2:	f003 0320 	and.w	r3, r3, #32
 80413a6:	60fb      	str	r3, [r7, #12]
 80413a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80413aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80413ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80413b0:	2302      	movs	r3, #2
 80413b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413b4:	2300      	movs	r3, #0
 80413b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80413b8:	2300      	movs	r3, #0
 80413ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80413bc:	2305      	movs	r3, #5
 80413be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80413c0:	f107 0314 	add.w	r3, r7, #20
 80413c4:	4619      	mov	r1, r3
 80413c6:	4805      	ldr	r0, [pc, #20]	; (80413dc <HAL_SPI_MspInit+0x8c>)
 80413c8:	f002 fbb6 	bl	8043b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80413cc:	bf00      	nop
 80413ce:	3728      	adds	r7, #40	; 0x28
 80413d0:	46bd      	mov	sp, r7
 80413d2:	bd80      	pop	{r7, pc}
 80413d4:	40015000 	.word	0x40015000
 80413d8:	40023800 	.word	0x40023800
 80413dc:	40021400 	.word	0x40021400

080413e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80413e0:	b580      	push	{r7, lr}
 80413e2:	b082      	sub	sp, #8
 80413e4:	af00      	add	r7, sp, #0
 80413e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80413e8:	687b      	ldr	r3, [r7, #4]
 80413ea:	681b      	ldr	r3, [r3, #0]
 80413ec:	4a08      	ldr	r2, [pc, #32]	; (8041410 <HAL_SPI_MspDeInit+0x30>)
 80413ee:	4293      	cmp	r3, r2
 80413f0:	d10a      	bne.n	8041408 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80413f2:	4b08      	ldr	r3, [pc, #32]	; (8041414 <HAL_SPI_MspDeInit+0x34>)
 80413f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80413f6:	4a07      	ldr	r2, [pc, #28]	; (8041414 <HAL_SPI_MspDeInit+0x34>)
 80413f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80413fc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80413fe:	f44f 7160 	mov.w	r1, #896	; 0x380
 8041402:	4805      	ldr	r0, [pc, #20]	; (8041418 <HAL_SPI_MspDeInit+0x38>)
 8041404:	f002 fd44 	bl	8043e90 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8041408:	bf00      	nop
 804140a:	3708      	adds	r7, #8
 804140c:	46bd      	mov	sp, r7
 804140e:	bd80      	pop	{r7, pc}
 8041410:	40015000 	.word	0x40015000
 8041414:	40023800 	.word	0x40023800
 8041418:	40021400 	.word	0x40021400

0804141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 804141c:	b480      	push	{r7}
 804141e:	b085      	sub	sp, #20
 8041420:	af00      	add	r7, sp, #0
 8041422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	4a0b      	ldr	r2, [pc, #44]	; (8041458 <HAL_TIM_Base_MspInit+0x3c>)
 804142a:	4293      	cmp	r3, r2
 804142c:	d10d      	bne.n	804144a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 804142e:	2300      	movs	r3, #0
 8041430:	60fb      	str	r3, [r7, #12]
 8041432:	4b0a      	ldr	r3, [pc, #40]	; (804145c <HAL_TIM_Base_MspInit+0x40>)
 8041434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041436:	4a09      	ldr	r2, [pc, #36]	; (804145c <HAL_TIM_Base_MspInit+0x40>)
 8041438:	f043 0301 	orr.w	r3, r3, #1
 804143c:	6453      	str	r3, [r2, #68]	; 0x44
 804143e:	4b07      	ldr	r3, [pc, #28]	; (804145c <HAL_TIM_Base_MspInit+0x40>)
 8041440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041442:	f003 0301 	and.w	r3, r3, #1
 8041446:	60fb      	str	r3, [r7, #12]
 8041448:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 804144a:	bf00      	nop
 804144c:	3714      	adds	r7, #20
 804144e:	46bd      	mov	sp, r7
 8041450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041454:	4770      	bx	lr
 8041456:	bf00      	nop
 8041458:	40010000 	.word	0x40010000
 804145c:	40023800 	.word	0x40023800

08041460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041460:	b580      	push	{r7, lr}
 8041462:	b08a      	sub	sp, #40	; 0x28
 8041464:	af00      	add	r7, sp, #0
 8041466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041468:	f107 0314 	add.w	r3, r7, #20
 804146c:	2200      	movs	r2, #0
 804146e:	601a      	str	r2, [r3, #0]
 8041470:	605a      	str	r2, [r3, #4]
 8041472:	609a      	str	r2, [r3, #8]
 8041474:	60da      	str	r2, [r3, #12]
 8041476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8041478:	687b      	ldr	r3, [r7, #4]
 804147a:	681b      	ldr	r3, [r3, #0]
 804147c:	4a19      	ldr	r2, [pc, #100]	; (80414e4 <HAL_UART_MspInit+0x84>)
 804147e:	4293      	cmp	r3, r2
 8041480:	d12c      	bne.n	80414dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8041482:	2300      	movs	r3, #0
 8041484:	613b      	str	r3, [r7, #16]
 8041486:	4b18      	ldr	r3, [pc, #96]	; (80414e8 <HAL_UART_MspInit+0x88>)
 8041488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804148a:	4a17      	ldr	r2, [pc, #92]	; (80414e8 <HAL_UART_MspInit+0x88>)
 804148c:	f043 0310 	orr.w	r3, r3, #16
 8041490:	6453      	str	r3, [r2, #68]	; 0x44
 8041492:	4b15      	ldr	r3, [pc, #84]	; (80414e8 <HAL_UART_MspInit+0x88>)
 8041494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041496:	f003 0310 	and.w	r3, r3, #16
 804149a:	613b      	str	r3, [r7, #16]
 804149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804149e:	2300      	movs	r3, #0
 80414a0:	60fb      	str	r3, [r7, #12]
 80414a2:	4b11      	ldr	r3, [pc, #68]	; (80414e8 <HAL_UART_MspInit+0x88>)
 80414a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414a6:	4a10      	ldr	r2, [pc, #64]	; (80414e8 <HAL_UART_MspInit+0x88>)
 80414a8:	f043 0301 	orr.w	r3, r3, #1
 80414ac:	6313      	str	r3, [r2, #48]	; 0x30
 80414ae:	4b0e      	ldr	r3, [pc, #56]	; (80414e8 <HAL_UART_MspInit+0x88>)
 80414b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414b2:	f003 0301 	and.w	r3, r3, #1
 80414b6:	60fb      	str	r3, [r7, #12]
 80414b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80414ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80414be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80414c0:	2302      	movs	r3, #2
 80414c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414c4:	2300      	movs	r3, #0
 80414c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80414c8:	2303      	movs	r3, #3
 80414ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80414cc:	2307      	movs	r3, #7
 80414ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80414d0:	f107 0314 	add.w	r3, r7, #20
 80414d4:	4619      	mov	r1, r3
 80414d6:	4805      	ldr	r0, [pc, #20]	; (80414ec <HAL_UART_MspInit+0x8c>)
 80414d8:	f002 fb2e 	bl	8043b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80414dc:	bf00      	nop
 80414de:	3728      	adds	r7, #40	; 0x28
 80414e0:	46bd      	mov	sp, r7
 80414e2:	bd80      	pop	{r7, pc}
 80414e4:	40011000 	.word	0x40011000
 80414e8:	40023800 	.word	0x40023800
 80414ec:	40020000 	.word	0x40020000

080414f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80414f0:	b580      	push	{r7, lr}
 80414f2:	b086      	sub	sp, #24
 80414f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80414f6:	1d3b      	adds	r3, r7, #4
 80414f8:	2200      	movs	r2, #0
 80414fa:	601a      	str	r2, [r3, #0]
 80414fc:	605a      	str	r2, [r3, #4]
 80414fe:	609a      	str	r2, [r3, #8]
 8041500:	60da      	str	r2, [r3, #12]
 8041502:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8041504:	4b3b      	ldr	r3, [pc, #236]	; (80415f4 <HAL_FMC_MspInit+0x104>)
 8041506:	681b      	ldr	r3, [r3, #0]
 8041508:	2b00      	cmp	r3, #0
 804150a:	d16f      	bne.n	80415ec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 804150c:	4b39      	ldr	r3, [pc, #228]	; (80415f4 <HAL_FMC_MspInit+0x104>)
 804150e:	2201      	movs	r2, #1
 8041510:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8041512:	2300      	movs	r3, #0
 8041514:	603b      	str	r3, [r7, #0]
 8041516:	4b38      	ldr	r3, [pc, #224]	; (80415f8 <HAL_FMC_MspInit+0x108>)
 8041518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804151a:	4a37      	ldr	r2, [pc, #220]	; (80415f8 <HAL_FMC_MspInit+0x108>)
 804151c:	f043 0301 	orr.w	r3, r3, #1
 8041520:	6393      	str	r3, [r2, #56]	; 0x38
 8041522:	4b35      	ldr	r3, [pc, #212]	; (80415f8 <HAL_FMC_MspInit+0x108>)
 8041524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041526:	f003 0301 	and.w	r3, r3, #1
 804152a:	603b      	str	r3, [r7, #0]
 804152c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 804152e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8041532:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041534:	2302      	movs	r3, #2
 8041536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041538:	2300      	movs	r3, #0
 804153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804153c:	2303      	movs	r3, #3
 804153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041540:	230c      	movs	r3, #12
 8041542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041544:	1d3b      	adds	r3, r7, #4
 8041546:	4619      	mov	r1, r3
 8041548:	482c      	ldr	r0, [pc, #176]	; (80415fc <HAL_FMC_MspInit+0x10c>)
 804154a:	f002 faf5 	bl	8043b38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 804154e:	2301      	movs	r3, #1
 8041550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041552:	2302      	movs	r3, #2
 8041554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041556:	2300      	movs	r3, #0
 8041558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804155a:	2303      	movs	r3, #3
 804155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804155e:	230c      	movs	r3, #12
 8041560:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8041562:	1d3b      	adds	r3, r7, #4
 8041564:	4619      	mov	r1, r3
 8041566:	4826      	ldr	r0, [pc, #152]	; (8041600 <HAL_FMC_MspInit+0x110>)
 8041568:	f002 fae6 	bl	8043b38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 804156c:	f248 1333 	movw	r3, #33075	; 0x8133
 8041570:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041572:	2302      	movs	r3, #2
 8041574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041576:	2300      	movs	r3, #0
 8041578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804157a:	2303      	movs	r3, #3
 804157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804157e:	230c      	movs	r3, #12
 8041580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041582:	1d3b      	adds	r3, r7, #4
 8041584:	4619      	mov	r1, r3
 8041586:	481f      	ldr	r0, [pc, #124]	; (8041604 <HAL_FMC_MspInit+0x114>)
 8041588:	f002 fad6 	bl	8043b38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 804158c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8041590:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041592:	2302      	movs	r3, #2
 8041594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041596:	2300      	movs	r3, #0
 8041598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804159a:	2303      	movs	r3, #3
 804159c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804159e:	230c      	movs	r3, #12
 80415a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80415a2:	1d3b      	adds	r3, r7, #4
 80415a4:	4619      	mov	r1, r3
 80415a6:	4818      	ldr	r0, [pc, #96]	; (8041608 <HAL_FMC_MspInit+0x118>)
 80415a8:	f002 fac6 	bl	8043b38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80415ac:	f24c 7303 	movw	r3, #50947	; 0xc703
 80415b0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80415b2:	2302      	movs	r3, #2
 80415b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80415b6:	2300      	movs	r3, #0
 80415b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80415ba:	2303      	movs	r3, #3
 80415bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80415be:	230c      	movs	r3, #12
 80415c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80415c2:	1d3b      	adds	r3, r7, #4
 80415c4:	4619      	mov	r1, r3
 80415c6:	4811      	ldr	r0, [pc, #68]	; (804160c <HAL_FMC_MspInit+0x11c>)
 80415c8:	f002 fab6 	bl	8043b38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80415cc:	2360      	movs	r3, #96	; 0x60
 80415ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80415d0:	2302      	movs	r3, #2
 80415d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80415d4:	2300      	movs	r3, #0
 80415d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80415d8:	2303      	movs	r3, #3
 80415da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80415dc:	230c      	movs	r3, #12
 80415de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80415e0:	1d3b      	adds	r3, r7, #4
 80415e2:	4619      	mov	r1, r3
 80415e4:	480a      	ldr	r0, [pc, #40]	; (8041610 <HAL_FMC_MspInit+0x120>)
 80415e6:	f002 faa7 	bl	8043b38 <HAL_GPIO_Init>
 80415ea:	e000      	b.n	80415ee <HAL_FMC_MspInit+0xfe>
    return;
 80415ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80415ee:	3718      	adds	r7, #24
 80415f0:	46bd      	mov	sp, r7
 80415f2:	bd80      	pop	{r7, pc}
 80415f4:	200003c0 	.word	0x200003c0
 80415f8:	40023800 	.word	0x40023800
 80415fc:	40021400 	.word	0x40021400
 8041600:	40020800 	.word	0x40020800
 8041604:	40021800 	.word	0x40021800
 8041608:	40021000 	.word	0x40021000
 804160c:	40020c00 	.word	0x40020c00
 8041610:	40020400 	.word	0x40020400

08041614 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8041614:	b580      	push	{r7, lr}
 8041616:	b082      	sub	sp, #8
 8041618:	af00      	add	r7, sp, #0
 804161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 804161c:	f7ff ff68 	bl	80414f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8041620:	bf00      	nop
 8041622:	3708      	adds	r7, #8
 8041624:	46bd      	mov	sp, r7
 8041626:	bd80      	pop	{r7, pc}

08041628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041628:	b580      	push	{r7, lr}
 804162a:	b08e      	sub	sp, #56	; 0x38
 804162c:	af00      	add	r7, sp, #0
 804162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041630:	2300      	movs	r3, #0
 8041632:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041634:	2300      	movs	r3, #0
 8041636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041638:	2300      	movs	r3, #0
 804163a:	60fb      	str	r3, [r7, #12]
 804163c:	4b33      	ldr	r3, [pc, #204]	; (804170c <HAL_InitTick+0xe4>)
 804163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041640:	4a32      	ldr	r2, [pc, #200]	; (804170c <HAL_InitTick+0xe4>)
 8041642:	f043 0310 	orr.w	r3, r3, #16
 8041646:	6413      	str	r3, [r2, #64]	; 0x40
 8041648:	4b30      	ldr	r3, [pc, #192]	; (804170c <HAL_InitTick+0xe4>)
 804164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804164c:	f003 0310 	and.w	r3, r3, #16
 8041650:	60fb      	str	r3, [r7, #12]
 8041652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041654:	f107 0210 	add.w	r2, r7, #16
 8041658:	f107 0314 	add.w	r3, r7, #20
 804165c:	4611      	mov	r1, r2
 804165e:	4618      	mov	r0, r3
 8041660:	f005 fbc6 	bl	8046df0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041664:	6a3b      	ldr	r3, [r7, #32]
 8041666:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804166a:	2b00      	cmp	r3, #0
 804166c:	d103      	bne.n	8041676 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 804166e:	f005 fb97 	bl	8046da0 <HAL_RCC_GetPCLK1Freq>
 8041672:	6378      	str	r0, [r7, #52]	; 0x34
 8041674:	e004      	b.n	8041680 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041676:	f005 fb93 	bl	8046da0 <HAL_RCC_GetPCLK1Freq>
 804167a:	4603      	mov	r3, r0
 804167c:	005b      	lsls	r3, r3, #1
 804167e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041682:	4a23      	ldr	r2, [pc, #140]	; (8041710 <HAL_InitTick+0xe8>)
 8041684:	fba2 2303 	umull	r2, r3, r2, r3
 8041688:	0c9b      	lsrs	r3, r3, #18
 804168a:	3b01      	subs	r3, #1
 804168c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 804168e:	4b21      	ldr	r3, [pc, #132]	; (8041714 <HAL_InitTick+0xec>)
 8041690:	4a21      	ldr	r2, [pc, #132]	; (8041718 <HAL_InitTick+0xf0>)
 8041692:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041694:	4b1f      	ldr	r3, [pc, #124]	; (8041714 <HAL_InitTick+0xec>)
 8041696:	f240 32e7 	movw	r2, #999	; 0x3e7
 804169a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 804169c:	4a1d      	ldr	r2, [pc, #116]	; (8041714 <HAL_InitTick+0xec>)
 804169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80416a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80416a2:	4b1c      	ldr	r3, [pc, #112]	; (8041714 <HAL_InitTick+0xec>)
 80416a4:	2200      	movs	r2, #0
 80416a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80416a8:	4b1a      	ldr	r3, [pc, #104]	; (8041714 <HAL_InitTick+0xec>)
 80416aa:	2200      	movs	r2, #0
 80416ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80416ae:	4b19      	ldr	r3, [pc, #100]	; (8041714 <HAL_InitTick+0xec>)
 80416b0:	2200      	movs	r2, #0
 80416b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80416b4:	4817      	ldr	r0, [pc, #92]	; (8041714 <HAL_InitTick+0xec>)
 80416b6:	f006 fbfd 	bl	8047eb4 <HAL_TIM_Base_Init>
 80416ba:	4603      	mov	r3, r0
 80416bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80416c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d11b      	bne.n	8041700 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80416c8:	4812      	ldr	r0, [pc, #72]	; (8041714 <HAL_InitTick+0xec>)
 80416ca:	f006 fc43 	bl	8047f54 <HAL_TIM_Base_Start_IT>
 80416ce:	4603      	mov	r3, r0
 80416d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80416d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80416d8:	2b00      	cmp	r3, #0
 80416da:	d111      	bne.n	8041700 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80416dc:	2036      	movs	r0, #54	; 0x36
 80416de:	f001 fca2 	bl	8043026 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	2b0f      	cmp	r3, #15
 80416e6:	d808      	bhi.n	80416fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80416e8:	2200      	movs	r2, #0
 80416ea:	6879      	ldr	r1, [r7, #4]
 80416ec:	2036      	movs	r0, #54	; 0x36
 80416ee:	f001 fc7e 	bl	8042fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80416f2:	4a0a      	ldr	r2, [pc, #40]	; (804171c <HAL_InitTick+0xf4>)
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	6013      	str	r3, [r2, #0]
 80416f8:	e002      	b.n	8041700 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80416fa:	2301      	movs	r3, #1
 80416fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8041704:	4618      	mov	r0, r3
 8041706:	3738      	adds	r7, #56	; 0x38
 8041708:	46bd      	mov	sp, r7
 804170a:	bd80      	pop	{r7, pc}
 804170c:	40023800 	.word	0x40023800
 8041710:	431bde83 	.word	0x431bde83
 8041714:	200003c4 	.word	0x200003c4
 8041718:	40001000 	.word	0x40001000
 804171c:	20000054 	.word	0x20000054

08041720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041720:	b480      	push	{r7}
 8041722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041724:	e7fe      	b.n	8041724 <NMI_Handler+0x4>

08041726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041726:	b480      	push	{r7}
 8041728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804172a:	e7fe      	b.n	804172a <HardFault_Handler+0x4>

0804172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804172c:	b480      	push	{r7}
 804172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041730:	e7fe      	b.n	8041730 <MemManage_Handler+0x4>

08041732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041732:	b480      	push	{r7}
 8041734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041736:	e7fe      	b.n	8041736 <BusFault_Handler+0x4>

08041738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041738:	b480      	push	{r7}
 804173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804173c:	e7fe      	b.n	804173c <UsageFault_Handler+0x4>

0804173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804173e:	b480      	push	{r7}
 8041740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041742:	bf00      	nop
 8041744:	46bd      	mov	sp, r7
 8041746:	f85d 7b04 	ldr.w	r7, [sp], #4
 804174a:	4770      	bx	lr

0804174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 804174c:	b480      	push	{r7}
 804174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041750:	bf00      	nop
 8041752:	46bd      	mov	sp, r7
 8041754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041758:	4770      	bx	lr

0804175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804175a:	b480      	push	{r7}
 804175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804175e:	bf00      	nop
 8041760:	46bd      	mov	sp, r7
 8041762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041766:	4770      	bx	lr

08041768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041768:	b480      	push	{r7}
 804176a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804176c:	bf00      	nop
 804176e:	46bd      	mov	sp, r7
 8041770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041774:	4770      	bx	lr

08041776 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8041776:	b580      	push	{r7, lr}
 8041778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 804177a:	2001      	movs	r0, #1
 804177c:	f002 fcae 	bl	80440dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8041780:	bf00      	nop
 8041782:	bd80      	pop	{r7, pc}

08041784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041784:	b580      	push	{r7, lr}
 8041786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041788:	4802      	ldr	r0, [pc, #8]	; (8041794 <TIM6_DAC_IRQHandler+0x10>)
 804178a:	f006 fc53 	bl	8048034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 804178e:	bf00      	nop
 8041790:	bd80      	pop	{r7, pc}
 8041792:	bf00      	nop
 8041794:	200003c4 	.word	0x200003c4

08041798 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041798:	b580      	push	{r7, lr}
 804179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 804179c:	4802      	ldr	r0, [pc, #8]	; (80417a8 <OTG_HS_IRQHandler+0x10>)
 804179e:	f002 ff1f 	bl	80445e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80417a2:	bf00      	nop
 80417a4:	bd80      	pop	{r7, pc}
 80417a6:	bf00      	nop
 80417a8:	20000a44 	.word	0x20000a44

080417ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80417ac:	b580      	push	{r7, lr}
 80417ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80417b0:	4802      	ldr	r0, [pc, #8]	; (80417bc <LTDC_IRQHandler+0x10>)
 80417b2:	f004 fb45 	bl	8045e40 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80417b6:	bf00      	nop
 80417b8:	bd80      	pop	{r7, pc}
 80417ba:	bf00      	nop
 80417bc:	20000198 	.word	0x20000198

080417c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80417c0:	b580      	push	{r7, lr}
 80417c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80417c4:	4802      	ldr	r0, [pc, #8]	; (80417d0 <DMA2D_IRQHandler+0x10>)
 80417c6:	f001 ff78 	bl	80436ba <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80417ca:	bf00      	nop
 80417cc:	bd80      	pop	{r7, pc}
 80417ce:	bf00      	nop
 80417d0:	20000104 	.word	0x20000104

080417d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80417d4:	b480      	push	{r7}
 80417d6:	b083      	sub	sp, #12
 80417d8:	af00      	add	r7, sp, #0
 80417da:	4603      	mov	r3, r0
 80417dc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80417de:	88fb      	ldrh	r3, [r7, #6]
 80417e0:	2b01      	cmp	r3, #1
 80417e2:	d102      	bne.n	80417ea <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 80417e4:	4b04      	ldr	r3, [pc, #16]	; (80417f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80417e6:	2201      	movs	r2, #1
 80417e8:	701a      	strb	r2, [r3, #0]

	}
}
 80417ea:	bf00      	nop
 80417ec:	370c      	adds	r7, #12
 80417ee:	46bd      	mov	sp, r7
 80417f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417f4:	4770      	bx	lr
 80417f6:	bf00      	nop
 80417f8:	200003bc 	.word	0x200003bc

080417fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80417fc:	b580      	push	{r7, lr}
 80417fe:	b086      	sub	sp, #24
 8041800:	af00      	add	r7, sp, #0
 8041802:	60f8      	str	r0, [r7, #12]
 8041804:	60b9      	str	r1, [r7, #8]
 8041806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041808:	2300      	movs	r3, #0
 804180a:	617b      	str	r3, [r7, #20]
 804180c:	e00a      	b.n	8041824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 804180e:	f3af 8000 	nop.w
 8041812:	4601      	mov	r1, r0
 8041814:	68bb      	ldr	r3, [r7, #8]
 8041816:	1c5a      	adds	r2, r3, #1
 8041818:	60ba      	str	r2, [r7, #8]
 804181a:	b2ca      	uxtb	r2, r1
 804181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804181e:	697b      	ldr	r3, [r7, #20]
 8041820:	3301      	adds	r3, #1
 8041822:	617b      	str	r3, [r7, #20]
 8041824:	697a      	ldr	r2, [r7, #20]
 8041826:	687b      	ldr	r3, [r7, #4]
 8041828:	429a      	cmp	r2, r3
 804182a:	dbf0      	blt.n	804180e <_read+0x12>
  }

  return len;
 804182c:	687b      	ldr	r3, [r7, #4]
}
 804182e:	4618      	mov	r0, r3
 8041830:	3718      	adds	r7, #24
 8041832:	46bd      	mov	sp, r7
 8041834:	bd80      	pop	{r7, pc}

08041836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041836:	b580      	push	{r7, lr}
 8041838:	b086      	sub	sp, #24
 804183a:	af00      	add	r7, sp, #0
 804183c:	60f8      	str	r0, [r7, #12]
 804183e:	60b9      	str	r1, [r7, #8]
 8041840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041842:	2300      	movs	r3, #0
 8041844:	617b      	str	r3, [r7, #20]
 8041846:	e009      	b.n	804185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8041848:	68bb      	ldr	r3, [r7, #8]
 804184a:	1c5a      	adds	r2, r3, #1
 804184c:	60ba      	str	r2, [r7, #8]
 804184e:	781b      	ldrb	r3, [r3, #0]
 8041850:	4618      	mov	r0, r3
 8041852:	f7ff fb0f 	bl	8040e74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041856:	697b      	ldr	r3, [r7, #20]
 8041858:	3301      	adds	r3, #1
 804185a:	617b      	str	r3, [r7, #20]
 804185c:	697a      	ldr	r2, [r7, #20]
 804185e:	687b      	ldr	r3, [r7, #4]
 8041860:	429a      	cmp	r2, r3
 8041862:	dbf1      	blt.n	8041848 <_write+0x12>
  }
  return len;
 8041864:	687b      	ldr	r3, [r7, #4]
}
 8041866:	4618      	mov	r0, r3
 8041868:	3718      	adds	r7, #24
 804186a:	46bd      	mov	sp, r7
 804186c:	bd80      	pop	{r7, pc}

0804186e <_close>:

int _close(int file)
{
 804186e:	b480      	push	{r7}
 8041870:	b083      	sub	sp, #12
 8041872:	af00      	add	r7, sp, #0
 8041874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041876:	f04f 33ff 	mov.w	r3, #4294967295
}
 804187a:	4618      	mov	r0, r3
 804187c:	370c      	adds	r7, #12
 804187e:	46bd      	mov	sp, r7
 8041880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041884:	4770      	bx	lr

08041886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041886:	b480      	push	{r7}
 8041888:	b083      	sub	sp, #12
 804188a:	af00      	add	r7, sp, #0
 804188c:	6078      	str	r0, [r7, #4]
 804188e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8041890:	683b      	ldr	r3, [r7, #0]
 8041892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041896:	605a      	str	r2, [r3, #4]
  return 0;
 8041898:	2300      	movs	r3, #0
}
 804189a:	4618      	mov	r0, r3
 804189c:	370c      	adds	r7, #12
 804189e:	46bd      	mov	sp, r7
 80418a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418a4:	4770      	bx	lr

080418a6 <_isatty>:

int _isatty(int file)
{
 80418a6:	b480      	push	{r7}
 80418a8:	b083      	sub	sp, #12
 80418aa:	af00      	add	r7, sp, #0
 80418ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80418ae:	2301      	movs	r3, #1
}
 80418b0:	4618      	mov	r0, r3
 80418b2:	370c      	adds	r7, #12
 80418b4:	46bd      	mov	sp, r7
 80418b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418ba:	4770      	bx	lr

080418bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80418bc:	b480      	push	{r7}
 80418be:	b085      	sub	sp, #20
 80418c0:	af00      	add	r7, sp, #0
 80418c2:	60f8      	str	r0, [r7, #12]
 80418c4:	60b9      	str	r1, [r7, #8]
 80418c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80418c8:	2300      	movs	r3, #0
}
 80418ca:	4618      	mov	r0, r3
 80418cc:	3714      	adds	r7, #20
 80418ce:	46bd      	mov	sp, r7
 80418d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418d4:	4770      	bx	lr
	...

080418d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80418d8:	b580      	push	{r7, lr}
 80418da:	b086      	sub	sp, #24
 80418dc:	af00      	add	r7, sp, #0
 80418de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80418e0:	4a14      	ldr	r2, [pc, #80]	; (8041934 <_sbrk+0x5c>)
 80418e2:	4b15      	ldr	r3, [pc, #84]	; (8041938 <_sbrk+0x60>)
 80418e4:	1ad3      	subs	r3, r2, r3
 80418e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80418e8:	697b      	ldr	r3, [r7, #20]
 80418ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80418ec:	4b13      	ldr	r3, [pc, #76]	; (804193c <_sbrk+0x64>)
 80418ee:	681b      	ldr	r3, [r3, #0]
 80418f0:	2b00      	cmp	r3, #0
 80418f2:	d102      	bne.n	80418fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80418f4:	4b11      	ldr	r3, [pc, #68]	; (804193c <_sbrk+0x64>)
 80418f6:	4a12      	ldr	r2, [pc, #72]	; (8041940 <_sbrk+0x68>)
 80418f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80418fa:	4b10      	ldr	r3, [pc, #64]	; (804193c <_sbrk+0x64>)
 80418fc:	681a      	ldr	r2, [r3, #0]
 80418fe:	687b      	ldr	r3, [r7, #4]
 8041900:	4413      	add	r3, r2
 8041902:	693a      	ldr	r2, [r7, #16]
 8041904:	429a      	cmp	r2, r3
 8041906:	d207      	bcs.n	8041918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041908:	f00a ff14 	bl	804c734 <__errno>
 804190c:	4603      	mov	r3, r0
 804190e:	220c      	movs	r2, #12
 8041910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8041912:	f04f 33ff 	mov.w	r3, #4294967295
 8041916:	e009      	b.n	804192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041918:	4b08      	ldr	r3, [pc, #32]	; (804193c <_sbrk+0x64>)
 804191a:	681b      	ldr	r3, [r3, #0]
 804191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 804191e:	4b07      	ldr	r3, [pc, #28]	; (804193c <_sbrk+0x64>)
 8041920:	681a      	ldr	r2, [r3, #0]
 8041922:	687b      	ldr	r3, [r7, #4]
 8041924:	4413      	add	r3, r2
 8041926:	4a05      	ldr	r2, [pc, #20]	; (804193c <_sbrk+0x64>)
 8041928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 804192a:	68fb      	ldr	r3, [r7, #12]
}
 804192c:	4618      	mov	r0, r3
 804192e:	3718      	adds	r7, #24
 8041930:	46bd      	mov	sp, r7
 8041932:	bd80      	pop	{r7, pc}
 8041934:	20030000 	.word	0x20030000
 8041938:	00000400 	.word	0x00000400
 804193c:	2000040c 	.word	0x2000040c
 8041940:	20000d58 	.word	0x20000d58

08041944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041944:	b480      	push	{r7}
 8041946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041948:	4b07      	ldr	r3, [pc, #28]	; (8041968 <SystemInit+0x24>)
 804194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804194e:	4a06      	ldr	r2, [pc, #24]	; (8041968 <SystemInit+0x24>)
 8041950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041958:	4b03      	ldr	r3, [pc, #12]	; (8041968 <SystemInit+0x24>)
 804195a:	4a04      	ldr	r2, [pc, #16]	; (804196c <SystemInit+0x28>)
 804195c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 804195e:	bf00      	nop
 8041960:	46bd      	mov	sp, r7
 8041962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041966:	4770      	bx	lr
 8041968:	e000ed00 	.word	0xe000ed00
 804196c:	08040000 	.word	0x08040000

08041970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8041970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80419a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041974:	480d      	ldr	r0, [pc, #52]	; (80419ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041976:	490e      	ldr	r1, [pc, #56]	; (80419b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041978:	4a0e      	ldr	r2, [pc, #56]	; (80419b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 804197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 804197c:	e002      	b.n	8041984 <LoopCopyDataInit>

0804197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041982:	3304      	adds	r3, #4

08041984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041988:	d3f9      	bcc.n	804197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 804198a:	4a0b      	ldr	r2, [pc, #44]	; (80419b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 804198c:	4c0b      	ldr	r4, [pc, #44]	; (80419bc <LoopFillZerobss+0x26>)
  movs r3, #0
 804198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041990:	e001      	b.n	8041996 <LoopFillZerobss>

08041992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041994:	3204      	adds	r2, #4

08041996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041998:	d3fb      	bcc.n	8041992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 804199a:	f7ff ffd3 	bl	8041944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 804199e:	f00a fecf 	bl	804c740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80419a2:	f7fe fdf7 	bl	8040594 <main>
  bx  lr    
 80419a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80419a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80419ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80419b0:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80419b4:	0804fc70 	.word	0x0804fc70
  ldr r2, =_sbss
 80419b8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80419bc:	20000d58 	.word	0x20000d58

080419c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80419c0:	e7fe      	b.n	80419c0 <ADC_IRQHandler>

080419c2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80419c2:	b580      	push	{r7, lr}
 80419c4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80419c6:	f000 fa5d 	bl	8041e84 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80419ca:	20ca      	movs	r0, #202	; 0xca
 80419cc:	f000 f95d 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80419d0:	20c3      	movs	r0, #195	; 0xc3
 80419d2:	f000 f967 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80419d6:	2008      	movs	r0, #8
 80419d8:	f000 f964 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80419dc:	2050      	movs	r0, #80	; 0x50
 80419de:	f000 f961 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80419e2:	20cf      	movs	r0, #207	; 0xcf
 80419e4:	f000 f951 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80419e8:	2000      	movs	r0, #0
 80419ea:	f000 f95b 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80419ee:	20c1      	movs	r0, #193	; 0xc1
 80419f0:	f000 f958 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80419f4:	2030      	movs	r0, #48	; 0x30
 80419f6:	f000 f955 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80419fa:	20ed      	movs	r0, #237	; 0xed
 80419fc:	f000 f945 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8041a00:	2064      	movs	r0, #100	; 0x64
 8041a02:	f000 f94f 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8041a06:	2003      	movs	r0, #3
 8041a08:	f000 f94c 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8041a0c:	2012      	movs	r0, #18
 8041a0e:	f000 f949 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8041a12:	2081      	movs	r0, #129	; 0x81
 8041a14:	f000 f946 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8041a18:	20e8      	movs	r0, #232	; 0xe8
 8041a1a:	f000 f936 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8041a1e:	2085      	movs	r0, #133	; 0x85
 8041a20:	f000 f940 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041a24:	2000      	movs	r0, #0
 8041a26:	f000 f93d 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8041a2a:	2078      	movs	r0, #120	; 0x78
 8041a2c:	f000 f93a 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8041a30:	20cb      	movs	r0, #203	; 0xcb
 8041a32:	f000 f92a 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8041a36:	2039      	movs	r0, #57	; 0x39
 8041a38:	f000 f934 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8041a3c:	202c      	movs	r0, #44	; 0x2c
 8041a3e:	f000 f931 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041a42:	2000      	movs	r0, #0
 8041a44:	f000 f92e 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8041a48:	2034      	movs	r0, #52	; 0x34
 8041a4a:	f000 f92b 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8041a4e:	2002      	movs	r0, #2
 8041a50:	f000 f928 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8041a54:	20f7      	movs	r0, #247	; 0xf7
 8041a56:	f000 f918 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8041a5a:	2020      	movs	r0, #32
 8041a5c:	f000 f922 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8041a60:	20ea      	movs	r0, #234	; 0xea
 8041a62:	f000 f912 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041a66:	2000      	movs	r0, #0
 8041a68:	f000 f91c 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041a6c:	2000      	movs	r0, #0
 8041a6e:	f000 f919 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8041a72:	20b1      	movs	r0, #177	; 0xb1
 8041a74:	f000 f909 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041a78:	2000      	movs	r0, #0
 8041a7a:	f000 f913 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8041a7e:	201b      	movs	r0, #27
 8041a80:	f000 f910 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041a84:	20b6      	movs	r0, #182	; 0xb6
 8041a86:	f000 f900 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041a8a:	200a      	movs	r0, #10
 8041a8c:	f000 f90a 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8041a90:	20a2      	movs	r0, #162	; 0xa2
 8041a92:	f000 f907 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8041a96:	20c0      	movs	r0, #192	; 0xc0
 8041a98:	f000 f8f7 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041a9c:	2010      	movs	r0, #16
 8041a9e:	f000 f901 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8041aa2:	20c1      	movs	r0, #193	; 0xc1
 8041aa4:	f000 f8f1 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041aa8:	2010      	movs	r0, #16
 8041aaa:	f000 f8fb 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8041aae:	20c5      	movs	r0, #197	; 0xc5
 8041ab0:	f000 f8eb 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8041ab4:	2045      	movs	r0, #69	; 0x45
 8041ab6:	f000 f8f5 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8041aba:	2015      	movs	r0, #21
 8041abc:	f000 f8f2 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8041ac0:	20c7      	movs	r0, #199	; 0xc7
 8041ac2:	f000 f8e2 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8041ac6:	2090      	movs	r0, #144	; 0x90
 8041ac8:	f000 f8ec 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8041acc:	2036      	movs	r0, #54	; 0x36
 8041ace:	f000 f8dc 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8041ad2:	20c8      	movs	r0, #200	; 0xc8
 8041ad4:	f000 f8e6 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8041ad8:	20f2      	movs	r0, #242	; 0xf2
 8041ada:	f000 f8d6 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041ade:	2000      	movs	r0, #0
 8041ae0:	f000 f8e0 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8041ae4:	20b0      	movs	r0, #176	; 0xb0
 8041ae6:	f000 f8d0 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8041aea:	20c2      	movs	r0, #194	; 0xc2
 8041aec:	f000 f8da 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041af0:	20b6      	movs	r0, #182	; 0xb6
 8041af2:	f000 f8ca 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041af6:	200a      	movs	r0, #10
 8041af8:	f000 f8d4 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8041afc:	20a7      	movs	r0, #167	; 0xa7
 8041afe:	f000 f8d1 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8041b02:	2027      	movs	r0, #39	; 0x27
 8041b04:	f000 f8ce 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8041b08:	2004      	movs	r0, #4
 8041b0a:	f000 f8cb 	bl	8041ca4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8041b0e:	202a      	movs	r0, #42	; 0x2a
 8041b10:	f000 f8bb 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041b14:	2000      	movs	r0, #0
 8041b16:	f000 f8c5 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041b1a:	2000      	movs	r0, #0
 8041b1c:	f000 f8c2 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041b20:	2000      	movs	r0, #0
 8041b22:	f000 f8bf 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8041b26:	20ef      	movs	r0, #239	; 0xef
 8041b28:	f000 f8bc 	bl	8041ca4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8041b2c:	202b      	movs	r0, #43	; 0x2b
 8041b2e:	f000 f8ac 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041b32:	2000      	movs	r0, #0
 8041b34:	f000 f8b6 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041b38:	2000      	movs	r0, #0
 8041b3a:	f000 f8b3 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8041b3e:	2001      	movs	r0, #1
 8041b40:	f000 f8b0 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8041b44:	203f      	movs	r0, #63	; 0x3f
 8041b46:	f000 f8ad 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8041b4a:	20f6      	movs	r0, #246	; 0xf6
 8041b4c:	f000 f89d 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8041b50:	2001      	movs	r0, #1
 8041b52:	f000 f8a7 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041b56:	2000      	movs	r0, #0
 8041b58:	f000 f8a4 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8041b5c:	2006      	movs	r0, #6
 8041b5e:	f000 f8a1 	bl	8041ca4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8041b62:	202c      	movs	r0, #44	; 0x2c
 8041b64:	f000 f891 	bl	8041c8a <ili9341_WriteReg>
  LCD_Delay(200);
 8041b68:	20c8      	movs	r0, #200	; 0xc8
 8041b6a:	f000 fa79 	bl	8042060 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8041b6e:	2026      	movs	r0, #38	; 0x26
 8041b70:	f000 f88b 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8041b74:	2001      	movs	r0, #1
 8041b76:	f000 f895 	bl	8041ca4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8041b7a:	20e0      	movs	r0, #224	; 0xe0
 8041b7c:	f000 f885 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8041b80:	200f      	movs	r0, #15
 8041b82:	f000 f88f 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8041b86:	2029      	movs	r0, #41	; 0x29
 8041b88:	f000 f88c 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8041b8c:	2024      	movs	r0, #36	; 0x24
 8041b8e:	f000 f889 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8041b92:	200c      	movs	r0, #12
 8041b94:	f000 f886 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8041b98:	200e      	movs	r0, #14
 8041b9a:	f000 f883 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8041b9e:	2009      	movs	r0, #9
 8041ba0:	f000 f880 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8041ba4:	204e      	movs	r0, #78	; 0x4e
 8041ba6:	f000 f87d 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8041baa:	2078      	movs	r0, #120	; 0x78
 8041bac:	f000 f87a 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8041bb0:	203c      	movs	r0, #60	; 0x3c
 8041bb2:	f000 f877 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8041bb6:	2009      	movs	r0, #9
 8041bb8:	f000 f874 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8041bbc:	2013      	movs	r0, #19
 8041bbe:	f000 f871 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8041bc2:	2005      	movs	r0, #5
 8041bc4:	f000 f86e 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8041bc8:	2017      	movs	r0, #23
 8041bca:	f000 f86b 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8041bce:	2011      	movs	r0, #17
 8041bd0:	f000 f868 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041bd4:	2000      	movs	r0, #0
 8041bd6:	f000 f865 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8041bda:	20e1      	movs	r0, #225	; 0xe1
 8041bdc:	f000 f855 	bl	8041c8a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041be0:	2000      	movs	r0, #0
 8041be2:	f000 f85f 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8041be6:	2016      	movs	r0, #22
 8041be8:	f000 f85c 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8041bec:	201b      	movs	r0, #27
 8041bee:	f000 f859 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8041bf2:	2004      	movs	r0, #4
 8041bf4:	f000 f856 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8041bf8:	2011      	movs	r0, #17
 8041bfa:	f000 f853 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8041bfe:	2007      	movs	r0, #7
 8041c00:	f000 f850 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8041c04:	2031      	movs	r0, #49	; 0x31
 8041c06:	f000 f84d 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8041c0a:	2033      	movs	r0, #51	; 0x33
 8041c0c:	f000 f84a 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8041c10:	2042      	movs	r0, #66	; 0x42
 8041c12:	f000 f847 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8041c16:	2005      	movs	r0, #5
 8041c18:	f000 f844 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8041c1c:	200c      	movs	r0, #12
 8041c1e:	f000 f841 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8041c22:	200a      	movs	r0, #10
 8041c24:	f000 f83e 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8041c28:	2028      	movs	r0, #40	; 0x28
 8041c2a:	f000 f83b 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8041c2e:	202f      	movs	r0, #47	; 0x2f
 8041c30:	f000 f838 	bl	8041ca4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8041c34:	200f      	movs	r0, #15
 8041c36:	f000 f835 	bl	8041ca4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8041c3a:	2011      	movs	r0, #17
 8041c3c:	f000 f825 	bl	8041c8a <ili9341_WriteReg>
  LCD_Delay(200);
 8041c40:	20c8      	movs	r0, #200	; 0xc8
 8041c42:	f000 fa0d 	bl	8042060 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041c46:	2029      	movs	r0, #41	; 0x29
 8041c48:	f000 f81f 	bl	8041c8a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8041c4c:	202c      	movs	r0, #44	; 0x2c
 8041c4e:	f000 f81c 	bl	8041c8a <ili9341_WriteReg>
}
 8041c52:	bf00      	nop
 8041c54:	bd80      	pop	{r7, pc}

08041c56 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8041c56:	b580      	push	{r7, lr}
 8041c58:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8041c5a:	f000 f913 	bl	8041e84 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8041c5e:	2103      	movs	r1, #3
 8041c60:	20d3      	movs	r0, #211	; 0xd3
 8041c62:	f000 f82c 	bl	8041cbe <ili9341_ReadData>
 8041c66:	4603      	mov	r3, r0
 8041c68:	b29b      	uxth	r3, r3
}
 8041c6a:	4618      	mov	r0, r3
 8041c6c:	bd80      	pop	{r7, pc}

08041c6e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8041c6e:	b580      	push	{r7, lr}
 8041c70:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8041c72:	2029      	movs	r0, #41	; 0x29
 8041c74:	f000 f809 	bl	8041c8a <ili9341_WriteReg>
}
 8041c78:	bf00      	nop
 8041c7a:	bd80      	pop	{r7, pc}

08041c7c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8041c7c:	b580      	push	{r7, lr}
 8041c7e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8041c80:	2028      	movs	r0, #40	; 0x28
 8041c82:	f000 f802 	bl	8041c8a <ili9341_WriteReg>
}
 8041c86:	bf00      	nop
 8041c88:	bd80      	pop	{r7, pc}

08041c8a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8041c8a:	b580      	push	{r7, lr}
 8041c8c:	b082      	sub	sp, #8
 8041c8e:	af00      	add	r7, sp, #0
 8041c90:	4603      	mov	r3, r0
 8041c92:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8041c94:	79fb      	ldrb	r3, [r7, #7]
 8041c96:	4618      	mov	r0, r3
 8041c98:	f000 f98e 	bl	8041fb8 <LCD_IO_WriteReg>
}
 8041c9c:	bf00      	nop
 8041c9e:	3708      	adds	r7, #8
 8041ca0:	46bd      	mov	sp, r7
 8041ca2:	bd80      	pop	{r7, pc}

08041ca4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8041ca4:	b580      	push	{r7, lr}
 8041ca6:	b082      	sub	sp, #8
 8041ca8:	af00      	add	r7, sp, #0
 8041caa:	4603      	mov	r3, r0
 8041cac:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8041cae:	88fb      	ldrh	r3, [r7, #6]
 8041cb0:	4618      	mov	r0, r3
 8041cb2:	f000 f95f 	bl	8041f74 <LCD_IO_WriteData>
}
 8041cb6:	bf00      	nop
 8041cb8:	3708      	adds	r7, #8
 8041cba:	46bd      	mov	sp, r7
 8041cbc:	bd80      	pop	{r7, pc}

08041cbe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8041cbe:	b580      	push	{r7, lr}
 8041cc0:	b082      	sub	sp, #8
 8041cc2:	af00      	add	r7, sp, #0
 8041cc4:	4603      	mov	r3, r0
 8041cc6:	460a      	mov	r2, r1
 8041cc8:	80fb      	strh	r3, [r7, #6]
 8041cca:	4613      	mov	r3, r2
 8041ccc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8041cce:	797a      	ldrb	r2, [r7, #5]
 8041cd0:	88fb      	ldrh	r3, [r7, #6]
 8041cd2:	4611      	mov	r1, r2
 8041cd4:	4618      	mov	r0, r3
 8041cd6:	f000 f991 	bl	8041ffc <LCD_IO_ReadData>
 8041cda:	4603      	mov	r3, r0
}
 8041cdc:	4618      	mov	r0, r3
 8041cde:	3708      	adds	r7, #8
 8041ce0:	46bd      	mov	sp, r7
 8041ce2:	bd80      	pop	{r7, pc}

08041ce4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8041ce4:	b480      	push	{r7}
 8041ce6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8041ce8:	23f0      	movs	r3, #240	; 0xf0
}
 8041cea:	4618      	mov	r0, r3
 8041cec:	46bd      	mov	sp, r7
 8041cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cf2:	4770      	bx	lr

08041cf4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8041cf4:	b480      	push	{r7}
 8041cf6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8041cf8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8041cfc:	4618      	mov	r0, r3
 8041cfe:	46bd      	mov	sp, r7
 8041d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d04:	4770      	bx	lr
	...

08041d08 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8041d08:	b580      	push	{r7, lr}
 8041d0a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8041d0c:	4819      	ldr	r0, [pc, #100]	; (8041d74 <SPIx_Init+0x6c>)
 8041d0e:	f005 ff92 	bl	8047c36 <HAL_SPI_GetState>
 8041d12:	4603      	mov	r3, r0
 8041d14:	2b00      	cmp	r3, #0
 8041d16:	d12b      	bne.n	8041d70 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8041d18:	4b16      	ldr	r3, [pc, #88]	; (8041d74 <SPIx_Init+0x6c>)
 8041d1a:	4a17      	ldr	r2, [pc, #92]	; (8041d78 <SPIx_Init+0x70>)
 8041d1c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8041d1e:	4b15      	ldr	r3, [pc, #84]	; (8041d74 <SPIx_Init+0x6c>)
 8041d20:	2218      	movs	r2, #24
 8041d22:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8041d24:	4b13      	ldr	r3, [pc, #76]	; (8041d74 <SPIx_Init+0x6c>)
 8041d26:	2200      	movs	r2, #0
 8041d28:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8041d2a:	4b12      	ldr	r3, [pc, #72]	; (8041d74 <SPIx_Init+0x6c>)
 8041d2c:	2200      	movs	r2, #0
 8041d2e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8041d30:	4b10      	ldr	r3, [pc, #64]	; (8041d74 <SPIx_Init+0x6c>)
 8041d32:	2200      	movs	r2, #0
 8041d34:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8041d36:	4b0f      	ldr	r3, [pc, #60]	; (8041d74 <SPIx_Init+0x6c>)
 8041d38:	2200      	movs	r2, #0
 8041d3a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8041d3c:	4b0d      	ldr	r3, [pc, #52]	; (8041d74 <SPIx_Init+0x6c>)
 8041d3e:	2207      	movs	r2, #7
 8041d40:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8041d42:	4b0c      	ldr	r3, [pc, #48]	; (8041d74 <SPIx_Init+0x6c>)
 8041d44:	2200      	movs	r2, #0
 8041d46:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8041d48:	4b0a      	ldr	r3, [pc, #40]	; (8041d74 <SPIx_Init+0x6c>)
 8041d4a:	2200      	movs	r2, #0
 8041d4c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8041d4e:	4b09      	ldr	r3, [pc, #36]	; (8041d74 <SPIx_Init+0x6c>)
 8041d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041d54:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8041d56:	4b07      	ldr	r3, [pc, #28]	; (8041d74 <SPIx_Init+0x6c>)
 8041d58:	2200      	movs	r2, #0
 8041d5a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8041d5c:	4b05      	ldr	r3, [pc, #20]	; (8041d74 <SPIx_Init+0x6c>)
 8041d5e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041d62:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8041d64:	4803      	ldr	r0, [pc, #12]	; (8041d74 <SPIx_Init+0x6c>)
 8041d66:	f000 f853 	bl	8041e10 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8041d6a:	4802      	ldr	r0, [pc, #8]	; (8041d74 <SPIx_Init+0x6c>)
 8041d6c:	f005 fac3 	bl	80472f6 <HAL_SPI_Init>
  } 
}
 8041d70:	bf00      	nop
 8041d72:	bd80      	pop	{r7, pc}
 8041d74:	20000410 	.word	0x20000410
 8041d78:	40015000 	.word	0x40015000

08041d7c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8041d7c:	b580      	push	{r7, lr}
 8041d7e:	b084      	sub	sp, #16
 8041d80:	af00      	add	r7, sp, #0
 8041d82:	4603      	mov	r3, r0
 8041d84:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8041d86:	2300      	movs	r3, #0
 8041d88:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8041d8a:	79fb      	ldrb	r3, [r7, #7]
 8041d8c:	b29a      	uxth	r2, r3
 8041d8e:	4b09      	ldr	r3, [pc, #36]	; (8041db4 <SPIx_Read+0x38>)
 8041d90:	681b      	ldr	r3, [r3, #0]
 8041d92:	f107 0108 	add.w	r1, r7, #8
 8041d96:	4808      	ldr	r0, [pc, #32]	; (8041db8 <SPIx_Read+0x3c>)
 8041d98:	f005 fc9a 	bl	80476d0 <HAL_SPI_Receive>
 8041d9c:	4603      	mov	r3, r0
 8041d9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041da0:	7bfb      	ldrb	r3, [r7, #15]
 8041da2:	2b00      	cmp	r3, #0
 8041da4:	d001      	beq.n	8041daa <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041da6:	f000 f827 	bl	8041df8 <SPIx_Error>
  }
  
  return readvalue;
 8041daa:	68bb      	ldr	r3, [r7, #8]
}
 8041dac:	4618      	mov	r0, r3
 8041dae:	3710      	adds	r7, #16
 8041db0:	46bd      	mov	sp, r7
 8041db2:	bd80      	pop	{r7, pc}
 8041db4:	2000003c 	.word	0x2000003c
 8041db8:	20000410 	.word	0x20000410

08041dbc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8041dbc:	b580      	push	{r7, lr}
 8041dbe:	b084      	sub	sp, #16
 8041dc0:	af00      	add	r7, sp, #0
 8041dc2:	4603      	mov	r3, r0
 8041dc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8041dc6:	2300      	movs	r3, #0
 8041dc8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8041dca:	4b09      	ldr	r3, [pc, #36]	; (8041df0 <SPIx_Write+0x34>)
 8041dcc:	681b      	ldr	r3, [r3, #0]
 8041dce:	1db9      	adds	r1, r7, #6
 8041dd0:	2201      	movs	r2, #1
 8041dd2:	4808      	ldr	r0, [pc, #32]	; (8041df4 <SPIx_Write+0x38>)
 8041dd4:	f005 fb40 	bl	8047458 <HAL_SPI_Transmit>
 8041dd8:	4603      	mov	r3, r0
 8041dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8041ddc:	7bfb      	ldrb	r3, [r7, #15]
 8041dde:	2b00      	cmp	r3, #0
 8041de0:	d001      	beq.n	8041de6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8041de2:	f000 f809 	bl	8041df8 <SPIx_Error>
  }
}
 8041de6:	bf00      	nop
 8041de8:	3710      	adds	r7, #16
 8041dea:	46bd      	mov	sp, r7
 8041dec:	bd80      	pop	{r7, pc}
 8041dee:	bf00      	nop
 8041df0:	2000003c 	.word	0x2000003c
 8041df4:	20000410 	.word	0x20000410

08041df8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8041df8:	b580      	push	{r7, lr}
 8041dfa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8041dfc:	4803      	ldr	r0, [pc, #12]	; (8041e0c <SPIx_Error+0x14>)
 8041dfe:	f005 fb03 	bl	8047408 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8041e02:	f7ff ff81 	bl	8041d08 <SPIx_Init>
}
 8041e06:	bf00      	nop
 8041e08:	bd80      	pop	{r7, pc}
 8041e0a:	bf00      	nop
 8041e0c:	20000410 	.word	0x20000410

08041e10 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8041e10:	b580      	push	{r7, lr}
 8041e12:	b08a      	sub	sp, #40	; 0x28
 8041e14:	af00      	add	r7, sp, #0
 8041e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8041e18:	2300      	movs	r3, #0
 8041e1a:	613b      	str	r3, [r7, #16]
 8041e1c:	4b17      	ldr	r3, [pc, #92]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041e20:	4a16      	ldr	r2, [pc, #88]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041e26:	6453      	str	r3, [r2, #68]	; 0x44
 8041e28:	4b14      	ldr	r3, [pc, #80]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041e30:	613b      	str	r3, [r7, #16]
 8041e32:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8041e34:	2300      	movs	r3, #0
 8041e36:	60fb      	str	r3, [r7, #12]
 8041e38:	4b10      	ldr	r3, [pc, #64]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e3c:	4a0f      	ldr	r2, [pc, #60]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e3e:	f043 0320 	orr.w	r3, r3, #32
 8041e42:	6313      	str	r3, [r2, #48]	; 0x30
 8041e44:	4b0d      	ldr	r3, [pc, #52]	; (8041e7c <SPIx_MspInit+0x6c>)
 8041e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e48:	f003 0320 	and.w	r3, r3, #32
 8041e4c:	60fb      	str	r3, [r7, #12]
 8041e4e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8041e50:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8041e56:	2302      	movs	r3, #2
 8041e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8041e5a:	2302      	movs	r3, #2
 8041e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8041e5e:	2301      	movs	r3, #1
 8041e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8041e62:	2305      	movs	r3, #5
 8041e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8041e66:	f107 0314 	add.w	r3, r7, #20
 8041e6a:	4619      	mov	r1, r3
 8041e6c:	4804      	ldr	r0, [pc, #16]	; (8041e80 <SPIx_MspInit+0x70>)
 8041e6e:	f001 fe63 	bl	8043b38 <HAL_GPIO_Init>
}
 8041e72:	bf00      	nop
 8041e74:	3728      	adds	r7, #40	; 0x28
 8041e76:	46bd      	mov	sp, r7
 8041e78:	bd80      	pop	{r7, pc}
 8041e7a:	bf00      	nop
 8041e7c:	40023800 	.word	0x40023800
 8041e80:	40021400 	.word	0x40021400

08041e84 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8041e84:	b580      	push	{r7, lr}
 8041e86:	b088      	sub	sp, #32
 8041e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8041e8a:	4b36      	ldr	r3, [pc, #216]	; (8041f64 <LCD_IO_Init+0xe0>)
 8041e8c:	781b      	ldrb	r3, [r3, #0]
 8041e8e:	2b00      	cmp	r3, #0
 8041e90:	d164      	bne.n	8041f5c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8041e92:	4b34      	ldr	r3, [pc, #208]	; (8041f64 <LCD_IO_Init+0xe0>)
 8041e94:	2201      	movs	r2, #1
 8041e96:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8041e98:	2300      	movs	r3, #0
 8041e9a:	60bb      	str	r3, [r7, #8]
 8041e9c:	4b32      	ldr	r3, [pc, #200]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ea0:	4a31      	ldr	r2, [pc, #196]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041ea2:	f043 0308 	orr.w	r3, r3, #8
 8041ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8041ea8:	4b2f      	ldr	r3, [pc, #188]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041eac:	f003 0308 	and.w	r3, r3, #8
 8041eb0:	60bb      	str	r3, [r7, #8]
 8041eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8041eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041eba:	2301      	movs	r3, #1
 8041ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041ebe:	2300      	movs	r3, #0
 8041ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041ec2:	2302      	movs	r3, #2
 8041ec4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8041ec6:	f107 030c 	add.w	r3, r7, #12
 8041eca:	4619      	mov	r1, r3
 8041ecc:	4827      	ldr	r0, [pc, #156]	; (8041f6c <LCD_IO_Init+0xe8>)
 8041ece:	f001 fe33 	bl	8043b38 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8041ed2:	2300      	movs	r3, #0
 8041ed4:	607b      	str	r3, [r7, #4]
 8041ed6:	4b24      	ldr	r3, [pc, #144]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041eda:	4a23      	ldr	r2, [pc, #140]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041edc:	f043 0308 	orr.w	r3, r3, #8
 8041ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8041ee2:	4b21      	ldr	r3, [pc, #132]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ee6:	f003 0308 	and.w	r3, r3, #8
 8041eea:	607b      	str	r3, [r7, #4]
 8041eec:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8041eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041ef4:	2301      	movs	r3, #1
 8041ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041ef8:	2300      	movs	r3, #0
 8041efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041efc:	2302      	movs	r3, #2
 8041efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8041f00:	f107 030c 	add.w	r3, r7, #12
 8041f04:	4619      	mov	r1, r3
 8041f06:	4819      	ldr	r0, [pc, #100]	; (8041f6c <LCD_IO_Init+0xe8>)
 8041f08:	f001 fe16 	bl	8043b38 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8041f0c:	2300      	movs	r3, #0
 8041f0e:	603b      	str	r3, [r7, #0]
 8041f10:	4b15      	ldr	r3, [pc, #84]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041f14:	4a14      	ldr	r2, [pc, #80]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041f16:	f043 0304 	orr.w	r3, r3, #4
 8041f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8041f1c:	4b12      	ldr	r3, [pc, #72]	; (8041f68 <LCD_IO_Init+0xe4>)
 8041f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041f20:	f003 0304 	and.w	r3, r3, #4
 8041f24:	603b      	str	r3, [r7, #0]
 8041f26:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8041f28:	2304      	movs	r3, #4
 8041f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8041f2c:	2301      	movs	r3, #1
 8041f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8041f30:	2300      	movs	r3, #0
 8041f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8041f34:	2302      	movs	r3, #2
 8041f36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8041f38:	f107 030c 	add.w	r3, r7, #12
 8041f3c:	4619      	mov	r1, r3
 8041f3e:	480c      	ldr	r0, [pc, #48]	; (8041f70 <LCD_IO_Init+0xec>)
 8041f40:	f001 fdfa 	bl	8043b38 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8041f44:	2200      	movs	r2, #0
 8041f46:	2104      	movs	r1, #4
 8041f48:	4809      	ldr	r0, [pc, #36]	; (8041f70 <LCD_IO_Init+0xec>)
 8041f4a:	f002 f8ad 	bl	80440a8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8041f4e:	2201      	movs	r2, #1
 8041f50:	2104      	movs	r1, #4
 8041f52:	4807      	ldr	r0, [pc, #28]	; (8041f70 <LCD_IO_Init+0xec>)
 8041f54:	f002 f8a8 	bl	80440a8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8041f58:	f7ff fed6 	bl	8041d08 <SPIx_Init>
  }
}
 8041f5c:	bf00      	nop
 8041f5e:	3720      	adds	r7, #32
 8041f60:	46bd      	mov	sp, r7
 8041f62:	bd80      	pop	{r7, pc}
 8041f64:	20000468 	.word	0x20000468
 8041f68:	40023800 	.word	0x40023800
 8041f6c:	40020c00 	.word	0x40020c00
 8041f70:	40020800 	.word	0x40020800

08041f74 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8041f74:	b580      	push	{r7, lr}
 8041f76:	b082      	sub	sp, #8
 8041f78:	af00      	add	r7, sp, #0
 8041f7a:	4603      	mov	r3, r0
 8041f7c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8041f7e:	2201      	movs	r2, #1
 8041f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041f84:	480a      	ldr	r0, [pc, #40]	; (8041fb0 <LCD_IO_WriteData+0x3c>)
 8041f86:	f002 f88f 	bl	80440a8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8041f8a:	2200      	movs	r2, #0
 8041f8c:	2104      	movs	r1, #4
 8041f8e:	4809      	ldr	r0, [pc, #36]	; (8041fb4 <LCD_IO_WriteData+0x40>)
 8041f90:	f002 f88a 	bl	80440a8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8041f94:	88fb      	ldrh	r3, [r7, #6]
 8041f96:	4618      	mov	r0, r3
 8041f98:	f7ff ff10 	bl	8041dbc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041f9c:	2201      	movs	r2, #1
 8041f9e:	2104      	movs	r1, #4
 8041fa0:	4804      	ldr	r0, [pc, #16]	; (8041fb4 <LCD_IO_WriteData+0x40>)
 8041fa2:	f002 f881 	bl	80440a8 <HAL_GPIO_WritePin>
}
 8041fa6:	bf00      	nop
 8041fa8:	3708      	adds	r7, #8
 8041faa:	46bd      	mov	sp, r7
 8041fac:	bd80      	pop	{r7, pc}
 8041fae:	bf00      	nop
 8041fb0:	40020c00 	.word	0x40020c00
 8041fb4:	40020800 	.word	0x40020800

08041fb8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8041fb8:	b580      	push	{r7, lr}
 8041fba:	b082      	sub	sp, #8
 8041fbc:	af00      	add	r7, sp, #0
 8041fbe:	4603      	mov	r3, r0
 8041fc0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8041fc2:	2200      	movs	r2, #0
 8041fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8041fc8:	480a      	ldr	r0, [pc, #40]	; (8041ff4 <LCD_IO_WriteReg+0x3c>)
 8041fca:	f002 f86d 	bl	80440a8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8041fce:	2200      	movs	r2, #0
 8041fd0:	2104      	movs	r1, #4
 8041fd2:	4809      	ldr	r0, [pc, #36]	; (8041ff8 <LCD_IO_WriteReg+0x40>)
 8041fd4:	f002 f868 	bl	80440a8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8041fd8:	79fb      	ldrb	r3, [r7, #7]
 8041fda:	b29b      	uxth	r3, r3
 8041fdc:	4618      	mov	r0, r3
 8041fde:	f7ff feed 	bl	8041dbc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8041fe2:	2201      	movs	r2, #1
 8041fe4:	2104      	movs	r1, #4
 8041fe6:	4804      	ldr	r0, [pc, #16]	; (8041ff8 <LCD_IO_WriteReg+0x40>)
 8041fe8:	f002 f85e 	bl	80440a8 <HAL_GPIO_WritePin>
}
 8041fec:	bf00      	nop
 8041fee:	3708      	adds	r7, #8
 8041ff0:	46bd      	mov	sp, r7
 8041ff2:	bd80      	pop	{r7, pc}
 8041ff4:	40020c00 	.word	0x40020c00
 8041ff8:	40020800 	.word	0x40020800

08041ffc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8041ffc:	b580      	push	{r7, lr}
 8041ffe:	b084      	sub	sp, #16
 8042000:	af00      	add	r7, sp, #0
 8042002:	4603      	mov	r3, r0
 8042004:	460a      	mov	r2, r1
 8042006:	80fb      	strh	r3, [r7, #6]
 8042008:	4613      	mov	r3, r2
 804200a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 804200c:	2300      	movs	r3, #0
 804200e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8042010:	2200      	movs	r2, #0
 8042012:	2104      	movs	r1, #4
 8042014:	4810      	ldr	r0, [pc, #64]	; (8042058 <LCD_IO_ReadData+0x5c>)
 8042016:	f002 f847 	bl	80440a8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 804201a:	2200      	movs	r2, #0
 804201c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042020:	480e      	ldr	r0, [pc, #56]	; (804205c <LCD_IO_ReadData+0x60>)
 8042022:	f002 f841 	bl	80440a8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8042026:	88fb      	ldrh	r3, [r7, #6]
 8042028:	4618      	mov	r0, r3
 804202a:	f7ff fec7 	bl	8041dbc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 804202e:	797b      	ldrb	r3, [r7, #5]
 8042030:	4618      	mov	r0, r3
 8042032:	f7ff fea3 	bl	8041d7c <SPIx_Read>
 8042036:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042038:	2201      	movs	r2, #1
 804203a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804203e:	4807      	ldr	r0, [pc, #28]	; (804205c <LCD_IO_ReadData+0x60>)
 8042040:	f002 f832 	bl	80440a8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8042044:	2201      	movs	r2, #1
 8042046:	2104      	movs	r1, #4
 8042048:	4803      	ldr	r0, [pc, #12]	; (8042058 <LCD_IO_ReadData+0x5c>)
 804204a:	f002 f82d 	bl	80440a8 <HAL_GPIO_WritePin>
  
  return readvalue;
 804204e:	68fb      	ldr	r3, [r7, #12]
}
 8042050:	4618      	mov	r0, r3
 8042052:	3710      	adds	r7, #16
 8042054:	46bd      	mov	sp, r7
 8042056:	bd80      	pop	{r7, pc}
 8042058:	40020800 	.word	0x40020800
 804205c:	40020c00 	.word	0x40020c00

08042060 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8042060:	b580      	push	{r7, lr}
 8042062:	b082      	sub	sp, #8
 8042064:	af00      	add	r7, sp, #0
 8042066:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8042068:	6878      	ldr	r0, [r7, #4]
 804206a:	f000 fecd 	bl	8042e08 <HAL_Delay>
}
 804206e:	bf00      	nop
 8042070:	3708      	adds	r7, #8
 8042072:	46bd      	mov	sp, r7
 8042074:	bd80      	pop	{r7, pc}
	...

08042078 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8042078:	b580      	push	{r7, lr}
 804207a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 804207c:	4b2d      	ldr	r3, [pc, #180]	; (8042134 <BSP_LCD_Init+0xbc>)
 804207e:	4a2e      	ldr	r2, [pc, #184]	; (8042138 <BSP_LCD_Init+0xc0>)
 8042080:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8042082:	4b2c      	ldr	r3, [pc, #176]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042084:	2209      	movs	r2, #9
 8042086:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8042088:	4b2a      	ldr	r3, [pc, #168]	; (8042134 <BSP_LCD_Init+0xbc>)
 804208a:	2201      	movs	r2, #1
 804208c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 804208e:	4b29      	ldr	r3, [pc, #164]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042090:	221d      	movs	r2, #29
 8042092:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8042094:	4b27      	ldr	r3, [pc, #156]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042096:	2203      	movs	r2, #3
 8042098:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 804209a:	4b26      	ldr	r3, [pc, #152]	; (8042134 <BSP_LCD_Init+0xbc>)
 804209c:	f240 120d 	movw	r2, #269	; 0x10d
 80420a0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80420a2:	4b24      	ldr	r3, [pc, #144]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420a4:	f240 1243 	movw	r2, #323	; 0x143
 80420a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80420aa:	4b22      	ldr	r3, [pc, #136]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420ac:	f240 1217 	movw	r2, #279	; 0x117
 80420b0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80420b2:	4b20      	ldr	r3, [pc, #128]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420b4:	f240 1247 	movw	r2, #327	; 0x147
 80420b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80420ba:	4b1e      	ldr	r3, [pc, #120]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420bc:	2200      	movs	r2, #0
 80420be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80420c2:	4b1c      	ldr	r3, [pc, #112]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420c4:	2200      	movs	r2, #0
 80420c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80420ca:	4b1a      	ldr	r3, [pc, #104]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420cc:	2200      	movs	r2, #0
 80420ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80420d2:	4b1a      	ldr	r3, [pc, #104]	; (804213c <BSP_LCD_Init+0xc4>)
 80420d4:	2208      	movs	r2, #8
 80420d6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80420d8:	4b18      	ldr	r3, [pc, #96]	; (804213c <BSP_LCD_Init+0xc4>)
 80420da:	22c0      	movs	r2, #192	; 0xc0
 80420dc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80420de:	4b17      	ldr	r3, [pc, #92]	; (804213c <BSP_LCD_Init+0xc4>)
 80420e0:	2204      	movs	r2, #4
 80420e2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80420e4:	4b15      	ldr	r3, [pc, #84]	; (804213c <BSP_LCD_Init+0xc4>)
 80420e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80420ea:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80420ec:	4813      	ldr	r0, [pc, #76]	; (804213c <BSP_LCD_Init+0xc4>)
 80420ee:	f004 feb1 	bl	8046e54 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80420f2:	4b10      	ldr	r3, [pc, #64]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420f4:	2200      	movs	r2, #0
 80420f6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80420f8:	4b0e      	ldr	r3, [pc, #56]	; (8042134 <BSP_LCD_Init+0xbc>)
 80420fa:	2200      	movs	r2, #0
 80420fc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80420fe:	4b0d      	ldr	r3, [pc, #52]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042100:	2200      	movs	r2, #0
 8042102:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8042104:	4b0b      	ldr	r3, [pc, #44]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042106:	2200      	movs	r2, #0
 8042108:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 804210a:	f000 fa83 	bl	8042614 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 804210e:	4809      	ldr	r0, [pc, #36]	; (8042134 <BSP_LCD_Init+0xbc>)
 8042110:	f003 fdc6 	bl	8045ca0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8042114:	4b0a      	ldr	r3, [pc, #40]	; (8042140 <BSP_LCD_Init+0xc8>)
 8042116:	4a0b      	ldr	r2, [pc, #44]	; (8042144 <BSP_LCD_Init+0xcc>)
 8042118:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 804211a:	4b09      	ldr	r3, [pc, #36]	; (8042140 <BSP_LCD_Init+0xc8>)
 804211c:	681b      	ldr	r3, [r3, #0]
 804211e:	681b      	ldr	r3, [r3, #0]
 8042120:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8042122:	f000 fc65 	bl	80429f0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8042126:	4808      	ldr	r0, [pc, #32]	; (8042148 <BSP_LCD_Init+0xd0>)
 8042128:	f000 f920 	bl	804236c <BSP_LCD_SetFont>

  return LCD_OK;
 804212c:	2300      	movs	r3, #0
}  
 804212e:	4618      	mov	r0, r3
 8042130:	bd80      	pop	{r7, pc}
 8042132:	bf00      	nop
 8042134:	2000046c 	.word	0x2000046c
 8042138:	40016800 	.word	0x40016800
 804213c:	20000554 	.word	0x20000554
 8042140:	200005a0 	.word	0x200005a0
 8042144:	20000004 	.word	0x20000004
 8042148:	20000040 	.word	0x20000040

0804214c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 804214c:	b580      	push	{r7, lr}
 804214e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8042150:	4b03      	ldr	r3, [pc, #12]	; (8042160 <BSP_LCD_GetXSize+0x14>)
 8042152:	681b      	ldr	r3, [r3, #0]
 8042154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042156:	4798      	blx	r3
 8042158:	4603      	mov	r3, r0
}
 804215a:	4618      	mov	r0, r3
 804215c:	bd80      	pop	{r7, pc}
 804215e:	bf00      	nop
 8042160:	200005a0 	.word	0x200005a0

08042164 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8042164:	b580      	push	{r7, lr}
 8042166:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8042168:	4b03      	ldr	r3, [pc, #12]	; (8042178 <BSP_LCD_GetYSize+0x14>)
 804216a:	681b      	ldr	r3, [r3, #0]
 804216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804216e:	4798      	blx	r3
 8042170:	4603      	mov	r3, r0
}
 8042172:	4618      	mov	r0, r3
 8042174:	bd80      	pop	{r7, pc}
 8042176:	bf00      	nop
 8042178:	200005a0 	.word	0x200005a0

0804217c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 804217c:	b580      	push	{r7, lr}
 804217e:	b090      	sub	sp, #64	; 0x40
 8042180:	af00      	add	r7, sp, #0
 8042182:	4603      	mov	r3, r0
 8042184:	6039      	str	r1, [r7, #0]
 8042186:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8042188:	2300      	movs	r3, #0
 804218a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 804218c:	f7ff ffde 	bl	804214c <BSP_LCD_GetXSize>
 8042190:	4603      	mov	r3, r0
 8042192:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8042194:	2300      	movs	r3, #0
 8042196:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8042198:	f7ff ffe4 	bl	8042164 <BSP_LCD_GetYSize>
 804219c:	4603      	mov	r3, r0
 804219e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80421a0:	2300      	movs	r3, #0
 80421a2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80421a4:	683b      	ldr	r3, [r7, #0]
 80421a6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80421a8:	23ff      	movs	r3, #255	; 0xff
 80421aa:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80421ac:	2300      	movs	r3, #0
 80421ae:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80421b0:	2300      	movs	r3, #0
 80421b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80421b6:	2300      	movs	r3, #0
 80421b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80421bc:	2300      	movs	r3, #0
 80421be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80421c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80421c6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80421c8:	2307      	movs	r3, #7
 80421ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80421cc:	f7ff ffbe 	bl	804214c <BSP_LCD_GetXSize>
 80421d0:	4603      	mov	r3, r0
 80421d2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80421d4:	f7ff ffc6 	bl	8042164 <BSP_LCD_GetYSize>
 80421d8:	4603      	mov	r3, r0
 80421da:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80421dc:	88fa      	ldrh	r2, [r7, #6]
 80421de:	f107 030c 	add.w	r3, r7, #12
 80421e2:	4619      	mov	r1, r3
 80421e4:	4814      	ldr	r0, [pc, #80]	; (8042238 <BSP_LCD_LayerDefaultInit+0xbc>)
 80421e6:	f003 feed 	bl	8045fc4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80421ea:	88fa      	ldrh	r2, [r7, #6]
 80421ec:	4913      	ldr	r1, [pc, #76]	; (804223c <BSP_LCD_LayerDefaultInit+0xc0>)
 80421ee:	4613      	mov	r3, r2
 80421f0:	005b      	lsls	r3, r3, #1
 80421f2:	4413      	add	r3, r2
 80421f4:	009b      	lsls	r3, r3, #2
 80421f6:	440b      	add	r3, r1
 80421f8:	3304      	adds	r3, #4
 80421fa:	f04f 32ff 	mov.w	r2, #4294967295
 80421fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8042200:	88fa      	ldrh	r2, [r7, #6]
 8042202:	490e      	ldr	r1, [pc, #56]	; (804223c <BSP_LCD_LayerDefaultInit+0xc0>)
 8042204:	4613      	mov	r3, r2
 8042206:	005b      	lsls	r3, r3, #1
 8042208:	4413      	add	r3, r2
 804220a:	009b      	lsls	r3, r3, #2
 804220c:	440b      	add	r3, r1
 804220e:	3308      	adds	r3, #8
 8042210:	4a0b      	ldr	r2, [pc, #44]	; (8042240 <BSP_LCD_LayerDefaultInit+0xc4>)
 8042212:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8042214:	88fa      	ldrh	r2, [r7, #6]
 8042216:	4909      	ldr	r1, [pc, #36]	; (804223c <BSP_LCD_LayerDefaultInit+0xc0>)
 8042218:	4613      	mov	r3, r2
 804221a:	005b      	lsls	r3, r3, #1
 804221c:	4413      	add	r3, r2
 804221e:	009b      	lsls	r3, r3, #2
 8042220:	440b      	add	r3, r1
 8042222:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8042226:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8042228:	4803      	ldr	r0, [pc, #12]	; (8042238 <BSP_LCD_LayerDefaultInit+0xbc>)
 804222a:	f003 ff87 	bl	804613c <HAL_LTDC_EnableDither>
}
 804222e:	bf00      	nop
 8042230:	3740      	adds	r7, #64	; 0x40
 8042232:	46bd      	mov	sp, r7
 8042234:	bd80      	pop	{r7, pc}
 8042236:	bf00      	nop
 8042238:	2000046c 	.word	0x2000046c
 804223c:	20000588 	.word	0x20000588
 8042240:	20000040 	.word	0x20000040

08042244 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8042244:	b480      	push	{r7}
 8042246:	b083      	sub	sp, #12
 8042248:	af00      	add	r7, sp, #0
 804224a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 804224c:	4a04      	ldr	r2, [pc, #16]	; (8042260 <BSP_LCD_SelectLayer+0x1c>)
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	6013      	str	r3, [r2, #0]
}
 8042252:	bf00      	nop
 8042254:	370c      	adds	r7, #12
 8042256:	46bd      	mov	sp, r7
 8042258:	f85d 7b04 	ldr.w	r7, [sp], #4
 804225c:	4770      	bx	lr
 804225e:	bf00      	nop
 8042260:	20000584 	.word	0x20000584

08042264 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8042264:	b480      	push	{r7}
 8042266:	b083      	sub	sp, #12
 8042268:	af00      	add	r7, sp, #0
 804226a:	6078      	str	r0, [r7, #4]
 804226c:	460b      	mov	r3, r1
 804226e:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8042270:	78fb      	ldrb	r3, [r7, #3]
 8042272:	2b01      	cmp	r3, #1
 8042274:	d112      	bne.n	804229c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8042276:	4b19      	ldr	r3, [pc, #100]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 8042278:	681b      	ldr	r3, [r3, #0]
 804227a:	461a      	mov	r2, r3
 804227c:	687b      	ldr	r3, [r7, #4]
 804227e:	01db      	lsls	r3, r3, #7
 8042280:	4413      	add	r3, r2
 8042282:	3384      	adds	r3, #132	; 0x84
 8042284:	681b      	ldr	r3, [r3, #0]
 8042286:	4a15      	ldr	r2, [pc, #84]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 8042288:	6812      	ldr	r2, [r2, #0]
 804228a:	4611      	mov	r1, r2
 804228c:	687a      	ldr	r2, [r7, #4]
 804228e:	01d2      	lsls	r2, r2, #7
 8042290:	440a      	add	r2, r1
 8042292:	3284      	adds	r2, #132	; 0x84
 8042294:	f043 0301 	orr.w	r3, r3, #1
 8042298:	6013      	str	r3, [r2, #0]
 804229a:	e011      	b.n	80422c0 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 804229c:	4b0f      	ldr	r3, [pc, #60]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 804229e:	681b      	ldr	r3, [r3, #0]
 80422a0:	461a      	mov	r2, r3
 80422a2:	687b      	ldr	r3, [r7, #4]
 80422a4:	01db      	lsls	r3, r3, #7
 80422a6:	4413      	add	r3, r2
 80422a8:	3384      	adds	r3, #132	; 0x84
 80422aa:	681b      	ldr	r3, [r3, #0]
 80422ac:	4a0b      	ldr	r2, [pc, #44]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 80422ae:	6812      	ldr	r2, [r2, #0]
 80422b0:	4611      	mov	r1, r2
 80422b2:	687a      	ldr	r2, [r7, #4]
 80422b4:	01d2      	lsls	r2, r2, #7
 80422b6:	440a      	add	r2, r1
 80422b8:	3284      	adds	r2, #132	; 0x84
 80422ba:	f023 0301 	bic.w	r3, r3, #1
 80422be:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80422c0:	4b06      	ldr	r3, [pc, #24]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 80422c2:	681b      	ldr	r3, [r3, #0]
 80422c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80422c6:	4b05      	ldr	r3, [pc, #20]	; (80422dc <BSP_LCD_SetLayerVisible+0x78>)
 80422c8:	681b      	ldr	r3, [r3, #0]
 80422ca:	f042 0201 	orr.w	r2, r2, #1
 80422ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80422d0:	bf00      	nop
 80422d2:	370c      	adds	r7, #12
 80422d4:	46bd      	mov	sp, r7
 80422d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422da:	4770      	bx	lr
 80422dc:	2000046c 	.word	0x2000046c

080422e0 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80422e0:	b580      	push	{r7, lr}
 80422e2:	b082      	sub	sp, #8
 80422e4:	af00      	add	r7, sp, #0
 80422e6:	6078      	str	r0, [r7, #4]
 80422e8:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80422ea:	687a      	ldr	r2, [r7, #4]
 80422ec:	6839      	ldr	r1, [r7, #0]
 80422ee:	4805      	ldr	r0, [pc, #20]	; (8042304 <BSP_LCD_SetColorKeying+0x24>)
 80422f0:	f003 fea6 	bl	8046040 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80422f4:	6879      	ldr	r1, [r7, #4]
 80422f6:	4803      	ldr	r0, [pc, #12]	; (8042304 <BSP_LCD_SetColorKeying+0x24>)
 80422f8:	f003 fee6 	bl	80460c8 <HAL_LTDC_EnableColorKeying>
}
 80422fc:	bf00      	nop
 80422fe:	3708      	adds	r7, #8
 8042300:	46bd      	mov	sp, r7
 8042302:	bd80      	pop	{r7, pc}
 8042304:	2000046c 	.word	0x2000046c

08042308 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8042308:	b480      	push	{r7}
 804230a:	b083      	sub	sp, #12
 804230c:	af00      	add	r7, sp, #0
 804230e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8042310:	4b07      	ldr	r3, [pc, #28]	; (8042330 <BSP_LCD_SetTextColor+0x28>)
 8042312:	681a      	ldr	r2, [r3, #0]
 8042314:	4907      	ldr	r1, [pc, #28]	; (8042334 <BSP_LCD_SetTextColor+0x2c>)
 8042316:	4613      	mov	r3, r2
 8042318:	005b      	lsls	r3, r3, #1
 804231a:	4413      	add	r3, r2
 804231c:	009b      	lsls	r3, r3, #2
 804231e:	440b      	add	r3, r1
 8042320:	687a      	ldr	r2, [r7, #4]
 8042322:	601a      	str	r2, [r3, #0]
}
 8042324:	bf00      	nop
 8042326:	370c      	adds	r7, #12
 8042328:	46bd      	mov	sp, r7
 804232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804232e:	4770      	bx	lr
 8042330:	20000584 	.word	0x20000584
 8042334:	20000588 	.word	0x20000588

08042338 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8042338:	b480      	push	{r7}
 804233a:	b083      	sub	sp, #12
 804233c:	af00      	add	r7, sp, #0
 804233e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8042340:	4b08      	ldr	r3, [pc, #32]	; (8042364 <BSP_LCD_SetBackColor+0x2c>)
 8042342:	681a      	ldr	r2, [r3, #0]
 8042344:	4908      	ldr	r1, [pc, #32]	; (8042368 <BSP_LCD_SetBackColor+0x30>)
 8042346:	4613      	mov	r3, r2
 8042348:	005b      	lsls	r3, r3, #1
 804234a:	4413      	add	r3, r2
 804234c:	009b      	lsls	r3, r3, #2
 804234e:	440b      	add	r3, r1
 8042350:	3304      	adds	r3, #4
 8042352:	687a      	ldr	r2, [r7, #4]
 8042354:	601a      	str	r2, [r3, #0]
}
 8042356:	bf00      	nop
 8042358:	370c      	adds	r7, #12
 804235a:	46bd      	mov	sp, r7
 804235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042360:	4770      	bx	lr
 8042362:	bf00      	nop
 8042364:	20000584 	.word	0x20000584
 8042368:	20000588 	.word	0x20000588

0804236c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 804236c:	b480      	push	{r7}
 804236e:	b083      	sub	sp, #12
 8042370:	af00      	add	r7, sp, #0
 8042372:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8042374:	4b08      	ldr	r3, [pc, #32]	; (8042398 <BSP_LCD_SetFont+0x2c>)
 8042376:	681a      	ldr	r2, [r3, #0]
 8042378:	4908      	ldr	r1, [pc, #32]	; (804239c <BSP_LCD_SetFont+0x30>)
 804237a:	4613      	mov	r3, r2
 804237c:	005b      	lsls	r3, r3, #1
 804237e:	4413      	add	r3, r2
 8042380:	009b      	lsls	r3, r3, #2
 8042382:	440b      	add	r3, r1
 8042384:	3308      	adds	r3, #8
 8042386:	687a      	ldr	r2, [r7, #4]
 8042388:	601a      	str	r2, [r3, #0]
}
 804238a:	bf00      	nop
 804238c:	370c      	adds	r7, #12
 804238e:	46bd      	mov	sp, r7
 8042390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042394:	4770      	bx	lr
 8042396:	bf00      	nop
 8042398:	20000584 	.word	0x20000584
 804239c:	20000588 	.word	0x20000588

080423a0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80423a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80423a2:	b085      	sub	sp, #20
 80423a4:	af02      	add	r7, sp, #8
 80423a6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80423a8:	4b0f      	ldr	r3, [pc, #60]	; (80423e8 <BSP_LCD_Clear+0x48>)
 80423aa:	681c      	ldr	r4, [r3, #0]
 80423ac:	4b0e      	ldr	r3, [pc, #56]	; (80423e8 <BSP_LCD_Clear+0x48>)
 80423ae:	681b      	ldr	r3, [r3, #0]
 80423b0:	4a0e      	ldr	r2, [pc, #56]	; (80423ec <BSP_LCD_Clear+0x4c>)
 80423b2:	2134      	movs	r1, #52	; 0x34
 80423b4:	fb01 f303 	mul.w	r3, r1, r3
 80423b8:	4413      	add	r3, r2
 80423ba:	335c      	adds	r3, #92	; 0x5c
 80423bc:	681b      	ldr	r3, [r3, #0]
 80423be:	461e      	mov	r6, r3
 80423c0:	f7ff fec4 	bl	804214c <BSP_LCD_GetXSize>
 80423c4:	4605      	mov	r5, r0
 80423c6:	f7ff fecd 	bl	8042164 <BSP_LCD_GetYSize>
 80423ca:	4602      	mov	r2, r0
 80423cc:	687b      	ldr	r3, [r7, #4]
 80423ce:	9301      	str	r3, [sp, #4]
 80423d0:	2300      	movs	r3, #0
 80423d2:	9300      	str	r3, [sp, #0]
 80423d4:	4613      	mov	r3, r2
 80423d6:	462a      	mov	r2, r5
 80423d8:	4631      	mov	r1, r6
 80423da:	4620      	mov	r0, r4
 80423dc:	f000 fad0 	bl	8042980 <FillBuffer>
}
 80423e0:	bf00      	nop
 80423e2:	370c      	adds	r7, #12
 80423e4:	46bd      	mov	sp, r7
 80423e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80423e8:	20000584 	.word	0x20000584
 80423ec:	2000046c 	.word	0x2000046c

080423f0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80423f0:	b590      	push	{r4, r7, lr}
 80423f2:	b083      	sub	sp, #12
 80423f4:	af00      	add	r7, sp, #0
 80423f6:	4603      	mov	r3, r0
 80423f8:	80fb      	strh	r3, [r7, #6]
 80423fa:	460b      	mov	r3, r1
 80423fc:	80bb      	strh	r3, [r7, #4]
 80423fe:	4613      	mov	r3, r2
 8042400:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042402:	4b1b      	ldr	r3, [pc, #108]	; (8042470 <BSP_LCD_DisplayChar+0x80>)
 8042404:	681a      	ldr	r2, [r3, #0]
 8042406:	491b      	ldr	r1, [pc, #108]	; (8042474 <BSP_LCD_DisplayChar+0x84>)
 8042408:	4613      	mov	r3, r2
 804240a:	005b      	lsls	r3, r3, #1
 804240c:	4413      	add	r3, r2
 804240e:	009b      	lsls	r3, r3, #2
 8042410:	440b      	add	r3, r1
 8042412:	3308      	adds	r3, #8
 8042414:	681b      	ldr	r3, [r3, #0]
 8042416:	6819      	ldr	r1, [r3, #0]
 8042418:	78fb      	ldrb	r3, [r7, #3]
 804241a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 804241e:	4b14      	ldr	r3, [pc, #80]	; (8042470 <BSP_LCD_DisplayChar+0x80>)
 8042420:	681a      	ldr	r2, [r3, #0]
 8042422:	4c14      	ldr	r4, [pc, #80]	; (8042474 <BSP_LCD_DisplayChar+0x84>)
 8042424:	4613      	mov	r3, r2
 8042426:	005b      	lsls	r3, r3, #1
 8042428:	4413      	add	r3, r2
 804242a:	009b      	lsls	r3, r3, #2
 804242c:	4423      	add	r3, r4
 804242e:	3308      	adds	r3, #8
 8042430:	681b      	ldr	r3, [r3, #0]
 8042432:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042434:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042438:	4b0d      	ldr	r3, [pc, #52]	; (8042470 <BSP_LCD_DisplayChar+0x80>)
 804243a:	681a      	ldr	r2, [r3, #0]
 804243c:	4c0d      	ldr	r4, [pc, #52]	; (8042474 <BSP_LCD_DisplayChar+0x84>)
 804243e:	4613      	mov	r3, r2
 8042440:	005b      	lsls	r3, r3, #1
 8042442:	4413      	add	r3, r2
 8042444:	009b      	lsls	r3, r3, #2
 8042446:	4423      	add	r3, r4
 8042448:	3308      	adds	r3, #8
 804244a:	681b      	ldr	r3, [r3, #0]
 804244c:	889b      	ldrh	r3, [r3, #4]
 804244e:	3307      	adds	r3, #7
 8042450:	2b00      	cmp	r3, #0
 8042452:	da00      	bge.n	8042456 <BSP_LCD_DisplayChar+0x66>
 8042454:	3307      	adds	r3, #7
 8042456:	10db      	asrs	r3, r3, #3
 8042458:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 804245c:	18ca      	adds	r2, r1, r3
 804245e:	88b9      	ldrh	r1, [r7, #4]
 8042460:	88fb      	ldrh	r3, [r7, #6]
 8042462:	4618      	mov	r0, r3
 8042464:	f000 f9d2 	bl	804280c <DrawChar>
}
 8042468:	bf00      	nop
 804246a:	370c      	adds	r7, #12
 804246c:	46bd      	mov	sp, r7
 804246e:	bd90      	pop	{r4, r7, pc}
 8042470:	20000584 	.word	0x20000584
 8042474:	20000588 	.word	0x20000588

08042478 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8042478:	b5b0      	push	{r4, r5, r7, lr}
 804247a:	b088      	sub	sp, #32
 804247c:	af00      	add	r7, sp, #0
 804247e:	60ba      	str	r2, [r7, #8]
 8042480:	461a      	mov	r2, r3
 8042482:	4603      	mov	r3, r0
 8042484:	81fb      	strh	r3, [r7, #14]
 8042486:	460b      	mov	r3, r1
 8042488:	81bb      	strh	r3, [r7, #12]
 804248a:	4613      	mov	r3, r2
 804248c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 804248e:	2301      	movs	r3, #1
 8042490:	83fb      	strh	r3, [r7, #30]
 8042492:	2300      	movs	r3, #0
 8042494:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8042496:	2300      	movs	r3, #0
 8042498:	61bb      	str	r3, [r7, #24]
 804249a:	2300      	movs	r3, #0
 804249c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 804249e:	68bb      	ldr	r3, [r7, #8]
 80424a0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80424a2:	e002      	b.n	80424aa <BSP_LCD_DisplayStringAt+0x32>
 80424a4:	69bb      	ldr	r3, [r7, #24]
 80424a6:	3301      	adds	r3, #1
 80424a8:	61bb      	str	r3, [r7, #24]
 80424aa:	697b      	ldr	r3, [r7, #20]
 80424ac:	1c5a      	adds	r2, r3, #1
 80424ae:	617a      	str	r2, [r7, #20]
 80424b0:	781b      	ldrb	r3, [r3, #0]
 80424b2:	2b00      	cmp	r3, #0
 80424b4:	d1f6      	bne.n	80424a4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80424b6:	f7ff fe49 	bl	804214c <BSP_LCD_GetXSize>
 80424ba:	4601      	mov	r1, r0
 80424bc:	4b4b      	ldr	r3, [pc, #300]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 80424be:	681a      	ldr	r2, [r3, #0]
 80424c0:	484b      	ldr	r0, [pc, #300]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 80424c2:	4613      	mov	r3, r2
 80424c4:	005b      	lsls	r3, r3, #1
 80424c6:	4413      	add	r3, r2
 80424c8:	009b      	lsls	r3, r3, #2
 80424ca:	4403      	add	r3, r0
 80424cc:	3308      	adds	r3, #8
 80424ce:	681b      	ldr	r3, [r3, #0]
 80424d0:	889b      	ldrh	r3, [r3, #4]
 80424d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80424d6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80424d8:	79fb      	ldrb	r3, [r7, #7]
 80424da:	2b03      	cmp	r3, #3
 80424dc:	d01c      	beq.n	8042518 <BSP_LCD_DisplayStringAt+0xa0>
 80424de:	2b03      	cmp	r3, #3
 80424e0:	dc33      	bgt.n	804254a <BSP_LCD_DisplayStringAt+0xd2>
 80424e2:	2b01      	cmp	r3, #1
 80424e4:	d002      	beq.n	80424ec <BSP_LCD_DisplayStringAt+0x74>
 80424e6:	2b02      	cmp	r3, #2
 80424e8:	d019      	beq.n	804251e <BSP_LCD_DisplayStringAt+0xa6>
 80424ea:	e02e      	b.n	804254a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80424ec:	693a      	ldr	r2, [r7, #16]
 80424ee:	69bb      	ldr	r3, [r7, #24]
 80424f0:	1ad1      	subs	r1, r2, r3
 80424f2:	4b3e      	ldr	r3, [pc, #248]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 80424f4:	681a      	ldr	r2, [r3, #0]
 80424f6:	483e      	ldr	r0, [pc, #248]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 80424f8:	4613      	mov	r3, r2
 80424fa:	005b      	lsls	r3, r3, #1
 80424fc:	4413      	add	r3, r2
 80424fe:	009b      	lsls	r3, r3, #2
 8042500:	4403      	add	r3, r0
 8042502:	3308      	adds	r3, #8
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	889b      	ldrh	r3, [r3, #4]
 8042508:	fb01 f303 	mul.w	r3, r1, r3
 804250c:	085b      	lsrs	r3, r3, #1
 804250e:	b29a      	uxth	r2, r3
 8042510:	89fb      	ldrh	r3, [r7, #14]
 8042512:	4413      	add	r3, r2
 8042514:	83fb      	strh	r3, [r7, #30]
      break;
 8042516:	e01b      	b.n	8042550 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8042518:	89fb      	ldrh	r3, [r7, #14]
 804251a:	83fb      	strh	r3, [r7, #30]
      break;
 804251c:	e018      	b.n	8042550 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 804251e:	693a      	ldr	r2, [r7, #16]
 8042520:	69bb      	ldr	r3, [r7, #24]
 8042522:	1ad3      	subs	r3, r2, r3
 8042524:	b299      	uxth	r1, r3
 8042526:	4b31      	ldr	r3, [pc, #196]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 8042528:	681a      	ldr	r2, [r3, #0]
 804252a:	4831      	ldr	r0, [pc, #196]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 804252c:	4613      	mov	r3, r2
 804252e:	005b      	lsls	r3, r3, #1
 8042530:	4413      	add	r3, r2
 8042532:	009b      	lsls	r3, r3, #2
 8042534:	4403      	add	r3, r0
 8042536:	3308      	adds	r3, #8
 8042538:	681b      	ldr	r3, [r3, #0]
 804253a:	889b      	ldrh	r3, [r3, #4]
 804253c:	fb11 f303 	smulbb	r3, r1, r3
 8042540:	b29a      	uxth	r2, r3
 8042542:	89fb      	ldrh	r3, [r7, #14]
 8042544:	4413      	add	r3, r2
 8042546:	83fb      	strh	r3, [r7, #30]
      break;
 8042548:	e002      	b.n	8042550 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 804254a:	89fb      	ldrh	r3, [r7, #14]
 804254c:	83fb      	strh	r3, [r7, #30]
      break;
 804254e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042550:	e01a      	b.n	8042588 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8042552:	68bb      	ldr	r3, [r7, #8]
 8042554:	781a      	ldrb	r2, [r3, #0]
 8042556:	89b9      	ldrh	r1, [r7, #12]
 8042558:	8bfb      	ldrh	r3, [r7, #30]
 804255a:	4618      	mov	r0, r3
 804255c:	f7ff ff48 	bl	80423f0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8042560:	4b22      	ldr	r3, [pc, #136]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 8042562:	681a      	ldr	r2, [r3, #0]
 8042564:	4922      	ldr	r1, [pc, #136]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 8042566:	4613      	mov	r3, r2
 8042568:	005b      	lsls	r3, r3, #1
 804256a:	4413      	add	r3, r2
 804256c:	009b      	lsls	r3, r3, #2
 804256e:	440b      	add	r3, r1
 8042570:	3308      	adds	r3, #8
 8042572:	681b      	ldr	r3, [r3, #0]
 8042574:	889a      	ldrh	r2, [r3, #4]
 8042576:	8bfb      	ldrh	r3, [r7, #30]
 8042578:	4413      	add	r3, r2
 804257a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 804257c:	68bb      	ldr	r3, [r7, #8]
 804257e:	3301      	adds	r3, #1
 8042580:	60bb      	str	r3, [r7, #8]
    i++;
 8042582:	8bbb      	ldrh	r3, [r7, #28]
 8042584:	3301      	adds	r3, #1
 8042586:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042588:	68bb      	ldr	r3, [r7, #8]
 804258a:	781b      	ldrb	r3, [r3, #0]
 804258c:	2b00      	cmp	r3, #0
 804258e:	bf14      	ite	ne
 8042590:	2301      	movne	r3, #1
 8042592:	2300      	moveq	r3, #0
 8042594:	b2dc      	uxtb	r4, r3
 8042596:	f7ff fdd9 	bl	804214c <BSP_LCD_GetXSize>
 804259a:	8bb9      	ldrh	r1, [r7, #28]
 804259c:	4b13      	ldr	r3, [pc, #76]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 804259e:	681a      	ldr	r2, [r3, #0]
 80425a0:	4d13      	ldr	r5, [pc, #76]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 80425a2:	4613      	mov	r3, r2
 80425a4:	005b      	lsls	r3, r3, #1
 80425a6:	4413      	add	r3, r2
 80425a8:	009b      	lsls	r3, r3, #2
 80425aa:	442b      	add	r3, r5
 80425ac:	3308      	adds	r3, #8
 80425ae:	681b      	ldr	r3, [r3, #0]
 80425b0:	889b      	ldrh	r3, [r3, #4]
 80425b2:	fb01 f303 	mul.w	r3, r1, r3
 80425b6:	1ac3      	subs	r3, r0, r3
 80425b8:	b299      	uxth	r1, r3
 80425ba:	4b0c      	ldr	r3, [pc, #48]	; (80425ec <BSP_LCD_DisplayStringAt+0x174>)
 80425bc:	681a      	ldr	r2, [r3, #0]
 80425be:	480c      	ldr	r0, [pc, #48]	; (80425f0 <BSP_LCD_DisplayStringAt+0x178>)
 80425c0:	4613      	mov	r3, r2
 80425c2:	005b      	lsls	r3, r3, #1
 80425c4:	4413      	add	r3, r2
 80425c6:	009b      	lsls	r3, r3, #2
 80425c8:	4403      	add	r3, r0
 80425ca:	3308      	adds	r3, #8
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	889b      	ldrh	r3, [r3, #4]
 80425d0:	4299      	cmp	r1, r3
 80425d2:	bf2c      	ite	cs
 80425d4:	2301      	movcs	r3, #1
 80425d6:	2300      	movcc	r3, #0
 80425d8:	b2db      	uxtb	r3, r3
 80425da:	4023      	ands	r3, r4
 80425dc:	b2db      	uxtb	r3, r3
 80425de:	2b00      	cmp	r3, #0
 80425e0:	d1b7      	bne.n	8042552 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80425e2:	bf00      	nop
 80425e4:	bf00      	nop
 80425e6:	3720      	adds	r7, #32
 80425e8:	46bd      	mov	sp, r7
 80425ea:	bdb0      	pop	{r4, r5, r7, pc}
 80425ec:	20000584 	.word	0x20000584
 80425f0:	20000588 	.word	0x20000588

080425f4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80425f4:	b580      	push	{r7, lr}
 80425f6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80425f8:	4b05      	ldr	r3, [pc, #20]	; (8042610 <BSP_LCD_DisplayOn+0x1c>)
 80425fa:	681b      	ldr	r3, [r3, #0]
 80425fc:	689b      	ldr	r3, [r3, #8]
 80425fe:	2b00      	cmp	r3, #0
 8042600:	d003      	beq.n	804260a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8042602:	4b03      	ldr	r3, [pc, #12]	; (8042610 <BSP_LCD_DisplayOn+0x1c>)
 8042604:	681b      	ldr	r3, [r3, #0]
 8042606:	689b      	ldr	r3, [r3, #8]
 8042608:	4798      	blx	r3
  }
}
 804260a:	bf00      	nop
 804260c:	bd80      	pop	{r7, pc}
 804260e:	bf00      	nop
 8042610:	200005a0 	.word	0x200005a0

08042614 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8042614:	b580      	push	{r7, lr}
 8042616:	b08e      	sub	sp, #56	; 0x38
 8042618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 804261a:	2300      	movs	r3, #0
 804261c:	623b      	str	r3, [r7, #32]
 804261e:	4b61      	ldr	r3, [pc, #388]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042622:	4a60      	ldr	r2, [pc, #384]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042628:	6453      	str	r3, [r2, #68]	; 0x44
 804262a:	4b5e      	ldr	r3, [pc, #376]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 804262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804262e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042632:	623b      	str	r3, [r7, #32]
 8042634:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8042636:	2300      	movs	r3, #0
 8042638:	61fb      	str	r3, [r7, #28]
 804263a:	4b5a      	ldr	r3, [pc, #360]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 804263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804263e:	4a59      	ldr	r2, [pc, #356]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8042644:	6313      	str	r3, [r2, #48]	; 0x30
 8042646:	4b57      	ldr	r3, [pc, #348]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804264a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804264e:	61fb      	str	r3, [r7, #28]
 8042650:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8042652:	2300      	movs	r3, #0
 8042654:	61bb      	str	r3, [r7, #24]
 8042656:	4b53      	ldr	r3, [pc, #332]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804265a:	4a52      	ldr	r2, [pc, #328]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 804265c:	f043 0301 	orr.w	r3, r3, #1
 8042660:	6313      	str	r3, [r2, #48]	; 0x30
 8042662:	4b50      	ldr	r3, [pc, #320]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042666:	f003 0301 	and.w	r3, r3, #1
 804266a:	61bb      	str	r3, [r7, #24]
 804266c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804266e:	2300      	movs	r3, #0
 8042670:	617b      	str	r3, [r7, #20]
 8042672:	4b4c      	ldr	r3, [pc, #304]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042676:	4a4b      	ldr	r2, [pc, #300]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042678:	f043 0302 	orr.w	r3, r3, #2
 804267c:	6313      	str	r3, [r2, #48]	; 0x30
 804267e:	4b49      	ldr	r3, [pc, #292]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042682:	f003 0302 	and.w	r3, r3, #2
 8042686:	617b      	str	r3, [r7, #20]
 8042688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804268a:	2300      	movs	r3, #0
 804268c:	613b      	str	r3, [r7, #16]
 804268e:	4b45      	ldr	r3, [pc, #276]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042692:	4a44      	ldr	r2, [pc, #272]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 8042694:	f043 0304 	orr.w	r3, r3, #4
 8042698:	6313      	str	r3, [r2, #48]	; 0x30
 804269a:	4b42      	ldr	r3, [pc, #264]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 804269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804269e:	f003 0304 	and.w	r3, r3, #4
 80426a2:	613b      	str	r3, [r7, #16]
 80426a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80426a6:	2300      	movs	r3, #0
 80426a8:	60fb      	str	r3, [r7, #12]
 80426aa:	4b3e      	ldr	r3, [pc, #248]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426ae:	4a3d      	ldr	r2, [pc, #244]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426b0:	f043 0308 	orr.w	r3, r3, #8
 80426b4:	6313      	str	r3, [r2, #48]	; 0x30
 80426b6:	4b3b      	ldr	r3, [pc, #236]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426ba:	f003 0308 	and.w	r3, r3, #8
 80426be:	60fb      	str	r3, [r7, #12]
 80426c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80426c2:	2300      	movs	r3, #0
 80426c4:	60bb      	str	r3, [r7, #8]
 80426c6:	4b37      	ldr	r3, [pc, #220]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426ca:	4a36      	ldr	r2, [pc, #216]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426cc:	f043 0320 	orr.w	r3, r3, #32
 80426d0:	6313      	str	r3, [r2, #48]	; 0x30
 80426d2:	4b34      	ldr	r3, [pc, #208]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426d6:	f003 0320 	and.w	r3, r3, #32
 80426da:	60bb      	str	r3, [r7, #8]
 80426dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80426de:	2300      	movs	r3, #0
 80426e0:	607b      	str	r3, [r7, #4]
 80426e2:	4b30      	ldr	r3, [pc, #192]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426e6:	4a2f      	ldr	r2, [pc, #188]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80426ec:	6313      	str	r3, [r2, #48]	; 0x30
 80426ee:	4b2d      	ldr	r3, [pc, #180]	; (80427a4 <BSP_LCD_MspInit+0x190>)
 80426f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80426f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80426f6:	607b      	str	r3, [r7, #4]
 80426f8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80426fa:	f641 0358 	movw	r3, #6232	; 0x1858
 80426fe:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8042700:	2302      	movs	r3, #2
 8042702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8042704:	2300      	movs	r3, #0
 8042706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042708:	2302      	movs	r3, #2
 804270a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 804270c:	230e      	movs	r3, #14
 804270e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8042710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042714:	4619      	mov	r1, r3
 8042716:	4824      	ldr	r0, [pc, #144]	; (80427a8 <BSP_LCD_MspInit+0x194>)
 8042718:	f001 fa0e 	bl	8043b38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 804271c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8042720:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042726:	4619      	mov	r1, r3
 8042728:	4820      	ldr	r0, [pc, #128]	; (80427ac <BSP_LCD_MspInit+0x198>)
 804272a:	f001 fa05 	bl	8043b38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 804272e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8042732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8042734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042738:	4619      	mov	r1, r3
 804273a:	481d      	ldr	r0, [pc, #116]	; (80427b0 <BSP_LCD_MspInit+0x19c>)
 804273c:	f001 f9fc 	bl	8043b38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8042740:	2348      	movs	r3, #72	; 0x48
 8042742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042748:	4619      	mov	r1, r3
 804274a:	481a      	ldr	r0, [pc, #104]	; (80427b4 <BSP_LCD_MspInit+0x1a0>)
 804274c:	f001 f9f4 	bl	8043b38 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8042750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8042756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804275a:	4619      	mov	r1, r3
 804275c:	4816      	ldr	r0, [pc, #88]	; (80427b8 <BSP_LCD_MspInit+0x1a4>)
 804275e:	f001 f9eb 	bl	8043b38 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8042762:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8042766:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804276c:	4619      	mov	r1, r3
 804276e:	4813      	ldr	r0, [pc, #76]	; (80427bc <BSP_LCD_MspInit+0x1a8>)
 8042770:	f001 f9e2 	bl	8043b38 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042774:	2303      	movs	r3, #3
 8042776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8042778:	2309      	movs	r3, #9
 804277a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 804277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042780:	4619      	mov	r1, r3
 8042782:	480a      	ldr	r0, [pc, #40]	; (80427ac <BSP_LCD_MspInit+0x198>)
 8042784:	f001 f9d8 	bl	8043b38 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8042788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804278c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 804278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042792:	4619      	mov	r1, r3
 8042794:	4809      	ldr	r0, [pc, #36]	; (80427bc <BSP_LCD_MspInit+0x1a8>)
 8042796:	f001 f9cf 	bl	8043b38 <HAL_GPIO_Init>
}
 804279a:	bf00      	nop
 804279c:	3738      	adds	r7, #56	; 0x38
 804279e:	46bd      	mov	sp, r7
 80427a0:	bd80      	pop	{r7, pc}
 80427a2:	bf00      	nop
 80427a4:	40023800 	.word	0x40023800
 80427a8:	40020000 	.word	0x40020000
 80427ac:	40020400 	.word	0x40020400
 80427b0:	40020800 	.word	0x40020800
 80427b4:	40020c00 	.word	0x40020c00
 80427b8:	40021400 	.word	0x40021400
 80427bc:	40021800 	.word	0x40021800

080427c0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80427c0:	b5b0      	push	{r4, r5, r7, lr}
 80427c2:	b082      	sub	sp, #8
 80427c4:	af00      	add	r7, sp, #0
 80427c6:	4603      	mov	r3, r0
 80427c8:	603a      	str	r2, [r7, #0]
 80427ca:	80fb      	strh	r3, [r7, #6]
 80427cc:	460b      	mov	r3, r1
 80427ce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80427d0:	4b0c      	ldr	r3, [pc, #48]	; (8042804 <BSP_LCD_DrawPixel+0x44>)
 80427d2:	681b      	ldr	r3, [r3, #0]
 80427d4:	4a0c      	ldr	r2, [pc, #48]	; (8042808 <BSP_LCD_DrawPixel+0x48>)
 80427d6:	2134      	movs	r1, #52	; 0x34
 80427d8:	fb01 f303 	mul.w	r3, r1, r3
 80427dc:	4413      	add	r3, r2
 80427de:	335c      	adds	r3, #92	; 0x5c
 80427e0:	681c      	ldr	r4, [r3, #0]
 80427e2:	88bd      	ldrh	r5, [r7, #4]
 80427e4:	f7ff fcb2 	bl	804214c <BSP_LCD_GetXSize>
 80427e8:	4603      	mov	r3, r0
 80427ea:	fb03 f205 	mul.w	r2, r3, r5
 80427ee:	88fb      	ldrh	r3, [r7, #6]
 80427f0:	4413      	add	r3, r2
 80427f2:	009b      	lsls	r3, r3, #2
 80427f4:	4423      	add	r3, r4
 80427f6:	461a      	mov	r2, r3
 80427f8:	683b      	ldr	r3, [r7, #0]
 80427fa:	6013      	str	r3, [r2, #0]
}
 80427fc:	bf00      	nop
 80427fe:	3708      	adds	r7, #8
 8042800:	46bd      	mov	sp, r7
 8042802:	bdb0      	pop	{r4, r5, r7, pc}
 8042804:	20000584 	.word	0x20000584
 8042808:	2000046c 	.word	0x2000046c

0804280c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 804280c:	b580      	push	{r7, lr}
 804280e:	b088      	sub	sp, #32
 8042810:	af00      	add	r7, sp, #0
 8042812:	4603      	mov	r3, r0
 8042814:	603a      	str	r2, [r7, #0]
 8042816:	80fb      	strh	r3, [r7, #6]
 8042818:	460b      	mov	r3, r1
 804281a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 804281c:	2300      	movs	r3, #0
 804281e:	61fb      	str	r3, [r7, #28]
 8042820:	2300      	movs	r3, #0
 8042822:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8042824:	2300      	movs	r3, #0
 8042826:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8042828:	4b53      	ldr	r3, [pc, #332]	; (8042978 <DrawChar+0x16c>)
 804282a:	681a      	ldr	r2, [r3, #0]
 804282c:	4953      	ldr	r1, [pc, #332]	; (804297c <DrawChar+0x170>)
 804282e:	4613      	mov	r3, r2
 8042830:	005b      	lsls	r3, r3, #1
 8042832:	4413      	add	r3, r2
 8042834:	009b      	lsls	r3, r3, #2
 8042836:	440b      	add	r3, r1
 8042838:	3308      	adds	r3, #8
 804283a:	681b      	ldr	r3, [r3, #0]
 804283c:	88db      	ldrh	r3, [r3, #6]
 804283e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8042840:	4b4d      	ldr	r3, [pc, #308]	; (8042978 <DrawChar+0x16c>)
 8042842:	681a      	ldr	r2, [r3, #0]
 8042844:	494d      	ldr	r1, [pc, #308]	; (804297c <DrawChar+0x170>)
 8042846:	4613      	mov	r3, r2
 8042848:	005b      	lsls	r3, r3, #1
 804284a:	4413      	add	r3, r2
 804284c:	009b      	lsls	r3, r3, #2
 804284e:	440b      	add	r3, r1
 8042850:	3308      	adds	r3, #8
 8042852:	681b      	ldr	r3, [r3, #0]
 8042854:	889b      	ldrh	r3, [r3, #4]
 8042856:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8042858:	8a3b      	ldrh	r3, [r7, #16]
 804285a:	3307      	adds	r3, #7
 804285c:	2b00      	cmp	r3, #0
 804285e:	da00      	bge.n	8042862 <DrawChar+0x56>
 8042860:	3307      	adds	r3, #7
 8042862:	10db      	asrs	r3, r3, #3
 8042864:	b2db      	uxtb	r3, r3
 8042866:	00db      	lsls	r3, r3, #3
 8042868:	b2da      	uxtb	r2, r3
 804286a:	8a3b      	ldrh	r3, [r7, #16]
 804286c:	b2db      	uxtb	r3, r3
 804286e:	1ad3      	subs	r3, r2, r3
 8042870:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8042872:	2300      	movs	r3, #0
 8042874:	61fb      	str	r3, [r7, #28]
 8042876:	e076      	b.n	8042966 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8042878:	8a3b      	ldrh	r3, [r7, #16]
 804287a:	3307      	adds	r3, #7
 804287c:	2b00      	cmp	r3, #0
 804287e:	da00      	bge.n	8042882 <DrawChar+0x76>
 8042880:	3307      	adds	r3, #7
 8042882:	10db      	asrs	r3, r3, #3
 8042884:	461a      	mov	r2, r3
 8042886:	69fb      	ldr	r3, [r7, #28]
 8042888:	fb02 f303 	mul.w	r3, r2, r3
 804288c:	683a      	ldr	r2, [r7, #0]
 804288e:	4413      	add	r3, r2
 8042890:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8042892:	8a3b      	ldrh	r3, [r7, #16]
 8042894:	3307      	adds	r3, #7
 8042896:	2b00      	cmp	r3, #0
 8042898:	da00      	bge.n	804289c <DrawChar+0x90>
 804289a:	3307      	adds	r3, #7
 804289c:	10db      	asrs	r3, r3, #3
 804289e:	2b01      	cmp	r3, #1
 80428a0:	d002      	beq.n	80428a8 <DrawChar+0x9c>
 80428a2:	2b02      	cmp	r3, #2
 80428a4:	d004      	beq.n	80428b0 <DrawChar+0xa4>
 80428a6:	e00c      	b.n	80428c2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80428a8:	68bb      	ldr	r3, [r7, #8]
 80428aa:	781b      	ldrb	r3, [r3, #0]
 80428ac:	617b      	str	r3, [r7, #20]
      break;
 80428ae:	e016      	b.n	80428de <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80428b0:	68bb      	ldr	r3, [r7, #8]
 80428b2:	781b      	ldrb	r3, [r3, #0]
 80428b4:	021b      	lsls	r3, r3, #8
 80428b6:	68ba      	ldr	r2, [r7, #8]
 80428b8:	3201      	adds	r2, #1
 80428ba:	7812      	ldrb	r2, [r2, #0]
 80428bc:	4313      	orrs	r3, r2
 80428be:	617b      	str	r3, [r7, #20]
      break;
 80428c0:	e00d      	b.n	80428de <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80428c2:	68bb      	ldr	r3, [r7, #8]
 80428c4:	781b      	ldrb	r3, [r3, #0]
 80428c6:	041a      	lsls	r2, r3, #16
 80428c8:	68bb      	ldr	r3, [r7, #8]
 80428ca:	3301      	adds	r3, #1
 80428cc:	781b      	ldrb	r3, [r3, #0]
 80428ce:	021b      	lsls	r3, r3, #8
 80428d0:	4313      	orrs	r3, r2
 80428d2:	68ba      	ldr	r2, [r7, #8]
 80428d4:	3202      	adds	r2, #2
 80428d6:	7812      	ldrb	r2, [r2, #0]
 80428d8:	4313      	orrs	r3, r2
 80428da:	617b      	str	r3, [r7, #20]
      break;
 80428dc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80428de:	2300      	movs	r3, #0
 80428e0:	61bb      	str	r3, [r7, #24]
 80428e2:	e036      	b.n	8042952 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80428e4:	8a3a      	ldrh	r2, [r7, #16]
 80428e6:	69bb      	ldr	r3, [r7, #24]
 80428e8:	1ad2      	subs	r2, r2, r3
 80428ea:	7bfb      	ldrb	r3, [r7, #15]
 80428ec:	4413      	add	r3, r2
 80428ee:	3b01      	subs	r3, #1
 80428f0:	2201      	movs	r2, #1
 80428f2:	fa02 f303 	lsl.w	r3, r2, r3
 80428f6:	461a      	mov	r2, r3
 80428f8:	697b      	ldr	r3, [r7, #20]
 80428fa:	4013      	ands	r3, r2
 80428fc:	2b00      	cmp	r3, #0
 80428fe:	d012      	beq.n	8042926 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8042900:	69bb      	ldr	r3, [r7, #24]
 8042902:	b29a      	uxth	r2, r3
 8042904:	88fb      	ldrh	r3, [r7, #6]
 8042906:	4413      	add	r3, r2
 8042908:	b298      	uxth	r0, r3
 804290a:	4b1b      	ldr	r3, [pc, #108]	; (8042978 <DrawChar+0x16c>)
 804290c:	681a      	ldr	r2, [r3, #0]
 804290e:	491b      	ldr	r1, [pc, #108]	; (804297c <DrawChar+0x170>)
 8042910:	4613      	mov	r3, r2
 8042912:	005b      	lsls	r3, r3, #1
 8042914:	4413      	add	r3, r2
 8042916:	009b      	lsls	r3, r3, #2
 8042918:	440b      	add	r3, r1
 804291a:	681a      	ldr	r2, [r3, #0]
 804291c:	88bb      	ldrh	r3, [r7, #4]
 804291e:	4619      	mov	r1, r3
 8042920:	f7ff ff4e 	bl	80427c0 <BSP_LCD_DrawPixel>
 8042924:	e012      	b.n	804294c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8042926:	69bb      	ldr	r3, [r7, #24]
 8042928:	b29a      	uxth	r2, r3
 804292a:	88fb      	ldrh	r3, [r7, #6]
 804292c:	4413      	add	r3, r2
 804292e:	b298      	uxth	r0, r3
 8042930:	4b11      	ldr	r3, [pc, #68]	; (8042978 <DrawChar+0x16c>)
 8042932:	681a      	ldr	r2, [r3, #0]
 8042934:	4911      	ldr	r1, [pc, #68]	; (804297c <DrawChar+0x170>)
 8042936:	4613      	mov	r3, r2
 8042938:	005b      	lsls	r3, r3, #1
 804293a:	4413      	add	r3, r2
 804293c:	009b      	lsls	r3, r3, #2
 804293e:	440b      	add	r3, r1
 8042940:	3304      	adds	r3, #4
 8042942:	681a      	ldr	r2, [r3, #0]
 8042944:	88bb      	ldrh	r3, [r7, #4]
 8042946:	4619      	mov	r1, r3
 8042948:	f7ff ff3a 	bl	80427c0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 804294c:	69bb      	ldr	r3, [r7, #24]
 804294e:	3301      	adds	r3, #1
 8042950:	61bb      	str	r3, [r7, #24]
 8042952:	8a3b      	ldrh	r3, [r7, #16]
 8042954:	69ba      	ldr	r2, [r7, #24]
 8042956:	429a      	cmp	r2, r3
 8042958:	d3c4      	bcc.n	80428e4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 804295a:	88bb      	ldrh	r3, [r7, #4]
 804295c:	3301      	adds	r3, #1
 804295e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8042960:	69fb      	ldr	r3, [r7, #28]
 8042962:	3301      	adds	r3, #1
 8042964:	61fb      	str	r3, [r7, #28]
 8042966:	8a7b      	ldrh	r3, [r7, #18]
 8042968:	69fa      	ldr	r2, [r7, #28]
 804296a:	429a      	cmp	r2, r3
 804296c:	d384      	bcc.n	8042878 <DrawChar+0x6c>
  }
}
 804296e:	bf00      	nop
 8042970:	bf00      	nop
 8042972:	3720      	adds	r7, #32
 8042974:	46bd      	mov	sp, r7
 8042976:	bd80      	pop	{r7, pc}
 8042978:	20000584 	.word	0x20000584
 804297c:	20000588 	.word	0x20000588

08042980 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8042980:	b580      	push	{r7, lr}
 8042982:	b086      	sub	sp, #24
 8042984:	af02      	add	r7, sp, #8
 8042986:	60f8      	str	r0, [r7, #12]
 8042988:	60b9      	str	r1, [r7, #8]
 804298a:	607a      	str	r2, [r7, #4]
 804298c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 804298e:	4b16      	ldr	r3, [pc, #88]	; (80429e8 <FillBuffer+0x68>)
 8042990:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8042994:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8042996:	4b14      	ldr	r3, [pc, #80]	; (80429e8 <FillBuffer+0x68>)
 8042998:	2200      	movs	r2, #0
 804299a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 804299c:	4a12      	ldr	r2, [pc, #72]	; (80429e8 <FillBuffer+0x68>)
 804299e:	69bb      	ldr	r3, [r7, #24]
 80429a0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80429a2:	4b11      	ldr	r3, [pc, #68]	; (80429e8 <FillBuffer+0x68>)
 80429a4:	4a11      	ldr	r2, [pc, #68]	; (80429ec <FillBuffer+0x6c>)
 80429a6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80429a8:	480f      	ldr	r0, [pc, #60]	; (80429e8 <FillBuffer+0x68>)
 80429aa:	f000 fd29 	bl	8043400 <HAL_DMA2D_Init>
 80429ae:	4603      	mov	r3, r0
 80429b0:	2b00      	cmp	r3, #0
 80429b2:	d115      	bne.n	80429e0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80429b4:	68f9      	ldr	r1, [r7, #12]
 80429b6:	480c      	ldr	r0, [pc, #48]	; (80429e8 <FillBuffer+0x68>)
 80429b8:	f000 ff90 	bl	80438dc <HAL_DMA2D_ConfigLayer>
 80429bc:	4603      	mov	r3, r0
 80429be:	2b00      	cmp	r3, #0
 80429c0:	d10e      	bne.n	80429e0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80429c2:	68ba      	ldr	r2, [r7, #8]
 80429c4:	683b      	ldr	r3, [r7, #0]
 80429c6:	9300      	str	r3, [sp, #0]
 80429c8:	687b      	ldr	r3, [r7, #4]
 80429ca:	69f9      	ldr	r1, [r7, #28]
 80429cc:	4806      	ldr	r0, [pc, #24]	; (80429e8 <FillBuffer+0x68>)
 80429ce:	f000 fd60 	bl	8043492 <HAL_DMA2D_Start>
 80429d2:	4603      	mov	r3, r0
 80429d4:	2b00      	cmp	r3, #0
 80429d6:	d103      	bne.n	80429e0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80429d8:	210a      	movs	r1, #10
 80429da:	4803      	ldr	r0, [pc, #12]	; (80429e8 <FillBuffer+0x68>)
 80429dc:	f000 fd84 	bl	80434e8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80429e0:	bf00      	nop
 80429e2:	3710      	adds	r7, #16
 80429e4:	46bd      	mov	sp, r7
 80429e6:	bd80      	pop	{r7, pc}
 80429e8:	20000514 	.word	0x20000514
 80429ec:	4002b000 	.word	0x4002b000

080429f0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80429f0:	b580      	push	{r7, lr}
 80429f2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80429f4:	4b29      	ldr	r3, [pc, #164]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 80429f6:	4a2a      	ldr	r2, [pc, #168]	; (8042aa0 <BSP_SDRAM_Init+0xb0>)
 80429f8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80429fa:	4b2a      	ldr	r3, [pc, #168]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 80429fc:	2202      	movs	r2, #2
 80429fe:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8042a00:	4b28      	ldr	r3, [pc, #160]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a02:	2207      	movs	r2, #7
 8042a04:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8042a06:	4b27      	ldr	r3, [pc, #156]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a08:	2204      	movs	r2, #4
 8042a0a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8042a0c:	4b25      	ldr	r3, [pc, #148]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a0e:	2207      	movs	r2, #7
 8042a10:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8042a12:	4b24      	ldr	r3, [pc, #144]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a14:	2202      	movs	r2, #2
 8042a16:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8042a18:	4b22      	ldr	r3, [pc, #136]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a1a:	2202      	movs	r2, #2
 8042a1c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8042a1e:	4b21      	ldr	r3, [pc, #132]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a20:	2202      	movs	r2, #2
 8042a22:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8042a24:	4b1d      	ldr	r3, [pc, #116]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a26:	2201      	movs	r2, #1
 8042a28:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8042a2a:	4b1c      	ldr	r3, [pc, #112]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a2c:	2200      	movs	r2, #0
 8042a2e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8042a30:	4b1a      	ldr	r3, [pc, #104]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a32:	2204      	movs	r2, #4
 8042a34:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8042a36:	4b19      	ldr	r3, [pc, #100]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a38:	2210      	movs	r2, #16
 8042a3a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8042a3c:	4b17      	ldr	r3, [pc, #92]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a3e:	2240      	movs	r2, #64	; 0x40
 8042a40:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8042a42:	4b16      	ldr	r3, [pc, #88]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a44:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8042a48:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8042a4a:	4b14      	ldr	r3, [pc, #80]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a4c:	2200      	movs	r2, #0
 8042a4e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8042a50:	4b12      	ldr	r3, [pc, #72]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042a56:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8042a58:	4b10      	ldr	r3, [pc, #64]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a5a:	2200      	movs	r2, #0
 8042a5c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8042a5e:	4b0f      	ldr	r3, [pc, #60]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8042a64:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8042a66:	2100      	movs	r1, #0
 8042a68:	480c      	ldr	r0, [pc, #48]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a6a:	f000 f87f 	bl	8042b6c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8042a6e:	490d      	ldr	r1, [pc, #52]	; (8042aa4 <BSP_SDRAM_Init+0xb4>)
 8042a70:	480a      	ldr	r0, [pc, #40]	; (8042a9c <BSP_SDRAM_Init+0xac>)
 8042a72:	f004 fbaf 	bl	80471d4 <HAL_SDRAM_Init>
 8042a76:	4603      	mov	r3, r0
 8042a78:	2b00      	cmp	r3, #0
 8042a7a:	d003      	beq.n	8042a84 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8042a7c:	4b0a      	ldr	r3, [pc, #40]	; (8042aa8 <BSP_SDRAM_Init+0xb8>)
 8042a7e:	2201      	movs	r2, #1
 8042a80:	701a      	strb	r2, [r3, #0]
 8042a82:	e002      	b.n	8042a8a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8042a84:	4b08      	ldr	r3, [pc, #32]	; (8042aa8 <BSP_SDRAM_Init+0xb8>)
 8042a86:	2200      	movs	r2, #0
 8042a88:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8042a8a:	f240 506a 	movw	r0, #1386	; 0x56a
 8042a8e:	f000 f80d 	bl	8042aac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8042a92:	4b05      	ldr	r3, [pc, #20]	; (8042aa8 <BSP_SDRAM_Init+0xb8>)
 8042a94:	781b      	ldrb	r3, [r3, #0]
}
 8042a96:	4618      	mov	r0, r3
 8042a98:	bd80      	pop	{r7, pc}
 8042a9a:	bf00      	nop
 8042a9c:	200005a4 	.word	0x200005a4
 8042aa0:	a0000140 	.word	0xa0000140
 8042aa4:	200005d8 	.word	0x200005d8
 8042aa8:	20000050 	.word	0x20000050

08042aac <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8042aac:	b580      	push	{r7, lr}
 8042aae:	b084      	sub	sp, #16
 8042ab0:	af00      	add	r7, sp, #0
 8042ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8042ab4:	2300      	movs	r3, #0
 8042ab6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8042ab8:	4b2a      	ldr	r3, [pc, #168]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042aba:	2201      	movs	r2, #1
 8042abc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042abe:	4b29      	ldr	r3, [pc, #164]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ac0:	2208      	movs	r2, #8
 8042ac2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042ac4:	4b27      	ldr	r3, [pc, #156]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ac6:	2201      	movs	r2, #1
 8042ac8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042aca:	4b26      	ldr	r3, [pc, #152]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042acc:	2200      	movs	r2, #0
 8042ace:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042ad4:	4923      	ldr	r1, [pc, #140]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ad6:	4824      	ldr	r0, [pc, #144]	; (8042b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042ad8:	f004 fbb0 	bl	804723c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8042adc:	2001      	movs	r0, #1
 8042ade:	f000 f993 	bl	8042e08 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8042ae2:	4b20      	ldr	r3, [pc, #128]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ae4:	2202      	movs	r2, #2
 8042ae6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042ae8:	4b1e      	ldr	r3, [pc, #120]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042aea:	2208      	movs	r2, #8
 8042aec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042aee:	4b1d      	ldr	r3, [pc, #116]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042af0:	2201      	movs	r2, #1
 8042af2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042af4:	4b1b      	ldr	r3, [pc, #108]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042af6:	2200      	movs	r2, #0
 8042af8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8042afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042afe:	4919      	ldr	r1, [pc, #100]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b00:	4819      	ldr	r0, [pc, #100]	; (8042b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042b02:	f004 fb9b 	bl	804723c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8042b06:	4b17      	ldr	r3, [pc, #92]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b08:	2203      	movs	r2, #3
 8042b0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042b0c:	4b15      	ldr	r3, [pc, #84]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b0e:	2208      	movs	r2, #8
 8042b10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8042b12:	4b14      	ldr	r3, [pc, #80]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b14:	2204      	movs	r2, #4
 8042b16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042b18:	4b12      	ldr	r3, [pc, #72]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b1a:	2200      	movs	r2, #0
 8042b1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042b22:	4910      	ldr	r1, [pc, #64]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b24:	4810      	ldr	r0, [pc, #64]	; (8042b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042b26:	f004 fb89 	bl	804723c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8042b2a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8042b2e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8042b30:	4b0c      	ldr	r3, [pc, #48]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b32:	2204      	movs	r2, #4
 8042b34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042b36:	4b0b      	ldr	r3, [pc, #44]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b38:	2208      	movs	r2, #8
 8042b3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042b3c:	4b09      	ldr	r3, [pc, #36]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b3e:	2201      	movs	r2, #1
 8042b40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8042b42:	68fb      	ldr	r3, [r7, #12]
 8042b44:	4a07      	ldr	r2, [pc, #28]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b46:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042b4c:	4905      	ldr	r1, [pc, #20]	; (8042b64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042b4e:	4806      	ldr	r0, [pc, #24]	; (8042b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042b50:	f004 fb74 	bl	804723c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8042b54:	6879      	ldr	r1, [r7, #4]
 8042b56:	4804      	ldr	r0, [pc, #16]	; (8042b68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042b58:	f004 fba5 	bl	80472a6 <HAL_SDRAM_ProgramRefreshRate>
}
 8042b5c:	bf00      	nop
 8042b5e:	3710      	adds	r7, #16
 8042b60:	46bd      	mov	sp, r7
 8042b62:	bd80      	pop	{r7, pc}
 8042b64:	200005f4 	.word	0x200005f4
 8042b68:	200005a4 	.word	0x200005a4

08042b6c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8042b6c:	b580      	push	{r7, lr}
 8042b6e:	b090      	sub	sp, #64	; 0x40
 8042b70:	af00      	add	r7, sp, #0
 8042b72:	6078      	str	r0, [r7, #4]
 8042b74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8042b76:	687b      	ldr	r3, [r7, #4]
 8042b78:	2b00      	cmp	r3, #0
 8042b7a:	f000 80ec 	beq.w	8042d56 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8042b7e:	2300      	movs	r3, #0
 8042b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8042b82:	4b77      	ldr	r3, [pc, #476]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042b86:	4a76      	ldr	r2, [pc, #472]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042b88:	f043 0301 	orr.w	r3, r3, #1
 8042b8c:	6393      	str	r3, [r2, #56]	; 0x38
 8042b8e:	4b74      	ldr	r3, [pc, #464]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042b92:	f003 0301 	and.w	r3, r3, #1
 8042b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8042b98:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8042b9a:	2300      	movs	r3, #0
 8042b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8042b9e:	4b70      	ldr	r3, [pc, #448]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042ba2:	4a6f      	ldr	r2, [pc, #444]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8042ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8042baa:	4b6d      	ldr	r3, [pc, #436]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8042bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042bb6:	2300      	movs	r3, #0
 8042bb8:	623b      	str	r3, [r7, #32]
 8042bba:	4b69      	ldr	r3, [pc, #420]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bbe:	4a68      	ldr	r2, [pc, #416]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bc0:	f043 0302 	orr.w	r3, r3, #2
 8042bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8042bc6:	4b66      	ldr	r3, [pc, #408]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bca:	f003 0302 	and.w	r3, r3, #2
 8042bce:	623b      	str	r3, [r7, #32]
 8042bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042bd2:	2300      	movs	r3, #0
 8042bd4:	61fb      	str	r3, [r7, #28]
 8042bd6:	4b62      	ldr	r3, [pc, #392]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bda:	4a61      	ldr	r2, [pc, #388]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bdc:	f043 0304 	orr.w	r3, r3, #4
 8042be0:	6313      	str	r3, [r2, #48]	; 0x30
 8042be2:	4b5f      	ldr	r3, [pc, #380]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042be6:	f003 0304 	and.w	r3, r3, #4
 8042bea:	61fb      	str	r3, [r7, #28]
 8042bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042bee:	2300      	movs	r3, #0
 8042bf0:	61bb      	str	r3, [r7, #24]
 8042bf2:	4b5b      	ldr	r3, [pc, #364]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bf6:	4a5a      	ldr	r2, [pc, #360]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042bf8:	f043 0308 	orr.w	r3, r3, #8
 8042bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8042bfe:	4b58      	ldr	r3, [pc, #352]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c02:	f003 0308 	and.w	r3, r3, #8
 8042c06:	61bb      	str	r3, [r7, #24]
 8042c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8042c0a:	2300      	movs	r3, #0
 8042c0c:	617b      	str	r3, [r7, #20]
 8042c0e:	4b54      	ldr	r3, [pc, #336]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c12:	4a53      	ldr	r2, [pc, #332]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c14:	f043 0310 	orr.w	r3, r3, #16
 8042c18:	6313      	str	r3, [r2, #48]	; 0x30
 8042c1a:	4b51      	ldr	r3, [pc, #324]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c1e:	f003 0310 	and.w	r3, r3, #16
 8042c22:	617b      	str	r3, [r7, #20]
 8042c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042c26:	2300      	movs	r3, #0
 8042c28:	613b      	str	r3, [r7, #16]
 8042c2a:	4b4d      	ldr	r3, [pc, #308]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c2e:	4a4c      	ldr	r2, [pc, #304]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c30:	f043 0320 	orr.w	r3, r3, #32
 8042c34:	6313      	str	r3, [r2, #48]	; 0x30
 8042c36:	4b4a      	ldr	r3, [pc, #296]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c3a:	f003 0320 	and.w	r3, r3, #32
 8042c3e:	613b      	str	r3, [r7, #16]
 8042c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042c42:	2300      	movs	r3, #0
 8042c44:	60fb      	str	r3, [r7, #12]
 8042c46:	4b46      	ldr	r3, [pc, #280]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c4a:	4a45      	ldr	r2, [pc, #276]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042c50:	6313      	str	r3, [r2, #48]	; 0x30
 8042c52:	4b43      	ldr	r3, [pc, #268]	; (8042d60 <BSP_SDRAM_MspInit+0x1f4>)
 8042c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042c5a:	60fb      	str	r3, [r7, #12]
 8042c5c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8042c5e:	2302      	movs	r3, #2
 8042c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042c62:	2302      	movs	r3, #2
 8042c64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8042c66:	2300      	movs	r3, #0
 8042c68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8042c6a:	230c      	movs	r3, #12
 8042c6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8042c6e:	2360      	movs	r3, #96	; 0x60
 8042c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8042c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c76:	4619      	mov	r1, r3
 8042c78:	483a      	ldr	r0, [pc, #232]	; (8042d64 <BSP_SDRAM_MspInit+0x1f8>)
 8042c7a:	f000 ff5d 	bl	8043b38 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8042c7e:	2301      	movs	r3, #1
 8042c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8042c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c86:	4619      	mov	r1, r3
 8042c88:	4837      	ldr	r0, [pc, #220]	; (8042d68 <BSP_SDRAM_MspInit+0x1fc>)
 8042c8a:	f000 ff55 	bl	8043b38 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8042c8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8042c92:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042c98:	4619      	mov	r1, r3
 8042c9a:	4834      	ldr	r0, [pc, #208]	; (8042d6c <BSP_SDRAM_MspInit+0x200>)
 8042c9c:	f000 ff4c 	bl	8043b38 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8042ca0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8042ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8042ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042caa:	4619      	mov	r1, r3
 8042cac:	4830      	ldr	r0, [pc, #192]	; (8042d70 <BSP_SDRAM_MspInit+0x204>)
 8042cae:	f000 ff43 	bl	8043b38 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8042cb2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8042cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8042cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042cbc:	4619      	mov	r1, r3
 8042cbe:	482d      	ldr	r0, [pc, #180]	; (8042d74 <BSP_SDRAM_MspInit+0x208>)
 8042cc0:	f000 ff3a 	bl	8043b38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8042cc4:	f248 1333 	movw	r3, #33075	; 0x8133
 8042cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8042cce:	4619      	mov	r1, r3
 8042cd0:	4829      	ldr	r0, [pc, #164]	; (8042d78 <BSP_SDRAM_MspInit+0x20c>)
 8042cd2:	f000 ff31 	bl	8043b38 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8042cd6:	4b29      	ldr	r3, [pc, #164]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042cd8:	2200      	movs	r2, #0
 8042cda:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8042cdc:	4b27      	ldr	r3, [pc, #156]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042cde:	2280      	movs	r2, #128	; 0x80
 8042ce0:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8042ce2:	4b26      	ldr	r3, [pc, #152]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042ce8:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8042cea:	4b24      	ldr	r3, [pc, #144]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8042cf0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8042cf2:	4b22      	ldr	r3, [pc, #136]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8042cf8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8042cfa:	4b20      	ldr	r3, [pc, #128]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042cfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8042d00:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8042d02:	4b1e      	ldr	r3, [pc, #120]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d04:	2200      	movs	r2, #0
 8042d06:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8042d08:	4b1c      	ldr	r3, [pc, #112]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8042d0e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8042d10:	4b1a      	ldr	r3, [pc, #104]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d12:	2200      	movs	r2, #0
 8042d14:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8042d16:	4b19      	ldr	r3, [pc, #100]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d18:	2203      	movs	r2, #3
 8042d1a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8042d1c:	4b17      	ldr	r3, [pc, #92]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d1e:	2200      	movs	r2, #0
 8042d20:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8042d22:	4b16      	ldr	r3, [pc, #88]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d24:	2200      	movs	r2, #0
 8042d26:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8042d28:	4b14      	ldr	r3, [pc, #80]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d2a:	4a15      	ldr	r2, [pc, #84]	; (8042d80 <BSP_SDRAM_MspInit+0x214>)
 8042d2c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8042d2e:	687b      	ldr	r3, [r7, #4]
 8042d30:	4a12      	ldr	r2, [pc, #72]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d32:	631a      	str	r2, [r3, #48]	; 0x30
 8042d34:	4a11      	ldr	r2, [pc, #68]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d36:	687b      	ldr	r3, [r7, #4]
 8042d38:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8042d3a:	4810      	ldr	r0, [pc, #64]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d3c:	f000 fa50 	bl	80431e0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8042d40:	480e      	ldr	r0, [pc, #56]	; (8042d7c <BSP_SDRAM_MspInit+0x210>)
 8042d42:	f000 f99f 	bl	8043084 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8042d46:	2200      	movs	r2, #0
 8042d48:	210f      	movs	r1, #15
 8042d4a:	2038      	movs	r0, #56	; 0x38
 8042d4c:	f000 f94f 	bl	8042fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8042d50:	2038      	movs	r0, #56	; 0x38
 8042d52:	f000 f968 	bl	8043026 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8042d56:	bf00      	nop
 8042d58:	3740      	adds	r7, #64	; 0x40
 8042d5a:	46bd      	mov	sp, r7
 8042d5c:	bd80      	pop	{r7, pc}
 8042d5e:	bf00      	nop
 8042d60:	40023800 	.word	0x40023800
 8042d64:	40020400 	.word	0x40020400
 8042d68:	40020800 	.word	0x40020800
 8042d6c:	40020c00 	.word	0x40020c00
 8042d70:	40021000 	.word	0x40021000
 8042d74:	40021400 	.word	0x40021400
 8042d78:	40021800 	.word	0x40021800
 8042d7c:	20000604 	.word	0x20000604
 8042d80:	40026410 	.word	0x40026410

08042d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042d84:	b580      	push	{r7, lr}
 8042d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8042d88:	4b0e      	ldr	r3, [pc, #56]	; (8042dc4 <HAL_Init+0x40>)
 8042d8a:	681b      	ldr	r3, [r3, #0]
 8042d8c:	4a0d      	ldr	r2, [pc, #52]	; (8042dc4 <HAL_Init+0x40>)
 8042d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8042d94:	4b0b      	ldr	r3, [pc, #44]	; (8042dc4 <HAL_Init+0x40>)
 8042d96:	681b      	ldr	r3, [r3, #0]
 8042d98:	4a0a      	ldr	r2, [pc, #40]	; (8042dc4 <HAL_Init+0x40>)
 8042d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8042d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8042da0:	4b08      	ldr	r3, [pc, #32]	; (8042dc4 <HAL_Init+0x40>)
 8042da2:	681b      	ldr	r3, [r3, #0]
 8042da4:	4a07      	ldr	r2, [pc, #28]	; (8042dc4 <HAL_Init+0x40>)
 8042da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042dac:	2003      	movs	r0, #3
 8042dae:	f000 f913 	bl	8042fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042db2:	200f      	movs	r0, #15
 8042db4:	f7fe fc38 	bl	8041628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8042db8:	f7fe f8be 	bl	8040f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8042dbc:	2300      	movs	r3, #0
}
 8042dbe:	4618      	mov	r0, r3
 8042dc0:	bd80      	pop	{r7, pc}
 8042dc2:	bf00      	nop
 8042dc4:	40023c00 	.word	0x40023c00

08042dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042dc8:	b480      	push	{r7}
 8042dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8042dcc:	4b06      	ldr	r3, [pc, #24]	; (8042de8 <HAL_IncTick+0x20>)
 8042dce:	781b      	ldrb	r3, [r3, #0]
 8042dd0:	461a      	mov	r2, r3
 8042dd2:	4b06      	ldr	r3, [pc, #24]	; (8042dec <HAL_IncTick+0x24>)
 8042dd4:	681b      	ldr	r3, [r3, #0]
 8042dd6:	4413      	add	r3, r2
 8042dd8:	4a04      	ldr	r2, [pc, #16]	; (8042dec <HAL_IncTick+0x24>)
 8042dda:	6013      	str	r3, [r2, #0]
}
 8042ddc:	bf00      	nop
 8042dde:	46bd      	mov	sp, r7
 8042de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de4:	4770      	bx	lr
 8042de6:	bf00      	nop
 8042de8:	20000058 	.word	0x20000058
 8042dec:	20000664 	.word	0x20000664

08042df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042df0:	b480      	push	{r7}
 8042df2:	af00      	add	r7, sp, #0
  return uwTick;
 8042df4:	4b03      	ldr	r3, [pc, #12]	; (8042e04 <HAL_GetTick+0x14>)
 8042df6:	681b      	ldr	r3, [r3, #0]
}
 8042df8:	4618      	mov	r0, r3
 8042dfa:	46bd      	mov	sp, r7
 8042dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e00:	4770      	bx	lr
 8042e02:	bf00      	nop
 8042e04:	20000664 	.word	0x20000664

08042e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8042e08:	b580      	push	{r7, lr}
 8042e0a:	b084      	sub	sp, #16
 8042e0c:	af00      	add	r7, sp, #0
 8042e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8042e10:	f7ff ffee 	bl	8042df0 <HAL_GetTick>
 8042e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042e16:	687b      	ldr	r3, [r7, #4]
 8042e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8042e1a:	68fb      	ldr	r3, [r7, #12]
 8042e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042e20:	d005      	beq.n	8042e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8042e22:	4b0a      	ldr	r3, [pc, #40]	; (8042e4c <HAL_Delay+0x44>)
 8042e24:	781b      	ldrb	r3, [r3, #0]
 8042e26:	461a      	mov	r2, r3
 8042e28:	68fb      	ldr	r3, [r7, #12]
 8042e2a:	4413      	add	r3, r2
 8042e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8042e2e:	bf00      	nop
 8042e30:	f7ff ffde 	bl	8042df0 <HAL_GetTick>
 8042e34:	4602      	mov	r2, r0
 8042e36:	68bb      	ldr	r3, [r7, #8]
 8042e38:	1ad3      	subs	r3, r2, r3
 8042e3a:	68fa      	ldr	r2, [r7, #12]
 8042e3c:	429a      	cmp	r2, r3
 8042e3e:	d8f7      	bhi.n	8042e30 <HAL_Delay+0x28>
  {
  }
}
 8042e40:	bf00      	nop
 8042e42:	bf00      	nop
 8042e44:	3710      	adds	r7, #16
 8042e46:	46bd      	mov	sp, r7
 8042e48:	bd80      	pop	{r7, pc}
 8042e4a:	bf00      	nop
 8042e4c:	20000058 	.word	0x20000058

08042e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042e50:	b480      	push	{r7}
 8042e52:	b085      	sub	sp, #20
 8042e54:	af00      	add	r7, sp, #0
 8042e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042e58:	687b      	ldr	r3, [r7, #4]
 8042e5a:	f003 0307 	and.w	r3, r3, #7
 8042e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042e60:	4b0c      	ldr	r3, [pc, #48]	; (8042e94 <__NVIC_SetPriorityGrouping+0x44>)
 8042e62:	68db      	ldr	r3, [r3, #12]
 8042e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042e66:	68ba      	ldr	r2, [r7, #8]
 8042e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042e6c:	4013      	ands	r3, r2
 8042e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042e70:	68fb      	ldr	r3, [r7, #12]
 8042e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042e74:	68bb      	ldr	r3, [r7, #8]
 8042e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8042e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042e82:	4a04      	ldr	r2, [pc, #16]	; (8042e94 <__NVIC_SetPriorityGrouping+0x44>)
 8042e84:	68bb      	ldr	r3, [r7, #8]
 8042e86:	60d3      	str	r3, [r2, #12]
}
 8042e88:	bf00      	nop
 8042e8a:	3714      	adds	r7, #20
 8042e8c:	46bd      	mov	sp, r7
 8042e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e92:	4770      	bx	lr
 8042e94:	e000ed00 	.word	0xe000ed00

08042e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8042e98:	b480      	push	{r7}
 8042e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042e9c:	4b04      	ldr	r3, [pc, #16]	; (8042eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8042e9e:	68db      	ldr	r3, [r3, #12]
 8042ea0:	0a1b      	lsrs	r3, r3, #8
 8042ea2:	f003 0307 	and.w	r3, r3, #7
}
 8042ea6:	4618      	mov	r0, r3
 8042ea8:	46bd      	mov	sp, r7
 8042eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042eae:	4770      	bx	lr
 8042eb0:	e000ed00 	.word	0xe000ed00

08042eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042eb4:	b480      	push	{r7}
 8042eb6:	b083      	sub	sp, #12
 8042eb8:	af00      	add	r7, sp, #0
 8042eba:	4603      	mov	r3, r0
 8042ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042ec2:	2b00      	cmp	r3, #0
 8042ec4:	db0b      	blt.n	8042ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042ec6:	79fb      	ldrb	r3, [r7, #7]
 8042ec8:	f003 021f 	and.w	r2, r3, #31
 8042ecc:	4907      	ldr	r1, [pc, #28]	; (8042eec <__NVIC_EnableIRQ+0x38>)
 8042ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042ed2:	095b      	lsrs	r3, r3, #5
 8042ed4:	2001      	movs	r0, #1
 8042ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8042eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8042ede:	bf00      	nop
 8042ee0:	370c      	adds	r7, #12
 8042ee2:	46bd      	mov	sp, r7
 8042ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ee8:	4770      	bx	lr
 8042eea:	bf00      	nop
 8042eec:	e000e100 	.word	0xe000e100

08042ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8042ef0:	b480      	push	{r7}
 8042ef2:	b083      	sub	sp, #12
 8042ef4:	af00      	add	r7, sp, #0
 8042ef6:	4603      	mov	r3, r0
 8042ef8:	6039      	str	r1, [r7, #0]
 8042efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042f00:	2b00      	cmp	r3, #0
 8042f02:	db0a      	blt.n	8042f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042f04:	683b      	ldr	r3, [r7, #0]
 8042f06:	b2da      	uxtb	r2, r3
 8042f08:	490c      	ldr	r1, [pc, #48]	; (8042f3c <__NVIC_SetPriority+0x4c>)
 8042f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042f0e:	0112      	lsls	r2, r2, #4
 8042f10:	b2d2      	uxtb	r2, r2
 8042f12:	440b      	add	r3, r1
 8042f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8042f18:	e00a      	b.n	8042f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042f1a:	683b      	ldr	r3, [r7, #0]
 8042f1c:	b2da      	uxtb	r2, r3
 8042f1e:	4908      	ldr	r1, [pc, #32]	; (8042f40 <__NVIC_SetPriority+0x50>)
 8042f20:	79fb      	ldrb	r3, [r7, #7]
 8042f22:	f003 030f 	and.w	r3, r3, #15
 8042f26:	3b04      	subs	r3, #4
 8042f28:	0112      	lsls	r2, r2, #4
 8042f2a:	b2d2      	uxtb	r2, r2
 8042f2c:	440b      	add	r3, r1
 8042f2e:	761a      	strb	r2, [r3, #24]
}
 8042f30:	bf00      	nop
 8042f32:	370c      	adds	r7, #12
 8042f34:	46bd      	mov	sp, r7
 8042f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f3a:	4770      	bx	lr
 8042f3c:	e000e100 	.word	0xe000e100
 8042f40:	e000ed00 	.word	0xe000ed00

08042f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042f44:	b480      	push	{r7}
 8042f46:	b089      	sub	sp, #36	; 0x24
 8042f48:	af00      	add	r7, sp, #0
 8042f4a:	60f8      	str	r0, [r7, #12]
 8042f4c:	60b9      	str	r1, [r7, #8]
 8042f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042f50:	68fb      	ldr	r3, [r7, #12]
 8042f52:	f003 0307 	and.w	r3, r3, #7
 8042f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042f58:	69fb      	ldr	r3, [r7, #28]
 8042f5a:	f1c3 0307 	rsb	r3, r3, #7
 8042f5e:	2b04      	cmp	r3, #4
 8042f60:	bf28      	it	cs
 8042f62:	2304      	movcs	r3, #4
 8042f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042f66:	69fb      	ldr	r3, [r7, #28]
 8042f68:	3304      	adds	r3, #4
 8042f6a:	2b06      	cmp	r3, #6
 8042f6c:	d902      	bls.n	8042f74 <NVIC_EncodePriority+0x30>
 8042f6e:	69fb      	ldr	r3, [r7, #28]
 8042f70:	3b03      	subs	r3, #3
 8042f72:	e000      	b.n	8042f76 <NVIC_EncodePriority+0x32>
 8042f74:	2300      	movs	r3, #0
 8042f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042f78:	f04f 32ff 	mov.w	r2, #4294967295
 8042f7c:	69bb      	ldr	r3, [r7, #24]
 8042f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8042f82:	43da      	mvns	r2, r3
 8042f84:	68bb      	ldr	r3, [r7, #8]
 8042f86:	401a      	ands	r2, r3
 8042f88:	697b      	ldr	r3, [r7, #20]
 8042f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8042f90:	697b      	ldr	r3, [r7, #20]
 8042f92:	fa01 f303 	lsl.w	r3, r1, r3
 8042f96:	43d9      	mvns	r1, r3
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042f9c:	4313      	orrs	r3, r2
         );
}
 8042f9e:	4618      	mov	r0, r3
 8042fa0:	3724      	adds	r7, #36	; 0x24
 8042fa2:	46bd      	mov	sp, r7
 8042fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fa8:	4770      	bx	lr
	...

08042fac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8042fac:	b480      	push	{r7}
 8042fae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8042fb0:	f3bf 8f4f 	dsb	sy
}
 8042fb4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8042fb6:	4b06      	ldr	r3, [pc, #24]	; (8042fd0 <__NVIC_SystemReset+0x24>)
 8042fb8:	68db      	ldr	r3, [r3, #12]
 8042fba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8042fbe:	4904      	ldr	r1, [pc, #16]	; (8042fd0 <__NVIC_SystemReset+0x24>)
 8042fc0:	4b04      	ldr	r3, [pc, #16]	; (8042fd4 <__NVIC_SystemReset+0x28>)
 8042fc2:	4313      	orrs	r3, r2
 8042fc4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8042fc6:	f3bf 8f4f 	dsb	sy
}
 8042fca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8042fcc:	bf00      	nop
 8042fce:	e7fd      	b.n	8042fcc <__NVIC_SystemReset+0x20>
 8042fd0:	e000ed00 	.word	0xe000ed00
 8042fd4:	05fa0004 	.word	0x05fa0004

08042fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042fd8:	b580      	push	{r7, lr}
 8042fda:	b082      	sub	sp, #8
 8042fdc:	af00      	add	r7, sp, #0
 8042fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042fe0:	6878      	ldr	r0, [r7, #4]
 8042fe2:	f7ff ff35 	bl	8042e50 <__NVIC_SetPriorityGrouping>
}
 8042fe6:	bf00      	nop
 8042fe8:	3708      	adds	r7, #8
 8042fea:	46bd      	mov	sp, r7
 8042fec:	bd80      	pop	{r7, pc}

08042fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042fee:	b580      	push	{r7, lr}
 8042ff0:	b086      	sub	sp, #24
 8042ff2:	af00      	add	r7, sp, #0
 8042ff4:	4603      	mov	r3, r0
 8042ff6:	60b9      	str	r1, [r7, #8]
 8042ff8:	607a      	str	r2, [r7, #4]
 8042ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8042ffc:	2300      	movs	r3, #0
 8042ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8043000:	f7ff ff4a 	bl	8042e98 <__NVIC_GetPriorityGrouping>
 8043004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8043006:	687a      	ldr	r2, [r7, #4]
 8043008:	68b9      	ldr	r1, [r7, #8]
 804300a:	6978      	ldr	r0, [r7, #20]
 804300c:	f7ff ff9a 	bl	8042f44 <NVIC_EncodePriority>
 8043010:	4602      	mov	r2, r0
 8043012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8043016:	4611      	mov	r1, r2
 8043018:	4618      	mov	r0, r3
 804301a:	f7ff ff69 	bl	8042ef0 <__NVIC_SetPriority>
}
 804301e:	bf00      	nop
 8043020:	3718      	adds	r7, #24
 8043022:	46bd      	mov	sp, r7
 8043024:	bd80      	pop	{r7, pc}

08043026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8043026:	b580      	push	{r7, lr}
 8043028:	b082      	sub	sp, #8
 804302a:	af00      	add	r7, sp, #0
 804302c:	4603      	mov	r3, r0
 804302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8043030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043034:	4618      	mov	r0, r3
 8043036:	f7ff ff3d 	bl	8042eb4 <__NVIC_EnableIRQ>
}
 804303a:	bf00      	nop
 804303c:	3708      	adds	r7, #8
 804303e:	46bd      	mov	sp, r7
 8043040:	bd80      	pop	{r7, pc}

08043042 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8043042:	b580      	push	{r7, lr}
 8043044:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8043046:	f7ff ffb1 	bl	8042fac <__NVIC_SystemReset>

0804304a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 804304a:	b580      	push	{r7, lr}
 804304c:	b082      	sub	sp, #8
 804304e:	af00      	add	r7, sp, #0
 8043050:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8043052:	687b      	ldr	r3, [r7, #4]
 8043054:	2b00      	cmp	r3, #0
 8043056:	d101      	bne.n	804305c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8043058:	2301      	movs	r3, #1
 804305a:	e00e      	b.n	804307a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 804305c:	687b      	ldr	r3, [r7, #4]
 804305e:	795b      	ldrb	r3, [r3, #5]
 8043060:	b2db      	uxtb	r3, r3
 8043062:	2b00      	cmp	r3, #0
 8043064:	d105      	bne.n	8043072 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8043066:	687b      	ldr	r3, [r7, #4]
 8043068:	2200      	movs	r2, #0
 804306a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 804306c:	6878      	ldr	r0, [r7, #4]
 804306e:	f7fd ff8b 	bl	8040f88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8043072:	687b      	ldr	r3, [r7, #4]
 8043074:	2201      	movs	r2, #1
 8043076:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8043078:	2300      	movs	r3, #0
}
 804307a:	4618      	mov	r0, r3
 804307c:	3708      	adds	r7, #8
 804307e:	46bd      	mov	sp, r7
 8043080:	bd80      	pop	{r7, pc}
	...

08043084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8043084:	b580      	push	{r7, lr}
 8043086:	b086      	sub	sp, #24
 8043088:	af00      	add	r7, sp, #0
 804308a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 804308c:	2300      	movs	r3, #0
 804308e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8043090:	f7ff feae 	bl	8042df0 <HAL_GetTick>
 8043094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043096:	687b      	ldr	r3, [r7, #4]
 8043098:	2b00      	cmp	r3, #0
 804309a:	d101      	bne.n	80430a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 804309c:	2301      	movs	r3, #1
 804309e:	e099      	b.n	80431d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80430a0:	687b      	ldr	r3, [r7, #4]
 80430a2:	2202      	movs	r2, #2
 80430a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80430a8:	687b      	ldr	r3, [r7, #4]
 80430aa:	2200      	movs	r2, #0
 80430ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80430b0:	687b      	ldr	r3, [r7, #4]
 80430b2:	681b      	ldr	r3, [r3, #0]
 80430b4:	681a      	ldr	r2, [r3, #0]
 80430b6:	687b      	ldr	r3, [r7, #4]
 80430b8:	681b      	ldr	r3, [r3, #0]
 80430ba:	f022 0201 	bic.w	r2, r2, #1
 80430be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80430c0:	e00f      	b.n	80430e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80430c2:	f7ff fe95 	bl	8042df0 <HAL_GetTick>
 80430c6:	4602      	mov	r2, r0
 80430c8:	693b      	ldr	r3, [r7, #16]
 80430ca:	1ad3      	subs	r3, r2, r3
 80430cc:	2b05      	cmp	r3, #5
 80430ce:	d908      	bls.n	80430e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	2220      	movs	r2, #32
 80430d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80430d6:	687b      	ldr	r3, [r7, #4]
 80430d8:	2203      	movs	r2, #3
 80430da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80430de:	2303      	movs	r3, #3
 80430e0:	e078      	b.n	80431d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80430e2:	687b      	ldr	r3, [r7, #4]
 80430e4:	681b      	ldr	r3, [r3, #0]
 80430e6:	681b      	ldr	r3, [r3, #0]
 80430e8:	f003 0301 	and.w	r3, r3, #1
 80430ec:	2b00      	cmp	r3, #0
 80430ee:	d1e8      	bne.n	80430c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80430f0:	687b      	ldr	r3, [r7, #4]
 80430f2:	681b      	ldr	r3, [r3, #0]
 80430f4:	681b      	ldr	r3, [r3, #0]
 80430f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80430f8:	697a      	ldr	r2, [r7, #20]
 80430fa:	4b38      	ldr	r3, [pc, #224]	; (80431dc <HAL_DMA_Init+0x158>)
 80430fc:	4013      	ands	r3, r2
 80430fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8043100:	687b      	ldr	r3, [r7, #4]
 8043102:	685a      	ldr	r2, [r3, #4]
 8043104:	687b      	ldr	r3, [r7, #4]
 8043106:	689b      	ldr	r3, [r3, #8]
 8043108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804310a:	687b      	ldr	r3, [r7, #4]
 804310c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804310e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8043110:	687b      	ldr	r3, [r7, #4]
 8043112:	691b      	ldr	r3, [r3, #16]
 8043114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043116:	687b      	ldr	r3, [r7, #4]
 8043118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804311a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804311c:	687b      	ldr	r3, [r7, #4]
 804311e:	699b      	ldr	r3, [r3, #24]
 8043120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8043122:	687b      	ldr	r3, [r7, #4]
 8043124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8043126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8043128:	687b      	ldr	r3, [r7, #4]
 804312a:	6a1b      	ldr	r3, [r3, #32]
 804312c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804312e:	697a      	ldr	r2, [r7, #20]
 8043130:	4313      	orrs	r3, r2
 8043132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043134:	687b      	ldr	r3, [r7, #4]
 8043136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043138:	2b04      	cmp	r3, #4
 804313a:	d107      	bne.n	804314c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 804313c:	687b      	ldr	r3, [r7, #4]
 804313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043140:	687b      	ldr	r3, [r7, #4]
 8043142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043144:	4313      	orrs	r3, r2
 8043146:	697a      	ldr	r2, [r7, #20]
 8043148:	4313      	orrs	r3, r2
 804314a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 804314c:	687b      	ldr	r3, [r7, #4]
 804314e:	681b      	ldr	r3, [r3, #0]
 8043150:	697a      	ldr	r2, [r7, #20]
 8043152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	681b      	ldr	r3, [r3, #0]
 8043158:	695b      	ldr	r3, [r3, #20]
 804315a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 804315c:	697b      	ldr	r3, [r7, #20]
 804315e:	f023 0307 	bic.w	r3, r3, #7
 8043162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8043164:	687b      	ldr	r3, [r7, #4]
 8043166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043168:	697a      	ldr	r2, [r7, #20]
 804316a:	4313      	orrs	r3, r2
 804316c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043172:	2b04      	cmp	r3, #4
 8043174:	d117      	bne.n	80431a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8043176:	687b      	ldr	r3, [r7, #4]
 8043178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804317a:	697a      	ldr	r2, [r7, #20]
 804317c:	4313      	orrs	r3, r2
 804317e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043180:	687b      	ldr	r3, [r7, #4]
 8043182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043184:	2b00      	cmp	r3, #0
 8043186:	d00e      	beq.n	80431a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8043188:	6878      	ldr	r0, [r7, #4]
 804318a:	f000 f8bd 	bl	8043308 <DMA_CheckFifoParam>
 804318e:	4603      	mov	r3, r0
 8043190:	2b00      	cmp	r3, #0
 8043192:	d008      	beq.n	80431a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043194:	687b      	ldr	r3, [r7, #4]
 8043196:	2240      	movs	r2, #64	; 0x40
 8043198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804319a:	687b      	ldr	r3, [r7, #4]
 804319c:	2201      	movs	r2, #1
 804319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80431a2:	2301      	movs	r3, #1
 80431a4:	e016      	b.n	80431d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80431a6:	687b      	ldr	r3, [r7, #4]
 80431a8:	681b      	ldr	r3, [r3, #0]
 80431aa:	697a      	ldr	r2, [r7, #20]
 80431ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80431ae:	6878      	ldr	r0, [r7, #4]
 80431b0:	f000 f874 	bl	804329c <DMA_CalcBaseAndBitshift>
 80431b4:	4603      	mov	r3, r0
 80431b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80431b8:	687b      	ldr	r3, [r7, #4]
 80431ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80431bc:	223f      	movs	r2, #63	; 0x3f
 80431be:	409a      	lsls	r2, r3
 80431c0:	68fb      	ldr	r3, [r7, #12]
 80431c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80431c4:	687b      	ldr	r3, [r7, #4]
 80431c6:	2200      	movs	r2, #0
 80431c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80431ca:	687b      	ldr	r3, [r7, #4]
 80431cc:	2201      	movs	r2, #1
 80431ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80431d2:	2300      	movs	r3, #0
}
 80431d4:	4618      	mov	r0, r3
 80431d6:	3718      	adds	r7, #24
 80431d8:	46bd      	mov	sp, r7
 80431da:	bd80      	pop	{r7, pc}
 80431dc:	f010803f 	.word	0xf010803f

080431e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80431e0:	b580      	push	{r7, lr}
 80431e2:	b084      	sub	sp, #16
 80431e4:	af00      	add	r7, sp, #0
 80431e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	2b00      	cmp	r3, #0
 80431ec:	d101      	bne.n	80431f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80431ee:	2301      	movs	r3, #1
 80431f0:	e050      	b.n	8043294 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80431f2:	687b      	ldr	r3, [r7, #4]
 80431f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80431f8:	b2db      	uxtb	r3, r3
 80431fa:	2b02      	cmp	r3, #2
 80431fc:	d101      	bne.n	8043202 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80431fe:	2302      	movs	r3, #2
 8043200:	e048      	b.n	8043294 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8043202:	687b      	ldr	r3, [r7, #4]
 8043204:	681b      	ldr	r3, [r3, #0]
 8043206:	681a      	ldr	r2, [r3, #0]
 8043208:	687b      	ldr	r3, [r7, #4]
 804320a:	681b      	ldr	r3, [r3, #0]
 804320c:	f022 0201 	bic.w	r2, r2, #1
 8043210:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8043212:	687b      	ldr	r3, [r7, #4]
 8043214:	681b      	ldr	r3, [r3, #0]
 8043216:	2200      	movs	r2, #0
 8043218:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 804321a:	687b      	ldr	r3, [r7, #4]
 804321c:	681b      	ldr	r3, [r3, #0]
 804321e:	2200      	movs	r2, #0
 8043220:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8043222:	687b      	ldr	r3, [r7, #4]
 8043224:	681b      	ldr	r3, [r3, #0]
 8043226:	2200      	movs	r2, #0
 8043228:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 804322a:	687b      	ldr	r3, [r7, #4]
 804322c:	681b      	ldr	r3, [r3, #0]
 804322e:	2200      	movs	r2, #0
 8043230:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8043232:	687b      	ldr	r3, [r7, #4]
 8043234:	681b      	ldr	r3, [r3, #0]
 8043236:	2200      	movs	r2, #0
 8043238:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 804323a:	687b      	ldr	r3, [r7, #4]
 804323c:	681b      	ldr	r3, [r3, #0]
 804323e:	2221      	movs	r2, #33	; 0x21
 8043240:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8043242:	6878      	ldr	r0, [r7, #4]
 8043244:	f000 f82a 	bl	804329c <DMA_CalcBaseAndBitshift>
 8043248:	4603      	mov	r3, r0
 804324a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 804324c:	687b      	ldr	r3, [r7, #4]
 804324e:	2200      	movs	r2, #0
 8043250:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8043252:	687b      	ldr	r3, [r7, #4]
 8043254:	2200      	movs	r2, #0
 8043256:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8043258:	687b      	ldr	r3, [r7, #4]
 804325a:	2200      	movs	r2, #0
 804325c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 804325e:	687b      	ldr	r3, [r7, #4]
 8043260:	2200      	movs	r2, #0
 8043262:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8043264:	687b      	ldr	r3, [r7, #4]
 8043266:	2200      	movs	r2, #0
 8043268:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 804326a:	687b      	ldr	r3, [r7, #4]
 804326c:	2200      	movs	r2, #0
 804326e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043270:	687b      	ldr	r3, [r7, #4]
 8043272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043274:	223f      	movs	r2, #63	; 0x3f
 8043276:	409a      	lsls	r2, r3
 8043278:	68fb      	ldr	r3, [r7, #12]
 804327a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804327c:	687b      	ldr	r3, [r7, #4]
 804327e:	2200      	movs	r2, #0
 8043280:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8043282:	687b      	ldr	r3, [r7, #4]
 8043284:	2200      	movs	r2, #0
 8043286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 804328a:	687b      	ldr	r3, [r7, #4]
 804328c:	2200      	movs	r2, #0
 804328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8043292:	2300      	movs	r3, #0
}
 8043294:	4618      	mov	r0, r3
 8043296:	3710      	adds	r7, #16
 8043298:	46bd      	mov	sp, r7
 804329a:	bd80      	pop	{r7, pc}

0804329c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 804329c:	b480      	push	{r7}
 804329e:	b085      	sub	sp, #20
 80432a0:	af00      	add	r7, sp, #0
 80432a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80432a4:	687b      	ldr	r3, [r7, #4]
 80432a6:	681b      	ldr	r3, [r3, #0]
 80432a8:	b2db      	uxtb	r3, r3
 80432aa:	3b10      	subs	r3, #16
 80432ac:	4a14      	ldr	r2, [pc, #80]	; (8043300 <DMA_CalcBaseAndBitshift+0x64>)
 80432ae:	fba2 2303 	umull	r2, r3, r2, r3
 80432b2:	091b      	lsrs	r3, r3, #4
 80432b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80432b6:	4a13      	ldr	r2, [pc, #76]	; (8043304 <DMA_CalcBaseAndBitshift+0x68>)
 80432b8:	68fb      	ldr	r3, [r7, #12]
 80432ba:	4413      	add	r3, r2
 80432bc:	781b      	ldrb	r3, [r3, #0]
 80432be:	461a      	mov	r2, r3
 80432c0:	687b      	ldr	r3, [r7, #4]
 80432c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80432c4:	68fb      	ldr	r3, [r7, #12]
 80432c6:	2b03      	cmp	r3, #3
 80432c8:	d909      	bls.n	80432de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80432ca:	687b      	ldr	r3, [r7, #4]
 80432cc:	681b      	ldr	r3, [r3, #0]
 80432ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80432d2:	f023 0303 	bic.w	r3, r3, #3
 80432d6:	1d1a      	adds	r2, r3, #4
 80432d8:	687b      	ldr	r3, [r7, #4]
 80432da:	659a      	str	r2, [r3, #88]	; 0x58
 80432dc:	e007      	b.n	80432ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80432de:	687b      	ldr	r3, [r7, #4]
 80432e0:	681b      	ldr	r3, [r3, #0]
 80432e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80432e6:	f023 0303 	bic.w	r3, r3, #3
 80432ea:	687a      	ldr	r2, [r7, #4]
 80432ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80432ee:	687b      	ldr	r3, [r7, #4]
 80432f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80432f2:	4618      	mov	r0, r3
 80432f4:	3714      	adds	r7, #20
 80432f6:	46bd      	mov	sp, r7
 80432f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432fc:	4770      	bx	lr
 80432fe:	bf00      	nop
 8043300:	aaaaaaab 	.word	0xaaaaaaab
 8043304:	0804fbc0 	.word	0x0804fbc0

08043308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8043308:	b480      	push	{r7}
 804330a:	b085      	sub	sp, #20
 804330c:	af00      	add	r7, sp, #0
 804330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8043310:	2300      	movs	r3, #0
 8043312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8043314:	687b      	ldr	r3, [r7, #4]
 8043316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 804331a:	687b      	ldr	r3, [r7, #4]
 804331c:	699b      	ldr	r3, [r3, #24]
 804331e:	2b00      	cmp	r3, #0
 8043320:	d11f      	bne.n	8043362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8043322:	68bb      	ldr	r3, [r7, #8]
 8043324:	2b03      	cmp	r3, #3
 8043326:	d856      	bhi.n	80433d6 <DMA_CheckFifoParam+0xce>
 8043328:	a201      	add	r2, pc, #4	; (adr r2, 8043330 <DMA_CheckFifoParam+0x28>)
 804332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804332e:	bf00      	nop
 8043330:	08043341 	.word	0x08043341
 8043334:	08043353 	.word	0x08043353
 8043338:	08043341 	.word	0x08043341
 804333c:	080433d7 	.word	0x080433d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043340:	687b      	ldr	r3, [r7, #4]
 8043342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043348:	2b00      	cmp	r3, #0
 804334a:	d046      	beq.n	80433da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 804334c:	2301      	movs	r3, #1
 804334e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043350:	e043      	b.n	80433da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043352:	687b      	ldr	r3, [r7, #4]
 8043354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 804335a:	d140      	bne.n	80433de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 804335c:	2301      	movs	r3, #1
 804335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043360:	e03d      	b.n	80433de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8043362:	687b      	ldr	r3, [r7, #4]
 8043364:	699b      	ldr	r3, [r3, #24]
 8043366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804336a:	d121      	bne.n	80433b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 804336c:	68bb      	ldr	r3, [r7, #8]
 804336e:	2b03      	cmp	r3, #3
 8043370:	d837      	bhi.n	80433e2 <DMA_CheckFifoParam+0xda>
 8043372:	a201      	add	r2, pc, #4	; (adr r2, 8043378 <DMA_CheckFifoParam+0x70>)
 8043374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043378:	08043389 	.word	0x08043389
 804337c:	0804338f 	.word	0x0804338f
 8043380:	08043389 	.word	0x08043389
 8043384:	080433a1 	.word	0x080433a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8043388:	2301      	movs	r3, #1
 804338a:	73fb      	strb	r3, [r7, #15]
      break;
 804338c:	e030      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804338e:	687b      	ldr	r3, [r7, #4]
 8043390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043396:	2b00      	cmp	r3, #0
 8043398:	d025      	beq.n	80433e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 804339a:	2301      	movs	r3, #1
 804339c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804339e:	e022      	b.n	80433e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80433a0:	687b      	ldr	r3, [r7, #4]
 80433a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80433a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80433a8:	d11f      	bne.n	80433ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80433aa:	2301      	movs	r3, #1
 80433ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80433ae:	e01c      	b.n	80433ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80433b0:	68bb      	ldr	r3, [r7, #8]
 80433b2:	2b02      	cmp	r3, #2
 80433b4:	d903      	bls.n	80433be <DMA_CheckFifoParam+0xb6>
 80433b6:	68bb      	ldr	r3, [r7, #8]
 80433b8:	2b03      	cmp	r3, #3
 80433ba:	d003      	beq.n	80433c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80433bc:	e018      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80433be:	2301      	movs	r3, #1
 80433c0:	73fb      	strb	r3, [r7, #15]
      break;
 80433c2:	e015      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80433c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80433cc:	2b00      	cmp	r3, #0
 80433ce:	d00e      	beq.n	80433ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80433d0:	2301      	movs	r3, #1
 80433d2:	73fb      	strb	r3, [r7, #15]
      break;
 80433d4:	e00b      	b.n	80433ee <DMA_CheckFifoParam+0xe6>
      break;
 80433d6:	bf00      	nop
 80433d8:	e00a      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;
 80433da:	bf00      	nop
 80433dc:	e008      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;
 80433de:	bf00      	nop
 80433e0:	e006      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;
 80433e2:	bf00      	nop
 80433e4:	e004      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;
 80433e6:	bf00      	nop
 80433e8:	e002      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80433ea:	bf00      	nop
 80433ec:	e000      	b.n	80433f0 <DMA_CheckFifoParam+0xe8>
      break;
 80433ee:	bf00      	nop
    }
  } 
  
  return status; 
 80433f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80433f2:	4618      	mov	r0, r3
 80433f4:	3714      	adds	r7, #20
 80433f6:	46bd      	mov	sp, r7
 80433f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80433fc:	4770      	bx	lr
 80433fe:	bf00      	nop

08043400 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8043400:	b580      	push	{r7, lr}
 8043402:	b082      	sub	sp, #8
 8043404:	af00      	add	r7, sp, #0
 8043406:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8043408:	687b      	ldr	r3, [r7, #4]
 804340a:	2b00      	cmp	r3, #0
 804340c:	d101      	bne.n	8043412 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 804340e:	2301      	movs	r3, #1
 8043410:	e03b      	b.n	804348a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8043412:	687b      	ldr	r3, [r7, #4]
 8043414:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8043418:	b2db      	uxtb	r3, r3
 804341a:	2b00      	cmp	r3, #0
 804341c:	d106      	bne.n	804342c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	2200      	movs	r2, #0
 8043422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8043426:	6878      	ldr	r0, [r7, #4]
 8043428:	f7fd fdd0 	bl	8040fcc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 804342c:	687b      	ldr	r3, [r7, #4]
 804342e:	2202      	movs	r2, #2
 8043430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8043434:	687b      	ldr	r3, [r7, #4]
 8043436:	681b      	ldr	r3, [r3, #0]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 804343e:	687b      	ldr	r3, [r7, #4]
 8043440:	685a      	ldr	r2, [r3, #4]
 8043442:	687b      	ldr	r3, [r7, #4]
 8043444:	681b      	ldr	r3, [r3, #0]
 8043446:	430a      	orrs	r2, r1
 8043448:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 804344a:	687b      	ldr	r3, [r7, #4]
 804344c:	681b      	ldr	r3, [r3, #0]
 804344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043450:	f023 0107 	bic.w	r1, r3, #7
 8043454:	687b      	ldr	r3, [r7, #4]
 8043456:	689a      	ldr	r2, [r3, #8]
 8043458:	687b      	ldr	r3, [r7, #4]
 804345a:	681b      	ldr	r3, [r3, #0]
 804345c:	430a      	orrs	r2, r1
 804345e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8043460:	687b      	ldr	r3, [r7, #4]
 8043462:	681b      	ldr	r3, [r3, #0]
 8043464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043466:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 804346a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 804346e:	687a      	ldr	r2, [r7, #4]
 8043470:	68d1      	ldr	r1, [r2, #12]
 8043472:	687a      	ldr	r2, [r7, #4]
 8043474:	6812      	ldr	r2, [r2, #0]
 8043476:	430b      	orrs	r3, r1
 8043478:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 804347a:	687b      	ldr	r3, [r7, #4]
 804347c:	2200      	movs	r2, #0
 804347e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8043480:	687b      	ldr	r3, [r7, #4]
 8043482:	2201      	movs	r2, #1
 8043484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8043488:	2300      	movs	r3, #0
}
 804348a:	4618      	mov	r0, r3
 804348c:	3708      	adds	r7, #8
 804348e:	46bd      	mov	sp, r7
 8043490:	bd80      	pop	{r7, pc}

08043492 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8043492:	b580      	push	{r7, lr}
 8043494:	b086      	sub	sp, #24
 8043496:	af02      	add	r7, sp, #8
 8043498:	60f8      	str	r0, [r7, #12]
 804349a:	60b9      	str	r1, [r7, #8]
 804349c:	607a      	str	r2, [r7, #4]
 804349e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80434a0:	68fb      	ldr	r3, [r7, #12]
 80434a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80434a6:	2b01      	cmp	r3, #1
 80434a8:	d101      	bne.n	80434ae <HAL_DMA2D_Start+0x1c>
 80434aa:	2302      	movs	r3, #2
 80434ac:	e018      	b.n	80434e0 <HAL_DMA2D_Start+0x4e>
 80434ae:	68fb      	ldr	r3, [r7, #12]
 80434b0:	2201      	movs	r2, #1
 80434b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80434b6:	68fb      	ldr	r3, [r7, #12]
 80434b8:	2202      	movs	r2, #2
 80434ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80434be:	69bb      	ldr	r3, [r7, #24]
 80434c0:	9300      	str	r3, [sp, #0]
 80434c2:	683b      	ldr	r3, [r7, #0]
 80434c4:	687a      	ldr	r2, [r7, #4]
 80434c6:	68b9      	ldr	r1, [r7, #8]
 80434c8:	68f8      	ldr	r0, [r7, #12]
 80434ca:	f000 fa99 	bl	8043a00 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80434ce:	68fb      	ldr	r3, [r7, #12]
 80434d0:	681b      	ldr	r3, [r3, #0]
 80434d2:	681a      	ldr	r2, [r3, #0]
 80434d4:	68fb      	ldr	r3, [r7, #12]
 80434d6:	681b      	ldr	r3, [r3, #0]
 80434d8:	f042 0201 	orr.w	r2, r2, #1
 80434dc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80434de:	2300      	movs	r3, #0
}
 80434e0:	4618      	mov	r0, r3
 80434e2:	3710      	adds	r7, #16
 80434e4:	46bd      	mov	sp, r7
 80434e6:	bd80      	pop	{r7, pc}

080434e8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80434e8:	b580      	push	{r7, lr}
 80434ea:	b086      	sub	sp, #24
 80434ec:	af00      	add	r7, sp, #0
 80434ee:	6078      	str	r0, [r7, #4]
 80434f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80434f2:	2300      	movs	r3, #0
 80434f4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80434f6:	687b      	ldr	r3, [r7, #4]
 80434f8:	681b      	ldr	r3, [r3, #0]
 80434fa:	681b      	ldr	r3, [r3, #0]
 80434fc:	f003 0301 	and.w	r3, r3, #1
 8043500:	2b00      	cmp	r3, #0
 8043502:	d056      	beq.n	80435b2 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043504:	f7ff fc74 	bl	8042df0 <HAL_GetTick>
 8043508:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 804350a:	e04b      	b.n	80435a4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 804350c:	687b      	ldr	r3, [r7, #4]
 804350e:	681b      	ldr	r3, [r3, #0]
 8043510:	685b      	ldr	r3, [r3, #4]
 8043512:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043514:	68fb      	ldr	r3, [r7, #12]
 8043516:	f003 0321 	and.w	r3, r3, #33	; 0x21
 804351a:	2b00      	cmp	r3, #0
 804351c:	d023      	beq.n	8043566 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 804351e:	68fb      	ldr	r3, [r7, #12]
 8043520:	f003 0320 	and.w	r3, r3, #32
 8043524:	2b00      	cmp	r3, #0
 8043526:	d005      	beq.n	8043534 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043528:	687b      	ldr	r3, [r7, #4]
 804352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804352c:	f043 0202 	orr.w	r2, r3, #2
 8043530:	687b      	ldr	r3, [r7, #4]
 8043532:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043534:	68fb      	ldr	r3, [r7, #12]
 8043536:	f003 0301 	and.w	r3, r3, #1
 804353a:	2b00      	cmp	r3, #0
 804353c:	d005      	beq.n	804354a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 804353e:	687b      	ldr	r3, [r7, #4]
 8043540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043542:	f043 0201 	orr.w	r2, r3, #1
 8043546:	687b      	ldr	r3, [r7, #4]
 8043548:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 804354a:	687b      	ldr	r3, [r7, #4]
 804354c:	681b      	ldr	r3, [r3, #0]
 804354e:	2221      	movs	r2, #33	; 0x21
 8043550:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043552:	687b      	ldr	r3, [r7, #4]
 8043554:	2204      	movs	r2, #4
 8043556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 804355a:	687b      	ldr	r3, [r7, #4]
 804355c:	2200      	movs	r2, #0
 804355e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043562:	2301      	movs	r3, #1
 8043564:	e0a5      	b.n	80436b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043566:	683b      	ldr	r3, [r7, #0]
 8043568:	f1b3 3fff 	cmp.w	r3, #4294967295
 804356c:	d01a      	beq.n	80435a4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 804356e:	f7ff fc3f 	bl	8042df0 <HAL_GetTick>
 8043572:	4602      	mov	r2, r0
 8043574:	697b      	ldr	r3, [r7, #20]
 8043576:	1ad3      	subs	r3, r2, r3
 8043578:	683a      	ldr	r2, [r7, #0]
 804357a:	429a      	cmp	r2, r3
 804357c:	d302      	bcc.n	8043584 <HAL_DMA2D_PollForTransfer+0x9c>
 804357e:	683b      	ldr	r3, [r7, #0]
 8043580:	2b00      	cmp	r3, #0
 8043582:	d10f      	bne.n	80435a4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043584:	687b      	ldr	r3, [r7, #4]
 8043586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043588:	f043 0220 	orr.w	r2, r3, #32
 804358c:	687b      	ldr	r3, [r7, #4]
 804358e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043590:	687b      	ldr	r3, [r7, #4]
 8043592:	2203      	movs	r2, #3
 8043594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043598:	687b      	ldr	r3, [r7, #4]
 804359a:	2200      	movs	r2, #0
 804359c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80435a0:	2303      	movs	r3, #3
 80435a2:	e086      	b.n	80436b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80435a4:	687b      	ldr	r3, [r7, #4]
 80435a6:	681b      	ldr	r3, [r3, #0]
 80435a8:	685b      	ldr	r3, [r3, #4]
 80435aa:	f003 0302 	and.w	r3, r3, #2
 80435ae:	2b00      	cmp	r3, #0
 80435b0:	d0ac      	beq.n	804350c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80435b2:	687b      	ldr	r3, [r7, #4]
 80435b4:	681b      	ldr	r3, [r3, #0]
 80435b6:	69db      	ldr	r3, [r3, #28]
 80435b8:	f003 0320 	and.w	r3, r3, #32
 80435bc:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80435be:	687b      	ldr	r3, [r7, #4]
 80435c0:	681b      	ldr	r3, [r3, #0]
 80435c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80435c4:	f003 0320 	and.w	r3, r3, #32
 80435c8:	693a      	ldr	r2, [r7, #16]
 80435ca:	4313      	orrs	r3, r2
 80435cc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80435ce:	693b      	ldr	r3, [r7, #16]
 80435d0:	2b00      	cmp	r3, #0
 80435d2:	d061      	beq.n	8043698 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80435d4:	f7ff fc0c 	bl	8042df0 <HAL_GetTick>
 80435d8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80435da:	e056      	b.n	804368a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80435dc:	687b      	ldr	r3, [r7, #4]
 80435de:	681b      	ldr	r3, [r3, #0]
 80435e0:	685b      	ldr	r3, [r3, #4]
 80435e2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80435e4:	68fb      	ldr	r3, [r7, #12]
 80435e6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80435ea:	2b00      	cmp	r3, #0
 80435ec:	d02e      	beq.n	804364c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80435ee:	68fb      	ldr	r3, [r7, #12]
 80435f0:	f003 0308 	and.w	r3, r3, #8
 80435f4:	2b00      	cmp	r3, #0
 80435f6:	d005      	beq.n	8043604 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80435f8:	687b      	ldr	r3, [r7, #4]
 80435fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80435fc:	f043 0204 	orr.w	r2, r3, #4
 8043600:	687b      	ldr	r3, [r7, #4]
 8043602:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043604:	68fb      	ldr	r3, [r7, #12]
 8043606:	f003 0320 	and.w	r3, r3, #32
 804360a:	2b00      	cmp	r3, #0
 804360c:	d005      	beq.n	804361a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 804360e:	687b      	ldr	r3, [r7, #4]
 8043610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043612:	f043 0202 	orr.w	r2, r3, #2
 8043616:	687b      	ldr	r3, [r7, #4]
 8043618:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 804361a:	68fb      	ldr	r3, [r7, #12]
 804361c:	f003 0301 	and.w	r3, r3, #1
 8043620:	2b00      	cmp	r3, #0
 8043622:	d005      	beq.n	8043630 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043624:	687b      	ldr	r3, [r7, #4]
 8043626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043628:	f043 0201 	orr.w	r2, r3, #1
 804362c:	687b      	ldr	r3, [r7, #4]
 804362e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043630:	687b      	ldr	r3, [r7, #4]
 8043632:	681b      	ldr	r3, [r3, #0]
 8043634:	2229      	movs	r2, #41	; 0x29
 8043636:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043638:	687b      	ldr	r3, [r7, #4]
 804363a:	2204      	movs	r2, #4
 804363c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043640:	687b      	ldr	r3, [r7, #4]
 8043642:	2200      	movs	r2, #0
 8043644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043648:	2301      	movs	r3, #1
 804364a:	e032      	b.n	80436b2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 804364c:	683b      	ldr	r3, [r7, #0]
 804364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043652:	d01a      	beq.n	804368a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043654:	f7ff fbcc 	bl	8042df0 <HAL_GetTick>
 8043658:	4602      	mov	r2, r0
 804365a:	697b      	ldr	r3, [r7, #20]
 804365c:	1ad3      	subs	r3, r2, r3
 804365e:	683a      	ldr	r2, [r7, #0]
 8043660:	429a      	cmp	r2, r3
 8043662:	d302      	bcc.n	804366a <HAL_DMA2D_PollForTransfer+0x182>
 8043664:	683b      	ldr	r3, [r7, #0]
 8043666:	2b00      	cmp	r3, #0
 8043668:	d10f      	bne.n	804368a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 804366a:	687b      	ldr	r3, [r7, #4]
 804366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804366e:	f043 0220 	orr.w	r2, r3, #32
 8043672:	687b      	ldr	r3, [r7, #4]
 8043674:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043676:	687b      	ldr	r3, [r7, #4]
 8043678:	2203      	movs	r2, #3
 804367a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 804367e:	687b      	ldr	r3, [r7, #4]
 8043680:	2200      	movs	r2, #0
 8043682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043686:	2303      	movs	r3, #3
 8043688:	e013      	b.n	80436b2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 804368a:	687b      	ldr	r3, [r7, #4]
 804368c:	681b      	ldr	r3, [r3, #0]
 804368e:	685b      	ldr	r3, [r3, #4]
 8043690:	f003 0310 	and.w	r3, r3, #16
 8043694:	2b00      	cmp	r3, #0
 8043696:	d0a1      	beq.n	80435dc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8043698:	687b      	ldr	r3, [r7, #4]
 804369a:	681b      	ldr	r3, [r3, #0]
 804369c:	2212      	movs	r2, #18
 804369e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80436a0:	687b      	ldr	r3, [r7, #4]
 80436a2:	2201      	movs	r2, #1
 80436a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80436a8:	687b      	ldr	r3, [r7, #4]
 80436aa:	2200      	movs	r2, #0
 80436ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80436b0:	2300      	movs	r3, #0
}
 80436b2:	4618      	mov	r0, r3
 80436b4:	3718      	adds	r7, #24
 80436b6:	46bd      	mov	sp, r7
 80436b8:	bd80      	pop	{r7, pc}

080436ba <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80436ba:	b580      	push	{r7, lr}
 80436bc:	b084      	sub	sp, #16
 80436be:	af00      	add	r7, sp, #0
 80436c0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80436c2:	687b      	ldr	r3, [r7, #4]
 80436c4:	681b      	ldr	r3, [r3, #0]
 80436c6:	685b      	ldr	r3, [r3, #4]
 80436c8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80436ca:	687b      	ldr	r3, [r7, #4]
 80436cc:	681b      	ldr	r3, [r3, #0]
 80436ce:	681b      	ldr	r3, [r3, #0]
 80436d0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80436d2:	68fb      	ldr	r3, [r7, #12]
 80436d4:	f003 0301 	and.w	r3, r3, #1
 80436d8:	2b00      	cmp	r3, #0
 80436da:	d026      	beq.n	804372a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80436dc:	68bb      	ldr	r3, [r7, #8]
 80436de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80436e2:	2b00      	cmp	r3, #0
 80436e4:	d021      	beq.n	804372a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80436e6:	687b      	ldr	r3, [r7, #4]
 80436e8:	681b      	ldr	r3, [r3, #0]
 80436ea:	681a      	ldr	r2, [r3, #0]
 80436ec:	687b      	ldr	r3, [r7, #4]
 80436ee:	681b      	ldr	r3, [r3, #0]
 80436f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80436f4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80436f6:	687b      	ldr	r3, [r7, #4]
 80436f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80436fa:	f043 0201 	orr.w	r2, r3, #1
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8043702:	687b      	ldr	r3, [r7, #4]
 8043704:	681b      	ldr	r3, [r3, #0]
 8043706:	2201      	movs	r2, #1
 8043708:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 804370a:	687b      	ldr	r3, [r7, #4]
 804370c:	2204      	movs	r2, #4
 804370e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043712:	687b      	ldr	r3, [r7, #4]
 8043714:	2200      	movs	r2, #0
 8043716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 804371a:	687b      	ldr	r3, [r7, #4]
 804371c:	695b      	ldr	r3, [r3, #20]
 804371e:	2b00      	cmp	r3, #0
 8043720:	d003      	beq.n	804372a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043722:	687b      	ldr	r3, [r7, #4]
 8043724:	695b      	ldr	r3, [r3, #20]
 8043726:	6878      	ldr	r0, [r7, #4]
 8043728:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 804372a:	68fb      	ldr	r3, [r7, #12]
 804372c:	f003 0320 	and.w	r3, r3, #32
 8043730:	2b00      	cmp	r3, #0
 8043732:	d026      	beq.n	8043782 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8043734:	68bb      	ldr	r3, [r7, #8]
 8043736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804373a:	2b00      	cmp	r3, #0
 804373c:	d021      	beq.n	8043782 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 804373e:	687b      	ldr	r3, [r7, #4]
 8043740:	681b      	ldr	r3, [r3, #0]
 8043742:	681a      	ldr	r2, [r3, #0]
 8043744:	687b      	ldr	r3, [r7, #4]
 8043746:	681b      	ldr	r3, [r3, #0]
 8043748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804374c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 804374e:	687b      	ldr	r3, [r7, #4]
 8043750:	681b      	ldr	r3, [r3, #0]
 8043752:	2220      	movs	r2, #32
 8043754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043756:	687b      	ldr	r3, [r7, #4]
 8043758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804375a:	f043 0202 	orr.w	r2, r3, #2
 804375e:	687b      	ldr	r3, [r7, #4]
 8043760:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043762:	687b      	ldr	r3, [r7, #4]
 8043764:	2204      	movs	r2, #4
 8043766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 804376a:	687b      	ldr	r3, [r7, #4]
 804376c:	2200      	movs	r2, #0
 804376e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043772:	687b      	ldr	r3, [r7, #4]
 8043774:	695b      	ldr	r3, [r3, #20]
 8043776:	2b00      	cmp	r3, #0
 8043778:	d003      	beq.n	8043782 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 804377a:	687b      	ldr	r3, [r7, #4]
 804377c:	695b      	ldr	r3, [r3, #20]
 804377e:	6878      	ldr	r0, [r7, #4]
 8043780:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043782:	68fb      	ldr	r3, [r7, #12]
 8043784:	f003 0308 	and.w	r3, r3, #8
 8043788:	2b00      	cmp	r3, #0
 804378a:	d026      	beq.n	80437da <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 804378c:	68bb      	ldr	r3, [r7, #8]
 804378e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043792:	2b00      	cmp	r3, #0
 8043794:	d021      	beq.n	80437da <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8043796:	687b      	ldr	r3, [r7, #4]
 8043798:	681b      	ldr	r3, [r3, #0]
 804379a:	681a      	ldr	r2, [r3, #0]
 804379c:	687b      	ldr	r3, [r7, #4]
 804379e:	681b      	ldr	r3, [r3, #0]
 80437a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80437a4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80437a6:	687b      	ldr	r3, [r7, #4]
 80437a8:	681b      	ldr	r3, [r3, #0]
 80437aa:	2208      	movs	r2, #8
 80437ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80437ae:	687b      	ldr	r3, [r7, #4]
 80437b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80437b2:	f043 0204 	orr.w	r2, r3, #4
 80437b6:	687b      	ldr	r3, [r7, #4]
 80437b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80437ba:	687b      	ldr	r3, [r7, #4]
 80437bc:	2204      	movs	r2, #4
 80437be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80437c2:	687b      	ldr	r3, [r7, #4]
 80437c4:	2200      	movs	r2, #0
 80437c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80437ca:	687b      	ldr	r3, [r7, #4]
 80437cc:	695b      	ldr	r3, [r3, #20]
 80437ce:	2b00      	cmp	r3, #0
 80437d0:	d003      	beq.n	80437da <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80437d2:	687b      	ldr	r3, [r7, #4]
 80437d4:	695b      	ldr	r3, [r3, #20]
 80437d6:	6878      	ldr	r0, [r7, #4]
 80437d8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80437da:	68fb      	ldr	r3, [r7, #12]
 80437dc:	f003 0304 	and.w	r3, r3, #4
 80437e0:	2b00      	cmp	r3, #0
 80437e2:	d013      	beq.n	804380c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80437e4:	68bb      	ldr	r3, [r7, #8]
 80437e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80437ea:	2b00      	cmp	r3, #0
 80437ec:	d00e      	beq.n	804380c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80437ee:	687b      	ldr	r3, [r7, #4]
 80437f0:	681b      	ldr	r3, [r3, #0]
 80437f2:	681a      	ldr	r2, [r3, #0]
 80437f4:	687b      	ldr	r3, [r7, #4]
 80437f6:	681b      	ldr	r3, [r3, #0]
 80437f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80437fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80437fe:	687b      	ldr	r3, [r7, #4]
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	2204      	movs	r2, #4
 8043804:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8043806:	6878      	ldr	r0, [r7, #4]
 8043808:	f000 f853 	bl	80438b2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 804380c:	68fb      	ldr	r3, [r7, #12]
 804380e:	f003 0302 	and.w	r3, r3, #2
 8043812:	2b00      	cmp	r3, #0
 8043814:	d024      	beq.n	8043860 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8043816:	68bb      	ldr	r3, [r7, #8]
 8043818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804381c:	2b00      	cmp	r3, #0
 804381e:	d01f      	beq.n	8043860 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8043820:	687b      	ldr	r3, [r7, #4]
 8043822:	681b      	ldr	r3, [r3, #0]
 8043824:	681a      	ldr	r2, [r3, #0]
 8043826:	687b      	ldr	r3, [r7, #4]
 8043828:	681b      	ldr	r3, [r3, #0]
 804382a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 804382e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8043830:	687b      	ldr	r3, [r7, #4]
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	2202      	movs	r2, #2
 8043836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804383c:	687b      	ldr	r3, [r7, #4]
 804383e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043840:	687b      	ldr	r3, [r7, #4]
 8043842:	2201      	movs	r2, #1
 8043844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043848:	687b      	ldr	r3, [r7, #4]
 804384a:	2200      	movs	r2, #0
 804384c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	691b      	ldr	r3, [r3, #16]
 8043854:	2b00      	cmp	r3, #0
 8043856:	d003      	beq.n	8043860 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8043858:	687b      	ldr	r3, [r7, #4]
 804385a:	691b      	ldr	r3, [r3, #16]
 804385c:	6878      	ldr	r0, [r7, #4]
 804385e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8043860:	68fb      	ldr	r3, [r7, #12]
 8043862:	f003 0310 	and.w	r3, r3, #16
 8043866:	2b00      	cmp	r3, #0
 8043868:	d01f      	beq.n	80438aa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 804386a:	68bb      	ldr	r3, [r7, #8]
 804386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043870:	2b00      	cmp	r3, #0
 8043872:	d01a      	beq.n	80438aa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8043874:	687b      	ldr	r3, [r7, #4]
 8043876:	681b      	ldr	r3, [r3, #0]
 8043878:	681a      	ldr	r2, [r3, #0]
 804387a:	687b      	ldr	r3, [r7, #4]
 804387c:	681b      	ldr	r3, [r3, #0]
 804387e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043882:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8043884:	687b      	ldr	r3, [r7, #4]
 8043886:	681b      	ldr	r3, [r3, #0]
 8043888:	2210      	movs	r2, #16
 804388a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 804388c:	687b      	ldr	r3, [r7, #4]
 804388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043890:	687b      	ldr	r3, [r7, #4]
 8043892:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043894:	687b      	ldr	r3, [r7, #4]
 8043896:	2201      	movs	r2, #1
 8043898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 804389c:	687b      	ldr	r3, [r7, #4]
 804389e:	2200      	movs	r2, #0
 80438a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80438a4:	6878      	ldr	r0, [r7, #4]
 80438a6:	f000 f80e 	bl	80438c6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80438aa:	bf00      	nop
 80438ac:	3710      	adds	r7, #16
 80438ae:	46bd      	mov	sp, r7
 80438b0:	bd80      	pop	{r7, pc}

080438b2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80438b2:	b480      	push	{r7}
 80438b4:	b083      	sub	sp, #12
 80438b6:	af00      	add	r7, sp, #0
 80438b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80438ba:	bf00      	nop
 80438bc:	370c      	adds	r7, #12
 80438be:	46bd      	mov	sp, r7
 80438c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438c4:	4770      	bx	lr

080438c6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80438c6:	b480      	push	{r7}
 80438c8:	b083      	sub	sp, #12
 80438ca:	af00      	add	r7, sp, #0
 80438cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80438ce:	bf00      	nop
 80438d0:	370c      	adds	r7, #12
 80438d2:	46bd      	mov	sp, r7
 80438d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438d8:	4770      	bx	lr
	...

080438dc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80438dc:	b480      	push	{r7}
 80438de:	b087      	sub	sp, #28
 80438e0:	af00      	add	r7, sp, #0
 80438e2:	6078      	str	r0, [r7, #4]
 80438e4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80438e6:	687b      	ldr	r3, [r7, #4]
 80438e8:	685b      	ldr	r3, [r3, #4]
 80438ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80438ee:	687b      	ldr	r3, [r7, #4]
 80438f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80438f4:	2b01      	cmp	r3, #1
 80438f6:	d101      	bne.n	80438fc <HAL_DMA2D_ConfigLayer+0x20>
 80438f8:	2302      	movs	r3, #2
 80438fa:	e079      	b.n	80439f0 <HAL_DMA2D_ConfigLayer+0x114>
 80438fc:	687b      	ldr	r3, [r7, #4]
 80438fe:	2201      	movs	r2, #1
 8043900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043904:	687b      	ldr	r3, [r7, #4]
 8043906:	2202      	movs	r2, #2
 8043908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 804390c:	683b      	ldr	r3, [r7, #0]
 804390e:	011b      	lsls	r3, r3, #4
 8043910:	3318      	adds	r3, #24
 8043912:	687a      	ldr	r2, [r7, #4]
 8043914:	4413      	add	r3, r2
 8043916:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8043918:	693b      	ldr	r3, [r7, #16]
 804391a:	685a      	ldr	r2, [r3, #4]
 804391c:	693b      	ldr	r3, [r7, #16]
 804391e:	689b      	ldr	r3, [r3, #8]
 8043920:	041b      	lsls	r3, r3, #16
 8043922:	4313      	orrs	r3, r2
 8043924:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8043926:	4b35      	ldr	r3, [pc, #212]	; (80439fc <HAL_DMA2D_ConfigLayer+0x120>)
 8043928:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 804392a:	693b      	ldr	r3, [r7, #16]
 804392c:	685b      	ldr	r3, [r3, #4]
 804392e:	2b0a      	cmp	r3, #10
 8043930:	d003      	beq.n	804393a <HAL_DMA2D_ConfigLayer+0x5e>
 8043932:	693b      	ldr	r3, [r7, #16]
 8043934:	685b      	ldr	r3, [r3, #4]
 8043936:	2b09      	cmp	r3, #9
 8043938:	d107      	bne.n	804394a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 804393a:	693b      	ldr	r3, [r7, #16]
 804393c:	68db      	ldr	r3, [r3, #12]
 804393e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8043942:	697a      	ldr	r2, [r7, #20]
 8043944:	4313      	orrs	r3, r2
 8043946:	617b      	str	r3, [r7, #20]
 8043948:	e005      	b.n	8043956 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 804394a:	693b      	ldr	r3, [r7, #16]
 804394c:	68db      	ldr	r3, [r3, #12]
 804394e:	061b      	lsls	r3, r3, #24
 8043950:	697a      	ldr	r2, [r7, #20]
 8043952:	4313      	orrs	r3, r2
 8043954:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8043956:	683b      	ldr	r3, [r7, #0]
 8043958:	2b00      	cmp	r3, #0
 804395a:	d120      	bne.n	804399e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 804395c:	687b      	ldr	r3, [r7, #4]
 804395e:	681b      	ldr	r3, [r3, #0]
 8043960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043962:	68fb      	ldr	r3, [r7, #12]
 8043964:	43db      	mvns	r3, r3
 8043966:	ea02 0103 	and.w	r1, r2, r3
 804396a:	687b      	ldr	r3, [r7, #4]
 804396c:	681b      	ldr	r3, [r3, #0]
 804396e:	697a      	ldr	r2, [r7, #20]
 8043970:	430a      	orrs	r2, r1
 8043972:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8043974:	687b      	ldr	r3, [r7, #4]
 8043976:	681b      	ldr	r3, [r3, #0]
 8043978:	693a      	ldr	r2, [r7, #16]
 804397a:	6812      	ldr	r2, [r2, #0]
 804397c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 804397e:	693b      	ldr	r3, [r7, #16]
 8043980:	685b      	ldr	r3, [r3, #4]
 8043982:	2b0a      	cmp	r3, #10
 8043984:	d003      	beq.n	804398e <HAL_DMA2D_ConfigLayer+0xb2>
 8043986:	693b      	ldr	r3, [r7, #16]
 8043988:	685b      	ldr	r3, [r3, #4]
 804398a:	2b09      	cmp	r3, #9
 804398c:	d127      	bne.n	80439de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 804398e:	693b      	ldr	r3, [r7, #16]
 8043990:	68da      	ldr	r2, [r3, #12]
 8043992:	687b      	ldr	r3, [r7, #4]
 8043994:	681b      	ldr	r3, [r3, #0]
 8043996:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 804399a:	629a      	str	r2, [r3, #40]	; 0x28
 804399c:	e01f      	b.n	80439de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 804399e:	687b      	ldr	r3, [r7, #4]
 80439a0:	681b      	ldr	r3, [r3, #0]
 80439a2:	69da      	ldr	r2, [r3, #28]
 80439a4:	68fb      	ldr	r3, [r7, #12]
 80439a6:	43db      	mvns	r3, r3
 80439a8:	ea02 0103 	and.w	r1, r2, r3
 80439ac:	687b      	ldr	r3, [r7, #4]
 80439ae:	681b      	ldr	r3, [r3, #0]
 80439b0:	697a      	ldr	r2, [r7, #20]
 80439b2:	430a      	orrs	r2, r1
 80439b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80439b6:	687b      	ldr	r3, [r7, #4]
 80439b8:	681b      	ldr	r3, [r3, #0]
 80439ba:	693a      	ldr	r2, [r7, #16]
 80439bc:	6812      	ldr	r2, [r2, #0]
 80439be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80439c0:	693b      	ldr	r3, [r7, #16]
 80439c2:	685b      	ldr	r3, [r3, #4]
 80439c4:	2b0a      	cmp	r3, #10
 80439c6:	d003      	beq.n	80439d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80439c8:	693b      	ldr	r3, [r7, #16]
 80439ca:	685b      	ldr	r3, [r3, #4]
 80439cc:	2b09      	cmp	r3, #9
 80439ce:	d106      	bne.n	80439de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80439d0:	693b      	ldr	r3, [r7, #16]
 80439d2:	68da      	ldr	r2, [r3, #12]
 80439d4:	687b      	ldr	r3, [r7, #4]
 80439d6:	681b      	ldr	r3, [r3, #0]
 80439d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80439dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80439de:	687b      	ldr	r3, [r7, #4]
 80439e0:	2201      	movs	r2, #1
 80439e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80439e6:	687b      	ldr	r3, [r7, #4]
 80439e8:	2200      	movs	r2, #0
 80439ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80439ee:	2300      	movs	r3, #0
}
 80439f0:	4618      	mov	r0, r3
 80439f2:	371c      	adds	r7, #28
 80439f4:	46bd      	mov	sp, r7
 80439f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80439fa:	4770      	bx	lr
 80439fc:	ff03000f 	.word	0xff03000f

08043a00 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8043a00:	b480      	push	{r7}
 8043a02:	b08b      	sub	sp, #44	; 0x2c
 8043a04:	af00      	add	r7, sp, #0
 8043a06:	60f8      	str	r0, [r7, #12]
 8043a08:	60b9      	str	r1, [r7, #8]
 8043a0a:	607a      	str	r2, [r7, #4]
 8043a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8043a0e:	68fb      	ldr	r3, [r7, #12]
 8043a10:	681b      	ldr	r3, [r3, #0]
 8043a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043a14:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8043a18:	683b      	ldr	r3, [r7, #0]
 8043a1a:	041a      	lsls	r2, r3, #16
 8043a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043a1e:	431a      	orrs	r2, r3
 8043a20:	68fb      	ldr	r3, [r7, #12]
 8043a22:	681b      	ldr	r3, [r3, #0]
 8043a24:	430a      	orrs	r2, r1
 8043a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8043a28:	68fb      	ldr	r3, [r7, #12]
 8043a2a:	681b      	ldr	r3, [r3, #0]
 8043a2c:	687a      	ldr	r2, [r7, #4]
 8043a2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8043a30:	68fb      	ldr	r3, [r7, #12]
 8043a32:	685b      	ldr	r3, [r3, #4]
 8043a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8043a38:	d174      	bne.n	8043b24 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8043a3a:	68bb      	ldr	r3, [r7, #8]
 8043a3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8043a40:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8043a42:	68bb      	ldr	r3, [r7, #8]
 8043a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8043a48:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8043a4a:	68bb      	ldr	r3, [r7, #8]
 8043a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8043a50:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8043a52:	68bb      	ldr	r3, [r7, #8]
 8043a54:	b2db      	uxtb	r3, r3
 8043a56:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8043a58:	68fb      	ldr	r3, [r7, #12]
 8043a5a:	689b      	ldr	r3, [r3, #8]
 8043a5c:	2b00      	cmp	r3, #0
 8043a5e:	d108      	bne.n	8043a72 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8043a60:	69ba      	ldr	r2, [r7, #24]
 8043a62:	69fb      	ldr	r3, [r7, #28]
 8043a64:	431a      	orrs	r2, r3
 8043a66:	6a3b      	ldr	r3, [r7, #32]
 8043a68:	4313      	orrs	r3, r2
 8043a6a:	697a      	ldr	r2, [r7, #20]
 8043a6c:	4313      	orrs	r3, r2
 8043a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8043a70:	e053      	b.n	8043b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8043a72:	68fb      	ldr	r3, [r7, #12]
 8043a74:	689b      	ldr	r3, [r3, #8]
 8043a76:	2b01      	cmp	r3, #1
 8043a78:	d106      	bne.n	8043a88 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8043a7a:	69ba      	ldr	r2, [r7, #24]
 8043a7c:	69fb      	ldr	r3, [r7, #28]
 8043a7e:	4313      	orrs	r3, r2
 8043a80:	697a      	ldr	r2, [r7, #20]
 8043a82:	4313      	orrs	r3, r2
 8043a84:	627b      	str	r3, [r7, #36]	; 0x24
 8043a86:	e048      	b.n	8043b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8043a88:	68fb      	ldr	r3, [r7, #12]
 8043a8a:	689b      	ldr	r3, [r3, #8]
 8043a8c:	2b02      	cmp	r3, #2
 8043a8e:	d111      	bne.n	8043ab4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8043a90:	69fb      	ldr	r3, [r7, #28]
 8043a92:	0cdb      	lsrs	r3, r3, #19
 8043a94:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8043a96:	69bb      	ldr	r3, [r7, #24]
 8043a98:	0a9b      	lsrs	r3, r3, #10
 8043a9a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043a9c:	697b      	ldr	r3, [r7, #20]
 8043a9e:	08db      	lsrs	r3, r3, #3
 8043aa0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8043aa2:	69bb      	ldr	r3, [r7, #24]
 8043aa4:	015a      	lsls	r2, r3, #5
 8043aa6:	69fb      	ldr	r3, [r7, #28]
 8043aa8:	02db      	lsls	r3, r3, #11
 8043aaa:	4313      	orrs	r3, r2
 8043aac:	697a      	ldr	r2, [r7, #20]
 8043aae:	4313      	orrs	r3, r2
 8043ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8043ab2:	e032      	b.n	8043b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8043ab4:	68fb      	ldr	r3, [r7, #12]
 8043ab6:	689b      	ldr	r3, [r3, #8]
 8043ab8:	2b03      	cmp	r3, #3
 8043aba:	d117      	bne.n	8043aec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8043abc:	6a3b      	ldr	r3, [r7, #32]
 8043abe:	0fdb      	lsrs	r3, r3, #31
 8043ac0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8043ac2:	69fb      	ldr	r3, [r7, #28]
 8043ac4:	0cdb      	lsrs	r3, r3, #19
 8043ac6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8043ac8:	69bb      	ldr	r3, [r7, #24]
 8043aca:	0adb      	lsrs	r3, r3, #11
 8043acc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043ace:	697b      	ldr	r3, [r7, #20]
 8043ad0:	08db      	lsrs	r3, r3, #3
 8043ad2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8043ad4:	69bb      	ldr	r3, [r7, #24]
 8043ad6:	015a      	lsls	r2, r3, #5
 8043ad8:	69fb      	ldr	r3, [r7, #28]
 8043ada:	029b      	lsls	r3, r3, #10
 8043adc:	431a      	orrs	r2, r3
 8043ade:	6a3b      	ldr	r3, [r7, #32]
 8043ae0:	03db      	lsls	r3, r3, #15
 8043ae2:	4313      	orrs	r3, r2
 8043ae4:	697a      	ldr	r2, [r7, #20]
 8043ae6:	4313      	orrs	r3, r2
 8043ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8043aea:	e016      	b.n	8043b1a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8043aec:	6a3b      	ldr	r3, [r7, #32]
 8043aee:	0f1b      	lsrs	r3, r3, #28
 8043af0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8043af2:	69fb      	ldr	r3, [r7, #28]
 8043af4:	0d1b      	lsrs	r3, r3, #20
 8043af6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8043af8:	69bb      	ldr	r3, [r7, #24]
 8043afa:	0b1b      	lsrs	r3, r3, #12
 8043afc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8043afe:	697b      	ldr	r3, [r7, #20]
 8043b00:	091b      	lsrs	r3, r3, #4
 8043b02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8043b04:	69bb      	ldr	r3, [r7, #24]
 8043b06:	011a      	lsls	r2, r3, #4
 8043b08:	69fb      	ldr	r3, [r7, #28]
 8043b0a:	021b      	lsls	r3, r3, #8
 8043b0c:	431a      	orrs	r2, r3
 8043b0e:	6a3b      	ldr	r3, [r7, #32]
 8043b10:	031b      	lsls	r3, r3, #12
 8043b12:	4313      	orrs	r3, r2
 8043b14:	697a      	ldr	r2, [r7, #20]
 8043b16:	4313      	orrs	r3, r2
 8043b18:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8043b1a:	68fb      	ldr	r3, [r7, #12]
 8043b1c:	681b      	ldr	r3, [r3, #0]
 8043b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8043b20:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8043b22:	e003      	b.n	8043b2c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8043b24:	68fb      	ldr	r3, [r7, #12]
 8043b26:	681b      	ldr	r3, [r3, #0]
 8043b28:	68ba      	ldr	r2, [r7, #8]
 8043b2a:	60da      	str	r2, [r3, #12]
}
 8043b2c:	bf00      	nop
 8043b2e:	372c      	adds	r7, #44	; 0x2c
 8043b30:	46bd      	mov	sp, r7
 8043b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b36:	4770      	bx	lr

08043b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043b38:	b480      	push	{r7}
 8043b3a:	b089      	sub	sp, #36	; 0x24
 8043b3c:	af00      	add	r7, sp, #0
 8043b3e:	6078      	str	r0, [r7, #4]
 8043b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043b42:	2300      	movs	r3, #0
 8043b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8043b46:	2300      	movs	r3, #0
 8043b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8043b4a:	2300      	movs	r3, #0
 8043b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043b4e:	2300      	movs	r3, #0
 8043b50:	61fb      	str	r3, [r7, #28]
 8043b52:	e177      	b.n	8043e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8043b54:	2201      	movs	r2, #1
 8043b56:	69fb      	ldr	r3, [r7, #28]
 8043b58:	fa02 f303 	lsl.w	r3, r2, r3
 8043b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8043b5e:	683b      	ldr	r3, [r7, #0]
 8043b60:	681b      	ldr	r3, [r3, #0]
 8043b62:	697a      	ldr	r2, [r7, #20]
 8043b64:	4013      	ands	r3, r2
 8043b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8043b68:	693a      	ldr	r2, [r7, #16]
 8043b6a:	697b      	ldr	r3, [r7, #20]
 8043b6c:	429a      	cmp	r2, r3
 8043b6e:	f040 8166 	bne.w	8043e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8043b72:	683b      	ldr	r3, [r7, #0]
 8043b74:	685b      	ldr	r3, [r3, #4]
 8043b76:	f003 0303 	and.w	r3, r3, #3
 8043b7a:	2b01      	cmp	r3, #1
 8043b7c:	d005      	beq.n	8043b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043b7e:	683b      	ldr	r3, [r7, #0]
 8043b80:	685b      	ldr	r3, [r3, #4]
 8043b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8043b86:	2b02      	cmp	r3, #2
 8043b88:	d130      	bne.n	8043bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8043b8a:	687b      	ldr	r3, [r7, #4]
 8043b8c:	689b      	ldr	r3, [r3, #8]
 8043b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8043b90:	69fb      	ldr	r3, [r7, #28]
 8043b92:	005b      	lsls	r3, r3, #1
 8043b94:	2203      	movs	r2, #3
 8043b96:	fa02 f303 	lsl.w	r3, r2, r3
 8043b9a:	43db      	mvns	r3, r3
 8043b9c:	69ba      	ldr	r2, [r7, #24]
 8043b9e:	4013      	ands	r3, r2
 8043ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8043ba2:	683b      	ldr	r3, [r7, #0]
 8043ba4:	68da      	ldr	r2, [r3, #12]
 8043ba6:	69fb      	ldr	r3, [r7, #28]
 8043ba8:	005b      	lsls	r3, r3, #1
 8043baa:	fa02 f303 	lsl.w	r3, r2, r3
 8043bae:	69ba      	ldr	r2, [r7, #24]
 8043bb0:	4313      	orrs	r3, r2
 8043bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8043bb4:	687b      	ldr	r3, [r7, #4]
 8043bb6:	69ba      	ldr	r2, [r7, #24]
 8043bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8043bba:	687b      	ldr	r3, [r7, #4]
 8043bbc:	685b      	ldr	r3, [r3, #4]
 8043bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8043bc0:	2201      	movs	r2, #1
 8043bc2:	69fb      	ldr	r3, [r7, #28]
 8043bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8043bc8:	43db      	mvns	r3, r3
 8043bca:	69ba      	ldr	r2, [r7, #24]
 8043bcc:	4013      	ands	r3, r2
 8043bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8043bd0:	683b      	ldr	r3, [r7, #0]
 8043bd2:	685b      	ldr	r3, [r3, #4]
 8043bd4:	091b      	lsrs	r3, r3, #4
 8043bd6:	f003 0201 	and.w	r2, r3, #1
 8043bda:	69fb      	ldr	r3, [r7, #28]
 8043bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8043be0:	69ba      	ldr	r2, [r7, #24]
 8043be2:	4313      	orrs	r3, r2
 8043be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8043be6:	687b      	ldr	r3, [r7, #4]
 8043be8:	69ba      	ldr	r2, [r7, #24]
 8043bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8043bec:	683b      	ldr	r3, [r7, #0]
 8043bee:	685b      	ldr	r3, [r3, #4]
 8043bf0:	f003 0303 	and.w	r3, r3, #3
 8043bf4:	2b03      	cmp	r3, #3
 8043bf6:	d017      	beq.n	8043c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	68db      	ldr	r3, [r3, #12]
 8043bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8043bfe:	69fb      	ldr	r3, [r7, #28]
 8043c00:	005b      	lsls	r3, r3, #1
 8043c02:	2203      	movs	r2, #3
 8043c04:	fa02 f303 	lsl.w	r3, r2, r3
 8043c08:	43db      	mvns	r3, r3
 8043c0a:	69ba      	ldr	r2, [r7, #24]
 8043c0c:	4013      	ands	r3, r2
 8043c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8043c10:	683b      	ldr	r3, [r7, #0]
 8043c12:	689a      	ldr	r2, [r3, #8]
 8043c14:	69fb      	ldr	r3, [r7, #28]
 8043c16:	005b      	lsls	r3, r3, #1
 8043c18:	fa02 f303 	lsl.w	r3, r2, r3
 8043c1c:	69ba      	ldr	r2, [r7, #24]
 8043c1e:	4313      	orrs	r3, r2
 8043c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8043c22:	687b      	ldr	r3, [r7, #4]
 8043c24:	69ba      	ldr	r2, [r7, #24]
 8043c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8043c28:	683b      	ldr	r3, [r7, #0]
 8043c2a:	685b      	ldr	r3, [r3, #4]
 8043c2c:	f003 0303 	and.w	r3, r3, #3
 8043c30:	2b02      	cmp	r3, #2
 8043c32:	d123      	bne.n	8043c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8043c34:	69fb      	ldr	r3, [r7, #28]
 8043c36:	08da      	lsrs	r2, r3, #3
 8043c38:	687b      	ldr	r3, [r7, #4]
 8043c3a:	3208      	adds	r2, #8
 8043c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043c42:	69fb      	ldr	r3, [r7, #28]
 8043c44:	f003 0307 	and.w	r3, r3, #7
 8043c48:	009b      	lsls	r3, r3, #2
 8043c4a:	220f      	movs	r2, #15
 8043c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8043c50:	43db      	mvns	r3, r3
 8043c52:	69ba      	ldr	r2, [r7, #24]
 8043c54:	4013      	ands	r3, r2
 8043c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8043c58:	683b      	ldr	r3, [r7, #0]
 8043c5a:	691a      	ldr	r2, [r3, #16]
 8043c5c:	69fb      	ldr	r3, [r7, #28]
 8043c5e:	f003 0307 	and.w	r3, r3, #7
 8043c62:	009b      	lsls	r3, r3, #2
 8043c64:	fa02 f303 	lsl.w	r3, r2, r3
 8043c68:	69ba      	ldr	r2, [r7, #24]
 8043c6a:	4313      	orrs	r3, r2
 8043c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8043c6e:	69fb      	ldr	r3, [r7, #28]
 8043c70:	08da      	lsrs	r2, r3, #3
 8043c72:	687b      	ldr	r3, [r7, #4]
 8043c74:	3208      	adds	r2, #8
 8043c76:	69b9      	ldr	r1, [r7, #24]
 8043c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8043c7c:	687b      	ldr	r3, [r7, #4]
 8043c7e:	681b      	ldr	r3, [r3, #0]
 8043c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043c82:	69fb      	ldr	r3, [r7, #28]
 8043c84:	005b      	lsls	r3, r3, #1
 8043c86:	2203      	movs	r2, #3
 8043c88:	fa02 f303 	lsl.w	r3, r2, r3
 8043c8c:	43db      	mvns	r3, r3
 8043c8e:	69ba      	ldr	r2, [r7, #24]
 8043c90:	4013      	ands	r3, r2
 8043c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8043c94:	683b      	ldr	r3, [r7, #0]
 8043c96:	685b      	ldr	r3, [r3, #4]
 8043c98:	f003 0203 	and.w	r2, r3, #3
 8043c9c:	69fb      	ldr	r3, [r7, #28]
 8043c9e:	005b      	lsls	r3, r3, #1
 8043ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8043ca4:	69ba      	ldr	r2, [r7, #24]
 8043ca6:	4313      	orrs	r3, r2
 8043ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8043caa:	687b      	ldr	r3, [r7, #4]
 8043cac:	69ba      	ldr	r2, [r7, #24]
 8043cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8043cb0:	683b      	ldr	r3, [r7, #0]
 8043cb2:	685b      	ldr	r3, [r3, #4]
 8043cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8043cb8:	2b00      	cmp	r3, #0
 8043cba:	f000 80c0 	beq.w	8043e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8043cbe:	2300      	movs	r3, #0
 8043cc0:	60fb      	str	r3, [r7, #12]
 8043cc2:	4b66      	ldr	r3, [pc, #408]	; (8043e5c <HAL_GPIO_Init+0x324>)
 8043cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043cc6:	4a65      	ldr	r2, [pc, #404]	; (8043e5c <HAL_GPIO_Init+0x324>)
 8043cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8043ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8043cce:	4b63      	ldr	r3, [pc, #396]	; (8043e5c <HAL_GPIO_Init+0x324>)
 8043cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8043cd6:	60fb      	str	r3, [r7, #12]
 8043cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8043cda:	4a61      	ldr	r2, [pc, #388]	; (8043e60 <HAL_GPIO_Init+0x328>)
 8043cdc:	69fb      	ldr	r3, [r7, #28]
 8043cde:	089b      	lsrs	r3, r3, #2
 8043ce0:	3302      	adds	r3, #2
 8043ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8043ce8:	69fb      	ldr	r3, [r7, #28]
 8043cea:	f003 0303 	and.w	r3, r3, #3
 8043cee:	009b      	lsls	r3, r3, #2
 8043cf0:	220f      	movs	r2, #15
 8043cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8043cf6:	43db      	mvns	r3, r3
 8043cf8:	69ba      	ldr	r2, [r7, #24]
 8043cfa:	4013      	ands	r3, r2
 8043cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8043cfe:	687b      	ldr	r3, [r7, #4]
 8043d00:	4a58      	ldr	r2, [pc, #352]	; (8043e64 <HAL_GPIO_Init+0x32c>)
 8043d02:	4293      	cmp	r3, r2
 8043d04:	d037      	beq.n	8043d76 <HAL_GPIO_Init+0x23e>
 8043d06:	687b      	ldr	r3, [r7, #4]
 8043d08:	4a57      	ldr	r2, [pc, #348]	; (8043e68 <HAL_GPIO_Init+0x330>)
 8043d0a:	4293      	cmp	r3, r2
 8043d0c:	d031      	beq.n	8043d72 <HAL_GPIO_Init+0x23a>
 8043d0e:	687b      	ldr	r3, [r7, #4]
 8043d10:	4a56      	ldr	r2, [pc, #344]	; (8043e6c <HAL_GPIO_Init+0x334>)
 8043d12:	4293      	cmp	r3, r2
 8043d14:	d02b      	beq.n	8043d6e <HAL_GPIO_Init+0x236>
 8043d16:	687b      	ldr	r3, [r7, #4]
 8043d18:	4a55      	ldr	r2, [pc, #340]	; (8043e70 <HAL_GPIO_Init+0x338>)
 8043d1a:	4293      	cmp	r3, r2
 8043d1c:	d025      	beq.n	8043d6a <HAL_GPIO_Init+0x232>
 8043d1e:	687b      	ldr	r3, [r7, #4]
 8043d20:	4a54      	ldr	r2, [pc, #336]	; (8043e74 <HAL_GPIO_Init+0x33c>)
 8043d22:	4293      	cmp	r3, r2
 8043d24:	d01f      	beq.n	8043d66 <HAL_GPIO_Init+0x22e>
 8043d26:	687b      	ldr	r3, [r7, #4]
 8043d28:	4a53      	ldr	r2, [pc, #332]	; (8043e78 <HAL_GPIO_Init+0x340>)
 8043d2a:	4293      	cmp	r3, r2
 8043d2c:	d019      	beq.n	8043d62 <HAL_GPIO_Init+0x22a>
 8043d2e:	687b      	ldr	r3, [r7, #4]
 8043d30:	4a52      	ldr	r2, [pc, #328]	; (8043e7c <HAL_GPIO_Init+0x344>)
 8043d32:	4293      	cmp	r3, r2
 8043d34:	d013      	beq.n	8043d5e <HAL_GPIO_Init+0x226>
 8043d36:	687b      	ldr	r3, [r7, #4]
 8043d38:	4a51      	ldr	r2, [pc, #324]	; (8043e80 <HAL_GPIO_Init+0x348>)
 8043d3a:	4293      	cmp	r3, r2
 8043d3c:	d00d      	beq.n	8043d5a <HAL_GPIO_Init+0x222>
 8043d3e:	687b      	ldr	r3, [r7, #4]
 8043d40:	4a50      	ldr	r2, [pc, #320]	; (8043e84 <HAL_GPIO_Init+0x34c>)
 8043d42:	4293      	cmp	r3, r2
 8043d44:	d007      	beq.n	8043d56 <HAL_GPIO_Init+0x21e>
 8043d46:	687b      	ldr	r3, [r7, #4]
 8043d48:	4a4f      	ldr	r2, [pc, #316]	; (8043e88 <HAL_GPIO_Init+0x350>)
 8043d4a:	4293      	cmp	r3, r2
 8043d4c:	d101      	bne.n	8043d52 <HAL_GPIO_Init+0x21a>
 8043d4e:	2309      	movs	r3, #9
 8043d50:	e012      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d52:	230a      	movs	r3, #10
 8043d54:	e010      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d56:	2308      	movs	r3, #8
 8043d58:	e00e      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d5a:	2307      	movs	r3, #7
 8043d5c:	e00c      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d5e:	2306      	movs	r3, #6
 8043d60:	e00a      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d62:	2305      	movs	r3, #5
 8043d64:	e008      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d66:	2304      	movs	r3, #4
 8043d68:	e006      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d6a:	2303      	movs	r3, #3
 8043d6c:	e004      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d6e:	2302      	movs	r3, #2
 8043d70:	e002      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d72:	2301      	movs	r3, #1
 8043d74:	e000      	b.n	8043d78 <HAL_GPIO_Init+0x240>
 8043d76:	2300      	movs	r3, #0
 8043d78:	69fa      	ldr	r2, [r7, #28]
 8043d7a:	f002 0203 	and.w	r2, r2, #3
 8043d7e:	0092      	lsls	r2, r2, #2
 8043d80:	4093      	lsls	r3, r2
 8043d82:	69ba      	ldr	r2, [r7, #24]
 8043d84:	4313      	orrs	r3, r2
 8043d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8043d88:	4935      	ldr	r1, [pc, #212]	; (8043e60 <HAL_GPIO_Init+0x328>)
 8043d8a:	69fb      	ldr	r3, [r7, #28]
 8043d8c:	089b      	lsrs	r3, r3, #2
 8043d8e:	3302      	adds	r3, #2
 8043d90:	69ba      	ldr	r2, [r7, #24]
 8043d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8043d96:	4b3d      	ldr	r3, [pc, #244]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043d98:	689b      	ldr	r3, [r3, #8]
 8043d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043d9c:	693b      	ldr	r3, [r7, #16]
 8043d9e:	43db      	mvns	r3, r3
 8043da0:	69ba      	ldr	r2, [r7, #24]
 8043da2:	4013      	ands	r3, r2
 8043da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8043da6:	683b      	ldr	r3, [r7, #0]
 8043da8:	685b      	ldr	r3, [r3, #4]
 8043daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8043dae:	2b00      	cmp	r3, #0
 8043db0:	d003      	beq.n	8043dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8043db2:	69ba      	ldr	r2, [r7, #24]
 8043db4:	693b      	ldr	r3, [r7, #16]
 8043db6:	4313      	orrs	r3, r2
 8043db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8043dba:	4a34      	ldr	r2, [pc, #208]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043dbc:	69bb      	ldr	r3, [r7, #24]
 8043dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8043dc0:	4b32      	ldr	r3, [pc, #200]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043dc2:	68db      	ldr	r3, [r3, #12]
 8043dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043dc6:	693b      	ldr	r3, [r7, #16]
 8043dc8:	43db      	mvns	r3, r3
 8043dca:	69ba      	ldr	r2, [r7, #24]
 8043dcc:	4013      	ands	r3, r2
 8043dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8043dd0:	683b      	ldr	r3, [r7, #0]
 8043dd2:	685b      	ldr	r3, [r3, #4]
 8043dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043dd8:	2b00      	cmp	r3, #0
 8043dda:	d003      	beq.n	8043de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8043ddc:	69ba      	ldr	r2, [r7, #24]
 8043dde:	693b      	ldr	r3, [r7, #16]
 8043de0:	4313      	orrs	r3, r2
 8043de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8043de4:	4a29      	ldr	r2, [pc, #164]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043de6:	69bb      	ldr	r3, [r7, #24]
 8043de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8043dea:	4b28      	ldr	r3, [pc, #160]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043dec:	685b      	ldr	r3, [r3, #4]
 8043dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043df0:	693b      	ldr	r3, [r7, #16]
 8043df2:	43db      	mvns	r3, r3
 8043df4:	69ba      	ldr	r2, [r7, #24]
 8043df6:	4013      	ands	r3, r2
 8043df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8043dfa:	683b      	ldr	r3, [r7, #0]
 8043dfc:	685b      	ldr	r3, [r3, #4]
 8043dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043e02:	2b00      	cmp	r3, #0
 8043e04:	d003      	beq.n	8043e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8043e06:	69ba      	ldr	r2, [r7, #24]
 8043e08:	693b      	ldr	r3, [r7, #16]
 8043e0a:	4313      	orrs	r3, r2
 8043e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8043e0e:	4a1f      	ldr	r2, [pc, #124]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043e10:	69bb      	ldr	r3, [r7, #24]
 8043e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8043e14:	4b1d      	ldr	r3, [pc, #116]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043e16:	681b      	ldr	r3, [r3, #0]
 8043e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8043e1a:	693b      	ldr	r3, [r7, #16]
 8043e1c:	43db      	mvns	r3, r3
 8043e1e:	69ba      	ldr	r2, [r7, #24]
 8043e20:	4013      	ands	r3, r2
 8043e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8043e24:	683b      	ldr	r3, [r7, #0]
 8043e26:	685b      	ldr	r3, [r3, #4]
 8043e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043e2c:	2b00      	cmp	r3, #0
 8043e2e:	d003      	beq.n	8043e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8043e30:	69ba      	ldr	r2, [r7, #24]
 8043e32:	693b      	ldr	r3, [r7, #16]
 8043e34:	4313      	orrs	r3, r2
 8043e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8043e38:	4a14      	ldr	r2, [pc, #80]	; (8043e8c <HAL_GPIO_Init+0x354>)
 8043e3a:	69bb      	ldr	r3, [r7, #24]
 8043e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043e3e:	69fb      	ldr	r3, [r7, #28]
 8043e40:	3301      	adds	r3, #1
 8043e42:	61fb      	str	r3, [r7, #28]
 8043e44:	69fb      	ldr	r3, [r7, #28]
 8043e46:	2b0f      	cmp	r3, #15
 8043e48:	f67f ae84 	bls.w	8043b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8043e4c:	bf00      	nop
 8043e4e:	bf00      	nop
 8043e50:	3724      	adds	r7, #36	; 0x24
 8043e52:	46bd      	mov	sp, r7
 8043e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e58:	4770      	bx	lr
 8043e5a:	bf00      	nop
 8043e5c:	40023800 	.word	0x40023800
 8043e60:	40013800 	.word	0x40013800
 8043e64:	40020000 	.word	0x40020000
 8043e68:	40020400 	.word	0x40020400
 8043e6c:	40020800 	.word	0x40020800
 8043e70:	40020c00 	.word	0x40020c00
 8043e74:	40021000 	.word	0x40021000
 8043e78:	40021400 	.word	0x40021400
 8043e7c:	40021800 	.word	0x40021800
 8043e80:	40021c00 	.word	0x40021c00
 8043e84:	40022000 	.word	0x40022000
 8043e88:	40022400 	.word	0x40022400
 8043e8c:	40013c00 	.word	0x40013c00

08043e90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8043e90:	b480      	push	{r7}
 8043e92:	b087      	sub	sp, #28
 8043e94:	af00      	add	r7, sp, #0
 8043e96:	6078      	str	r0, [r7, #4]
 8043e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043e9a:	2300      	movs	r3, #0
 8043e9c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8043e9e:	2300      	movs	r3, #0
 8043ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8043ea2:	2300      	movs	r3, #0
 8043ea4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043ea6:	2300      	movs	r3, #0
 8043ea8:	617b      	str	r3, [r7, #20]
 8043eaa:	e0d9      	b.n	8044060 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8043eac:	2201      	movs	r2, #1
 8043eae:	697b      	ldr	r3, [r7, #20]
 8043eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8043eb4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8043eb6:	683a      	ldr	r2, [r7, #0]
 8043eb8:	693b      	ldr	r3, [r7, #16]
 8043eba:	4013      	ands	r3, r2
 8043ebc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8043ebe:	68fa      	ldr	r2, [r7, #12]
 8043ec0:	693b      	ldr	r3, [r7, #16]
 8043ec2:	429a      	cmp	r2, r3
 8043ec4:	f040 80c9 	bne.w	804405a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8043ec8:	4a6b      	ldr	r2, [pc, #428]	; (8044078 <HAL_GPIO_DeInit+0x1e8>)
 8043eca:	697b      	ldr	r3, [r7, #20]
 8043ecc:	089b      	lsrs	r3, r3, #2
 8043ece:	3302      	adds	r3, #2
 8043ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8043ed4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8043ed6:	697b      	ldr	r3, [r7, #20]
 8043ed8:	f003 0303 	and.w	r3, r3, #3
 8043edc:	009b      	lsls	r3, r3, #2
 8043ede:	220f      	movs	r2, #15
 8043ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8043ee4:	68ba      	ldr	r2, [r7, #8]
 8043ee6:	4013      	ands	r3, r2
 8043ee8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8043eea:	687b      	ldr	r3, [r7, #4]
 8043eec:	4a63      	ldr	r2, [pc, #396]	; (804407c <HAL_GPIO_DeInit+0x1ec>)
 8043eee:	4293      	cmp	r3, r2
 8043ef0:	d037      	beq.n	8043f62 <HAL_GPIO_DeInit+0xd2>
 8043ef2:	687b      	ldr	r3, [r7, #4]
 8043ef4:	4a62      	ldr	r2, [pc, #392]	; (8044080 <HAL_GPIO_DeInit+0x1f0>)
 8043ef6:	4293      	cmp	r3, r2
 8043ef8:	d031      	beq.n	8043f5e <HAL_GPIO_DeInit+0xce>
 8043efa:	687b      	ldr	r3, [r7, #4]
 8043efc:	4a61      	ldr	r2, [pc, #388]	; (8044084 <HAL_GPIO_DeInit+0x1f4>)
 8043efe:	4293      	cmp	r3, r2
 8043f00:	d02b      	beq.n	8043f5a <HAL_GPIO_DeInit+0xca>
 8043f02:	687b      	ldr	r3, [r7, #4]
 8043f04:	4a60      	ldr	r2, [pc, #384]	; (8044088 <HAL_GPIO_DeInit+0x1f8>)
 8043f06:	4293      	cmp	r3, r2
 8043f08:	d025      	beq.n	8043f56 <HAL_GPIO_DeInit+0xc6>
 8043f0a:	687b      	ldr	r3, [r7, #4]
 8043f0c:	4a5f      	ldr	r2, [pc, #380]	; (804408c <HAL_GPIO_DeInit+0x1fc>)
 8043f0e:	4293      	cmp	r3, r2
 8043f10:	d01f      	beq.n	8043f52 <HAL_GPIO_DeInit+0xc2>
 8043f12:	687b      	ldr	r3, [r7, #4]
 8043f14:	4a5e      	ldr	r2, [pc, #376]	; (8044090 <HAL_GPIO_DeInit+0x200>)
 8043f16:	4293      	cmp	r3, r2
 8043f18:	d019      	beq.n	8043f4e <HAL_GPIO_DeInit+0xbe>
 8043f1a:	687b      	ldr	r3, [r7, #4]
 8043f1c:	4a5d      	ldr	r2, [pc, #372]	; (8044094 <HAL_GPIO_DeInit+0x204>)
 8043f1e:	4293      	cmp	r3, r2
 8043f20:	d013      	beq.n	8043f4a <HAL_GPIO_DeInit+0xba>
 8043f22:	687b      	ldr	r3, [r7, #4]
 8043f24:	4a5c      	ldr	r2, [pc, #368]	; (8044098 <HAL_GPIO_DeInit+0x208>)
 8043f26:	4293      	cmp	r3, r2
 8043f28:	d00d      	beq.n	8043f46 <HAL_GPIO_DeInit+0xb6>
 8043f2a:	687b      	ldr	r3, [r7, #4]
 8043f2c:	4a5b      	ldr	r2, [pc, #364]	; (804409c <HAL_GPIO_DeInit+0x20c>)
 8043f2e:	4293      	cmp	r3, r2
 8043f30:	d007      	beq.n	8043f42 <HAL_GPIO_DeInit+0xb2>
 8043f32:	687b      	ldr	r3, [r7, #4]
 8043f34:	4a5a      	ldr	r2, [pc, #360]	; (80440a0 <HAL_GPIO_DeInit+0x210>)
 8043f36:	4293      	cmp	r3, r2
 8043f38:	d101      	bne.n	8043f3e <HAL_GPIO_DeInit+0xae>
 8043f3a:	2309      	movs	r3, #9
 8043f3c:	e012      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f3e:	230a      	movs	r3, #10
 8043f40:	e010      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f42:	2308      	movs	r3, #8
 8043f44:	e00e      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f46:	2307      	movs	r3, #7
 8043f48:	e00c      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f4a:	2306      	movs	r3, #6
 8043f4c:	e00a      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f4e:	2305      	movs	r3, #5
 8043f50:	e008      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f52:	2304      	movs	r3, #4
 8043f54:	e006      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f56:	2303      	movs	r3, #3
 8043f58:	e004      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f5a:	2302      	movs	r3, #2
 8043f5c:	e002      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f5e:	2301      	movs	r3, #1
 8043f60:	e000      	b.n	8043f64 <HAL_GPIO_DeInit+0xd4>
 8043f62:	2300      	movs	r3, #0
 8043f64:	697a      	ldr	r2, [r7, #20]
 8043f66:	f002 0203 	and.w	r2, r2, #3
 8043f6a:	0092      	lsls	r2, r2, #2
 8043f6c:	4093      	lsls	r3, r2
 8043f6e:	68ba      	ldr	r2, [r7, #8]
 8043f70:	429a      	cmp	r2, r3
 8043f72:	d132      	bne.n	8043fda <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8043f74:	4b4b      	ldr	r3, [pc, #300]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f76:	681a      	ldr	r2, [r3, #0]
 8043f78:	68fb      	ldr	r3, [r7, #12]
 8043f7a:	43db      	mvns	r3, r3
 8043f7c:	4949      	ldr	r1, [pc, #292]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f7e:	4013      	ands	r3, r2
 8043f80:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8043f82:	4b48      	ldr	r3, [pc, #288]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f84:	685a      	ldr	r2, [r3, #4]
 8043f86:	68fb      	ldr	r3, [r7, #12]
 8043f88:	43db      	mvns	r3, r3
 8043f8a:	4946      	ldr	r1, [pc, #280]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f8c:	4013      	ands	r3, r2
 8043f8e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8043f90:	4b44      	ldr	r3, [pc, #272]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f92:	68da      	ldr	r2, [r3, #12]
 8043f94:	68fb      	ldr	r3, [r7, #12]
 8043f96:	43db      	mvns	r3, r3
 8043f98:	4942      	ldr	r1, [pc, #264]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043f9a:	4013      	ands	r3, r2
 8043f9c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8043f9e:	4b41      	ldr	r3, [pc, #260]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043fa0:	689a      	ldr	r2, [r3, #8]
 8043fa2:	68fb      	ldr	r3, [r7, #12]
 8043fa4:	43db      	mvns	r3, r3
 8043fa6:	493f      	ldr	r1, [pc, #252]	; (80440a4 <HAL_GPIO_DeInit+0x214>)
 8043fa8:	4013      	ands	r3, r2
 8043faa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8043fac:	697b      	ldr	r3, [r7, #20]
 8043fae:	f003 0303 	and.w	r3, r3, #3
 8043fb2:	009b      	lsls	r3, r3, #2
 8043fb4:	220f      	movs	r2, #15
 8043fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8043fba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8043fbc:	4a2e      	ldr	r2, [pc, #184]	; (8044078 <HAL_GPIO_DeInit+0x1e8>)
 8043fbe:	697b      	ldr	r3, [r7, #20]
 8043fc0:	089b      	lsrs	r3, r3, #2
 8043fc2:	3302      	adds	r3, #2
 8043fc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8043fc8:	68bb      	ldr	r3, [r7, #8]
 8043fca:	43da      	mvns	r2, r3
 8043fcc:	482a      	ldr	r0, [pc, #168]	; (8044078 <HAL_GPIO_DeInit+0x1e8>)
 8043fce:	697b      	ldr	r3, [r7, #20]
 8043fd0:	089b      	lsrs	r3, r3, #2
 8043fd2:	400a      	ands	r2, r1
 8043fd4:	3302      	adds	r3, #2
 8043fd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8043fda:	687b      	ldr	r3, [r7, #4]
 8043fdc:	681a      	ldr	r2, [r3, #0]
 8043fde:	697b      	ldr	r3, [r7, #20]
 8043fe0:	005b      	lsls	r3, r3, #1
 8043fe2:	2103      	movs	r1, #3
 8043fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8043fe8:	43db      	mvns	r3, r3
 8043fea:	401a      	ands	r2, r3
 8043fec:	687b      	ldr	r3, [r7, #4]
 8043fee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8043ff0:	697b      	ldr	r3, [r7, #20]
 8043ff2:	08da      	lsrs	r2, r3, #3
 8043ff4:	687b      	ldr	r3, [r7, #4]
 8043ff6:	3208      	adds	r2, #8
 8043ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8043ffc:	697b      	ldr	r3, [r7, #20]
 8043ffe:	f003 0307 	and.w	r3, r3, #7
 8044002:	009b      	lsls	r3, r3, #2
 8044004:	220f      	movs	r2, #15
 8044006:	fa02 f303 	lsl.w	r3, r2, r3
 804400a:	43db      	mvns	r3, r3
 804400c:	697a      	ldr	r2, [r7, #20]
 804400e:	08d2      	lsrs	r2, r2, #3
 8044010:	4019      	ands	r1, r3
 8044012:	687b      	ldr	r3, [r7, #4]
 8044014:	3208      	adds	r2, #8
 8044016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 804401a:	687b      	ldr	r3, [r7, #4]
 804401c:	68da      	ldr	r2, [r3, #12]
 804401e:	697b      	ldr	r3, [r7, #20]
 8044020:	005b      	lsls	r3, r3, #1
 8044022:	2103      	movs	r1, #3
 8044024:	fa01 f303 	lsl.w	r3, r1, r3
 8044028:	43db      	mvns	r3, r3
 804402a:	401a      	ands	r2, r3
 804402c:	687b      	ldr	r3, [r7, #4]
 804402e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8044030:	687b      	ldr	r3, [r7, #4]
 8044032:	685a      	ldr	r2, [r3, #4]
 8044034:	2101      	movs	r1, #1
 8044036:	697b      	ldr	r3, [r7, #20]
 8044038:	fa01 f303 	lsl.w	r3, r1, r3
 804403c:	43db      	mvns	r3, r3
 804403e:	401a      	ands	r2, r3
 8044040:	687b      	ldr	r3, [r7, #4]
 8044042:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044044:	687b      	ldr	r3, [r7, #4]
 8044046:	689a      	ldr	r2, [r3, #8]
 8044048:	697b      	ldr	r3, [r7, #20]
 804404a:	005b      	lsls	r3, r3, #1
 804404c:	2103      	movs	r1, #3
 804404e:	fa01 f303 	lsl.w	r3, r1, r3
 8044052:	43db      	mvns	r3, r3
 8044054:	401a      	ands	r2, r3
 8044056:	687b      	ldr	r3, [r7, #4]
 8044058:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804405a:	697b      	ldr	r3, [r7, #20]
 804405c:	3301      	adds	r3, #1
 804405e:	617b      	str	r3, [r7, #20]
 8044060:	697b      	ldr	r3, [r7, #20]
 8044062:	2b0f      	cmp	r3, #15
 8044064:	f67f af22 	bls.w	8043eac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8044068:	bf00      	nop
 804406a:	bf00      	nop
 804406c:	371c      	adds	r7, #28
 804406e:	46bd      	mov	sp, r7
 8044070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044074:	4770      	bx	lr
 8044076:	bf00      	nop
 8044078:	40013800 	.word	0x40013800
 804407c:	40020000 	.word	0x40020000
 8044080:	40020400 	.word	0x40020400
 8044084:	40020800 	.word	0x40020800
 8044088:	40020c00 	.word	0x40020c00
 804408c:	40021000 	.word	0x40021000
 8044090:	40021400 	.word	0x40021400
 8044094:	40021800 	.word	0x40021800
 8044098:	40021c00 	.word	0x40021c00
 804409c:	40022000 	.word	0x40022000
 80440a0:	40022400 	.word	0x40022400
 80440a4:	40013c00 	.word	0x40013c00

080440a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80440a8:	b480      	push	{r7}
 80440aa:	b083      	sub	sp, #12
 80440ac:	af00      	add	r7, sp, #0
 80440ae:	6078      	str	r0, [r7, #4]
 80440b0:	460b      	mov	r3, r1
 80440b2:	807b      	strh	r3, [r7, #2]
 80440b4:	4613      	mov	r3, r2
 80440b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80440b8:	787b      	ldrb	r3, [r7, #1]
 80440ba:	2b00      	cmp	r3, #0
 80440bc:	d003      	beq.n	80440c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80440be:	887a      	ldrh	r2, [r7, #2]
 80440c0:	687b      	ldr	r3, [r7, #4]
 80440c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80440c4:	e003      	b.n	80440ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80440c6:	887b      	ldrh	r3, [r7, #2]
 80440c8:	041a      	lsls	r2, r3, #16
 80440ca:	687b      	ldr	r3, [r7, #4]
 80440cc:	619a      	str	r2, [r3, #24]
}
 80440ce:	bf00      	nop
 80440d0:	370c      	adds	r7, #12
 80440d2:	46bd      	mov	sp, r7
 80440d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440d8:	4770      	bx	lr
	...

080440dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80440dc:	b580      	push	{r7, lr}
 80440de:	b082      	sub	sp, #8
 80440e0:	af00      	add	r7, sp, #0
 80440e2:	4603      	mov	r3, r0
 80440e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80440e6:	4b08      	ldr	r3, [pc, #32]	; (8044108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80440e8:	695a      	ldr	r2, [r3, #20]
 80440ea:	88fb      	ldrh	r3, [r7, #6]
 80440ec:	4013      	ands	r3, r2
 80440ee:	2b00      	cmp	r3, #0
 80440f0:	d006      	beq.n	8044100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80440f2:	4a05      	ldr	r2, [pc, #20]	; (8044108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80440f4:	88fb      	ldrh	r3, [r7, #6]
 80440f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80440f8:	88fb      	ldrh	r3, [r7, #6]
 80440fa:	4618      	mov	r0, r3
 80440fc:	f7fd fb6a 	bl	80417d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8044100:	bf00      	nop
 8044102:	3708      	adds	r7, #8
 8044104:	46bd      	mov	sp, r7
 8044106:	bd80      	pop	{r7, pc}
 8044108:	40013c00 	.word	0x40013c00

0804410c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 804410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 804410e:	b08f      	sub	sp, #60	; 0x3c
 8044110:	af0a      	add	r7, sp, #40	; 0x28
 8044112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8044114:	687b      	ldr	r3, [r7, #4]
 8044116:	2b00      	cmp	r3, #0
 8044118:	d101      	bne.n	804411e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 804411a:	2301      	movs	r3, #1
 804411c:	e054      	b.n	80441c8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 804411e:	687b      	ldr	r3, [r7, #4]
 8044120:	681b      	ldr	r3, [r3, #0]
 8044122:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8044124:	687b      	ldr	r3, [r7, #4]
 8044126:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 804412a:	b2db      	uxtb	r3, r3
 804412c:	2b00      	cmp	r3, #0
 804412e:	d106      	bne.n	804413e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8044130:	687b      	ldr	r3, [r7, #4]
 8044132:	2200      	movs	r2, #0
 8044134:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8044138:	6878      	ldr	r0, [r7, #4]
 804413a:	f008 f84b 	bl	804c1d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 804413e:	687b      	ldr	r3, [r7, #4]
 8044140:	2203      	movs	r2, #3
 8044142:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8044146:	68fb      	ldr	r3, [r7, #12]
 8044148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804414e:	2b00      	cmp	r3, #0
 8044150:	d102      	bne.n	8044158 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8044152:	687b      	ldr	r3, [r7, #4]
 8044154:	2200      	movs	r2, #0
 8044156:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8044158:	687b      	ldr	r3, [r7, #4]
 804415a:	681b      	ldr	r3, [r3, #0]
 804415c:	4618      	mov	r0, r3
 804415e:	f005 f879 	bl	8049254 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8044162:	687b      	ldr	r3, [r7, #4]
 8044164:	681b      	ldr	r3, [r3, #0]
 8044166:	603b      	str	r3, [r7, #0]
 8044168:	687e      	ldr	r6, [r7, #4]
 804416a:	466d      	mov	r5, sp
 804416c:	f106 0410 	add.w	r4, r6, #16
 8044170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044178:	e894 0003 	ldmia.w	r4, {r0, r1}
 804417c:	e885 0003 	stmia.w	r5, {r0, r1}
 8044180:	1d33      	adds	r3, r6, #4
 8044182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044184:	6838      	ldr	r0, [r7, #0]
 8044186:	f004 fff3 	bl	8049170 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 804418a:	687b      	ldr	r3, [r7, #4]
 804418c:	681b      	ldr	r3, [r3, #0]
 804418e:	2101      	movs	r1, #1
 8044190:	4618      	mov	r0, r3
 8044192:	f005 f870 	bl	8049276 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8044196:	687b      	ldr	r3, [r7, #4]
 8044198:	681b      	ldr	r3, [r3, #0]
 804419a:	603b      	str	r3, [r7, #0]
 804419c:	687e      	ldr	r6, [r7, #4]
 804419e:	466d      	mov	r5, sp
 80441a0:	f106 0410 	add.w	r4, r6, #16
 80441a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80441a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80441a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80441aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80441ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80441b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80441b4:	1d33      	adds	r3, r6, #4
 80441b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80441b8:	6838      	ldr	r0, [r7, #0]
 80441ba:	f005 f9f9 	bl	80495b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80441be:	687b      	ldr	r3, [r7, #4]
 80441c0:	2201      	movs	r2, #1
 80441c2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80441c6:	2300      	movs	r3, #0
}
 80441c8:	4618      	mov	r0, r3
 80441ca:	3714      	adds	r7, #20
 80441cc:	46bd      	mov	sp, r7
 80441ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080441d0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80441d0:	b590      	push	{r4, r7, lr}
 80441d2:	b089      	sub	sp, #36	; 0x24
 80441d4:	af04      	add	r7, sp, #16
 80441d6:	6078      	str	r0, [r7, #4]
 80441d8:	4608      	mov	r0, r1
 80441da:	4611      	mov	r1, r2
 80441dc:	461a      	mov	r2, r3
 80441de:	4603      	mov	r3, r0
 80441e0:	70fb      	strb	r3, [r7, #3]
 80441e2:	460b      	mov	r3, r1
 80441e4:	70bb      	strb	r3, [r7, #2]
 80441e6:	4613      	mov	r3, r2
 80441e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80441ea:	687b      	ldr	r3, [r7, #4]
 80441ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80441f0:	2b01      	cmp	r3, #1
 80441f2:	d101      	bne.n	80441f8 <HAL_HCD_HC_Init+0x28>
 80441f4:	2302      	movs	r3, #2
 80441f6:	e076      	b.n	80442e6 <HAL_HCD_HC_Init+0x116>
 80441f8:	687b      	ldr	r3, [r7, #4]
 80441fa:	2201      	movs	r2, #1
 80441fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8044200:	78fb      	ldrb	r3, [r7, #3]
 8044202:	687a      	ldr	r2, [r7, #4]
 8044204:	212c      	movs	r1, #44	; 0x2c
 8044206:	fb01 f303 	mul.w	r3, r1, r3
 804420a:	4413      	add	r3, r2
 804420c:	333d      	adds	r3, #61	; 0x3d
 804420e:	2200      	movs	r2, #0
 8044210:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8044212:	78fb      	ldrb	r3, [r7, #3]
 8044214:	687a      	ldr	r2, [r7, #4]
 8044216:	212c      	movs	r1, #44	; 0x2c
 8044218:	fb01 f303 	mul.w	r3, r1, r3
 804421c:	4413      	add	r3, r2
 804421e:	3338      	adds	r3, #56	; 0x38
 8044220:	787a      	ldrb	r2, [r7, #1]
 8044222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8044224:	78fb      	ldrb	r3, [r7, #3]
 8044226:	687a      	ldr	r2, [r7, #4]
 8044228:	212c      	movs	r1, #44	; 0x2c
 804422a:	fb01 f303 	mul.w	r3, r1, r3
 804422e:	4413      	add	r3, r2
 8044230:	3340      	adds	r3, #64	; 0x40
 8044232:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8044234:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044236:	78fb      	ldrb	r3, [r7, #3]
 8044238:	687a      	ldr	r2, [r7, #4]
 804423a:	212c      	movs	r1, #44	; 0x2c
 804423c:	fb01 f303 	mul.w	r3, r1, r3
 8044240:	4413      	add	r3, r2
 8044242:	3339      	adds	r3, #57	; 0x39
 8044244:	78fa      	ldrb	r2, [r7, #3]
 8044246:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8044248:	78fb      	ldrb	r3, [r7, #3]
 804424a:	687a      	ldr	r2, [r7, #4]
 804424c:	212c      	movs	r1, #44	; 0x2c
 804424e:	fb01 f303 	mul.w	r3, r1, r3
 8044252:	4413      	add	r3, r2
 8044254:	333f      	adds	r3, #63	; 0x3f
 8044256:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 804425a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 804425c:	78fb      	ldrb	r3, [r7, #3]
 804425e:	78ba      	ldrb	r2, [r7, #2]
 8044260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8044264:	b2d0      	uxtb	r0, r2
 8044266:	687a      	ldr	r2, [r7, #4]
 8044268:	212c      	movs	r1, #44	; 0x2c
 804426a:	fb01 f303 	mul.w	r3, r1, r3
 804426e:	4413      	add	r3, r2
 8044270:	333a      	adds	r3, #58	; 0x3a
 8044272:	4602      	mov	r2, r0
 8044274:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8044276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804427a:	2b00      	cmp	r3, #0
 804427c:	da09      	bge.n	8044292 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 804427e:	78fb      	ldrb	r3, [r7, #3]
 8044280:	687a      	ldr	r2, [r7, #4]
 8044282:	212c      	movs	r1, #44	; 0x2c
 8044284:	fb01 f303 	mul.w	r3, r1, r3
 8044288:	4413      	add	r3, r2
 804428a:	333b      	adds	r3, #59	; 0x3b
 804428c:	2201      	movs	r2, #1
 804428e:	701a      	strb	r2, [r3, #0]
 8044290:	e008      	b.n	80442a4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8044292:	78fb      	ldrb	r3, [r7, #3]
 8044294:	687a      	ldr	r2, [r7, #4]
 8044296:	212c      	movs	r1, #44	; 0x2c
 8044298:	fb01 f303 	mul.w	r3, r1, r3
 804429c:	4413      	add	r3, r2
 804429e:	333b      	adds	r3, #59	; 0x3b
 80442a0:	2200      	movs	r2, #0
 80442a2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80442a4:	78fb      	ldrb	r3, [r7, #3]
 80442a6:	687a      	ldr	r2, [r7, #4]
 80442a8:	212c      	movs	r1, #44	; 0x2c
 80442aa:	fb01 f303 	mul.w	r3, r1, r3
 80442ae:	4413      	add	r3, r2
 80442b0:	333c      	adds	r3, #60	; 0x3c
 80442b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80442b6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80442b8:	687b      	ldr	r3, [r7, #4]
 80442ba:	6818      	ldr	r0, [r3, #0]
 80442bc:	787c      	ldrb	r4, [r7, #1]
 80442be:	78ba      	ldrb	r2, [r7, #2]
 80442c0:	78f9      	ldrb	r1, [r7, #3]
 80442c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80442c4:	9302      	str	r3, [sp, #8]
 80442c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80442ca:	9301      	str	r3, [sp, #4]
 80442cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80442d0:	9300      	str	r3, [sp, #0]
 80442d2:	4623      	mov	r3, r4
 80442d4:	f005 faf2 	bl	80498bc <USB_HC_Init>
 80442d8:	4603      	mov	r3, r0
 80442da:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80442dc:	687b      	ldr	r3, [r7, #4]
 80442de:	2200      	movs	r2, #0
 80442e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80442e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80442e6:	4618      	mov	r0, r3
 80442e8:	3714      	adds	r7, #20
 80442ea:	46bd      	mov	sp, r7
 80442ec:	bd90      	pop	{r4, r7, pc}

080442ee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80442ee:	b580      	push	{r7, lr}
 80442f0:	b084      	sub	sp, #16
 80442f2:	af00      	add	r7, sp, #0
 80442f4:	6078      	str	r0, [r7, #4]
 80442f6:	460b      	mov	r3, r1
 80442f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80442fa:	2300      	movs	r3, #0
 80442fc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80442fe:	687b      	ldr	r3, [r7, #4]
 8044300:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044304:	2b01      	cmp	r3, #1
 8044306:	d101      	bne.n	804430c <HAL_HCD_HC_Halt+0x1e>
 8044308:	2302      	movs	r3, #2
 804430a:	e00f      	b.n	804432c <HAL_HCD_HC_Halt+0x3e>
 804430c:	687b      	ldr	r3, [r7, #4]
 804430e:	2201      	movs	r2, #1
 8044310:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044314:	687b      	ldr	r3, [r7, #4]
 8044316:	681b      	ldr	r3, [r3, #0]
 8044318:	78fa      	ldrb	r2, [r7, #3]
 804431a:	4611      	mov	r1, r2
 804431c:	4618      	mov	r0, r3
 804431e:	f005 fd42 	bl	8049da6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8044322:	687b      	ldr	r3, [r7, #4]
 8044324:	2200      	movs	r2, #0
 8044326:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 804432a:	7bfb      	ldrb	r3, [r7, #15]
}
 804432c:	4618      	mov	r0, r3
 804432e:	3710      	adds	r7, #16
 8044330:	46bd      	mov	sp, r7
 8044332:	bd80      	pop	{r7, pc}

08044334 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8044334:	b580      	push	{r7, lr}
 8044336:	b082      	sub	sp, #8
 8044338:	af00      	add	r7, sp, #0
 804433a:	6078      	str	r0, [r7, #4]
 804433c:	4608      	mov	r0, r1
 804433e:	4611      	mov	r1, r2
 8044340:	461a      	mov	r2, r3
 8044342:	4603      	mov	r3, r0
 8044344:	70fb      	strb	r3, [r7, #3]
 8044346:	460b      	mov	r3, r1
 8044348:	70bb      	strb	r3, [r7, #2]
 804434a:	4613      	mov	r3, r2
 804434c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 804434e:	78fb      	ldrb	r3, [r7, #3]
 8044350:	687a      	ldr	r2, [r7, #4]
 8044352:	212c      	movs	r1, #44	; 0x2c
 8044354:	fb01 f303 	mul.w	r3, r1, r3
 8044358:	4413      	add	r3, r2
 804435a:	333b      	adds	r3, #59	; 0x3b
 804435c:	78ba      	ldrb	r2, [r7, #2]
 804435e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8044360:	78fb      	ldrb	r3, [r7, #3]
 8044362:	687a      	ldr	r2, [r7, #4]
 8044364:	212c      	movs	r1, #44	; 0x2c
 8044366:	fb01 f303 	mul.w	r3, r1, r3
 804436a:	4413      	add	r3, r2
 804436c:	333f      	adds	r3, #63	; 0x3f
 804436e:	787a      	ldrb	r2, [r7, #1]
 8044370:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8044372:	7c3b      	ldrb	r3, [r7, #16]
 8044374:	2b00      	cmp	r3, #0
 8044376:	d112      	bne.n	804439e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8044378:	78fb      	ldrb	r3, [r7, #3]
 804437a:	687a      	ldr	r2, [r7, #4]
 804437c:	212c      	movs	r1, #44	; 0x2c
 804437e:	fb01 f303 	mul.w	r3, r1, r3
 8044382:	4413      	add	r3, r2
 8044384:	3342      	adds	r3, #66	; 0x42
 8044386:	2203      	movs	r2, #3
 8044388:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 804438a:	78fb      	ldrb	r3, [r7, #3]
 804438c:	687a      	ldr	r2, [r7, #4]
 804438e:	212c      	movs	r1, #44	; 0x2c
 8044390:	fb01 f303 	mul.w	r3, r1, r3
 8044394:	4413      	add	r3, r2
 8044396:	333d      	adds	r3, #61	; 0x3d
 8044398:	7f3a      	ldrb	r2, [r7, #28]
 804439a:	701a      	strb	r2, [r3, #0]
 804439c:	e008      	b.n	80443b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804439e:	78fb      	ldrb	r3, [r7, #3]
 80443a0:	687a      	ldr	r2, [r7, #4]
 80443a2:	212c      	movs	r1, #44	; 0x2c
 80443a4:	fb01 f303 	mul.w	r3, r1, r3
 80443a8:	4413      	add	r3, r2
 80443aa:	3342      	adds	r3, #66	; 0x42
 80443ac:	2202      	movs	r2, #2
 80443ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80443b0:	787b      	ldrb	r3, [r7, #1]
 80443b2:	2b03      	cmp	r3, #3
 80443b4:	f200 80c6 	bhi.w	8044544 <HAL_HCD_HC_SubmitRequest+0x210>
 80443b8:	a201      	add	r2, pc, #4	; (adr r2, 80443c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80443ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80443be:	bf00      	nop
 80443c0:	080443d1 	.word	0x080443d1
 80443c4:	08044531 	.word	0x08044531
 80443c8:	08044435 	.word	0x08044435
 80443cc:	080444b3 	.word	0x080444b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80443d0:	7c3b      	ldrb	r3, [r7, #16]
 80443d2:	2b01      	cmp	r3, #1
 80443d4:	f040 80b8 	bne.w	8044548 <HAL_HCD_HC_SubmitRequest+0x214>
 80443d8:	78bb      	ldrb	r3, [r7, #2]
 80443da:	2b00      	cmp	r3, #0
 80443dc:	f040 80b4 	bne.w	8044548 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80443e0:	8b3b      	ldrh	r3, [r7, #24]
 80443e2:	2b00      	cmp	r3, #0
 80443e4:	d108      	bne.n	80443f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80443e6:	78fb      	ldrb	r3, [r7, #3]
 80443e8:	687a      	ldr	r2, [r7, #4]
 80443ea:	212c      	movs	r1, #44	; 0x2c
 80443ec:	fb01 f303 	mul.w	r3, r1, r3
 80443f0:	4413      	add	r3, r2
 80443f2:	3355      	adds	r3, #85	; 0x55
 80443f4:	2201      	movs	r2, #1
 80443f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80443f8:	78fb      	ldrb	r3, [r7, #3]
 80443fa:	687a      	ldr	r2, [r7, #4]
 80443fc:	212c      	movs	r1, #44	; 0x2c
 80443fe:	fb01 f303 	mul.w	r3, r1, r3
 8044402:	4413      	add	r3, r2
 8044404:	3355      	adds	r3, #85	; 0x55
 8044406:	781b      	ldrb	r3, [r3, #0]
 8044408:	2b00      	cmp	r3, #0
 804440a:	d109      	bne.n	8044420 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804440c:	78fb      	ldrb	r3, [r7, #3]
 804440e:	687a      	ldr	r2, [r7, #4]
 8044410:	212c      	movs	r1, #44	; 0x2c
 8044412:	fb01 f303 	mul.w	r3, r1, r3
 8044416:	4413      	add	r3, r2
 8044418:	3342      	adds	r3, #66	; 0x42
 804441a:	2200      	movs	r2, #0
 804441c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804441e:	e093      	b.n	8044548 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044420:	78fb      	ldrb	r3, [r7, #3]
 8044422:	687a      	ldr	r2, [r7, #4]
 8044424:	212c      	movs	r1, #44	; 0x2c
 8044426:	fb01 f303 	mul.w	r3, r1, r3
 804442a:	4413      	add	r3, r2
 804442c:	3342      	adds	r3, #66	; 0x42
 804442e:	2202      	movs	r2, #2
 8044430:	701a      	strb	r2, [r3, #0]
      break;
 8044432:	e089      	b.n	8044548 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8044434:	78bb      	ldrb	r3, [r7, #2]
 8044436:	2b00      	cmp	r3, #0
 8044438:	d11d      	bne.n	8044476 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 804443a:	78fb      	ldrb	r3, [r7, #3]
 804443c:	687a      	ldr	r2, [r7, #4]
 804443e:	212c      	movs	r1, #44	; 0x2c
 8044440:	fb01 f303 	mul.w	r3, r1, r3
 8044444:	4413      	add	r3, r2
 8044446:	3355      	adds	r3, #85	; 0x55
 8044448:	781b      	ldrb	r3, [r3, #0]
 804444a:	2b00      	cmp	r3, #0
 804444c:	d109      	bne.n	8044462 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804444e:	78fb      	ldrb	r3, [r7, #3]
 8044450:	687a      	ldr	r2, [r7, #4]
 8044452:	212c      	movs	r1, #44	; 0x2c
 8044454:	fb01 f303 	mul.w	r3, r1, r3
 8044458:	4413      	add	r3, r2
 804445a:	3342      	adds	r3, #66	; 0x42
 804445c:	2200      	movs	r2, #0
 804445e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8044460:	e073      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044462:	78fb      	ldrb	r3, [r7, #3]
 8044464:	687a      	ldr	r2, [r7, #4]
 8044466:	212c      	movs	r1, #44	; 0x2c
 8044468:	fb01 f303 	mul.w	r3, r1, r3
 804446c:	4413      	add	r3, r2
 804446e:	3342      	adds	r3, #66	; 0x42
 8044470:	2202      	movs	r2, #2
 8044472:	701a      	strb	r2, [r3, #0]
      break;
 8044474:	e069      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044476:	78fb      	ldrb	r3, [r7, #3]
 8044478:	687a      	ldr	r2, [r7, #4]
 804447a:	212c      	movs	r1, #44	; 0x2c
 804447c:	fb01 f303 	mul.w	r3, r1, r3
 8044480:	4413      	add	r3, r2
 8044482:	3354      	adds	r3, #84	; 0x54
 8044484:	781b      	ldrb	r3, [r3, #0]
 8044486:	2b00      	cmp	r3, #0
 8044488:	d109      	bne.n	804449e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804448a:	78fb      	ldrb	r3, [r7, #3]
 804448c:	687a      	ldr	r2, [r7, #4]
 804448e:	212c      	movs	r1, #44	; 0x2c
 8044490:	fb01 f303 	mul.w	r3, r1, r3
 8044494:	4413      	add	r3, r2
 8044496:	3342      	adds	r3, #66	; 0x42
 8044498:	2200      	movs	r2, #0
 804449a:	701a      	strb	r2, [r3, #0]
      break;
 804449c:	e055      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804449e:	78fb      	ldrb	r3, [r7, #3]
 80444a0:	687a      	ldr	r2, [r7, #4]
 80444a2:	212c      	movs	r1, #44	; 0x2c
 80444a4:	fb01 f303 	mul.w	r3, r1, r3
 80444a8:	4413      	add	r3, r2
 80444aa:	3342      	adds	r3, #66	; 0x42
 80444ac:	2202      	movs	r2, #2
 80444ae:	701a      	strb	r2, [r3, #0]
      break;
 80444b0:	e04b      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80444b2:	78bb      	ldrb	r3, [r7, #2]
 80444b4:	2b00      	cmp	r3, #0
 80444b6:	d11d      	bne.n	80444f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80444b8:	78fb      	ldrb	r3, [r7, #3]
 80444ba:	687a      	ldr	r2, [r7, #4]
 80444bc:	212c      	movs	r1, #44	; 0x2c
 80444be:	fb01 f303 	mul.w	r3, r1, r3
 80444c2:	4413      	add	r3, r2
 80444c4:	3355      	adds	r3, #85	; 0x55
 80444c6:	781b      	ldrb	r3, [r3, #0]
 80444c8:	2b00      	cmp	r3, #0
 80444ca:	d109      	bne.n	80444e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80444cc:	78fb      	ldrb	r3, [r7, #3]
 80444ce:	687a      	ldr	r2, [r7, #4]
 80444d0:	212c      	movs	r1, #44	; 0x2c
 80444d2:	fb01 f303 	mul.w	r3, r1, r3
 80444d6:	4413      	add	r3, r2
 80444d8:	3342      	adds	r3, #66	; 0x42
 80444da:	2200      	movs	r2, #0
 80444dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80444de:	e034      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80444e0:	78fb      	ldrb	r3, [r7, #3]
 80444e2:	687a      	ldr	r2, [r7, #4]
 80444e4:	212c      	movs	r1, #44	; 0x2c
 80444e6:	fb01 f303 	mul.w	r3, r1, r3
 80444ea:	4413      	add	r3, r2
 80444ec:	3342      	adds	r3, #66	; 0x42
 80444ee:	2202      	movs	r2, #2
 80444f0:	701a      	strb	r2, [r3, #0]
      break;
 80444f2:	e02a      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80444f4:	78fb      	ldrb	r3, [r7, #3]
 80444f6:	687a      	ldr	r2, [r7, #4]
 80444f8:	212c      	movs	r1, #44	; 0x2c
 80444fa:	fb01 f303 	mul.w	r3, r1, r3
 80444fe:	4413      	add	r3, r2
 8044500:	3354      	adds	r3, #84	; 0x54
 8044502:	781b      	ldrb	r3, [r3, #0]
 8044504:	2b00      	cmp	r3, #0
 8044506:	d109      	bne.n	804451c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044508:	78fb      	ldrb	r3, [r7, #3]
 804450a:	687a      	ldr	r2, [r7, #4]
 804450c:	212c      	movs	r1, #44	; 0x2c
 804450e:	fb01 f303 	mul.w	r3, r1, r3
 8044512:	4413      	add	r3, r2
 8044514:	3342      	adds	r3, #66	; 0x42
 8044516:	2200      	movs	r2, #0
 8044518:	701a      	strb	r2, [r3, #0]
      break;
 804451a:	e016      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804451c:	78fb      	ldrb	r3, [r7, #3]
 804451e:	687a      	ldr	r2, [r7, #4]
 8044520:	212c      	movs	r1, #44	; 0x2c
 8044522:	fb01 f303 	mul.w	r3, r1, r3
 8044526:	4413      	add	r3, r2
 8044528:	3342      	adds	r3, #66	; 0x42
 804452a:	2202      	movs	r2, #2
 804452c:	701a      	strb	r2, [r3, #0]
      break;
 804452e:	e00c      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044530:	78fb      	ldrb	r3, [r7, #3]
 8044532:	687a      	ldr	r2, [r7, #4]
 8044534:	212c      	movs	r1, #44	; 0x2c
 8044536:	fb01 f303 	mul.w	r3, r1, r3
 804453a:	4413      	add	r3, r2
 804453c:	3342      	adds	r3, #66	; 0x42
 804453e:	2200      	movs	r2, #0
 8044540:	701a      	strb	r2, [r3, #0]
      break;
 8044542:	e002      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8044544:	bf00      	nop
 8044546:	e000      	b.n	804454a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8044548:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 804454a:	78fb      	ldrb	r3, [r7, #3]
 804454c:	687a      	ldr	r2, [r7, #4]
 804454e:	212c      	movs	r1, #44	; 0x2c
 8044550:	fb01 f303 	mul.w	r3, r1, r3
 8044554:	4413      	add	r3, r2
 8044556:	3344      	adds	r3, #68	; 0x44
 8044558:	697a      	ldr	r2, [r7, #20]
 804455a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 804455c:	78fb      	ldrb	r3, [r7, #3]
 804455e:	8b3a      	ldrh	r2, [r7, #24]
 8044560:	6879      	ldr	r1, [r7, #4]
 8044562:	202c      	movs	r0, #44	; 0x2c
 8044564:	fb00 f303 	mul.w	r3, r0, r3
 8044568:	440b      	add	r3, r1
 804456a:	334c      	adds	r3, #76	; 0x4c
 804456c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 804456e:	78fb      	ldrb	r3, [r7, #3]
 8044570:	687a      	ldr	r2, [r7, #4]
 8044572:	212c      	movs	r1, #44	; 0x2c
 8044574:	fb01 f303 	mul.w	r3, r1, r3
 8044578:	4413      	add	r3, r2
 804457a:	3360      	adds	r3, #96	; 0x60
 804457c:	2200      	movs	r2, #0
 804457e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8044580:	78fb      	ldrb	r3, [r7, #3]
 8044582:	687a      	ldr	r2, [r7, #4]
 8044584:	212c      	movs	r1, #44	; 0x2c
 8044586:	fb01 f303 	mul.w	r3, r1, r3
 804458a:	4413      	add	r3, r2
 804458c:	3350      	adds	r3, #80	; 0x50
 804458e:	2200      	movs	r2, #0
 8044590:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044592:	78fb      	ldrb	r3, [r7, #3]
 8044594:	687a      	ldr	r2, [r7, #4]
 8044596:	212c      	movs	r1, #44	; 0x2c
 8044598:	fb01 f303 	mul.w	r3, r1, r3
 804459c:	4413      	add	r3, r2
 804459e:	3339      	adds	r3, #57	; 0x39
 80445a0:	78fa      	ldrb	r2, [r7, #3]
 80445a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80445a4:	78fb      	ldrb	r3, [r7, #3]
 80445a6:	687a      	ldr	r2, [r7, #4]
 80445a8:	212c      	movs	r1, #44	; 0x2c
 80445aa:	fb01 f303 	mul.w	r3, r1, r3
 80445ae:	4413      	add	r3, r2
 80445b0:	3361      	adds	r3, #97	; 0x61
 80445b2:	2200      	movs	r2, #0
 80445b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80445b6:	687b      	ldr	r3, [r7, #4]
 80445b8:	6818      	ldr	r0, [r3, #0]
 80445ba:	78fb      	ldrb	r3, [r7, #3]
 80445bc:	222c      	movs	r2, #44	; 0x2c
 80445be:	fb02 f303 	mul.w	r3, r2, r3
 80445c2:	3338      	adds	r3, #56	; 0x38
 80445c4:	687a      	ldr	r2, [r7, #4]
 80445c6:	18d1      	adds	r1, r2, r3
 80445c8:	687b      	ldr	r3, [r7, #4]
 80445ca:	691b      	ldr	r3, [r3, #16]
 80445cc:	b2db      	uxtb	r3, r3
 80445ce:	461a      	mov	r2, r3
 80445d0:	f005 fa96 	bl	8049b00 <USB_HC_StartXfer>
 80445d4:	4603      	mov	r3, r0
}
 80445d6:	4618      	mov	r0, r3
 80445d8:	3708      	adds	r7, #8
 80445da:	46bd      	mov	sp, r7
 80445dc:	bd80      	pop	{r7, pc}
 80445de:	bf00      	nop

080445e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80445e0:	b580      	push	{r7, lr}
 80445e2:	b086      	sub	sp, #24
 80445e4:	af00      	add	r7, sp, #0
 80445e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80445e8:	687b      	ldr	r3, [r7, #4]
 80445ea:	681b      	ldr	r3, [r3, #0]
 80445ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80445ee:	693b      	ldr	r3, [r7, #16]
 80445f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80445f2:	687b      	ldr	r3, [r7, #4]
 80445f4:	681b      	ldr	r3, [r3, #0]
 80445f6:	4618      	mov	r0, r3
 80445f8:	f004 ff97 	bl	804952a <USB_GetMode>
 80445fc:	4603      	mov	r3, r0
 80445fe:	2b01      	cmp	r3, #1
 8044600:	f040 80f6 	bne.w	80447f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8044604:	687b      	ldr	r3, [r7, #4]
 8044606:	681b      	ldr	r3, [r3, #0]
 8044608:	4618      	mov	r0, r3
 804460a:	f004 ff7b 	bl	8049504 <USB_ReadInterrupts>
 804460e:	4603      	mov	r3, r0
 8044610:	2b00      	cmp	r3, #0
 8044612:	f000 80ec 	beq.w	80447ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8044616:	687b      	ldr	r3, [r7, #4]
 8044618:	681b      	ldr	r3, [r3, #0]
 804461a:	4618      	mov	r0, r3
 804461c:	f004 ff72 	bl	8049504 <USB_ReadInterrupts>
 8044620:	4603      	mov	r3, r0
 8044622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804462a:	d104      	bne.n	8044636 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 804462c:	687b      	ldr	r3, [r7, #4]
 804462e:	681b      	ldr	r3, [r3, #0]
 8044630:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8044634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8044636:	687b      	ldr	r3, [r7, #4]
 8044638:	681b      	ldr	r3, [r3, #0]
 804463a:	4618      	mov	r0, r3
 804463c:	f004 ff62 	bl	8049504 <USB_ReadInterrupts>
 8044640:	4603      	mov	r3, r0
 8044642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804464a:	d104      	bne.n	8044656 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 804464c:	687b      	ldr	r3, [r7, #4]
 804464e:	681b      	ldr	r3, [r3, #0]
 8044650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8044654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8044656:	687b      	ldr	r3, [r7, #4]
 8044658:	681b      	ldr	r3, [r3, #0]
 804465a:	4618      	mov	r0, r3
 804465c:	f004 ff52 	bl	8049504 <USB_ReadInterrupts>
 8044660:	4603      	mov	r3, r0
 8044662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8044666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804466a:	d104      	bne.n	8044676 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 804466c:	687b      	ldr	r3, [r7, #4]
 804466e:	681b      	ldr	r3, [r3, #0]
 8044670:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8044674:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8044676:	687b      	ldr	r3, [r7, #4]
 8044678:	681b      	ldr	r3, [r3, #0]
 804467a:	4618      	mov	r0, r3
 804467c:	f004 ff42 	bl	8049504 <USB_ReadInterrupts>
 8044680:	4603      	mov	r3, r0
 8044682:	f003 0302 	and.w	r3, r3, #2
 8044686:	2b02      	cmp	r3, #2
 8044688:	d103      	bne.n	8044692 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 804468a:	687b      	ldr	r3, [r7, #4]
 804468c:	681b      	ldr	r3, [r3, #0]
 804468e:	2202      	movs	r2, #2
 8044690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8044692:	687b      	ldr	r3, [r7, #4]
 8044694:	681b      	ldr	r3, [r3, #0]
 8044696:	4618      	mov	r0, r3
 8044698:	f004 ff34 	bl	8049504 <USB_ReadInterrupts>
 804469c:	4603      	mov	r3, r0
 804469e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80446a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80446a6:	d11c      	bne.n	80446e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	681b      	ldr	r3, [r3, #0]
 80446ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80446b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80446b2:	68fb      	ldr	r3, [r7, #12]
 80446b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80446b8:	681b      	ldr	r3, [r3, #0]
 80446ba:	f003 0301 	and.w	r3, r3, #1
 80446be:	2b00      	cmp	r3, #0
 80446c0:	d10f      	bne.n	80446e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80446c2:	2110      	movs	r1, #16
 80446c4:	6938      	ldr	r0, [r7, #16]
 80446c6:	f004 fe23 	bl	8049310 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80446ca:	6938      	ldr	r0, [r7, #16]
 80446cc:	f004 fe54 	bl	8049378 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80446d0:	687b      	ldr	r3, [r7, #4]
 80446d2:	681b      	ldr	r3, [r3, #0]
 80446d4:	2101      	movs	r1, #1
 80446d6:	4618      	mov	r0, r3
 80446d8:	f005 f82a 	bl	8049730 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80446dc:	6878      	ldr	r0, [r7, #4]
 80446de:	f007 fdf3 	bl	804c2c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80446e2:	687b      	ldr	r3, [r7, #4]
 80446e4:	681b      	ldr	r3, [r3, #0]
 80446e6:	4618      	mov	r0, r3
 80446e8:	f004 ff0c 	bl	8049504 <USB_ReadInterrupts>
 80446ec:	4603      	mov	r3, r0
 80446ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80446f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80446f6:	d102      	bne.n	80446fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80446f8:	6878      	ldr	r0, [r7, #4]
 80446fa:	f001 f89e 	bl	804583a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80446fe:	687b      	ldr	r3, [r7, #4]
 8044700:	681b      	ldr	r3, [r3, #0]
 8044702:	4618      	mov	r0, r3
 8044704:	f004 fefe 	bl	8049504 <USB_ReadInterrupts>
 8044708:	4603      	mov	r3, r0
 804470a:	f003 0308 	and.w	r3, r3, #8
 804470e:	2b08      	cmp	r3, #8
 8044710:	d106      	bne.n	8044720 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8044712:	6878      	ldr	r0, [r7, #4]
 8044714:	f007 fdbc 	bl	804c290 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8044718:	687b      	ldr	r3, [r7, #4]
 804471a:	681b      	ldr	r3, [r3, #0]
 804471c:	2208      	movs	r2, #8
 804471e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8044720:	687b      	ldr	r3, [r7, #4]
 8044722:	681b      	ldr	r3, [r3, #0]
 8044724:	4618      	mov	r0, r3
 8044726:	f004 feed 	bl	8049504 <USB_ReadInterrupts>
 804472a:	4603      	mov	r3, r0
 804472c:	f003 0310 	and.w	r3, r3, #16
 8044730:	2b10      	cmp	r3, #16
 8044732:	d101      	bne.n	8044738 <HAL_HCD_IRQHandler+0x158>
 8044734:	2301      	movs	r3, #1
 8044736:	e000      	b.n	804473a <HAL_HCD_IRQHandler+0x15a>
 8044738:	2300      	movs	r3, #0
 804473a:	2b00      	cmp	r3, #0
 804473c:	d012      	beq.n	8044764 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804473e:	687b      	ldr	r3, [r7, #4]
 8044740:	681b      	ldr	r3, [r3, #0]
 8044742:	699a      	ldr	r2, [r3, #24]
 8044744:	687b      	ldr	r3, [r7, #4]
 8044746:	681b      	ldr	r3, [r3, #0]
 8044748:	f022 0210 	bic.w	r2, r2, #16
 804474c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 804474e:	6878      	ldr	r0, [r7, #4]
 8044750:	f000 ffa1 	bl	8045696 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8044754:	687b      	ldr	r3, [r7, #4]
 8044756:	681b      	ldr	r3, [r3, #0]
 8044758:	699a      	ldr	r2, [r3, #24]
 804475a:	687b      	ldr	r3, [r7, #4]
 804475c:	681b      	ldr	r3, [r3, #0]
 804475e:	f042 0210 	orr.w	r2, r2, #16
 8044762:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8044764:	687b      	ldr	r3, [r7, #4]
 8044766:	681b      	ldr	r3, [r3, #0]
 8044768:	4618      	mov	r0, r3
 804476a:	f004 fecb 	bl	8049504 <USB_ReadInterrupts>
 804476e:	4603      	mov	r3, r0
 8044770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044778:	d13a      	bne.n	80447f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 804477a:	687b      	ldr	r3, [r7, #4]
 804477c:	681b      	ldr	r3, [r3, #0]
 804477e:	4618      	mov	r0, r3
 8044780:	f005 fb00 	bl	8049d84 <USB_HC_ReadInterrupt>
 8044784:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044786:	2300      	movs	r3, #0
 8044788:	617b      	str	r3, [r7, #20]
 804478a:	e025      	b.n	80447d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 804478c:	697b      	ldr	r3, [r7, #20]
 804478e:	f003 030f 	and.w	r3, r3, #15
 8044792:	68ba      	ldr	r2, [r7, #8]
 8044794:	fa22 f303 	lsr.w	r3, r2, r3
 8044798:	f003 0301 	and.w	r3, r3, #1
 804479c:	2b00      	cmp	r3, #0
 804479e:	d018      	beq.n	80447d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80447a0:	697b      	ldr	r3, [r7, #20]
 80447a2:	015a      	lsls	r2, r3, #5
 80447a4:	68fb      	ldr	r3, [r7, #12]
 80447a6:	4413      	add	r3, r2
 80447a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80447ac:	681b      	ldr	r3, [r3, #0]
 80447ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80447b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80447b6:	d106      	bne.n	80447c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80447b8:	697b      	ldr	r3, [r7, #20]
 80447ba:	b2db      	uxtb	r3, r3
 80447bc:	4619      	mov	r1, r3
 80447be:	6878      	ldr	r0, [r7, #4]
 80447c0:	f000 f8ab 	bl	804491a <HCD_HC_IN_IRQHandler>
 80447c4:	e005      	b.n	80447d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80447c6:	697b      	ldr	r3, [r7, #20]
 80447c8:	b2db      	uxtb	r3, r3
 80447ca:	4619      	mov	r1, r3
 80447cc:	6878      	ldr	r0, [r7, #4]
 80447ce:	f000 fbf9 	bl	8044fc4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80447d2:	697b      	ldr	r3, [r7, #20]
 80447d4:	3301      	adds	r3, #1
 80447d6:	617b      	str	r3, [r7, #20]
 80447d8:	687b      	ldr	r3, [r7, #4]
 80447da:	689b      	ldr	r3, [r3, #8]
 80447dc:	697a      	ldr	r2, [r7, #20]
 80447de:	429a      	cmp	r2, r3
 80447e0:	d3d4      	bcc.n	804478c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80447e2:	687b      	ldr	r3, [r7, #4]
 80447e4:	681b      	ldr	r3, [r3, #0]
 80447e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80447ea:	615a      	str	r2, [r3, #20]
 80447ec:	e000      	b.n	80447f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80447ee:	bf00      	nop
    }
  }
}
 80447f0:	3718      	adds	r7, #24
 80447f2:	46bd      	mov	sp, r7
 80447f4:	bd80      	pop	{r7, pc}

080447f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80447f6:	b580      	push	{r7, lr}
 80447f8:	b082      	sub	sp, #8
 80447fa:	af00      	add	r7, sp, #0
 80447fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80447fe:	687b      	ldr	r3, [r7, #4]
 8044800:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044804:	2b01      	cmp	r3, #1
 8044806:	d101      	bne.n	804480c <HAL_HCD_Start+0x16>
 8044808:	2302      	movs	r3, #2
 804480a:	e013      	b.n	8044834 <HAL_HCD_Start+0x3e>
 804480c:	687b      	ldr	r3, [r7, #4]
 804480e:	2201      	movs	r2, #1
 8044810:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8044814:	687b      	ldr	r3, [r7, #4]
 8044816:	681b      	ldr	r3, [r3, #0]
 8044818:	2101      	movs	r1, #1
 804481a:	4618      	mov	r0, r3
 804481c:	f004 ffec 	bl	80497f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8044820:	687b      	ldr	r3, [r7, #4]
 8044822:	681b      	ldr	r3, [r3, #0]
 8044824:	4618      	mov	r0, r3
 8044826:	f004 fd04 	bl	8049232 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 804482a:	687b      	ldr	r3, [r7, #4]
 804482c:	2200      	movs	r2, #0
 804482e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044832:	2300      	movs	r3, #0
}
 8044834:	4618      	mov	r0, r3
 8044836:	3708      	adds	r7, #8
 8044838:	46bd      	mov	sp, r7
 804483a:	bd80      	pop	{r7, pc}

0804483c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 804483c:	b580      	push	{r7, lr}
 804483e:	b082      	sub	sp, #8
 8044840:	af00      	add	r7, sp, #0
 8044842:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044844:	687b      	ldr	r3, [r7, #4]
 8044846:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 804484a:	2b01      	cmp	r3, #1
 804484c:	d101      	bne.n	8044852 <HAL_HCD_Stop+0x16>
 804484e:	2302      	movs	r3, #2
 8044850:	e00d      	b.n	804486e <HAL_HCD_Stop+0x32>
 8044852:	687b      	ldr	r3, [r7, #4]
 8044854:	2201      	movs	r2, #1
 8044856:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 804485a:	687b      	ldr	r3, [r7, #4]
 804485c:	681b      	ldr	r3, [r3, #0]
 804485e:	4618      	mov	r0, r3
 8044860:	f005 fbda 	bl	804a018 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8044864:	687b      	ldr	r3, [r7, #4]
 8044866:	2200      	movs	r2, #0
 8044868:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 804486c:	2300      	movs	r3, #0
}
 804486e:	4618      	mov	r0, r3
 8044870:	3708      	adds	r7, #8
 8044872:	46bd      	mov	sp, r7
 8044874:	bd80      	pop	{r7, pc}

08044876 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8044876:	b580      	push	{r7, lr}
 8044878:	b082      	sub	sp, #8
 804487a:	af00      	add	r7, sp, #0
 804487c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 804487e:	687b      	ldr	r3, [r7, #4]
 8044880:	681b      	ldr	r3, [r3, #0]
 8044882:	4618      	mov	r0, r3
 8044884:	f004 ff8e 	bl	80497a4 <USB_ResetPort>
 8044888:	4603      	mov	r3, r0
}
 804488a:	4618      	mov	r0, r3
 804488c:	3708      	adds	r7, #8
 804488e:	46bd      	mov	sp, r7
 8044890:	bd80      	pop	{r7, pc}

08044892 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044892:	b480      	push	{r7}
 8044894:	b083      	sub	sp, #12
 8044896:	af00      	add	r7, sp, #0
 8044898:	6078      	str	r0, [r7, #4]
 804489a:	460b      	mov	r3, r1
 804489c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 804489e:	78fb      	ldrb	r3, [r7, #3]
 80448a0:	687a      	ldr	r2, [r7, #4]
 80448a2:	212c      	movs	r1, #44	; 0x2c
 80448a4:	fb01 f303 	mul.w	r3, r1, r3
 80448a8:	4413      	add	r3, r2
 80448aa:	3360      	adds	r3, #96	; 0x60
 80448ac:	781b      	ldrb	r3, [r3, #0]
}
 80448ae:	4618      	mov	r0, r3
 80448b0:	370c      	adds	r7, #12
 80448b2:	46bd      	mov	sp, r7
 80448b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80448b8:	4770      	bx	lr

080448ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80448ba:	b480      	push	{r7}
 80448bc:	b083      	sub	sp, #12
 80448be:	af00      	add	r7, sp, #0
 80448c0:	6078      	str	r0, [r7, #4]
 80448c2:	460b      	mov	r3, r1
 80448c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80448c6:	78fb      	ldrb	r3, [r7, #3]
 80448c8:	687a      	ldr	r2, [r7, #4]
 80448ca:	212c      	movs	r1, #44	; 0x2c
 80448cc:	fb01 f303 	mul.w	r3, r1, r3
 80448d0:	4413      	add	r3, r2
 80448d2:	3350      	adds	r3, #80	; 0x50
 80448d4:	681b      	ldr	r3, [r3, #0]
}
 80448d6:	4618      	mov	r0, r3
 80448d8:	370c      	adds	r7, #12
 80448da:	46bd      	mov	sp, r7
 80448dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80448e0:	4770      	bx	lr

080448e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80448e2:	b580      	push	{r7, lr}
 80448e4:	b082      	sub	sp, #8
 80448e6:	af00      	add	r7, sp, #0
 80448e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80448ea:	687b      	ldr	r3, [r7, #4]
 80448ec:	681b      	ldr	r3, [r3, #0]
 80448ee:	4618      	mov	r0, r3
 80448f0:	f004 ffd2 	bl	8049898 <USB_GetCurrentFrame>
 80448f4:	4603      	mov	r3, r0
}
 80448f6:	4618      	mov	r0, r3
 80448f8:	3708      	adds	r7, #8
 80448fa:	46bd      	mov	sp, r7
 80448fc:	bd80      	pop	{r7, pc}

080448fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80448fe:	b580      	push	{r7, lr}
 8044900:	b082      	sub	sp, #8
 8044902:	af00      	add	r7, sp, #0
 8044904:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8044906:	687b      	ldr	r3, [r7, #4]
 8044908:	681b      	ldr	r3, [r3, #0]
 804490a:	4618      	mov	r0, r3
 804490c:	f004 ffad 	bl	804986a <USB_GetHostSpeed>
 8044910:	4603      	mov	r3, r0
}
 8044912:	4618      	mov	r0, r3
 8044914:	3708      	adds	r7, #8
 8044916:	46bd      	mov	sp, r7
 8044918:	bd80      	pop	{r7, pc}

0804491a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 804491a:	b580      	push	{r7, lr}
 804491c:	b086      	sub	sp, #24
 804491e:	af00      	add	r7, sp, #0
 8044920:	6078      	str	r0, [r7, #4]
 8044922:	460b      	mov	r3, r1
 8044924:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044926:	687b      	ldr	r3, [r7, #4]
 8044928:	681b      	ldr	r3, [r3, #0]
 804492a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804492c:	697b      	ldr	r3, [r7, #20]
 804492e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8044930:	78fb      	ldrb	r3, [r7, #3]
 8044932:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044934:	68fb      	ldr	r3, [r7, #12]
 8044936:	015a      	lsls	r2, r3, #5
 8044938:	693b      	ldr	r3, [r7, #16]
 804493a:	4413      	add	r3, r2
 804493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044940:	689b      	ldr	r3, [r3, #8]
 8044942:	f003 0304 	and.w	r3, r3, #4
 8044946:	2b04      	cmp	r3, #4
 8044948:	d11a      	bne.n	8044980 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 804494a:	68fb      	ldr	r3, [r7, #12]
 804494c:	015a      	lsls	r2, r3, #5
 804494e:	693b      	ldr	r3, [r7, #16]
 8044950:	4413      	add	r3, r2
 8044952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044956:	461a      	mov	r2, r3
 8044958:	2304      	movs	r3, #4
 804495a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 804495c:	687a      	ldr	r2, [r7, #4]
 804495e:	68fb      	ldr	r3, [r7, #12]
 8044960:	212c      	movs	r1, #44	; 0x2c
 8044962:	fb01 f303 	mul.w	r3, r1, r3
 8044966:	4413      	add	r3, r2
 8044968:	3361      	adds	r3, #97	; 0x61
 804496a:	2206      	movs	r2, #6
 804496c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804496e:	687b      	ldr	r3, [r7, #4]
 8044970:	681b      	ldr	r3, [r3, #0]
 8044972:	68fa      	ldr	r2, [r7, #12]
 8044974:	b2d2      	uxtb	r2, r2
 8044976:	4611      	mov	r1, r2
 8044978:	4618      	mov	r0, r3
 804497a:	f005 fa14 	bl	8049da6 <USB_HC_Halt>
 804497e:	e0af      	b.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8044980:	68fb      	ldr	r3, [r7, #12]
 8044982:	015a      	lsls	r2, r3, #5
 8044984:	693b      	ldr	r3, [r7, #16]
 8044986:	4413      	add	r3, r2
 8044988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804498c:	689b      	ldr	r3, [r3, #8]
 804498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044996:	d11b      	bne.n	80449d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8044998:	68fb      	ldr	r3, [r7, #12]
 804499a:	015a      	lsls	r2, r3, #5
 804499c:	693b      	ldr	r3, [r7, #16]
 804499e:	4413      	add	r3, r2
 80449a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80449a4:	461a      	mov	r2, r3
 80449a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80449aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80449ac:	687a      	ldr	r2, [r7, #4]
 80449ae:	68fb      	ldr	r3, [r7, #12]
 80449b0:	212c      	movs	r1, #44	; 0x2c
 80449b2:	fb01 f303 	mul.w	r3, r1, r3
 80449b6:	4413      	add	r3, r2
 80449b8:	3361      	adds	r3, #97	; 0x61
 80449ba:	2207      	movs	r2, #7
 80449bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80449be:	687b      	ldr	r3, [r7, #4]
 80449c0:	681b      	ldr	r3, [r3, #0]
 80449c2:	68fa      	ldr	r2, [r7, #12]
 80449c4:	b2d2      	uxtb	r2, r2
 80449c6:	4611      	mov	r1, r2
 80449c8:	4618      	mov	r0, r3
 80449ca:	f005 f9ec 	bl	8049da6 <USB_HC_Halt>
 80449ce:	e087      	b.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80449d0:	68fb      	ldr	r3, [r7, #12]
 80449d2:	015a      	lsls	r2, r3, #5
 80449d4:	693b      	ldr	r3, [r7, #16]
 80449d6:	4413      	add	r3, r2
 80449d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80449dc:	689b      	ldr	r3, [r3, #8]
 80449de:	f003 0320 	and.w	r3, r3, #32
 80449e2:	2b20      	cmp	r3, #32
 80449e4:	d109      	bne.n	80449fa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80449e6:	68fb      	ldr	r3, [r7, #12]
 80449e8:	015a      	lsls	r2, r3, #5
 80449ea:	693b      	ldr	r3, [r7, #16]
 80449ec:	4413      	add	r3, r2
 80449ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80449f2:	461a      	mov	r2, r3
 80449f4:	2320      	movs	r3, #32
 80449f6:	6093      	str	r3, [r2, #8]
 80449f8:	e072      	b.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80449fa:	68fb      	ldr	r3, [r7, #12]
 80449fc:	015a      	lsls	r2, r3, #5
 80449fe:	693b      	ldr	r3, [r7, #16]
 8044a00:	4413      	add	r3, r2
 8044a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a06:	689b      	ldr	r3, [r3, #8]
 8044a08:	f003 0308 	and.w	r3, r3, #8
 8044a0c:	2b08      	cmp	r3, #8
 8044a0e:	d11a      	bne.n	8044a46 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8044a10:	68fb      	ldr	r3, [r7, #12]
 8044a12:	015a      	lsls	r2, r3, #5
 8044a14:	693b      	ldr	r3, [r7, #16]
 8044a16:	4413      	add	r3, r2
 8044a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a1c:	461a      	mov	r2, r3
 8044a1e:	2308      	movs	r3, #8
 8044a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8044a22:	687a      	ldr	r2, [r7, #4]
 8044a24:	68fb      	ldr	r3, [r7, #12]
 8044a26:	212c      	movs	r1, #44	; 0x2c
 8044a28:	fb01 f303 	mul.w	r3, r1, r3
 8044a2c:	4413      	add	r3, r2
 8044a2e:	3361      	adds	r3, #97	; 0x61
 8044a30:	2205      	movs	r2, #5
 8044a32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044a34:	687b      	ldr	r3, [r7, #4]
 8044a36:	681b      	ldr	r3, [r3, #0]
 8044a38:	68fa      	ldr	r2, [r7, #12]
 8044a3a:	b2d2      	uxtb	r2, r2
 8044a3c:	4611      	mov	r1, r2
 8044a3e:	4618      	mov	r0, r3
 8044a40:	f005 f9b1 	bl	8049da6 <USB_HC_Halt>
 8044a44:	e04c      	b.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8044a46:	68fb      	ldr	r3, [r7, #12]
 8044a48:	015a      	lsls	r2, r3, #5
 8044a4a:	693b      	ldr	r3, [r7, #16]
 8044a4c:	4413      	add	r3, r2
 8044a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a52:	689b      	ldr	r3, [r3, #8]
 8044a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044a5c:	d11b      	bne.n	8044a96 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8044a5e:	68fb      	ldr	r3, [r7, #12]
 8044a60:	015a      	lsls	r2, r3, #5
 8044a62:	693b      	ldr	r3, [r7, #16]
 8044a64:	4413      	add	r3, r2
 8044a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044a6a:	461a      	mov	r2, r3
 8044a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8044a70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8044a72:	687a      	ldr	r2, [r7, #4]
 8044a74:	68fb      	ldr	r3, [r7, #12]
 8044a76:	212c      	movs	r1, #44	; 0x2c
 8044a78:	fb01 f303 	mul.w	r3, r1, r3
 8044a7c:	4413      	add	r3, r2
 8044a7e:	3361      	adds	r3, #97	; 0x61
 8044a80:	2208      	movs	r2, #8
 8044a82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044a84:	687b      	ldr	r3, [r7, #4]
 8044a86:	681b      	ldr	r3, [r3, #0]
 8044a88:	68fa      	ldr	r2, [r7, #12]
 8044a8a:	b2d2      	uxtb	r2, r2
 8044a8c:	4611      	mov	r1, r2
 8044a8e:	4618      	mov	r0, r3
 8044a90:	f005 f989 	bl	8049da6 <USB_HC_Halt>
 8044a94:	e024      	b.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8044a96:	68fb      	ldr	r3, [r7, #12]
 8044a98:	015a      	lsls	r2, r3, #5
 8044a9a:	693b      	ldr	r3, [r7, #16]
 8044a9c:	4413      	add	r3, r2
 8044a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044aa2:	689b      	ldr	r3, [r3, #8]
 8044aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044aa8:	2b80      	cmp	r3, #128	; 0x80
 8044aaa:	d119      	bne.n	8044ae0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8044aac:	68fb      	ldr	r3, [r7, #12]
 8044aae:	015a      	lsls	r2, r3, #5
 8044ab0:	693b      	ldr	r3, [r7, #16]
 8044ab2:	4413      	add	r3, r2
 8044ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ab8:	461a      	mov	r2, r3
 8044aba:	2380      	movs	r3, #128	; 0x80
 8044abc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044abe:	687a      	ldr	r2, [r7, #4]
 8044ac0:	68fb      	ldr	r3, [r7, #12]
 8044ac2:	212c      	movs	r1, #44	; 0x2c
 8044ac4:	fb01 f303 	mul.w	r3, r1, r3
 8044ac8:	4413      	add	r3, r2
 8044aca:	3361      	adds	r3, #97	; 0x61
 8044acc:	2206      	movs	r2, #6
 8044ace:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044ad0:	687b      	ldr	r3, [r7, #4]
 8044ad2:	681b      	ldr	r3, [r3, #0]
 8044ad4:	68fa      	ldr	r2, [r7, #12]
 8044ad6:	b2d2      	uxtb	r2, r2
 8044ad8:	4611      	mov	r1, r2
 8044ada:	4618      	mov	r0, r3
 8044adc:	f005 f963 	bl	8049da6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8044ae0:	68fb      	ldr	r3, [r7, #12]
 8044ae2:	015a      	lsls	r2, r3, #5
 8044ae4:	693b      	ldr	r3, [r7, #16]
 8044ae6:	4413      	add	r3, r2
 8044ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044aec:	689b      	ldr	r3, [r3, #8]
 8044aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044af6:	d112      	bne.n	8044b1e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044af8:	687b      	ldr	r3, [r7, #4]
 8044afa:	681b      	ldr	r3, [r3, #0]
 8044afc:	68fa      	ldr	r2, [r7, #12]
 8044afe:	b2d2      	uxtb	r2, r2
 8044b00:	4611      	mov	r1, r2
 8044b02:	4618      	mov	r0, r3
 8044b04:	f005 f94f 	bl	8049da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8044b08:	68fb      	ldr	r3, [r7, #12]
 8044b0a:	015a      	lsls	r2, r3, #5
 8044b0c:	693b      	ldr	r3, [r7, #16]
 8044b0e:	4413      	add	r3, r2
 8044b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b14:	461a      	mov	r2, r3
 8044b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044b1a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8044b1c:	e24e      	b.n	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8044b1e:	68fb      	ldr	r3, [r7, #12]
 8044b20:	015a      	lsls	r2, r3, #5
 8044b22:	693b      	ldr	r3, [r7, #16]
 8044b24:	4413      	add	r3, r2
 8044b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b2a:	689b      	ldr	r3, [r3, #8]
 8044b2c:	f003 0301 	and.w	r3, r3, #1
 8044b30:	2b01      	cmp	r3, #1
 8044b32:	f040 80df 	bne.w	8044cf4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8044b36:	687b      	ldr	r3, [r7, #4]
 8044b38:	691b      	ldr	r3, [r3, #16]
 8044b3a:	2b00      	cmp	r3, #0
 8044b3c:	d019      	beq.n	8044b72 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8044b3e:	687a      	ldr	r2, [r7, #4]
 8044b40:	68fb      	ldr	r3, [r7, #12]
 8044b42:	212c      	movs	r1, #44	; 0x2c
 8044b44:	fb01 f303 	mul.w	r3, r1, r3
 8044b48:	4413      	add	r3, r2
 8044b4a:	3348      	adds	r3, #72	; 0x48
 8044b4c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8044b4e:	68fb      	ldr	r3, [r7, #12]
 8044b50:	0159      	lsls	r1, r3, #5
 8044b52:	693b      	ldr	r3, [r7, #16]
 8044b54:	440b      	add	r3, r1
 8044b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044b5a:	691b      	ldr	r3, [r3, #16]
 8044b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8044b60:	1ad2      	subs	r2, r2, r3
 8044b62:	6879      	ldr	r1, [r7, #4]
 8044b64:	68fb      	ldr	r3, [r7, #12]
 8044b66:	202c      	movs	r0, #44	; 0x2c
 8044b68:	fb00 f303 	mul.w	r3, r0, r3
 8044b6c:	440b      	add	r3, r1
 8044b6e:	3350      	adds	r3, #80	; 0x50
 8044b70:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8044b72:	687a      	ldr	r2, [r7, #4]
 8044b74:	68fb      	ldr	r3, [r7, #12]
 8044b76:	212c      	movs	r1, #44	; 0x2c
 8044b78:	fb01 f303 	mul.w	r3, r1, r3
 8044b7c:	4413      	add	r3, r2
 8044b7e:	3361      	adds	r3, #97	; 0x61
 8044b80:	2201      	movs	r2, #1
 8044b82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8044b84:	687a      	ldr	r2, [r7, #4]
 8044b86:	68fb      	ldr	r3, [r7, #12]
 8044b88:	212c      	movs	r1, #44	; 0x2c
 8044b8a:	fb01 f303 	mul.w	r3, r1, r3
 8044b8e:	4413      	add	r3, r2
 8044b90:	335c      	adds	r3, #92	; 0x5c
 8044b92:	2200      	movs	r2, #0
 8044b94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8044b96:	68fb      	ldr	r3, [r7, #12]
 8044b98:	015a      	lsls	r2, r3, #5
 8044b9a:	693b      	ldr	r3, [r7, #16]
 8044b9c:	4413      	add	r3, r2
 8044b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ba2:	461a      	mov	r2, r3
 8044ba4:	2301      	movs	r3, #1
 8044ba6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044ba8:	687a      	ldr	r2, [r7, #4]
 8044baa:	68fb      	ldr	r3, [r7, #12]
 8044bac:	212c      	movs	r1, #44	; 0x2c
 8044bae:	fb01 f303 	mul.w	r3, r1, r3
 8044bb2:	4413      	add	r3, r2
 8044bb4:	333f      	adds	r3, #63	; 0x3f
 8044bb6:	781b      	ldrb	r3, [r3, #0]
 8044bb8:	2b00      	cmp	r3, #0
 8044bba:	d009      	beq.n	8044bd0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044bbc:	687a      	ldr	r2, [r7, #4]
 8044bbe:	68fb      	ldr	r3, [r7, #12]
 8044bc0:	212c      	movs	r1, #44	; 0x2c
 8044bc2:	fb01 f303 	mul.w	r3, r1, r3
 8044bc6:	4413      	add	r3, r2
 8044bc8:	333f      	adds	r3, #63	; 0x3f
 8044bca:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044bcc:	2b02      	cmp	r3, #2
 8044bce:	d111      	bne.n	8044bf4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044bd0:	687b      	ldr	r3, [r7, #4]
 8044bd2:	681b      	ldr	r3, [r3, #0]
 8044bd4:	68fa      	ldr	r2, [r7, #12]
 8044bd6:	b2d2      	uxtb	r2, r2
 8044bd8:	4611      	mov	r1, r2
 8044bda:	4618      	mov	r0, r3
 8044bdc:	f005 f8e3 	bl	8049da6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044be0:	68fb      	ldr	r3, [r7, #12]
 8044be2:	015a      	lsls	r2, r3, #5
 8044be4:	693b      	ldr	r3, [r7, #16]
 8044be6:	4413      	add	r3, r2
 8044be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044bec:	461a      	mov	r2, r3
 8044bee:	2310      	movs	r3, #16
 8044bf0:	6093      	str	r3, [r2, #8]
 8044bf2:	e03a      	b.n	8044c6a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8044bf4:	687a      	ldr	r2, [r7, #4]
 8044bf6:	68fb      	ldr	r3, [r7, #12]
 8044bf8:	212c      	movs	r1, #44	; 0x2c
 8044bfa:	fb01 f303 	mul.w	r3, r1, r3
 8044bfe:	4413      	add	r3, r2
 8044c00:	333f      	adds	r3, #63	; 0x3f
 8044c02:	781b      	ldrb	r3, [r3, #0]
 8044c04:	2b03      	cmp	r3, #3
 8044c06:	d009      	beq.n	8044c1c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8044c08:	687a      	ldr	r2, [r7, #4]
 8044c0a:	68fb      	ldr	r3, [r7, #12]
 8044c0c:	212c      	movs	r1, #44	; 0x2c
 8044c0e:	fb01 f303 	mul.w	r3, r1, r3
 8044c12:	4413      	add	r3, r2
 8044c14:	333f      	adds	r3, #63	; 0x3f
 8044c16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8044c18:	2b01      	cmp	r3, #1
 8044c1a:	d126      	bne.n	8044c6a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8044c1c:	68fb      	ldr	r3, [r7, #12]
 8044c1e:	015a      	lsls	r2, r3, #5
 8044c20:	693b      	ldr	r3, [r7, #16]
 8044c22:	4413      	add	r3, r2
 8044c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044c28:	681b      	ldr	r3, [r3, #0]
 8044c2a:	68fa      	ldr	r2, [r7, #12]
 8044c2c:	0151      	lsls	r1, r2, #5
 8044c2e:	693a      	ldr	r2, [r7, #16]
 8044c30:	440a      	add	r2, r1
 8044c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8044c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8044c3a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8044c3c:	687a      	ldr	r2, [r7, #4]
 8044c3e:	68fb      	ldr	r3, [r7, #12]
 8044c40:	212c      	movs	r1, #44	; 0x2c
 8044c42:	fb01 f303 	mul.w	r3, r1, r3
 8044c46:	4413      	add	r3, r2
 8044c48:	3360      	adds	r3, #96	; 0x60
 8044c4a:	2201      	movs	r2, #1
 8044c4c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8044c4e:	68fb      	ldr	r3, [r7, #12]
 8044c50:	b2d9      	uxtb	r1, r3
 8044c52:	687a      	ldr	r2, [r7, #4]
 8044c54:	68fb      	ldr	r3, [r7, #12]
 8044c56:	202c      	movs	r0, #44	; 0x2c
 8044c58:	fb00 f303 	mul.w	r3, r0, r3
 8044c5c:	4413      	add	r3, r2
 8044c5e:	3360      	adds	r3, #96	; 0x60
 8044c60:	781b      	ldrb	r3, [r3, #0]
 8044c62:	461a      	mov	r2, r3
 8044c64:	6878      	ldr	r0, [r7, #4]
 8044c66:	f007 fb3d 	bl	804c2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8044c6a:	687b      	ldr	r3, [r7, #4]
 8044c6c:	691b      	ldr	r3, [r3, #16]
 8044c6e:	2b01      	cmp	r3, #1
 8044c70:	d12b      	bne.n	8044cca <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8044c72:	687a      	ldr	r2, [r7, #4]
 8044c74:	68fb      	ldr	r3, [r7, #12]
 8044c76:	212c      	movs	r1, #44	; 0x2c
 8044c78:	fb01 f303 	mul.w	r3, r1, r3
 8044c7c:	4413      	add	r3, r2
 8044c7e:	3348      	adds	r3, #72	; 0x48
 8044c80:	681b      	ldr	r3, [r3, #0]
 8044c82:	6879      	ldr	r1, [r7, #4]
 8044c84:	68fa      	ldr	r2, [r7, #12]
 8044c86:	202c      	movs	r0, #44	; 0x2c
 8044c88:	fb00 f202 	mul.w	r2, r0, r2
 8044c8c:	440a      	add	r2, r1
 8044c8e:	3240      	adds	r2, #64	; 0x40
 8044c90:	8812      	ldrh	r2, [r2, #0]
 8044c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8044c96:	f003 0301 	and.w	r3, r3, #1
 8044c9a:	2b00      	cmp	r3, #0
 8044c9c:	f000 818e 	beq.w	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8044ca0:	687a      	ldr	r2, [r7, #4]
 8044ca2:	68fb      	ldr	r3, [r7, #12]
 8044ca4:	212c      	movs	r1, #44	; 0x2c
 8044ca6:	fb01 f303 	mul.w	r3, r1, r3
 8044caa:	4413      	add	r3, r2
 8044cac:	3354      	adds	r3, #84	; 0x54
 8044cae:	781b      	ldrb	r3, [r3, #0]
 8044cb0:	f083 0301 	eor.w	r3, r3, #1
 8044cb4:	b2d8      	uxtb	r0, r3
 8044cb6:	687a      	ldr	r2, [r7, #4]
 8044cb8:	68fb      	ldr	r3, [r7, #12]
 8044cba:	212c      	movs	r1, #44	; 0x2c
 8044cbc:	fb01 f303 	mul.w	r3, r1, r3
 8044cc0:	4413      	add	r3, r2
 8044cc2:	3354      	adds	r3, #84	; 0x54
 8044cc4:	4602      	mov	r2, r0
 8044cc6:	701a      	strb	r2, [r3, #0]
}
 8044cc8:	e178      	b.n	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8044cca:	687a      	ldr	r2, [r7, #4]
 8044ccc:	68fb      	ldr	r3, [r7, #12]
 8044cce:	212c      	movs	r1, #44	; 0x2c
 8044cd0:	fb01 f303 	mul.w	r3, r1, r3
 8044cd4:	4413      	add	r3, r2
 8044cd6:	3354      	adds	r3, #84	; 0x54
 8044cd8:	781b      	ldrb	r3, [r3, #0]
 8044cda:	f083 0301 	eor.w	r3, r3, #1
 8044cde:	b2d8      	uxtb	r0, r3
 8044ce0:	687a      	ldr	r2, [r7, #4]
 8044ce2:	68fb      	ldr	r3, [r7, #12]
 8044ce4:	212c      	movs	r1, #44	; 0x2c
 8044ce6:	fb01 f303 	mul.w	r3, r1, r3
 8044cea:	4413      	add	r3, r2
 8044cec:	3354      	adds	r3, #84	; 0x54
 8044cee:	4602      	mov	r2, r0
 8044cf0:	701a      	strb	r2, [r3, #0]
}
 8044cf2:	e163      	b.n	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8044cf4:	68fb      	ldr	r3, [r7, #12]
 8044cf6:	015a      	lsls	r2, r3, #5
 8044cf8:	693b      	ldr	r3, [r7, #16]
 8044cfa:	4413      	add	r3, r2
 8044cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d00:	689b      	ldr	r3, [r3, #8]
 8044d02:	f003 0302 	and.w	r3, r3, #2
 8044d06:	2b02      	cmp	r3, #2
 8044d08:	f040 80f6 	bne.w	8044ef8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8044d0c:	687a      	ldr	r2, [r7, #4]
 8044d0e:	68fb      	ldr	r3, [r7, #12]
 8044d10:	212c      	movs	r1, #44	; 0x2c
 8044d12:	fb01 f303 	mul.w	r3, r1, r3
 8044d16:	4413      	add	r3, r2
 8044d18:	3361      	adds	r3, #97	; 0x61
 8044d1a:	781b      	ldrb	r3, [r3, #0]
 8044d1c:	2b01      	cmp	r3, #1
 8044d1e:	d109      	bne.n	8044d34 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8044d20:	687a      	ldr	r2, [r7, #4]
 8044d22:	68fb      	ldr	r3, [r7, #12]
 8044d24:	212c      	movs	r1, #44	; 0x2c
 8044d26:	fb01 f303 	mul.w	r3, r1, r3
 8044d2a:	4413      	add	r3, r2
 8044d2c:	3360      	adds	r3, #96	; 0x60
 8044d2e:	2201      	movs	r2, #1
 8044d30:	701a      	strb	r2, [r3, #0]
 8044d32:	e0c9      	b.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8044d34:	687a      	ldr	r2, [r7, #4]
 8044d36:	68fb      	ldr	r3, [r7, #12]
 8044d38:	212c      	movs	r1, #44	; 0x2c
 8044d3a:	fb01 f303 	mul.w	r3, r1, r3
 8044d3e:	4413      	add	r3, r2
 8044d40:	3361      	adds	r3, #97	; 0x61
 8044d42:	781b      	ldrb	r3, [r3, #0]
 8044d44:	2b05      	cmp	r3, #5
 8044d46:	d109      	bne.n	8044d5c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8044d48:	687a      	ldr	r2, [r7, #4]
 8044d4a:	68fb      	ldr	r3, [r7, #12]
 8044d4c:	212c      	movs	r1, #44	; 0x2c
 8044d4e:	fb01 f303 	mul.w	r3, r1, r3
 8044d52:	4413      	add	r3, r2
 8044d54:	3360      	adds	r3, #96	; 0x60
 8044d56:	2205      	movs	r2, #5
 8044d58:	701a      	strb	r2, [r3, #0]
 8044d5a:	e0b5      	b.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044d5c:	687a      	ldr	r2, [r7, #4]
 8044d5e:	68fb      	ldr	r3, [r7, #12]
 8044d60:	212c      	movs	r1, #44	; 0x2c
 8044d62:	fb01 f303 	mul.w	r3, r1, r3
 8044d66:	4413      	add	r3, r2
 8044d68:	3361      	adds	r3, #97	; 0x61
 8044d6a:	781b      	ldrb	r3, [r3, #0]
 8044d6c:	2b06      	cmp	r3, #6
 8044d6e:	d009      	beq.n	8044d84 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8044d70:	687a      	ldr	r2, [r7, #4]
 8044d72:	68fb      	ldr	r3, [r7, #12]
 8044d74:	212c      	movs	r1, #44	; 0x2c
 8044d76:	fb01 f303 	mul.w	r3, r1, r3
 8044d7a:	4413      	add	r3, r2
 8044d7c:	3361      	adds	r3, #97	; 0x61
 8044d7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8044d80:	2b08      	cmp	r3, #8
 8044d82:	d150      	bne.n	8044e26 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8044d84:	687a      	ldr	r2, [r7, #4]
 8044d86:	68fb      	ldr	r3, [r7, #12]
 8044d88:	212c      	movs	r1, #44	; 0x2c
 8044d8a:	fb01 f303 	mul.w	r3, r1, r3
 8044d8e:	4413      	add	r3, r2
 8044d90:	335c      	adds	r3, #92	; 0x5c
 8044d92:	681b      	ldr	r3, [r3, #0]
 8044d94:	1c5a      	adds	r2, r3, #1
 8044d96:	6879      	ldr	r1, [r7, #4]
 8044d98:	68fb      	ldr	r3, [r7, #12]
 8044d9a:	202c      	movs	r0, #44	; 0x2c
 8044d9c:	fb00 f303 	mul.w	r3, r0, r3
 8044da0:	440b      	add	r3, r1
 8044da2:	335c      	adds	r3, #92	; 0x5c
 8044da4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044da6:	687a      	ldr	r2, [r7, #4]
 8044da8:	68fb      	ldr	r3, [r7, #12]
 8044daa:	212c      	movs	r1, #44	; 0x2c
 8044dac:	fb01 f303 	mul.w	r3, r1, r3
 8044db0:	4413      	add	r3, r2
 8044db2:	335c      	adds	r3, #92	; 0x5c
 8044db4:	681b      	ldr	r3, [r3, #0]
 8044db6:	2b02      	cmp	r3, #2
 8044db8:	d912      	bls.n	8044de0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8044dba:	687a      	ldr	r2, [r7, #4]
 8044dbc:	68fb      	ldr	r3, [r7, #12]
 8044dbe:	212c      	movs	r1, #44	; 0x2c
 8044dc0:	fb01 f303 	mul.w	r3, r1, r3
 8044dc4:	4413      	add	r3, r2
 8044dc6:	335c      	adds	r3, #92	; 0x5c
 8044dc8:	2200      	movs	r2, #0
 8044dca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044dcc:	687a      	ldr	r2, [r7, #4]
 8044dce:	68fb      	ldr	r3, [r7, #12]
 8044dd0:	212c      	movs	r1, #44	; 0x2c
 8044dd2:	fb01 f303 	mul.w	r3, r1, r3
 8044dd6:	4413      	add	r3, r2
 8044dd8:	3360      	adds	r3, #96	; 0x60
 8044dda:	2204      	movs	r2, #4
 8044ddc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044dde:	e073      	b.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8044de0:	687a      	ldr	r2, [r7, #4]
 8044de2:	68fb      	ldr	r3, [r7, #12]
 8044de4:	212c      	movs	r1, #44	; 0x2c
 8044de6:	fb01 f303 	mul.w	r3, r1, r3
 8044dea:	4413      	add	r3, r2
 8044dec:	3360      	adds	r3, #96	; 0x60
 8044dee:	2202      	movs	r2, #2
 8044df0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044df2:	68fb      	ldr	r3, [r7, #12]
 8044df4:	015a      	lsls	r2, r3, #5
 8044df6:	693b      	ldr	r3, [r7, #16]
 8044df8:	4413      	add	r3, r2
 8044dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044dfe:	681b      	ldr	r3, [r3, #0]
 8044e00:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044e02:	68bb      	ldr	r3, [r7, #8]
 8044e04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044e08:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044e0a:	68bb      	ldr	r3, [r7, #8]
 8044e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044e10:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044e12:	68fb      	ldr	r3, [r7, #12]
 8044e14:	015a      	lsls	r2, r3, #5
 8044e16:	693b      	ldr	r3, [r7, #16]
 8044e18:	4413      	add	r3, r2
 8044e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e1e:	461a      	mov	r2, r3
 8044e20:	68bb      	ldr	r3, [r7, #8]
 8044e22:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8044e24:	e050      	b.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8044e26:	687a      	ldr	r2, [r7, #4]
 8044e28:	68fb      	ldr	r3, [r7, #12]
 8044e2a:	212c      	movs	r1, #44	; 0x2c
 8044e2c:	fb01 f303 	mul.w	r3, r1, r3
 8044e30:	4413      	add	r3, r2
 8044e32:	3361      	adds	r3, #97	; 0x61
 8044e34:	781b      	ldrb	r3, [r3, #0]
 8044e36:	2b03      	cmp	r3, #3
 8044e38:	d122      	bne.n	8044e80 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8044e3a:	687a      	ldr	r2, [r7, #4]
 8044e3c:	68fb      	ldr	r3, [r7, #12]
 8044e3e:	212c      	movs	r1, #44	; 0x2c
 8044e40:	fb01 f303 	mul.w	r3, r1, r3
 8044e44:	4413      	add	r3, r2
 8044e46:	3360      	adds	r3, #96	; 0x60
 8044e48:	2202      	movs	r2, #2
 8044e4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8044e4c:	68fb      	ldr	r3, [r7, #12]
 8044e4e:	015a      	lsls	r2, r3, #5
 8044e50:	693b      	ldr	r3, [r7, #16]
 8044e52:	4413      	add	r3, r2
 8044e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e58:	681b      	ldr	r3, [r3, #0]
 8044e5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8044e5c:	68bb      	ldr	r3, [r7, #8]
 8044e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8044e62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8044e64:	68bb      	ldr	r3, [r7, #8]
 8044e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8044e6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8044e6c:	68fb      	ldr	r3, [r7, #12]
 8044e6e:	015a      	lsls	r2, r3, #5
 8044e70:	693b      	ldr	r3, [r7, #16]
 8044e72:	4413      	add	r3, r2
 8044e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e78:	461a      	mov	r2, r3
 8044e7a:	68bb      	ldr	r3, [r7, #8]
 8044e7c:	6013      	str	r3, [r2, #0]
 8044e7e:	e023      	b.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8044e80:	687a      	ldr	r2, [r7, #4]
 8044e82:	68fb      	ldr	r3, [r7, #12]
 8044e84:	212c      	movs	r1, #44	; 0x2c
 8044e86:	fb01 f303 	mul.w	r3, r1, r3
 8044e8a:	4413      	add	r3, r2
 8044e8c:	3361      	adds	r3, #97	; 0x61
 8044e8e:	781b      	ldrb	r3, [r3, #0]
 8044e90:	2b07      	cmp	r3, #7
 8044e92:	d119      	bne.n	8044ec8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8044e94:	687a      	ldr	r2, [r7, #4]
 8044e96:	68fb      	ldr	r3, [r7, #12]
 8044e98:	212c      	movs	r1, #44	; 0x2c
 8044e9a:	fb01 f303 	mul.w	r3, r1, r3
 8044e9e:	4413      	add	r3, r2
 8044ea0:	335c      	adds	r3, #92	; 0x5c
 8044ea2:	681b      	ldr	r3, [r3, #0]
 8044ea4:	1c5a      	adds	r2, r3, #1
 8044ea6:	6879      	ldr	r1, [r7, #4]
 8044ea8:	68fb      	ldr	r3, [r7, #12]
 8044eaa:	202c      	movs	r0, #44	; 0x2c
 8044eac:	fb00 f303 	mul.w	r3, r0, r3
 8044eb0:	440b      	add	r3, r1
 8044eb2:	335c      	adds	r3, #92	; 0x5c
 8044eb4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8044eb6:	687a      	ldr	r2, [r7, #4]
 8044eb8:	68fb      	ldr	r3, [r7, #12]
 8044eba:	212c      	movs	r1, #44	; 0x2c
 8044ebc:	fb01 f303 	mul.w	r3, r1, r3
 8044ec0:	4413      	add	r3, r2
 8044ec2:	3360      	adds	r3, #96	; 0x60
 8044ec4:	2204      	movs	r2, #4
 8044ec6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8044ec8:	68fb      	ldr	r3, [r7, #12]
 8044eca:	015a      	lsls	r2, r3, #5
 8044ecc:	693b      	ldr	r3, [r7, #16]
 8044ece:	4413      	add	r3, r2
 8044ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ed4:	461a      	mov	r2, r3
 8044ed6:	2302      	movs	r3, #2
 8044ed8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8044eda:	68fb      	ldr	r3, [r7, #12]
 8044edc:	b2d9      	uxtb	r1, r3
 8044ede:	687a      	ldr	r2, [r7, #4]
 8044ee0:	68fb      	ldr	r3, [r7, #12]
 8044ee2:	202c      	movs	r0, #44	; 0x2c
 8044ee4:	fb00 f303 	mul.w	r3, r0, r3
 8044ee8:	4413      	add	r3, r2
 8044eea:	3360      	adds	r3, #96	; 0x60
 8044eec:	781b      	ldrb	r3, [r3, #0]
 8044eee:	461a      	mov	r2, r3
 8044ef0:	6878      	ldr	r0, [r7, #4]
 8044ef2:	f007 f9f7 	bl	804c2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8044ef6:	e061      	b.n	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8044ef8:	68fb      	ldr	r3, [r7, #12]
 8044efa:	015a      	lsls	r2, r3, #5
 8044efc:	693b      	ldr	r3, [r7, #16]
 8044efe:	4413      	add	r3, r2
 8044f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f04:	689b      	ldr	r3, [r3, #8]
 8044f06:	f003 0310 	and.w	r3, r3, #16
 8044f0a:	2b10      	cmp	r3, #16
 8044f0c:	d156      	bne.n	8044fbc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8044f0e:	687a      	ldr	r2, [r7, #4]
 8044f10:	68fb      	ldr	r3, [r7, #12]
 8044f12:	212c      	movs	r1, #44	; 0x2c
 8044f14:	fb01 f303 	mul.w	r3, r1, r3
 8044f18:	4413      	add	r3, r2
 8044f1a:	333f      	adds	r3, #63	; 0x3f
 8044f1c:	781b      	ldrb	r3, [r3, #0]
 8044f1e:	2b03      	cmp	r3, #3
 8044f20:	d111      	bne.n	8044f46 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044f22:	687a      	ldr	r2, [r7, #4]
 8044f24:	68fb      	ldr	r3, [r7, #12]
 8044f26:	212c      	movs	r1, #44	; 0x2c
 8044f28:	fb01 f303 	mul.w	r3, r1, r3
 8044f2c:	4413      	add	r3, r2
 8044f2e:	335c      	adds	r3, #92	; 0x5c
 8044f30:	2200      	movs	r2, #0
 8044f32:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f34:	687b      	ldr	r3, [r7, #4]
 8044f36:	681b      	ldr	r3, [r3, #0]
 8044f38:	68fa      	ldr	r2, [r7, #12]
 8044f3a:	b2d2      	uxtb	r2, r2
 8044f3c:	4611      	mov	r1, r2
 8044f3e:	4618      	mov	r0, r3
 8044f40:	f004 ff31 	bl	8049da6 <USB_HC_Halt>
 8044f44:	e031      	b.n	8044faa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044f46:	687a      	ldr	r2, [r7, #4]
 8044f48:	68fb      	ldr	r3, [r7, #12]
 8044f4a:	212c      	movs	r1, #44	; 0x2c
 8044f4c:	fb01 f303 	mul.w	r3, r1, r3
 8044f50:	4413      	add	r3, r2
 8044f52:	333f      	adds	r3, #63	; 0x3f
 8044f54:	781b      	ldrb	r3, [r3, #0]
 8044f56:	2b00      	cmp	r3, #0
 8044f58:	d009      	beq.n	8044f6e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8044f5a:	687a      	ldr	r2, [r7, #4]
 8044f5c:	68fb      	ldr	r3, [r7, #12]
 8044f5e:	212c      	movs	r1, #44	; 0x2c
 8044f60:	fb01 f303 	mul.w	r3, r1, r3
 8044f64:	4413      	add	r3, r2
 8044f66:	333f      	adds	r3, #63	; 0x3f
 8044f68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8044f6a:	2b02      	cmp	r3, #2
 8044f6c:	d11d      	bne.n	8044faa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8044f6e:	687a      	ldr	r2, [r7, #4]
 8044f70:	68fb      	ldr	r3, [r7, #12]
 8044f72:	212c      	movs	r1, #44	; 0x2c
 8044f74:	fb01 f303 	mul.w	r3, r1, r3
 8044f78:	4413      	add	r3, r2
 8044f7a:	335c      	adds	r3, #92	; 0x5c
 8044f7c:	2200      	movs	r2, #0
 8044f7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8044f80:	687b      	ldr	r3, [r7, #4]
 8044f82:	691b      	ldr	r3, [r3, #16]
 8044f84:	2b00      	cmp	r3, #0
 8044f86:	d110      	bne.n	8044faa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8044f88:	687a      	ldr	r2, [r7, #4]
 8044f8a:	68fb      	ldr	r3, [r7, #12]
 8044f8c:	212c      	movs	r1, #44	; 0x2c
 8044f8e:	fb01 f303 	mul.w	r3, r1, r3
 8044f92:	4413      	add	r3, r2
 8044f94:	3361      	adds	r3, #97	; 0x61
 8044f96:	2203      	movs	r2, #3
 8044f98:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f9a:	687b      	ldr	r3, [r7, #4]
 8044f9c:	681b      	ldr	r3, [r3, #0]
 8044f9e:	68fa      	ldr	r2, [r7, #12]
 8044fa0:	b2d2      	uxtb	r2, r2
 8044fa2:	4611      	mov	r1, r2
 8044fa4:	4618      	mov	r0, r3
 8044fa6:	f004 fefe 	bl	8049da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8044faa:	68fb      	ldr	r3, [r7, #12]
 8044fac:	015a      	lsls	r2, r3, #5
 8044fae:	693b      	ldr	r3, [r7, #16]
 8044fb0:	4413      	add	r3, r2
 8044fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fb6:	461a      	mov	r2, r3
 8044fb8:	2310      	movs	r3, #16
 8044fba:	6093      	str	r3, [r2, #8]
}
 8044fbc:	bf00      	nop
 8044fbe:	3718      	adds	r7, #24
 8044fc0:	46bd      	mov	sp, r7
 8044fc2:	bd80      	pop	{r7, pc}

08044fc4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044fc4:	b580      	push	{r7, lr}
 8044fc6:	b088      	sub	sp, #32
 8044fc8:	af00      	add	r7, sp, #0
 8044fca:	6078      	str	r0, [r7, #4]
 8044fcc:	460b      	mov	r3, r1
 8044fce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044fd0:	687b      	ldr	r3, [r7, #4]
 8044fd2:	681b      	ldr	r3, [r3, #0]
 8044fd4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044fd6:	69fb      	ldr	r3, [r7, #28]
 8044fd8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8044fda:	78fb      	ldrb	r3, [r7, #3]
 8044fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044fde:	697b      	ldr	r3, [r7, #20]
 8044fe0:	015a      	lsls	r2, r3, #5
 8044fe2:	69bb      	ldr	r3, [r7, #24]
 8044fe4:	4413      	add	r3, r2
 8044fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fea:	689b      	ldr	r3, [r3, #8]
 8044fec:	f003 0304 	and.w	r3, r3, #4
 8044ff0:	2b04      	cmp	r3, #4
 8044ff2:	d11a      	bne.n	804502a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8044ff4:	697b      	ldr	r3, [r7, #20]
 8044ff6:	015a      	lsls	r2, r3, #5
 8044ff8:	69bb      	ldr	r3, [r7, #24]
 8044ffa:	4413      	add	r3, r2
 8044ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045000:	461a      	mov	r2, r3
 8045002:	2304      	movs	r3, #4
 8045004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8045006:	687a      	ldr	r2, [r7, #4]
 8045008:	697b      	ldr	r3, [r7, #20]
 804500a:	212c      	movs	r1, #44	; 0x2c
 804500c:	fb01 f303 	mul.w	r3, r1, r3
 8045010:	4413      	add	r3, r2
 8045012:	3361      	adds	r3, #97	; 0x61
 8045014:	2206      	movs	r2, #6
 8045016:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045018:	687b      	ldr	r3, [r7, #4]
 804501a:	681b      	ldr	r3, [r3, #0]
 804501c:	697a      	ldr	r2, [r7, #20]
 804501e:	b2d2      	uxtb	r2, r2
 8045020:	4611      	mov	r1, r2
 8045022:	4618      	mov	r0, r3
 8045024:	f004 febf 	bl	8049da6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8045028:	e331      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 804502a:	697b      	ldr	r3, [r7, #20]
 804502c:	015a      	lsls	r2, r3, #5
 804502e:	69bb      	ldr	r3, [r7, #24]
 8045030:	4413      	add	r3, r2
 8045032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045036:	689b      	ldr	r3, [r3, #8]
 8045038:	f003 0320 	and.w	r3, r3, #32
 804503c:	2b20      	cmp	r3, #32
 804503e:	d12e      	bne.n	804509e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8045040:	697b      	ldr	r3, [r7, #20]
 8045042:	015a      	lsls	r2, r3, #5
 8045044:	69bb      	ldr	r3, [r7, #24]
 8045046:	4413      	add	r3, r2
 8045048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804504c:	461a      	mov	r2, r3
 804504e:	2320      	movs	r3, #32
 8045050:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8045052:	687a      	ldr	r2, [r7, #4]
 8045054:	697b      	ldr	r3, [r7, #20]
 8045056:	212c      	movs	r1, #44	; 0x2c
 8045058:	fb01 f303 	mul.w	r3, r1, r3
 804505c:	4413      	add	r3, r2
 804505e:	333d      	adds	r3, #61	; 0x3d
 8045060:	781b      	ldrb	r3, [r3, #0]
 8045062:	2b01      	cmp	r3, #1
 8045064:	f040 8313 	bne.w	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8045068:	687a      	ldr	r2, [r7, #4]
 804506a:	697b      	ldr	r3, [r7, #20]
 804506c:	212c      	movs	r1, #44	; 0x2c
 804506e:	fb01 f303 	mul.w	r3, r1, r3
 8045072:	4413      	add	r3, r2
 8045074:	333d      	adds	r3, #61	; 0x3d
 8045076:	2200      	movs	r2, #0
 8045078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804507a:	687a      	ldr	r2, [r7, #4]
 804507c:	697b      	ldr	r3, [r7, #20]
 804507e:	212c      	movs	r1, #44	; 0x2c
 8045080:	fb01 f303 	mul.w	r3, r1, r3
 8045084:	4413      	add	r3, r2
 8045086:	3360      	adds	r3, #96	; 0x60
 8045088:	2202      	movs	r2, #2
 804508a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	681b      	ldr	r3, [r3, #0]
 8045090:	697a      	ldr	r2, [r7, #20]
 8045092:	b2d2      	uxtb	r2, r2
 8045094:	4611      	mov	r1, r2
 8045096:	4618      	mov	r0, r3
 8045098:	f004 fe85 	bl	8049da6 <USB_HC_Halt>
}
 804509c:	e2f7      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 804509e:	697b      	ldr	r3, [r7, #20]
 80450a0:	015a      	lsls	r2, r3, #5
 80450a2:	69bb      	ldr	r3, [r7, #24]
 80450a4:	4413      	add	r3, r2
 80450a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450aa:	689b      	ldr	r3, [r3, #8]
 80450ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80450b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80450b4:	d112      	bne.n	80450dc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80450b6:	697b      	ldr	r3, [r7, #20]
 80450b8:	015a      	lsls	r2, r3, #5
 80450ba:	69bb      	ldr	r3, [r7, #24]
 80450bc:	4413      	add	r3, r2
 80450be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450c2:	461a      	mov	r2, r3
 80450c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80450c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80450ca:	687b      	ldr	r3, [r7, #4]
 80450cc:	681b      	ldr	r3, [r3, #0]
 80450ce:	697a      	ldr	r2, [r7, #20]
 80450d0:	b2d2      	uxtb	r2, r2
 80450d2:	4611      	mov	r1, r2
 80450d4:	4618      	mov	r0, r3
 80450d6:	f004 fe66 	bl	8049da6 <USB_HC_Halt>
}
 80450da:	e2d8      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80450dc:	697b      	ldr	r3, [r7, #20]
 80450de:	015a      	lsls	r2, r3, #5
 80450e0:	69bb      	ldr	r3, [r7, #24]
 80450e2:	4413      	add	r3, r2
 80450e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450e8:	689b      	ldr	r3, [r3, #8]
 80450ea:	f003 0301 	and.w	r3, r3, #1
 80450ee:	2b01      	cmp	r3, #1
 80450f0:	d140      	bne.n	8045174 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80450f2:	687a      	ldr	r2, [r7, #4]
 80450f4:	697b      	ldr	r3, [r7, #20]
 80450f6:	212c      	movs	r1, #44	; 0x2c
 80450f8:	fb01 f303 	mul.w	r3, r1, r3
 80450fc:	4413      	add	r3, r2
 80450fe:	335c      	adds	r3, #92	; 0x5c
 8045100:	2200      	movs	r2, #0
 8045102:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045104:	697b      	ldr	r3, [r7, #20]
 8045106:	015a      	lsls	r2, r3, #5
 8045108:	69bb      	ldr	r3, [r7, #24]
 804510a:	4413      	add	r3, r2
 804510c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045110:	689b      	ldr	r3, [r3, #8]
 8045112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045116:	2b40      	cmp	r3, #64	; 0x40
 8045118:	d111      	bne.n	804513e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 804511a:	687a      	ldr	r2, [r7, #4]
 804511c:	697b      	ldr	r3, [r7, #20]
 804511e:	212c      	movs	r1, #44	; 0x2c
 8045120:	fb01 f303 	mul.w	r3, r1, r3
 8045124:	4413      	add	r3, r2
 8045126:	333d      	adds	r3, #61	; 0x3d
 8045128:	2201      	movs	r2, #1
 804512a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 804512c:	697b      	ldr	r3, [r7, #20]
 804512e:	015a      	lsls	r2, r3, #5
 8045130:	69bb      	ldr	r3, [r7, #24]
 8045132:	4413      	add	r3, r2
 8045134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045138:	461a      	mov	r2, r3
 804513a:	2340      	movs	r3, #64	; 0x40
 804513c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 804513e:	697b      	ldr	r3, [r7, #20]
 8045140:	015a      	lsls	r2, r3, #5
 8045142:	69bb      	ldr	r3, [r7, #24]
 8045144:	4413      	add	r3, r2
 8045146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804514a:	461a      	mov	r2, r3
 804514c:	2301      	movs	r3, #1
 804514e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8045150:	687a      	ldr	r2, [r7, #4]
 8045152:	697b      	ldr	r3, [r7, #20]
 8045154:	212c      	movs	r1, #44	; 0x2c
 8045156:	fb01 f303 	mul.w	r3, r1, r3
 804515a:	4413      	add	r3, r2
 804515c:	3361      	adds	r3, #97	; 0x61
 804515e:	2201      	movs	r2, #1
 8045160:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045162:	687b      	ldr	r3, [r7, #4]
 8045164:	681b      	ldr	r3, [r3, #0]
 8045166:	697a      	ldr	r2, [r7, #20]
 8045168:	b2d2      	uxtb	r2, r2
 804516a:	4611      	mov	r1, r2
 804516c:	4618      	mov	r0, r3
 804516e:	f004 fe1a 	bl	8049da6 <USB_HC_Halt>
}
 8045172:	e28c      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045174:	697b      	ldr	r3, [r7, #20]
 8045176:	015a      	lsls	r2, r3, #5
 8045178:	69bb      	ldr	r3, [r7, #24]
 804517a:	4413      	add	r3, r2
 804517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045180:	689b      	ldr	r3, [r3, #8]
 8045182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045186:	2b40      	cmp	r3, #64	; 0x40
 8045188:	d12c      	bne.n	80451e4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 804518a:	687a      	ldr	r2, [r7, #4]
 804518c:	697b      	ldr	r3, [r7, #20]
 804518e:	212c      	movs	r1, #44	; 0x2c
 8045190:	fb01 f303 	mul.w	r3, r1, r3
 8045194:	4413      	add	r3, r2
 8045196:	3361      	adds	r3, #97	; 0x61
 8045198:	2204      	movs	r2, #4
 804519a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 804519c:	687a      	ldr	r2, [r7, #4]
 804519e:	697b      	ldr	r3, [r7, #20]
 80451a0:	212c      	movs	r1, #44	; 0x2c
 80451a2:	fb01 f303 	mul.w	r3, r1, r3
 80451a6:	4413      	add	r3, r2
 80451a8:	333d      	adds	r3, #61	; 0x3d
 80451aa:	2201      	movs	r2, #1
 80451ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80451ae:	687a      	ldr	r2, [r7, #4]
 80451b0:	697b      	ldr	r3, [r7, #20]
 80451b2:	212c      	movs	r1, #44	; 0x2c
 80451b4:	fb01 f303 	mul.w	r3, r1, r3
 80451b8:	4413      	add	r3, r2
 80451ba:	335c      	adds	r3, #92	; 0x5c
 80451bc:	2200      	movs	r2, #0
 80451be:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80451c0:	687b      	ldr	r3, [r7, #4]
 80451c2:	681b      	ldr	r3, [r3, #0]
 80451c4:	697a      	ldr	r2, [r7, #20]
 80451c6:	b2d2      	uxtb	r2, r2
 80451c8:	4611      	mov	r1, r2
 80451ca:	4618      	mov	r0, r3
 80451cc:	f004 fdeb 	bl	8049da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80451d0:	697b      	ldr	r3, [r7, #20]
 80451d2:	015a      	lsls	r2, r3, #5
 80451d4:	69bb      	ldr	r3, [r7, #24]
 80451d6:	4413      	add	r3, r2
 80451d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451dc:	461a      	mov	r2, r3
 80451de:	2340      	movs	r3, #64	; 0x40
 80451e0:	6093      	str	r3, [r2, #8]
}
 80451e2:	e254      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80451e4:	697b      	ldr	r3, [r7, #20]
 80451e6:	015a      	lsls	r2, r3, #5
 80451e8:	69bb      	ldr	r3, [r7, #24]
 80451ea:	4413      	add	r3, r2
 80451ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451f0:	689b      	ldr	r3, [r3, #8]
 80451f2:	f003 0308 	and.w	r3, r3, #8
 80451f6:	2b08      	cmp	r3, #8
 80451f8:	d11a      	bne.n	8045230 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80451fa:	697b      	ldr	r3, [r7, #20]
 80451fc:	015a      	lsls	r2, r3, #5
 80451fe:	69bb      	ldr	r3, [r7, #24]
 8045200:	4413      	add	r3, r2
 8045202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045206:	461a      	mov	r2, r3
 8045208:	2308      	movs	r3, #8
 804520a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 804520c:	687a      	ldr	r2, [r7, #4]
 804520e:	697b      	ldr	r3, [r7, #20]
 8045210:	212c      	movs	r1, #44	; 0x2c
 8045212:	fb01 f303 	mul.w	r3, r1, r3
 8045216:	4413      	add	r3, r2
 8045218:	3361      	adds	r3, #97	; 0x61
 804521a:	2205      	movs	r2, #5
 804521c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804521e:	687b      	ldr	r3, [r7, #4]
 8045220:	681b      	ldr	r3, [r3, #0]
 8045222:	697a      	ldr	r2, [r7, #20]
 8045224:	b2d2      	uxtb	r2, r2
 8045226:	4611      	mov	r1, r2
 8045228:	4618      	mov	r0, r3
 804522a:	f004 fdbc 	bl	8049da6 <USB_HC_Halt>
}
 804522e:	e22e      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8045230:	697b      	ldr	r3, [r7, #20]
 8045232:	015a      	lsls	r2, r3, #5
 8045234:	69bb      	ldr	r3, [r7, #24]
 8045236:	4413      	add	r3, r2
 8045238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804523c:	689b      	ldr	r3, [r3, #8]
 804523e:	f003 0310 	and.w	r3, r3, #16
 8045242:	2b10      	cmp	r3, #16
 8045244:	d140      	bne.n	80452c8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045246:	687a      	ldr	r2, [r7, #4]
 8045248:	697b      	ldr	r3, [r7, #20]
 804524a:	212c      	movs	r1, #44	; 0x2c
 804524c:	fb01 f303 	mul.w	r3, r1, r3
 8045250:	4413      	add	r3, r2
 8045252:	335c      	adds	r3, #92	; 0x5c
 8045254:	2200      	movs	r2, #0
 8045256:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8045258:	687a      	ldr	r2, [r7, #4]
 804525a:	697b      	ldr	r3, [r7, #20]
 804525c:	212c      	movs	r1, #44	; 0x2c
 804525e:	fb01 f303 	mul.w	r3, r1, r3
 8045262:	4413      	add	r3, r2
 8045264:	3361      	adds	r3, #97	; 0x61
 8045266:	2203      	movs	r2, #3
 8045268:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 804526a:	687a      	ldr	r2, [r7, #4]
 804526c:	697b      	ldr	r3, [r7, #20]
 804526e:	212c      	movs	r1, #44	; 0x2c
 8045270:	fb01 f303 	mul.w	r3, r1, r3
 8045274:	4413      	add	r3, r2
 8045276:	333d      	adds	r3, #61	; 0x3d
 8045278:	781b      	ldrb	r3, [r3, #0]
 804527a:	2b00      	cmp	r3, #0
 804527c:	d112      	bne.n	80452a4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 804527e:	687a      	ldr	r2, [r7, #4]
 8045280:	697b      	ldr	r3, [r7, #20]
 8045282:	212c      	movs	r1, #44	; 0x2c
 8045284:	fb01 f303 	mul.w	r3, r1, r3
 8045288:	4413      	add	r3, r2
 804528a:	333c      	adds	r3, #60	; 0x3c
 804528c:	781b      	ldrb	r3, [r3, #0]
 804528e:	2b00      	cmp	r3, #0
 8045290:	d108      	bne.n	80452a4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8045292:	687a      	ldr	r2, [r7, #4]
 8045294:	697b      	ldr	r3, [r7, #20]
 8045296:	212c      	movs	r1, #44	; 0x2c
 8045298:	fb01 f303 	mul.w	r3, r1, r3
 804529c:	4413      	add	r3, r2
 804529e:	333d      	adds	r3, #61	; 0x3d
 80452a0:	2201      	movs	r2, #1
 80452a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80452a4:	687b      	ldr	r3, [r7, #4]
 80452a6:	681b      	ldr	r3, [r3, #0]
 80452a8:	697a      	ldr	r2, [r7, #20]
 80452aa:	b2d2      	uxtb	r2, r2
 80452ac:	4611      	mov	r1, r2
 80452ae:	4618      	mov	r0, r3
 80452b0:	f004 fd79 	bl	8049da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80452b4:	697b      	ldr	r3, [r7, #20]
 80452b6:	015a      	lsls	r2, r3, #5
 80452b8:	69bb      	ldr	r3, [r7, #24]
 80452ba:	4413      	add	r3, r2
 80452bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80452c0:	461a      	mov	r2, r3
 80452c2:	2310      	movs	r3, #16
 80452c4:	6093      	str	r3, [r2, #8]
}
 80452c6:	e1e2      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80452c8:	697b      	ldr	r3, [r7, #20]
 80452ca:	015a      	lsls	r2, r3, #5
 80452cc:	69bb      	ldr	r3, [r7, #24]
 80452ce:	4413      	add	r3, r2
 80452d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80452d4:	689b      	ldr	r3, [r3, #8]
 80452d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80452da:	2b80      	cmp	r3, #128	; 0x80
 80452dc:	d164      	bne.n	80453a8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80452de:	687b      	ldr	r3, [r7, #4]
 80452e0:	691b      	ldr	r3, [r3, #16]
 80452e2:	2b00      	cmp	r3, #0
 80452e4:	d111      	bne.n	804530a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80452e6:	687a      	ldr	r2, [r7, #4]
 80452e8:	697b      	ldr	r3, [r7, #20]
 80452ea:	212c      	movs	r1, #44	; 0x2c
 80452ec:	fb01 f303 	mul.w	r3, r1, r3
 80452f0:	4413      	add	r3, r2
 80452f2:	3361      	adds	r3, #97	; 0x61
 80452f4:	2206      	movs	r2, #6
 80452f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80452f8:	687b      	ldr	r3, [r7, #4]
 80452fa:	681b      	ldr	r3, [r3, #0]
 80452fc:	697a      	ldr	r2, [r7, #20]
 80452fe:	b2d2      	uxtb	r2, r2
 8045300:	4611      	mov	r1, r2
 8045302:	4618      	mov	r0, r3
 8045304:	f004 fd4f 	bl	8049da6 <USB_HC_Halt>
 8045308:	e044      	b.n	8045394 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 804530a:	687a      	ldr	r2, [r7, #4]
 804530c:	697b      	ldr	r3, [r7, #20]
 804530e:	212c      	movs	r1, #44	; 0x2c
 8045310:	fb01 f303 	mul.w	r3, r1, r3
 8045314:	4413      	add	r3, r2
 8045316:	335c      	adds	r3, #92	; 0x5c
 8045318:	681b      	ldr	r3, [r3, #0]
 804531a:	1c5a      	adds	r2, r3, #1
 804531c:	6879      	ldr	r1, [r7, #4]
 804531e:	697b      	ldr	r3, [r7, #20]
 8045320:	202c      	movs	r0, #44	; 0x2c
 8045322:	fb00 f303 	mul.w	r3, r0, r3
 8045326:	440b      	add	r3, r1
 8045328:	335c      	adds	r3, #92	; 0x5c
 804532a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 804532c:	687a      	ldr	r2, [r7, #4]
 804532e:	697b      	ldr	r3, [r7, #20]
 8045330:	212c      	movs	r1, #44	; 0x2c
 8045332:	fb01 f303 	mul.w	r3, r1, r3
 8045336:	4413      	add	r3, r2
 8045338:	335c      	adds	r3, #92	; 0x5c
 804533a:	681b      	ldr	r3, [r3, #0]
 804533c:	2b02      	cmp	r3, #2
 804533e:	d920      	bls.n	8045382 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045340:	687a      	ldr	r2, [r7, #4]
 8045342:	697b      	ldr	r3, [r7, #20]
 8045344:	212c      	movs	r1, #44	; 0x2c
 8045346:	fb01 f303 	mul.w	r3, r1, r3
 804534a:	4413      	add	r3, r2
 804534c:	335c      	adds	r3, #92	; 0x5c
 804534e:	2200      	movs	r2, #0
 8045350:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045352:	687a      	ldr	r2, [r7, #4]
 8045354:	697b      	ldr	r3, [r7, #20]
 8045356:	212c      	movs	r1, #44	; 0x2c
 8045358:	fb01 f303 	mul.w	r3, r1, r3
 804535c:	4413      	add	r3, r2
 804535e:	3360      	adds	r3, #96	; 0x60
 8045360:	2204      	movs	r2, #4
 8045362:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045364:	697b      	ldr	r3, [r7, #20]
 8045366:	b2d9      	uxtb	r1, r3
 8045368:	687a      	ldr	r2, [r7, #4]
 804536a:	697b      	ldr	r3, [r7, #20]
 804536c:	202c      	movs	r0, #44	; 0x2c
 804536e:	fb00 f303 	mul.w	r3, r0, r3
 8045372:	4413      	add	r3, r2
 8045374:	3360      	adds	r3, #96	; 0x60
 8045376:	781b      	ldrb	r3, [r3, #0]
 8045378:	461a      	mov	r2, r3
 804537a:	6878      	ldr	r0, [r7, #4]
 804537c:	f006 ffb2 	bl	804c2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8045380:	e008      	b.n	8045394 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045382:	687a      	ldr	r2, [r7, #4]
 8045384:	697b      	ldr	r3, [r7, #20]
 8045386:	212c      	movs	r1, #44	; 0x2c
 8045388:	fb01 f303 	mul.w	r3, r1, r3
 804538c:	4413      	add	r3, r2
 804538e:	3360      	adds	r3, #96	; 0x60
 8045390:	2202      	movs	r2, #2
 8045392:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045394:	697b      	ldr	r3, [r7, #20]
 8045396:	015a      	lsls	r2, r3, #5
 8045398:	69bb      	ldr	r3, [r7, #24]
 804539a:	4413      	add	r3, r2
 804539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453a0:	461a      	mov	r2, r3
 80453a2:	2380      	movs	r3, #128	; 0x80
 80453a4:	6093      	str	r3, [r2, #8]
}
 80453a6:	e172      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80453a8:	697b      	ldr	r3, [r7, #20]
 80453aa:	015a      	lsls	r2, r3, #5
 80453ac:	69bb      	ldr	r3, [r7, #24]
 80453ae:	4413      	add	r3, r2
 80453b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453b4:	689b      	ldr	r3, [r3, #8]
 80453b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80453ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80453be:	d11b      	bne.n	80453f8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80453c0:	687a      	ldr	r2, [r7, #4]
 80453c2:	697b      	ldr	r3, [r7, #20]
 80453c4:	212c      	movs	r1, #44	; 0x2c
 80453c6:	fb01 f303 	mul.w	r3, r1, r3
 80453ca:	4413      	add	r3, r2
 80453cc:	3361      	adds	r3, #97	; 0x61
 80453ce:	2208      	movs	r2, #8
 80453d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80453d2:	687b      	ldr	r3, [r7, #4]
 80453d4:	681b      	ldr	r3, [r3, #0]
 80453d6:	697a      	ldr	r2, [r7, #20]
 80453d8:	b2d2      	uxtb	r2, r2
 80453da:	4611      	mov	r1, r2
 80453dc:	4618      	mov	r0, r3
 80453de:	f004 fce2 	bl	8049da6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80453e2:	697b      	ldr	r3, [r7, #20]
 80453e4:	015a      	lsls	r2, r3, #5
 80453e6:	69bb      	ldr	r3, [r7, #24]
 80453e8:	4413      	add	r3, r2
 80453ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453ee:	461a      	mov	r2, r3
 80453f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80453f4:	6093      	str	r3, [r2, #8]
}
 80453f6:	e14a      	b.n	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80453f8:	697b      	ldr	r3, [r7, #20]
 80453fa:	015a      	lsls	r2, r3, #5
 80453fc:	69bb      	ldr	r3, [r7, #24]
 80453fe:	4413      	add	r3, r2
 8045400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045404:	689b      	ldr	r3, [r3, #8]
 8045406:	f003 0302 	and.w	r3, r3, #2
 804540a:	2b02      	cmp	r3, #2
 804540c:	f040 813f 	bne.w	804568e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8045410:	687a      	ldr	r2, [r7, #4]
 8045412:	697b      	ldr	r3, [r7, #20]
 8045414:	212c      	movs	r1, #44	; 0x2c
 8045416:	fb01 f303 	mul.w	r3, r1, r3
 804541a:	4413      	add	r3, r2
 804541c:	3361      	adds	r3, #97	; 0x61
 804541e:	781b      	ldrb	r3, [r3, #0]
 8045420:	2b01      	cmp	r3, #1
 8045422:	d17d      	bne.n	8045520 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8045424:	687a      	ldr	r2, [r7, #4]
 8045426:	697b      	ldr	r3, [r7, #20]
 8045428:	212c      	movs	r1, #44	; 0x2c
 804542a:	fb01 f303 	mul.w	r3, r1, r3
 804542e:	4413      	add	r3, r2
 8045430:	3360      	adds	r3, #96	; 0x60
 8045432:	2201      	movs	r2, #1
 8045434:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8045436:	687a      	ldr	r2, [r7, #4]
 8045438:	697b      	ldr	r3, [r7, #20]
 804543a:	212c      	movs	r1, #44	; 0x2c
 804543c:	fb01 f303 	mul.w	r3, r1, r3
 8045440:	4413      	add	r3, r2
 8045442:	333f      	adds	r3, #63	; 0x3f
 8045444:	781b      	ldrb	r3, [r3, #0]
 8045446:	2b02      	cmp	r3, #2
 8045448:	d00a      	beq.n	8045460 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 804544a:	687a      	ldr	r2, [r7, #4]
 804544c:	697b      	ldr	r3, [r7, #20]
 804544e:	212c      	movs	r1, #44	; 0x2c
 8045450:	fb01 f303 	mul.w	r3, r1, r3
 8045454:	4413      	add	r3, r2
 8045456:	333f      	adds	r3, #63	; 0x3f
 8045458:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 804545a:	2b03      	cmp	r3, #3
 804545c:	f040 8100 	bne.w	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8045460:	687b      	ldr	r3, [r7, #4]
 8045462:	691b      	ldr	r3, [r3, #16]
 8045464:	2b00      	cmp	r3, #0
 8045466:	d113      	bne.n	8045490 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8045468:	687a      	ldr	r2, [r7, #4]
 804546a:	697b      	ldr	r3, [r7, #20]
 804546c:	212c      	movs	r1, #44	; 0x2c
 804546e:	fb01 f303 	mul.w	r3, r1, r3
 8045472:	4413      	add	r3, r2
 8045474:	3355      	adds	r3, #85	; 0x55
 8045476:	781b      	ldrb	r3, [r3, #0]
 8045478:	f083 0301 	eor.w	r3, r3, #1
 804547c:	b2d8      	uxtb	r0, r3
 804547e:	687a      	ldr	r2, [r7, #4]
 8045480:	697b      	ldr	r3, [r7, #20]
 8045482:	212c      	movs	r1, #44	; 0x2c
 8045484:	fb01 f303 	mul.w	r3, r1, r3
 8045488:	4413      	add	r3, r2
 804548a:	3355      	adds	r3, #85	; 0x55
 804548c:	4602      	mov	r2, r0
 804548e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8045490:	687b      	ldr	r3, [r7, #4]
 8045492:	691b      	ldr	r3, [r3, #16]
 8045494:	2b01      	cmp	r3, #1
 8045496:	f040 80e3 	bne.w	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
 804549a:	687a      	ldr	r2, [r7, #4]
 804549c:	697b      	ldr	r3, [r7, #20]
 804549e:	212c      	movs	r1, #44	; 0x2c
 80454a0:	fb01 f303 	mul.w	r3, r1, r3
 80454a4:	4413      	add	r3, r2
 80454a6:	334c      	adds	r3, #76	; 0x4c
 80454a8:	681b      	ldr	r3, [r3, #0]
 80454aa:	2b00      	cmp	r3, #0
 80454ac:	f000 80d8 	beq.w	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80454b0:	687a      	ldr	r2, [r7, #4]
 80454b2:	697b      	ldr	r3, [r7, #20]
 80454b4:	212c      	movs	r1, #44	; 0x2c
 80454b6:	fb01 f303 	mul.w	r3, r1, r3
 80454ba:	4413      	add	r3, r2
 80454bc:	334c      	adds	r3, #76	; 0x4c
 80454be:	681b      	ldr	r3, [r3, #0]
 80454c0:	6879      	ldr	r1, [r7, #4]
 80454c2:	697a      	ldr	r2, [r7, #20]
 80454c4:	202c      	movs	r0, #44	; 0x2c
 80454c6:	fb00 f202 	mul.w	r2, r0, r2
 80454ca:	440a      	add	r2, r1
 80454cc:	3240      	adds	r2, #64	; 0x40
 80454ce:	8812      	ldrh	r2, [r2, #0]
 80454d0:	4413      	add	r3, r2
 80454d2:	3b01      	subs	r3, #1
 80454d4:	6879      	ldr	r1, [r7, #4]
 80454d6:	697a      	ldr	r2, [r7, #20]
 80454d8:	202c      	movs	r0, #44	; 0x2c
 80454da:	fb00 f202 	mul.w	r2, r0, r2
 80454de:	440a      	add	r2, r1
 80454e0:	3240      	adds	r2, #64	; 0x40
 80454e2:	8812      	ldrh	r2, [r2, #0]
 80454e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80454e8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80454ea:	68fb      	ldr	r3, [r7, #12]
 80454ec:	f003 0301 	and.w	r3, r3, #1
 80454f0:	2b00      	cmp	r3, #0
 80454f2:	f000 80b5 	beq.w	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80454f6:	687a      	ldr	r2, [r7, #4]
 80454f8:	697b      	ldr	r3, [r7, #20]
 80454fa:	212c      	movs	r1, #44	; 0x2c
 80454fc:	fb01 f303 	mul.w	r3, r1, r3
 8045500:	4413      	add	r3, r2
 8045502:	3355      	adds	r3, #85	; 0x55
 8045504:	781b      	ldrb	r3, [r3, #0]
 8045506:	f083 0301 	eor.w	r3, r3, #1
 804550a:	b2d8      	uxtb	r0, r3
 804550c:	687a      	ldr	r2, [r7, #4]
 804550e:	697b      	ldr	r3, [r7, #20]
 8045510:	212c      	movs	r1, #44	; 0x2c
 8045512:	fb01 f303 	mul.w	r3, r1, r3
 8045516:	4413      	add	r3, r2
 8045518:	3355      	adds	r3, #85	; 0x55
 804551a:	4602      	mov	r2, r0
 804551c:	701a      	strb	r2, [r3, #0]
 804551e:	e09f      	b.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8045520:	687a      	ldr	r2, [r7, #4]
 8045522:	697b      	ldr	r3, [r7, #20]
 8045524:	212c      	movs	r1, #44	; 0x2c
 8045526:	fb01 f303 	mul.w	r3, r1, r3
 804552a:	4413      	add	r3, r2
 804552c:	3361      	adds	r3, #97	; 0x61
 804552e:	781b      	ldrb	r3, [r3, #0]
 8045530:	2b03      	cmp	r3, #3
 8045532:	d109      	bne.n	8045548 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045534:	687a      	ldr	r2, [r7, #4]
 8045536:	697b      	ldr	r3, [r7, #20]
 8045538:	212c      	movs	r1, #44	; 0x2c
 804553a:	fb01 f303 	mul.w	r3, r1, r3
 804553e:	4413      	add	r3, r2
 8045540:	3360      	adds	r3, #96	; 0x60
 8045542:	2202      	movs	r2, #2
 8045544:	701a      	strb	r2, [r3, #0]
 8045546:	e08b      	b.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8045548:	687a      	ldr	r2, [r7, #4]
 804554a:	697b      	ldr	r3, [r7, #20]
 804554c:	212c      	movs	r1, #44	; 0x2c
 804554e:	fb01 f303 	mul.w	r3, r1, r3
 8045552:	4413      	add	r3, r2
 8045554:	3361      	adds	r3, #97	; 0x61
 8045556:	781b      	ldrb	r3, [r3, #0]
 8045558:	2b04      	cmp	r3, #4
 804555a:	d109      	bne.n	8045570 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 804555c:	687a      	ldr	r2, [r7, #4]
 804555e:	697b      	ldr	r3, [r7, #20]
 8045560:	212c      	movs	r1, #44	; 0x2c
 8045562:	fb01 f303 	mul.w	r3, r1, r3
 8045566:	4413      	add	r3, r2
 8045568:	3360      	adds	r3, #96	; 0x60
 804556a:	2202      	movs	r2, #2
 804556c:	701a      	strb	r2, [r3, #0]
 804556e:	e077      	b.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045570:	687a      	ldr	r2, [r7, #4]
 8045572:	697b      	ldr	r3, [r7, #20]
 8045574:	212c      	movs	r1, #44	; 0x2c
 8045576:	fb01 f303 	mul.w	r3, r1, r3
 804557a:	4413      	add	r3, r2
 804557c:	3361      	adds	r3, #97	; 0x61
 804557e:	781b      	ldrb	r3, [r3, #0]
 8045580:	2b05      	cmp	r3, #5
 8045582:	d109      	bne.n	8045598 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8045584:	687a      	ldr	r2, [r7, #4]
 8045586:	697b      	ldr	r3, [r7, #20]
 8045588:	212c      	movs	r1, #44	; 0x2c
 804558a:	fb01 f303 	mul.w	r3, r1, r3
 804558e:	4413      	add	r3, r2
 8045590:	3360      	adds	r3, #96	; 0x60
 8045592:	2205      	movs	r2, #5
 8045594:	701a      	strb	r2, [r3, #0]
 8045596:	e063      	b.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045598:	687a      	ldr	r2, [r7, #4]
 804559a:	697b      	ldr	r3, [r7, #20]
 804559c:	212c      	movs	r1, #44	; 0x2c
 804559e:	fb01 f303 	mul.w	r3, r1, r3
 80455a2:	4413      	add	r3, r2
 80455a4:	3361      	adds	r3, #97	; 0x61
 80455a6:	781b      	ldrb	r3, [r3, #0]
 80455a8:	2b06      	cmp	r3, #6
 80455aa:	d009      	beq.n	80455c0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80455ac:	687a      	ldr	r2, [r7, #4]
 80455ae:	697b      	ldr	r3, [r7, #20]
 80455b0:	212c      	movs	r1, #44	; 0x2c
 80455b2:	fb01 f303 	mul.w	r3, r1, r3
 80455b6:	4413      	add	r3, r2
 80455b8:	3361      	adds	r3, #97	; 0x61
 80455ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80455bc:	2b08      	cmp	r3, #8
 80455be:	d14f      	bne.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80455c0:	687a      	ldr	r2, [r7, #4]
 80455c2:	697b      	ldr	r3, [r7, #20]
 80455c4:	212c      	movs	r1, #44	; 0x2c
 80455c6:	fb01 f303 	mul.w	r3, r1, r3
 80455ca:	4413      	add	r3, r2
 80455cc:	335c      	adds	r3, #92	; 0x5c
 80455ce:	681b      	ldr	r3, [r3, #0]
 80455d0:	1c5a      	adds	r2, r3, #1
 80455d2:	6879      	ldr	r1, [r7, #4]
 80455d4:	697b      	ldr	r3, [r7, #20]
 80455d6:	202c      	movs	r0, #44	; 0x2c
 80455d8:	fb00 f303 	mul.w	r3, r0, r3
 80455dc:	440b      	add	r3, r1
 80455de:	335c      	adds	r3, #92	; 0x5c
 80455e0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80455e2:	687a      	ldr	r2, [r7, #4]
 80455e4:	697b      	ldr	r3, [r7, #20]
 80455e6:	212c      	movs	r1, #44	; 0x2c
 80455e8:	fb01 f303 	mul.w	r3, r1, r3
 80455ec:	4413      	add	r3, r2
 80455ee:	335c      	adds	r3, #92	; 0x5c
 80455f0:	681b      	ldr	r3, [r3, #0]
 80455f2:	2b02      	cmp	r3, #2
 80455f4:	d912      	bls.n	804561c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80455f6:	687a      	ldr	r2, [r7, #4]
 80455f8:	697b      	ldr	r3, [r7, #20]
 80455fa:	212c      	movs	r1, #44	; 0x2c
 80455fc:	fb01 f303 	mul.w	r3, r1, r3
 8045600:	4413      	add	r3, r2
 8045602:	335c      	adds	r3, #92	; 0x5c
 8045604:	2200      	movs	r2, #0
 8045606:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045608:	687a      	ldr	r2, [r7, #4]
 804560a:	697b      	ldr	r3, [r7, #20]
 804560c:	212c      	movs	r1, #44	; 0x2c
 804560e:	fb01 f303 	mul.w	r3, r1, r3
 8045612:	4413      	add	r3, r2
 8045614:	3360      	adds	r3, #96	; 0x60
 8045616:	2204      	movs	r2, #4
 8045618:	701a      	strb	r2, [r3, #0]
 804561a:	e021      	b.n	8045660 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804561c:	687a      	ldr	r2, [r7, #4]
 804561e:	697b      	ldr	r3, [r7, #20]
 8045620:	212c      	movs	r1, #44	; 0x2c
 8045622:	fb01 f303 	mul.w	r3, r1, r3
 8045626:	4413      	add	r3, r2
 8045628:	3360      	adds	r3, #96	; 0x60
 804562a:	2202      	movs	r2, #2
 804562c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804562e:	697b      	ldr	r3, [r7, #20]
 8045630:	015a      	lsls	r2, r3, #5
 8045632:	69bb      	ldr	r3, [r7, #24]
 8045634:	4413      	add	r3, r2
 8045636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804563a:	681b      	ldr	r3, [r3, #0]
 804563c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804563e:	693b      	ldr	r3, [r7, #16]
 8045640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045644:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045646:	693b      	ldr	r3, [r7, #16]
 8045648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804564c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 804564e:	697b      	ldr	r3, [r7, #20]
 8045650:	015a      	lsls	r2, r3, #5
 8045652:	69bb      	ldr	r3, [r7, #24]
 8045654:	4413      	add	r3, r2
 8045656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804565a:	461a      	mov	r2, r3
 804565c:	693b      	ldr	r3, [r7, #16]
 804565e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045660:	697b      	ldr	r3, [r7, #20]
 8045662:	015a      	lsls	r2, r3, #5
 8045664:	69bb      	ldr	r3, [r7, #24]
 8045666:	4413      	add	r3, r2
 8045668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804566c:	461a      	mov	r2, r3
 804566e:	2302      	movs	r3, #2
 8045670:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045672:	697b      	ldr	r3, [r7, #20]
 8045674:	b2d9      	uxtb	r1, r3
 8045676:	687a      	ldr	r2, [r7, #4]
 8045678:	697b      	ldr	r3, [r7, #20]
 804567a:	202c      	movs	r0, #44	; 0x2c
 804567c:	fb00 f303 	mul.w	r3, r0, r3
 8045680:	4413      	add	r3, r2
 8045682:	3360      	adds	r3, #96	; 0x60
 8045684:	781b      	ldrb	r3, [r3, #0]
 8045686:	461a      	mov	r2, r3
 8045688:	6878      	ldr	r0, [r7, #4]
 804568a:	f006 fe2b 	bl	804c2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 804568e:	bf00      	nop
 8045690:	3720      	adds	r7, #32
 8045692:	46bd      	mov	sp, r7
 8045694:	bd80      	pop	{r7, pc}

08045696 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045696:	b580      	push	{r7, lr}
 8045698:	b08a      	sub	sp, #40	; 0x28
 804569a:	af00      	add	r7, sp, #0
 804569c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804569e:	687b      	ldr	r3, [r7, #4]
 80456a0:	681b      	ldr	r3, [r3, #0]
 80456a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80456a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80456a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80456a8:	687b      	ldr	r3, [r7, #4]
 80456aa:	681b      	ldr	r3, [r3, #0]
 80456ac:	6a1b      	ldr	r3, [r3, #32]
 80456ae:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80456b0:	69fb      	ldr	r3, [r7, #28]
 80456b2:	f003 030f 	and.w	r3, r3, #15
 80456b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80456b8:	69fb      	ldr	r3, [r7, #28]
 80456ba:	0c5b      	lsrs	r3, r3, #17
 80456bc:	f003 030f 	and.w	r3, r3, #15
 80456c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80456c2:	69fb      	ldr	r3, [r7, #28]
 80456c4:	091b      	lsrs	r3, r3, #4
 80456c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80456ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80456cc:	697b      	ldr	r3, [r7, #20]
 80456ce:	2b02      	cmp	r3, #2
 80456d0:	d004      	beq.n	80456dc <HCD_RXQLVL_IRQHandler+0x46>
 80456d2:	697b      	ldr	r3, [r7, #20]
 80456d4:	2b05      	cmp	r3, #5
 80456d6:	f000 80a9 	beq.w	804582c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80456da:	e0aa      	b.n	8045832 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80456dc:	693b      	ldr	r3, [r7, #16]
 80456de:	2b00      	cmp	r3, #0
 80456e0:	f000 80a6 	beq.w	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
 80456e4:	687a      	ldr	r2, [r7, #4]
 80456e6:	69bb      	ldr	r3, [r7, #24]
 80456e8:	212c      	movs	r1, #44	; 0x2c
 80456ea:	fb01 f303 	mul.w	r3, r1, r3
 80456ee:	4413      	add	r3, r2
 80456f0:	3344      	adds	r3, #68	; 0x44
 80456f2:	681b      	ldr	r3, [r3, #0]
 80456f4:	2b00      	cmp	r3, #0
 80456f6:	f000 809b 	beq.w	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80456fa:	687a      	ldr	r2, [r7, #4]
 80456fc:	69bb      	ldr	r3, [r7, #24]
 80456fe:	212c      	movs	r1, #44	; 0x2c
 8045700:	fb01 f303 	mul.w	r3, r1, r3
 8045704:	4413      	add	r3, r2
 8045706:	3350      	adds	r3, #80	; 0x50
 8045708:	681a      	ldr	r2, [r3, #0]
 804570a:	693b      	ldr	r3, [r7, #16]
 804570c:	441a      	add	r2, r3
 804570e:	6879      	ldr	r1, [r7, #4]
 8045710:	69bb      	ldr	r3, [r7, #24]
 8045712:	202c      	movs	r0, #44	; 0x2c
 8045714:	fb00 f303 	mul.w	r3, r0, r3
 8045718:	440b      	add	r3, r1
 804571a:	334c      	adds	r3, #76	; 0x4c
 804571c:	681b      	ldr	r3, [r3, #0]
 804571e:	429a      	cmp	r2, r3
 8045720:	d87a      	bhi.n	8045818 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8045722:	687b      	ldr	r3, [r7, #4]
 8045724:	6818      	ldr	r0, [r3, #0]
 8045726:	687a      	ldr	r2, [r7, #4]
 8045728:	69bb      	ldr	r3, [r7, #24]
 804572a:	212c      	movs	r1, #44	; 0x2c
 804572c:	fb01 f303 	mul.w	r3, r1, r3
 8045730:	4413      	add	r3, r2
 8045732:	3344      	adds	r3, #68	; 0x44
 8045734:	681b      	ldr	r3, [r3, #0]
 8045736:	693a      	ldr	r2, [r7, #16]
 8045738:	b292      	uxth	r2, r2
 804573a:	4619      	mov	r1, r3
 804573c:	f003 fe8a 	bl	8049454 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8045740:	687a      	ldr	r2, [r7, #4]
 8045742:	69bb      	ldr	r3, [r7, #24]
 8045744:	212c      	movs	r1, #44	; 0x2c
 8045746:	fb01 f303 	mul.w	r3, r1, r3
 804574a:	4413      	add	r3, r2
 804574c:	3344      	adds	r3, #68	; 0x44
 804574e:	681a      	ldr	r2, [r3, #0]
 8045750:	693b      	ldr	r3, [r7, #16]
 8045752:	441a      	add	r2, r3
 8045754:	6879      	ldr	r1, [r7, #4]
 8045756:	69bb      	ldr	r3, [r7, #24]
 8045758:	202c      	movs	r0, #44	; 0x2c
 804575a:	fb00 f303 	mul.w	r3, r0, r3
 804575e:	440b      	add	r3, r1
 8045760:	3344      	adds	r3, #68	; 0x44
 8045762:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8045764:	687a      	ldr	r2, [r7, #4]
 8045766:	69bb      	ldr	r3, [r7, #24]
 8045768:	212c      	movs	r1, #44	; 0x2c
 804576a:	fb01 f303 	mul.w	r3, r1, r3
 804576e:	4413      	add	r3, r2
 8045770:	3350      	adds	r3, #80	; 0x50
 8045772:	681a      	ldr	r2, [r3, #0]
 8045774:	693b      	ldr	r3, [r7, #16]
 8045776:	441a      	add	r2, r3
 8045778:	6879      	ldr	r1, [r7, #4]
 804577a:	69bb      	ldr	r3, [r7, #24]
 804577c:	202c      	movs	r0, #44	; 0x2c
 804577e:	fb00 f303 	mul.w	r3, r0, r3
 8045782:	440b      	add	r3, r1
 8045784:	3350      	adds	r3, #80	; 0x50
 8045786:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8045788:	69bb      	ldr	r3, [r7, #24]
 804578a:	015a      	lsls	r2, r3, #5
 804578c:	6a3b      	ldr	r3, [r7, #32]
 804578e:	4413      	add	r3, r2
 8045790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045794:	691b      	ldr	r3, [r3, #16]
 8045796:	0cdb      	lsrs	r3, r3, #19
 8045798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 804579c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 804579e:	687a      	ldr	r2, [r7, #4]
 80457a0:	69bb      	ldr	r3, [r7, #24]
 80457a2:	212c      	movs	r1, #44	; 0x2c
 80457a4:	fb01 f303 	mul.w	r3, r1, r3
 80457a8:	4413      	add	r3, r2
 80457aa:	3340      	adds	r3, #64	; 0x40
 80457ac:	881b      	ldrh	r3, [r3, #0]
 80457ae:	461a      	mov	r2, r3
 80457b0:	693b      	ldr	r3, [r7, #16]
 80457b2:	4293      	cmp	r3, r2
 80457b4:	d13c      	bne.n	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
 80457b6:	68fb      	ldr	r3, [r7, #12]
 80457b8:	2b00      	cmp	r3, #0
 80457ba:	d039      	beq.n	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80457bc:	69bb      	ldr	r3, [r7, #24]
 80457be:	015a      	lsls	r2, r3, #5
 80457c0:	6a3b      	ldr	r3, [r7, #32]
 80457c2:	4413      	add	r3, r2
 80457c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457c8:	681b      	ldr	r3, [r3, #0]
 80457ca:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80457cc:	68bb      	ldr	r3, [r7, #8]
 80457ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80457d2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80457d4:	68bb      	ldr	r3, [r7, #8]
 80457d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80457da:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80457dc:	69bb      	ldr	r3, [r7, #24]
 80457de:	015a      	lsls	r2, r3, #5
 80457e0:	6a3b      	ldr	r3, [r7, #32]
 80457e2:	4413      	add	r3, r2
 80457e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457e8:	461a      	mov	r2, r3
 80457ea:	68bb      	ldr	r3, [r7, #8]
 80457ec:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80457ee:	687a      	ldr	r2, [r7, #4]
 80457f0:	69bb      	ldr	r3, [r7, #24]
 80457f2:	212c      	movs	r1, #44	; 0x2c
 80457f4:	fb01 f303 	mul.w	r3, r1, r3
 80457f8:	4413      	add	r3, r2
 80457fa:	3354      	adds	r3, #84	; 0x54
 80457fc:	781b      	ldrb	r3, [r3, #0]
 80457fe:	f083 0301 	eor.w	r3, r3, #1
 8045802:	b2d8      	uxtb	r0, r3
 8045804:	687a      	ldr	r2, [r7, #4]
 8045806:	69bb      	ldr	r3, [r7, #24]
 8045808:	212c      	movs	r1, #44	; 0x2c
 804580a:	fb01 f303 	mul.w	r3, r1, r3
 804580e:	4413      	add	r3, r2
 8045810:	3354      	adds	r3, #84	; 0x54
 8045812:	4602      	mov	r2, r0
 8045814:	701a      	strb	r2, [r3, #0]
      break;
 8045816:	e00b      	b.n	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045818:	687a      	ldr	r2, [r7, #4]
 804581a:	69bb      	ldr	r3, [r7, #24]
 804581c:	212c      	movs	r1, #44	; 0x2c
 804581e:	fb01 f303 	mul.w	r3, r1, r3
 8045822:	4413      	add	r3, r2
 8045824:	3360      	adds	r3, #96	; 0x60
 8045826:	2204      	movs	r2, #4
 8045828:	701a      	strb	r2, [r3, #0]
      break;
 804582a:	e001      	b.n	8045830 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 804582c:	bf00      	nop
 804582e:	e000      	b.n	8045832 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8045830:	bf00      	nop
  }
}
 8045832:	bf00      	nop
 8045834:	3728      	adds	r7, #40	; 0x28
 8045836:	46bd      	mov	sp, r7
 8045838:	bd80      	pop	{r7, pc}

0804583a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 804583a:	b580      	push	{r7, lr}
 804583c:	b086      	sub	sp, #24
 804583e:	af00      	add	r7, sp, #0
 8045840:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045842:	687b      	ldr	r3, [r7, #4]
 8045844:	681b      	ldr	r3, [r3, #0]
 8045846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045848:	697b      	ldr	r3, [r7, #20]
 804584a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 804584c:	693b      	ldr	r3, [r7, #16]
 804584e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045852:	681b      	ldr	r3, [r3, #0]
 8045854:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8045856:	693b      	ldr	r3, [r7, #16]
 8045858:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804585c:	681b      	ldr	r3, [r3, #0]
 804585e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8045860:	68bb      	ldr	r3, [r7, #8]
 8045862:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8045866:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8045868:	68fb      	ldr	r3, [r7, #12]
 804586a:	f003 0302 	and.w	r3, r3, #2
 804586e:	2b02      	cmp	r3, #2
 8045870:	d10b      	bne.n	804588a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8045872:	68fb      	ldr	r3, [r7, #12]
 8045874:	f003 0301 	and.w	r3, r3, #1
 8045878:	2b01      	cmp	r3, #1
 804587a:	d102      	bne.n	8045882 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 804587c:	6878      	ldr	r0, [r7, #4]
 804587e:	f006 fd15 	bl	804c2ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8045882:	68bb      	ldr	r3, [r7, #8]
 8045884:	f043 0302 	orr.w	r3, r3, #2
 8045888:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 804588a:	68fb      	ldr	r3, [r7, #12]
 804588c:	f003 0308 	and.w	r3, r3, #8
 8045890:	2b08      	cmp	r3, #8
 8045892:	d132      	bne.n	80458fa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8045894:	68bb      	ldr	r3, [r7, #8]
 8045896:	f043 0308 	orr.w	r3, r3, #8
 804589a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 804589c:	68fb      	ldr	r3, [r7, #12]
 804589e:	f003 0304 	and.w	r3, r3, #4
 80458a2:	2b04      	cmp	r3, #4
 80458a4:	d126      	bne.n	80458f4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80458a6:	687b      	ldr	r3, [r7, #4]
 80458a8:	699b      	ldr	r3, [r3, #24]
 80458aa:	2b02      	cmp	r3, #2
 80458ac:	d113      	bne.n	80458d6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80458ae:	68fb      	ldr	r3, [r7, #12]
 80458b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80458b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80458b8:	d106      	bne.n	80458c8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80458ba:	687b      	ldr	r3, [r7, #4]
 80458bc:	681b      	ldr	r3, [r3, #0]
 80458be:	2102      	movs	r1, #2
 80458c0:	4618      	mov	r0, r3
 80458c2:	f003 ff35 	bl	8049730 <USB_InitFSLSPClkSel>
 80458c6:	e011      	b.n	80458ec <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80458c8:	687b      	ldr	r3, [r7, #4]
 80458ca:	681b      	ldr	r3, [r3, #0]
 80458cc:	2101      	movs	r1, #1
 80458ce:	4618      	mov	r0, r3
 80458d0:	f003 ff2e 	bl	8049730 <USB_InitFSLSPClkSel>
 80458d4:	e00a      	b.n	80458ec <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80458d6:	687b      	ldr	r3, [r7, #4]
 80458d8:	68db      	ldr	r3, [r3, #12]
 80458da:	2b01      	cmp	r3, #1
 80458dc:	d106      	bne.n	80458ec <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80458de:	693b      	ldr	r3, [r7, #16]
 80458e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80458e4:	461a      	mov	r2, r3
 80458e6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80458ea:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80458ec:	6878      	ldr	r0, [r7, #4]
 80458ee:	f006 fd07 	bl	804c300 <HAL_HCD_PortEnabled_Callback>
 80458f2:	e002      	b.n	80458fa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80458f4:	6878      	ldr	r0, [r7, #4]
 80458f6:	f006 fd11 	bl	804c31c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80458fa:	68fb      	ldr	r3, [r7, #12]
 80458fc:	f003 0320 	and.w	r3, r3, #32
 8045900:	2b20      	cmp	r3, #32
 8045902:	d103      	bne.n	804590c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8045904:	68bb      	ldr	r3, [r7, #8]
 8045906:	f043 0320 	orr.w	r3, r3, #32
 804590a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 804590c:	693b      	ldr	r3, [r7, #16]
 804590e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045912:	461a      	mov	r2, r3
 8045914:	68bb      	ldr	r3, [r7, #8]
 8045916:	6013      	str	r3, [r2, #0]
}
 8045918:	bf00      	nop
 804591a:	3718      	adds	r7, #24
 804591c:	46bd      	mov	sp, r7
 804591e:	bd80      	pop	{r7, pc}

08045920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045920:	b580      	push	{r7, lr}
 8045922:	b084      	sub	sp, #16
 8045924:	af00      	add	r7, sp, #0
 8045926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045928:	687b      	ldr	r3, [r7, #4]
 804592a:	2b00      	cmp	r3, #0
 804592c:	d101      	bne.n	8045932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804592e:	2301      	movs	r3, #1
 8045930:	e12b      	b.n	8045b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045932:	687b      	ldr	r3, [r7, #4]
 8045934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045938:	b2db      	uxtb	r3, r3
 804593a:	2b00      	cmp	r3, #0
 804593c:	d106      	bne.n	804594c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804593e:	687b      	ldr	r3, [r7, #4]
 8045940:	2200      	movs	r2, #0
 8045942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8045946:	6878      	ldr	r0, [r7, #4]
 8045948:	f7fb fb68 	bl	804101c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 804594c:	687b      	ldr	r3, [r7, #4]
 804594e:	2224      	movs	r2, #36	; 0x24
 8045950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045954:	687b      	ldr	r3, [r7, #4]
 8045956:	681b      	ldr	r3, [r3, #0]
 8045958:	681a      	ldr	r2, [r3, #0]
 804595a:	687b      	ldr	r3, [r7, #4]
 804595c:	681b      	ldr	r3, [r3, #0]
 804595e:	f022 0201 	bic.w	r2, r2, #1
 8045962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8045964:	687b      	ldr	r3, [r7, #4]
 8045966:	681b      	ldr	r3, [r3, #0]
 8045968:	681a      	ldr	r2, [r3, #0]
 804596a:	687b      	ldr	r3, [r7, #4]
 804596c:	681b      	ldr	r3, [r3, #0]
 804596e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8045972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8045974:	687b      	ldr	r3, [r7, #4]
 8045976:	681b      	ldr	r3, [r3, #0]
 8045978:	681a      	ldr	r2, [r3, #0]
 804597a:	687b      	ldr	r3, [r7, #4]
 804597c:	681b      	ldr	r3, [r3, #0]
 804597e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8045984:	f001 fa0c 	bl	8046da0 <HAL_RCC_GetPCLK1Freq>
 8045988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 804598a:	687b      	ldr	r3, [r7, #4]
 804598c:	685b      	ldr	r3, [r3, #4]
 804598e:	4a81      	ldr	r2, [pc, #516]	; (8045b94 <HAL_I2C_Init+0x274>)
 8045990:	4293      	cmp	r3, r2
 8045992:	d807      	bhi.n	80459a4 <HAL_I2C_Init+0x84>
 8045994:	68fb      	ldr	r3, [r7, #12]
 8045996:	4a80      	ldr	r2, [pc, #512]	; (8045b98 <HAL_I2C_Init+0x278>)
 8045998:	4293      	cmp	r3, r2
 804599a:	bf94      	ite	ls
 804599c:	2301      	movls	r3, #1
 804599e:	2300      	movhi	r3, #0
 80459a0:	b2db      	uxtb	r3, r3
 80459a2:	e006      	b.n	80459b2 <HAL_I2C_Init+0x92>
 80459a4:	68fb      	ldr	r3, [r7, #12]
 80459a6:	4a7d      	ldr	r2, [pc, #500]	; (8045b9c <HAL_I2C_Init+0x27c>)
 80459a8:	4293      	cmp	r3, r2
 80459aa:	bf94      	ite	ls
 80459ac:	2301      	movls	r3, #1
 80459ae:	2300      	movhi	r3, #0
 80459b0:	b2db      	uxtb	r3, r3
 80459b2:	2b00      	cmp	r3, #0
 80459b4:	d001      	beq.n	80459ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80459b6:	2301      	movs	r3, #1
 80459b8:	e0e7      	b.n	8045b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80459ba:	68fb      	ldr	r3, [r7, #12]
 80459bc:	4a78      	ldr	r2, [pc, #480]	; (8045ba0 <HAL_I2C_Init+0x280>)
 80459be:	fba2 2303 	umull	r2, r3, r2, r3
 80459c2:	0c9b      	lsrs	r3, r3, #18
 80459c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80459c6:	687b      	ldr	r3, [r7, #4]
 80459c8:	681b      	ldr	r3, [r3, #0]
 80459ca:	685b      	ldr	r3, [r3, #4]
 80459cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80459d0:	687b      	ldr	r3, [r7, #4]
 80459d2:	681b      	ldr	r3, [r3, #0]
 80459d4:	68ba      	ldr	r2, [r7, #8]
 80459d6:	430a      	orrs	r2, r1
 80459d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80459da:	687b      	ldr	r3, [r7, #4]
 80459dc:	681b      	ldr	r3, [r3, #0]
 80459de:	6a1b      	ldr	r3, [r3, #32]
 80459e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80459e4:	687b      	ldr	r3, [r7, #4]
 80459e6:	685b      	ldr	r3, [r3, #4]
 80459e8:	4a6a      	ldr	r2, [pc, #424]	; (8045b94 <HAL_I2C_Init+0x274>)
 80459ea:	4293      	cmp	r3, r2
 80459ec:	d802      	bhi.n	80459f4 <HAL_I2C_Init+0xd4>
 80459ee:	68bb      	ldr	r3, [r7, #8]
 80459f0:	3301      	adds	r3, #1
 80459f2:	e009      	b.n	8045a08 <HAL_I2C_Init+0xe8>
 80459f4:	68bb      	ldr	r3, [r7, #8]
 80459f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80459fa:	fb02 f303 	mul.w	r3, r2, r3
 80459fe:	4a69      	ldr	r2, [pc, #420]	; (8045ba4 <HAL_I2C_Init+0x284>)
 8045a00:	fba2 2303 	umull	r2, r3, r2, r3
 8045a04:	099b      	lsrs	r3, r3, #6
 8045a06:	3301      	adds	r3, #1
 8045a08:	687a      	ldr	r2, [r7, #4]
 8045a0a:	6812      	ldr	r2, [r2, #0]
 8045a0c:	430b      	orrs	r3, r1
 8045a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045a10:	687b      	ldr	r3, [r7, #4]
 8045a12:	681b      	ldr	r3, [r3, #0]
 8045a14:	69db      	ldr	r3, [r3, #28]
 8045a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045a1e:	687b      	ldr	r3, [r7, #4]
 8045a20:	685b      	ldr	r3, [r3, #4]
 8045a22:	495c      	ldr	r1, [pc, #368]	; (8045b94 <HAL_I2C_Init+0x274>)
 8045a24:	428b      	cmp	r3, r1
 8045a26:	d819      	bhi.n	8045a5c <HAL_I2C_Init+0x13c>
 8045a28:	68fb      	ldr	r3, [r7, #12]
 8045a2a:	1e59      	subs	r1, r3, #1
 8045a2c:	687b      	ldr	r3, [r7, #4]
 8045a2e:	685b      	ldr	r3, [r3, #4]
 8045a30:	005b      	lsls	r3, r3, #1
 8045a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8045a36:	1c59      	adds	r1, r3, #1
 8045a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8045a3c:	400b      	ands	r3, r1
 8045a3e:	2b00      	cmp	r3, #0
 8045a40:	d00a      	beq.n	8045a58 <HAL_I2C_Init+0x138>
 8045a42:	68fb      	ldr	r3, [r7, #12]
 8045a44:	1e59      	subs	r1, r3, #1
 8045a46:	687b      	ldr	r3, [r7, #4]
 8045a48:	685b      	ldr	r3, [r3, #4]
 8045a4a:	005b      	lsls	r3, r3, #1
 8045a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8045a50:	3301      	adds	r3, #1
 8045a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a56:	e051      	b.n	8045afc <HAL_I2C_Init+0x1dc>
 8045a58:	2304      	movs	r3, #4
 8045a5a:	e04f      	b.n	8045afc <HAL_I2C_Init+0x1dc>
 8045a5c:	687b      	ldr	r3, [r7, #4]
 8045a5e:	689b      	ldr	r3, [r3, #8]
 8045a60:	2b00      	cmp	r3, #0
 8045a62:	d111      	bne.n	8045a88 <HAL_I2C_Init+0x168>
 8045a64:	68fb      	ldr	r3, [r7, #12]
 8045a66:	1e58      	subs	r0, r3, #1
 8045a68:	687b      	ldr	r3, [r7, #4]
 8045a6a:	6859      	ldr	r1, [r3, #4]
 8045a6c:	460b      	mov	r3, r1
 8045a6e:	005b      	lsls	r3, r3, #1
 8045a70:	440b      	add	r3, r1
 8045a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8045a76:	3301      	adds	r3, #1
 8045a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045a7c:	2b00      	cmp	r3, #0
 8045a7e:	bf0c      	ite	eq
 8045a80:	2301      	moveq	r3, #1
 8045a82:	2300      	movne	r3, #0
 8045a84:	b2db      	uxtb	r3, r3
 8045a86:	e012      	b.n	8045aae <HAL_I2C_Init+0x18e>
 8045a88:	68fb      	ldr	r3, [r7, #12]
 8045a8a:	1e58      	subs	r0, r3, #1
 8045a8c:	687b      	ldr	r3, [r7, #4]
 8045a8e:	6859      	ldr	r1, [r3, #4]
 8045a90:	460b      	mov	r3, r1
 8045a92:	009b      	lsls	r3, r3, #2
 8045a94:	440b      	add	r3, r1
 8045a96:	0099      	lsls	r1, r3, #2
 8045a98:	440b      	add	r3, r1
 8045a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8045a9e:	3301      	adds	r3, #1
 8045aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045aa4:	2b00      	cmp	r3, #0
 8045aa6:	bf0c      	ite	eq
 8045aa8:	2301      	moveq	r3, #1
 8045aaa:	2300      	movne	r3, #0
 8045aac:	b2db      	uxtb	r3, r3
 8045aae:	2b00      	cmp	r3, #0
 8045ab0:	d001      	beq.n	8045ab6 <HAL_I2C_Init+0x196>
 8045ab2:	2301      	movs	r3, #1
 8045ab4:	e022      	b.n	8045afc <HAL_I2C_Init+0x1dc>
 8045ab6:	687b      	ldr	r3, [r7, #4]
 8045ab8:	689b      	ldr	r3, [r3, #8]
 8045aba:	2b00      	cmp	r3, #0
 8045abc:	d10e      	bne.n	8045adc <HAL_I2C_Init+0x1bc>
 8045abe:	68fb      	ldr	r3, [r7, #12]
 8045ac0:	1e58      	subs	r0, r3, #1
 8045ac2:	687b      	ldr	r3, [r7, #4]
 8045ac4:	6859      	ldr	r1, [r3, #4]
 8045ac6:	460b      	mov	r3, r1
 8045ac8:	005b      	lsls	r3, r3, #1
 8045aca:	440b      	add	r3, r1
 8045acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8045ad0:	3301      	adds	r3, #1
 8045ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8045ada:	e00f      	b.n	8045afc <HAL_I2C_Init+0x1dc>
 8045adc:	68fb      	ldr	r3, [r7, #12]
 8045ade:	1e58      	subs	r0, r3, #1
 8045ae0:	687b      	ldr	r3, [r7, #4]
 8045ae2:	6859      	ldr	r1, [r3, #4]
 8045ae4:	460b      	mov	r3, r1
 8045ae6:	009b      	lsls	r3, r3, #2
 8045ae8:	440b      	add	r3, r1
 8045aea:	0099      	lsls	r1, r3, #2
 8045aec:	440b      	add	r3, r1
 8045aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8045af2:	3301      	adds	r3, #1
 8045af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045afc:	6879      	ldr	r1, [r7, #4]
 8045afe:	6809      	ldr	r1, [r1, #0]
 8045b00:	4313      	orrs	r3, r2
 8045b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045b04:	687b      	ldr	r3, [r7, #4]
 8045b06:	681b      	ldr	r3, [r3, #0]
 8045b08:	681b      	ldr	r3, [r3, #0]
 8045b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045b0e:	687b      	ldr	r3, [r7, #4]
 8045b10:	69da      	ldr	r2, [r3, #28]
 8045b12:	687b      	ldr	r3, [r7, #4]
 8045b14:	6a1b      	ldr	r3, [r3, #32]
 8045b16:	431a      	orrs	r2, r3
 8045b18:	687b      	ldr	r3, [r7, #4]
 8045b1a:	681b      	ldr	r3, [r3, #0]
 8045b1c:	430a      	orrs	r2, r1
 8045b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045b20:	687b      	ldr	r3, [r7, #4]
 8045b22:	681b      	ldr	r3, [r3, #0]
 8045b24:	689b      	ldr	r3, [r3, #8]
 8045b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8045b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045b2e:	687a      	ldr	r2, [r7, #4]
 8045b30:	6911      	ldr	r1, [r2, #16]
 8045b32:	687a      	ldr	r2, [r7, #4]
 8045b34:	68d2      	ldr	r2, [r2, #12]
 8045b36:	4311      	orrs	r1, r2
 8045b38:	687a      	ldr	r2, [r7, #4]
 8045b3a:	6812      	ldr	r2, [r2, #0]
 8045b3c:	430b      	orrs	r3, r1
 8045b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045b40:	687b      	ldr	r3, [r7, #4]
 8045b42:	681b      	ldr	r3, [r3, #0]
 8045b44:	68db      	ldr	r3, [r3, #12]
 8045b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045b4a:	687b      	ldr	r3, [r7, #4]
 8045b4c:	695a      	ldr	r2, [r3, #20]
 8045b4e:	687b      	ldr	r3, [r7, #4]
 8045b50:	699b      	ldr	r3, [r3, #24]
 8045b52:	431a      	orrs	r2, r3
 8045b54:	687b      	ldr	r3, [r7, #4]
 8045b56:	681b      	ldr	r3, [r3, #0]
 8045b58:	430a      	orrs	r2, r1
 8045b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045b5c:	687b      	ldr	r3, [r7, #4]
 8045b5e:	681b      	ldr	r3, [r3, #0]
 8045b60:	681a      	ldr	r2, [r3, #0]
 8045b62:	687b      	ldr	r3, [r7, #4]
 8045b64:	681b      	ldr	r3, [r3, #0]
 8045b66:	f042 0201 	orr.w	r2, r2, #1
 8045b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045b6c:	687b      	ldr	r3, [r7, #4]
 8045b6e:	2200      	movs	r2, #0
 8045b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8045b72:	687b      	ldr	r3, [r7, #4]
 8045b74:	2220      	movs	r2, #32
 8045b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8045b7a:	687b      	ldr	r3, [r7, #4]
 8045b7c:	2200      	movs	r2, #0
 8045b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045b80:	687b      	ldr	r3, [r7, #4]
 8045b82:	2200      	movs	r2, #0
 8045b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045b88:	2300      	movs	r3, #0
}
 8045b8a:	4618      	mov	r0, r3
 8045b8c:	3710      	adds	r7, #16
 8045b8e:	46bd      	mov	sp, r7
 8045b90:	bd80      	pop	{r7, pc}
 8045b92:	bf00      	nop
 8045b94:	000186a0 	.word	0x000186a0
 8045b98:	001e847f 	.word	0x001e847f
 8045b9c:	003d08ff 	.word	0x003d08ff
 8045ba0:	431bde83 	.word	0x431bde83
 8045ba4:	10624dd3 	.word	0x10624dd3

08045ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8045ba8:	b480      	push	{r7}
 8045baa:	b083      	sub	sp, #12
 8045bac:	af00      	add	r7, sp, #0
 8045bae:	6078      	str	r0, [r7, #4]
 8045bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045bb2:	687b      	ldr	r3, [r7, #4]
 8045bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045bb8:	b2db      	uxtb	r3, r3
 8045bba:	2b20      	cmp	r3, #32
 8045bbc:	d129      	bne.n	8045c12 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8045bbe:	687b      	ldr	r3, [r7, #4]
 8045bc0:	2224      	movs	r2, #36	; 0x24
 8045bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8045bc6:	687b      	ldr	r3, [r7, #4]
 8045bc8:	681b      	ldr	r3, [r3, #0]
 8045bca:	681a      	ldr	r2, [r3, #0]
 8045bcc:	687b      	ldr	r3, [r7, #4]
 8045bce:	681b      	ldr	r3, [r3, #0]
 8045bd0:	f022 0201 	bic.w	r2, r2, #1
 8045bd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8045bd6:	687b      	ldr	r3, [r7, #4]
 8045bd8:	681b      	ldr	r3, [r3, #0]
 8045bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045bdc:	687b      	ldr	r3, [r7, #4]
 8045bde:	681b      	ldr	r3, [r3, #0]
 8045be0:	f022 0210 	bic.w	r2, r2, #16
 8045be4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8045be6:	687b      	ldr	r3, [r7, #4]
 8045be8:	681b      	ldr	r3, [r3, #0]
 8045bea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8045bec:	687b      	ldr	r3, [r7, #4]
 8045bee:	681b      	ldr	r3, [r3, #0]
 8045bf0:	683a      	ldr	r2, [r7, #0]
 8045bf2:	430a      	orrs	r2, r1
 8045bf4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8045bf6:	687b      	ldr	r3, [r7, #4]
 8045bf8:	681b      	ldr	r3, [r3, #0]
 8045bfa:	681a      	ldr	r2, [r3, #0]
 8045bfc:	687b      	ldr	r3, [r7, #4]
 8045bfe:	681b      	ldr	r3, [r3, #0]
 8045c00:	f042 0201 	orr.w	r2, r2, #1
 8045c04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8045c06:	687b      	ldr	r3, [r7, #4]
 8045c08:	2220      	movs	r2, #32
 8045c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045c0e:	2300      	movs	r3, #0
 8045c10:	e000      	b.n	8045c14 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8045c12:	2302      	movs	r3, #2
  }
}
 8045c14:	4618      	mov	r0, r3
 8045c16:	370c      	adds	r7, #12
 8045c18:	46bd      	mov	sp, r7
 8045c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c1e:	4770      	bx	lr

08045c20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8045c20:	b480      	push	{r7}
 8045c22:	b085      	sub	sp, #20
 8045c24:	af00      	add	r7, sp, #0
 8045c26:	6078      	str	r0, [r7, #4]
 8045c28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8045c2a:	2300      	movs	r3, #0
 8045c2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045c2e:	687b      	ldr	r3, [r7, #4]
 8045c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045c34:	b2db      	uxtb	r3, r3
 8045c36:	2b20      	cmp	r3, #32
 8045c38:	d12a      	bne.n	8045c90 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8045c3a:	687b      	ldr	r3, [r7, #4]
 8045c3c:	2224      	movs	r2, #36	; 0x24
 8045c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8045c42:	687b      	ldr	r3, [r7, #4]
 8045c44:	681b      	ldr	r3, [r3, #0]
 8045c46:	681a      	ldr	r2, [r3, #0]
 8045c48:	687b      	ldr	r3, [r7, #4]
 8045c4a:	681b      	ldr	r3, [r3, #0]
 8045c4c:	f022 0201 	bic.w	r2, r2, #1
 8045c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8045c52:	687b      	ldr	r3, [r7, #4]
 8045c54:	681b      	ldr	r3, [r3, #0]
 8045c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045c58:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8045c5a:	89fb      	ldrh	r3, [r7, #14]
 8045c5c:	f023 030f 	bic.w	r3, r3, #15
 8045c60:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8045c62:	683b      	ldr	r3, [r7, #0]
 8045c64:	b29a      	uxth	r2, r3
 8045c66:	89fb      	ldrh	r3, [r7, #14]
 8045c68:	4313      	orrs	r3, r2
 8045c6a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8045c6c:	687b      	ldr	r3, [r7, #4]
 8045c6e:	681b      	ldr	r3, [r3, #0]
 8045c70:	89fa      	ldrh	r2, [r7, #14]
 8045c72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8045c74:	687b      	ldr	r3, [r7, #4]
 8045c76:	681b      	ldr	r3, [r3, #0]
 8045c78:	681a      	ldr	r2, [r3, #0]
 8045c7a:	687b      	ldr	r3, [r7, #4]
 8045c7c:	681b      	ldr	r3, [r3, #0]
 8045c7e:	f042 0201 	orr.w	r2, r2, #1
 8045c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8045c84:	687b      	ldr	r3, [r7, #4]
 8045c86:	2220      	movs	r2, #32
 8045c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8045c8c:	2300      	movs	r3, #0
 8045c8e:	e000      	b.n	8045c92 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8045c90:	2302      	movs	r3, #2
  }
}
 8045c92:	4618      	mov	r0, r3
 8045c94:	3714      	adds	r7, #20
 8045c96:	46bd      	mov	sp, r7
 8045c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045c9c:	4770      	bx	lr
	...

08045ca0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8045ca0:	b580      	push	{r7, lr}
 8045ca2:	b084      	sub	sp, #16
 8045ca4:	af00      	add	r7, sp, #0
 8045ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8045ca8:	687b      	ldr	r3, [r7, #4]
 8045caa:	2b00      	cmp	r3, #0
 8045cac:	d101      	bne.n	8045cb2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8045cae:	2301      	movs	r3, #1
 8045cb0:	e0bf      	b.n	8045e32 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8045cb2:	687b      	ldr	r3, [r7, #4]
 8045cb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8045cb8:	b2db      	uxtb	r3, r3
 8045cba:	2b00      	cmp	r3, #0
 8045cbc:	d106      	bne.n	8045ccc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8045cbe:	687b      	ldr	r3, [r7, #4]
 8045cc0:	2200      	movs	r2, #0
 8045cc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8045cc6:	6878      	ldr	r0, [r7, #4]
 8045cc8:	f7fb fa12 	bl	80410f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045ccc:	687b      	ldr	r3, [r7, #4]
 8045cce:	2202      	movs	r2, #2
 8045cd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8045cd4:	687b      	ldr	r3, [r7, #4]
 8045cd6:	681b      	ldr	r3, [r3, #0]
 8045cd8:	699a      	ldr	r2, [r3, #24]
 8045cda:	687b      	ldr	r3, [r7, #4]
 8045cdc:	681b      	ldr	r3, [r3, #0]
 8045cde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8045ce2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045ce4:	687b      	ldr	r3, [r7, #4]
 8045ce6:	681b      	ldr	r3, [r3, #0]
 8045ce8:	6999      	ldr	r1, [r3, #24]
 8045cea:	687b      	ldr	r3, [r7, #4]
 8045cec:	685a      	ldr	r2, [r3, #4]
 8045cee:	687b      	ldr	r3, [r7, #4]
 8045cf0:	689b      	ldr	r3, [r3, #8]
 8045cf2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045cf4:	687b      	ldr	r3, [r7, #4]
 8045cf6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045cf8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8045cfa:	687b      	ldr	r3, [r7, #4]
 8045cfc:	691b      	ldr	r3, [r3, #16]
 8045cfe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8045d00:	687b      	ldr	r3, [r7, #4]
 8045d02:	681b      	ldr	r3, [r3, #0]
 8045d04:	430a      	orrs	r2, r1
 8045d06:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8045d08:	687b      	ldr	r3, [r7, #4]
 8045d0a:	681b      	ldr	r3, [r3, #0]
 8045d0c:	6899      	ldr	r1, [r3, #8]
 8045d0e:	687b      	ldr	r3, [r7, #4]
 8045d10:	681a      	ldr	r2, [r3, #0]
 8045d12:	4b4a      	ldr	r3, [pc, #296]	; (8045e3c <HAL_LTDC_Init+0x19c>)
 8045d14:	400b      	ands	r3, r1
 8045d16:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8045d18:	687b      	ldr	r3, [r7, #4]
 8045d1a:	695b      	ldr	r3, [r3, #20]
 8045d1c:	041b      	lsls	r3, r3, #16
 8045d1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8045d20:	687b      	ldr	r3, [r7, #4]
 8045d22:	681b      	ldr	r3, [r3, #0]
 8045d24:	6899      	ldr	r1, [r3, #8]
 8045d26:	687b      	ldr	r3, [r7, #4]
 8045d28:	699a      	ldr	r2, [r3, #24]
 8045d2a:	68fb      	ldr	r3, [r7, #12]
 8045d2c:	431a      	orrs	r2, r3
 8045d2e:	687b      	ldr	r3, [r7, #4]
 8045d30:	681b      	ldr	r3, [r3, #0]
 8045d32:	430a      	orrs	r2, r1
 8045d34:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8045d36:	687b      	ldr	r3, [r7, #4]
 8045d38:	681b      	ldr	r3, [r3, #0]
 8045d3a:	68d9      	ldr	r1, [r3, #12]
 8045d3c:	687b      	ldr	r3, [r7, #4]
 8045d3e:	681a      	ldr	r2, [r3, #0]
 8045d40:	4b3e      	ldr	r3, [pc, #248]	; (8045e3c <HAL_LTDC_Init+0x19c>)
 8045d42:	400b      	ands	r3, r1
 8045d44:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8045d46:	687b      	ldr	r3, [r7, #4]
 8045d48:	69db      	ldr	r3, [r3, #28]
 8045d4a:	041b      	lsls	r3, r3, #16
 8045d4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8045d4e:	687b      	ldr	r3, [r7, #4]
 8045d50:	681b      	ldr	r3, [r3, #0]
 8045d52:	68d9      	ldr	r1, [r3, #12]
 8045d54:	687b      	ldr	r3, [r7, #4]
 8045d56:	6a1a      	ldr	r2, [r3, #32]
 8045d58:	68fb      	ldr	r3, [r7, #12]
 8045d5a:	431a      	orrs	r2, r3
 8045d5c:	687b      	ldr	r3, [r7, #4]
 8045d5e:	681b      	ldr	r3, [r3, #0]
 8045d60:	430a      	orrs	r2, r1
 8045d62:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8045d64:	687b      	ldr	r3, [r7, #4]
 8045d66:	681b      	ldr	r3, [r3, #0]
 8045d68:	6919      	ldr	r1, [r3, #16]
 8045d6a:	687b      	ldr	r3, [r7, #4]
 8045d6c:	681a      	ldr	r2, [r3, #0]
 8045d6e:	4b33      	ldr	r3, [pc, #204]	; (8045e3c <HAL_LTDC_Init+0x19c>)
 8045d70:	400b      	ands	r3, r1
 8045d72:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8045d74:	687b      	ldr	r3, [r7, #4]
 8045d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045d78:	041b      	lsls	r3, r3, #16
 8045d7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8045d7c:	687b      	ldr	r3, [r7, #4]
 8045d7e:	681b      	ldr	r3, [r3, #0]
 8045d80:	6919      	ldr	r1, [r3, #16]
 8045d82:	687b      	ldr	r3, [r7, #4]
 8045d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8045d86:	68fb      	ldr	r3, [r7, #12]
 8045d88:	431a      	orrs	r2, r3
 8045d8a:	687b      	ldr	r3, [r7, #4]
 8045d8c:	681b      	ldr	r3, [r3, #0]
 8045d8e:	430a      	orrs	r2, r1
 8045d90:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8045d92:	687b      	ldr	r3, [r7, #4]
 8045d94:	681b      	ldr	r3, [r3, #0]
 8045d96:	6959      	ldr	r1, [r3, #20]
 8045d98:	687b      	ldr	r3, [r7, #4]
 8045d9a:	681a      	ldr	r2, [r3, #0]
 8045d9c:	4b27      	ldr	r3, [pc, #156]	; (8045e3c <HAL_LTDC_Init+0x19c>)
 8045d9e:	400b      	ands	r3, r1
 8045da0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8045da2:	687b      	ldr	r3, [r7, #4]
 8045da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045da6:	041b      	lsls	r3, r3, #16
 8045da8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8045daa:	687b      	ldr	r3, [r7, #4]
 8045dac:	681b      	ldr	r3, [r3, #0]
 8045dae:	6959      	ldr	r1, [r3, #20]
 8045db0:	687b      	ldr	r3, [r7, #4]
 8045db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8045db4:	68fb      	ldr	r3, [r7, #12]
 8045db6:	431a      	orrs	r2, r3
 8045db8:	687b      	ldr	r3, [r7, #4]
 8045dba:	681b      	ldr	r3, [r3, #0]
 8045dbc:	430a      	orrs	r2, r1
 8045dbe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8045dc0:	687b      	ldr	r3, [r7, #4]
 8045dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8045dc6:	021b      	lsls	r3, r3, #8
 8045dc8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8045dca:	687b      	ldr	r3, [r7, #4]
 8045dcc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8045dd0:	041b      	lsls	r3, r3, #16
 8045dd2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8045dd4:	687b      	ldr	r3, [r7, #4]
 8045dd6:	681b      	ldr	r3, [r3, #0]
 8045dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8045dda:	687b      	ldr	r3, [r7, #4]
 8045ddc:	681b      	ldr	r3, [r3, #0]
 8045dde:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8045de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8045de4:	687b      	ldr	r3, [r7, #4]
 8045de6:	681b      	ldr	r3, [r3, #0]
 8045de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8045dea:	68ba      	ldr	r2, [r7, #8]
 8045dec:	68fb      	ldr	r3, [r7, #12]
 8045dee:	4313      	orrs	r3, r2
 8045df0:	687a      	ldr	r2, [r7, #4]
 8045df2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8045df6:	431a      	orrs	r2, r3
 8045df8:	687b      	ldr	r3, [r7, #4]
 8045dfa:	681b      	ldr	r3, [r3, #0]
 8045dfc:	430a      	orrs	r2, r1
 8045dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8045e00:	687b      	ldr	r3, [r7, #4]
 8045e02:	681b      	ldr	r3, [r3, #0]
 8045e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045e06:	687b      	ldr	r3, [r7, #4]
 8045e08:	681b      	ldr	r3, [r3, #0]
 8045e0a:	f042 0206 	orr.w	r2, r2, #6
 8045e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8045e10:	687b      	ldr	r3, [r7, #4]
 8045e12:	681b      	ldr	r3, [r3, #0]
 8045e14:	699a      	ldr	r2, [r3, #24]
 8045e16:	687b      	ldr	r3, [r7, #4]
 8045e18:	681b      	ldr	r3, [r3, #0]
 8045e1a:	f042 0201 	orr.w	r2, r2, #1
 8045e1e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8045e20:	687b      	ldr	r3, [r7, #4]
 8045e22:	2200      	movs	r2, #0
 8045e24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8045e28:	687b      	ldr	r3, [r7, #4]
 8045e2a:	2201      	movs	r2, #1
 8045e2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8045e30:	2300      	movs	r3, #0
}
 8045e32:	4618      	mov	r0, r3
 8045e34:	3710      	adds	r7, #16
 8045e36:	46bd      	mov	sp, r7
 8045e38:	bd80      	pop	{r7, pc}
 8045e3a:	bf00      	nop
 8045e3c:	f000f800 	.word	0xf000f800

08045e40 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8045e40:	b580      	push	{r7, lr}
 8045e42:	b084      	sub	sp, #16
 8045e44:	af00      	add	r7, sp, #0
 8045e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8045e48:	687b      	ldr	r3, [r7, #4]
 8045e4a:	681b      	ldr	r3, [r3, #0]
 8045e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8045e50:	687b      	ldr	r3, [r7, #4]
 8045e52:	681b      	ldr	r3, [r3, #0]
 8045e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045e56:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8045e58:	68fb      	ldr	r3, [r7, #12]
 8045e5a:	f003 0304 	and.w	r3, r3, #4
 8045e5e:	2b00      	cmp	r3, #0
 8045e60:	d023      	beq.n	8045eaa <HAL_LTDC_IRQHandler+0x6a>
 8045e62:	68bb      	ldr	r3, [r7, #8]
 8045e64:	f003 0304 	and.w	r3, r3, #4
 8045e68:	2b00      	cmp	r3, #0
 8045e6a:	d01e      	beq.n	8045eaa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8045e6c:	687b      	ldr	r3, [r7, #4]
 8045e6e:	681b      	ldr	r3, [r3, #0]
 8045e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045e72:	687b      	ldr	r3, [r7, #4]
 8045e74:	681b      	ldr	r3, [r3, #0]
 8045e76:	f022 0204 	bic.w	r2, r2, #4
 8045e7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8045e7c:	687b      	ldr	r3, [r7, #4]
 8045e7e:	681b      	ldr	r3, [r3, #0]
 8045e80:	2204      	movs	r2, #4
 8045e82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8045e84:	687b      	ldr	r3, [r7, #4]
 8045e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045e8a:	f043 0201 	orr.w	r2, r3, #1
 8045e8e:	687b      	ldr	r3, [r7, #4]
 8045e90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045e94:	687b      	ldr	r3, [r7, #4]
 8045e96:	2204      	movs	r2, #4
 8045e98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045e9c:	687b      	ldr	r3, [r7, #4]
 8045e9e:	2200      	movs	r2, #0
 8045ea0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045ea4:	6878      	ldr	r0, [r7, #4]
 8045ea6:	f000 f86f 	bl	8045f88 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8045eaa:	68fb      	ldr	r3, [r7, #12]
 8045eac:	f003 0302 	and.w	r3, r3, #2
 8045eb0:	2b00      	cmp	r3, #0
 8045eb2:	d023      	beq.n	8045efc <HAL_LTDC_IRQHandler+0xbc>
 8045eb4:	68bb      	ldr	r3, [r7, #8]
 8045eb6:	f003 0302 	and.w	r3, r3, #2
 8045eba:	2b00      	cmp	r3, #0
 8045ebc:	d01e      	beq.n	8045efc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8045ebe:	687b      	ldr	r3, [r7, #4]
 8045ec0:	681b      	ldr	r3, [r3, #0]
 8045ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045ec4:	687b      	ldr	r3, [r7, #4]
 8045ec6:	681b      	ldr	r3, [r3, #0]
 8045ec8:	f022 0202 	bic.w	r2, r2, #2
 8045ecc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8045ece:	687b      	ldr	r3, [r7, #4]
 8045ed0:	681b      	ldr	r3, [r3, #0]
 8045ed2:	2202      	movs	r2, #2
 8045ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8045ed6:	687b      	ldr	r3, [r7, #4]
 8045ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8045edc:	f043 0202 	orr.w	r2, r3, #2
 8045ee0:	687b      	ldr	r3, [r7, #4]
 8045ee2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8045ee6:	687b      	ldr	r3, [r7, #4]
 8045ee8:	2204      	movs	r2, #4
 8045eea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045eee:	687b      	ldr	r3, [r7, #4]
 8045ef0:	2200      	movs	r2, #0
 8045ef2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8045ef6:	6878      	ldr	r0, [r7, #4]
 8045ef8:	f000 f846 	bl	8045f88 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8045efc:	68fb      	ldr	r3, [r7, #12]
 8045efe:	f003 0301 	and.w	r3, r3, #1
 8045f02:	2b00      	cmp	r3, #0
 8045f04:	d01b      	beq.n	8045f3e <HAL_LTDC_IRQHandler+0xfe>
 8045f06:	68bb      	ldr	r3, [r7, #8]
 8045f08:	f003 0301 	and.w	r3, r3, #1
 8045f0c:	2b00      	cmp	r3, #0
 8045f0e:	d016      	beq.n	8045f3e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8045f10:	687b      	ldr	r3, [r7, #4]
 8045f12:	681b      	ldr	r3, [r3, #0]
 8045f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045f16:	687b      	ldr	r3, [r7, #4]
 8045f18:	681b      	ldr	r3, [r3, #0]
 8045f1a:	f022 0201 	bic.w	r2, r2, #1
 8045f1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8045f20:	687b      	ldr	r3, [r7, #4]
 8045f22:	681b      	ldr	r3, [r3, #0]
 8045f24:	2201      	movs	r2, #1
 8045f26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045f28:	687b      	ldr	r3, [r7, #4]
 8045f2a:	2201      	movs	r2, #1
 8045f2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045f30:	687b      	ldr	r3, [r7, #4]
 8045f32:	2200      	movs	r2, #0
 8045f34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8045f38:	6878      	ldr	r0, [r7, #4]
 8045f3a:	f000 f82f 	bl	8045f9c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8045f3e:	68fb      	ldr	r3, [r7, #12]
 8045f40:	f003 0308 	and.w	r3, r3, #8
 8045f44:	2b00      	cmp	r3, #0
 8045f46:	d01b      	beq.n	8045f80 <HAL_LTDC_IRQHandler+0x140>
 8045f48:	68bb      	ldr	r3, [r7, #8]
 8045f4a:	f003 0308 	and.w	r3, r3, #8
 8045f4e:	2b00      	cmp	r3, #0
 8045f50:	d016      	beq.n	8045f80 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8045f52:	687b      	ldr	r3, [r7, #4]
 8045f54:	681b      	ldr	r3, [r3, #0]
 8045f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8045f58:	687b      	ldr	r3, [r7, #4]
 8045f5a:	681b      	ldr	r3, [r3, #0]
 8045f5c:	f022 0208 	bic.w	r2, r2, #8
 8045f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8045f62:	687b      	ldr	r3, [r7, #4]
 8045f64:	681b      	ldr	r3, [r3, #0]
 8045f66:	2208      	movs	r2, #8
 8045f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8045f6a:	687b      	ldr	r3, [r7, #4]
 8045f6c:	2201      	movs	r2, #1
 8045f6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8045f72:	687b      	ldr	r3, [r7, #4]
 8045f74:	2200      	movs	r2, #0
 8045f76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8045f7a:	6878      	ldr	r0, [r7, #4]
 8045f7c:	f000 f818 	bl	8045fb0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8045f80:	bf00      	nop
 8045f82:	3710      	adds	r7, #16
 8045f84:	46bd      	mov	sp, r7
 8045f86:	bd80      	pop	{r7, pc}

08045f88 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8045f88:	b480      	push	{r7}
 8045f8a:	b083      	sub	sp, #12
 8045f8c:	af00      	add	r7, sp, #0
 8045f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8045f90:	bf00      	nop
 8045f92:	370c      	adds	r7, #12
 8045f94:	46bd      	mov	sp, r7
 8045f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f9a:	4770      	bx	lr

08045f9c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045f9c:	b480      	push	{r7}
 8045f9e:	b083      	sub	sp, #12
 8045fa0:	af00      	add	r7, sp, #0
 8045fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8045fa4:	bf00      	nop
 8045fa6:	370c      	adds	r7, #12
 8045fa8:	46bd      	mov	sp, r7
 8045faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045fae:	4770      	bx	lr

08045fb0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8045fb0:	b480      	push	{r7}
 8045fb2:	b083      	sub	sp, #12
 8045fb4:	af00      	add	r7, sp, #0
 8045fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8045fb8:	bf00      	nop
 8045fba:	370c      	adds	r7, #12
 8045fbc:	46bd      	mov	sp, r7
 8045fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045fc2:	4770      	bx	lr

08045fc4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8045fc4:	b5b0      	push	{r4, r5, r7, lr}
 8045fc6:	b084      	sub	sp, #16
 8045fc8:	af00      	add	r7, sp, #0
 8045fca:	60f8      	str	r0, [r7, #12]
 8045fcc:	60b9      	str	r1, [r7, #8]
 8045fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8045fd0:	68fb      	ldr	r3, [r7, #12]
 8045fd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8045fd6:	2b01      	cmp	r3, #1
 8045fd8:	d101      	bne.n	8045fde <HAL_LTDC_ConfigLayer+0x1a>
 8045fda:	2302      	movs	r3, #2
 8045fdc:	e02c      	b.n	8046038 <HAL_LTDC_ConfigLayer+0x74>
 8045fde:	68fb      	ldr	r3, [r7, #12]
 8045fe0:	2201      	movs	r2, #1
 8045fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8045fe6:	68fb      	ldr	r3, [r7, #12]
 8045fe8:	2202      	movs	r2, #2
 8045fea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8045fee:	68fa      	ldr	r2, [r7, #12]
 8045ff0:	687b      	ldr	r3, [r7, #4]
 8045ff2:	2134      	movs	r1, #52	; 0x34
 8045ff4:	fb01 f303 	mul.w	r3, r1, r3
 8045ff8:	4413      	add	r3, r2
 8045ffa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8045ffe:	68bb      	ldr	r3, [r7, #8]
 8046000:	4614      	mov	r4, r2
 8046002:	461d      	mov	r5, r3
 8046004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8046006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804600a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804600c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804600e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8046010:	682b      	ldr	r3, [r5, #0]
 8046012:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8046014:	687a      	ldr	r2, [r7, #4]
 8046016:	68b9      	ldr	r1, [r7, #8]
 8046018:	68f8      	ldr	r0, [r7, #12]
 804601a:	f000 f8b9 	bl	8046190 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 804601e:	68fb      	ldr	r3, [r7, #12]
 8046020:	681b      	ldr	r3, [r3, #0]
 8046022:	2201      	movs	r2, #1
 8046024:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8046026:	68fb      	ldr	r3, [r7, #12]
 8046028:	2201      	movs	r2, #1
 804602a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 804602e:	68fb      	ldr	r3, [r7, #12]
 8046030:	2200      	movs	r2, #0
 8046032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046036:	2300      	movs	r3, #0
}
 8046038:	4618      	mov	r0, r3
 804603a:	3710      	adds	r7, #16
 804603c:	46bd      	mov	sp, r7
 804603e:	bdb0      	pop	{r4, r5, r7, pc}

08046040 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8046040:	b480      	push	{r7}
 8046042:	b085      	sub	sp, #20
 8046044:	af00      	add	r7, sp, #0
 8046046:	60f8      	str	r0, [r7, #12]
 8046048:	60b9      	str	r1, [r7, #8]
 804604a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 804604c:	68fb      	ldr	r3, [r7, #12]
 804604e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046052:	2b01      	cmp	r3, #1
 8046054:	d101      	bne.n	804605a <HAL_LTDC_ConfigColorKeying+0x1a>
 8046056:	2302      	movs	r3, #2
 8046058:	e030      	b.n	80460bc <HAL_LTDC_ConfigColorKeying+0x7c>
 804605a:	68fb      	ldr	r3, [r7, #12]
 804605c:	2201      	movs	r2, #1
 804605e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046062:	68fb      	ldr	r3, [r7, #12]
 8046064:	2202      	movs	r2, #2
 8046066:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 804606a:	68fb      	ldr	r3, [r7, #12]
 804606c:	681b      	ldr	r3, [r3, #0]
 804606e:	461a      	mov	r2, r3
 8046070:	687b      	ldr	r3, [r7, #4]
 8046072:	01db      	lsls	r3, r3, #7
 8046074:	4413      	add	r3, r2
 8046076:	3384      	adds	r3, #132	; 0x84
 8046078:	68db      	ldr	r3, [r3, #12]
 804607a:	68fa      	ldr	r2, [r7, #12]
 804607c:	6812      	ldr	r2, [r2, #0]
 804607e:	4611      	mov	r1, r2
 8046080:	687a      	ldr	r2, [r7, #4]
 8046082:	01d2      	lsls	r2, r2, #7
 8046084:	440a      	add	r2, r1
 8046086:	3284      	adds	r2, #132	; 0x84
 8046088:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 804608c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 804608e:	68fb      	ldr	r3, [r7, #12]
 8046090:	681b      	ldr	r3, [r3, #0]
 8046092:	461a      	mov	r2, r3
 8046094:	687b      	ldr	r3, [r7, #4]
 8046096:	01db      	lsls	r3, r3, #7
 8046098:	4413      	add	r3, r2
 804609a:	3384      	adds	r3, #132	; 0x84
 804609c:	461a      	mov	r2, r3
 804609e:	68bb      	ldr	r3, [r7, #8]
 80460a0:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80460a2:	68fb      	ldr	r3, [r7, #12]
 80460a4:	681b      	ldr	r3, [r3, #0]
 80460a6:	2201      	movs	r2, #1
 80460a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80460aa:	68fb      	ldr	r3, [r7, #12]
 80460ac:	2201      	movs	r2, #1
 80460ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80460b2:	68fb      	ldr	r3, [r7, #12]
 80460b4:	2200      	movs	r2, #0
 80460b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80460ba:	2300      	movs	r3, #0
}
 80460bc:	4618      	mov	r0, r3
 80460be:	3714      	adds	r7, #20
 80460c0:	46bd      	mov	sp, r7
 80460c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460c6:	4770      	bx	lr

080460c8 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80460c8:	b480      	push	{r7}
 80460ca:	b083      	sub	sp, #12
 80460cc:	af00      	add	r7, sp, #0
 80460ce:	6078      	str	r0, [r7, #4]
 80460d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80460d2:	687b      	ldr	r3, [r7, #4]
 80460d4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80460d8:	2b01      	cmp	r3, #1
 80460da:	d101      	bne.n	80460e0 <HAL_LTDC_EnableColorKeying+0x18>
 80460dc:	2302      	movs	r3, #2
 80460de:	e026      	b.n	804612e <HAL_LTDC_EnableColorKeying+0x66>
 80460e0:	687b      	ldr	r3, [r7, #4]
 80460e2:	2201      	movs	r2, #1
 80460e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80460e8:	687b      	ldr	r3, [r7, #4]
 80460ea:	2202      	movs	r2, #2
 80460ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80460f0:	687b      	ldr	r3, [r7, #4]
 80460f2:	681b      	ldr	r3, [r3, #0]
 80460f4:	461a      	mov	r2, r3
 80460f6:	683b      	ldr	r3, [r7, #0]
 80460f8:	01db      	lsls	r3, r3, #7
 80460fa:	4413      	add	r3, r2
 80460fc:	3384      	adds	r3, #132	; 0x84
 80460fe:	681b      	ldr	r3, [r3, #0]
 8046100:	687a      	ldr	r2, [r7, #4]
 8046102:	6812      	ldr	r2, [r2, #0]
 8046104:	4611      	mov	r1, r2
 8046106:	683a      	ldr	r2, [r7, #0]
 8046108:	01d2      	lsls	r2, r2, #7
 804610a:	440a      	add	r2, r1
 804610c:	3284      	adds	r2, #132	; 0x84
 804610e:	f043 0302 	orr.w	r3, r3, #2
 8046112:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046114:	687b      	ldr	r3, [r7, #4]
 8046116:	681b      	ldr	r3, [r3, #0]
 8046118:	2201      	movs	r2, #1
 804611a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804611c:	687b      	ldr	r3, [r7, #4]
 804611e:	2201      	movs	r2, #1
 8046120:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046124:	687b      	ldr	r3, [r7, #4]
 8046126:	2200      	movs	r2, #0
 8046128:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804612c:	2300      	movs	r3, #0
}
 804612e:	4618      	mov	r0, r3
 8046130:	370c      	adds	r7, #12
 8046132:	46bd      	mov	sp, r7
 8046134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046138:	4770      	bx	lr
	...

0804613c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 804613c:	b480      	push	{r7}
 804613e:	b083      	sub	sp, #12
 8046140:	af00      	add	r7, sp, #0
 8046142:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8046144:	687b      	ldr	r3, [r7, #4]
 8046146:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 804614a:	2b01      	cmp	r3, #1
 804614c:	d101      	bne.n	8046152 <HAL_LTDC_EnableDither+0x16>
 804614e:	2302      	movs	r3, #2
 8046150:	e016      	b.n	8046180 <HAL_LTDC_EnableDither+0x44>
 8046152:	687b      	ldr	r3, [r7, #4]
 8046154:	2201      	movs	r2, #1
 8046156:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 804615a:	687b      	ldr	r3, [r7, #4]
 804615c:	2202      	movs	r2, #2
 804615e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8046162:	4b0a      	ldr	r3, [pc, #40]	; (804618c <HAL_LTDC_EnableDither+0x50>)
 8046164:	699b      	ldr	r3, [r3, #24]
 8046166:	4a09      	ldr	r2, [pc, #36]	; (804618c <HAL_LTDC_EnableDither+0x50>)
 8046168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804616c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804616e:	687b      	ldr	r3, [r7, #4]
 8046170:	2201      	movs	r2, #1
 8046172:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046176:	687b      	ldr	r3, [r7, #4]
 8046178:	2200      	movs	r2, #0
 804617a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804617e:	2300      	movs	r3, #0
}
 8046180:	4618      	mov	r0, r3
 8046182:	370c      	adds	r7, #12
 8046184:	46bd      	mov	sp, r7
 8046186:	f85d 7b04 	ldr.w	r7, [sp], #4
 804618a:	4770      	bx	lr
 804618c:	40016800 	.word	0x40016800

08046190 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046190:	b480      	push	{r7}
 8046192:	b089      	sub	sp, #36	; 0x24
 8046194:	af00      	add	r7, sp, #0
 8046196:	60f8      	str	r0, [r7, #12]
 8046198:	60b9      	str	r1, [r7, #8]
 804619a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 804619c:	68bb      	ldr	r3, [r7, #8]
 804619e:	685a      	ldr	r2, [r3, #4]
 80461a0:	68fb      	ldr	r3, [r7, #12]
 80461a2:	681b      	ldr	r3, [r3, #0]
 80461a4:	68db      	ldr	r3, [r3, #12]
 80461a6:	0c1b      	lsrs	r3, r3, #16
 80461a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80461ac:	4413      	add	r3, r2
 80461ae:	041b      	lsls	r3, r3, #16
 80461b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80461b2:	68fb      	ldr	r3, [r7, #12]
 80461b4:	681b      	ldr	r3, [r3, #0]
 80461b6:	461a      	mov	r2, r3
 80461b8:	687b      	ldr	r3, [r7, #4]
 80461ba:	01db      	lsls	r3, r3, #7
 80461bc:	4413      	add	r3, r2
 80461be:	3384      	adds	r3, #132	; 0x84
 80461c0:	685b      	ldr	r3, [r3, #4]
 80461c2:	68fa      	ldr	r2, [r7, #12]
 80461c4:	6812      	ldr	r2, [r2, #0]
 80461c6:	4611      	mov	r1, r2
 80461c8:	687a      	ldr	r2, [r7, #4]
 80461ca:	01d2      	lsls	r2, r2, #7
 80461cc:	440a      	add	r2, r1
 80461ce:	3284      	adds	r2, #132	; 0x84
 80461d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80461d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80461d6:	68bb      	ldr	r3, [r7, #8]
 80461d8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80461da:	68fb      	ldr	r3, [r7, #12]
 80461dc:	681b      	ldr	r3, [r3, #0]
 80461de:	68db      	ldr	r3, [r3, #12]
 80461e0:	0c1b      	lsrs	r3, r3, #16
 80461e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80461e6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80461e8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80461ea:	68fb      	ldr	r3, [r7, #12]
 80461ec:	681b      	ldr	r3, [r3, #0]
 80461ee:	4619      	mov	r1, r3
 80461f0:	687b      	ldr	r3, [r7, #4]
 80461f2:	01db      	lsls	r3, r3, #7
 80461f4:	440b      	add	r3, r1
 80461f6:	3384      	adds	r3, #132	; 0x84
 80461f8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80461fa:	69fb      	ldr	r3, [r7, #28]
 80461fc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80461fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8046200:	68bb      	ldr	r3, [r7, #8]
 8046202:	68da      	ldr	r2, [r3, #12]
 8046204:	68fb      	ldr	r3, [r7, #12]
 8046206:	681b      	ldr	r3, [r3, #0]
 8046208:	68db      	ldr	r3, [r3, #12]
 804620a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804620e:	4413      	add	r3, r2
 8046210:	041b      	lsls	r3, r3, #16
 8046212:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8046214:	68fb      	ldr	r3, [r7, #12]
 8046216:	681b      	ldr	r3, [r3, #0]
 8046218:	461a      	mov	r2, r3
 804621a:	687b      	ldr	r3, [r7, #4]
 804621c:	01db      	lsls	r3, r3, #7
 804621e:	4413      	add	r3, r2
 8046220:	3384      	adds	r3, #132	; 0x84
 8046222:	689b      	ldr	r3, [r3, #8]
 8046224:	68fa      	ldr	r2, [r7, #12]
 8046226:	6812      	ldr	r2, [r2, #0]
 8046228:	4611      	mov	r1, r2
 804622a:	687a      	ldr	r2, [r7, #4]
 804622c:	01d2      	lsls	r2, r2, #7
 804622e:	440a      	add	r2, r1
 8046230:	3284      	adds	r2, #132	; 0x84
 8046232:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046236:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8046238:	68bb      	ldr	r3, [r7, #8]
 804623a:	689a      	ldr	r2, [r3, #8]
 804623c:	68fb      	ldr	r3, [r7, #12]
 804623e:	681b      	ldr	r3, [r3, #0]
 8046240:	68db      	ldr	r3, [r3, #12]
 8046242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8046246:	4413      	add	r3, r2
 8046248:	1c5a      	adds	r2, r3, #1
 804624a:	68fb      	ldr	r3, [r7, #12]
 804624c:	681b      	ldr	r3, [r3, #0]
 804624e:	4619      	mov	r1, r3
 8046250:	687b      	ldr	r3, [r7, #4]
 8046252:	01db      	lsls	r3, r3, #7
 8046254:	440b      	add	r3, r1
 8046256:	3384      	adds	r3, #132	; 0x84
 8046258:	4619      	mov	r1, r3
 804625a:	69fb      	ldr	r3, [r7, #28]
 804625c:	4313      	orrs	r3, r2
 804625e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8046260:	68fb      	ldr	r3, [r7, #12]
 8046262:	681b      	ldr	r3, [r3, #0]
 8046264:	461a      	mov	r2, r3
 8046266:	687b      	ldr	r3, [r7, #4]
 8046268:	01db      	lsls	r3, r3, #7
 804626a:	4413      	add	r3, r2
 804626c:	3384      	adds	r3, #132	; 0x84
 804626e:	691b      	ldr	r3, [r3, #16]
 8046270:	68fa      	ldr	r2, [r7, #12]
 8046272:	6812      	ldr	r2, [r2, #0]
 8046274:	4611      	mov	r1, r2
 8046276:	687a      	ldr	r2, [r7, #4]
 8046278:	01d2      	lsls	r2, r2, #7
 804627a:	440a      	add	r2, r1
 804627c:	3284      	adds	r2, #132	; 0x84
 804627e:	f023 0307 	bic.w	r3, r3, #7
 8046282:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8046284:	68fb      	ldr	r3, [r7, #12]
 8046286:	681b      	ldr	r3, [r3, #0]
 8046288:	461a      	mov	r2, r3
 804628a:	687b      	ldr	r3, [r7, #4]
 804628c:	01db      	lsls	r3, r3, #7
 804628e:	4413      	add	r3, r2
 8046290:	3384      	adds	r3, #132	; 0x84
 8046292:	461a      	mov	r2, r3
 8046294:	68bb      	ldr	r3, [r7, #8]
 8046296:	691b      	ldr	r3, [r3, #16]
 8046298:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 804629a:	68bb      	ldr	r3, [r7, #8]
 804629c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80462a0:	021b      	lsls	r3, r3, #8
 80462a2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80462a4:	68bb      	ldr	r3, [r7, #8]
 80462a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80462aa:	041b      	lsls	r3, r3, #16
 80462ac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80462ae:	68bb      	ldr	r3, [r7, #8]
 80462b0:	699b      	ldr	r3, [r3, #24]
 80462b2:	061b      	lsls	r3, r3, #24
 80462b4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80462b6:	68fb      	ldr	r3, [r7, #12]
 80462b8:	681b      	ldr	r3, [r3, #0]
 80462ba:	461a      	mov	r2, r3
 80462bc:	687b      	ldr	r3, [r7, #4]
 80462be:	01db      	lsls	r3, r3, #7
 80462c0:	4413      	add	r3, r2
 80462c2:	3384      	adds	r3, #132	; 0x84
 80462c4:	699b      	ldr	r3, [r3, #24]
 80462c6:	68fb      	ldr	r3, [r7, #12]
 80462c8:	681b      	ldr	r3, [r3, #0]
 80462ca:	461a      	mov	r2, r3
 80462cc:	687b      	ldr	r3, [r7, #4]
 80462ce:	01db      	lsls	r3, r3, #7
 80462d0:	4413      	add	r3, r2
 80462d2:	3384      	adds	r3, #132	; 0x84
 80462d4:	461a      	mov	r2, r3
 80462d6:	2300      	movs	r3, #0
 80462d8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80462da:	68bb      	ldr	r3, [r7, #8]
 80462dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80462e0:	461a      	mov	r2, r3
 80462e2:	69fb      	ldr	r3, [r7, #28]
 80462e4:	431a      	orrs	r2, r3
 80462e6:	69bb      	ldr	r3, [r7, #24]
 80462e8:	431a      	orrs	r2, r3
 80462ea:	68fb      	ldr	r3, [r7, #12]
 80462ec:	681b      	ldr	r3, [r3, #0]
 80462ee:	4619      	mov	r1, r3
 80462f0:	687b      	ldr	r3, [r7, #4]
 80462f2:	01db      	lsls	r3, r3, #7
 80462f4:	440b      	add	r3, r1
 80462f6:	3384      	adds	r3, #132	; 0x84
 80462f8:	4619      	mov	r1, r3
 80462fa:	697b      	ldr	r3, [r7, #20]
 80462fc:	4313      	orrs	r3, r2
 80462fe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8046300:	68fb      	ldr	r3, [r7, #12]
 8046302:	681b      	ldr	r3, [r3, #0]
 8046304:	461a      	mov	r2, r3
 8046306:	687b      	ldr	r3, [r7, #4]
 8046308:	01db      	lsls	r3, r3, #7
 804630a:	4413      	add	r3, r2
 804630c:	3384      	adds	r3, #132	; 0x84
 804630e:	695b      	ldr	r3, [r3, #20]
 8046310:	68fa      	ldr	r2, [r7, #12]
 8046312:	6812      	ldr	r2, [r2, #0]
 8046314:	4611      	mov	r1, r2
 8046316:	687a      	ldr	r2, [r7, #4]
 8046318:	01d2      	lsls	r2, r2, #7
 804631a:	440a      	add	r2, r1
 804631c:	3284      	adds	r2, #132	; 0x84
 804631e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8046322:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8046324:	68fb      	ldr	r3, [r7, #12]
 8046326:	681b      	ldr	r3, [r3, #0]
 8046328:	461a      	mov	r2, r3
 804632a:	687b      	ldr	r3, [r7, #4]
 804632c:	01db      	lsls	r3, r3, #7
 804632e:	4413      	add	r3, r2
 8046330:	3384      	adds	r3, #132	; 0x84
 8046332:	461a      	mov	r2, r3
 8046334:	68bb      	ldr	r3, [r7, #8]
 8046336:	695b      	ldr	r3, [r3, #20]
 8046338:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 804633a:	68fb      	ldr	r3, [r7, #12]
 804633c:	681b      	ldr	r3, [r3, #0]
 804633e:	461a      	mov	r2, r3
 8046340:	687b      	ldr	r3, [r7, #4]
 8046342:	01db      	lsls	r3, r3, #7
 8046344:	4413      	add	r3, r2
 8046346:	3384      	adds	r3, #132	; 0x84
 8046348:	69db      	ldr	r3, [r3, #28]
 804634a:	68fa      	ldr	r2, [r7, #12]
 804634c:	6812      	ldr	r2, [r2, #0]
 804634e:	4611      	mov	r1, r2
 8046350:	687a      	ldr	r2, [r7, #4]
 8046352:	01d2      	lsls	r2, r2, #7
 8046354:	440a      	add	r2, r1
 8046356:	3284      	adds	r2, #132	; 0x84
 8046358:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 804635c:	f023 0307 	bic.w	r3, r3, #7
 8046360:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8046362:	68bb      	ldr	r3, [r7, #8]
 8046364:	69da      	ldr	r2, [r3, #28]
 8046366:	68bb      	ldr	r3, [r7, #8]
 8046368:	6a1b      	ldr	r3, [r3, #32]
 804636a:	68f9      	ldr	r1, [r7, #12]
 804636c:	6809      	ldr	r1, [r1, #0]
 804636e:	4608      	mov	r0, r1
 8046370:	6879      	ldr	r1, [r7, #4]
 8046372:	01c9      	lsls	r1, r1, #7
 8046374:	4401      	add	r1, r0
 8046376:	3184      	adds	r1, #132	; 0x84
 8046378:	4313      	orrs	r3, r2
 804637a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 804637c:	68fb      	ldr	r3, [r7, #12]
 804637e:	681b      	ldr	r3, [r3, #0]
 8046380:	461a      	mov	r2, r3
 8046382:	687b      	ldr	r3, [r7, #4]
 8046384:	01db      	lsls	r3, r3, #7
 8046386:	4413      	add	r3, r2
 8046388:	3384      	adds	r3, #132	; 0x84
 804638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804638c:	68fb      	ldr	r3, [r7, #12]
 804638e:	681b      	ldr	r3, [r3, #0]
 8046390:	461a      	mov	r2, r3
 8046392:	687b      	ldr	r3, [r7, #4]
 8046394:	01db      	lsls	r3, r3, #7
 8046396:	4413      	add	r3, r2
 8046398:	3384      	adds	r3, #132	; 0x84
 804639a:	461a      	mov	r2, r3
 804639c:	2300      	movs	r3, #0
 804639e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80463a0:	68fb      	ldr	r3, [r7, #12]
 80463a2:	681b      	ldr	r3, [r3, #0]
 80463a4:	461a      	mov	r2, r3
 80463a6:	687b      	ldr	r3, [r7, #4]
 80463a8:	01db      	lsls	r3, r3, #7
 80463aa:	4413      	add	r3, r2
 80463ac:	3384      	adds	r3, #132	; 0x84
 80463ae:	461a      	mov	r2, r3
 80463b0:	68bb      	ldr	r3, [r7, #8]
 80463b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80463b4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80463b6:	68bb      	ldr	r3, [r7, #8]
 80463b8:	691b      	ldr	r3, [r3, #16]
 80463ba:	2b00      	cmp	r3, #0
 80463bc:	d102      	bne.n	80463c4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80463be:	2304      	movs	r3, #4
 80463c0:	61fb      	str	r3, [r7, #28]
 80463c2:	e01b      	b.n	80463fc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80463c4:	68bb      	ldr	r3, [r7, #8]
 80463c6:	691b      	ldr	r3, [r3, #16]
 80463c8:	2b01      	cmp	r3, #1
 80463ca:	d102      	bne.n	80463d2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80463cc:	2303      	movs	r3, #3
 80463ce:	61fb      	str	r3, [r7, #28]
 80463d0:	e014      	b.n	80463fc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80463d2:	68bb      	ldr	r3, [r7, #8]
 80463d4:	691b      	ldr	r3, [r3, #16]
 80463d6:	2b04      	cmp	r3, #4
 80463d8:	d00b      	beq.n	80463f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80463da:	68bb      	ldr	r3, [r7, #8]
 80463dc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80463de:	2b02      	cmp	r3, #2
 80463e0:	d007      	beq.n	80463f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80463e2:	68bb      	ldr	r3, [r7, #8]
 80463e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80463e6:	2b03      	cmp	r3, #3
 80463e8:	d003      	beq.n	80463f2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80463ea:	68bb      	ldr	r3, [r7, #8]
 80463ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80463ee:	2b07      	cmp	r3, #7
 80463f0:	d102      	bne.n	80463f8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80463f2:	2302      	movs	r3, #2
 80463f4:	61fb      	str	r3, [r7, #28]
 80463f6:	e001      	b.n	80463fc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80463f8:	2301      	movs	r3, #1
 80463fa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80463fc:	68fb      	ldr	r3, [r7, #12]
 80463fe:	681b      	ldr	r3, [r3, #0]
 8046400:	461a      	mov	r2, r3
 8046402:	687b      	ldr	r3, [r7, #4]
 8046404:	01db      	lsls	r3, r3, #7
 8046406:	4413      	add	r3, r2
 8046408:	3384      	adds	r3, #132	; 0x84
 804640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804640c:	68fa      	ldr	r2, [r7, #12]
 804640e:	6812      	ldr	r2, [r2, #0]
 8046410:	4611      	mov	r1, r2
 8046412:	687a      	ldr	r2, [r7, #4]
 8046414:	01d2      	lsls	r2, r2, #7
 8046416:	440a      	add	r2, r1
 8046418:	3284      	adds	r2, #132	; 0x84
 804641a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 804641e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8046420:	68bb      	ldr	r3, [r7, #8]
 8046422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046424:	69fa      	ldr	r2, [r7, #28]
 8046426:	fb02 f303 	mul.w	r3, r2, r3
 804642a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 804642c:	68bb      	ldr	r3, [r7, #8]
 804642e:	6859      	ldr	r1, [r3, #4]
 8046430:	68bb      	ldr	r3, [r7, #8]
 8046432:	681b      	ldr	r3, [r3, #0]
 8046434:	1acb      	subs	r3, r1, r3
 8046436:	69f9      	ldr	r1, [r7, #28]
 8046438:	fb01 f303 	mul.w	r3, r1, r3
 804643c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 804643e:	68f9      	ldr	r1, [r7, #12]
 8046440:	6809      	ldr	r1, [r1, #0]
 8046442:	4608      	mov	r0, r1
 8046444:	6879      	ldr	r1, [r7, #4]
 8046446:	01c9      	lsls	r1, r1, #7
 8046448:	4401      	add	r1, r0
 804644a:	3184      	adds	r1, #132	; 0x84
 804644c:	4313      	orrs	r3, r2
 804644e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8046450:	68fb      	ldr	r3, [r7, #12]
 8046452:	681b      	ldr	r3, [r3, #0]
 8046454:	461a      	mov	r2, r3
 8046456:	687b      	ldr	r3, [r7, #4]
 8046458:	01db      	lsls	r3, r3, #7
 804645a:	4413      	add	r3, r2
 804645c:	3384      	adds	r3, #132	; 0x84
 804645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046460:	68fa      	ldr	r2, [r7, #12]
 8046462:	6812      	ldr	r2, [r2, #0]
 8046464:	4611      	mov	r1, r2
 8046466:	687a      	ldr	r2, [r7, #4]
 8046468:	01d2      	lsls	r2, r2, #7
 804646a:	440a      	add	r2, r1
 804646c:	3284      	adds	r2, #132	; 0x84
 804646e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8046472:	f023 0307 	bic.w	r3, r3, #7
 8046476:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8046478:	68fb      	ldr	r3, [r7, #12]
 804647a:	681b      	ldr	r3, [r3, #0]
 804647c:	461a      	mov	r2, r3
 804647e:	687b      	ldr	r3, [r7, #4]
 8046480:	01db      	lsls	r3, r3, #7
 8046482:	4413      	add	r3, r2
 8046484:	3384      	adds	r3, #132	; 0x84
 8046486:	461a      	mov	r2, r3
 8046488:	68bb      	ldr	r3, [r7, #8]
 804648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804648c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 804648e:	68fb      	ldr	r3, [r7, #12]
 8046490:	681b      	ldr	r3, [r3, #0]
 8046492:	461a      	mov	r2, r3
 8046494:	687b      	ldr	r3, [r7, #4]
 8046496:	01db      	lsls	r3, r3, #7
 8046498:	4413      	add	r3, r2
 804649a:	3384      	adds	r3, #132	; 0x84
 804649c:	681b      	ldr	r3, [r3, #0]
 804649e:	68fa      	ldr	r2, [r7, #12]
 80464a0:	6812      	ldr	r2, [r2, #0]
 80464a2:	4611      	mov	r1, r2
 80464a4:	687a      	ldr	r2, [r7, #4]
 80464a6:	01d2      	lsls	r2, r2, #7
 80464a8:	440a      	add	r2, r1
 80464aa:	3284      	adds	r2, #132	; 0x84
 80464ac:	f043 0301 	orr.w	r3, r3, #1
 80464b0:	6013      	str	r3, [r2, #0]
}
 80464b2:	bf00      	nop
 80464b4:	3724      	adds	r7, #36	; 0x24
 80464b6:	46bd      	mov	sp, r7
 80464b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80464bc:	4770      	bx	lr
	...

080464c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80464c0:	b580      	push	{r7, lr}
 80464c2:	b086      	sub	sp, #24
 80464c4:	af00      	add	r7, sp, #0
 80464c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80464c8:	687b      	ldr	r3, [r7, #4]
 80464ca:	2b00      	cmp	r3, #0
 80464cc:	d101      	bne.n	80464d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80464ce:	2301      	movs	r3, #1
 80464d0:	e267      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80464d2:	687b      	ldr	r3, [r7, #4]
 80464d4:	681b      	ldr	r3, [r3, #0]
 80464d6:	f003 0301 	and.w	r3, r3, #1
 80464da:	2b00      	cmp	r3, #0
 80464dc:	d075      	beq.n	80465ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80464de:	4b88      	ldr	r3, [pc, #544]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80464e0:	689b      	ldr	r3, [r3, #8]
 80464e2:	f003 030c 	and.w	r3, r3, #12
 80464e6:	2b04      	cmp	r3, #4
 80464e8:	d00c      	beq.n	8046504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80464ea:	4b85      	ldr	r3, [pc, #532]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80464ec:	689b      	ldr	r3, [r3, #8]
 80464ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80464f2:	2b08      	cmp	r3, #8
 80464f4:	d112      	bne.n	804651c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80464f6:	4b82      	ldr	r3, [pc, #520]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80464f8:	685b      	ldr	r3, [r3, #4]
 80464fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80464fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8046502:	d10b      	bne.n	804651c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046504:	4b7e      	ldr	r3, [pc, #504]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046506:	681b      	ldr	r3, [r3, #0]
 8046508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804650c:	2b00      	cmp	r3, #0
 804650e:	d05b      	beq.n	80465c8 <HAL_RCC_OscConfig+0x108>
 8046510:	687b      	ldr	r3, [r7, #4]
 8046512:	685b      	ldr	r3, [r3, #4]
 8046514:	2b00      	cmp	r3, #0
 8046516:	d157      	bne.n	80465c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8046518:	2301      	movs	r3, #1
 804651a:	e242      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 804651c:	687b      	ldr	r3, [r7, #4]
 804651e:	685b      	ldr	r3, [r3, #4]
 8046520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046524:	d106      	bne.n	8046534 <HAL_RCC_OscConfig+0x74>
 8046526:	4b76      	ldr	r3, [pc, #472]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046528:	681b      	ldr	r3, [r3, #0]
 804652a:	4a75      	ldr	r2, [pc, #468]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046530:	6013      	str	r3, [r2, #0]
 8046532:	e01d      	b.n	8046570 <HAL_RCC_OscConfig+0xb0>
 8046534:	687b      	ldr	r3, [r7, #4]
 8046536:	685b      	ldr	r3, [r3, #4]
 8046538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 804653c:	d10c      	bne.n	8046558 <HAL_RCC_OscConfig+0x98>
 804653e:	4b70      	ldr	r3, [pc, #448]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046540:	681b      	ldr	r3, [r3, #0]
 8046542:	4a6f      	ldr	r2, [pc, #444]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8046548:	6013      	str	r3, [r2, #0]
 804654a:	4b6d      	ldr	r3, [pc, #436]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804654c:	681b      	ldr	r3, [r3, #0]
 804654e:	4a6c      	ldr	r2, [pc, #432]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046554:	6013      	str	r3, [r2, #0]
 8046556:	e00b      	b.n	8046570 <HAL_RCC_OscConfig+0xb0>
 8046558:	4b69      	ldr	r3, [pc, #420]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804655a:	681b      	ldr	r3, [r3, #0]
 804655c:	4a68      	ldr	r2, [pc, #416]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046562:	6013      	str	r3, [r2, #0]
 8046564:	4b66      	ldr	r3, [pc, #408]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046566:	681b      	ldr	r3, [r3, #0]
 8046568:	4a65      	ldr	r2, [pc, #404]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804656a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804656e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8046570:	687b      	ldr	r3, [r7, #4]
 8046572:	685b      	ldr	r3, [r3, #4]
 8046574:	2b00      	cmp	r3, #0
 8046576:	d013      	beq.n	80465a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046578:	f7fc fc3a 	bl	8042df0 <HAL_GetTick>
 804657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804657e:	e008      	b.n	8046592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046580:	f7fc fc36 	bl	8042df0 <HAL_GetTick>
 8046584:	4602      	mov	r2, r0
 8046586:	693b      	ldr	r3, [r7, #16]
 8046588:	1ad3      	subs	r3, r2, r3
 804658a:	2b64      	cmp	r3, #100	; 0x64
 804658c:	d901      	bls.n	8046592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804658e:	2303      	movs	r3, #3
 8046590:	e207      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046592:	4b5b      	ldr	r3, [pc, #364]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046594:	681b      	ldr	r3, [r3, #0]
 8046596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804659a:	2b00      	cmp	r3, #0
 804659c:	d0f0      	beq.n	8046580 <HAL_RCC_OscConfig+0xc0>
 804659e:	e014      	b.n	80465ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80465a0:	f7fc fc26 	bl	8042df0 <HAL_GetTick>
 80465a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80465a6:	e008      	b.n	80465ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80465a8:	f7fc fc22 	bl	8042df0 <HAL_GetTick>
 80465ac:	4602      	mov	r2, r0
 80465ae:	693b      	ldr	r3, [r7, #16]
 80465b0:	1ad3      	subs	r3, r2, r3
 80465b2:	2b64      	cmp	r3, #100	; 0x64
 80465b4:	d901      	bls.n	80465ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80465b6:	2303      	movs	r3, #3
 80465b8:	e1f3      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80465ba:	4b51      	ldr	r3, [pc, #324]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80465bc:	681b      	ldr	r3, [r3, #0]
 80465be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80465c2:	2b00      	cmp	r3, #0
 80465c4:	d1f0      	bne.n	80465a8 <HAL_RCC_OscConfig+0xe8>
 80465c6:	e000      	b.n	80465ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80465c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80465ca:	687b      	ldr	r3, [r7, #4]
 80465cc:	681b      	ldr	r3, [r3, #0]
 80465ce:	f003 0302 	and.w	r3, r3, #2
 80465d2:	2b00      	cmp	r3, #0
 80465d4:	d063      	beq.n	804669e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80465d6:	4b4a      	ldr	r3, [pc, #296]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80465d8:	689b      	ldr	r3, [r3, #8]
 80465da:	f003 030c 	and.w	r3, r3, #12
 80465de:	2b00      	cmp	r3, #0
 80465e0:	d00b      	beq.n	80465fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80465e2:	4b47      	ldr	r3, [pc, #284]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80465e4:	689b      	ldr	r3, [r3, #8]
 80465e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80465ea:	2b08      	cmp	r3, #8
 80465ec:	d11c      	bne.n	8046628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80465ee:	4b44      	ldr	r3, [pc, #272]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80465f0:	685b      	ldr	r3, [r3, #4]
 80465f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80465f6:	2b00      	cmp	r3, #0
 80465f8:	d116      	bne.n	8046628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80465fa:	4b41      	ldr	r3, [pc, #260]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80465fc:	681b      	ldr	r3, [r3, #0]
 80465fe:	f003 0302 	and.w	r3, r3, #2
 8046602:	2b00      	cmp	r3, #0
 8046604:	d005      	beq.n	8046612 <HAL_RCC_OscConfig+0x152>
 8046606:	687b      	ldr	r3, [r7, #4]
 8046608:	68db      	ldr	r3, [r3, #12]
 804660a:	2b01      	cmp	r3, #1
 804660c:	d001      	beq.n	8046612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 804660e:	2301      	movs	r3, #1
 8046610:	e1c7      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046612:	4b3b      	ldr	r3, [pc, #236]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046614:	681b      	ldr	r3, [r3, #0]
 8046616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804661a:	687b      	ldr	r3, [r7, #4]
 804661c:	691b      	ldr	r3, [r3, #16]
 804661e:	00db      	lsls	r3, r3, #3
 8046620:	4937      	ldr	r1, [pc, #220]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046622:	4313      	orrs	r3, r2
 8046624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046626:	e03a      	b.n	804669e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046628:	687b      	ldr	r3, [r7, #4]
 804662a:	68db      	ldr	r3, [r3, #12]
 804662c:	2b00      	cmp	r3, #0
 804662e:	d020      	beq.n	8046672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8046630:	4b34      	ldr	r3, [pc, #208]	; (8046704 <HAL_RCC_OscConfig+0x244>)
 8046632:	2201      	movs	r2, #1
 8046634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046636:	f7fc fbdb 	bl	8042df0 <HAL_GetTick>
 804663a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804663c:	e008      	b.n	8046650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804663e:	f7fc fbd7 	bl	8042df0 <HAL_GetTick>
 8046642:	4602      	mov	r2, r0
 8046644:	693b      	ldr	r3, [r7, #16]
 8046646:	1ad3      	subs	r3, r2, r3
 8046648:	2b02      	cmp	r3, #2
 804664a:	d901      	bls.n	8046650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 804664c:	2303      	movs	r3, #3
 804664e:	e1a8      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046650:	4b2b      	ldr	r3, [pc, #172]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046652:	681b      	ldr	r3, [r3, #0]
 8046654:	f003 0302 	and.w	r3, r3, #2
 8046658:	2b00      	cmp	r3, #0
 804665a:	d0f0      	beq.n	804663e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804665c:	4b28      	ldr	r3, [pc, #160]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804665e:	681b      	ldr	r3, [r3, #0]
 8046660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046664:	687b      	ldr	r3, [r7, #4]
 8046666:	691b      	ldr	r3, [r3, #16]
 8046668:	00db      	lsls	r3, r3, #3
 804666a:	4925      	ldr	r1, [pc, #148]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 804666c:	4313      	orrs	r3, r2
 804666e:	600b      	str	r3, [r1, #0]
 8046670:	e015      	b.n	804669e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8046672:	4b24      	ldr	r3, [pc, #144]	; (8046704 <HAL_RCC_OscConfig+0x244>)
 8046674:	2200      	movs	r2, #0
 8046676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046678:	f7fc fbba 	bl	8042df0 <HAL_GetTick>
 804667c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804667e:	e008      	b.n	8046692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046680:	f7fc fbb6 	bl	8042df0 <HAL_GetTick>
 8046684:	4602      	mov	r2, r0
 8046686:	693b      	ldr	r3, [r7, #16]
 8046688:	1ad3      	subs	r3, r2, r3
 804668a:	2b02      	cmp	r3, #2
 804668c:	d901      	bls.n	8046692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804668e:	2303      	movs	r3, #3
 8046690:	e187      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046692:	4b1b      	ldr	r3, [pc, #108]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 8046694:	681b      	ldr	r3, [r3, #0]
 8046696:	f003 0302 	and.w	r3, r3, #2
 804669a:	2b00      	cmp	r3, #0
 804669c:	d1f0      	bne.n	8046680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804669e:	687b      	ldr	r3, [r7, #4]
 80466a0:	681b      	ldr	r3, [r3, #0]
 80466a2:	f003 0308 	and.w	r3, r3, #8
 80466a6:	2b00      	cmp	r3, #0
 80466a8:	d036      	beq.n	8046718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80466aa:	687b      	ldr	r3, [r7, #4]
 80466ac:	695b      	ldr	r3, [r3, #20]
 80466ae:	2b00      	cmp	r3, #0
 80466b0:	d016      	beq.n	80466e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80466b2:	4b15      	ldr	r3, [pc, #84]	; (8046708 <HAL_RCC_OscConfig+0x248>)
 80466b4:	2201      	movs	r2, #1
 80466b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80466b8:	f7fc fb9a 	bl	8042df0 <HAL_GetTick>
 80466bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80466be:	e008      	b.n	80466d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80466c0:	f7fc fb96 	bl	8042df0 <HAL_GetTick>
 80466c4:	4602      	mov	r2, r0
 80466c6:	693b      	ldr	r3, [r7, #16]
 80466c8:	1ad3      	subs	r3, r2, r3
 80466ca:	2b02      	cmp	r3, #2
 80466cc:	d901      	bls.n	80466d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80466ce:	2303      	movs	r3, #3
 80466d0:	e167      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80466d2:	4b0b      	ldr	r3, [pc, #44]	; (8046700 <HAL_RCC_OscConfig+0x240>)
 80466d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80466d6:	f003 0302 	and.w	r3, r3, #2
 80466da:	2b00      	cmp	r3, #0
 80466dc:	d0f0      	beq.n	80466c0 <HAL_RCC_OscConfig+0x200>
 80466de:	e01b      	b.n	8046718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80466e0:	4b09      	ldr	r3, [pc, #36]	; (8046708 <HAL_RCC_OscConfig+0x248>)
 80466e2:	2200      	movs	r2, #0
 80466e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80466e6:	f7fc fb83 	bl	8042df0 <HAL_GetTick>
 80466ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80466ec:	e00e      	b.n	804670c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80466ee:	f7fc fb7f 	bl	8042df0 <HAL_GetTick>
 80466f2:	4602      	mov	r2, r0
 80466f4:	693b      	ldr	r3, [r7, #16]
 80466f6:	1ad3      	subs	r3, r2, r3
 80466f8:	2b02      	cmp	r3, #2
 80466fa:	d907      	bls.n	804670c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80466fc:	2303      	movs	r3, #3
 80466fe:	e150      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
 8046700:	40023800 	.word	0x40023800
 8046704:	42470000 	.word	0x42470000
 8046708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 804670c:	4b88      	ldr	r3, [pc, #544]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804670e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046710:	f003 0302 	and.w	r3, r3, #2
 8046714:	2b00      	cmp	r3, #0
 8046716:	d1ea      	bne.n	80466ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046718:	687b      	ldr	r3, [r7, #4]
 804671a:	681b      	ldr	r3, [r3, #0]
 804671c:	f003 0304 	and.w	r3, r3, #4
 8046720:	2b00      	cmp	r3, #0
 8046722:	f000 8097 	beq.w	8046854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8046726:	2300      	movs	r3, #0
 8046728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 804672a:	4b81      	ldr	r3, [pc, #516]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046732:	2b00      	cmp	r3, #0
 8046734:	d10f      	bne.n	8046756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8046736:	2300      	movs	r3, #0
 8046738:	60bb      	str	r3, [r7, #8]
 804673a:	4b7d      	ldr	r3, [pc, #500]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804673e:	4a7c      	ldr	r2, [pc, #496]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046744:	6413      	str	r3, [r2, #64]	; 0x40
 8046746:	4b7a      	ldr	r3, [pc, #488]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804674e:	60bb      	str	r3, [r7, #8]
 8046750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8046752:	2301      	movs	r3, #1
 8046754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046756:	4b77      	ldr	r3, [pc, #476]	; (8046934 <HAL_RCC_OscConfig+0x474>)
 8046758:	681b      	ldr	r3, [r3, #0]
 804675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804675e:	2b00      	cmp	r3, #0
 8046760:	d118      	bne.n	8046794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8046762:	4b74      	ldr	r3, [pc, #464]	; (8046934 <HAL_RCC_OscConfig+0x474>)
 8046764:	681b      	ldr	r3, [r3, #0]
 8046766:	4a73      	ldr	r2, [pc, #460]	; (8046934 <HAL_RCC_OscConfig+0x474>)
 8046768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804676c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804676e:	f7fc fb3f 	bl	8042df0 <HAL_GetTick>
 8046772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046774:	e008      	b.n	8046788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8046776:	f7fc fb3b 	bl	8042df0 <HAL_GetTick>
 804677a:	4602      	mov	r2, r0
 804677c:	693b      	ldr	r3, [r7, #16]
 804677e:	1ad3      	subs	r3, r2, r3
 8046780:	2b02      	cmp	r3, #2
 8046782:	d901      	bls.n	8046788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8046784:	2303      	movs	r3, #3
 8046786:	e10c      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046788:	4b6a      	ldr	r3, [pc, #424]	; (8046934 <HAL_RCC_OscConfig+0x474>)
 804678a:	681b      	ldr	r3, [r3, #0]
 804678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046790:	2b00      	cmp	r3, #0
 8046792:	d0f0      	beq.n	8046776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8046794:	687b      	ldr	r3, [r7, #4]
 8046796:	689b      	ldr	r3, [r3, #8]
 8046798:	2b01      	cmp	r3, #1
 804679a:	d106      	bne.n	80467aa <HAL_RCC_OscConfig+0x2ea>
 804679c:	4b64      	ldr	r3, [pc, #400]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467a0:	4a63      	ldr	r2, [pc, #396]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467a2:	f043 0301 	orr.w	r3, r3, #1
 80467a6:	6713      	str	r3, [r2, #112]	; 0x70
 80467a8:	e01c      	b.n	80467e4 <HAL_RCC_OscConfig+0x324>
 80467aa:	687b      	ldr	r3, [r7, #4]
 80467ac:	689b      	ldr	r3, [r3, #8]
 80467ae:	2b05      	cmp	r3, #5
 80467b0:	d10c      	bne.n	80467cc <HAL_RCC_OscConfig+0x30c>
 80467b2:	4b5f      	ldr	r3, [pc, #380]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467b6:	4a5e      	ldr	r2, [pc, #376]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467b8:	f043 0304 	orr.w	r3, r3, #4
 80467bc:	6713      	str	r3, [r2, #112]	; 0x70
 80467be:	4b5c      	ldr	r3, [pc, #368]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467c2:	4a5b      	ldr	r2, [pc, #364]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467c4:	f043 0301 	orr.w	r3, r3, #1
 80467c8:	6713      	str	r3, [r2, #112]	; 0x70
 80467ca:	e00b      	b.n	80467e4 <HAL_RCC_OscConfig+0x324>
 80467cc:	4b58      	ldr	r3, [pc, #352]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467d0:	4a57      	ldr	r2, [pc, #348]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467d2:	f023 0301 	bic.w	r3, r3, #1
 80467d6:	6713      	str	r3, [r2, #112]	; 0x70
 80467d8:	4b55      	ldr	r3, [pc, #340]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80467dc:	4a54      	ldr	r2, [pc, #336]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80467de:	f023 0304 	bic.w	r3, r3, #4
 80467e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80467e4:	687b      	ldr	r3, [r7, #4]
 80467e6:	689b      	ldr	r3, [r3, #8]
 80467e8:	2b00      	cmp	r3, #0
 80467ea:	d015      	beq.n	8046818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80467ec:	f7fc fb00 	bl	8042df0 <HAL_GetTick>
 80467f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80467f2:	e00a      	b.n	804680a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80467f4:	f7fc fafc 	bl	8042df0 <HAL_GetTick>
 80467f8:	4602      	mov	r2, r0
 80467fa:	693b      	ldr	r3, [r7, #16]
 80467fc:	1ad3      	subs	r3, r2, r3
 80467fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8046802:	4293      	cmp	r3, r2
 8046804:	d901      	bls.n	804680a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8046806:	2303      	movs	r3, #3
 8046808:	e0cb      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804680a:	4b49      	ldr	r3, [pc, #292]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804680e:	f003 0302 	and.w	r3, r3, #2
 8046812:	2b00      	cmp	r3, #0
 8046814:	d0ee      	beq.n	80467f4 <HAL_RCC_OscConfig+0x334>
 8046816:	e014      	b.n	8046842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046818:	f7fc faea 	bl	8042df0 <HAL_GetTick>
 804681c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804681e:	e00a      	b.n	8046836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046820:	f7fc fae6 	bl	8042df0 <HAL_GetTick>
 8046824:	4602      	mov	r2, r0
 8046826:	693b      	ldr	r3, [r7, #16]
 8046828:	1ad3      	subs	r3, r2, r3
 804682a:	f241 3288 	movw	r2, #5000	; 0x1388
 804682e:	4293      	cmp	r3, r2
 8046830:	d901      	bls.n	8046836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8046832:	2303      	movs	r3, #3
 8046834:	e0b5      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046836:	4b3e      	ldr	r3, [pc, #248]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804683a:	f003 0302 	and.w	r3, r3, #2
 804683e:	2b00      	cmp	r3, #0
 8046840:	d1ee      	bne.n	8046820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8046842:	7dfb      	ldrb	r3, [r7, #23]
 8046844:	2b01      	cmp	r3, #1
 8046846:	d105      	bne.n	8046854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8046848:	4b39      	ldr	r3, [pc, #228]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804684c:	4a38      	ldr	r2, [pc, #224]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 804684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8046852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8046854:	687b      	ldr	r3, [r7, #4]
 8046856:	699b      	ldr	r3, [r3, #24]
 8046858:	2b00      	cmp	r3, #0
 804685a:	f000 80a1 	beq.w	80469a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 804685e:	4b34      	ldr	r3, [pc, #208]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046860:	689b      	ldr	r3, [r3, #8]
 8046862:	f003 030c 	and.w	r3, r3, #12
 8046866:	2b08      	cmp	r3, #8
 8046868:	d05c      	beq.n	8046924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804686a:	687b      	ldr	r3, [r7, #4]
 804686c:	699b      	ldr	r3, [r3, #24]
 804686e:	2b02      	cmp	r3, #2
 8046870:	d141      	bne.n	80468f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046872:	4b31      	ldr	r3, [pc, #196]	; (8046938 <HAL_RCC_OscConfig+0x478>)
 8046874:	2200      	movs	r2, #0
 8046876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046878:	f7fc faba 	bl	8042df0 <HAL_GetTick>
 804687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804687e:	e008      	b.n	8046892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046880:	f7fc fab6 	bl	8042df0 <HAL_GetTick>
 8046884:	4602      	mov	r2, r0
 8046886:	693b      	ldr	r3, [r7, #16]
 8046888:	1ad3      	subs	r3, r2, r3
 804688a:	2b02      	cmp	r3, #2
 804688c:	d901      	bls.n	8046892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 804688e:	2303      	movs	r3, #3
 8046890:	e087      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046892:	4b27      	ldr	r3, [pc, #156]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046894:	681b      	ldr	r3, [r3, #0]
 8046896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804689a:	2b00      	cmp	r3, #0
 804689c:	d1f0      	bne.n	8046880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804689e:	687b      	ldr	r3, [r7, #4]
 80468a0:	69da      	ldr	r2, [r3, #28]
 80468a2:	687b      	ldr	r3, [r7, #4]
 80468a4:	6a1b      	ldr	r3, [r3, #32]
 80468a6:	431a      	orrs	r2, r3
 80468a8:	687b      	ldr	r3, [r7, #4]
 80468aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80468ac:	019b      	lsls	r3, r3, #6
 80468ae:	431a      	orrs	r2, r3
 80468b0:	687b      	ldr	r3, [r7, #4]
 80468b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80468b4:	085b      	lsrs	r3, r3, #1
 80468b6:	3b01      	subs	r3, #1
 80468b8:	041b      	lsls	r3, r3, #16
 80468ba:	431a      	orrs	r2, r3
 80468bc:	687b      	ldr	r3, [r7, #4]
 80468be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80468c0:	061b      	lsls	r3, r3, #24
 80468c2:	491b      	ldr	r1, [pc, #108]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80468c4:	4313      	orrs	r3, r2
 80468c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80468c8:	4b1b      	ldr	r3, [pc, #108]	; (8046938 <HAL_RCC_OscConfig+0x478>)
 80468ca:	2201      	movs	r2, #1
 80468cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80468ce:	f7fc fa8f 	bl	8042df0 <HAL_GetTick>
 80468d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80468d4:	e008      	b.n	80468e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80468d6:	f7fc fa8b 	bl	8042df0 <HAL_GetTick>
 80468da:	4602      	mov	r2, r0
 80468dc:	693b      	ldr	r3, [r7, #16]
 80468de:	1ad3      	subs	r3, r2, r3
 80468e0:	2b02      	cmp	r3, #2
 80468e2:	d901      	bls.n	80468e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80468e4:	2303      	movs	r3, #3
 80468e6:	e05c      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80468e8:	4b11      	ldr	r3, [pc, #68]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 80468ea:	681b      	ldr	r3, [r3, #0]
 80468ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80468f0:	2b00      	cmp	r3, #0
 80468f2:	d0f0      	beq.n	80468d6 <HAL_RCC_OscConfig+0x416>
 80468f4:	e054      	b.n	80469a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80468f6:	4b10      	ldr	r3, [pc, #64]	; (8046938 <HAL_RCC_OscConfig+0x478>)
 80468f8:	2200      	movs	r2, #0
 80468fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80468fc:	f7fc fa78 	bl	8042df0 <HAL_GetTick>
 8046900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046902:	e008      	b.n	8046916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046904:	f7fc fa74 	bl	8042df0 <HAL_GetTick>
 8046908:	4602      	mov	r2, r0
 804690a:	693b      	ldr	r3, [r7, #16]
 804690c:	1ad3      	subs	r3, r2, r3
 804690e:	2b02      	cmp	r3, #2
 8046910:	d901      	bls.n	8046916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8046912:	2303      	movs	r3, #3
 8046914:	e045      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046916:	4b06      	ldr	r3, [pc, #24]	; (8046930 <HAL_RCC_OscConfig+0x470>)
 8046918:	681b      	ldr	r3, [r3, #0]
 804691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804691e:	2b00      	cmp	r3, #0
 8046920:	d1f0      	bne.n	8046904 <HAL_RCC_OscConfig+0x444>
 8046922:	e03d      	b.n	80469a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8046924:	687b      	ldr	r3, [r7, #4]
 8046926:	699b      	ldr	r3, [r3, #24]
 8046928:	2b01      	cmp	r3, #1
 804692a:	d107      	bne.n	804693c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 804692c:	2301      	movs	r3, #1
 804692e:	e038      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
 8046930:	40023800 	.word	0x40023800
 8046934:	40007000 	.word	0x40007000
 8046938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 804693c:	4b1b      	ldr	r3, [pc, #108]	; (80469ac <HAL_RCC_OscConfig+0x4ec>)
 804693e:	685b      	ldr	r3, [r3, #4]
 8046940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046942:	687b      	ldr	r3, [r7, #4]
 8046944:	699b      	ldr	r3, [r3, #24]
 8046946:	2b01      	cmp	r3, #1
 8046948:	d028      	beq.n	804699c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804694a:	68fb      	ldr	r3, [r7, #12]
 804694c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8046950:	687b      	ldr	r3, [r7, #4]
 8046952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046954:	429a      	cmp	r2, r3
 8046956:	d121      	bne.n	804699c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046958:	68fb      	ldr	r3, [r7, #12]
 804695a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804695e:	687b      	ldr	r3, [r7, #4]
 8046960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046962:	429a      	cmp	r2, r3
 8046964:	d11a      	bne.n	804699c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046966:	68fa      	ldr	r2, [r7, #12]
 8046968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 804696c:	4013      	ands	r3, r2
 804696e:	687a      	ldr	r2, [r7, #4]
 8046970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8046972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046974:	4293      	cmp	r3, r2
 8046976:	d111      	bne.n	804699c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046978:	68fb      	ldr	r3, [r7, #12]
 804697a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804697e:	687b      	ldr	r3, [r7, #4]
 8046980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046982:	085b      	lsrs	r3, r3, #1
 8046984:	3b01      	subs	r3, #1
 8046986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046988:	429a      	cmp	r2, r3
 804698a:	d107      	bne.n	804699c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 804698c:	68fb      	ldr	r3, [r7, #12]
 804698e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8046992:	687b      	ldr	r3, [r7, #4]
 8046994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046998:	429a      	cmp	r2, r3
 804699a:	d001      	beq.n	80469a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 804699c:	2301      	movs	r3, #1
 804699e:	e000      	b.n	80469a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80469a0:	2300      	movs	r3, #0
}
 80469a2:	4618      	mov	r0, r3
 80469a4:	3718      	adds	r7, #24
 80469a6:	46bd      	mov	sp, r7
 80469a8:	bd80      	pop	{r7, pc}
 80469aa:	bf00      	nop
 80469ac:	40023800 	.word	0x40023800

080469b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80469b0:	b580      	push	{r7, lr}
 80469b2:	b084      	sub	sp, #16
 80469b4:	af00      	add	r7, sp, #0
 80469b6:	6078      	str	r0, [r7, #4]
 80469b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80469ba:	687b      	ldr	r3, [r7, #4]
 80469bc:	2b00      	cmp	r3, #0
 80469be:	d101      	bne.n	80469c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80469c0:	2301      	movs	r3, #1
 80469c2:	e0cc      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80469c4:	4b68      	ldr	r3, [pc, #416]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 80469c6:	681b      	ldr	r3, [r3, #0]
 80469c8:	f003 030f 	and.w	r3, r3, #15
 80469cc:	683a      	ldr	r2, [r7, #0]
 80469ce:	429a      	cmp	r2, r3
 80469d0:	d90c      	bls.n	80469ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80469d2:	4b65      	ldr	r3, [pc, #404]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 80469d4:	683a      	ldr	r2, [r7, #0]
 80469d6:	b2d2      	uxtb	r2, r2
 80469d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80469da:	4b63      	ldr	r3, [pc, #396]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 80469dc:	681b      	ldr	r3, [r3, #0]
 80469de:	f003 030f 	and.w	r3, r3, #15
 80469e2:	683a      	ldr	r2, [r7, #0]
 80469e4:	429a      	cmp	r2, r3
 80469e6:	d001      	beq.n	80469ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80469e8:	2301      	movs	r3, #1
 80469ea:	e0b8      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80469ec:	687b      	ldr	r3, [r7, #4]
 80469ee:	681b      	ldr	r3, [r3, #0]
 80469f0:	f003 0302 	and.w	r3, r3, #2
 80469f4:	2b00      	cmp	r3, #0
 80469f6:	d020      	beq.n	8046a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80469f8:	687b      	ldr	r3, [r7, #4]
 80469fa:	681b      	ldr	r3, [r3, #0]
 80469fc:	f003 0304 	and.w	r3, r3, #4
 8046a00:	2b00      	cmp	r3, #0
 8046a02:	d005      	beq.n	8046a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046a04:	4b59      	ldr	r3, [pc, #356]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a06:	689b      	ldr	r3, [r3, #8]
 8046a08:	4a58      	ldr	r2, [pc, #352]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046a10:	687b      	ldr	r3, [r7, #4]
 8046a12:	681b      	ldr	r3, [r3, #0]
 8046a14:	f003 0308 	and.w	r3, r3, #8
 8046a18:	2b00      	cmp	r3, #0
 8046a1a:	d005      	beq.n	8046a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046a1c:	4b53      	ldr	r3, [pc, #332]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a1e:	689b      	ldr	r3, [r3, #8]
 8046a20:	4a52      	ldr	r2, [pc, #328]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8046a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046a28:	4b50      	ldr	r3, [pc, #320]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a2a:	689b      	ldr	r3, [r3, #8]
 8046a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046a30:	687b      	ldr	r3, [r7, #4]
 8046a32:	689b      	ldr	r3, [r3, #8]
 8046a34:	494d      	ldr	r1, [pc, #308]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a36:	4313      	orrs	r3, r2
 8046a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8046a3a:	687b      	ldr	r3, [r7, #4]
 8046a3c:	681b      	ldr	r3, [r3, #0]
 8046a3e:	f003 0301 	and.w	r3, r3, #1
 8046a42:	2b00      	cmp	r3, #0
 8046a44:	d044      	beq.n	8046ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8046a46:	687b      	ldr	r3, [r7, #4]
 8046a48:	685b      	ldr	r3, [r3, #4]
 8046a4a:	2b01      	cmp	r3, #1
 8046a4c:	d107      	bne.n	8046a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046a4e:	4b47      	ldr	r3, [pc, #284]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a50:	681b      	ldr	r3, [r3, #0]
 8046a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046a56:	2b00      	cmp	r3, #0
 8046a58:	d119      	bne.n	8046a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046a5a:	2301      	movs	r3, #1
 8046a5c:	e07f      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046a5e:	687b      	ldr	r3, [r7, #4]
 8046a60:	685b      	ldr	r3, [r3, #4]
 8046a62:	2b02      	cmp	r3, #2
 8046a64:	d003      	beq.n	8046a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8046a66:	687b      	ldr	r3, [r7, #4]
 8046a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046a6a:	2b03      	cmp	r3, #3
 8046a6c:	d107      	bne.n	8046a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046a6e:	4b3f      	ldr	r3, [pc, #252]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a70:	681b      	ldr	r3, [r3, #0]
 8046a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046a76:	2b00      	cmp	r3, #0
 8046a78:	d109      	bne.n	8046a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046a7a:	2301      	movs	r3, #1
 8046a7c:	e06f      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046a7e:	4b3b      	ldr	r3, [pc, #236]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a80:	681b      	ldr	r3, [r3, #0]
 8046a82:	f003 0302 	and.w	r3, r3, #2
 8046a86:	2b00      	cmp	r3, #0
 8046a88:	d101      	bne.n	8046a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046a8a:	2301      	movs	r3, #1
 8046a8c:	e067      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8046a8e:	4b37      	ldr	r3, [pc, #220]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a90:	689b      	ldr	r3, [r3, #8]
 8046a92:	f023 0203 	bic.w	r2, r3, #3
 8046a96:	687b      	ldr	r3, [r7, #4]
 8046a98:	685b      	ldr	r3, [r3, #4]
 8046a9a:	4934      	ldr	r1, [pc, #208]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046a9c:	4313      	orrs	r3, r2
 8046a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8046aa0:	f7fc f9a6 	bl	8042df0 <HAL_GetTick>
 8046aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046aa6:	e00a      	b.n	8046abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8046aa8:	f7fc f9a2 	bl	8042df0 <HAL_GetTick>
 8046aac:	4602      	mov	r2, r0
 8046aae:	68fb      	ldr	r3, [r7, #12]
 8046ab0:	1ad3      	subs	r3, r2, r3
 8046ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8046ab6:	4293      	cmp	r3, r2
 8046ab8:	d901      	bls.n	8046abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8046aba:	2303      	movs	r3, #3
 8046abc:	e04f      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046abe:	4b2b      	ldr	r3, [pc, #172]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046ac0:	689b      	ldr	r3, [r3, #8]
 8046ac2:	f003 020c 	and.w	r2, r3, #12
 8046ac6:	687b      	ldr	r3, [r7, #4]
 8046ac8:	685b      	ldr	r3, [r3, #4]
 8046aca:	009b      	lsls	r3, r3, #2
 8046acc:	429a      	cmp	r2, r3
 8046ace:	d1eb      	bne.n	8046aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046ad0:	4b25      	ldr	r3, [pc, #148]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 8046ad2:	681b      	ldr	r3, [r3, #0]
 8046ad4:	f003 030f 	and.w	r3, r3, #15
 8046ad8:	683a      	ldr	r2, [r7, #0]
 8046ada:	429a      	cmp	r2, r3
 8046adc:	d20c      	bcs.n	8046af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046ade:	4b22      	ldr	r3, [pc, #136]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 8046ae0:	683a      	ldr	r2, [r7, #0]
 8046ae2:	b2d2      	uxtb	r2, r2
 8046ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046ae6:	4b20      	ldr	r3, [pc, #128]	; (8046b68 <HAL_RCC_ClockConfig+0x1b8>)
 8046ae8:	681b      	ldr	r3, [r3, #0]
 8046aea:	f003 030f 	and.w	r3, r3, #15
 8046aee:	683a      	ldr	r2, [r7, #0]
 8046af0:	429a      	cmp	r2, r3
 8046af2:	d001      	beq.n	8046af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8046af4:	2301      	movs	r3, #1
 8046af6:	e032      	b.n	8046b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046af8:	687b      	ldr	r3, [r7, #4]
 8046afa:	681b      	ldr	r3, [r3, #0]
 8046afc:	f003 0304 	and.w	r3, r3, #4
 8046b00:	2b00      	cmp	r3, #0
 8046b02:	d008      	beq.n	8046b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8046b04:	4b19      	ldr	r3, [pc, #100]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046b06:	689b      	ldr	r3, [r3, #8]
 8046b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046b0c:	687b      	ldr	r3, [r7, #4]
 8046b0e:	68db      	ldr	r3, [r3, #12]
 8046b10:	4916      	ldr	r1, [pc, #88]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046b12:	4313      	orrs	r3, r2
 8046b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046b16:	687b      	ldr	r3, [r7, #4]
 8046b18:	681b      	ldr	r3, [r3, #0]
 8046b1a:	f003 0308 	and.w	r3, r3, #8
 8046b1e:	2b00      	cmp	r3, #0
 8046b20:	d009      	beq.n	8046b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8046b22:	4b12      	ldr	r3, [pc, #72]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046b24:	689b      	ldr	r3, [r3, #8]
 8046b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8046b2a:	687b      	ldr	r3, [r7, #4]
 8046b2c:	691b      	ldr	r3, [r3, #16]
 8046b2e:	00db      	lsls	r3, r3, #3
 8046b30:	490e      	ldr	r1, [pc, #56]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046b32:	4313      	orrs	r3, r2
 8046b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8046b36:	f000 f821 	bl	8046b7c <HAL_RCC_GetSysClockFreq>
 8046b3a:	4602      	mov	r2, r0
 8046b3c:	4b0b      	ldr	r3, [pc, #44]	; (8046b6c <HAL_RCC_ClockConfig+0x1bc>)
 8046b3e:	689b      	ldr	r3, [r3, #8]
 8046b40:	091b      	lsrs	r3, r3, #4
 8046b42:	f003 030f 	and.w	r3, r3, #15
 8046b46:	490a      	ldr	r1, [pc, #40]	; (8046b70 <HAL_RCC_ClockConfig+0x1c0>)
 8046b48:	5ccb      	ldrb	r3, [r1, r3]
 8046b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8046b4e:	4a09      	ldr	r2, [pc, #36]	; (8046b74 <HAL_RCC_ClockConfig+0x1c4>)
 8046b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8046b52:	4b09      	ldr	r3, [pc, #36]	; (8046b78 <HAL_RCC_ClockConfig+0x1c8>)
 8046b54:	681b      	ldr	r3, [r3, #0]
 8046b56:	4618      	mov	r0, r3
 8046b58:	f7fa fd66 	bl	8041628 <HAL_InitTick>

  return HAL_OK;
 8046b5c:	2300      	movs	r3, #0
}
 8046b5e:	4618      	mov	r0, r3
 8046b60:	3710      	adds	r7, #16
 8046b62:	46bd      	mov	sp, r7
 8046b64:	bd80      	pop	{r7, pc}
 8046b66:	bf00      	nop
 8046b68:	40023c00 	.word	0x40023c00
 8046b6c:	40023800 	.word	0x40023800
 8046b70:	0804dc7c 	.word	0x0804dc7c
 8046b74:	20000000 	.word	0x20000000
 8046b78:	20000054 	.word	0x20000054

08046b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8046b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8046b80:	b094      	sub	sp, #80	; 0x50
 8046b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8046b84:	2300      	movs	r3, #0
 8046b86:	647b      	str	r3, [r7, #68]	; 0x44
 8046b88:	2300      	movs	r3, #0
 8046b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046b8c:	2300      	movs	r3, #0
 8046b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8046b90:	2300      	movs	r3, #0
 8046b92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8046b94:	4b79      	ldr	r3, [pc, #484]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046b96:	689b      	ldr	r3, [r3, #8]
 8046b98:	f003 030c 	and.w	r3, r3, #12
 8046b9c:	2b08      	cmp	r3, #8
 8046b9e:	d00d      	beq.n	8046bbc <HAL_RCC_GetSysClockFreq+0x40>
 8046ba0:	2b08      	cmp	r3, #8
 8046ba2:	f200 80e1 	bhi.w	8046d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8046ba6:	2b00      	cmp	r3, #0
 8046ba8:	d002      	beq.n	8046bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8046baa:	2b04      	cmp	r3, #4
 8046bac:	d003      	beq.n	8046bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8046bae:	e0db      	b.n	8046d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8046bb0:	4b73      	ldr	r3, [pc, #460]	; (8046d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8046bb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8046bb4:	e0db      	b.n	8046d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8046bb6:	4b73      	ldr	r3, [pc, #460]	; (8046d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8046bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046bba:	e0d8      	b.n	8046d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8046bbc:	4b6f      	ldr	r3, [pc, #444]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046bbe:	685b      	ldr	r3, [r3, #4]
 8046bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8046bc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8046bc6:	4b6d      	ldr	r3, [pc, #436]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046bc8:	685b      	ldr	r3, [r3, #4]
 8046bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046bce:	2b00      	cmp	r3, #0
 8046bd0:	d063      	beq.n	8046c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046bd2:	4b6a      	ldr	r3, [pc, #424]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046bd4:	685b      	ldr	r3, [r3, #4]
 8046bd6:	099b      	lsrs	r3, r3, #6
 8046bd8:	2200      	movs	r2, #0
 8046bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8046bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8046bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8046be4:	633b      	str	r3, [r7, #48]	; 0x30
 8046be6:	2300      	movs	r3, #0
 8046be8:	637b      	str	r3, [r7, #52]	; 0x34
 8046bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8046bee:	4622      	mov	r2, r4
 8046bf0:	462b      	mov	r3, r5
 8046bf2:	f04f 0000 	mov.w	r0, #0
 8046bf6:	f04f 0100 	mov.w	r1, #0
 8046bfa:	0159      	lsls	r1, r3, #5
 8046bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046c00:	0150      	lsls	r0, r2, #5
 8046c02:	4602      	mov	r2, r0
 8046c04:	460b      	mov	r3, r1
 8046c06:	4621      	mov	r1, r4
 8046c08:	1a51      	subs	r1, r2, r1
 8046c0a:	6139      	str	r1, [r7, #16]
 8046c0c:	4629      	mov	r1, r5
 8046c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8046c12:	617b      	str	r3, [r7, #20]
 8046c14:	f04f 0200 	mov.w	r2, #0
 8046c18:	f04f 0300 	mov.w	r3, #0
 8046c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8046c20:	4659      	mov	r1, fp
 8046c22:	018b      	lsls	r3, r1, #6
 8046c24:	4651      	mov	r1, sl
 8046c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8046c2a:	4651      	mov	r1, sl
 8046c2c:	018a      	lsls	r2, r1, #6
 8046c2e:	4651      	mov	r1, sl
 8046c30:	ebb2 0801 	subs.w	r8, r2, r1
 8046c34:	4659      	mov	r1, fp
 8046c36:	eb63 0901 	sbc.w	r9, r3, r1
 8046c3a:	f04f 0200 	mov.w	r2, #0
 8046c3e:	f04f 0300 	mov.w	r3, #0
 8046c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8046c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8046c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8046c4e:	4690      	mov	r8, r2
 8046c50:	4699      	mov	r9, r3
 8046c52:	4623      	mov	r3, r4
 8046c54:	eb18 0303 	adds.w	r3, r8, r3
 8046c58:	60bb      	str	r3, [r7, #8]
 8046c5a:	462b      	mov	r3, r5
 8046c5c:	eb49 0303 	adc.w	r3, r9, r3
 8046c60:	60fb      	str	r3, [r7, #12]
 8046c62:	f04f 0200 	mov.w	r2, #0
 8046c66:	f04f 0300 	mov.w	r3, #0
 8046c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8046c6e:	4629      	mov	r1, r5
 8046c70:	024b      	lsls	r3, r1, #9
 8046c72:	4621      	mov	r1, r4
 8046c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8046c78:	4621      	mov	r1, r4
 8046c7a:	024a      	lsls	r2, r1, #9
 8046c7c:	4610      	mov	r0, r2
 8046c7e:	4619      	mov	r1, r3
 8046c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046c82:	2200      	movs	r2, #0
 8046c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8046c86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8046c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8046c8c:	f7f9 fb00 	bl	8040290 <__aeabi_uldivmod>
 8046c90:	4602      	mov	r2, r0
 8046c92:	460b      	mov	r3, r1
 8046c94:	4613      	mov	r3, r2
 8046c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046c98:	e058      	b.n	8046d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8046c9a:	4b38      	ldr	r3, [pc, #224]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046c9c:	685b      	ldr	r3, [r3, #4]
 8046c9e:	099b      	lsrs	r3, r3, #6
 8046ca0:	2200      	movs	r2, #0
 8046ca2:	4618      	mov	r0, r3
 8046ca4:	4611      	mov	r1, r2
 8046ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8046caa:	623b      	str	r3, [r7, #32]
 8046cac:	2300      	movs	r3, #0
 8046cae:	627b      	str	r3, [r7, #36]	; 0x24
 8046cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8046cb4:	4642      	mov	r2, r8
 8046cb6:	464b      	mov	r3, r9
 8046cb8:	f04f 0000 	mov.w	r0, #0
 8046cbc:	f04f 0100 	mov.w	r1, #0
 8046cc0:	0159      	lsls	r1, r3, #5
 8046cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8046cc6:	0150      	lsls	r0, r2, #5
 8046cc8:	4602      	mov	r2, r0
 8046cca:	460b      	mov	r3, r1
 8046ccc:	4641      	mov	r1, r8
 8046cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8046cd2:	4649      	mov	r1, r9
 8046cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8046cd8:	f04f 0200 	mov.w	r2, #0
 8046cdc:	f04f 0300 	mov.w	r3, #0
 8046ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8046ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8046ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8046cec:	ebb2 040a 	subs.w	r4, r2, sl
 8046cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8046cf4:	f04f 0200 	mov.w	r2, #0
 8046cf8:	f04f 0300 	mov.w	r3, #0
 8046cfc:	00eb      	lsls	r3, r5, #3
 8046cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8046d02:	00e2      	lsls	r2, r4, #3
 8046d04:	4614      	mov	r4, r2
 8046d06:	461d      	mov	r5, r3
 8046d08:	4643      	mov	r3, r8
 8046d0a:	18e3      	adds	r3, r4, r3
 8046d0c:	603b      	str	r3, [r7, #0]
 8046d0e:	464b      	mov	r3, r9
 8046d10:	eb45 0303 	adc.w	r3, r5, r3
 8046d14:	607b      	str	r3, [r7, #4]
 8046d16:	f04f 0200 	mov.w	r2, #0
 8046d1a:	f04f 0300 	mov.w	r3, #0
 8046d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8046d22:	4629      	mov	r1, r5
 8046d24:	028b      	lsls	r3, r1, #10
 8046d26:	4621      	mov	r1, r4
 8046d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8046d2c:	4621      	mov	r1, r4
 8046d2e:	028a      	lsls	r2, r1, #10
 8046d30:	4610      	mov	r0, r2
 8046d32:	4619      	mov	r1, r3
 8046d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8046d36:	2200      	movs	r2, #0
 8046d38:	61bb      	str	r3, [r7, #24]
 8046d3a:	61fa      	str	r2, [r7, #28]
 8046d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046d40:	f7f9 faa6 	bl	8040290 <__aeabi_uldivmod>
 8046d44:	4602      	mov	r2, r0
 8046d46:	460b      	mov	r3, r1
 8046d48:	4613      	mov	r3, r2
 8046d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8046d4c:	4b0b      	ldr	r3, [pc, #44]	; (8046d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8046d4e:	685b      	ldr	r3, [r3, #4]
 8046d50:	0c1b      	lsrs	r3, r3, #16
 8046d52:	f003 0303 	and.w	r3, r3, #3
 8046d56:	3301      	adds	r3, #1
 8046d58:	005b      	lsls	r3, r3, #1
 8046d5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8046d5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8046d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8046d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046d66:	e002      	b.n	8046d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8046d68:	4b05      	ldr	r3, [pc, #20]	; (8046d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8046d6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8046d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8046d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8046d70:	4618      	mov	r0, r3
 8046d72:	3750      	adds	r7, #80	; 0x50
 8046d74:	46bd      	mov	sp, r7
 8046d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046d7a:	bf00      	nop
 8046d7c:	40023800 	.word	0x40023800
 8046d80:	00f42400 	.word	0x00f42400
 8046d84:	007a1200 	.word	0x007a1200

08046d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046d88:	b480      	push	{r7}
 8046d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8046d8c:	4b03      	ldr	r3, [pc, #12]	; (8046d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8046d8e:	681b      	ldr	r3, [r3, #0]
}
 8046d90:	4618      	mov	r0, r3
 8046d92:	46bd      	mov	sp, r7
 8046d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d98:	4770      	bx	lr
 8046d9a:	bf00      	nop
 8046d9c:	20000000 	.word	0x20000000

08046da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8046da0:	b580      	push	{r7, lr}
 8046da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8046da4:	f7ff fff0 	bl	8046d88 <HAL_RCC_GetHCLKFreq>
 8046da8:	4602      	mov	r2, r0
 8046daa:	4b05      	ldr	r3, [pc, #20]	; (8046dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8046dac:	689b      	ldr	r3, [r3, #8]
 8046dae:	0a9b      	lsrs	r3, r3, #10
 8046db0:	f003 0307 	and.w	r3, r3, #7
 8046db4:	4903      	ldr	r1, [pc, #12]	; (8046dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8046db6:	5ccb      	ldrb	r3, [r1, r3]
 8046db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046dbc:	4618      	mov	r0, r3
 8046dbe:	bd80      	pop	{r7, pc}
 8046dc0:	40023800 	.word	0x40023800
 8046dc4:	0804dc8c 	.word	0x0804dc8c

08046dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8046dc8:	b580      	push	{r7, lr}
 8046dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8046dcc:	f7ff ffdc 	bl	8046d88 <HAL_RCC_GetHCLKFreq>
 8046dd0:	4602      	mov	r2, r0
 8046dd2:	4b05      	ldr	r3, [pc, #20]	; (8046de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8046dd4:	689b      	ldr	r3, [r3, #8]
 8046dd6:	0b5b      	lsrs	r3, r3, #13
 8046dd8:	f003 0307 	and.w	r3, r3, #7
 8046ddc:	4903      	ldr	r1, [pc, #12]	; (8046dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8046dde:	5ccb      	ldrb	r3, [r1, r3]
 8046de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046de4:	4618      	mov	r0, r3
 8046de6:	bd80      	pop	{r7, pc}
 8046de8:	40023800 	.word	0x40023800
 8046dec:	0804dc8c 	.word	0x0804dc8c

08046df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8046df0:	b480      	push	{r7}
 8046df2:	b083      	sub	sp, #12
 8046df4:	af00      	add	r7, sp, #0
 8046df6:	6078      	str	r0, [r7, #4]
 8046df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8046dfa:	687b      	ldr	r3, [r7, #4]
 8046dfc:	220f      	movs	r2, #15
 8046dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8046e00:	4b12      	ldr	r3, [pc, #72]	; (8046e4c <HAL_RCC_GetClockConfig+0x5c>)
 8046e02:	689b      	ldr	r3, [r3, #8]
 8046e04:	f003 0203 	and.w	r2, r3, #3
 8046e08:	687b      	ldr	r3, [r7, #4]
 8046e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8046e0c:	4b0f      	ldr	r3, [pc, #60]	; (8046e4c <HAL_RCC_GetClockConfig+0x5c>)
 8046e0e:	689b      	ldr	r3, [r3, #8]
 8046e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8046e14:	687b      	ldr	r3, [r7, #4]
 8046e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8046e18:	4b0c      	ldr	r3, [pc, #48]	; (8046e4c <HAL_RCC_GetClockConfig+0x5c>)
 8046e1a:	689b      	ldr	r3, [r3, #8]
 8046e1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8046e24:	4b09      	ldr	r3, [pc, #36]	; (8046e4c <HAL_RCC_GetClockConfig+0x5c>)
 8046e26:	689b      	ldr	r3, [r3, #8]
 8046e28:	08db      	lsrs	r3, r3, #3
 8046e2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8046e2e:	687b      	ldr	r3, [r7, #4]
 8046e30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8046e32:	4b07      	ldr	r3, [pc, #28]	; (8046e50 <HAL_RCC_GetClockConfig+0x60>)
 8046e34:	681b      	ldr	r3, [r3, #0]
 8046e36:	f003 020f 	and.w	r2, r3, #15
 8046e3a:	683b      	ldr	r3, [r7, #0]
 8046e3c:	601a      	str	r2, [r3, #0]
}
 8046e3e:	bf00      	nop
 8046e40:	370c      	adds	r7, #12
 8046e42:	46bd      	mov	sp, r7
 8046e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e48:	4770      	bx	lr
 8046e4a:	bf00      	nop
 8046e4c:	40023800 	.word	0x40023800
 8046e50:	40023c00 	.word	0x40023c00

08046e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8046e54:	b580      	push	{r7, lr}
 8046e56:	b086      	sub	sp, #24
 8046e58:	af00      	add	r7, sp, #0
 8046e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8046e5c:	2300      	movs	r3, #0
 8046e5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8046e60:	2300      	movs	r3, #0
 8046e62:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046e64:	687b      	ldr	r3, [r7, #4]
 8046e66:	681b      	ldr	r3, [r3, #0]
 8046e68:	f003 0301 	and.w	r3, r3, #1
 8046e6c:	2b00      	cmp	r3, #0
 8046e6e:	d10b      	bne.n	8046e88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046e70:	687b      	ldr	r3, [r7, #4]
 8046e72:	681b      	ldr	r3, [r3, #0]
 8046e74:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8046e78:	2b00      	cmp	r3, #0
 8046e7a:	d105      	bne.n	8046e88 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8046e7c:	687b      	ldr	r3, [r7, #4]
 8046e7e:	681b      	ldr	r3, [r3, #0]
 8046e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8046e84:	2b00      	cmp	r3, #0
 8046e86:	d075      	beq.n	8046f74 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8046e88:	4b91      	ldr	r3, [pc, #580]	; (80470d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046e8a:	2200      	movs	r2, #0
 8046e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046e8e:	f7fb ffaf 	bl	8042df0 <HAL_GetTick>
 8046e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046e94:	e008      	b.n	8046ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046e96:	f7fb ffab 	bl	8042df0 <HAL_GetTick>
 8046e9a:	4602      	mov	r2, r0
 8046e9c:	697b      	ldr	r3, [r7, #20]
 8046e9e:	1ad3      	subs	r3, r2, r3
 8046ea0:	2b02      	cmp	r3, #2
 8046ea2:	d901      	bls.n	8046ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046ea4:	2303      	movs	r3, #3
 8046ea6:	e189      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8046ea8:	4b8a      	ldr	r3, [pc, #552]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046eaa:	681b      	ldr	r3, [r3, #0]
 8046eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046eb0:	2b00      	cmp	r3, #0
 8046eb2:	d1f0      	bne.n	8046e96 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8046eb4:	687b      	ldr	r3, [r7, #4]
 8046eb6:	681b      	ldr	r3, [r3, #0]
 8046eb8:	f003 0301 	and.w	r3, r3, #1
 8046ebc:	2b00      	cmp	r3, #0
 8046ebe:	d009      	beq.n	8046ed4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8046ec0:	687b      	ldr	r3, [r7, #4]
 8046ec2:	685b      	ldr	r3, [r3, #4]
 8046ec4:	019a      	lsls	r2, r3, #6
 8046ec6:	687b      	ldr	r3, [r7, #4]
 8046ec8:	689b      	ldr	r3, [r3, #8]
 8046eca:	071b      	lsls	r3, r3, #28
 8046ecc:	4981      	ldr	r1, [pc, #516]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046ece:	4313      	orrs	r3, r2
 8046ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8046ed4:	687b      	ldr	r3, [r7, #4]
 8046ed6:	681b      	ldr	r3, [r3, #0]
 8046ed8:	f003 0302 	and.w	r3, r3, #2
 8046edc:	2b00      	cmp	r3, #0
 8046ede:	d01f      	beq.n	8046f20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8046ee0:	4b7c      	ldr	r3, [pc, #496]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046ee6:	0f1b      	lsrs	r3, r3, #28
 8046ee8:	f003 0307 	and.w	r3, r3, #7
 8046eec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8046eee:	687b      	ldr	r3, [r7, #4]
 8046ef0:	685b      	ldr	r3, [r3, #4]
 8046ef2:	019a      	lsls	r2, r3, #6
 8046ef4:	687b      	ldr	r3, [r7, #4]
 8046ef6:	68db      	ldr	r3, [r3, #12]
 8046ef8:	061b      	lsls	r3, r3, #24
 8046efa:	431a      	orrs	r2, r3
 8046efc:	693b      	ldr	r3, [r7, #16]
 8046efe:	071b      	lsls	r3, r3, #28
 8046f00:	4974      	ldr	r1, [pc, #464]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f02:	4313      	orrs	r3, r2
 8046f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8046f08:	4b72      	ldr	r3, [pc, #456]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046f0e:	f023 021f 	bic.w	r2, r3, #31
 8046f12:	687b      	ldr	r3, [r7, #4]
 8046f14:	69db      	ldr	r3, [r3, #28]
 8046f16:	3b01      	subs	r3, #1
 8046f18:	496e      	ldr	r1, [pc, #440]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f1a:	4313      	orrs	r3, r2
 8046f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8046f20:	687b      	ldr	r3, [r7, #4]
 8046f22:	681b      	ldr	r3, [r3, #0]
 8046f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046f28:	2b00      	cmp	r3, #0
 8046f2a:	d00d      	beq.n	8046f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8046f2c:	687b      	ldr	r3, [r7, #4]
 8046f2e:	685b      	ldr	r3, [r3, #4]
 8046f30:	019a      	lsls	r2, r3, #6
 8046f32:	687b      	ldr	r3, [r7, #4]
 8046f34:	68db      	ldr	r3, [r3, #12]
 8046f36:	061b      	lsls	r3, r3, #24
 8046f38:	431a      	orrs	r2, r3
 8046f3a:	687b      	ldr	r3, [r7, #4]
 8046f3c:	689b      	ldr	r3, [r3, #8]
 8046f3e:	071b      	lsls	r3, r3, #28
 8046f40:	4964      	ldr	r1, [pc, #400]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f42:	4313      	orrs	r3, r2
 8046f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8046f48:	4b61      	ldr	r3, [pc, #388]	; (80470d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8046f4a:	2201      	movs	r2, #1
 8046f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046f4e:	f7fb ff4f 	bl	8042df0 <HAL_GetTick>
 8046f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046f54:	e008      	b.n	8046f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8046f56:	f7fb ff4b 	bl	8042df0 <HAL_GetTick>
 8046f5a:	4602      	mov	r2, r0
 8046f5c:	697b      	ldr	r3, [r7, #20]
 8046f5e:	1ad3      	subs	r3, r2, r3
 8046f60:	2b02      	cmp	r3, #2
 8046f62:	d901      	bls.n	8046f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046f64:	2303      	movs	r3, #3
 8046f66:	e129      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8046f68:	4b5a      	ldr	r3, [pc, #360]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046f6a:	681b      	ldr	r3, [r3, #0]
 8046f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8046f70:	2b00      	cmp	r3, #0
 8046f72:	d0f0      	beq.n	8046f56 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046f74:	687b      	ldr	r3, [r7, #4]
 8046f76:	681b      	ldr	r3, [r3, #0]
 8046f78:	f003 0304 	and.w	r3, r3, #4
 8046f7c:	2b00      	cmp	r3, #0
 8046f7e:	d105      	bne.n	8046f8c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8046f80:	687b      	ldr	r3, [r7, #4]
 8046f82:	681b      	ldr	r3, [r3, #0]
 8046f84:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8046f88:	2b00      	cmp	r3, #0
 8046f8a:	d079      	beq.n	8047080 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8046f8c:	4b52      	ldr	r3, [pc, #328]	; (80470d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8046f8e:	2200      	movs	r2, #0
 8046f90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8046f92:	f7fb ff2d 	bl	8042df0 <HAL_GetTick>
 8046f96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046f98:	e008      	b.n	8046fac <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8046f9a:	f7fb ff29 	bl	8042df0 <HAL_GetTick>
 8046f9e:	4602      	mov	r2, r0
 8046fa0:	697b      	ldr	r3, [r7, #20]
 8046fa2:	1ad3      	subs	r3, r2, r3
 8046fa4:	2b02      	cmp	r3, #2
 8046fa6:	d901      	bls.n	8046fac <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8046fa8:	2303      	movs	r3, #3
 8046faa:	e107      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8046fac:	4b49      	ldr	r3, [pc, #292]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fae:	681b      	ldr	r3, [r3, #0]
 8046fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046fb8:	d0ef      	beq.n	8046f9a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8046fba:	687b      	ldr	r3, [r7, #4]
 8046fbc:	681b      	ldr	r3, [r3, #0]
 8046fbe:	f003 0304 	and.w	r3, r3, #4
 8046fc2:	2b00      	cmp	r3, #0
 8046fc4:	d020      	beq.n	8047008 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8046fc6:	4b43      	ldr	r3, [pc, #268]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046fcc:	0f1b      	lsrs	r3, r3, #28
 8046fce:	f003 0307 	and.w	r3, r3, #7
 8046fd2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8046fd4:	687b      	ldr	r3, [r7, #4]
 8046fd6:	691b      	ldr	r3, [r3, #16]
 8046fd8:	019a      	lsls	r2, r3, #6
 8046fda:	687b      	ldr	r3, [r7, #4]
 8046fdc:	695b      	ldr	r3, [r3, #20]
 8046fde:	061b      	lsls	r3, r3, #24
 8046fe0:	431a      	orrs	r2, r3
 8046fe2:	693b      	ldr	r3, [r7, #16]
 8046fe4:	071b      	lsls	r3, r3, #28
 8046fe6:	493b      	ldr	r1, [pc, #236]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046fe8:	4313      	orrs	r3, r2
 8046fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8046fee:	4b39      	ldr	r3, [pc, #228]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8046ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046ff4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8046ff8:	687b      	ldr	r3, [r7, #4]
 8046ffa:	6a1b      	ldr	r3, [r3, #32]
 8046ffc:	3b01      	subs	r3, #1
 8046ffe:	021b      	lsls	r3, r3, #8
 8047000:	4934      	ldr	r1, [pc, #208]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047002:	4313      	orrs	r3, r2
 8047004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8047008:	687b      	ldr	r3, [r7, #4]
 804700a:	681b      	ldr	r3, [r3, #0]
 804700c:	f003 0308 	and.w	r3, r3, #8
 8047010:	2b00      	cmp	r3, #0
 8047012:	d01e      	beq.n	8047052 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8047014:	4b2f      	ldr	r3, [pc, #188]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804701a:	0e1b      	lsrs	r3, r3, #24
 804701c:	f003 030f 	and.w	r3, r3, #15
 8047020:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8047022:	687b      	ldr	r3, [r7, #4]
 8047024:	691b      	ldr	r3, [r3, #16]
 8047026:	019a      	lsls	r2, r3, #6
 8047028:	693b      	ldr	r3, [r7, #16]
 804702a:	061b      	lsls	r3, r3, #24
 804702c:	431a      	orrs	r2, r3
 804702e:	687b      	ldr	r3, [r7, #4]
 8047030:	699b      	ldr	r3, [r3, #24]
 8047032:	071b      	lsls	r3, r3, #28
 8047034:	4927      	ldr	r1, [pc, #156]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047036:	4313      	orrs	r3, r2
 8047038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 804703c:	4b25      	ldr	r3, [pc, #148]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8047042:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8047046:	687b      	ldr	r3, [r7, #4]
 8047048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804704a:	4922      	ldr	r1, [pc, #136]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804704c:	4313      	orrs	r3, r2
 804704e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8047052:	4b21      	ldr	r3, [pc, #132]	; (80470d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8047054:	2201      	movs	r2, #1
 8047056:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047058:	f7fb feca 	bl	8042df0 <HAL_GetTick>
 804705c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804705e:	e008      	b.n	8047072 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8047060:	f7fb fec6 	bl	8042df0 <HAL_GetTick>
 8047064:	4602      	mov	r2, r0
 8047066:	697b      	ldr	r3, [r7, #20]
 8047068:	1ad3      	subs	r3, r2, r3
 804706a:	2b02      	cmp	r3, #2
 804706c:	d901      	bls.n	8047072 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804706e:	2303      	movs	r3, #3
 8047070:	e0a4      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8047072:	4b18      	ldr	r3, [pc, #96]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047074:	681b      	ldr	r3, [r3, #0]
 8047076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804707a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804707e:	d1ef      	bne.n	8047060 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8047080:	687b      	ldr	r3, [r7, #4]
 8047082:	681b      	ldr	r3, [r3, #0]
 8047084:	f003 0320 	and.w	r3, r3, #32
 8047088:	2b00      	cmp	r3, #0
 804708a:	f000 808b 	beq.w	80471a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 804708e:	2300      	movs	r3, #0
 8047090:	60fb      	str	r3, [r7, #12]
 8047092:	4b10      	ldr	r3, [pc, #64]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047096:	4a0f      	ldr	r2, [pc, #60]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804709c:	6413      	str	r3, [r2, #64]	; 0x40
 804709e:	4b0d      	ldr	r3, [pc, #52]	; (80470d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80470a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80470a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80470a6:	60fb      	str	r3, [r7, #12]
 80470a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80470aa:	4b0c      	ldr	r3, [pc, #48]	; (80470dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80470ac:	681b      	ldr	r3, [r3, #0]
 80470ae:	4a0b      	ldr	r2, [pc, #44]	; (80470dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80470b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80470b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80470b6:	f7fb fe9b 	bl	8042df0 <HAL_GetTick>
 80470ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80470bc:	e010      	b.n	80470e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80470be:	f7fb fe97 	bl	8042df0 <HAL_GetTick>
 80470c2:	4602      	mov	r2, r0
 80470c4:	697b      	ldr	r3, [r7, #20]
 80470c6:	1ad3      	subs	r3, r2, r3
 80470c8:	2b02      	cmp	r3, #2
 80470ca:	d909      	bls.n	80470e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80470cc:	2303      	movs	r3, #3
 80470ce:	e075      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80470d0:	42470068 	.word	0x42470068
 80470d4:	40023800 	.word	0x40023800
 80470d8:	42470070 	.word	0x42470070
 80470dc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80470e0:	4b38      	ldr	r3, [pc, #224]	; (80471c4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80470e2:	681b      	ldr	r3, [r3, #0]
 80470e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80470e8:	2b00      	cmp	r3, #0
 80470ea:	d0e8      	beq.n	80470be <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80470ec:	4b36      	ldr	r3, [pc, #216]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80470ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80470f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80470f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80470f6:	693b      	ldr	r3, [r7, #16]
 80470f8:	2b00      	cmp	r3, #0
 80470fa:	d02f      	beq.n	804715c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80470fc:	687b      	ldr	r3, [r7, #4]
 80470fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047104:	693a      	ldr	r2, [r7, #16]
 8047106:	429a      	cmp	r2, r3
 8047108:	d028      	beq.n	804715c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 804710a:	4b2f      	ldr	r3, [pc, #188]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804710e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047112:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8047114:	4b2d      	ldr	r3, [pc, #180]	; (80471cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8047116:	2201      	movs	r2, #1
 8047118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 804711a:	4b2c      	ldr	r3, [pc, #176]	; (80471cc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 804711c:	2200      	movs	r2, #0
 804711e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8047120:	4a29      	ldr	r2, [pc, #164]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047122:	693b      	ldr	r3, [r7, #16]
 8047124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8047126:	4b28      	ldr	r3, [pc, #160]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804712a:	f003 0301 	and.w	r3, r3, #1
 804712e:	2b01      	cmp	r3, #1
 8047130:	d114      	bne.n	804715c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8047132:	f7fb fe5d 	bl	8042df0 <HAL_GetTick>
 8047136:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047138:	e00a      	b.n	8047150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804713a:	f7fb fe59 	bl	8042df0 <HAL_GetTick>
 804713e:	4602      	mov	r2, r0
 8047140:	697b      	ldr	r3, [r7, #20]
 8047142:	1ad3      	subs	r3, r2, r3
 8047144:	f241 3288 	movw	r2, #5000	; 0x1388
 8047148:	4293      	cmp	r3, r2
 804714a:	d901      	bls.n	8047150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 804714c:	2303      	movs	r3, #3
 804714e:	e035      	b.n	80471bc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047150:	4b1d      	ldr	r3, [pc, #116]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047154:	f003 0302 	and.w	r3, r3, #2
 8047158:	2b00      	cmp	r3, #0
 804715a:	d0ee      	beq.n	804713a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804715c:	687b      	ldr	r3, [r7, #4]
 804715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8047168:	d10d      	bne.n	8047186 <HAL_RCCEx_PeriphCLKConfig+0x332>
 804716a:	4b17      	ldr	r3, [pc, #92]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804716c:	689b      	ldr	r3, [r3, #8]
 804716e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8047172:	687b      	ldr	r3, [r7, #4]
 8047174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047176:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 804717a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804717e:	4912      	ldr	r1, [pc, #72]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047180:	4313      	orrs	r3, r2
 8047182:	608b      	str	r3, [r1, #8]
 8047184:	e005      	b.n	8047192 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8047186:	4b10      	ldr	r3, [pc, #64]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047188:	689b      	ldr	r3, [r3, #8]
 804718a:	4a0f      	ldr	r2, [pc, #60]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804718c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8047190:	6093      	str	r3, [r2, #8]
 8047192:	4b0d      	ldr	r3, [pc, #52]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8047196:	687b      	ldr	r3, [r7, #4]
 8047198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804719a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804719e:	490a      	ldr	r1, [pc, #40]	; (80471c8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80471a0:	4313      	orrs	r3, r2
 80471a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80471a4:	687b      	ldr	r3, [r7, #4]
 80471a6:	681b      	ldr	r3, [r3, #0]
 80471a8:	f003 0310 	and.w	r3, r3, #16
 80471ac:	2b00      	cmp	r3, #0
 80471ae:	d004      	beq.n	80471ba <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80471b0:	687b      	ldr	r3, [r7, #4]
 80471b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80471b6:	4b06      	ldr	r3, [pc, #24]	; (80471d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80471b8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80471ba:	2300      	movs	r3, #0
}
 80471bc:	4618      	mov	r0, r3
 80471be:	3718      	adds	r7, #24
 80471c0:	46bd      	mov	sp, r7
 80471c2:	bd80      	pop	{r7, pc}
 80471c4:	40007000 	.word	0x40007000
 80471c8:	40023800 	.word	0x40023800
 80471cc:	42470e40 	.word	0x42470e40
 80471d0:	424711e0 	.word	0x424711e0

080471d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80471d4:	b580      	push	{r7, lr}
 80471d6:	b082      	sub	sp, #8
 80471d8:	af00      	add	r7, sp, #0
 80471da:	6078      	str	r0, [r7, #4]
 80471dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80471de:	687b      	ldr	r3, [r7, #4]
 80471e0:	2b00      	cmp	r3, #0
 80471e2:	d101      	bne.n	80471e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80471e4:	2301      	movs	r3, #1
 80471e6:	e025      	b.n	8047234 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80471e8:	687b      	ldr	r3, [r7, #4]
 80471ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80471ee:	b2db      	uxtb	r3, r3
 80471f0:	2b00      	cmp	r3, #0
 80471f2:	d106      	bne.n	8047202 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80471f4:	687b      	ldr	r3, [r7, #4]
 80471f6:	2200      	movs	r2, #0
 80471f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80471fc:	6878      	ldr	r0, [r7, #4]
 80471fe:	f7fa fa09 	bl	8041614 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047202:	687b      	ldr	r3, [r7, #4]
 8047204:	2202      	movs	r2, #2
 8047206:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 804720a:	687b      	ldr	r3, [r7, #4]
 804720c:	681a      	ldr	r2, [r3, #0]
 804720e:	687b      	ldr	r3, [r7, #4]
 8047210:	3304      	adds	r3, #4
 8047212:	4619      	mov	r1, r3
 8047214:	4610      	mov	r0, r2
 8047216:	f001 fe91 	bl	8048f3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 804721a:	687b      	ldr	r3, [r7, #4]
 804721c:	6818      	ldr	r0, [r3, #0]
 804721e:	687b      	ldr	r3, [r7, #4]
 8047220:	685b      	ldr	r3, [r3, #4]
 8047222:	461a      	mov	r2, r3
 8047224:	6839      	ldr	r1, [r7, #0]
 8047226:	f001 fee6 	bl	8048ff6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 804722a:	687b      	ldr	r3, [r7, #4]
 804722c:	2201      	movs	r2, #1
 804722e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8047232:	2300      	movs	r3, #0
}
 8047234:	4618      	mov	r0, r3
 8047236:	3708      	adds	r7, #8
 8047238:	46bd      	mov	sp, r7
 804723a:	bd80      	pop	{r7, pc}

0804723c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 804723c:	b580      	push	{r7, lr}
 804723e:	b086      	sub	sp, #24
 8047240:	af00      	add	r7, sp, #0
 8047242:	60f8      	str	r0, [r7, #12]
 8047244:	60b9      	str	r1, [r7, #8]
 8047246:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8047248:	68fb      	ldr	r3, [r7, #12]
 804724a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804724e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8047250:	7dfb      	ldrb	r3, [r7, #23]
 8047252:	2b02      	cmp	r3, #2
 8047254:	d101      	bne.n	804725a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8047256:	2302      	movs	r3, #2
 8047258:	e021      	b.n	804729e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 804725a:	7dfb      	ldrb	r3, [r7, #23]
 804725c:	2b01      	cmp	r3, #1
 804725e:	d002      	beq.n	8047266 <HAL_SDRAM_SendCommand+0x2a>
 8047260:	7dfb      	ldrb	r3, [r7, #23]
 8047262:	2b05      	cmp	r3, #5
 8047264:	d118      	bne.n	8047298 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047266:	68fb      	ldr	r3, [r7, #12]
 8047268:	2202      	movs	r2, #2
 804726a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 804726e:	68fb      	ldr	r3, [r7, #12]
 8047270:	681b      	ldr	r3, [r3, #0]
 8047272:	687a      	ldr	r2, [r7, #4]
 8047274:	68b9      	ldr	r1, [r7, #8]
 8047276:	4618      	mov	r0, r3
 8047278:	f001 ff26 	bl	80490c8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 804727c:	68bb      	ldr	r3, [r7, #8]
 804727e:	681b      	ldr	r3, [r3, #0]
 8047280:	2b02      	cmp	r3, #2
 8047282:	d104      	bne.n	804728e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8047284:	68fb      	ldr	r3, [r7, #12]
 8047286:	2205      	movs	r2, #5
 8047288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 804728c:	e006      	b.n	804729c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 804728e:	68fb      	ldr	r3, [r7, #12]
 8047290:	2201      	movs	r2, #1
 8047292:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047296:	e001      	b.n	804729c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8047298:	2301      	movs	r3, #1
 804729a:	e000      	b.n	804729e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 804729c:	2300      	movs	r3, #0
}
 804729e:	4618      	mov	r0, r3
 80472a0:	3718      	adds	r7, #24
 80472a2:	46bd      	mov	sp, r7
 80472a4:	bd80      	pop	{r7, pc}

080472a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80472a6:	b580      	push	{r7, lr}
 80472a8:	b082      	sub	sp, #8
 80472aa:	af00      	add	r7, sp, #0
 80472ac:	6078      	str	r0, [r7, #4]
 80472ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80472b0:	687b      	ldr	r3, [r7, #4]
 80472b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80472b6:	b2db      	uxtb	r3, r3
 80472b8:	2b02      	cmp	r3, #2
 80472ba:	d101      	bne.n	80472c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80472bc:	2302      	movs	r3, #2
 80472be:	e016      	b.n	80472ee <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80472c0:	687b      	ldr	r3, [r7, #4]
 80472c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80472c6:	b2db      	uxtb	r3, r3
 80472c8:	2b01      	cmp	r3, #1
 80472ca:	d10f      	bne.n	80472ec <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80472cc:	687b      	ldr	r3, [r7, #4]
 80472ce:	2202      	movs	r2, #2
 80472d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80472d4:	687b      	ldr	r3, [r7, #4]
 80472d6:	681b      	ldr	r3, [r3, #0]
 80472d8:	6839      	ldr	r1, [r7, #0]
 80472da:	4618      	mov	r0, r3
 80472dc:	f001 ff31 	bl	8049142 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80472e0:	687b      	ldr	r3, [r7, #4]
 80472e2:	2201      	movs	r2, #1
 80472e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80472e8:	2300      	movs	r3, #0
 80472ea:	e000      	b.n	80472ee <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80472ec:	2301      	movs	r3, #1
}
 80472ee:	4618      	mov	r0, r3
 80472f0:	3708      	adds	r7, #8
 80472f2:	46bd      	mov	sp, r7
 80472f4:	bd80      	pop	{r7, pc}

080472f6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80472f6:	b580      	push	{r7, lr}
 80472f8:	b082      	sub	sp, #8
 80472fa:	af00      	add	r7, sp, #0
 80472fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80472fe:	687b      	ldr	r3, [r7, #4]
 8047300:	2b00      	cmp	r3, #0
 8047302:	d101      	bne.n	8047308 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8047304:	2301      	movs	r3, #1
 8047306:	e07b      	b.n	8047400 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8047308:	687b      	ldr	r3, [r7, #4]
 804730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804730c:	2b00      	cmp	r3, #0
 804730e:	d108      	bne.n	8047322 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047310:	687b      	ldr	r3, [r7, #4]
 8047312:	685b      	ldr	r3, [r3, #4]
 8047314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047318:	d009      	beq.n	804732e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 804731a:	687b      	ldr	r3, [r7, #4]
 804731c:	2200      	movs	r2, #0
 804731e:	61da      	str	r2, [r3, #28]
 8047320:	e005      	b.n	804732e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8047322:	687b      	ldr	r3, [r7, #4]
 8047324:	2200      	movs	r2, #0
 8047326:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8047328:	687b      	ldr	r3, [r7, #4]
 804732a:	2200      	movs	r2, #0
 804732c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804732e:	687b      	ldr	r3, [r7, #4]
 8047330:	2200      	movs	r2, #0
 8047332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8047334:	687b      	ldr	r3, [r7, #4]
 8047336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804733a:	b2db      	uxtb	r3, r3
 804733c:	2b00      	cmp	r3, #0
 804733e:	d106      	bne.n	804734e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8047340:	687b      	ldr	r3, [r7, #4]
 8047342:	2200      	movs	r2, #0
 8047344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8047348:	6878      	ldr	r0, [r7, #4]
 804734a:	f7fa f801 	bl	8041350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804734e:	687b      	ldr	r3, [r7, #4]
 8047350:	2202      	movs	r2, #2
 8047352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8047356:	687b      	ldr	r3, [r7, #4]
 8047358:	681b      	ldr	r3, [r3, #0]
 804735a:	681a      	ldr	r2, [r3, #0]
 804735c:	687b      	ldr	r3, [r7, #4]
 804735e:	681b      	ldr	r3, [r3, #0]
 8047360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047364:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8047366:	687b      	ldr	r3, [r7, #4]
 8047368:	685b      	ldr	r3, [r3, #4]
 804736a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804736e:	687b      	ldr	r3, [r7, #4]
 8047370:	689b      	ldr	r3, [r3, #8]
 8047372:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8047376:	431a      	orrs	r2, r3
 8047378:	687b      	ldr	r3, [r7, #4]
 804737a:	68db      	ldr	r3, [r3, #12]
 804737c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8047380:	431a      	orrs	r2, r3
 8047382:	687b      	ldr	r3, [r7, #4]
 8047384:	691b      	ldr	r3, [r3, #16]
 8047386:	f003 0302 	and.w	r3, r3, #2
 804738a:	431a      	orrs	r2, r3
 804738c:	687b      	ldr	r3, [r7, #4]
 804738e:	695b      	ldr	r3, [r3, #20]
 8047390:	f003 0301 	and.w	r3, r3, #1
 8047394:	431a      	orrs	r2, r3
 8047396:	687b      	ldr	r3, [r7, #4]
 8047398:	699b      	ldr	r3, [r3, #24]
 804739a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804739e:	431a      	orrs	r2, r3
 80473a0:	687b      	ldr	r3, [r7, #4]
 80473a2:	69db      	ldr	r3, [r3, #28]
 80473a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80473a8:	431a      	orrs	r2, r3
 80473aa:	687b      	ldr	r3, [r7, #4]
 80473ac:	6a1b      	ldr	r3, [r3, #32]
 80473ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80473b2:	ea42 0103 	orr.w	r1, r2, r3
 80473b6:	687b      	ldr	r3, [r7, #4]
 80473b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80473ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80473be:	687b      	ldr	r3, [r7, #4]
 80473c0:	681b      	ldr	r3, [r3, #0]
 80473c2:	430a      	orrs	r2, r1
 80473c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80473c6:	687b      	ldr	r3, [r7, #4]
 80473c8:	699b      	ldr	r3, [r3, #24]
 80473ca:	0c1b      	lsrs	r3, r3, #16
 80473cc:	f003 0104 	and.w	r1, r3, #4
 80473d0:	687b      	ldr	r3, [r7, #4]
 80473d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80473d4:	f003 0210 	and.w	r2, r3, #16
 80473d8:	687b      	ldr	r3, [r7, #4]
 80473da:	681b      	ldr	r3, [r3, #0]
 80473dc:	430a      	orrs	r2, r1
 80473de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	681b      	ldr	r3, [r3, #0]
 80473e4:	69da      	ldr	r2, [r3, #28]
 80473e6:	687b      	ldr	r3, [r7, #4]
 80473e8:	681b      	ldr	r3, [r3, #0]
 80473ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80473ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80473f0:	687b      	ldr	r3, [r7, #4]
 80473f2:	2200      	movs	r2, #0
 80473f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80473f6:	687b      	ldr	r3, [r7, #4]
 80473f8:	2201      	movs	r2, #1
 80473fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80473fe:	2300      	movs	r3, #0
}
 8047400:	4618      	mov	r0, r3
 8047402:	3708      	adds	r7, #8
 8047404:	46bd      	mov	sp, r7
 8047406:	bd80      	pop	{r7, pc}

08047408 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8047408:	b580      	push	{r7, lr}
 804740a:	b082      	sub	sp, #8
 804740c:	af00      	add	r7, sp, #0
 804740e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047410:	687b      	ldr	r3, [r7, #4]
 8047412:	2b00      	cmp	r3, #0
 8047414:	d101      	bne.n	804741a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8047416:	2301      	movs	r3, #1
 8047418:	e01a      	b.n	8047450 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 804741a:	687b      	ldr	r3, [r7, #4]
 804741c:	2202      	movs	r2, #2
 804741e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8047422:	687b      	ldr	r3, [r7, #4]
 8047424:	681b      	ldr	r3, [r3, #0]
 8047426:	681a      	ldr	r2, [r3, #0]
 8047428:	687b      	ldr	r3, [r7, #4]
 804742a:	681b      	ldr	r3, [r3, #0]
 804742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047430:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8047432:	6878      	ldr	r0, [r7, #4]
 8047434:	f7f9 ffd4 	bl	80413e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8047438:	687b      	ldr	r3, [r7, #4]
 804743a:	2200      	movs	r2, #0
 804743c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 804743e:	687b      	ldr	r3, [r7, #4]
 8047440:	2200      	movs	r2, #0
 8047442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8047446:	687b      	ldr	r3, [r7, #4]
 8047448:	2200      	movs	r2, #0
 804744a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 804744e:	2300      	movs	r3, #0
}
 8047450:	4618      	mov	r0, r3
 8047452:	3708      	adds	r7, #8
 8047454:	46bd      	mov	sp, r7
 8047456:	bd80      	pop	{r7, pc}

08047458 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047458:	b580      	push	{r7, lr}
 804745a:	b088      	sub	sp, #32
 804745c:	af00      	add	r7, sp, #0
 804745e:	60f8      	str	r0, [r7, #12]
 8047460:	60b9      	str	r1, [r7, #8]
 8047462:	603b      	str	r3, [r7, #0]
 8047464:	4613      	mov	r3, r2
 8047466:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047468:	2300      	movs	r3, #0
 804746a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804746c:	68fb      	ldr	r3, [r7, #12]
 804746e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047472:	2b01      	cmp	r3, #1
 8047474:	d101      	bne.n	804747a <HAL_SPI_Transmit+0x22>
 8047476:	2302      	movs	r3, #2
 8047478:	e126      	b.n	80476c8 <HAL_SPI_Transmit+0x270>
 804747a:	68fb      	ldr	r3, [r7, #12]
 804747c:	2201      	movs	r2, #1
 804747e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047482:	f7fb fcb5 	bl	8042df0 <HAL_GetTick>
 8047486:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8047488:	88fb      	ldrh	r3, [r7, #6]
 804748a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 804748c:	68fb      	ldr	r3, [r7, #12]
 804748e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047492:	b2db      	uxtb	r3, r3
 8047494:	2b01      	cmp	r3, #1
 8047496:	d002      	beq.n	804749e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8047498:	2302      	movs	r3, #2
 804749a:	77fb      	strb	r3, [r7, #31]
    goto error;
 804749c:	e10b      	b.n	80476b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 804749e:	68bb      	ldr	r3, [r7, #8]
 80474a0:	2b00      	cmp	r3, #0
 80474a2:	d002      	beq.n	80474aa <HAL_SPI_Transmit+0x52>
 80474a4:	88fb      	ldrh	r3, [r7, #6]
 80474a6:	2b00      	cmp	r3, #0
 80474a8:	d102      	bne.n	80474b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80474aa:	2301      	movs	r3, #1
 80474ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80474ae:	e102      	b.n	80476b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80474b0:	68fb      	ldr	r3, [r7, #12]
 80474b2:	2203      	movs	r2, #3
 80474b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80474b8:	68fb      	ldr	r3, [r7, #12]
 80474ba:	2200      	movs	r2, #0
 80474bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80474be:	68fb      	ldr	r3, [r7, #12]
 80474c0:	68ba      	ldr	r2, [r7, #8]
 80474c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80474c4:	68fb      	ldr	r3, [r7, #12]
 80474c6:	88fa      	ldrh	r2, [r7, #6]
 80474c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80474ca:	68fb      	ldr	r3, [r7, #12]
 80474cc:	88fa      	ldrh	r2, [r7, #6]
 80474ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80474d0:	68fb      	ldr	r3, [r7, #12]
 80474d2:	2200      	movs	r2, #0
 80474d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80474d6:	68fb      	ldr	r3, [r7, #12]
 80474d8:	2200      	movs	r2, #0
 80474da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80474dc:	68fb      	ldr	r3, [r7, #12]
 80474de:	2200      	movs	r2, #0
 80474e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80474e2:	68fb      	ldr	r3, [r7, #12]
 80474e4:	2200      	movs	r2, #0
 80474e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80474e8:	68fb      	ldr	r3, [r7, #12]
 80474ea:	2200      	movs	r2, #0
 80474ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80474ee:	68fb      	ldr	r3, [r7, #12]
 80474f0:	689b      	ldr	r3, [r3, #8]
 80474f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80474f6:	d10f      	bne.n	8047518 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80474f8:	68fb      	ldr	r3, [r7, #12]
 80474fa:	681b      	ldr	r3, [r3, #0]
 80474fc:	681a      	ldr	r2, [r3, #0]
 80474fe:	68fb      	ldr	r3, [r7, #12]
 8047500:	681b      	ldr	r3, [r3, #0]
 8047502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047506:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8047508:	68fb      	ldr	r3, [r7, #12]
 804750a:	681b      	ldr	r3, [r3, #0]
 804750c:	681a      	ldr	r2, [r3, #0]
 804750e:	68fb      	ldr	r3, [r7, #12]
 8047510:	681b      	ldr	r3, [r3, #0]
 8047512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8047516:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047518:	68fb      	ldr	r3, [r7, #12]
 804751a:	681b      	ldr	r3, [r3, #0]
 804751c:	681b      	ldr	r3, [r3, #0]
 804751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047522:	2b40      	cmp	r3, #64	; 0x40
 8047524:	d007      	beq.n	8047536 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047526:	68fb      	ldr	r3, [r7, #12]
 8047528:	681b      	ldr	r3, [r3, #0]
 804752a:	681a      	ldr	r2, [r3, #0]
 804752c:	68fb      	ldr	r3, [r7, #12]
 804752e:	681b      	ldr	r3, [r3, #0]
 8047530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047536:	68fb      	ldr	r3, [r7, #12]
 8047538:	68db      	ldr	r3, [r3, #12]
 804753a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804753e:	d14b      	bne.n	80475d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047540:	68fb      	ldr	r3, [r7, #12]
 8047542:	685b      	ldr	r3, [r3, #4]
 8047544:	2b00      	cmp	r3, #0
 8047546:	d002      	beq.n	804754e <HAL_SPI_Transmit+0xf6>
 8047548:	8afb      	ldrh	r3, [r7, #22]
 804754a:	2b01      	cmp	r3, #1
 804754c:	d13e      	bne.n	80475cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804754e:	68fb      	ldr	r3, [r7, #12]
 8047550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047552:	881a      	ldrh	r2, [r3, #0]
 8047554:	68fb      	ldr	r3, [r7, #12]
 8047556:	681b      	ldr	r3, [r3, #0]
 8047558:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804755a:	68fb      	ldr	r3, [r7, #12]
 804755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804755e:	1c9a      	adds	r2, r3, #2
 8047560:	68fb      	ldr	r3, [r7, #12]
 8047562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047564:	68fb      	ldr	r3, [r7, #12]
 8047566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047568:	b29b      	uxth	r3, r3
 804756a:	3b01      	subs	r3, #1
 804756c:	b29a      	uxth	r2, r3
 804756e:	68fb      	ldr	r3, [r7, #12]
 8047570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8047572:	e02b      	b.n	80475cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047574:	68fb      	ldr	r3, [r7, #12]
 8047576:	681b      	ldr	r3, [r3, #0]
 8047578:	689b      	ldr	r3, [r3, #8]
 804757a:	f003 0302 	and.w	r3, r3, #2
 804757e:	2b02      	cmp	r3, #2
 8047580:	d112      	bne.n	80475a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047582:	68fb      	ldr	r3, [r7, #12]
 8047584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047586:	881a      	ldrh	r2, [r3, #0]
 8047588:	68fb      	ldr	r3, [r7, #12]
 804758a:	681b      	ldr	r3, [r3, #0]
 804758c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804758e:	68fb      	ldr	r3, [r7, #12]
 8047590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047592:	1c9a      	adds	r2, r3, #2
 8047594:	68fb      	ldr	r3, [r7, #12]
 8047596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047598:	68fb      	ldr	r3, [r7, #12]
 804759a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804759c:	b29b      	uxth	r3, r3
 804759e:	3b01      	subs	r3, #1
 80475a0:	b29a      	uxth	r2, r3
 80475a2:	68fb      	ldr	r3, [r7, #12]
 80475a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80475a6:	e011      	b.n	80475cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80475a8:	f7fb fc22 	bl	8042df0 <HAL_GetTick>
 80475ac:	4602      	mov	r2, r0
 80475ae:	69bb      	ldr	r3, [r7, #24]
 80475b0:	1ad3      	subs	r3, r2, r3
 80475b2:	683a      	ldr	r2, [r7, #0]
 80475b4:	429a      	cmp	r2, r3
 80475b6:	d803      	bhi.n	80475c0 <HAL_SPI_Transmit+0x168>
 80475b8:	683b      	ldr	r3, [r7, #0]
 80475ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80475be:	d102      	bne.n	80475c6 <HAL_SPI_Transmit+0x16e>
 80475c0:	683b      	ldr	r3, [r7, #0]
 80475c2:	2b00      	cmp	r3, #0
 80475c4:	d102      	bne.n	80475cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80475c6:	2303      	movs	r3, #3
 80475c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80475ca:	e074      	b.n	80476b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80475cc:	68fb      	ldr	r3, [r7, #12]
 80475ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80475d0:	b29b      	uxth	r3, r3
 80475d2:	2b00      	cmp	r3, #0
 80475d4:	d1ce      	bne.n	8047574 <HAL_SPI_Transmit+0x11c>
 80475d6:	e04c      	b.n	8047672 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80475d8:	68fb      	ldr	r3, [r7, #12]
 80475da:	685b      	ldr	r3, [r3, #4]
 80475dc:	2b00      	cmp	r3, #0
 80475de:	d002      	beq.n	80475e6 <HAL_SPI_Transmit+0x18e>
 80475e0:	8afb      	ldrh	r3, [r7, #22]
 80475e2:	2b01      	cmp	r3, #1
 80475e4:	d140      	bne.n	8047668 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80475e6:	68fb      	ldr	r3, [r7, #12]
 80475e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80475ea:	68fb      	ldr	r3, [r7, #12]
 80475ec:	681b      	ldr	r3, [r3, #0]
 80475ee:	330c      	adds	r3, #12
 80475f0:	7812      	ldrb	r2, [r2, #0]
 80475f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80475f4:	68fb      	ldr	r3, [r7, #12]
 80475f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80475f8:	1c5a      	adds	r2, r3, #1
 80475fa:	68fb      	ldr	r3, [r7, #12]
 80475fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80475fe:	68fb      	ldr	r3, [r7, #12]
 8047600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047602:	b29b      	uxth	r3, r3
 8047604:	3b01      	subs	r3, #1
 8047606:	b29a      	uxth	r2, r3
 8047608:	68fb      	ldr	r3, [r7, #12]
 804760a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 804760c:	e02c      	b.n	8047668 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 804760e:	68fb      	ldr	r3, [r7, #12]
 8047610:	681b      	ldr	r3, [r3, #0]
 8047612:	689b      	ldr	r3, [r3, #8]
 8047614:	f003 0302 	and.w	r3, r3, #2
 8047618:	2b02      	cmp	r3, #2
 804761a:	d113      	bne.n	8047644 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 804761c:	68fb      	ldr	r3, [r7, #12]
 804761e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047620:	68fb      	ldr	r3, [r7, #12]
 8047622:	681b      	ldr	r3, [r3, #0]
 8047624:	330c      	adds	r3, #12
 8047626:	7812      	ldrb	r2, [r2, #0]
 8047628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 804762a:	68fb      	ldr	r3, [r7, #12]
 804762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804762e:	1c5a      	adds	r2, r3, #1
 8047630:	68fb      	ldr	r3, [r7, #12]
 8047632:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047634:	68fb      	ldr	r3, [r7, #12]
 8047636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047638:	b29b      	uxth	r3, r3
 804763a:	3b01      	subs	r3, #1
 804763c:	b29a      	uxth	r2, r3
 804763e:	68fb      	ldr	r3, [r7, #12]
 8047640:	86da      	strh	r2, [r3, #54]	; 0x36
 8047642:	e011      	b.n	8047668 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047644:	f7fb fbd4 	bl	8042df0 <HAL_GetTick>
 8047648:	4602      	mov	r2, r0
 804764a:	69bb      	ldr	r3, [r7, #24]
 804764c:	1ad3      	subs	r3, r2, r3
 804764e:	683a      	ldr	r2, [r7, #0]
 8047650:	429a      	cmp	r2, r3
 8047652:	d803      	bhi.n	804765c <HAL_SPI_Transmit+0x204>
 8047654:	683b      	ldr	r3, [r7, #0]
 8047656:	f1b3 3fff 	cmp.w	r3, #4294967295
 804765a:	d102      	bne.n	8047662 <HAL_SPI_Transmit+0x20a>
 804765c:	683b      	ldr	r3, [r7, #0]
 804765e:	2b00      	cmp	r3, #0
 8047660:	d102      	bne.n	8047668 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8047662:	2303      	movs	r3, #3
 8047664:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047666:	e026      	b.n	80476b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047668:	68fb      	ldr	r3, [r7, #12]
 804766a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804766c:	b29b      	uxth	r3, r3
 804766e:	2b00      	cmp	r3, #0
 8047670:	d1cd      	bne.n	804760e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047672:	69ba      	ldr	r2, [r7, #24]
 8047674:	6839      	ldr	r1, [r7, #0]
 8047676:	68f8      	ldr	r0, [r7, #12]
 8047678:	f000 fbda 	bl	8047e30 <SPI_EndRxTxTransaction>
 804767c:	4603      	mov	r3, r0
 804767e:	2b00      	cmp	r3, #0
 8047680:	d002      	beq.n	8047688 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047682:	68fb      	ldr	r3, [r7, #12]
 8047684:	2220      	movs	r2, #32
 8047686:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047688:	68fb      	ldr	r3, [r7, #12]
 804768a:	689b      	ldr	r3, [r3, #8]
 804768c:	2b00      	cmp	r3, #0
 804768e:	d10a      	bne.n	80476a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047690:	2300      	movs	r3, #0
 8047692:	613b      	str	r3, [r7, #16]
 8047694:	68fb      	ldr	r3, [r7, #12]
 8047696:	681b      	ldr	r3, [r3, #0]
 8047698:	68db      	ldr	r3, [r3, #12]
 804769a:	613b      	str	r3, [r7, #16]
 804769c:	68fb      	ldr	r3, [r7, #12]
 804769e:	681b      	ldr	r3, [r3, #0]
 80476a0:	689b      	ldr	r3, [r3, #8]
 80476a2:	613b      	str	r3, [r7, #16]
 80476a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80476a6:	68fb      	ldr	r3, [r7, #12]
 80476a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80476aa:	2b00      	cmp	r3, #0
 80476ac:	d002      	beq.n	80476b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80476ae:	2301      	movs	r3, #1
 80476b0:	77fb      	strb	r3, [r7, #31]
 80476b2:	e000      	b.n	80476b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80476b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80476b6:	68fb      	ldr	r3, [r7, #12]
 80476b8:	2201      	movs	r2, #1
 80476ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80476be:	68fb      	ldr	r3, [r7, #12]
 80476c0:	2200      	movs	r2, #0
 80476c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80476c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80476c8:	4618      	mov	r0, r3
 80476ca:	3720      	adds	r7, #32
 80476cc:	46bd      	mov	sp, r7
 80476ce:	bd80      	pop	{r7, pc}

080476d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80476d0:	b580      	push	{r7, lr}
 80476d2:	b088      	sub	sp, #32
 80476d4:	af02      	add	r7, sp, #8
 80476d6:	60f8      	str	r0, [r7, #12]
 80476d8:	60b9      	str	r1, [r7, #8]
 80476da:	603b      	str	r3, [r7, #0]
 80476dc:	4613      	mov	r3, r2
 80476de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80476e0:	2300      	movs	r3, #0
 80476e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80476e4:	68fb      	ldr	r3, [r7, #12]
 80476e6:	685b      	ldr	r3, [r3, #4]
 80476e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80476ec:	d112      	bne.n	8047714 <HAL_SPI_Receive+0x44>
 80476ee:	68fb      	ldr	r3, [r7, #12]
 80476f0:	689b      	ldr	r3, [r3, #8]
 80476f2:	2b00      	cmp	r3, #0
 80476f4:	d10e      	bne.n	8047714 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80476f6:	68fb      	ldr	r3, [r7, #12]
 80476f8:	2204      	movs	r2, #4
 80476fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80476fe:	88fa      	ldrh	r2, [r7, #6]
 8047700:	683b      	ldr	r3, [r7, #0]
 8047702:	9300      	str	r3, [sp, #0]
 8047704:	4613      	mov	r3, r2
 8047706:	68ba      	ldr	r2, [r7, #8]
 8047708:	68b9      	ldr	r1, [r7, #8]
 804770a:	68f8      	ldr	r0, [r7, #12]
 804770c:	f000 f8f1 	bl	80478f2 <HAL_SPI_TransmitReceive>
 8047710:	4603      	mov	r3, r0
 8047712:	e0ea      	b.n	80478ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047714:	68fb      	ldr	r3, [r7, #12]
 8047716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 804771a:	2b01      	cmp	r3, #1
 804771c:	d101      	bne.n	8047722 <HAL_SPI_Receive+0x52>
 804771e:	2302      	movs	r3, #2
 8047720:	e0e3      	b.n	80478ea <HAL_SPI_Receive+0x21a>
 8047722:	68fb      	ldr	r3, [r7, #12]
 8047724:	2201      	movs	r2, #1
 8047726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804772a:	f7fb fb61 	bl	8042df0 <HAL_GetTick>
 804772e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8047730:	68fb      	ldr	r3, [r7, #12]
 8047732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047736:	b2db      	uxtb	r3, r3
 8047738:	2b01      	cmp	r3, #1
 804773a:	d002      	beq.n	8047742 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 804773c:	2302      	movs	r3, #2
 804773e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047740:	e0ca      	b.n	80478d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8047742:	68bb      	ldr	r3, [r7, #8]
 8047744:	2b00      	cmp	r3, #0
 8047746:	d002      	beq.n	804774e <HAL_SPI_Receive+0x7e>
 8047748:	88fb      	ldrh	r3, [r7, #6]
 804774a:	2b00      	cmp	r3, #0
 804774c:	d102      	bne.n	8047754 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 804774e:	2301      	movs	r3, #1
 8047750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047752:	e0c1      	b.n	80478d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8047754:	68fb      	ldr	r3, [r7, #12]
 8047756:	2204      	movs	r2, #4
 8047758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804775c:	68fb      	ldr	r3, [r7, #12]
 804775e:	2200      	movs	r2, #0
 8047760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8047762:	68fb      	ldr	r3, [r7, #12]
 8047764:	68ba      	ldr	r2, [r7, #8]
 8047766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8047768:	68fb      	ldr	r3, [r7, #12]
 804776a:	88fa      	ldrh	r2, [r7, #6]
 804776c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 804776e:	68fb      	ldr	r3, [r7, #12]
 8047770:	88fa      	ldrh	r2, [r7, #6]
 8047772:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8047774:	68fb      	ldr	r3, [r7, #12]
 8047776:	2200      	movs	r2, #0
 8047778:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 804777a:	68fb      	ldr	r3, [r7, #12]
 804777c:	2200      	movs	r2, #0
 804777e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8047780:	68fb      	ldr	r3, [r7, #12]
 8047782:	2200      	movs	r2, #0
 8047784:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8047786:	68fb      	ldr	r3, [r7, #12]
 8047788:	2200      	movs	r2, #0
 804778a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 804778c:	68fb      	ldr	r3, [r7, #12]
 804778e:	2200      	movs	r2, #0
 8047790:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047792:	68fb      	ldr	r3, [r7, #12]
 8047794:	689b      	ldr	r3, [r3, #8]
 8047796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804779a:	d10f      	bne.n	80477bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 804779c:	68fb      	ldr	r3, [r7, #12]
 804779e:	681b      	ldr	r3, [r3, #0]
 80477a0:	681a      	ldr	r2, [r3, #0]
 80477a2:	68fb      	ldr	r3, [r7, #12]
 80477a4:	681b      	ldr	r3, [r3, #0]
 80477a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80477aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80477ac:	68fb      	ldr	r3, [r7, #12]
 80477ae:	681b      	ldr	r3, [r3, #0]
 80477b0:	681a      	ldr	r2, [r3, #0]
 80477b2:	68fb      	ldr	r3, [r7, #12]
 80477b4:	681b      	ldr	r3, [r3, #0]
 80477b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80477ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80477bc:	68fb      	ldr	r3, [r7, #12]
 80477be:	681b      	ldr	r3, [r3, #0]
 80477c0:	681b      	ldr	r3, [r3, #0]
 80477c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80477c6:	2b40      	cmp	r3, #64	; 0x40
 80477c8:	d007      	beq.n	80477da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80477ca:	68fb      	ldr	r3, [r7, #12]
 80477cc:	681b      	ldr	r3, [r3, #0]
 80477ce:	681a      	ldr	r2, [r3, #0]
 80477d0:	68fb      	ldr	r3, [r7, #12]
 80477d2:	681b      	ldr	r3, [r3, #0]
 80477d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80477d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80477da:	68fb      	ldr	r3, [r7, #12]
 80477dc:	68db      	ldr	r3, [r3, #12]
 80477de:	2b00      	cmp	r3, #0
 80477e0:	d162      	bne.n	80478a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80477e2:	e02e      	b.n	8047842 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80477e4:	68fb      	ldr	r3, [r7, #12]
 80477e6:	681b      	ldr	r3, [r3, #0]
 80477e8:	689b      	ldr	r3, [r3, #8]
 80477ea:	f003 0301 	and.w	r3, r3, #1
 80477ee:	2b01      	cmp	r3, #1
 80477f0:	d115      	bne.n	804781e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80477f2:	68fb      	ldr	r3, [r7, #12]
 80477f4:	681b      	ldr	r3, [r3, #0]
 80477f6:	f103 020c 	add.w	r2, r3, #12
 80477fa:	68fb      	ldr	r3, [r7, #12]
 80477fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80477fe:	7812      	ldrb	r2, [r2, #0]
 8047800:	b2d2      	uxtb	r2, r2
 8047802:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8047804:	68fb      	ldr	r3, [r7, #12]
 8047806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047808:	1c5a      	adds	r2, r3, #1
 804780a:	68fb      	ldr	r3, [r7, #12]
 804780c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804780e:	68fb      	ldr	r3, [r7, #12]
 8047810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047812:	b29b      	uxth	r3, r3
 8047814:	3b01      	subs	r3, #1
 8047816:	b29a      	uxth	r2, r3
 8047818:	68fb      	ldr	r3, [r7, #12]
 804781a:	87da      	strh	r2, [r3, #62]	; 0x3e
 804781c:	e011      	b.n	8047842 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804781e:	f7fb fae7 	bl	8042df0 <HAL_GetTick>
 8047822:	4602      	mov	r2, r0
 8047824:	693b      	ldr	r3, [r7, #16]
 8047826:	1ad3      	subs	r3, r2, r3
 8047828:	683a      	ldr	r2, [r7, #0]
 804782a:	429a      	cmp	r2, r3
 804782c:	d803      	bhi.n	8047836 <HAL_SPI_Receive+0x166>
 804782e:	683b      	ldr	r3, [r7, #0]
 8047830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047834:	d102      	bne.n	804783c <HAL_SPI_Receive+0x16c>
 8047836:	683b      	ldr	r3, [r7, #0]
 8047838:	2b00      	cmp	r3, #0
 804783a:	d102      	bne.n	8047842 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 804783c:	2303      	movs	r3, #3
 804783e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047840:	e04a      	b.n	80478d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047842:	68fb      	ldr	r3, [r7, #12]
 8047844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047846:	b29b      	uxth	r3, r3
 8047848:	2b00      	cmp	r3, #0
 804784a:	d1cb      	bne.n	80477e4 <HAL_SPI_Receive+0x114>
 804784c:	e031      	b.n	80478b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804784e:	68fb      	ldr	r3, [r7, #12]
 8047850:	681b      	ldr	r3, [r3, #0]
 8047852:	689b      	ldr	r3, [r3, #8]
 8047854:	f003 0301 	and.w	r3, r3, #1
 8047858:	2b01      	cmp	r3, #1
 804785a:	d113      	bne.n	8047884 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804785c:	68fb      	ldr	r3, [r7, #12]
 804785e:	681b      	ldr	r3, [r3, #0]
 8047860:	68da      	ldr	r2, [r3, #12]
 8047862:	68fb      	ldr	r3, [r7, #12]
 8047864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047866:	b292      	uxth	r2, r2
 8047868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804786a:	68fb      	ldr	r3, [r7, #12]
 804786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804786e:	1c9a      	adds	r2, r3, #2
 8047870:	68fb      	ldr	r3, [r7, #12]
 8047872:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047874:	68fb      	ldr	r3, [r7, #12]
 8047876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047878:	b29b      	uxth	r3, r3
 804787a:	3b01      	subs	r3, #1
 804787c:	b29a      	uxth	r2, r3
 804787e:	68fb      	ldr	r3, [r7, #12]
 8047880:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047882:	e011      	b.n	80478a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047884:	f7fb fab4 	bl	8042df0 <HAL_GetTick>
 8047888:	4602      	mov	r2, r0
 804788a:	693b      	ldr	r3, [r7, #16]
 804788c:	1ad3      	subs	r3, r2, r3
 804788e:	683a      	ldr	r2, [r7, #0]
 8047890:	429a      	cmp	r2, r3
 8047892:	d803      	bhi.n	804789c <HAL_SPI_Receive+0x1cc>
 8047894:	683b      	ldr	r3, [r7, #0]
 8047896:	f1b3 3fff 	cmp.w	r3, #4294967295
 804789a:	d102      	bne.n	80478a2 <HAL_SPI_Receive+0x1d2>
 804789c:	683b      	ldr	r3, [r7, #0]
 804789e:	2b00      	cmp	r3, #0
 80478a0:	d102      	bne.n	80478a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80478a2:	2303      	movs	r3, #3
 80478a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80478a6:	e017      	b.n	80478d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80478a8:	68fb      	ldr	r3, [r7, #12]
 80478aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80478ac:	b29b      	uxth	r3, r3
 80478ae:	2b00      	cmp	r3, #0
 80478b0:	d1cd      	bne.n	804784e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80478b2:	693a      	ldr	r2, [r7, #16]
 80478b4:	6839      	ldr	r1, [r7, #0]
 80478b6:	68f8      	ldr	r0, [r7, #12]
 80478b8:	f000 fa54 	bl	8047d64 <SPI_EndRxTransaction>
 80478bc:	4603      	mov	r3, r0
 80478be:	2b00      	cmp	r3, #0
 80478c0:	d002      	beq.n	80478c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80478c2:	68fb      	ldr	r3, [r7, #12]
 80478c4:	2220      	movs	r2, #32
 80478c6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80478c8:	68fb      	ldr	r3, [r7, #12]
 80478ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80478cc:	2b00      	cmp	r3, #0
 80478ce:	d002      	beq.n	80478d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80478d0:	2301      	movs	r3, #1
 80478d2:	75fb      	strb	r3, [r7, #23]
 80478d4:	e000      	b.n	80478d8 <HAL_SPI_Receive+0x208>
  }

error :
 80478d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80478d8:	68fb      	ldr	r3, [r7, #12]
 80478da:	2201      	movs	r2, #1
 80478dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80478e0:	68fb      	ldr	r3, [r7, #12]
 80478e2:	2200      	movs	r2, #0
 80478e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80478e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80478ea:	4618      	mov	r0, r3
 80478ec:	3718      	adds	r7, #24
 80478ee:	46bd      	mov	sp, r7
 80478f0:	bd80      	pop	{r7, pc}

080478f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80478f2:	b580      	push	{r7, lr}
 80478f4:	b08c      	sub	sp, #48	; 0x30
 80478f6:	af00      	add	r7, sp, #0
 80478f8:	60f8      	str	r0, [r7, #12]
 80478fa:	60b9      	str	r1, [r7, #8]
 80478fc:	607a      	str	r2, [r7, #4]
 80478fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8047900:	2301      	movs	r3, #1
 8047902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8047904:	2300      	movs	r3, #0
 8047906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804790a:	68fb      	ldr	r3, [r7, #12]
 804790c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047910:	2b01      	cmp	r3, #1
 8047912:	d101      	bne.n	8047918 <HAL_SPI_TransmitReceive+0x26>
 8047914:	2302      	movs	r3, #2
 8047916:	e18a      	b.n	8047c2e <HAL_SPI_TransmitReceive+0x33c>
 8047918:	68fb      	ldr	r3, [r7, #12]
 804791a:	2201      	movs	r2, #1
 804791c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047920:	f7fb fa66 	bl	8042df0 <HAL_GetTick>
 8047924:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8047926:	68fb      	ldr	r3, [r7, #12]
 8047928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804792c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8047930:	68fb      	ldr	r3, [r7, #12]
 8047932:	685b      	ldr	r3, [r3, #4]
 8047934:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8047936:	887b      	ldrh	r3, [r7, #2]
 8047938:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804793a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 804793e:	2b01      	cmp	r3, #1
 8047940:	d00f      	beq.n	8047962 <HAL_SPI_TransmitReceive+0x70>
 8047942:	69fb      	ldr	r3, [r7, #28]
 8047944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047948:	d107      	bne.n	804795a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 804794a:	68fb      	ldr	r3, [r7, #12]
 804794c:	689b      	ldr	r3, [r3, #8]
 804794e:	2b00      	cmp	r3, #0
 8047950:	d103      	bne.n	804795a <HAL_SPI_TransmitReceive+0x68>
 8047952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8047956:	2b04      	cmp	r3, #4
 8047958:	d003      	beq.n	8047962 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 804795a:	2302      	movs	r3, #2
 804795c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047960:	e15b      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8047962:	68bb      	ldr	r3, [r7, #8]
 8047964:	2b00      	cmp	r3, #0
 8047966:	d005      	beq.n	8047974 <HAL_SPI_TransmitReceive+0x82>
 8047968:	687b      	ldr	r3, [r7, #4]
 804796a:	2b00      	cmp	r3, #0
 804796c:	d002      	beq.n	8047974 <HAL_SPI_TransmitReceive+0x82>
 804796e:	887b      	ldrh	r3, [r7, #2]
 8047970:	2b00      	cmp	r3, #0
 8047972:	d103      	bne.n	804797c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8047974:	2301      	movs	r3, #1
 8047976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 804797a:	e14e      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 804797c:	68fb      	ldr	r3, [r7, #12]
 804797e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047982:	b2db      	uxtb	r3, r3
 8047984:	2b04      	cmp	r3, #4
 8047986:	d003      	beq.n	8047990 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8047988:	68fb      	ldr	r3, [r7, #12]
 804798a:	2205      	movs	r2, #5
 804798c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047990:	68fb      	ldr	r3, [r7, #12]
 8047992:	2200      	movs	r2, #0
 8047994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8047996:	68fb      	ldr	r3, [r7, #12]
 8047998:	687a      	ldr	r2, [r7, #4]
 804799a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 804799c:	68fb      	ldr	r3, [r7, #12]
 804799e:	887a      	ldrh	r2, [r7, #2]
 80479a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80479a2:	68fb      	ldr	r3, [r7, #12]
 80479a4:	887a      	ldrh	r2, [r7, #2]
 80479a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80479a8:	68fb      	ldr	r3, [r7, #12]
 80479aa:	68ba      	ldr	r2, [r7, #8]
 80479ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80479ae:	68fb      	ldr	r3, [r7, #12]
 80479b0:	887a      	ldrh	r2, [r7, #2]
 80479b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80479b4:	68fb      	ldr	r3, [r7, #12]
 80479b6:	887a      	ldrh	r2, [r7, #2]
 80479b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80479ba:	68fb      	ldr	r3, [r7, #12]
 80479bc:	2200      	movs	r2, #0
 80479be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80479c0:	68fb      	ldr	r3, [r7, #12]
 80479c2:	2200      	movs	r2, #0
 80479c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80479c6:	68fb      	ldr	r3, [r7, #12]
 80479c8:	681b      	ldr	r3, [r3, #0]
 80479ca:	681b      	ldr	r3, [r3, #0]
 80479cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80479d0:	2b40      	cmp	r3, #64	; 0x40
 80479d2:	d007      	beq.n	80479e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80479d4:	68fb      	ldr	r3, [r7, #12]
 80479d6:	681b      	ldr	r3, [r3, #0]
 80479d8:	681a      	ldr	r2, [r3, #0]
 80479da:	68fb      	ldr	r3, [r7, #12]
 80479dc:	681b      	ldr	r3, [r3, #0]
 80479de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80479e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80479e4:	68fb      	ldr	r3, [r7, #12]
 80479e6:	68db      	ldr	r3, [r3, #12]
 80479e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80479ec:	d178      	bne.n	8047ae0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80479ee:	68fb      	ldr	r3, [r7, #12]
 80479f0:	685b      	ldr	r3, [r3, #4]
 80479f2:	2b00      	cmp	r3, #0
 80479f4:	d002      	beq.n	80479fc <HAL_SPI_TransmitReceive+0x10a>
 80479f6:	8b7b      	ldrh	r3, [r7, #26]
 80479f8:	2b01      	cmp	r3, #1
 80479fa:	d166      	bne.n	8047aca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80479fc:	68fb      	ldr	r3, [r7, #12]
 80479fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a00:	881a      	ldrh	r2, [r3, #0]
 8047a02:	68fb      	ldr	r3, [r7, #12]
 8047a04:	681b      	ldr	r3, [r3, #0]
 8047a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047a08:	68fb      	ldr	r3, [r7, #12]
 8047a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a0c:	1c9a      	adds	r2, r3, #2
 8047a0e:	68fb      	ldr	r3, [r7, #12]
 8047a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047a12:	68fb      	ldr	r3, [r7, #12]
 8047a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a16:	b29b      	uxth	r3, r3
 8047a18:	3b01      	subs	r3, #1
 8047a1a:	b29a      	uxth	r2, r3
 8047a1c:	68fb      	ldr	r3, [r7, #12]
 8047a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047a20:	e053      	b.n	8047aca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047a22:	68fb      	ldr	r3, [r7, #12]
 8047a24:	681b      	ldr	r3, [r3, #0]
 8047a26:	689b      	ldr	r3, [r3, #8]
 8047a28:	f003 0302 	and.w	r3, r3, #2
 8047a2c:	2b02      	cmp	r3, #2
 8047a2e:	d11b      	bne.n	8047a68 <HAL_SPI_TransmitReceive+0x176>
 8047a30:	68fb      	ldr	r3, [r7, #12]
 8047a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a34:	b29b      	uxth	r3, r3
 8047a36:	2b00      	cmp	r3, #0
 8047a38:	d016      	beq.n	8047a68 <HAL_SPI_TransmitReceive+0x176>
 8047a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047a3c:	2b01      	cmp	r3, #1
 8047a3e:	d113      	bne.n	8047a68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047a40:	68fb      	ldr	r3, [r7, #12]
 8047a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a44:	881a      	ldrh	r2, [r3, #0]
 8047a46:	68fb      	ldr	r3, [r7, #12]
 8047a48:	681b      	ldr	r3, [r3, #0]
 8047a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8047a4c:	68fb      	ldr	r3, [r7, #12]
 8047a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a50:	1c9a      	adds	r2, r3, #2
 8047a52:	68fb      	ldr	r3, [r7, #12]
 8047a54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047a56:	68fb      	ldr	r3, [r7, #12]
 8047a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a5a:	b29b      	uxth	r3, r3
 8047a5c:	3b01      	subs	r3, #1
 8047a5e:	b29a      	uxth	r2, r3
 8047a60:	68fb      	ldr	r3, [r7, #12]
 8047a62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8047a64:	2300      	movs	r3, #0
 8047a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8047a68:	68fb      	ldr	r3, [r7, #12]
 8047a6a:	681b      	ldr	r3, [r3, #0]
 8047a6c:	689b      	ldr	r3, [r3, #8]
 8047a6e:	f003 0301 	and.w	r3, r3, #1
 8047a72:	2b01      	cmp	r3, #1
 8047a74:	d119      	bne.n	8047aaa <HAL_SPI_TransmitReceive+0x1b8>
 8047a76:	68fb      	ldr	r3, [r7, #12]
 8047a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047a7a:	b29b      	uxth	r3, r3
 8047a7c:	2b00      	cmp	r3, #0
 8047a7e:	d014      	beq.n	8047aaa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8047a80:	68fb      	ldr	r3, [r7, #12]
 8047a82:	681b      	ldr	r3, [r3, #0]
 8047a84:	68da      	ldr	r2, [r3, #12]
 8047a86:	68fb      	ldr	r3, [r7, #12]
 8047a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047a8a:	b292      	uxth	r2, r2
 8047a8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047a8e:	68fb      	ldr	r3, [r7, #12]
 8047a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047a92:	1c9a      	adds	r2, r3, #2
 8047a94:	68fb      	ldr	r3, [r7, #12]
 8047a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047a98:	68fb      	ldr	r3, [r7, #12]
 8047a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047a9c:	b29b      	uxth	r3, r3
 8047a9e:	3b01      	subs	r3, #1
 8047aa0:	b29a      	uxth	r2, r3
 8047aa2:	68fb      	ldr	r3, [r7, #12]
 8047aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047aa6:	2301      	movs	r3, #1
 8047aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8047aaa:	f7fb f9a1 	bl	8042df0 <HAL_GetTick>
 8047aae:	4602      	mov	r2, r0
 8047ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047ab2:	1ad3      	subs	r3, r2, r3
 8047ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047ab6:	429a      	cmp	r2, r3
 8047ab8:	d807      	bhi.n	8047aca <HAL_SPI_TransmitReceive+0x1d8>
 8047aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047ac0:	d003      	beq.n	8047aca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8047ac2:	2303      	movs	r3, #3
 8047ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047ac8:	e0a7      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047aca:	68fb      	ldr	r3, [r7, #12]
 8047acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047ace:	b29b      	uxth	r3, r3
 8047ad0:	2b00      	cmp	r3, #0
 8047ad2:	d1a6      	bne.n	8047a22 <HAL_SPI_TransmitReceive+0x130>
 8047ad4:	68fb      	ldr	r3, [r7, #12]
 8047ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047ad8:	b29b      	uxth	r3, r3
 8047ada:	2b00      	cmp	r3, #0
 8047adc:	d1a1      	bne.n	8047a22 <HAL_SPI_TransmitReceive+0x130>
 8047ade:	e07c      	b.n	8047bda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047ae0:	68fb      	ldr	r3, [r7, #12]
 8047ae2:	685b      	ldr	r3, [r3, #4]
 8047ae4:	2b00      	cmp	r3, #0
 8047ae6:	d002      	beq.n	8047aee <HAL_SPI_TransmitReceive+0x1fc>
 8047ae8:	8b7b      	ldrh	r3, [r7, #26]
 8047aea:	2b01      	cmp	r3, #1
 8047aec:	d16b      	bne.n	8047bc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047aee:	68fb      	ldr	r3, [r7, #12]
 8047af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047af2:	68fb      	ldr	r3, [r7, #12]
 8047af4:	681b      	ldr	r3, [r3, #0]
 8047af6:	330c      	adds	r3, #12
 8047af8:	7812      	ldrb	r2, [r2, #0]
 8047afa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047afc:	68fb      	ldr	r3, [r7, #12]
 8047afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b00:	1c5a      	adds	r2, r3, #1
 8047b02:	68fb      	ldr	r3, [r7, #12]
 8047b04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047b06:	68fb      	ldr	r3, [r7, #12]
 8047b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b0a:	b29b      	uxth	r3, r3
 8047b0c:	3b01      	subs	r3, #1
 8047b0e:	b29a      	uxth	r2, r3
 8047b10:	68fb      	ldr	r3, [r7, #12]
 8047b12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047b14:	e057      	b.n	8047bc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047b16:	68fb      	ldr	r3, [r7, #12]
 8047b18:	681b      	ldr	r3, [r3, #0]
 8047b1a:	689b      	ldr	r3, [r3, #8]
 8047b1c:	f003 0302 	and.w	r3, r3, #2
 8047b20:	2b02      	cmp	r3, #2
 8047b22:	d11c      	bne.n	8047b5e <HAL_SPI_TransmitReceive+0x26c>
 8047b24:	68fb      	ldr	r3, [r7, #12]
 8047b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b28:	b29b      	uxth	r3, r3
 8047b2a:	2b00      	cmp	r3, #0
 8047b2c:	d017      	beq.n	8047b5e <HAL_SPI_TransmitReceive+0x26c>
 8047b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047b30:	2b01      	cmp	r3, #1
 8047b32:	d114      	bne.n	8047b5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8047b34:	68fb      	ldr	r3, [r7, #12]
 8047b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047b38:	68fb      	ldr	r3, [r7, #12]
 8047b3a:	681b      	ldr	r3, [r3, #0]
 8047b3c:	330c      	adds	r3, #12
 8047b3e:	7812      	ldrb	r2, [r2, #0]
 8047b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8047b42:	68fb      	ldr	r3, [r7, #12]
 8047b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b46:	1c5a      	adds	r2, r3, #1
 8047b48:	68fb      	ldr	r3, [r7, #12]
 8047b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047b4c:	68fb      	ldr	r3, [r7, #12]
 8047b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b50:	b29b      	uxth	r3, r3
 8047b52:	3b01      	subs	r3, #1
 8047b54:	b29a      	uxth	r2, r3
 8047b56:	68fb      	ldr	r3, [r7, #12]
 8047b58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8047b5a:	2300      	movs	r3, #0
 8047b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8047b5e:	68fb      	ldr	r3, [r7, #12]
 8047b60:	681b      	ldr	r3, [r3, #0]
 8047b62:	689b      	ldr	r3, [r3, #8]
 8047b64:	f003 0301 	and.w	r3, r3, #1
 8047b68:	2b01      	cmp	r3, #1
 8047b6a:	d119      	bne.n	8047ba0 <HAL_SPI_TransmitReceive+0x2ae>
 8047b6c:	68fb      	ldr	r3, [r7, #12]
 8047b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047b70:	b29b      	uxth	r3, r3
 8047b72:	2b00      	cmp	r3, #0
 8047b74:	d014      	beq.n	8047ba0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8047b76:	68fb      	ldr	r3, [r7, #12]
 8047b78:	681b      	ldr	r3, [r3, #0]
 8047b7a:	68da      	ldr	r2, [r3, #12]
 8047b7c:	68fb      	ldr	r3, [r7, #12]
 8047b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047b80:	b2d2      	uxtb	r2, r2
 8047b82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8047b84:	68fb      	ldr	r3, [r7, #12]
 8047b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047b88:	1c5a      	adds	r2, r3, #1
 8047b8a:	68fb      	ldr	r3, [r7, #12]
 8047b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047b8e:	68fb      	ldr	r3, [r7, #12]
 8047b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047b92:	b29b      	uxth	r3, r3
 8047b94:	3b01      	subs	r3, #1
 8047b96:	b29a      	uxth	r2, r3
 8047b98:	68fb      	ldr	r3, [r7, #12]
 8047b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047b9c:	2301      	movs	r3, #1
 8047b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8047ba0:	f7fb f926 	bl	8042df0 <HAL_GetTick>
 8047ba4:	4602      	mov	r2, r0
 8047ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047ba8:	1ad3      	subs	r3, r2, r3
 8047baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047bac:	429a      	cmp	r2, r3
 8047bae:	d803      	bhi.n	8047bb8 <HAL_SPI_TransmitReceive+0x2c6>
 8047bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047bb6:	d102      	bne.n	8047bbe <HAL_SPI_TransmitReceive+0x2cc>
 8047bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047bba:	2b00      	cmp	r3, #0
 8047bbc:	d103      	bne.n	8047bc6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8047bbe:	2303      	movs	r3, #3
 8047bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047bc4:	e029      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047bc6:	68fb      	ldr	r3, [r7, #12]
 8047bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047bca:	b29b      	uxth	r3, r3
 8047bcc:	2b00      	cmp	r3, #0
 8047bce:	d1a2      	bne.n	8047b16 <HAL_SPI_TransmitReceive+0x224>
 8047bd0:	68fb      	ldr	r3, [r7, #12]
 8047bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047bd4:	b29b      	uxth	r3, r3
 8047bd6:	2b00      	cmp	r3, #0
 8047bd8:	d19d      	bne.n	8047b16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8047bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8047bde:	68f8      	ldr	r0, [r7, #12]
 8047be0:	f000 f926 	bl	8047e30 <SPI_EndRxTxTransaction>
 8047be4:	4603      	mov	r3, r0
 8047be6:	2b00      	cmp	r3, #0
 8047be8:	d006      	beq.n	8047bf8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8047bea:	2301      	movs	r3, #1
 8047bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047bf0:	68fb      	ldr	r3, [r7, #12]
 8047bf2:	2220      	movs	r2, #32
 8047bf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8047bf6:	e010      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047bf8:	68fb      	ldr	r3, [r7, #12]
 8047bfa:	689b      	ldr	r3, [r3, #8]
 8047bfc:	2b00      	cmp	r3, #0
 8047bfe:	d10b      	bne.n	8047c18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047c00:	2300      	movs	r3, #0
 8047c02:	617b      	str	r3, [r7, #20]
 8047c04:	68fb      	ldr	r3, [r7, #12]
 8047c06:	681b      	ldr	r3, [r3, #0]
 8047c08:	68db      	ldr	r3, [r3, #12]
 8047c0a:	617b      	str	r3, [r7, #20]
 8047c0c:	68fb      	ldr	r3, [r7, #12]
 8047c0e:	681b      	ldr	r3, [r3, #0]
 8047c10:	689b      	ldr	r3, [r3, #8]
 8047c12:	617b      	str	r3, [r7, #20]
 8047c14:	697b      	ldr	r3, [r7, #20]
 8047c16:	e000      	b.n	8047c1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8047c18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047c1a:	68fb      	ldr	r3, [r7, #12]
 8047c1c:	2201      	movs	r2, #1
 8047c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047c22:	68fb      	ldr	r3, [r7, #12]
 8047c24:	2200      	movs	r2, #0
 8047c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8047c2e:	4618      	mov	r0, r3
 8047c30:	3730      	adds	r7, #48	; 0x30
 8047c32:	46bd      	mov	sp, r7
 8047c34:	bd80      	pop	{r7, pc}

08047c36 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8047c36:	b480      	push	{r7}
 8047c38:	b083      	sub	sp, #12
 8047c3a:	af00      	add	r7, sp, #0
 8047c3c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8047c3e:	687b      	ldr	r3, [r7, #4]
 8047c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047c44:	b2db      	uxtb	r3, r3
}
 8047c46:	4618      	mov	r0, r3
 8047c48:	370c      	adds	r7, #12
 8047c4a:	46bd      	mov	sp, r7
 8047c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c50:	4770      	bx	lr
	...

08047c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8047c54:	b580      	push	{r7, lr}
 8047c56:	b088      	sub	sp, #32
 8047c58:	af00      	add	r7, sp, #0
 8047c5a:	60f8      	str	r0, [r7, #12]
 8047c5c:	60b9      	str	r1, [r7, #8]
 8047c5e:	603b      	str	r3, [r7, #0]
 8047c60:	4613      	mov	r3, r2
 8047c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8047c64:	f7fb f8c4 	bl	8042df0 <HAL_GetTick>
 8047c68:	4602      	mov	r2, r0
 8047c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047c6c:	1a9b      	subs	r3, r3, r2
 8047c6e:	683a      	ldr	r2, [r7, #0]
 8047c70:	4413      	add	r3, r2
 8047c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8047c74:	f7fb f8bc 	bl	8042df0 <HAL_GetTick>
 8047c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8047c7a:	4b39      	ldr	r3, [pc, #228]	; (8047d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8047c7c:	681b      	ldr	r3, [r3, #0]
 8047c7e:	015b      	lsls	r3, r3, #5
 8047c80:	0d1b      	lsrs	r3, r3, #20
 8047c82:	69fa      	ldr	r2, [r7, #28]
 8047c84:	fb02 f303 	mul.w	r3, r2, r3
 8047c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047c8a:	e054      	b.n	8047d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8047c8c:	683b      	ldr	r3, [r7, #0]
 8047c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047c92:	d050      	beq.n	8047d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8047c94:	f7fb f8ac 	bl	8042df0 <HAL_GetTick>
 8047c98:	4602      	mov	r2, r0
 8047c9a:	69bb      	ldr	r3, [r7, #24]
 8047c9c:	1ad3      	subs	r3, r2, r3
 8047c9e:	69fa      	ldr	r2, [r7, #28]
 8047ca0:	429a      	cmp	r2, r3
 8047ca2:	d902      	bls.n	8047caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8047ca4:	69fb      	ldr	r3, [r7, #28]
 8047ca6:	2b00      	cmp	r3, #0
 8047ca8:	d13d      	bne.n	8047d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8047caa:	68fb      	ldr	r3, [r7, #12]
 8047cac:	681b      	ldr	r3, [r3, #0]
 8047cae:	685a      	ldr	r2, [r3, #4]
 8047cb0:	68fb      	ldr	r3, [r7, #12]
 8047cb2:	681b      	ldr	r3, [r3, #0]
 8047cb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8047cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047cba:	68fb      	ldr	r3, [r7, #12]
 8047cbc:	685b      	ldr	r3, [r3, #4]
 8047cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047cc2:	d111      	bne.n	8047ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8047cc4:	68fb      	ldr	r3, [r7, #12]
 8047cc6:	689b      	ldr	r3, [r3, #8]
 8047cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047ccc:	d004      	beq.n	8047cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047cce:	68fb      	ldr	r3, [r7, #12]
 8047cd0:	689b      	ldr	r3, [r3, #8]
 8047cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047cd6:	d107      	bne.n	8047ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8047cd8:	68fb      	ldr	r3, [r7, #12]
 8047cda:	681b      	ldr	r3, [r3, #0]
 8047cdc:	681a      	ldr	r2, [r3, #0]
 8047cde:	68fb      	ldr	r3, [r7, #12]
 8047ce0:	681b      	ldr	r3, [r3, #0]
 8047ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8047ce8:	68fb      	ldr	r3, [r7, #12]
 8047cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8047cf0:	d10f      	bne.n	8047d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8047cf2:	68fb      	ldr	r3, [r7, #12]
 8047cf4:	681b      	ldr	r3, [r3, #0]
 8047cf6:	681a      	ldr	r2, [r3, #0]
 8047cf8:	68fb      	ldr	r3, [r7, #12]
 8047cfa:	681b      	ldr	r3, [r3, #0]
 8047cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8047d00:	601a      	str	r2, [r3, #0]
 8047d02:	68fb      	ldr	r3, [r7, #12]
 8047d04:	681b      	ldr	r3, [r3, #0]
 8047d06:	681a      	ldr	r2, [r3, #0]
 8047d08:	68fb      	ldr	r3, [r7, #12]
 8047d0a:	681b      	ldr	r3, [r3, #0]
 8047d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8047d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8047d12:	68fb      	ldr	r3, [r7, #12]
 8047d14:	2201      	movs	r2, #1
 8047d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8047d1a:	68fb      	ldr	r3, [r7, #12]
 8047d1c:	2200      	movs	r2, #0
 8047d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8047d22:	2303      	movs	r3, #3
 8047d24:	e017      	b.n	8047d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8047d26:	697b      	ldr	r3, [r7, #20]
 8047d28:	2b00      	cmp	r3, #0
 8047d2a:	d101      	bne.n	8047d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8047d2c:	2300      	movs	r3, #0
 8047d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8047d30:	697b      	ldr	r3, [r7, #20]
 8047d32:	3b01      	subs	r3, #1
 8047d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8047d36:	68fb      	ldr	r3, [r7, #12]
 8047d38:	681b      	ldr	r3, [r3, #0]
 8047d3a:	689a      	ldr	r2, [r3, #8]
 8047d3c:	68bb      	ldr	r3, [r7, #8]
 8047d3e:	4013      	ands	r3, r2
 8047d40:	68ba      	ldr	r2, [r7, #8]
 8047d42:	429a      	cmp	r2, r3
 8047d44:	bf0c      	ite	eq
 8047d46:	2301      	moveq	r3, #1
 8047d48:	2300      	movne	r3, #0
 8047d4a:	b2db      	uxtb	r3, r3
 8047d4c:	461a      	mov	r2, r3
 8047d4e:	79fb      	ldrb	r3, [r7, #7]
 8047d50:	429a      	cmp	r2, r3
 8047d52:	d19b      	bne.n	8047c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8047d54:	2300      	movs	r3, #0
}
 8047d56:	4618      	mov	r0, r3
 8047d58:	3720      	adds	r7, #32
 8047d5a:	46bd      	mov	sp, r7
 8047d5c:	bd80      	pop	{r7, pc}
 8047d5e:	bf00      	nop
 8047d60:	20000000 	.word	0x20000000

08047d64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8047d64:	b580      	push	{r7, lr}
 8047d66:	b086      	sub	sp, #24
 8047d68:	af02      	add	r7, sp, #8
 8047d6a:	60f8      	str	r0, [r7, #12]
 8047d6c:	60b9      	str	r1, [r7, #8]
 8047d6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047d70:	68fb      	ldr	r3, [r7, #12]
 8047d72:	685b      	ldr	r3, [r3, #4]
 8047d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047d78:	d111      	bne.n	8047d9e <SPI_EndRxTransaction+0x3a>
 8047d7a:	68fb      	ldr	r3, [r7, #12]
 8047d7c:	689b      	ldr	r3, [r3, #8]
 8047d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047d82:	d004      	beq.n	8047d8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8047d84:	68fb      	ldr	r3, [r7, #12]
 8047d86:	689b      	ldr	r3, [r3, #8]
 8047d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047d8c:	d107      	bne.n	8047d9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8047d8e:	68fb      	ldr	r3, [r7, #12]
 8047d90:	681b      	ldr	r3, [r3, #0]
 8047d92:	681a      	ldr	r2, [r3, #0]
 8047d94:	68fb      	ldr	r3, [r7, #12]
 8047d96:	681b      	ldr	r3, [r3, #0]
 8047d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047d9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047d9e:	68fb      	ldr	r3, [r7, #12]
 8047da0:	685b      	ldr	r3, [r3, #4]
 8047da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047da6:	d12a      	bne.n	8047dfe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8047da8:	68fb      	ldr	r3, [r7, #12]
 8047daa:	689b      	ldr	r3, [r3, #8]
 8047dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8047db0:	d012      	beq.n	8047dd8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047db2:	687b      	ldr	r3, [r7, #4]
 8047db4:	9300      	str	r3, [sp, #0]
 8047db6:	68bb      	ldr	r3, [r7, #8]
 8047db8:	2200      	movs	r2, #0
 8047dba:	2180      	movs	r1, #128	; 0x80
 8047dbc:	68f8      	ldr	r0, [r7, #12]
 8047dbe:	f7ff ff49 	bl	8047c54 <SPI_WaitFlagStateUntilTimeout>
 8047dc2:	4603      	mov	r3, r0
 8047dc4:	2b00      	cmp	r3, #0
 8047dc6:	d02d      	beq.n	8047e24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047dc8:	68fb      	ldr	r3, [r7, #12]
 8047dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047dcc:	f043 0220 	orr.w	r2, r3, #32
 8047dd0:	68fb      	ldr	r3, [r7, #12]
 8047dd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047dd4:	2303      	movs	r3, #3
 8047dd6:	e026      	b.n	8047e26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047dd8:	687b      	ldr	r3, [r7, #4]
 8047dda:	9300      	str	r3, [sp, #0]
 8047ddc:	68bb      	ldr	r3, [r7, #8]
 8047dde:	2200      	movs	r2, #0
 8047de0:	2101      	movs	r1, #1
 8047de2:	68f8      	ldr	r0, [r7, #12]
 8047de4:	f7ff ff36 	bl	8047c54 <SPI_WaitFlagStateUntilTimeout>
 8047de8:	4603      	mov	r3, r0
 8047dea:	2b00      	cmp	r3, #0
 8047dec:	d01a      	beq.n	8047e24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047dee:	68fb      	ldr	r3, [r7, #12]
 8047df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047df2:	f043 0220 	orr.w	r2, r3, #32
 8047df6:	68fb      	ldr	r3, [r7, #12]
 8047df8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8047dfa:	2303      	movs	r3, #3
 8047dfc:	e013      	b.n	8047e26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8047dfe:	687b      	ldr	r3, [r7, #4]
 8047e00:	9300      	str	r3, [sp, #0]
 8047e02:	68bb      	ldr	r3, [r7, #8]
 8047e04:	2200      	movs	r2, #0
 8047e06:	2101      	movs	r1, #1
 8047e08:	68f8      	ldr	r0, [r7, #12]
 8047e0a:	f7ff ff23 	bl	8047c54 <SPI_WaitFlagStateUntilTimeout>
 8047e0e:	4603      	mov	r3, r0
 8047e10:	2b00      	cmp	r3, #0
 8047e12:	d007      	beq.n	8047e24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047e14:	68fb      	ldr	r3, [r7, #12]
 8047e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047e18:	f043 0220 	orr.w	r2, r3, #32
 8047e1c:	68fb      	ldr	r3, [r7, #12]
 8047e1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047e20:	2303      	movs	r3, #3
 8047e22:	e000      	b.n	8047e26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8047e24:	2300      	movs	r3, #0
}
 8047e26:	4618      	mov	r0, r3
 8047e28:	3710      	adds	r7, #16
 8047e2a:	46bd      	mov	sp, r7
 8047e2c:	bd80      	pop	{r7, pc}
	...

08047e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8047e30:	b580      	push	{r7, lr}
 8047e32:	b088      	sub	sp, #32
 8047e34:	af02      	add	r7, sp, #8
 8047e36:	60f8      	str	r0, [r7, #12]
 8047e38:	60b9      	str	r1, [r7, #8]
 8047e3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8047e3c:	4b1b      	ldr	r3, [pc, #108]	; (8047eac <SPI_EndRxTxTransaction+0x7c>)
 8047e3e:	681b      	ldr	r3, [r3, #0]
 8047e40:	4a1b      	ldr	r2, [pc, #108]	; (8047eb0 <SPI_EndRxTxTransaction+0x80>)
 8047e42:	fba2 2303 	umull	r2, r3, r2, r3
 8047e46:	0d5b      	lsrs	r3, r3, #21
 8047e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8047e4c:	fb02 f303 	mul.w	r3, r2, r3
 8047e50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047e52:	68fb      	ldr	r3, [r7, #12]
 8047e54:	685b      	ldr	r3, [r3, #4]
 8047e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047e5a:	d112      	bne.n	8047e82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8047e5c:	687b      	ldr	r3, [r7, #4]
 8047e5e:	9300      	str	r3, [sp, #0]
 8047e60:	68bb      	ldr	r3, [r7, #8]
 8047e62:	2200      	movs	r2, #0
 8047e64:	2180      	movs	r1, #128	; 0x80
 8047e66:	68f8      	ldr	r0, [r7, #12]
 8047e68:	f7ff fef4 	bl	8047c54 <SPI_WaitFlagStateUntilTimeout>
 8047e6c:	4603      	mov	r3, r0
 8047e6e:	2b00      	cmp	r3, #0
 8047e70:	d016      	beq.n	8047ea0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8047e72:	68fb      	ldr	r3, [r7, #12]
 8047e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047e76:	f043 0220 	orr.w	r2, r3, #32
 8047e7a:	68fb      	ldr	r3, [r7, #12]
 8047e7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8047e7e:	2303      	movs	r3, #3
 8047e80:	e00f      	b.n	8047ea2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8047e82:	697b      	ldr	r3, [r7, #20]
 8047e84:	2b00      	cmp	r3, #0
 8047e86:	d00a      	beq.n	8047e9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8047e88:	697b      	ldr	r3, [r7, #20]
 8047e8a:	3b01      	subs	r3, #1
 8047e8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8047e8e:	68fb      	ldr	r3, [r7, #12]
 8047e90:	681b      	ldr	r3, [r3, #0]
 8047e92:	689b      	ldr	r3, [r3, #8]
 8047e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047e98:	2b80      	cmp	r3, #128	; 0x80
 8047e9a:	d0f2      	beq.n	8047e82 <SPI_EndRxTxTransaction+0x52>
 8047e9c:	e000      	b.n	8047ea0 <SPI_EndRxTxTransaction+0x70>
        break;
 8047e9e:	bf00      	nop
  }

  return HAL_OK;
 8047ea0:	2300      	movs	r3, #0
}
 8047ea2:	4618      	mov	r0, r3
 8047ea4:	3718      	adds	r7, #24
 8047ea6:	46bd      	mov	sp, r7
 8047ea8:	bd80      	pop	{r7, pc}
 8047eaa:	bf00      	nop
 8047eac:	20000000 	.word	0x20000000
 8047eb0:	165e9f81 	.word	0x165e9f81

08047eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8047eb4:	b580      	push	{r7, lr}
 8047eb6:	b082      	sub	sp, #8
 8047eb8:	af00      	add	r7, sp, #0
 8047eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8047ebc:	687b      	ldr	r3, [r7, #4]
 8047ebe:	2b00      	cmp	r3, #0
 8047ec0:	d101      	bne.n	8047ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8047ec2:	2301      	movs	r3, #1
 8047ec4:	e041      	b.n	8047f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047ec6:	687b      	ldr	r3, [r7, #4]
 8047ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047ecc:	b2db      	uxtb	r3, r3
 8047ece:	2b00      	cmp	r3, #0
 8047ed0:	d106      	bne.n	8047ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047ed2:	687b      	ldr	r3, [r7, #4]
 8047ed4:	2200      	movs	r2, #0
 8047ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8047eda:	6878      	ldr	r0, [r7, #4]
 8047edc:	f7f9 fa9e 	bl	804141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047ee0:	687b      	ldr	r3, [r7, #4]
 8047ee2:	2202      	movs	r2, #2
 8047ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047ee8:	687b      	ldr	r3, [r7, #4]
 8047eea:	681a      	ldr	r2, [r3, #0]
 8047eec:	687b      	ldr	r3, [r7, #4]
 8047eee:	3304      	adds	r3, #4
 8047ef0:	4619      	mov	r1, r3
 8047ef2:	4610      	mov	r0, r2
 8047ef4:	f000 fa96 	bl	8048424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047ef8:	687b      	ldr	r3, [r7, #4]
 8047efa:	2201      	movs	r2, #1
 8047efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047f00:	687b      	ldr	r3, [r7, #4]
 8047f02:	2201      	movs	r2, #1
 8047f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047f08:	687b      	ldr	r3, [r7, #4]
 8047f0a:	2201      	movs	r2, #1
 8047f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8047f10:	687b      	ldr	r3, [r7, #4]
 8047f12:	2201      	movs	r2, #1
 8047f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047f18:	687b      	ldr	r3, [r7, #4]
 8047f1a:	2201      	movs	r2, #1
 8047f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8047f20:	687b      	ldr	r3, [r7, #4]
 8047f22:	2201      	movs	r2, #1
 8047f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8047f28:	687b      	ldr	r3, [r7, #4]
 8047f2a:	2201      	movs	r2, #1
 8047f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8047f30:	687b      	ldr	r3, [r7, #4]
 8047f32:	2201      	movs	r2, #1
 8047f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8047f38:	687b      	ldr	r3, [r7, #4]
 8047f3a:	2201      	movs	r2, #1
 8047f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8047f40:	687b      	ldr	r3, [r7, #4]
 8047f42:	2201      	movs	r2, #1
 8047f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8047f48:	2300      	movs	r3, #0
}
 8047f4a:	4618      	mov	r0, r3
 8047f4c:	3708      	adds	r7, #8
 8047f4e:	46bd      	mov	sp, r7
 8047f50:	bd80      	pop	{r7, pc}
	...

08047f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8047f54:	b480      	push	{r7}
 8047f56:	b085      	sub	sp, #20
 8047f58:	af00      	add	r7, sp, #0
 8047f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8047f5c:	687b      	ldr	r3, [r7, #4]
 8047f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8047f62:	b2db      	uxtb	r3, r3
 8047f64:	2b01      	cmp	r3, #1
 8047f66:	d001      	beq.n	8047f6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8047f68:	2301      	movs	r3, #1
 8047f6a:	e04e      	b.n	804800a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047f6c:	687b      	ldr	r3, [r7, #4]
 8047f6e:	2202      	movs	r2, #2
 8047f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8047f74:	687b      	ldr	r3, [r7, #4]
 8047f76:	681b      	ldr	r3, [r3, #0]
 8047f78:	68da      	ldr	r2, [r3, #12]
 8047f7a:	687b      	ldr	r3, [r7, #4]
 8047f7c:	681b      	ldr	r3, [r3, #0]
 8047f7e:	f042 0201 	orr.w	r2, r2, #1
 8047f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047f84:	687b      	ldr	r3, [r7, #4]
 8047f86:	681b      	ldr	r3, [r3, #0]
 8047f88:	4a23      	ldr	r2, [pc, #140]	; (8048018 <HAL_TIM_Base_Start_IT+0xc4>)
 8047f8a:	4293      	cmp	r3, r2
 8047f8c:	d022      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047f8e:	687b      	ldr	r3, [r7, #4]
 8047f90:	681b      	ldr	r3, [r3, #0]
 8047f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047f96:	d01d      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047f98:	687b      	ldr	r3, [r7, #4]
 8047f9a:	681b      	ldr	r3, [r3, #0]
 8047f9c:	4a1f      	ldr	r2, [pc, #124]	; (804801c <HAL_TIM_Base_Start_IT+0xc8>)
 8047f9e:	4293      	cmp	r3, r2
 8047fa0:	d018      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047fa2:	687b      	ldr	r3, [r7, #4]
 8047fa4:	681b      	ldr	r3, [r3, #0]
 8047fa6:	4a1e      	ldr	r2, [pc, #120]	; (8048020 <HAL_TIM_Base_Start_IT+0xcc>)
 8047fa8:	4293      	cmp	r3, r2
 8047faa:	d013      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047fac:	687b      	ldr	r3, [r7, #4]
 8047fae:	681b      	ldr	r3, [r3, #0]
 8047fb0:	4a1c      	ldr	r2, [pc, #112]	; (8048024 <HAL_TIM_Base_Start_IT+0xd0>)
 8047fb2:	4293      	cmp	r3, r2
 8047fb4:	d00e      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047fb6:	687b      	ldr	r3, [r7, #4]
 8047fb8:	681b      	ldr	r3, [r3, #0]
 8047fba:	4a1b      	ldr	r2, [pc, #108]	; (8048028 <HAL_TIM_Base_Start_IT+0xd4>)
 8047fbc:	4293      	cmp	r3, r2
 8047fbe:	d009      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047fc0:	687b      	ldr	r3, [r7, #4]
 8047fc2:	681b      	ldr	r3, [r3, #0]
 8047fc4:	4a19      	ldr	r2, [pc, #100]	; (804802c <HAL_TIM_Base_Start_IT+0xd8>)
 8047fc6:	4293      	cmp	r3, r2
 8047fc8:	d004      	beq.n	8047fd4 <HAL_TIM_Base_Start_IT+0x80>
 8047fca:	687b      	ldr	r3, [r7, #4]
 8047fcc:	681b      	ldr	r3, [r3, #0]
 8047fce:	4a18      	ldr	r2, [pc, #96]	; (8048030 <HAL_TIM_Base_Start_IT+0xdc>)
 8047fd0:	4293      	cmp	r3, r2
 8047fd2:	d111      	bne.n	8047ff8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8047fd4:	687b      	ldr	r3, [r7, #4]
 8047fd6:	681b      	ldr	r3, [r3, #0]
 8047fd8:	689b      	ldr	r3, [r3, #8]
 8047fda:	f003 0307 	and.w	r3, r3, #7
 8047fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047fe0:	68fb      	ldr	r3, [r7, #12]
 8047fe2:	2b06      	cmp	r3, #6
 8047fe4:	d010      	beq.n	8048008 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8047fe6:	687b      	ldr	r3, [r7, #4]
 8047fe8:	681b      	ldr	r3, [r3, #0]
 8047fea:	681a      	ldr	r2, [r3, #0]
 8047fec:	687b      	ldr	r3, [r7, #4]
 8047fee:	681b      	ldr	r3, [r3, #0]
 8047ff0:	f042 0201 	orr.w	r2, r2, #1
 8047ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8047ff6:	e007      	b.n	8048008 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8047ff8:	687b      	ldr	r3, [r7, #4]
 8047ffa:	681b      	ldr	r3, [r3, #0]
 8047ffc:	681a      	ldr	r2, [r3, #0]
 8047ffe:	687b      	ldr	r3, [r7, #4]
 8048000:	681b      	ldr	r3, [r3, #0]
 8048002:	f042 0201 	orr.w	r2, r2, #1
 8048006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8048008:	2300      	movs	r3, #0
}
 804800a:	4618      	mov	r0, r3
 804800c:	3714      	adds	r7, #20
 804800e:	46bd      	mov	sp, r7
 8048010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048014:	4770      	bx	lr
 8048016:	bf00      	nop
 8048018:	40010000 	.word	0x40010000
 804801c:	40000400 	.word	0x40000400
 8048020:	40000800 	.word	0x40000800
 8048024:	40000c00 	.word	0x40000c00
 8048028:	40010400 	.word	0x40010400
 804802c:	40014000 	.word	0x40014000
 8048030:	40001800 	.word	0x40001800

08048034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8048034:	b580      	push	{r7, lr}
 8048036:	b082      	sub	sp, #8
 8048038:	af00      	add	r7, sp, #0
 804803a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804803c:	687b      	ldr	r3, [r7, #4]
 804803e:	681b      	ldr	r3, [r3, #0]
 8048040:	691b      	ldr	r3, [r3, #16]
 8048042:	f003 0302 	and.w	r3, r3, #2
 8048046:	2b02      	cmp	r3, #2
 8048048:	d122      	bne.n	8048090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804804a:	687b      	ldr	r3, [r7, #4]
 804804c:	681b      	ldr	r3, [r3, #0]
 804804e:	68db      	ldr	r3, [r3, #12]
 8048050:	f003 0302 	and.w	r3, r3, #2
 8048054:	2b02      	cmp	r3, #2
 8048056:	d11b      	bne.n	8048090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8048058:	687b      	ldr	r3, [r7, #4]
 804805a:	681b      	ldr	r3, [r3, #0]
 804805c:	f06f 0202 	mvn.w	r2, #2
 8048060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8048062:	687b      	ldr	r3, [r7, #4]
 8048064:	2201      	movs	r2, #1
 8048066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8048068:	687b      	ldr	r3, [r7, #4]
 804806a:	681b      	ldr	r3, [r3, #0]
 804806c:	699b      	ldr	r3, [r3, #24]
 804806e:	f003 0303 	and.w	r3, r3, #3
 8048072:	2b00      	cmp	r3, #0
 8048074:	d003      	beq.n	804807e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8048076:	6878      	ldr	r0, [r7, #4]
 8048078:	f000 f9b5 	bl	80483e6 <HAL_TIM_IC_CaptureCallback>
 804807c:	e005      	b.n	804808a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804807e:	6878      	ldr	r0, [r7, #4]
 8048080:	f000 f9a7 	bl	80483d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048084:	6878      	ldr	r0, [r7, #4]
 8048086:	f000 f9b8 	bl	80483fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804808a:	687b      	ldr	r3, [r7, #4]
 804808c:	2200      	movs	r2, #0
 804808e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8048090:	687b      	ldr	r3, [r7, #4]
 8048092:	681b      	ldr	r3, [r3, #0]
 8048094:	691b      	ldr	r3, [r3, #16]
 8048096:	f003 0304 	and.w	r3, r3, #4
 804809a:	2b04      	cmp	r3, #4
 804809c:	d122      	bne.n	80480e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804809e:	687b      	ldr	r3, [r7, #4]
 80480a0:	681b      	ldr	r3, [r3, #0]
 80480a2:	68db      	ldr	r3, [r3, #12]
 80480a4:	f003 0304 	and.w	r3, r3, #4
 80480a8:	2b04      	cmp	r3, #4
 80480aa:	d11b      	bne.n	80480e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80480ac:	687b      	ldr	r3, [r7, #4]
 80480ae:	681b      	ldr	r3, [r3, #0]
 80480b0:	f06f 0204 	mvn.w	r2, #4
 80480b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80480b6:	687b      	ldr	r3, [r7, #4]
 80480b8:	2202      	movs	r2, #2
 80480ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80480bc:	687b      	ldr	r3, [r7, #4]
 80480be:	681b      	ldr	r3, [r3, #0]
 80480c0:	699b      	ldr	r3, [r3, #24]
 80480c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80480c6:	2b00      	cmp	r3, #0
 80480c8:	d003      	beq.n	80480d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80480ca:	6878      	ldr	r0, [r7, #4]
 80480cc:	f000 f98b 	bl	80483e6 <HAL_TIM_IC_CaptureCallback>
 80480d0:	e005      	b.n	80480de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80480d2:	6878      	ldr	r0, [r7, #4]
 80480d4:	f000 f97d 	bl	80483d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80480d8:	6878      	ldr	r0, [r7, #4]
 80480da:	f000 f98e 	bl	80483fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80480de:	687b      	ldr	r3, [r7, #4]
 80480e0:	2200      	movs	r2, #0
 80480e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80480e4:	687b      	ldr	r3, [r7, #4]
 80480e6:	681b      	ldr	r3, [r3, #0]
 80480e8:	691b      	ldr	r3, [r3, #16]
 80480ea:	f003 0308 	and.w	r3, r3, #8
 80480ee:	2b08      	cmp	r3, #8
 80480f0:	d122      	bne.n	8048138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80480f2:	687b      	ldr	r3, [r7, #4]
 80480f4:	681b      	ldr	r3, [r3, #0]
 80480f6:	68db      	ldr	r3, [r3, #12]
 80480f8:	f003 0308 	and.w	r3, r3, #8
 80480fc:	2b08      	cmp	r3, #8
 80480fe:	d11b      	bne.n	8048138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8048100:	687b      	ldr	r3, [r7, #4]
 8048102:	681b      	ldr	r3, [r3, #0]
 8048104:	f06f 0208 	mvn.w	r2, #8
 8048108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804810a:	687b      	ldr	r3, [r7, #4]
 804810c:	2204      	movs	r2, #4
 804810e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8048110:	687b      	ldr	r3, [r7, #4]
 8048112:	681b      	ldr	r3, [r3, #0]
 8048114:	69db      	ldr	r3, [r3, #28]
 8048116:	f003 0303 	and.w	r3, r3, #3
 804811a:	2b00      	cmp	r3, #0
 804811c:	d003      	beq.n	8048126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804811e:	6878      	ldr	r0, [r7, #4]
 8048120:	f000 f961 	bl	80483e6 <HAL_TIM_IC_CaptureCallback>
 8048124:	e005      	b.n	8048132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048126:	6878      	ldr	r0, [r7, #4]
 8048128:	f000 f953 	bl	80483d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804812c:	6878      	ldr	r0, [r7, #4]
 804812e:	f000 f964 	bl	80483fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048132:	687b      	ldr	r3, [r7, #4]
 8048134:	2200      	movs	r2, #0
 8048136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8048138:	687b      	ldr	r3, [r7, #4]
 804813a:	681b      	ldr	r3, [r3, #0]
 804813c:	691b      	ldr	r3, [r3, #16]
 804813e:	f003 0310 	and.w	r3, r3, #16
 8048142:	2b10      	cmp	r3, #16
 8048144:	d122      	bne.n	804818c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8048146:	687b      	ldr	r3, [r7, #4]
 8048148:	681b      	ldr	r3, [r3, #0]
 804814a:	68db      	ldr	r3, [r3, #12]
 804814c:	f003 0310 	and.w	r3, r3, #16
 8048150:	2b10      	cmp	r3, #16
 8048152:	d11b      	bne.n	804818c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8048154:	687b      	ldr	r3, [r7, #4]
 8048156:	681b      	ldr	r3, [r3, #0]
 8048158:	f06f 0210 	mvn.w	r2, #16
 804815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804815e:	687b      	ldr	r3, [r7, #4]
 8048160:	2208      	movs	r2, #8
 8048162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8048164:	687b      	ldr	r3, [r7, #4]
 8048166:	681b      	ldr	r3, [r3, #0]
 8048168:	69db      	ldr	r3, [r3, #28]
 804816a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804816e:	2b00      	cmp	r3, #0
 8048170:	d003      	beq.n	804817a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048172:	6878      	ldr	r0, [r7, #4]
 8048174:	f000 f937 	bl	80483e6 <HAL_TIM_IC_CaptureCallback>
 8048178:	e005      	b.n	8048186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804817a:	6878      	ldr	r0, [r7, #4]
 804817c:	f000 f929 	bl	80483d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048180:	6878      	ldr	r0, [r7, #4]
 8048182:	f000 f93a 	bl	80483fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048186:	687b      	ldr	r3, [r7, #4]
 8048188:	2200      	movs	r2, #0
 804818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804818c:	687b      	ldr	r3, [r7, #4]
 804818e:	681b      	ldr	r3, [r3, #0]
 8048190:	691b      	ldr	r3, [r3, #16]
 8048192:	f003 0301 	and.w	r3, r3, #1
 8048196:	2b01      	cmp	r3, #1
 8048198:	d10e      	bne.n	80481b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804819a:	687b      	ldr	r3, [r7, #4]
 804819c:	681b      	ldr	r3, [r3, #0]
 804819e:	68db      	ldr	r3, [r3, #12]
 80481a0:	f003 0301 	and.w	r3, r3, #1
 80481a4:	2b01      	cmp	r3, #1
 80481a6:	d107      	bne.n	80481b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80481a8:	687b      	ldr	r3, [r7, #4]
 80481aa:	681b      	ldr	r3, [r3, #0]
 80481ac:	f06f 0201 	mvn.w	r2, #1
 80481b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80481b2:	6878      	ldr	r0, [r7, #4]
 80481b4:	f7f8 fe70 	bl	8040e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80481b8:	687b      	ldr	r3, [r7, #4]
 80481ba:	681b      	ldr	r3, [r3, #0]
 80481bc:	691b      	ldr	r3, [r3, #16]
 80481be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80481c2:	2b80      	cmp	r3, #128	; 0x80
 80481c4:	d10e      	bne.n	80481e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80481c6:	687b      	ldr	r3, [r7, #4]
 80481c8:	681b      	ldr	r3, [r3, #0]
 80481ca:	68db      	ldr	r3, [r3, #12]
 80481cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80481d0:	2b80      	cmp	r3, #128	; 0x80
 80481d2:	d107      	bne.n	80481e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80481d4:	687b      	ldr	r3, [r7, #4]
 80481d6:	681b      	ldr	r3, [r3, #0]
 80481d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80481dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80481de:	6878      	ldr	r0, [r7, #4]
 80481e0:	f000 fae0 	bl	80487a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80481e4:	687b      	ldr	r3, [r7, #4]
 80481e6:	681b      	ldr	r3, [r3, #0]
 80481e8:	691b      	ldr	r3, [r3, #16]
 80481ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80481ee:	2b40      	cmp	r3, #64	; 0x40
 80481f0:	d10e      	bne.n	8048210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80481f2:	687b      	ldr	r3, [r7, #4]
 80481f4:	681b      	ldr	r3, [r3, #0]
 80481f6:	68db      	ldr	r3, [r3, #12]
 80481f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80481fc:	2b40      	cmp	r3, #64	; 0x40
 80481fe:	d107      	bne.n	8048210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8048200:	687b      	ldr	r3, [r7, #4]
 8048202:	681b      	ldr	r3, [r3, #0]
 8048204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8048208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 804820a:	6878      	ldr	r0, [r7, #4]
 804820c:	f000 f8ff 	bl	804840e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8048210:	687b      	ldr	r3, [r7, #4]
 8048212:	681b      	ldr	r3, [r3, #0]
 8048214:	691b      	ldr	r3, [r3, #16]
 8048216:	f003 0320 	and.w	r3, r3, #32
 804821a:	2b20      	cmp	r3, #32
 804821c:	d10e      	bne.n	804823c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804821e:	687b      	ldr	r3, [r7, #4]
 8048220:	681b      	ldr	r3, [r3, #0]
 8048222:	68db      	ldr	r3, [r3, #12]
 8048224:	f003 0320 	and.w	r3, r3, #32
 8048228:	2b20      	cmp	r3, #32
 804822a:	d107      	bne.n	804823c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804822c:	687b      	ldr	r3, [r7, #4]
 804822e:	681b      	ldr	r3, [r3, #0]
 8048230:	f06f 0220 	mvn.w	r2, #32
 8048234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8048236:	6878      	ldr	r0, [r7, #4]
 8048238:	f000 faaa 	bl	8048790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804823c:	bf00      	nop
 804823e:	3708      	adds	r7, #8
 8048240:	46bd      	mov	sp, r7
 8048242:	bd80      	pop	{r7, pc}

08048244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8048244:	b580      	push	{r7, lr}
 8048246:	b084      	sub	sp, #16
 8048248:	af00      	add	r7, sp, #0
 804824a:	6078      	str	r0, [r7, #4]
 804824c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804824e:	2300      	movs	r3, #0
 8048250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8048252:	687b      	ldr	r3, [r7, #4]
 8048254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048258:	2b01      	cmp	r3, #1
 804825a:	d101      	bne.n	8048260 <HAL_TIM_ConfigClockSource+0x1c>
 804825c:	2302      	movs	r3, #2
 804825e:	e0b4      	b.n	80483ca <HAL_TIM_ConfigClockSource+0x186>
 8048260:	687b      	ldr	r3, [r7, #4]
 8048262:	2201      	movs	r2, #1
 8048264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8048268:	687b      	ldr	r3, [r7, #4]
 804826a:	2202      	movs	r2, #2
 804826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8048270:	687b      	ldr	r3, [r7, #4]
 8048272:	681b      	ldr	r3, [r3, #0]
 8048274:	689b      	ldr	r3, [r3, #8]
 8048276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8048278:	68bb      	ldr	r3, [r7, #8]
 804827a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 804827e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048280:	68bb      	ldr	r3, [r7, #8]
 8048282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8048288:	687b      	ldr	r3, [r7, #4]
 804828a:	681b      	ldr	r3, [r3, #0]
 804828c:	68ba      	ldr	r2, [r7, #8]
 804828e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8048290:	683b      	ldr	r3, [r7, #0]
 8048292:	681b      	ldr	r3, [r3, #0]
 8048294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048298:	d03e      	beq.n	8048318 <HAL_TIM_ConfigClockSource+0xd4>
 804829a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804829e:	f200 8087 	bhi.w	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80482a6:	f000 8086 	beq.w	80483b6 <HAL_TIM_ConfigClockSource+0x172>
 80482aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80482ae:	d87f      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482b0:	2b70      	cmp	r3, #112	; 0x70
 80482b2:	d01a      	beq.n	80482ea <HAL_TIM_ConfigClockSource+0xa6>
 80482b4:	2b70      	cmp	r3, #112	; 0x70
 80482b6:	d87b      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482b8:	2b60      	cmp	r3, #96	; 0x60
 80482ba:	d050      	beq.n	804835e <HAL_TIM_ConfigClockSource+0x11a>
 80482bc:	2b60      	cmp	r3, #96	; 0x60
 80482be:	d877      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482c0:	2b50      	cmp	r3, #80	; 0x50
 80482c2:	d03c      	beq.n	804833e <HAL_TIM_ConfigClockSource+0xfa>
 80482c4:	2b50      	cmp	r3, #80	; 0x50
 80482c6:	d873      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482c8:	2b40      	cmp	r3, #64	; 0x40
 80482ca:	d058      	beq.n	804837e <HAL_TIM_ConfigClockSource+0x13a>
 80482cc:	2b40      	cmp	r3, #64	; 0x40
 80482ce:	d86f      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482d0:	2b30      	cmp	r3, #48	; 0x30
 80482d2:	d064      	beq.n	804839e <HAL_TIM_ConfigClockSource+0x15a>
 80482d4:	2b30      	cmp	r3, #48	; 0x30
 80482d6:	d86b      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482d8:	2b20      	cmp	r3, #32
 80482da:	d060      	beq.n	804839e <HAL_TIM_ConfigClockSource+0x15a>
 80482dc:	2b20      	cmp	r3, #32
 80482de:	d867      	bhi.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
 80482e0:	2b00      	cmp	r3, #0
 80482e2:	d05c      	beq.n	804839e <HAL_TIM_ConfigClockSource+0x15a>
 80482e4:	2b10      	cmp	r3, #16
 80482e6:	d05a      	beq.n	804839e <HAL_TIM_ConfigClockSource+0x15a>
 80482e8:	e062      	b.n	80483b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80482ea:	687b      	ldr	r3, [r7, #4]
 80482ec:	6818      	ldr	r0, [r3, #0]
 80482ee:	683b      	ldr	r3, [r7, #0]
 80482f0:	6899      	ldr	r1, [r3, #8]
 80482f2:	683b      	ldr	r3, [r7, #0]
 80482f4:	685a      	ldr	r2, [r3, #4]
 80482f6:	683b      	ldr	r3, [r7, #0]
 80482f8:	68db      	ldr	r3, [r3, #12]
 80482fa:	f000 f9ad 	bl	8048658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80482fe:	687b      	ldr	r3, [r7, #4]
 8048300:	681b      	ldr	r3, [r3, #0]
 8048302:	689b      	ldr	r3, [r3, #8]
 8048304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8048306:	68bb      	ldr	r3, [r7, #8]
 8048308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 804830c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 804830e:	687b      	ldr	r3, [r7, #4]
 8048310:	681b      	ldr	r3, [r3, #0]
 8048312:	68ba      	ldr	r2, [r7, #8]
 8048314:	609a      	str	r2, [r3, #8]
      break;
 8048316:	e04f      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8048318:	687b      	ldr	r3, [r7, #4]
 804831a:	6818      	ldr	r0, [r3, #0]
 804831c:	683b      	ldr	r3, [r7, #0]
 804831e:	6899      	ldr	r1, [r3, #8]
 8048320:	683b      	ldr	r3, [r7, #0]
 8048322:	685a      	ldr	r2, [r3, #4]
 8048324:	683b      	ldr	r3, [r7, #0]
 8048326:	68db      	ldr	r3, [r3, #12]
 8048328:	f000 f996 	bl	8048658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 804832c:	687b      	ldr	r3, [r7, #4]
 804832e:	681b      	ldr	r3, [r3, #0]
 8048330:	689a      	ldr	r2, [r3, #8]
 8048332:	687b      	ldr	r3, [r7, #4]
 8048334:	681b      	ldr	r3, [r3, #0]
 8048336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804833a:	609a      	str	r2, [r3, #8]
      break;
 804833c:	e03c      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804833e:	687b      	ldr	r3, [r7, #4]
 8048340:	6818      	ldr	r0, [r3, #0]
 8048342:	683b      	ldr	r3, [r7, #0]
 8048344:	6859      	ldr	r1, [r3, #4]
 8048346:	683b      	ldr	r3, [r7, #0]
 8048348:	68db      	ldr	r3, [r3, #12]
 804834a:	461a      	mov	r2, r3
 804834c:	f000 f90a 	bl	8048564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8048350:	687b      	ldr	r3, [r7, #4]
 8048352:	681b      	ldr	r3, [r3, #0]
 8048354:	2150      	movs	r1, #80	; 0x50
 8048356:	4618      	mov	r0, r3
 8048358:	f000 f963 	bl	8048622 <TIM_ITRx_SetConfig>
      break;
 804835c:	e02c      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 804835e:	687b      	ldr	r3, [r7, #4]
 8048360:	6818      	ldr	r0, [r3, #0]
 8048362:	683b      	ldr	r3, [r7, #0]
 8048364:	6859      	ldr	r1, [r3, #4]
 8048366:	683b      	ldr	r3, [r7, #0]
 8048368:	68db      	ldr	r3, [r3, #12]
 804836a:	461a      	mov	r2, r3
 804836c:	f000 f929 	bl	80485c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8048370:	687b      	ldr	r3, [r7, #4]
 8048372:	681b      	ldr	r3, [r3, #0]
 8048374:	2160      	movs	r1, #96	; 0x60
 8048376:	4618      	mov	r0, r3
 8048378:	f000 f953 	bl	8048622 <TIM_ITRx_SetConfig>
      break;
 804837c:	e01c      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804837e:	687b      	ldr	r3, [r7, #4]
 8048380:	6818      	ldr	r0, [r3, #0]
 8048382:	683b      	ldr	r3, [r7, #0]
 8048384:	6859      	ldr	r1, [r3, #4]
 8048386:	683b      	ldr	r3, [r7, #0]
 8048388:	68db      	ldr	r3, [r3, #12]
 804838a:	461a      	mov	r2, r3
 804838c:	f000 f8ea 	bl	8048564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8048390:	687b      	ldr	r3, [r7, #4]
 8048392:	681b      	ldr	r3, [r3, #0]
 8048394:	2140      	movs	r1, #64	; 0x40
 8048396:	4618      	mov	r0, r3
 8048398:	f000 f943 	bl	8048622 <TIM_ITRx_SetConfig>
      break;
 804839c:	e00c      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804839e:	687b      	ldr	r3, [r7, #4]
 80483a0:	681a      	ldr	r2, [r3, #0]
 80483a2:	683b      	ldr	r3, [r7, #0]
 80483a4:	681b      	ldr	r3, [r3, #0]
 80483a6:	4619      	mov	r1, r3
 80483a8:	4610      	mov	r0, r2
 80483aa:	f000 f93a 	bl	8048622 <TIM_ITRx_SetConfig>
      break;
 80483ae:	e003      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80483b0:	2301      	movs	r3, #1
 80483b2:	73fb      	strb	r3, [r7, #15]
      break;
 80483b4:	e000      	b.n	80483b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80483b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80483b8:	687b      	ldr	r3, [r7, #4]
 80483ba:	2201      	movs	r2, #1
 80483bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80483c0:	687b      	ldr	r3, [r7, #4]
 80483c2:	2200      	movs	r2, #0
 80483c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80483c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80483ca:	4618      	mov	r0, r3
 80483cc:	3710      	adds	r7, #16
 80483ce:	46bd      	mov	sp, r7
 80483d0:	bd80      	pop	{r7, pc}

080483d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80483d2:	b480      	push	{r7}
 80483d4:	b083      	sub	sp, #12
 80483d6:	af00      	add	r7, sp, #0
 80483d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80483da:	bf00      	nop
 80483dc:	370c      	adds	r7, #12
 80483de:	46bd      	mov	sp, r7
 80483e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483e4:	4770      	bx	lr

080483e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80483e6:	b480      	push	{r7}
 80483e8:	b083      	sub	sp, #12
 80483ea:	af00      	add	r7, sp, #0
 80483ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80483ee:	bf00      	nop
 80483f0:	370c      	adds	r7, #12
 80483f2:	46bd      	mov	sp, r7
 80483f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483f8:	4770      	bx	lr

080483fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80483fa:	b480      	push	{r7}
 80483fc:	b083      	sub	sp, #12
 80483fe:	af00      	add	r7, sp, #0
 8048400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8048402:	bf00      	nop
 8048404:	370c      	adds	r7, #12
 8048406:	46bd      	mov	sp, r7
 8048408:	f85d 7b04 	ldr.w	r7, [sp], #4
 804840c:	4770      	bx	lr

0804840e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804840e:	b480      	push	{r7}
 8048410:	b083      	sub	sp, #12
 8048412:	af00      	add	r7, sp, #0
 8048414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8048416:	bf00      	nop
 8048418:	370c      	adds	r7, #12
 804841a:	46bd      	mov	sp, r7
 804841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048420:	4770      	bx	lr
	...

08048424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8048424:	b480      	push	{r7}
 8048426:	b085      	sub	sp, #20
 8048428:	af00      	add	r7, sp, #0
 804842a:	6078      	str	r0, [r7, #4]
 804842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804842e:	687b      	ldr	r3, [r7, #4]
 8048430:	681b      	ldr	r3, [r3, #0]
 8048432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8048434:	687b      	ldr	r3, [r7, #4]
 8048436:	4a40      	ldr	r2, [pc, #256]	; (8048538 <TIM_Base_SetConfig+0x114>)
 8048438:	4293      	cmp	r3, r2
 804843a:	d013      	beq.n	8048464 <TIM_Base_SetConfig+0x40>
 804843c:	687b      	ldr	r3, [r7, #4]
 804843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048442:	d00f      	beq.n	8048464 <TIM_Base_SetConfig+0x40>
 8048444:	687b      	ldr	r3, [r7, #4]
 8048446:	4a3d      	ldr	r2, [pc, #244]	; (804853c <TIM_Base_SetConfig+0x118>)
 8048448:	4293      	cmp	r3, r2
 804844a:	d00b      	beq.n	8048464 <TIM_Base_SetConfig+0x40>
 804844c:	687b      	ldr	r3, [r7, #4]
 804844e:	4a3c      	ldr	r2, [pc, #240]	; (8048540 <TIM_Base_SetConfig+0x11c>)
 8048450:	4293      	cmp	r3, r2
 8048452:	d007      	beq.n	8048464 <TIM_Base_SetConfig+0x40>
 8048454:	687b      	ldr	r3, [r7, #4]
 8048456:	4a3b      	ldr	r2, [pc, #236]	; (8048544 <TIM_Base_SetConfig+0x120>)
 8048458:	4293      	cmp	r3, r2
 804845a:	d003      	beq.n	8048464 <TIM_Base_SetConfig+0x40>
 804845c:	687b      	ldr	r3, [r7, #4]
 804845e:	4a3a      	ldr	r2, [pc, #232]	; (8048548 <TIM_Base_SetConfig+0x124>)
 8048460:	4293      	cmp	r3, r2
 8048462:	d108      	bne.n	8048476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8048464:	68fb      	ldr	r3, [r7, #12]
 8048466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804846a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804846c:	683b      	ldr	r3, [r7, #0]
 804846e:	685b      	ldr	r3, [r3, #4]
 8048470:	68fa      	ldr	r2, [r7, #12]
 8048472:	4313      	orrs	r3, r2
 8048474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8048476:	687b      	ldr	r3, [r7, #4]
 8048478:	4a2f      	ldr	r2, [pc, #188]	; (8048538 <TIM_Base_SetConfig+0x114>)
 804847a:	4293      	cmp	r3, r2
 804847c:	d02b      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 804847e:	687b      	ldr	r3, [r7, #4]
 8048480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048484:	d027      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 8048486:	687b      	ldr	r3, [r7, #4]
 8048488:	4a2c      	ldr	r2, [pc, #176]	; (804853c <TIM_Base_SetConfig+0x118>)
 804848a:	4293      	cmp	r3, r2
 804848c:	d023      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 804848e:	687b      	ldr	r3, [r7, #4]
 8048490:	4a2b      	ldr	r2, [pc, #172]	; (8048540 <TIM_Base_SetConfig+0x11c>)
 8048492:	4293      	cmp	r3, r2
 8048494:	d01f      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 8048496:	687b      	ldr	r3, [r7, #4]
 8048498:	4a2a      	ldr	r2, [pc, #168]	; (8048544 <TIM_Base_SetConfig+0x120>)
 804849a:	4293      	cmp	r3, r2
 804849c:	d01b      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 804849e:	687b      	ldr	r3, [r7, #4]
 80484a0:	4a29      	ldr	r2, [pc, #164]	; (8048548 <TIM_Base_SetConfig+0x124>)
 80484a2:	4293      	cmp	r3, r2
 80484a4:	d017      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484a6:	687b      	ldr	r3, [r7, #4]
 80484a8:	4a28      	ldr	r2, [pc, #160]	; (804854c <TIM_Base_SetConfig+0x128>)
 80484aa:	4293      	cmp	r3, r2
 80484ac:	d013      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484ae:	687b      	ldr	r3, [r7, #4]
 80484b0:	4a27      	ldr	r2, [pc, #156]	; (8048550 <TIM_Base_SetConfig+0x12c>)
 80484b2:	4293      	cmp	r3, r2
 80484b4:	d00f      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484b6:	687b      	ldr	r3, [r7, #4]
 80484b8:	4a26      	ldr	r2, [pc, #152]	; (8048554 <TIM_Base_SetConfig+0x130>)
 80484ba:	4293      	cmp	r3, r2
 80484bc:	d00b      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484be:	687b      	ldr	r3, [r7, #4]
 80484c0:	4a25      	ldr	r2, [pc, #148]	; (8048558 <TIM_Base_SetConfig+0x134>)
 80484c2:	4293      	cmp	r3, r2
 80484c4:	d007      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484c6:	687b      	ldr	r3, [r7, #4]
 80484c8:	4a24      	ldr	r2, [pc, #144]	; (804855c <TIM_Base_SetConfig+0x138>)
 80484ca:	4293      	cmp	r3, r2
 80484cc:	d003      	beq.n	80484d6 <TIM_Base_SetConfig+0xb2>
 80484ce:	687b      	ldr	r3, [r7, #4]
 80484d0:	4a23      	ldr	r2, [pc, #140]	; (8048560 <TIM_Base_SetConfig+0x13c>)
 80484d2:	4293      	cmp	r3, r2
 80484d4:	d108      	bne.n	80484e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80484d6:	68fb      	ldr	r3, [r7, #12]
 80484d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80484dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80484de:	683b      	ldr	r3, [r7, #0]
 80484e0:	68db      	ldr	r3, [r3, #12]
 80484e2:	68fa      	ldr	r2, [r7, #12]
 80484e4:	4313      	orrs	r3, r2
 80484e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80484e8:	68fb      	ldr	r3, [r7, #12]
 80484ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80484ee:	683b      	ldr	r3, [r7, #0]
 80484f0:	695b      	ldr	r3, [r3, #20]
 80484f2:	4313      	orrs	r3, r2
 80484f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80484f6:	687b      	ldr	r3, [r7, #4]
 80484f8:	68fa      	ldr	r2, [r7, #12]
 80484fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80484fc:	683b      	ldr	r3, [r7, #0]
 80484fe:	689a      	ldr	r2, [r3, #8]
 8048500:	687b      	ldr	r3, [r7, #4]
 8048502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8048504:	683b      	ldr	r3, [r7, #0]
 8048506:	681a      	ldr	r2, [r3, #0]
 8048508:	687b      	ldr	r3, [r7, #4]
 804850a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 804850c:	687b      	ldr	r3, [r7, #4]
 804850e:	4a0a      	ldr	r2, [pc, #40]	; (8048538 <TIM_Base_SetConfig+0x114>)
 8048510:	4293      	cmp	r3, r2
 8048512:	d003      	beq.n	804851c <TIM_Base_SetConfig+0xf8>
 8048514:	687b      	ldr	r3, [r7, #4]
 8048516:	4a0c      	ldr	r2, [pc, #48]	; (8048548 <TIM_Base_SetConfig+0x124>)
 8048518:	4293      	cmp	r3, r2
 804851a:	d103      	bne.n	8048524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804851c:	683b      	ldr	r3, [r7, #0]
 804851e:	691a      	ldr	r2, [r3, #16]
 8048520:	687b      	ldr	r3, [r7, #4]
 8048522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8048524:	687b      	ldr	r3, [r7, #4]
 8048526:	2201      	movs	r2, #1
 8048528:	615a      	str	r2, [r3, #20]
}
 804852a:	bf00      	nop
 804852c:	3714      	adds	r7, #20
 804852e:	46bd      	mov	sp, r7
 8048530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048534:	4770      	bx	lr
 8048536:	bf00      	nop
 8048538:	40010000 	.word	0x40010000
 804853c:	40000400 	.word	0x40000400
 8048540:	40000800 	.word	0x40000800
 8048544:	40000c00 	.word	0x40000c00
 8048548:	40010400 	.word	0x40010400
 804854c:	40014000 	.word	0x40014000
 8048550:	40014400 	.word	0x40014400
 8048554:	40014800 	.word	0x40014800
 8048558:	40001800 	.word	0x40001800
 804855c:	40001c00 	.word	0x40001c00
 8048560:	40002000 	.word	0x40002000

08048564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048564:	b480      	push	{r7}
 8048566:	b087      	sub	sp, #28
 8048568:	af00      	add	r7, sp, #0
 804856a:	60f8      	str	r0, [r7, #12]
 804856c:	60b9      	str	r1, [r7, #8]
 804856e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8048570:	68fb      	ldr	r3, [r7, #12]
 8048572:	6a1b      	ldr	r3, [r3, #32]
 8048574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8048576:	68fb      	ldr	r3, [r7, #12]
 8048578:	6a1b      	ldr	r3, [r3, #32]
 804857a:	f023 0201 	bic.w	r2, r3, #1
 804857e:	68fb      	ldr	r3, [r7, #12]
 8048580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048582:	68fb      	ldr	r3, [r7, #12]
 8048584:	699b      	ldr	r3, [r3, #24]
 8048586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8048588:	693b      	ldr	r3, [r7, #16]
 804858a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804858e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8048590:	687b      	ldr	r3, [r7, #4]
 8048592:	011b      	lsls	r3, r3, #4
 8048594:	693a      	ldr	r2, [r7, #16]
 8048596:	4313      	orrs	r3, r2
 8048598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 804859a:	697b      	ldr	r3, [r7, #20]
 804859c:	f023 030a 	bic.w	r3, r3, #10
 80485a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80485a2:	697a      	ldr	r2, [r7, #20]
 80485a4:	68bb      	ldr	r3, [r7, #8]
 80485a6:	4313      	orrs	r3, r2
 80485a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80485aa:	68fb      	ldr	r3, [r7, #12]
 80485ac:	693a      	ldr	r2, [r7, #16]
 80485ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80485b0:	68fb      	ldr	r3, [r7, #12]
 80485b2:	697a      	ldr	r2, [r7, #20]
 80485b4:	621a      	str	r2, [r3, #32]
}
 80485b6:	bf00      	nop
 80485b8:	371c      	adds	r7, #28
 80485ba:	46bd      	mov	sp, r7
 80485bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485c0:	4770      	bx	lr

080485c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80485c2:	b480      	push	{r7}
 80485c4:	b087      	sub	sp, #28
 80485c6:	af00      	add	r7, sp, #0
 80485c8:	60f8      	str	r0, [r7, #12]
 80485ca:	60b9      	str	r1, [r7, #8]
 80485cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80485ce:	68fb      	ldr	r3, [r7, #12]
 80485d0:	6a1b      	ldr	r3, [r3, #32]
 80485d2:	f023 0210 	bic.w	r2, r3, #16
 80485d6:	68fb      	ldr	r3, [r7, #12]
 80485d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80485da:	68fb      	ldr	r3, [r7, #12]
 80485dc:	699b      	ldr	r3, [r3, #24]
 80485de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80485e0:	68fb      	ldr	r3, [r7, #12]
 80485e2:	6a1b      	ldr	r3, [r3, #32]
 80485e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80485e6:	697b      	ldr	r3, [r7, #20]
 80485e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80485ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	031b      	lsls	r3, r3, #12
 80485f2:	697a      	ldr	r2, [r7, #20]
 80485f4:	4313      	orrs	r3, r2
 80485f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80485f8:	693b      	ldr	r3, [r7, #16]
 80485fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80485fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8048600:	68bb      	ldr	r3, [r7, #8]
 8048602:	011b      	lsls	r3, r3, #4
 8048604:	693a      	ldr	r2, [r7, #16]
 8048606:	4313      	orrs	r3, r2
 8048608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 804860a:	68fb      	ldr	r3, [r7, #12]
 804860c:	697a      	ldr	r2, [r7, #20]
 804860e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048610:	68fb      	ldr	r3, [r7, #12]
 8048612:	693a      	ldr	r2, [r7, #16]
 8048614:	621a      	str	r2, [r3, #32]
}
 8048616:	bf00      	nop
 8048618:	371c      	adds	r7, #28
 804861a:	46bd      	mov	sp, r7
 804861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048620:	4770      	bx	lr

08048622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8048622:	b480      	push	{r7}
 8048624:	b085      	sub	sp, #20
 8048626:	af00      	add	r7, sp, #0
 8048628:	6078      	str	r0, [r7, #4]
 804862a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 804862c:	687b      	ldr	r3, [r7, #4]
 804862e:	689b      	ldr	r3, [r3, #8]
 8048630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8048632:	68fb      	ldr	r3, [r7, #12]
 8048634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804863a:	683a      	ldr	r2, [r7, #0]
 804863c:	68fb      	ldr	r3, [r7, #12]
 804863e:	4313      	orrs	r3, r2
 8048640:	f043 0307 	orr.w	r3, r3, #7
 8048644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048646:	687b      	ldr	r3, [r7, #4]
 8048648:	68fa      	ldr	r2, [r7, #12]
 804864a:	609a      	str	r2, [r3, #8]
}
 804864c:	bf00      	nop
 804864e:	3714      	adds	r7, #20
 8048650:	46bd      	mov	sp, r7
 8048652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048656:	4770      	bx	lr

08048658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8048658:	b480      	push	{r7}
 804865a:	b087      	sub	sp, #28
 804865c:	af00      	add	r7, sp, #0
 804865e:	60f8      	str	r0, [r7, #12]
 8048660:	60b9      	str	r1, [r7, #8]
 8048662:	607a      	str	r2, [r7, #4]
 8048664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8048666:	68fb      	ldr	r3, [r7, #12]
 8048668:	689b      	ldr	r3, [r3, #8]
 804866a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804866c:	697b      	ldr	r3, [r7, #20]
 804866e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8048674:	683b      	ldr	r3, [r7, #0]
 8048676:	021a      	lsls	r2, r3, #8
 8048678:	687b      	ldr	r3, [r7, #4]
 804867a:	431a      	orrs	r2, r3
 804867c:	68bb      	ldr	r3, [r7, #8]
 804867e:	4313      	orrs	r3, r2
 8048680:	697a      	ldr	r2, [r7, #20]
 8048682:	4313      	orrs	r3, r2
 8048684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048686:	68fb      	ldr	r3, [r7, #12]
 8048688:	697a      	ldr	r2, [r7, #20]
 804868a:	609a      	str	r2, [r3, #8]
}
 804868c:	bf00      	nop
 804868e:	371c      	adds	r7, #28
 8048690:	46bd      	mov	sp, r7
 8048692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048696:	4770      	bx	lr

08048698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8048698:	b480      	push	{r7}
 804869a:	b085      	sub	sp, #20
 804869c:	af00      	add	r7, sp, #0
 804869e:	6078      	str	r0, [r7, #4]
 80486a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80486a2:	687b      	ldr	r3, [r7, #4]
 80486a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80486a8:	2b01      	cmp	r3, #1
 80486aa:	d101      	bne.n	80486b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80486ac:	2302      	movs	r3, #2
 80486ae:	e05a      	b.n	8048766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80486b0:	687b      	ldr	r3, [r7, #4]
 80486b2:	2201      	movs	r2, #1
 80486b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80486b8:	687b      	ldr	r3, [r7, #4]
 80486ba:	2202      	movs	r2, #2
 80486bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80486c0:	687b      	ldr	r3, [r7, #4]
 80486c2:	681b      	ldr	r3, [r3, #0]
 80486c4:	685b      	ldr	r3, [r3, #4]
 80486c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80486c8:	687b      	ldr	r3, [r7, #4]
 80486ca:	681b      	ldr	r3, [r3, #0]
 80486cc:	689b      	ldr	r3, [r3, #8]
 80486ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80486d0:	68fb      	ldr	r3, [r7, #12]
 80486d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80486d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80486d8:	683b      	ldr	r3, [r7, #0]
 80486da:	681b      	ldr	r3, [r3, #0]
 80486dc:	68fa      	ldr	r2, [r7, #12]
 80486de:	4313      	orrs	r3, r2
 80486e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80486e2:	687b      	ldr	r3, [r7, #4]
 80486e4:	681b      	ldr	r3, [r3, #0]
 80486e6:	68fa      	ldr	r2, [r7, #12]
 80486e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80486ea:	687b      	ldr	r3, [r7, #4]
 80486ec:	681b      	ldr	r3, [r3, #0]
 80486ee:	4a21      	ldr	r2, [pc, #132]	; (8048774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80486f0:	4293      	cmp	r3, r2
 80486f2:	d022      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80486f4:	687b      	ldr	r3, [r7, #4]
 80486f6:	681b      	ldr	r3, [r3, #0]
 80486f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80486fc:	d01d      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80486fe:	687b      	ldr	r3, [r7, #4]
 8048700:	681b      	ldr	r3, [r3, #0]
 8048702:	4a1d      	ldr	r2, [pc, #116]	; (8048778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048704:	4293      	cmp	r3, r2
 8048706:	d018      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048708:	687b      	ldr	r3, [r7, #4]
 804870a:	681b      	ldr	r3, [r3, #0]
 804870c:	4a1b      	ldr	r2, [pc, #108]	; (804877c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 804870e:	4293      	cmp	r3, r2
 8048710:	d013      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048712:	687b      	ldr	r3, [r7, #4]
 8048714:	681b      	ldr	r3, [r3, #0]
 8048716:	4a1a      	ldr	r2, [pc, #104]	; (8048780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8048718:	4293      	cmp	r3, r2
 804871a:	d00e      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804871c:	687b      	ldr	r3, [r7, #4]
 804871e:	681b      	ldr	r3, [r3, #0]
 8048720:	4a18      	ldr	r2, [pc, #96]	; (8048784 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048722:	4293      	cmp	r3, r2
 8048724:	d009      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048726:	687b      	ldr	r3, [r7, #4]
 8048728:	681b      	ldr	r3, [r3, #0]
 804872a:	4a17      	ldr	r2, [pc, #92]	; (8048788 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 804872c:	4293      	cmp	r3, r2
 804872e:	d004      	beq.n	804873a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048730:	687b      	ldr	r3, [r7, #4]
 8048732:	681b      	ldr	r3, [r3, #0]
 8048734:	4a15      	ldr	r2, [pc, #84]	; (804878c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8048736:	4293      	cmp	r3, r2
 8048738:	d10c      	bne.n	8048754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804873a:	68bb      	ldr	r3, [r7, #8]
 804873c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048742:	683b      	ldr	r3, [r7, #0]
 8048744:	685b      	ldr	r3, [r3, #4]
 8048746:	68ba      	ldr	r2, [r7, #8]
 8048748:	4313      	orrs	r3, r2
 804874a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 804874c:	687b      	ldr	r3, [r7, #4]
 804874e:	681b      	ldr	r3, [r3, #0]
 8048750:	68ba      	ldr	r2, [r7, #8]
 8048752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048754:	687b      	ldr	r3, [r7, #4]
 8048756:	2201      	movs	r2, #1
 8048758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804875c:	687b      	ldr	r3, [r7, #4]
 804875e:	2200      	movs	r2, #0
 8048760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048764:	2300      	movs	r3, #0
}
 8048766:	4618      	mov	r0, r3
 8048768:	3714      	adds	r7, #20
 804876a:	46bd      	mov	sp, r7
 804876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048770:	4770      	bx	lr
 8048772:	bf00      	nop
 8048774:	40010000 	.word	0x40010000
 8048778:	40000400 	.word	0x40000400
 804877c:	40000800 	.word	0x40000800
 8048780:	40000c00 	.word	0x40000c00
 8048784:	40010400 	.word	0x40010400
 8048788:	40014000 	.word	0x40014000
 804878c:	40001800 	.word	0x40001800

08048790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048790:	b480      	push	{r7}
 8048792:	b083      	sub	sp, #12
 8048794:	af00      	add	r7, sp, #0
 8048796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048798:	bf00      	nop
 804879a:	370c      	adds	r7, #12
 804879c:	46bd      	mov	sp, r7
 804879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80487a2:	4770      	bx	lr

080487a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80487a4:	b480      	push	{r7}
 80487a6:	b083      	sub	sp, #12
 80487a8:	af00      	add	r7, sp, #0
 80487aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80487ac:	bf00      	nop
 80487ae:	370c      	adds	r7, #12
 80487b0:	46bd      	mov	sp, r7
 80487b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80487b6:	4770      	bx	lr

080487b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80487b8:	b580      	push	{r7, lr}
 80487ba:	b082      	sub	sp, #8
 80487bc:	af00      	add	r7, sp, #0
 80487be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80487c0:	687b      	ldr	r3, [r7, #4]
 80487c2:	2b00      	cmp	r3, #0
 80487c4:	d101      	bne.n	80487ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80487c6:	2301      	movs	r3, #1
 80487c8:	e03f      	b.n	804884a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80487ca:	687b      	ldr	r3, [r7, #4]
 80487cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80487d0:	b2db      	uxtb	r3, r3
 80487d2:	2b00      	cmp	r3, #0
 80487d4:	d106      	bne.n	80487e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80487d6:	687b      	ldr	r3, [r7, #4]
 80487d8:	2200      	movs	r2, #0
 80487da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80487de:	6878      	ldr	r0, [r7, #4]
 80487e0:	f7f8 fe3e 	bl	8041460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80487e4:	687b      	ldr	r3, [r7, #4]
 80487e6:	2224      	movs	r2, #36	; 0x24
 80487e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80487ec:	687b      	ldr	r3, [r7, #4]
 80487ee:	681b      	ldr	r3, [r3, #0]
 80487f0:	68da      	ldr	r2, [r3, #12]
 80487f2:	687b      	ldr	r3, [r7, #4]
 80487f4:	681b      	ldr	r3, [r3, #0]
 80487f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80487fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80487fc:	6878      	ldr	r0, [r7, #4]
 80487fe:	f000 f929 	bl	8048a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8048802:	687b      	ldr	r3, [r7, #4]
 8048804:	681b      	ldr	r3, [r3, #0]
 8048806:	691a      	ldr	r2, [r3, #16]
 8048808:	687b      	ldr	r3, [r7, #4]
 804880a:	681b      	ldr	r3, [r3, #0]
 804880c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8048810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8048812:	687b      	ldr	r3, [r7, #4]
 8048814:	681b      	ldr	r3, [r3, #0]
 8048816:	695a      	ldr	r2, [r3, #20]
 8048818:	687b      	ldr	r3, [r7, #4]
 804881a:	681b      	ldr	r3, [r3, #0]
 804881c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8048820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8048822:	687b      	ldr	r3, [r7, #4]
 8048824:	681b      	ldr	r3, [r3, #0]
 8048826:	68da      	ldr	r2, [r3, #12]
 8048828:	687b      	ldr	r3, [r7, #4]
 804882a:	681b      	ldr	r3, [r3, #0]
 804882c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8048830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048832:	687b      	ldr	r3, [r7, #4]
 8048834:	2200      	movs	r2, #0
 8048836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8048838:	687b      	ldr	r3, [r7, #4]
 804883a:	2220      	movs	r2, #32
 804883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8048840:	687b      	ldr	r3, [r7, #4]
 8048842:	2220      	movs	r2, #32
 8048844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8048848:	2300      	movs	r3, #0
}
 804884a:	4618      	mov	r0, r3
 804884c:	3708      	adds	r7, #8
 804884e:	46bd      	mov	sp, r7
 8048850:	bd80      	pop	{r7, pc}

08048852 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048852:	b580      	push	{r7, lr}
 8048854:	b08a      	sub	sp, #40	; 0x28
 8048856:	af02      	add	r7, sp, #8
 8048858:	60f8      	str	r0, [r7, #12]
 804885a:	60b9      	str	r1, [r7, #8]
 804885c:	603b      	str	r3, [r7, #0]
 804885e:	4613      	mov	r3, r2
 8048860:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8048862:	2300      	movs	r3, #0
 8048864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8048866:	68fb      	ldr	r3, [r7, #12]
 8048868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804886c:	b2db      	uxtb	r3, r3
 804886e:	2b20      	cmp	r3, #32
 8048870:	d17c      	bne.n	804896c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8048872:	68bb      	ldr	r3, [r7, #8]
 8048874:	2b00      	cmp	r3, #0
 8048876:	d002      	beq.n	804887e <HAL_UART_Transmit+0x2c>
 8048878:	88fb      	ldrh	r3, [r7, #6]
 804887a:	2b00      	cmp	r3, #0
 804887c:	d101      	bne.n	8048882 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 804887e:	2301      	movs	r3, #1
 8048880:	e075      	b.n	804896e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8048882:	68fb      	ldr	r3, [r7, #12]
 8048884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048888:	2b01      	cmp	r3, #1
 804888a:	d101      	bne.n	8048890 <HAL_UART_Transmit+0x3e>
 804888c:	2302      	movs	r3, #2
 804888e:	e06e      	b.n	804896e <HAL_UART_Transmit+0x11c>
 8048890:	68fb      	ldr	r3, [r7, #12]
 8048892:	2201      	movs	r2, #1
 8048894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048898:	68fb      	ldr	r3, [r7, #12]
 804889a:	2200      	movs	r2, #0
 804889c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804889e:	68fb      	ldr	r3, [r7, #12]
 80488a0:	2221      	movs	r2, #33	; 0x21
 80488a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80488a6:	f7fa faa3 	bl	8042df0 <HAL_GetTick>
 80488aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80488ac:	68fb      	ldr	r3, [r7, #12]
 80488ae:	88fa      	ldrh	r2, [r7, #6]
 80488b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80488b2:	68fb      	ldr	r3, [r7, #12]
 80488b4:	88fa      	ldrh	r2, [r7, #6]
 80488b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80488b8:	68fb      	ldr	r3, [r7, #12]
 80488ba:	689b      	ldr	r3, [r3, #8]
 80488bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80488c0:	d108      	bne.n	80488d4 <HAL_UART_Transmit+0x82>
 80488c2:	68fb      	ldr	r3, [r7, #12]
 80488c4:	691b      	ldr	r3, [r3, #16]
 80488c6:	2b00      	cmp	r3, #0
 80488c8:	d104      	bne.n	80488d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80488ca:	2300      	movs	r3, #0
 80488cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80488ce:	68bb      	ldr	r3, [r7, #8]
 80488d0:	61bb      	str	r3, [r7, #24]
 80488d2:	e003      	b.n	80488dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80488d4:	68bb      	ldr	r3, [r7, #8]
 80488d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80488d8:	2300      	movs	r3, #0
 80488da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80488dc:	68fb      	ldr	r3, [r7, #12]
 80488de:	2200      	movs	r2, #0
 80488e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80488e4:	e02a      	b.n	804893c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80488e6:	683b      	ldr	r3, [r7, #0]
 80488e8:	9300      	str	r3, [sp, #0]
 80488ea:	697b      	ldr	r3, [r7, #20]
 80488ec:	2200      	movs	r2, #0
 80488ee:	2180      	movs	r1, #128	; 0x80
 80488f0:	68f8      	ldr	r0, [r7, #12]
 80488f2:	f000 f840 	bl	8048976 <UART_WaitOnFlagUntilTimeout>
 80488f6:	4603      	mov	r3, r0
 80488f8:	2b00      	cmp	r3, #0
 80488fa:	d001      	beq.n	8048900 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80488fc:	2303      	movs	r3, #3
 80488fe:	e036      	b.n	804896e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8048900:	69fb      	ldr	r3, [r7, #28]
 8048902:	2b00      	cmp	r3, #0
 8048904:	d10b      	bne.n	804891e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8048906:	69bb      	ldr	r3, [r7, #24]
 8048908:	881b      	ldrh	r3, [r3, #0]
 804890a:	461a      	mov	r2, r3
 804890c:	68fb      	ldr	r3, [r7, #12]
 804890e:	681b      	ldr	r3, [r3, #0]
 8048910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8048914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8048916:	69bb      	ldr	r3, [r7, #24]
 8048918:	3302      	adds	r3, #2
 804891a:	61bb      	str	r3, [r7, #24]
 804891c:	e007      	b.n	804892e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804891e:	69fb      	ldr	r3, [r7, #28]
 8048920:	781a      	ldrb	r2, [r3, #0]
 8048922:	68fb      	ldr	r3, [r7, #12]
 8048924:	681b      	ldr	r3, [r3, #0]
 8048926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8048928:	69fb      	ldr	r3, [r7, #28]
 804892a:	3301      	adds	r3, #1
 804892c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804892e:	68fb      	ldr	r3, [r7, #12]
 8048930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048932:	b29b      	uxth	r3, r3
 8048934:	3b01      	subs	r3, #1
 8048936:	b29a      	uxth	r2, r3
 8048938:	68fb      	ldr	r3, [r7, #12]
 804893a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 804893c:	68fb      	ldr	r3, [r7, #12]
 804893e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048940:	b29b      	uxth	r3, r3
 8048942:	2b00      	cmp	r3, #0
 8048944:	d1cf      	bne.n	80488e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8048946:	683b      	ldr	r3, [r7, #0]
 8048948:	9300      	str	r3, [sp, #0]
 804894a:	697b      	ldr	r3, [r7, #20]
 804894c:	2200      	movs	r2, #0
 804894e:	2140      	movs	r1, #64	; 0x40
 8048950:	68f8      	ldr	r0, [r7, #12]
 8048952:	f000 f810 	bl	8048976 <UART_WaitOnFlagUntilTimeout>
 8048956:	4603      	mov	r3, r0
 8048958:	2b00      	cmp	r3, #0
 804895a:	d001      	beq.n	8048960 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 804895c:	2303      	movs	r3, #3
 804895e:	e006      	b.n	804896e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8048960:	68fb      	ldr	r3, [r7, #12]
 8048962:	2220      	movs	r2, #32
 8048964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8048968:	2300      	movs	r3, #0
 804896a:	e000      	b.n	804896e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 804896c:	2302      	movs	r3, #2
  }
}
 804896e:	4618      	mov	r0, r3
 8048970:	3720      	adds	r7, #32
 8048972:	46bd      	mov	sp, r7
 8048974:	bd80      	pop	{r7, pc}

08048976 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8048976:	b580      	push	{r7, lr}
 8048978:	b090      	sub	sp, #64	; 0x40
 804897a:	af00      	add	r7, sp, #0
 804897c:	60f8      	str	r0, [r7, #12]
 804897e:	60b9      	str	r1, [r7, #8]
 8048980:	603b      	str	r3, [r7, #0]
 8048982:	4613      	mov	r3, r2
 8048984:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8048986:	e050      	b.n	8048a2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8048988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804898e:	d04c      	beq.n	8048a2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8048990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8048992:	2b00      	cmp	r3, #0
 8048994:	d007      	beq.n	80489a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8048996:	f7fa fa2b 	bl	8042df0 <HAL_GetTick>
 804899a:	4602      	mov	r2, r0
 804899c:	683b      	ldr	r3, [r7, #0]
 804899e:	1ad3      	subs	r3, r2, r3
 80489a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80489a2:	429a      	cmp	r2, r3
 80489a4:	d241      	bcs.n	8048a2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80489a6:	68fb      	ldr	r3, [r7, #12]
 80489a8:	681b      	ldr	r3, [r3, #0]
 80489aa:	330c      	adds	r3, #12
 80489ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80489ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80489b0:	e853 3f00 	ldrex	r3, [r3]
 80489b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80489b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80489b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80489bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80489be:	68fb      	ldr	r3, [r7, #12]
 80489c0:	681b      	ldr	r3, [r3, #0]
 80489c2:	330c      	adds	r3, #12
 80489c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80489c6:	637a      	str	r2, [r7, #52]	; 0x34
 80489c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80489ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80489cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80489ce:	e841 2300 	strex	r3, r2, [r1]
 80489d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80489d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80489d6:	2b00      	cmp	r3, #0
 80489d8:	d1e5      	bne.n	80489a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80489da:	68fb      	ldr	r3, [r7, #12]
 80489dc:	681b      	ldr	r3, [r3, #0]
 80489de:	3314      	adds	r3, #20
 80489e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80489e2:	697b      	ldr	r3, [r7, #20]
 80489e4:	e853 3f00 	ldrex	r3, [r3]
 80489e8:	613b      	str	r3, [r7, #16]
   return(result);
 80489ea:	693b      	ldr	r3, [r7, #16]
 80489ec:	f023 0301 	bic.w	r3, r3, #1
 80489f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80489f2:	68fb      	ldr	r3, [r7, #12]
 80489f4:	681b      	ldr	r3, [r3, #0]
 80489f6:	3314      	adds	r3, #20
 80489f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80489fa:	623a      	str	r2, [r7, #32]
 80489fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80489fe:	69f9      	ldr	r1, [r7, #28]
 8048a00:	6a3a      	ldr	r2, [r7, #32]
 8048a02:	e841 2300 	strex	r3, r2, [r1]
 8048a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8048a08:	69bb      	ldr	r3, [r7, #24]
 8048a0a:	2b00      	cmp	r3, #0
 8048a0c:	d1e5      	bne.n	80489da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8048a0e:	68fb      	ldr	r3, [r7, #12]
 8048a10:	2220      	movs	r2, #32
 8048a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8048a16:	68fb      	ldr	r3, [r7, #12]
 8048a18:	2220      	movs	r2, #32
 8048a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8048a1e:	68fb      	ldr	r3, [r7, #12]
 8048a20:	2200      	movs	r2, #0
 8048a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8048a26:	2303      	movs	r3, #3
 8048a28:	e00f      	b.n	8048a4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8048a2a:	68fb      	ldr	r3, [r7, #12]
 8048a2c:	681b      	ldr	r3, [r3, #0]
 8048a2e:	681a      	ldr	r2, [r3, #0]
 8048a30:	68bb      	ldr	r3, [r7, #8]
 8048a32:	4013      	ands	r3, r2
 8048a34:	68ba      	ldr	r2, [r7, #8]
 8048a36:	429a      	cmp	r2, r3
 8048a38:	bf0c      	ite	eq
 8048a3a:	2301      	moveq	r3, #1
 8048a3c:	2300      	movne	r3, #0
 8048a3e:	b2db      	uxtb	r3, r3
 8048a40:	461a      	mov	r2, r3
 8048a42:	79fb      	ldrb	r3, [r7, #7]
 8048a44:	429a      	cmp	r2, r3
 8048a46:	d09f      	beq.n	8048988 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8048a48:	2300      	movs	r3, #0
}
 8048a4a:	4618      	mov	r0, r3
 8048a4c:	3740      	adds	r7, #64	; 0x40
 8048a4e:	46bd      	mov	sp, r7
 8048a50:	bd80      	pop	{r7, pc}
	...

08048a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8048a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8048a58:	b0c0      	sub	sp, #256	; 0x100
 8048a5a:	af00      	add	r7, sp, #0
 8048a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8048a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a64:	681b      	ldr	r3, [r3, #0]
 8048a66:	691b      	ldr	r3, [r3, #16]
 8048a68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8048a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a70:	68d9      	ldr	r1, [r3, #12]
 8048a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a76:	681a      	ldr	r2, [r3, #0]
 8048a78:	ea40 0301 	orr.w	r3, r0, r1
 8048a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8048a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a82:	689a      	ldr	r2, [r3, #8]
 8048a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a88:	691b      	ldr	r3, [r3, #16]
 8048a8a:	431a      	orrs	r2, r3
 8048a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a90:	695b      	ldr	r3, [r3, #20]
 8048a92:	431a      	orrs	r2, r3
 8048a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048a98:	69db      	ldr	r3, [r3, #28]
 8048a9a:	4313      	orrs	r3, r2
 8048a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8048aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048aa4:	681b      	ldr	r3, [r3, #0]
 8048aa6:	68db      	ldr	r3, [r3, #12]
 8048aa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8048aac:	f021 010c 	bic.w	r1, r1, #12
 8048ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ab4:	681a      	ldr	r2, [r3, #0]
 8048ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8048aba:	430b      	orrs	r3, r1
 8048abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8048abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ac2:	681b      	ldr	r3, [r3, #0]
 8048ac4:	695b      	ldr	r3, [r3, #20]
 8048ac6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8048aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ace:	6999      	ldr	r1, [r3, #24]
 8048ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ad4:	681a      	ldr	r2, [r3, #0]
 8048ad6:	ea40 0301 	orr.w	r3, r0, r1
 8048ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8048adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ae0:	681a      	ldr	r2, [r3, #0]
 8048ae2:	4b8f      	ldr	r3, [pc, #572]	; (8048d20 <UART_SetConfig+0x2cc>)
 8048ae4:	429a      	cmp	r2, r3
 8048ae6:	d005      	beq.n	8048af4 <UART_SetConfig+0xa0>
 8048ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048aec:	681a      	ldr	r2, [r3, #0]
 8048aee:	4b8d      	ldr	r3, [pc, #564]	; (8048d24 <UART_SetConfig+0x2d0>)
 8048af0:	429a      	cmp	r2, r3
 8048af2:	d104      	bne.n	8048afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8048af4:	f7fe f968 	bl	8046dc8 <HAL_RCC_GetPCLK2Freq>
 8048af8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8048afc:	e003      	b.n	8048b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8048afe:	f7fe f94f 	bl	8046da0 <HAL_RCC_GetPCLK1Freq>
 8048b02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8048b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048b0a:	69db      	ldr	r3, [r3, #28]
 8048b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048b10:	f040 810c 	bne.w	8048d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8048b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048b18:	2200      	movs	r2, #0
 8048b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8048b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8048b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8048b26:	4622      	mov	r2, r4
 8048b28:	462b      	mov	r3, r5
 8048b2a:	1891      	adds	r1, r2, r2
 8048b2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8048b2e:	415b      	adcs	r3, r3
 8048b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8048b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8048b36:	4621      	mov	r1, r4
 8048b38:	eb12 0801 	adds.w	r8, r2, r1
 8048b3c:	4629      	mov	r1, r5
 8048b3e:	eb43 0901 	adc.w	r9, r3, r1
 8048b42:	f04f 0200 	mov.w	r2, #0
 8048b46:	f04f 0300 	mov.w	r3, #0
 8048b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8048b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8048b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8048b56:	4690      	mov	r8, r2
 8048b58:	4699      	mov	r9, r3
 8048b5a:	4623      	mov	r3, r4
 8048b5c:	eb18 0303 	adds.w	r3, r8, r3
 8048b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8048b64:	462b      	mov	r3, r5
 8048b66:	eb49 0303 	adc.w	r3, r9, r3
 8048b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8048b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048b72:	685b      	ldr	r3, [r3, #4]
 8048b74:	2200      	movs	r2, #0
 8048b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8048b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8048b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8048b82:	460b      	mov	r3, r1
 8048b84:	18db      	adds	r3, r3, r3
 8048b86:	653b      	str	r3, [r7, #80]	; 0x50
 8048b88:	4613      	mov	r3, r2
 8048b8a:	eb42 0303 	adc.w	r3, r2, r3
 8048b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8048b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8048b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8048b98:	f7f7 fb7a 	bl	8040290 <__aeabi_uldivmod>
 8048b9c:	4602      	mov	r2, r0
 8048b9e:	460b      	mov	r3, r1
 8048ba0:	4b61      	ldr	r3, [pc, #388]	; (8048d28 <UART_SetConfig+0x2d4>)
 8048ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8048ba6:	095b      	lsrs	r3, r3, #5
 8048ba8:	011c      	lsls	r4, r3, #4
 8048baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048bae:	2200      	movs	r2, #0
 8048bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8048bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8048bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8048bbc:	4642      	mov	r2, r8
 8048bbe:	464b      	mov	r3, r9
 8048bc0:	1891      	adds	r1, r2, r2
 8048bc2:	64b9      	str	r1, [r7, #72]	; 0x48
 8048bc4:	415b      	adcs	r3, r3
 8048bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8048bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8048bcc:	4641      	mov	r1, r8
 8048bce:	eb12 0a01 	adds.w	sl, r2, r1
 8048bd2:	4649      	mov	r1, r9
 8048bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8048bd8:	f04f 0200 	mov.w	r2, #0
 8048bdc:	f04f 0300 	mov.w	r3, #0
 8048be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8048be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8048be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8048bec:	4692      	mov	sl, r2
 8048bee:	469b      	mov	fp, r3
 8048bf0:	4643      	mov	r3, r8
 8048bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8048bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8048bfa:	464b      	mov	r3, r9
 8048bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8048c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8048c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048c08:	685b      	ldr	r3, [r3, #4]
 8048c0a:	2200      	movs	r2, #0
 8048c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8048c10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8048c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8048c18:	460b      	mov	r3, r1
 8048c1a:	18db      	adds	r3, r3, r3
 8048c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8048c1e:	4613      	mov	r3, r2
 8048c20:	eb42 0303 	adc.w	r3, r2, r3
 8048c24:	647b      	str	r3, [r7, #68]	; 0x44
 8048c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8048c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8048c2e:	f7f7 fb2f 	bl	8040290 <__aeabi_uldivmod>
 8048c32:	4602      	mov	r2, r0
 8048c34:	460b      	mov	r3, r1
 8048c36:	4611      	mov	r1, r2
 8048c38:	4b3b      	ldr	r3, [pc, #236]	; (8048d28 <UART_SetConfig+0x2d4>)
 8048c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8048c3e:	095b      	lsrs	r3, r3, #5
 8048c40:	2264      	movs	r2, #100	; 0x64
 8048c42:	fb02 f303 	mul.w	r3, r2, r3
 8048c46:	1acb      	subs	r3, r1, r3
 8048c48:	00db      	lsls	r3, r3, #3
 8048c4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8048c4e:	4b36      	ldr	r3, [pc, #216]	; (8048d28 <UART_SetConfig+0x2d4>)
 8048c50:	fba3 2302 	umull	r2, r3, r3, r2
 8048c54:	095b      	lsrs	r3, r3, #5
 8048c56:	005b      	lsls	r3, r3, #1
 8048c58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8048c5c:	441c      	add	r4, r3
 8048c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048c62:	2200      	movs	r2, #0
 8048c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8048c68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8048c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8048c70:	4642      	mov	r2, r8
 8048c72:	464b      	mov	r3, r9
 8048c74:	1891      	adds	r1, r2, r2
 8048c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8048c78:	415b      	adcs	r3, r3
 8048c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8048c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8048c80:	4641      	mov	r1, r8
 8048c82:	1851      	adds	r1, r2, r1
 8048c84:	6339      	str	r1, [r7, #48]	; 0x30
 8048c86:	4649      	mov	r1, r9
 8048c88:	414b      	adcs	r3, r1
 8048c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8048c8c:	f04f 0200 	mov.w	r2, #0
 8048c90:	f04f 0300 	mov.w	r3, #0
 8048c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8048c98:	4659      	mov	r1, fp
 8048c9a:	00cb      	lsls	r3, r1, #3
 8048c9c:	4651      	mov	r1, sl
 8048c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048ca2:	4651      	mov	r1, sl
 8048ca4:	00ca      	lsls	r2, r1, #3
 8048ca6:	4610      	mov	r0, r2
 8048ca8:	4619      	mov	r1, r3
 8048caa:	4603      	mov	r3, r0
 8048cac:	4642      	mov	r2, r8
 8048cae:	189b      	adds	r3, r3, r2
 8048cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8048cb4:	464b      	mov	r3, r9
 8048cb6:	460a      	mov	r2, r1
 8048cb8:	eb42 0303 	adc.w	r3, r2, r3
 8048cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8048cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048cc4:	685b      	ldr	r3, [r3, #4]
 8048cc6:	2200      	movs	r2, #0
 8048cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8048ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8048cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8048cd4:	460b      	mov	r3, r1
 8048cd6:	18db      	adds	r3, r3, r3
 8048cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8048cda:	4613      	mov	r3, r2
 8048cdc:	eb42 0303 	adc.w	r3, r2, r3
 8048ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8048ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8048ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8048cea:	f7f7 fad1 	bl	8040290 <__aeabi_uldivmod>
 8048cee:	4602      	mov	r2, r0
 8048cf0:	460b      	mov	r3, r1
 8048cf2:	4b0d      	ldr	r3, [pc, #52]	; (8048d28 <UART_SetConfig+0x2d4>)
 8048cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8048cf8:	095b      	lsrs	r3, r3, #5
 8048cfa:	2164      	movs	r1, #100	; 0x64
 8048cfc:	fb01 f303 	mul.w	r3, r1, r3
 8048d00:	1ad3      	subs	r3, r2, r3
 8048d02:	00db      	lsls	r3, r3, #3
 8048d04:	3332      	adds	r3, #50	; 0x32
 8048d06:	4a08      	ldr	r2, [pc, #32]	; (8048d28 <UART_SetConfig+0x2d4>)
 8048d08:	fba2 2303 	umull	r2, r3, r2, r3
 8048d0c:	095b      	lsrs	r3, r3, #5
 8048d0e:	f003 0207 	and.w	r2, r3, #7
 8048d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048d16:	681b      	ldr	r3, [r3, #0]
 8048d18:	4422      	add	r2, r4
 8048d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8048d1c:	e105      	b.n	8048f2a <UART_SetConfig+0x4d6>
 8048d1e:	bf00      	nop
 8048d20:	40011000 	.word	0x40011000
 8048d24:	40011400 	.word	0x40011400
 8048d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8048d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048d30:	2200      	movs	r2, #0
 8048d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8048d36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8048d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8048d3e:	4642      	mov	r2, r8
 8048d40:	464b      	mov	r3, r9
 8048d42:	1891      	adds	r1, r2, r2
 8048d44:	6239      	str	r1, [r7, #32]
 8048d46:	415b      	adcs	r3, r3
 8048d48:	627b      	str	r3, [r7, #36]	; 0x24
 8048d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8048d4e:	4641      	mov	r1, r8
 8048d50:	1854      	adds	r4, r2, r1
 8048d52:	4649      	mov	r1, r9
 8048d54:	eb43 0501 	adc.w	r5, r3, r1
 8048d58:	f04f 0200 	mov.w	r2, #0
 8048d5c:	f04f 0300 	mov.w	r3, #0
 8048d60:	00eb      	lsls	r3, r5, #3
 8048d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8048d66:	00e2      	lsls	r2, r4, #3
 8048d68:	4614      	mov	r4, r2
 8048d6a:	461d      	mov	r5, r3
 8048d6c:	4643      	mov	r3, r8
 8048d6e:	18e3      	adds	r3, r4, r3
 8048d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8048d74:	464b      	mov	r3, r9
 8048d76:	eb45 0303 	adc.w	r3, r5, r3
 8048d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8048d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048d82:	685b      	ldr	r3, [r3, #4]
 8048d84:	2200      	movs	r2, #0
 8048d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8048d8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8048d8e:	f04f 0200 	mov.w	r2, #0
 8048d92:	f04f 0300 	mov.w	r3, #0
 8048d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8048d9a:	4629      	mov	r1, r5
 8048d9c:	008b      	lsls	r3, r1, #2
 8048d9e:	4621      	mov	r1, r4
 8048da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048da4:	4621      	mov	r1, r4
 8048da6:	008a      	lsls	r2, r1, #2
 8048da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8048dac:	f7f7 fa70 	bl	8040290 <__aeabi_uldivmod>
 8048db0:	4602      	mov	r2, r0
 8048db2:	460b      	mov	r3, r1
 8048db4:	4b60      	ldr	r3, [pc, #384]	; (8048f38 <UART_SetConfig+0x4e4>)
 8048db6:	fba3 2302 	umull	r2, r3, r3, r2
 8048dba:	095b      	lsrs	r3, r3, #5
 8048dbc:	011c      	lsls	r4, r3, #4
 8048dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048dc2:	2200      	movs	r2, #0
 8048dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8048dc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8048dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8048dd0:	4642      	mov	r2, r8
 8048dd2:	464b      	mov	r3, r9
 8048dd4:	1891      	adds	r1, r2, r2
 8048dd6:	61b9      	str	r1, [r7, #24]
 8048dd8:	415b      	adcs	r3, r3
 8048dda:	61fb      	str	r3, [r7, #28]
 8048ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8048de0:	4641      	mov	r1, r8
 8048de2:	1851      	adds	r1, r2, r1
 8048de4:	6139      	str	r1, [r7, #16]
 8048de6:	4649      	mov	r1, r9
 8048de8:	414b      	adcs	r3, r1
 8048dea:	617b      	str	r3, [r7, #20]
 8048dec:	f04f 0200 	mov.w	r2, #0
 8048df0:	f04f 0300 	mov.w	r3, #0
 8048df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8048df8:	4659      	mov	r1, fp
 8048dfa:	00cb      	lsls	r3, r1, #3
 8048dfc:	4651      	mov	r1, sl
 8048dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048e02:	4651      	mov	r1, sl
 8048e04:	00ca      	lsls	r2, r1, #3
 8048e06:	4610      	mov	r0, r2
 8048e08:	4619      	mov	r1, r3
 8048e0a:	4603      	mov	r3, r0
 8048e0c:	4642      	mov	r2, r8
 8048e0e:	189b      	adds	r3, r3, r2
 8048e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8048e14:	464b      	mov	r3, r9
 8048e16:	460a      	mov	r2, r1
 8048e18:	eb42 0303 	adc.w	r3, r2, r3
 8048e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8048e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048e24:	685b      	ldr	r3, [r3, #4]
 8048e26:	2200      	movs	r2, #0
 8048e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8048e2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8048e2c:	f04f 0200 	mov.w	r2, #0
 8048e30:	f04f 0300 	mov.w	r3, #0
 8048e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8048e38:	4649      	mov	r1, r9
 8048e3a:	008b      	lsls	r3, r1, #2
 8048e3c:	4641      	mov	r1, r8
 8048e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048e42:	4641      	mov	r1, r8
 8048e44:	008a      	lsls	r2, r1, #2
 8048e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8048e4a:	f7f7 fa21 	bl	8040290 <__aeabi_uldivmod>
 8048e4e:	4602      	mov	r2, r0
 8048e50:	460b      	mov	r3, r1
 8048e52:	4b39      	ldr	r3, [pc, #228]	; (8048f38 <UART_SetConfig+0x4e4>)
 8048e54:	fba3 1302 	umull	r1, r3, r3, r2
 8048e58:	095b      	lsrs	r3, r3, #5
 8048e5a:	2164      	movs	r1, #100	; 0x64
 8048e5c:	fb01 f303 	mul.w	r3, r1, r3
 8048e60:	1ad3      	subs	r3, r2, r3
 8048e62:	011b      	lsls	r3, r3, #4
 8048e64:	3332      	adds	r3, #50	; 0x32
 8048e66:	4a34      	ldr	r2, [pc, #208]	; (8048f38 <UART_SetConfig+0x4e4>)
 8048e68:	fba2 2303 	umull	r2, r3, r2, r3
 8048e6c:	095b      	lsrs	r3, r3, #5
 8048e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8048e72:	441c      	add	r4, r3
 8048e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8048e78:	2200      	movs	r2, #0
 8048e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8048e7c:	677a      	str	r2, [r7, #116]	; 0x74
 8048e7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8048e82:	4642      	mov	r2, r8
 8048e84:	464b      	mov	r3, r9
 8048e86:	1891      	adds	r1, r2, r2
 8048e88:	60b9      	str	r1, [r7, #8]
 8048e8a:	415b      	adcs	r3, r3
 8048e8c:	60fb      	str	r3, [r7, #12]
 8048e8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8048e92:	4641      	mov	r1, r8
 8048e94:	1851      	adds	r1, r2, r1
 8048e96:	6039      	str	r1, [r7, #0]
 8048e98:	4649      	mov	r1, r9
 8048e9a:	414b      	adcs	r3, r1
 8048e9c:	607b      	str	r3, [r7, #4]
 8048e9e:	f04f 0200 	mov.w	r2, #0
 8048ea2:	f04f 0300 	mov.w	r3, #0
 8048ea6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8048eaa:	4659      	mov	r1, fp
 8048eac:	00cb      	lsls	r3, r1, #3
 8048eae:	4651      	mov	r1, sl
 8048eb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8048eb4:	4651      	mov	r1, sl
 8048eb6:	00ca      	lsls	r2, r1, #3
 8048eb8:	4610      	mov	r0, r2
 8048eba:	4619      	mov	r1, r3
 8048ebc:	4603      	mov	r3, r0
 8048ebe:	4642      	mov	r2, r8
 8048ec0:	189b      	adds	r3, r3, r2
 8048ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8048ec4:	464b      	mov	r3, r9
 8048ec6:	460a      	mov	r2, r1
 8048ec8:	eb42 0303 	adc.w	r3, r2, r3
 8048ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8048ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048ed2:	685b      	ldr	r3, [r3, #4]
 8048ed4:	2200      	movs	r2, #0
 8048ed6:	663b      	str	r3, [r7, #96]	; 0x60
 8048ed8:	667a      	str	r2, [r7, #100]	; 0x64
 8048eda:	f04f 0200 	mov.w	r2, #0
 8048ede:	f04f 0300 	mov.w	r3, #0
 8048ee2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8048ee6:	4649      	mov	r1, r9
 8048ee8:	008b      	lsls	r3, r1, #2
 8048eea:	4641      	mov	r1, r8
 8048eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8048ef0:	4641      	mov	r1, r8
 8048ef2:	008a      	lsls	r2, r1, #2
 8048ef4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8048ef8:	f7f7 f9ca 	bl	8040290 <__aeabi_uldivmod>
 8048efc:	4602      	mov	r2, r0
 8048efe:	460b      	mov	r3, r1
 8048f00:	4b0d      	ldr	r3, [pc, #52]	; (8048f38 <UART_SetConfig+0x4e4>)
 8048f02:	fba3 1302 	umull	r1, r3, r3, r2
 8048f06:	095b      	lsrs	r3, r3, #5
 8048f08:	2164      	movs	r1, #100	; 0x64
 8048f0a:	fb01 f303 	mul.w	r3, r1, r3
 8048f0e:	1ad3      	subs	r3, r2, r3
 8048f10:	011b      	lsls	r3, r3, #4
 8048f12:	3332      	adds	r3, #50	; 0x32
 8048f14:	4a08      	ldr	r2, [pc, #32]	; (8048f38 <UART_SetConfig+0x4e4>)
 8048f16:	fba2 2303 	umull	r2, r3, r2, r3
 8048f1a:	095b      	lsrs	r3, r3, #5
 8048f1c:	f003 020f 	and.w	r2, r3, #15
 8048f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8048f24:	681b      	ldr	r3, [r3, #0]
 8048f26:	4422      	add	r2, r4
 8048f28:	609a      	str	r2, [r3, #8]
}
 8048f2a:	bf00      	nop
 8048f2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8048f30:	46bd      	mov	sp, r7
 8048f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8048f36:	bf00      	nop
 8048f38:	51eb851f 	.word	0x51eb851f

08048f3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8048f3c:	b480      	push	{r7}
 8048f3e:	b083      	sub	sp, #12
 8048f40:	af00      	add	r7, sp, #0
 8048f42:	6078      	str	r0, [r7, #4]
 8048f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8048f46:	683b      	ldr	r3, [r7, #0]
 8048f48:	681b      	ldr	r3, [r3, #0]
 8048f4a:	2b00      	cmp	r3, #0
 8048f4c:	d123      	bne.n	8048f96 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048f4e:	687b      	ldr	r3, [r7, #4]
 8048f50:	681b      	ldr	r3, [r3, #0]
 8048f52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048f5a:	683a      	ldr	r2, [r7, #0]
 8048f5c:	6851      	ldr	r1, [r2, #4]
 8048f5e:	683a      	ldr	r2, [r7, #0]
 8048f60:	6892      	ldr	r2, [r2, #8]
 8048f62:	4311      	orrs	r1, r2
 8048f64:	683a      	ldr	r2, [r7, #0]
 8048f66:	68d2      	ldr	r2, [r2, #12]
 8048f68:	4311      	orrs	r1, r2
 8048f6a:	683a      	ldr	r2, [r7, #0]
 8048f6c:	6912      	ldr	r2, [r2, #16]
 8048f6e:	4311      	orrs	r1, r2
 8048f70:	683a      	ldr	r2, [r7, #0]
 8048f72:	6952      	ldr	r2, [r2, #20]
 8048f74:	4311      	orrs	r1, r2
 8048f76:	683a      	ldr	r2, [r7, #0]
 8048f78:	6992      	ldr	r2, [r2, #24]
 8048f7a:	4311      	orrs	r1, r2
 8048f7c:	683a      	ldr	r2, [r7, #0]
 8048f7e:	69d2      	ldr	r2, [r2, #28]
 8048f80:	4311      	orrs	r1, r2
 8048f82:	683a      	ldr	r2, [r7, #0]
 8048f84:	6a12      	ldr	r2, [r2, #32]
 8048f86:	4311      	orrs	r1, r2
 8048f88:	683a      	ldr	r2, [r7, #0]
 8048f8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8048f8c:	430a      	orrs	r2, r1
 8048f8e:	431a      	orrs	r2, r3
 8048f90:	687b      	ldr	r3, [r7, #4]
 8048f92:	601a      	str	r2, [r3, #0]
 8048f94:	e028      	b.n	8048fe8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8048f96:	687b      	ldr	r3, [r7, #4]
 8048f98:	681b      	ldr	r3, [r3, #0]
 8048f9a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8048f9e:	683b      	ldr	r3, [r7, #0]
 8048fa0:	69d9      	ldr	r1, [r3, #28]
 8048fa2:	683b      	ldr	r3, [r7, #0]
 8048fa4:	6a1b      	ldr	r3, [r3, #32]
 8048fa6:	4319      	orrs	r1, r3
 8048fa8:	683b      	ldr	r3, [r7, #0]
 8048faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8048fac:	430b      	orrs	r3, r1
 8048fae:	431a      	orrs	r2, r3
 8048fb0:	687b      	ldr	r3, [r7, #4]
 8048fb2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8048fb4:	687b      	ldr	r3, [r7, #4]
 8048fb6:	685b      	ldr	r3, [r3, #4]
 8048fb8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8048fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048fc0:	683a      	ldr	r2, [r7, #0]
 8048fc2:	6851      	ldr	r1, [r2, #4]
 8048fc4:	683a      	ldr	r2, [r7, #0]
 8048fc6:	6892      	ldr	r2, [r2, #8]
 8048fc8:	4311      	orrs	r1, r2
 8048fca:	683a      	ldr	r2, [r7, #0]
 8048fcc:	68d2      	ldr	r2, [r2, #12]
 8048fce:	4311      	orrs	r1, r2
 8048fd0:	683a      	ldr	r2, [r7, #0]
 8048fd2:	6912      	ldr	r2, [r2, #16]
 8048fd4:	4311      	orrs	r1, r2
 8048fd6:	683a      	ldr	r2, [r7, #0]
 8048fd8:	6952      	ldr	r2, [r2, #20]
 8048fda:	4311      	orrs	r1, r2
 8048fdc:	683a      	ldr	r2, [r7, #0]
 8048fde:	6992      	ldr	r2, [r2, #24]
 8048fe0:	430a      	orrs	r2, r1
 8048fe2:	431a      	orrs	r2, r3
 8048fe4:	687b      	ldr	r3, [r7, #4]
 8048fe6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8048fe8:	2300      	movs	r3, #0
}
 8048fea:	4618      	mov	r0, r3
 8048fec:	370c      	adds	r7, #12
 8048fee:	46bd      	mov	sp, r7
 8048ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ff4:	4770      	bx	lr

08048ff6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8048ff6:	b480      	push	{r7}
 8048ff8:	b085      	sub	sp, #20
 8048ffa:	af00      	add	r7, sp, #0
 8048ffc:	60f8      	str	r0, [r7, #12]
 8048ffe:	60b9      	str	r1, [r7, #8]
 8049000:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8049002:	687b      	ldr	r3, [r7, #4]
 8049004:	2b00      	cmp	r3, #0
 8049006:	d128      	bne.n	804905a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8049008:	68fb      	ldr	r3, [r7, #12]
 804900a:	689b      	ldr	r3, [r3, #8]
 804900c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049010:	68bb      	ldr	r3, [r7, #8]
 8049012:	681b      	ldr	r3, [r3, #0]
 8049014:	1e59      	subs	r1, r3, #1
 8049016:	68bb      	ldr	r3, [r7, #8]
 8049018:	685b      	ldr	r3, [r3, #4]
 804901a:	3b01      	subs	r3, #1
 804901c:	011b      	lsls	r3, r3, #4
 804901e:	4319      	orrs	r1, r3
 8049020:	68bb      	ldr	r3, [r7, #8]
 8049022:	689b      	ldr	r3, [r3, #8]
 8049024:	3b01      	subs	r3, #1
 8049026:	021b      	lsls	r3, r3, #8
 8049028:	4319      	orrs	r1, r3
 804902a:	68bb      	ldr	r3, [r7, #8]
 804902c:	68db      	ldr	r3, [r3, #12]
 804902e:	3b01      	subs	r3, #1
 8049030:	031b      	lsls	r3, r3, #12
 8049032:	4319      	orrs	r1, r3
 8049034:	68bb      	ldr	r3, [r7, #8]
 8049036:	691b      	ldr	r3, [r3, #16]
 8049038:	3b01      	subs	r3, #1
 804903a:	041b      	lsls	r3, r3, #16
 804903c:	4319      	orrs	r1, r3
 804903e:	68bb      	ldr	r3, [r7, #8]
 8049040:	695b      	ldr	r3, [r3, #20]
 8049042:	3b01      	subs	r3, #1
 8049044:	051b      	lsls	r3, r3, #20
 8049046:	4319      	orrs	r1, r3
 8049048:	68bb      	ldr	r3, [r7, #8]
 804904a:	699b      	ldr	r3, [r3, #24]
 804904c:	3b01      	subs	r3, #1
 804904e:	061b      	lsls	r3, r3, #24
 8049050:	430b      	orrs	r3, r1
 8049052:	431a      	orrs	r2, r3
 8049054:	68fb      	ldr	r3, [r7, #12]
 8049056:	609a      	str	r2, [r3, #8]
 8049058:	e02f      	b.n	80490ba <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 804905a:	68fb      	ldr	r3, [r7, #12]
 804905c:	689b      	ldr	r3, [r3, #8]
 804905e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8049062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8049066:	68ba      	ldr	r2, [r7, #8]
 8049068:	68d2      	ldr	r2, [r2, #12]
 804906a:	3a01      	subs	r2, #1
 804906c:	0311      	lsls	r1, r2, #12
 804906e:	68ba      	ldr	r2, [r7, #8]
 8049070:	6952      	ldr	r2, [r2, #20]
 8049072:	3a01      	subs	r2, #1
 8049074:	0512      	lsls	r2, r2, #20
 8049076:	430a      	orrs	r2, r1
 8049078:	431a      	orrs	r2, r3
 804907a:	68fb      	ldr	r3, [r7, #12]
 804907c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 804907e:	68fb      	ldr	r3, [r7, #12]
 8049080:	68db      	ldr	r3, [r3, #12]
 8049082:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049086:	68bb      	ldr	r3, [r7, #8]
 8049088:	681b      	ldr	r3, [r3, #0]
 804908a:	1e59      	subs	r1, r3, #1
 804908c:	68bb      	ldr	r3, [r7, #8]
 804908e:	685b      	ldr	r3, [r3, #4]
 8049090:	3b01      	subs	r3, #1
 8049092:	011b      	lsls	r3, r3, #4
 8049094:	4319      	orrs	r1, r3
 8049096:	68bb      	ldr	r3, [r7, #8]
 8049098:	689b      	ldr	r3, [r3, #8]
 804909a:	3b01      	subs	r3, #1
 804909c:	021b      	lsls	r3, r3, #8
 804909e:	4319      	orrs	r1, r3
 80490a0:	68bb      	ldr	r3, [r7, #8]
 80490a2:	691b      	ldr	r3, [r3, #16]
 80490a4:	3b01      	subs	r3, #1
 80490a6:	041b      	lsls	r3, r3, #16
 80490a8:	4319      	orrs	r1, r3
 80490aa:	68bb      	ldr	r3, [r7, #8]
 80490ac:	699b      	ldr	r3, [r3, #24]
 80490ae:	3b01      	subs	r3, #1
 80490b0:	061b      	lsls	r3, r3, #24
 80490b2:	430b      	orrs	r3, r1
 80490b4:	431a      	orrs	r2, r3
 80490b6:	68fb      	ldr	r3, [r7, #12]
 80490b8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80490ba:	2300      	movs	r3, #0
}
 80490bc:	4618      	mov	r0, r3
 80490be:	3714      	adds	r7, #20
 80490c0:	46bd      	mov	sp, r7
 80490c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490c6:	4770      	bx	lr

080490c8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80490c8:	b580      	push	{r7, lr}
 80490ca:	b086      	sub	sp, #24
 80490cc:	af00      	add	r7, sp, #0
 80490ce:	60f8      	str	r0, [r7, #12]
 80490d0:	60b9      	str	r1, [r7, #8]
 80490d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80490d4:	2300      	movs	r3, #0
 80490d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80490d8:	68fb      	ldr	r3, [r7, #12]
 80490da:	691b      	ldr	r3, [r3, #16]
 80490dc:	0d9b      	lsrs	r3, r3, #22
 80490de:	059b      	lsls	r3, r3, #22
 80490e0:	68ba      	ldr	r2, [r7, #8]
 80490e2:	6811      	ldr	r1, [r2, #0]
 80490e4:	68ba      	ldr	r2, [r7, #8]
 80490e6:	6852      	ldr	r2, [r2, #4]
 80490e8:	4311      	orrs	r1, r2
 80490ea:	68ba      	ldr	r2, [r7, #8]
 80490ec:	6892      	ldr	r2, [r2, #8]
 80490ee:	3a01      	subs	r2, #1
 80490f0:	0152      	lsls	r2, r2, #5
 80490f2:	4311      	orrs	r1, r2
 80490f4:	68ba      	ldr	r2, [r7, #8]
 80490f6:	68d2      	ldr	r2, [r2, #12]
 80490f8:	0252      	lsls	r2, r2, #9
 80490fa:	430a      	orrs	r2, r1
 80490fc:	431a      	orrs	r2, r3
 80490fe:	68fb      	ldr	r3, [r7, #12]
 8049100:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8049102:	f7f9 fe75 	bl	8042df0 <HAL_GetTick>
 8049106:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049108:	e010      	b.n	804912c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804910a:	687b      	ldr	r3, [r7, #4]
 804910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049110:	d00c      	beq.n	804912c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8049112:	687b      	ldr	r3, [r7, #4]
 8049114:	2b00      	cmp	r3, #0
 8049116:	d007      	beq.n	8049128 <FMC_SDRAM_SendCommand+0x60>
 8049118:	f7f9 fe6a 	bl	8042df0 <HAL_GetTick>
 804911c:	4602      	mov	r2, r0
 804911e:	697b      	ldr	r3, [r7, #20]
 8049120:	1ad3      	subs	r3, r2, r3
 8049122:	687a      	ldr	r2, [r7, #4]
 8049124:	429a      	cmp	r2, r3
 8049126:	d201      	bcs.n	804912c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8049128:	2303      	movs	r3, #3
 804912a:	e006      	b.n	804913a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 804912c:	68fb      	ldr	r3, [r7, #12]
 804912e:	699b      	ldr	r3, [r3, #24]
 8049130:	f003 0320 	and.w	r3, r3, #32
 8049134:	2b20      	cmp	r3, #32
 8049136:	d0e8      	beq.n	804910a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8049138:	2300      	movs	r3, #0
}
 804913a:	4618      	mov	r0, r3
 804913c:	3718      	adds	r7, #24
 804913e:	46bd      	mov	sp, r7
 8049140:	bd80      	pop	{r7, pc}

08049142 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8049142:	b480      	push	{r7}
 8049144:	b083      	sub	sp, #12
 8049146:	af00      	add	r7, sp, #0
 8049148:	6078      	str	r0, [r7, #4]
 804914a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 804914c:	687b      	ldr	r3, [r7, #4]
 804914e:	695b      	ldr	r3, [r3, #20]
 8049150:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8049154:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8049158:	683a      	ldr	r2, [r7, #0]
 804915a:	0052      	lsls	r2, r2, #1
 804915c:	431a      	orrs	r2, r3
 804915e:	687b      	ldr	r3, [r7, #4]
 8049160:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8049162:	2300      	movs	r3, #0
}
 8049164:	4618      	mov	r0, r3
 8049166:	370c      	adds	r7, #12
 8049168:	46bd      	mov	sp, r7
 804916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804916e:	4770      	bx	lr

08049170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049170:	b084      	sub	sp, #16
 8049172:	b580      	push	{r7, lr}
 8049174:	b084      	sub	sp, #16
 8049176:	af00      	add	r7, sp, #0
 8049178:	6078      	str	r0, [r7, #4]
 804917a:	f107 001c 	add.w	r0, r7, #28
 804917e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8049182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049184:	2b01      	cmp	r3, #1
 8049186:	d122      	bne.n	80491ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8049188:	687b      	ldr	r3, [r7, #4]
 804918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804918c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8049190:	687b      	ldr	r3, [r7, #4]
 8049192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8049194:	687b      	ldr	r3, [r7, #4]
 8049196:	68db      	ldr	r3, [r3, #12]
 8049198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 804919c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80491a0:	687a      	ldr	r2, [r7, #4]
 80491a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80491a4:	687b      	ldr	r3, [r7, #4]
 80491a6:	68db      	ldr	r3, [r3, #12]
 80491a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80491ac:	687b      	ldr	r3, [r7, #4]
 80491ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80491b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80491b2:	2b01      	cmp	r3, #1
 80491b4:	d105      	bne.n	80491c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80491b6:	687b      	ldr	r3, [r7, #4]
 80491b8:	68db      	ldr	r3, [r3, #12]
 80491ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80491be:	687b      	ldr	r3, [r7, #4]
 80491c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80491c2:	6878      	ldr	r0, [r7, #4]
 80491c4:	f000 f9c0 	bl	8049548 <USB_CoreReset>
 80491c8:	4603      	mov	r3, r0
 80491ca:	73fb      	strb	r3, [r7, #15]
 80491cc:	e01a      	b.n	8049204 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80491ce:	687b      	ldr	r3, [r7, #4]
 80491d0:	68db      	ldr	r3, [r3, #12]
 80491d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80491d6:	687b      	ldr	r3, [r7, #4]
 80491d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80491da:	6878      	ldr	r0, [r7, #4]
 80491dc:	f000 f9b4 	bl	8049548 <USB_CoreReset>
 80491e0:	4603      	mov	r3, r0
 80491e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80491e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80491e6:	2b00      	cmp	r3, #0
 80491e8:	d106      	bne.n	80491f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80491ea:	687b      	ldr	r3, [r7, #4]
 80491ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80491ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80491f2:	687b      	ldr	r3, [r7, #4]
 80491f4:	639a      	str	r2, [r3, #56]	; 0x38
 80491f6:	e005      	b.n	8049204 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80491f8:	687b      	ldr	r3, [r7, #4]
 80491fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80491fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8049200:	687b      	ldr	r3, [r7, #4]
 8049202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8049204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049206:	2b01      	cmp	r3, #1
 8049208:	d10b      	bne.n	8049222 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 804920a:	687b      	ldr	r3, [r7, #4]
 804920c:	689b      	ldr	r3, [r3, #8]
 804920e:	f043 0206 	orr.w	r2, r3, #6
 8049212:	687b      	ldr	r3, [r7, #4]
 8049214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8049216:	687b      	ldr	r3, [r7, #4]
 8049218:	689b      	ldr	r3, [r3, #8]
 804921a:	f043 0220 	orr.w	r2, r3, #32
 804921e:	687b      	ldr	r3, [r7, #4]
 8049220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8049222:	7bfb      	ldrb	r3, [r7, #15]
}
 8049224:	4618      	mov	r0, r3
 8049226:	3710      	adds	r7, #16
 8049228:	46bd      	mov	sp, r7
 804922a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804922e:	b004      	add	sp, #16
 8049230:	4770      	bx	lr

08049232 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049232:	b480      	push	{r7}
 8049234:	b083      	sub	sp, #12
 8049236:	af00      	add	r7, sp, #0
 8049238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 804923a:	687b      	ldr	r3, [r7, #4]
 804923c:	689b      	ldr	r3, [r3, #8]
 804923e:	f043 0201 	orr.w	r2, r3, #1
 8049242:	687b      	ldr	r3, [r7, #4]
 8049244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8049246:	2300      	movs	r3, #0
}
 8049248:	4618      	mov	r0, r3
 804924a:	370c      	adds	r7, #12
 804924c:	46bd      	mov	sp, r7
 804924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049252:	4770      	bx	lr

08049254 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049254:	b480      	push	{r7}
 8049256:	b083      	sub	sp, #12
 8049258:	af00      	add	r7, sp, #0
 804925a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 804925c:	687b      	ldr	r3, [r7, #4]
 804925e:	689b      	ldr	r3, [r3, #8]
 8049260:	f023 0201 	bic.w	r2, r3, #1
 8049264:	687b      	ldr	r3, [r7, #4]
 8049266:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8049268:	2300      	movs	r3, #0
}
 804926a:	4618      	mov	r0, r3
 804926c:	370c      	adds	r7, #12
 804926e:	46bd      	mov	sp, r7
 8049270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049274:	4770      	bx	lr

08049276 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8049276:	b580      	push	{r7, lr}
 8049278:	b084      	sub	sp, #16
 804927a:	af00      	add	r7, sp, #0
 804927c:	6078      	str	r0, [r7, #4]
 804927e:	460b      	mov	r3, r1
 8049280:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8049282:	2300      	movs	r3, #0
 8049284:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8049286:	687b      	ldr	r3, [r7, #4]
 8049288:	68db      	ldr	r3, [r3, #12]
 804928a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 804928e:	687b      	ldr	r3, [r7, #4]
 8049290:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8049292:	78fb      	ldrb	r3, [r7, #3]
 8049294:	2b01      	cmp	r3, #1
 8049296:	d115      	bne.n	80492c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8049298:	687b      	ldr	r3, [r7, #4]
 804929a:	68db      	ldr	r3, [r3, #12]
 804929c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80492a0:	687b      	ldr	r3, [r7, #4]
 80492a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80492a4:	2001      	movs	r0, #1
 80492a6:	f7f9 fdaf 	bl	8042e08 <HAL_Delay>
      ms++;
 80492aa:	68fb      	ldr	r3, [r7, #12]
 80492ac:	3301      	adds	r3, #1
 80492ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80492b0:	6878      	ldr	r0, [r7, #4]
 80492b2:	f000 f93a 	bl	804952a <USB_GetMode>
 80492b6:	4603      	mov	r3, r0
 80492b8:	2b01      	cmp	r3, #1
 80492ba:	d01e      	beq.n	80492fa <USB_SetCurrentMode+0x84>
 80492bc:	68fb      	ldr	r3, [r7, #12]
 80492be:	2b31      	cmp	r3, #49	; 0x31
 80492c0:	d9f0      	bls.n	80492a4 <USB_SetCurrentMode+0x2e>
 80492c2:	e01a      	b.n	80492fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80492c4:	78fb      	ldrb	r3, [r7, #3]
 80492c6:	2b00      	cmp	r3, #0
 80492c8:	d115      	bne.n	80492f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80492ca:	687b      	ldr	r3, [r7, #4]
 80492cc:	68db      	ldr	r3, [r3, #12]
 80492ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80492d2:	687b      	ldr	r3, [r7, #4]
 80492d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80492d6:	2001      	movs	r0, #1
 80492d8:	f7f9 fd96 	bl	8042e08 <HAL_Delay>
      ms++;
 80492dc:	68fb      	ldr	r3, [r7, #12]
 80492de:	3301      	adds	r3, #1
 80492e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80492e2:	6878      	ldr	r0, [r7, #4]
 80492e4:	f000 f921 	bl	804952a <USB_GetMode>
 80492e8:	4603      	mov	r3, r0
 80492ea:	2b00      	cmp	r3, #0
 80492ec:	d005      	beq.n	80492fa <USB_SetCurrentMode+0x84>
 80492ee:	68fb      	ldr	r3, [r7, #12]
 80492f0:	2b31      	cmp	r3, #49	; 0x31
 80492f2:	d9f0      	bls.n	80492d6 <USB_SetCurrentMode+0x60>
 80492f4:	e001      	b.n	80492fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80492f6:	2301      	movs	r3, #1
 80492f8:	e005      	b.n	8049306 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80492fa:	68fb      	ldr	r3, [r7, #12]
 80492fc:	2b32      	cmp	r3, #50	; 0x32
 80492fe:	d101      	bne.n	8049304 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8049300:	2301      	movs	r3, #1
 8049302:	e000      	b.n	8049306 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8049304:	2300      	movs	r3, #0
}
 8049306:	4618      	mov	r0, r3
 8049308:	3710      	adds	r7, #16
 804930a:	46bd      	mov	sp, r7
 804930c:	bd80      	pop	{r7, pc}
	...

08049310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8049310:	b480      	push	{r7}
 8049312:	b085      	sub	sp, #20
 8049314:	af00      	add	r7, sp, #0
 8049316:	6078      	str	r0, [r7, #4]
 8049318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804931a:	2300      	movs	r3, #0
 804931c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804931e:	68fb      	ldr	r3, [r7, #12]
 8049320:	3301      	adds	r3, #1
 8049322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049324:	68fb      	ldr	r3, [r7, #12]
 8049326:	4a13      	ldr	r2, [pc, #76]	; (8049374 <USB_FlushTxFifo+0x64>)
 8049328:	4293      	cmp	r3, r2
 804932a:	d901      	bls.n	8049330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804932c:	2303      	movs	r3, #3
 804932e:	e01b      	b.n	8049368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049330:	687b      	ldr	r3, [r7, #4]
 8049332:	691b      	ldr	r3, [r3, #16]
 8049334:	2b00      	cmp	r3, #0
 8049336:	daf2      	bge.n	804931e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8049338:	2300      	movs	r3, #0
 804933a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 804933c:	683b      	ldr	r3, [r7, #0]
 804933e:	019b      	lsls	r3, r3, #6
 8049340:	f043 0220 	orr.w	r2, r3, #32
 8049344:	687b      	ldr	r3, [r7, #4]
 8049346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049348:	68fb      	ldr	r3, [r7, #12]
 804934a:	3301      	adds	r3, #1
 804934c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804934e:	68fb      	ldr	r3, [r7, #12]
 8049350:	4a08      	ldr	r2, [pc, #32]	; (8049374 <USB_FlushTxFifo+0x64>)
 8049352:	4293      	cmp	r3, r2
 8049354:	d901      	bls.n	804935a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8049356:	2303      	movs	r3, #3
 8049358:	e006      	b.n	8049368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804935a:	687b      	ldr	r3, [r7, #4]
 804935c:	691b      	ldr	r3, [r3, #16]
 804935e:	f003 0320 	and.w	r3, r3, #32
 8049362:	2b20      	cmp	r3, #32
 8049364:	d0f0      	beq.n	8049348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8049366:	2300      	movs	r3, #0
}
 8049368:	4618      	mov	r0, r3
 804936a:	3714      	adds	r7, #20
 804936c:	46bd      	mov	sp, r7
 804936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049372:	4770      	bx	lr
 8049374:	00030d40 	.word	0x00030d40

08049378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8049378:	b480      	push	{r7}
 804937a:	b085      	sub	sp, #20
 804937c:	af00      	add	r7, sp, #0
 804937e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049380:	2300      	movs	r3, #0
 8049382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049384:	68fb      	ldr	r3, [r7, #12]
 8049386:	3301      	adds	r3, #1
 8049388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804938a:	68fb      	ldr	r3, [r7, #12]
 804938c:	4a11      	ldr	r2, [pc, #68]	; (80493d4 <USB_FlushRxFifo+0x5c>)
 804938e:	4293      	cmp	r3, r2
 8049390:	d901      	bls.n	8049396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8049392:	2303      	movs	r3, #3
 8049394:	e018      	b.n	80493c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049396:	687b      	ldr	r3, [r7, #4]
 8049398:	691b      	ldr	r3, [r3, #16]
 804939a:	2b00      	cmp	r3, #0
 804939c:	daf2      	bge.n	8049384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804939e:	2300      	movs	r3, #0
 80493a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80493a2:	687b      	ldr	r3, [r7, #4]
 80493a4:	2210      	movs	r2, #16
 80493a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80493a8:	68fb      	ldr	r3, [r7, #12]
 80493aa:	3301      	adds	r3, #1
 80493ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80493ae:	68fb      	ldr	r3, [r7, #12]
 80493b0:	4a08      	ldr	r2, [pc, #32]	; (80493d4 <USB_FlushRxFifo+0x5c>)
 80493b2:	4293      	cmp	r3, r2
 80493b4:	d901      	bls.n	80493ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80493b6:	2303      	movs	r3, #3
 80493b8:	e006      	b.n	80493c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80493ba:	687b      	ldr	r3, [r7, #4]
 80493bc:	691b      	ldr	r3, [r3, #16]
 80493be:	f003 0310 	and.w	r3, r3, #16
 80493c2:	2b10      	cmp	r3, #16
 80493c4:	d0f0      	beq.n	80493a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80493c6:	2300      	movs	r3, #0
}
 80493c8:	4618      	mov	r0, r3
 80493ca:	3714      	adds	r7, #20
 80493cc:	46bd      	mov	sp, r7
 80493ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80493d2:	4770      	bx	lr
 80493d4:	00030d40 	.word	0x00030d40

080493d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80493d8:	b480      	push	{r7}
 80493da:	b089      	sub	sp, #36	; 0x24
 80493dc:	af00      	add	r7, sp, #0
 80493de:	60f8      	str	r0, [r7, #12]
 80493e0:	60b9      	str	r1, [r7, #8]
 80493e2:	4611      	mov	r1, r2
 80493e4:	461a      	mov	r2, r3
 80493e6:	460b      	mov	r3, r1
 80493e8:	71fb      	strb	r3, [r7, #7]
 80493ea:	4613      	mov	r3, r2
 80493ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80493ee:	68fb      	ldr	r3, [r7, #12]
 80493f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80493f2:	68bb      	ldr	r3, [r7, #8]
 80493f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80493f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80493fa:	2b00      	cmp	r3, #0
 80493fc:	d123      	bne.n	8049446 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80493fe:	88bb      	ldrh	r3, [r7, #4]
 8049400:	3303      	adds	r3, #3
 8049402:	089b      	lsrs	r3, r3, #2
 8049404:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8049406:	2300      	movs	r3, #0
 8049408:	61bb      	str	r3, [r7, #24]
 804940a:	e018      	b.n	804943e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 804940c:	79fb      	ldrb	r3, [r7, #7]
 804940e:	031a      	lsls	r2, r3, #12
 8049410:	697b      	ldr	r3, [r7, #20]
 8049412:	4413      	add	r3, r2
 8049414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049418:	461a      	mov	r2, r3
 804941a:	69fb      	ldr	r3, [r7, #28]
 804941c:	681b      	ldr	r3, [r3, #0]
 804941e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8049420:	69fb      	ldr	r3, [r7, #28]
 8049422:	3301      	adds	r3, #1
 8049424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049426:	69fb      	ldr	r3, [r7, #28]
 8049428:	3301      	adds	r3, #1
 804942a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 804942c:	69fb      	ldr	r3, [r7, #28]
 804942e:	3301      	adds	r3, #1
 8049430:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049432:	69fb      	ldr	r3, [r7, #28]
 8049434:	3301      	adds	r3, #1
 8049436:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8049438:	69bb      	ldr	r3, [r7, #24]
 804943a:	3301      	adds	r3, #1
 804943c:	61bb      	str	r3, [r7, #24]
 804943e:	69ba      	ldr	r2, [r7, #24]
 8049440:	693b      	ldr	r3, [r7, #16]
 8049442:	429a      	cmp	r2, r3
 8049444:	d3e2      	bcc.n	804940c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8049446:	2300      	movs	r3, #0
}
 8049448:	4618      	mov	r0, r3
 804944a:	3724      	adds	r7, #36	; 0x24
 804944c:	46bd      	mov	sp, r7
 804944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049452:	4770      	bx	lr

08049454 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8049454:	b480      	push	{r7}
 8049456:	b08b      	sub	sp, #44	; 0x2c
 8049458:	af00      	add	r7, sp, #0
 804945a:	60f8      	str	r0, [r7, #12]
 804945c:	60b9      	str	r1, [r7, #8]
 804945e:	4613      	mov	r3, r2
 8049460:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049462:	68fb      	ldr	r3, [r7, #12]
 8049464:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8049466:	68bb      	ldr	r3, [r7, #8]
 8049468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 804946a:	88fb      	ldrh	r3, [r7, #6]
 804946c:	089b      	lsrs	r3, r3, #2
 804946e:	b29b      	uxth	r3, r3
 8049470:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8049472:	88fb      	ldrh	r3, [r7, #6]
 8049474:	f003 0303 	and.w	r3, r3, #3
 8049478:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 804947a:	2300      	movs	r3, #0
 804947c:	623b      	str	r3, [r7, #32]
 804947e:	e014      	b.n	80494aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8049480:	69bb      	ldr	r3, [r7, #24]
 8049482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049486:	681a      	ldr	r2, [r3, #0]
 8049488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804948a:	601a      	str	r2, [r3, #0]
    pDest++;
 804948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804948e:	3301      	adds	r3, #1
 8049490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049494:	3301      	adds	r3, #1
 8049496:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804949a:	3301      	adds	r3, #1
 804949c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80494a0:	3301      	adds	r3, #1
 80494a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80494a4:	6a3b      	ldr	r3, [r7, #32]
 80494a6:	3301      	adds	r3, #1
 80494a8:	623b      	str	r3, [r7, #32]
 80494aa:	6a3a      	ldr	r2, [r7, #32]
 80494ac:	697b      	ldr	r3, [r7, #20]
 80494ae:	429a      	cmp	r2, r3
 80494b0:	d3e6      	bcc.n	8049480 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80494b2:	8bfb      	ldrh	r3, [r7, #30]
 80494b4:	2b00      	cmp	r3, #0
 80494b6:	d01e      	beq.n	80494f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80494b8:	2300      	movs	r3, #0
 80494ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80494bc:	69bb      	ldr	r3, [r7, #24]
 80494be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80494c2:	461a      	mov	r2, r3
 80494c4:	f107 0310 	add.w	r3, r7, #16
 80494c8:	6812      	ldr	r2, [r2, #0]
 80494ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80494cc:	693a      	ldr	r2, [r7, #16]
 80494ce:	6a3b      	ldr	r3, [r7, #32]
 80494d0:	b2db      	uxtb	r3, r3
 80494d2:	00db      	lsls	r3, r3, #3
 80494d4:	fa22 f303 	lsr.w	r3, r2, r3
 80494d8:	b2da      	uxtb	r2, r3
 80494da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80494dc:	701a      	strb	r2, [r3, #0]
      i++;
 80494de:	6a3b      	ldr	r3, [r7, #32]
 80494e0:	3301      	adds	r3, #1
 80494e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80494e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80494e6:	3301      	adds	r3, #1
 80494e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80494ea:	8bfb      	ldrh	r3, [r7, #30]
 80494ec:	3b01      	subs	r3, #1
 80494ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80494f0:	8bfb      	ldrh	r3, [r7, #30]
 80494f2:	2b00      	cmp	r3, #0
 80494f4:	d1ea      	bne.n	80494cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80494f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80494f8:	4618      	mov	r0, r3
 80494fa:	372c      	adds	r7, #44	; 0x2c
 80494fc:	46bd      	mov	sp, r7
 80494fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049502:	4770      	bx	lr

08049504 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8049504:	b480      	push	{r7}
 8049506:	b085      	sub	sp, #20
 8049508:	af00      	add	r7, sp, #0
 804950a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 804950c:	687b      	ldr	r3, [r7, #4]
 804950e:	695b      	ldr	r3, [r3, #20]
 8049510:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8049512:	687b      	ldr	r3, [r7, #4]
 8049514:	699b      	ldr	r3, [r3, #24]
 8049516:	68fa      	ldr	r2, [r7, #12]
 8049518:	4013      	ands	r3, r2
 804951a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 804951c:	68fb      	ldr	r3, [r7, #12]
}
 804951e:	4618      	mov	r0, r3
 8049520:	3714      	adds	r7, #20
 8049522:	46bd      	mov	sp, r7
 8049524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049528:	4770      	bx	lr

0804952a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 804952a:	b480      	push	{r7}
 804952c:	b083      	sub	sp, #12
 804952e:	af00      	add	r7, sp, #0
 8049530:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8049532:	687b      	ldr	r3, [r7, #4]
 8049534:	695b      	ldr	r3, [r3, #20]
 8049536:	f003 0301 	and.w	r3, r3, #1
}
 804953a:	4618      	mov	r0, r3
 804953c:	370c      	adds	r7, #12
 804953e:	46bd      	mov	sp, r7
 8049540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049544:	4770      	bx	lr
	...

08049548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8049548:	b480      	push	{r7}
 804954a:	b085      	sub	sp, #20
 804954c:	af00      	add	r7, sp, #0
 804954e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049550:	2300      	movs	r3, #0
 8049552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049554:	68fb      	ldr	r3, [r7, #12]
 8049556:	3301      	adds	r3, #1
 8049558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804955a:	68fb      	ldr	r3, [r7, #12]
 804955c:	4a13      	ldr	r2, [pc, #76]	; (80495ac <USB_CoreReset+0x64>)
 804955e:	4293      	cmp	r3, r2
 8049560:	d901      	bls.n	8049566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8049562:	2303      	movs	r3, #3
 8049564:	e01b      	b.n	804959e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049566:	687b      	ldr	r3, [r7, #4]
 8049568:	691b      	ldr	r3, [r3, #16]
 804956a:	2b00      	cmp	r3, #0
 804956c:	daf2      	bge.n	8049554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 804956e:	2300      	movs	r3, #0
 8049570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8049572:	687b      	ldr	r3, [r7, #4]
 8049574:	691b      	ldr	r3, [r3, #16]
 8049576:	f043 0201 	orr.w	r2, r3, #1
 804957a:	687b      	ldr	r3, [r7, #4]
 804957c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804957e:	68fb      	ldr	r3, [r7, #12]
 8049580:	3301      	adds	r3, #1
 8049582:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049584:	68fb      	ldr	r3, [r7, #12]
 8049586:	4a09      	ldr	r2, [pc, #36]	; (80495ac <USB_CoreReset+0x64>)
 8049588:	4293      	cmp	r3, r2
 804958a:	d901      	bls.n	8049590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 804958c:	2303      	movs	r3, #3
 804958e:	e006      	b.n	804959e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8049590:	687b      	ldr	r3, [r7, #4]
 8049592:	691b      	ldr	r3, [r3, #16]
 8049594:	f003 0301 	and.w	r3, r3, #1
 8049598:	2b01      	cmp	r3, #1
 804959a:	d0f0      	beq.n	804957e <USB_CoreReset+0x36>

  return HAL_OK;
 804959c:	2300      	movs	r3, #0
}
 804959e:	4618      	mov	r0, r3
 80495a0:	3714      	adds	r7, #20
 80495a2:	46bd      	mov	sp, r7
 80495a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80495a8:	4770      	bx	lr
 80495aa:	bf00      	nop
 80495ac:	00030d40 	.word	0x00030d40

080495b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80495b0:	b084      	sub	sp, #16
 80495b2:	b580      	push	{r7, lr}
 80495b4:	b086      	sub	sp, #24
 80495b6:	af00      	add	r7, sp, #0
 80495b8:	6078      	str	r0, [r7, #4]
 80495ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80495be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80495c2:	2300      	movs	r3, #0
 80495c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80495c6:	687b      	ldr	r3, [r7, #4]
 80495c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80495ca:	68fb      	ldr	r3, [r7, #12]
 80495cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80495d0:	461a      	mov	r2, r3
 80495d2:	2300      	movs	r3, #0
 80495d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80495d6:	687b      	ldr	r3, [r7, #4]
 80495d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80495da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80495de:	687b      	ldr	r3, [r7, #4]
 80495e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80495e2:	687b      	ldr	r3, [r7, #4]
 80495e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80495e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80495ea:	687b      	ldr	r3, [r7, #4]
 80495ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80495ee:	687b      	ldr	r3, [r7, #4]
 80495f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80495f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80495f6:	687b      	ldr	r3, [r7, #4]
 80495f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80495fa:	687b      	ldr	r3, [r7, #4]
 80495fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80495fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049602:	2b00      	cmp	r3, #0
 8049604:	d018      	beq.n	8049638 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8049606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049608:	2b01      	cmp	r3, #1
 804960a:	d10a      	bne.n	8049622 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 804960c:	68fb      	ldr	r3, [r7, #12]
 804960e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049612:	681b      	ldr	r3, [r3, #0]
 8049614:	68fa      	ldr	r2, [r7, #12]
 8049616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804961a:	f043 0304 	orr.w	r3, r3, #4
 804961e:	6013      	str	r3, [r2, #0]
 8049620:	e014      	b.n	804964c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049622:	68fb      	ldr	r3, [r7, #12]
 8049624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049628:	681b      	ldr	r3, [r3, #0]
 804962a:	68fa      	ldr	r2, [r7, #12]
 804962c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049630:	f023 0304 	bic.w	r3, r3, #4
 8049634:	6013      	str	r3, [r2, #0]
 8049636:	e009      	b.n	804964c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049638:	68fb      	ldr	r3, [r7, #12]
 804963a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804963e:	681b      	ldr	r3, [r3, #0]
 8049640:	68fa      	ldr	r2, [r7, #12]
 8049642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049646:	f023 0304 	bic.w	r3, r3, #4
 804964a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804964c:	2110      	movs	r1, #16
 804964e:	6878      	ldr	r0, [r7, #4]
 8049650:	f7ff fe5e 	bl	8049310 <USB_FlushTxFifo>
 8049654:	4603      	mov	r3, r0
 8049656:	2b00      	cmp	r3, #0
 8049658:	d001      	beq.n	804965e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 804965a:	2301      	movs	r3, #1
 804965c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804965e:	6878      	ldr	r0, [r7, #4]
 8049660:	f7ff fe8a 	bl	8049378 <USB_FlushRxFifo>
 8049664:	4603      	mov	r3, r0
 8049666:	2b00      	cmp	r3, #0
 8049668:	d001      	beq.n	804966e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 804966a:	2301      	movs	r3, #1
 804966c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 804966e:	2300      	movs	r3, #0
 8049670:	613b      	str	r3, [r7, #16]
 8049672:	e015      	b.n	80496a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8049674:	693b      	ldr	r3, [r7, #16]
 8049676:	015a      	lsls	r2, r3, #5
 8049678:	68fb      	ldr	r3, [r7, #12]
 804967a:	4413      	add	r3, r2
 804967c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049680:	461a      	mov	r2, r3
 8049682:	f04f 33ff 	mov.w	r3, #4294967295
 8049686:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8049688:	693b      	ldr	r3, [r7, #16]
 804968a:	015a      	lsls	r2, r3, #5
 804968c:	68fb      	ldr	r3, [r7, #12]
 804968e:	4413      	add	r3, r2
 8049690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049694:	461a      	mov	r2, r3
 8049696:	2300      	movs	r3, #0
 8049698:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 804969a:	693b      	ldr	r3, [r7, #16]
 804969c:	3301      	adds	r3, #1
 804969e:	613b      	str	r3, [r7, #16]
 80496a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80496a2:	693a      	ldr	r2, [r7, #16]
 80496a4:	429a      	cmp	r2, r3
 80496a6:	d3e5      	bcc.n	8049674 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80496a8:	687b      	ldr	r3, [r7, #4]
 80496aa:	2200      	movs	r2, #0
 80496ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80496ae:	687b      	ldr	r3, [r7, #4]
 80496b0:	f04f 32ff 	mov.w	r2, #4294967295
 80496b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80496b6:	687b      	ldr	r3, [r7, #4]
 80496b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80496ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80496be:	2b00      	cmp	r3, #0
 80496c0:	d00b      	beq.n	80496da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80496c2:	687b      	ldr	r3, [r7, #4]
 80496c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80496c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80496ca:	687b      	ldr	r3, [r7, #4]
 80496cc:	4a13      	ldr	r2, [pc, #76]	; (804971c <USB_HostInit+0x16c>)
 80496ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80496d0:	687b      	ldr	r3, [r7, #4]
 80496d2:	4a13      	ldr	r2, [pc, #76]	; (8049720 <USB_HostInit+0x170>)
 80496d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80496d8:	e009      	b.n	80496ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80496da:	687b      	ldr	r3, [r7, #4]
 80496dc:	2280      	movs	r2, #128	; 0x80
 80496de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80496e0:	687b      	ldr	r3, [r7, #4]
 80496e2:	4a10      	ldr	r2, [pc, #64]	; (8049724 <USB_HostInit+0x174>)
 80496e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80496e6:	687b      	ldr	r3, [r7, #4]
 80496e8:	4a0f      	ldr	r2, [pc, #60]	; (8049728 <USB_HostInit+0x178>)
 80496ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80496ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80496f0:	2b00      	cmp	r3, #0
 80496f2:	d105      	bne.n	8049700 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80496f4:	687b      	ldr	r3, [r7, #4]
 80496f6:	699b      	ldr	r3, [r3, #24]
 80496f8:	f043 0210 	orr.w	r2, r3, #16
 80496fc:	687b      	ldr	r3, [r7, #4]
 80496fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8049700:	687b      	ldr	r3, [r7, #4]
 8049702:	699a      	ldr	r2, [r3, #24]
 8049704:	4b09      	ldr	r3, [pc, #36]	; (804972c <USB_HostInit+0x17c>)
 8049706:	4313      	orrs	r3, r2
 8049708:	687a      	ldr	r2, [r7, #4]
 804970a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 804970c:	7dfb      	ldrb	r3, [r7, #23]
}
 804970e:	4618      	mov	r0, r3
 8049710:	3718      	adds	r7, #24
 8049712:	46bd      	mov	sp, r7
 8049714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8049718:	b004      	add	sp, #16
 804971a:	4770      	bx	lr
 804971c:	01000200 	.word	0x01000200
 8049720:	00e00300 	.word	0x00e00300
 8049724:	00600080 	.word	0x00600080
 8049728:	004000e0 	.word	0x004000e0
 804972c:	a3200008 	.word	0xa3200008

08049730 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8049730:	b480      	push	{r7}
 8049732:	b085      	sub	sp, #20
 8049734:	af00      	add	r7, sp, #0
 8049736:	6078      	str	r0, [r7, #4]
 8049738:	460b      	mov	r3, r1
 804973a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804973c:	687b      	ldr	r3, [r7, #4]
 804973e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8049740:	68fb      	ldr	r3, [r7, #12]
 8049742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049746:	681b      	ldr	r3, [r3, #0]
 8049748:	68fa      	ldr	r2, [r7, #12]
 804974a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804974e:	f023 0303 	bic.w	r3, r3, #3
 8049752:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8049754:	68fb      	ldr	r3, [r7, #12]
 8049756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804975a:	681a      	ldr	r2, [r3, #0]
 804975c:	78fb      	ldrb	r3, [r7, #3]
 804975e:	f003 0303 	and.w	r3, r3, #3
 8049762:	68f9      	ldr	r1, [r7, #12]
 8049764:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8049768:	4313      	orrs	r3, r2
 804976a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 804976c:	78fb      	ldrb	r3, [r7, #3]
 804976e:	2b01      	cmp	r3, #1
 8049770:	d107      	bne.n	8049782 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8049772:	68fb      	ldr	r3, [r7, #12]
 8049774:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049778:	461a      	mov	r2, r3
 804977a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 804977e:	6053      	str	r3, [r2, #4]
 8049780:	e009      	b.n	8049796 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8049782:	78fb      	ldrb	r3, [r7, #3]
 8049784:	2b02      	cmp	r3, #2
 8049786:	d106      	bne.n	8049796 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8049788:	68fb      	ldr	r3, [r7, #12]
 804978a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804978e:	461a      	mov	r2, r3
 8049790:	f241 7370 	movw	r3, #6000	; 0x1770
 8049794:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8049796:	2300      	movs	r3, #0
}
 8049798:	4618      	mov	r0, r3
 804979a:	3714      	adds	r7, #20
 804979c:	46bd      	mov	sp, r7
 804979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80497a2:	4770      	bx	lr

080497a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80497a4:	b580      	push	{r7, lr}
 80497a6:	b084      	sub	sp, #16
 80497a8:	af00      	add	r7, sp, #0
 80497aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80497ac:	687b      	ldr	r3, [r7, #4]
 80497ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80497b0:	2300      	movs	r3, #0
 80497b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80497b4:	68fb      	ldr	r3, [r7, #12]
 80497b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80497ba:	681b      	ldr	r3, [r3, #0]
 80497bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80497be:	68bb      	ldr	r3, [r7, #8]
 80497c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80497c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80497c6:	68bb      	ldr	r3, [r7, #8]
 80497c8:	68fa      	ldr	r2, [r7, #12]
 80497ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80497ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80497d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80497d4:	2064      	movs	r0, #100	; 0x64
 80497d6:	f7f9 fb17 	bl	8042e08 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80497da:	68bb      	ldr	r3, [r7, #8]
 80497dc:	68fa      	ldr	r2, [r7, #12]
 80497de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80497e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80497e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80497e8:	200a      	movs	r0, #10
 80497ea:	f7f9 fb0d 	bl	8042e08 <HAL_Delay>

  return HAL_OK;
 80497ee:	2300      	movs	r3, #0
}
 80497f0:	4618      	mov	r0, r3
 80497f2:	3710      	adds	r7, #16
 80497f4:	46bd      	mov	sp, r7
 80497f6:	bd80      	pop	{r7, pc}

080497f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80497f8:	b480      	push	{r7}
 80497fa:	b085      	sub	sp, #20
 80497fc:	af00      	add	r7, sp, #0
 80497fe:	6078      	str	r0, [r7, #4]
 8049800:	460b      	mov	r3, r1
 8049802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049804:	687b      	ldr	r3, [r7, #4]
 8049806:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049808:	2300      	movs	r3, #0
 804980a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804980c:	68fb      	ldr	r3, [r7, #12]
 804980e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049812:	681b      	ldr	r3, [r3, #0]
 8049814:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049816:	68bb      	ldr	r3, [r7, #8]
 8049818:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 804981c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 804981e:	68bb      	ldr	r3, [r7, #8]
 8049820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049824:	2b00      	cmp	r3, #0
 8049826:	d109      	bne.n	804983c <USB_DriveVbus+0x44>
 8049828:	78fb      	ldrb	r3, [r7, #3]
 804982a:	2b01      	cmp	r3, #1
 804982c:	d106      	bne.n	804983c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 804982e:	68bb      	ldr	r3, [r7, #8]
 8049830:	68fa      	ldr	r2, [r7, #12]
 8049832:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804983a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 804983c:	68bb      	ldr	r3, [r7, #8]
 804983e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8049846:	d109      	bne.n	804985c <USB_DriveVbus+0x64>
 8049848:	78fb      	ldrb	r3, [r7, #3]
 804984a:	2b00      	cmp	r3, #0
 804984c:	d106      	bne.n	804985c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 804984e:	68bb      	ldr	r3, [r7, #8]
 8049850:	68fa      	ldr	r2, [r7, #12]
 8049852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804985a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 804985c:	2300      	movs	r3, #0
}
 804985e:	4618      	mov	r0, r3
 8049860:	3714      	adds	r7, #20
 8049862:	46bd      	mov	sp, r7
 8049864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049868:	4770      	bx	lr

0804986a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 804986a:	b480      	push	{r7}
 804986c:	b085      	sub	sp, #20
 804986e:	af00      	add	r7, sp, #0
 8049870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049872:	687b      	ldr	r3, [r7, #4]
 8049874:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049876:	2300      	movs	r3, #0
 8049878:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 804987a:	68fb      	ldr	r3, [r7, #12]
 804987c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049880:	681b      	ldr	r3, [r3, #0]
 8049882:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8049884:	68bb      	ldr	r3, [r7, #8]
 8049886:	0c5b      	lsrs	r3, r3, #17
 8049888:	f003 0303 	and.w	r3, r3, #3
}
 804988c:	4618      	mov	r0, r3
 804988e:	3714      	adds	r7, #20
 8049890:	46bd      	mov	sp, r7
 8049892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049896:	4770      	bx	lr

08049898 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8049898:	b480      	push	{r7}
 804989a:	b085      	sub	sp, #20
 804989c:	af00      	add	r7, sp, #0
 804989e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80498a0:	687b      	ldr	r3, [r7, #4]
 80498a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80498a4:	68fb      	ldr	r3, [r7, #12]
 80498a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80498aa:	689b      	ldr	r3, [r3, #8]
 80498ac:	b29b      	uxth	r3, r3
}
 80498ae:	4618      	mov	r0, r3
 80498b0:	3714      	adds	r7, #20
 80498b2:	46bd      	mov	sp, r7
 80498b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80498b8:	4770      	bx	lr
	...

080498bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80498bc:	b580      	push	{r7, lr}
 80498be:	b088      	sub	sp, #32
 80498c0:	af00      	add	r7, sp, #0
 80498c2:	6078      	str	r0, [r7, #4]
 80498c4:	4608      	mov	r0, r1
 80498c6:	4611      	mov	r1, r2
 80498c8:	461a      	mov	r2, r3
 80498ca:	4603      	mov	r3, r0
 80498cc:	70fb      	strb	r3, [r7, #3]
 80498ce:	460b      	mov	r3, r1
 80498d0:	70bb      	strb	r3, [r7, #2]
 80498d2:	4613      	mov	r3, r2
 80498d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80498d6:	2300      	movs	r3, #0
 80498d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80498da:	687b      	ldr	r3, [r7, #4]
 80498dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80498de:	78fb      	ldrb	r3, [r7, #3]
 80498e0:	015a      	lsls	r2, r3, #5
 80498e2:	693b      	ldr	r3, [r7, #16]
 80498e4:	4413      	add	r3, r2
 80498e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80498ea:	461a      	mov	r2, r3
 80498ec:	f04f 33ff 	mov.w	r3, #4294967295
 80498f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80498f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80498f6:	2b03      	cmp	r3, #3
 80498f8:	d87e      	bhi.n	80499f8 <USB_HC_Init+0x13c>
 80498fa:	a201      	add	r2, pc, #4	; (adr r2, 8049900 <USB_HC_Init+0x44>)
 80498fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049900:	08049911 	.word	0x08049911
 8049904:	080499bb 	.word	0x080499bb
 8049908:	08049911 	.word	0x08049911
 804990c:	0804997d 	.word	0x0804997d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049910:	78fb      	ldrb	r3, [r7, #3]
 8049912:	015a      	lsls	r2, r3, #5
 8049914:	693b      	ldr	r3, [r7, #16]
 8049916:	4413      	add	r3, r2
 8049918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804991c:	461a      	mov	r2, r3
 804991e:	f240 439d 	movw	r3, #1181	; 0x49d
 8049922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8049924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049928:	2b00      	cmp	r3, #0
 804992a:	da10      	bge.n	804994e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804992c:	78fb      	ldrb	r3, [r7, #3]
 804992e:	015a      	lsls	r2, r3, #5
 8049930:	693b      	ldr	r3, [r7, #16]
 8049932:	4413      	add	r3, r2
 8049934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049938:	68db      	ldr	r3, [r3, #12]
 804993a:	78fa      	ldrb	r2, [r7, #3]
 804993c:	0151      	lsls	r1, r2, #5
 804993e:	693a      	ldr	r2, [r7, #16]
 8049940:	440a      	add	r2, r1
 8049942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804994a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 804994c:	e057      	b.n	80499fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 804994e:	687b      	ldr	r3, [r7, #4]
 8049950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049956:	2b00      	cmp	r3, #0
 8049958:	d051      	beq.n	80499fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 804995a:	78fb      	ldrb	r3, [r7, #3]
 804995c:	015a      	lsls	r2, r3, #5
 804995e:	693b      	ldr	r3, [r7, #16]
 8049960:	4413      	add	r3, r2
 8049962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049966:	68db      	ldr	r3, [r3, #12]
 8049968:	78fa      	ldrb	r2, [r7, #3]
 804996a:	0151      	lsls	r1, r2, #5
 804996c:	693a      	ldr	r2, [r7, #16]
 804996e:	440a      	add	r2, r1
 8049970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049974:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8049978:	60d3      	str	r3, [r2, #12]
      break;
 804997a:	e040      	b.n	80499fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804997c:	78fb      	ldrb	r3, [r7, #3]
 804997e:	015a      	lsls	r2, r3, #5
 8049980:	693b      	ldr	r3, [r7, #16]
 8049982:	4413      	add	r3, r2
 8049984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049988:	461a      	mov	r2, r3
 804998a:	f240 639d 	movw	r3, #1693	; 0x69d
 804998e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8049990:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049994:	2b00      	cmp	r3, #0
 8049996:	da34      	bge.n	8049a02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049998:	78fb      	ldrb	r3, [r7, #3]
 804999a:	015a      	lsls	r2, r3, #5
 804999c:	693b      	ldr	r3, [r7, #16]
 804999e:	4413      	add	r3, r2
 80499a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80499a4:	68db      	ldr	r3, [r3, #12]
 80499a6:	78fa      	ldrb	r2, [r7, #3]
 80499a8:	0151      	lsls	r1, r2, #5
 80499aa:	693a      	ldr	r2, [r7, #16]
 80499ac:	440a      	add	r2, r1
 80499ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80499b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80499b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80499b8:	e023      	b.n	8049a02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80499ba:	78fb      	ldrb	r3, [r7, #3]
 80499bc:	015a      	lsls	r2, r3, #5
 80499be:	693b      	ldr	r3, [r7, #16]
 80499c0:	4413      	add	r3, r2
 80499c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80499c6:	461a      	mov	r2, r3
 80499c8:	f240 2325 	movw	r3, #549	; 0x225
 80499cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80499ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80499d2:	2b00      	cmp	r3, #0
 80499d4:	da17      	bge.n	8049a06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80499d6:	78fb      	ldrb	r3, [r7, #3]
 80499d8:	015a      	lsls	r2, r3, #5
 80499da:	693b      	ldr	r3, [r7, #16]
 80499dc:	4413      	add	r3, r2
 80499de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80499e2:	68db      	ldr	r3, [r3, #12]
 80499e4:	78fa      	ldrb	r2, [r7, #3]
 80499e6:	0151      	lsls	r1, r2, #5
 80499e8:	693a      	ldr	r2, [r7, #16]
 80499ea:	440a      	add	r2, r1
 80499ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80499f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80499f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80499f6:	e006      	b.n	8049a06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80499f8:	2301      	movs	r3, #1
 80499fa:	77fb      	strb	r3, [r7, #31]
      break;
 80499fc:	e004      	b.n	8049a08 <USB_HC_Init+0x14c>
      break;
 80499fe:	bf00      	nop
 8049a00:	e002      	b.n	8049a08 <USB_HC_Init+0x14c>
      break;
 8049a02:	bf00      	nop
 8049a04:	e000      	b.n	8049a08 <USB_HC_Init+0x14c>
      break;
 8049a06:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8049a08:	78fb      	ldrb	r3, [r7, #3]
 8049a0a:	015a      	lsls	r2, r3, #5
 8049a0c:	693b      	ldr	r3, [r7, #16]
 8049a0e:	4413      	add	r3, r2
 8049a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049a14:	68db      	ldr	r3, [r3, #12]
 8049a16:	78fa      	ldrb	r2, [r7, #3]
 8049a18:	0151      	lsls	r1, r2, #5
 8049a1a:	693a      	ldr	r2, [r7, #16]
 8049a1c:	440a      	add	r2, r1
 8049a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049a22:	f043 0302 	orr.w	r3, r3, #2
 8049a26:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8049a28:	693b      	ldr	r3, [r7, #16]
 8049a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049a2e:	699a      	ldr	r2, [r3, #24]
 8049a30:	78fb      	ldrb	r3, [r7, #3]
 8049a32:	f003 030f 	and.w	r3, r3, #15
 8049a36:	2101      	movs	r1, #1
 8049a38:	fa01 f303 	lsl.w	r3, r1, r3
 8049a3c:	6939      	ldr	r1, [r7, #16]
 8049a3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8049a42:	4313      	orrs	r3, r2
 8049a44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8049a46:	687b      	ldr	r3, [r7, #4]
 8049a48:	699b      	ldr	r3, [r3, #24]
 8049a4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8049a4e:	687b      	ldr	r3, [r7, #4]
 8049a50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8049a52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049a56:	2b00      	cmp	r3, #0
 8049a58:	da03      	bge.n	8049a62 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8049a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8049a5e:	61bb      	str	r3, [r7, #24]
 8049a60:	e001      	b.n	8049a66 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8049a62:	2300      	movs	r3, #0
 8049a64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8049a66:	6878      	ldr	r0, [r7, #4]
 8049a68:	f7ff feff 	bl	804986a <USB_GetHostSpeed>
 8049a6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8049a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8049a72:	2b02      	cmp	r3, #2
 8049a74:	d106      	bne.n	8049a84 <USB_HC_Init+0x1c8>
 8049a76:	68fb      	ldr	r3, [r7, #12]
 8049a78:	2b02      	cmp	r3, #2
 8049a7a:	d003      	beq.n	8049a84 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8049a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8049a80:	617b      	str	r3, [r7, #20]
 8049a82:	e001      	b.n	8049a88 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8049a84:	2300      	movs	r3, #0
 8049a86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049a88:	787b      	ldrb	r3, [r7, #1]
 8049a8a:	059b      	lsls	r3, r3, #22
 8049a8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8049a90:	78bb      	ldrb	r3, [r7, #2]
 8049a92:	02db      	lsls	r3, r3, #11
 8049a94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049a98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8049a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049a9e:	049b      	lsls	r3, r3, #18
 8049aa0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8049aa4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049aa6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8049aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8049aac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049aae:	69bb      	ldr	r3, [r7, #24]
 8049ab0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049ab2:	78fb      	ldrb	r3, [r7, #3]
 8049ab4:	0159      	lsls	r1, r3, #5
 8049ab6:	693b      	ldr	r3, [r7, #16]
 8049ab8:	440b      	add	r3, r1
 8049aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049abe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8049ac0:	697b      	ldr	r3, [r7, #20]
 8049ac2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8049ac4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8049ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049aca:	2b03      	cmp	r3, #3
 8049acc:	d003      	beq.n	8049ad6 <USB_HC_Init+0x21a>
 8049ace:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049ad2:	2b01      	cmp	r3, #1
 8049ad4:	d10f      	bne.n	8049af6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8049ad6:	78fb      	ldrb	r3, [r7, #3]
 8049ad8:	015a      	lsls	r2, r3, #5
 8049ada:	693b      	ldr	r3, [r7, #16]
 8049adc:	4413      	add	r3, r2
 8049ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ae2:	681b      	ldr	r3, [r3, #0]
 8049ae4:	78fa      	ldrb	r2, [r7, #3]
 8049ae6:	0151      	lsls	r1, r2, #5
 8049ae8:	693a      	ldr	r2, [r7, #16]
 8049aea:	440a      	add	r2, r1
 8049aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8049af4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8049af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8049af8:	4618      	mov	r0, r3
 8049afa:	3720      	adds	r7, #32
 8049afc:	46bd      	mov	sp, r7
 8049afe:	bd80      	pop	{r7, pc}

08049b00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8049b00:	b580      	push	{r7, lr}
 8049b02:	b08c      	sub	sp, #48	; 0x30
 8049b04:	af02      	add	r7, sp, #8
 8049b06:	60f8      	str	r0, [r7, #12]
 8049b08:	60b9      	str	r1, [r7, #8]
 8049b0a:	4613      	mov	r3, r2
 8049b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049b0e:	68fb      	ldr	r3, [r7, #12]
 8049b10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8049b12:	68bb      	ldr	r3, [r7, #8]
 8049b14:	785b      	ldrb	r3, [r3, #1]
 8049b16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8049b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8049b1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8049b1e:	68fb      	ldr	r3, [r7, #12]
 8049b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049b26:	2b00      	cmp	r3, #0
 8049b28:	d02d      	beq.n	8049b86 <USB_HC_StartXfer+0x86>
 8049b2a:	68bb      	ldr	r3, [r7, #8]
 8049b2c:	791b      	ldrb	r3, [r3, #4]
 8049b2e:	2b00      	cmp	r3, #0
 8049b30:	d129      	bne.n	8049b86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8049b32:	79fb      	ldrb	r3, [r7, #7]
 8049b34:	2b01      	cmp	r3, #1
 8049b36:	d117      	bne.n	8049b68 <USB_HC_StartXfer+0x68>
 8049b38:	68bb      	ldr	r3, [r7, #8]
 8049b3a:	79db      	ldrb	r3, [r3, #7]
 8049b3c:	2b00      	cmp	r3, #0
 8049b3e:	d003      	beq.n	8049b48 <USB_HC_StartXfer+0x48>
 8049b40:	68bb      	ldr	r3, [r7, #8]
 8049b42:	79db      	ldrb	r3, [r3, #7]
 8049b44:	2b02      	cmp	r3, #2
 8049b46:	d10f      	bne.n	8049b68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8049b48:	69fb      	ldr	r3, [r7, #28]
 8049b4a:	015a      	lsls	r2, r3, #5
 8049b4c:	6a3b      	ldr	r3, [r7, #32]
 8049b4e:	4413      	add	r3, r2
 8049b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049b54:	68db      	ldr	r3, [r3, #12]
 8049b56:	69fa      	ldr	r2, [r7, #28]
 8049b58:	0151      	lsls	r1, r2, #5
 8049b5a:	6a3a      	ldr	r2, [r7, #32]
 8049b5c:	440a      	add	r2, r1
 8049b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8049b66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8049b68:	79fb      	ldrb	r3, [r7, #7]
 8049b6a:	2b00      	cmp	r3, #0
 8049b6c:	d10b      	bne.n	8049b86 <USB_HC_StartXfer+0x86>
 8049b6e:	68bb      	ldr	r3, [r7, #8]
 8049b70:	795b      	ldrb	r3, [r3, #5]
 8049b72:	2b01      	cmp	r3, #1
 8049b74:	d107      	bne.n	8049b86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8049b76:	68bb      	ldr	r3, [r7, #8]
 8049b78:	785b      	ldrb	r3, [r3, #1]
 8049b7a:	4619      	mov	r1, r3
 8049b7c:	68f8      	ldr	r0, [r7, #12]
 8049b7e:	f000 fa0f 	bl	8049fa0 <USB_DoPing>
      return HAL_OK;
 8049b82:	2300      	movs	r3, #0
 8049b84:	e0f8      	b.n	8049d78 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8049b86:	68bb      	ldr	r3, [r7, #8]
 8049b88:	695b      	ldr	r3, [r3, #20]
 8049b8a:	2b00      	cmp	r3, #0
 8049b8c:	d018      	beq.n	8049bc0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8049b8e:	68bb      	ldr	r3, [r7, #8]
 8049b90:	695b      	ldr	r3, [r3, #20]
 8049b92:	68ba      	ldr	r2, [r7, #8]
 8049b94:	8912      	ldrh	r2, [r2, #8]
 8049b96:	4413      	add	r3, r2
 8049b98:	3b01      	subs	r3, #1
 8049b9a:	68ba      	ldr	r2, [r7, #8]
 8049b9c:	8912      	ldrh	r2, [r2, #8]
 8049b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8049ba2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8049ba4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8049ba6:	8b7b      	ldrh	r3, [r7, #26]
 8049ba8:	429a      	cmp	r2, r3
 8049baa:	d90b      	bls.n	8049bc4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8049bac:	8b7b      	ldrh	r3, [r7, #26]
 8049bae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049bb2:	68ba      	ldr	r2, [r7, #8]
 8049bb4:	8912      	ldrh	r2, [r2, #8]
 8049bb6:	fb03 f202 	mul.w	r2, r3, r2
 8049bba:	68bb      	ldr	r3, [r7, #8]
 8049bbc:	611a      	str	r2, [r3, #16]
 8049bbe:	e001      	b.n	8049bc4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8049bc0:	2301      	movs	r3, #1
 8049bc2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8049bc4:	68bb      	ldr	r3, [r7, #8]
 8049bc6:	78db      	ldrb	r3, [r3, #3]
 8049bc8:	2b00      	cmp	r3, #0
 8049bca:	d007      	beq.n	8049bdc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8049bcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049bce:	68ba      	ldr	r2, [r7, #8]
 8049bd0:	8912      	ldrh	r2, [r2, #8]
 8049bd2:	fb03 f202 	mul.w	r2, r3, r2
 8049bd6:	68bb      	ldr	r3, [r7, #8]
 8049bd8:	611a      	str	r2, [r3, #16]
 8049bda:	e003      	b.n	8049be4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8049bdc:	68bb      	ldr	r3, [r7, #8]
 8049bde:	695a      	ldr	r2, [r3, #20]
 8049be0:	68bb      	ldr	r3, [r7, #8]
 8049be2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049be4:	68bb      	ldr	r3, [r7, #8]
 8049be6:	691b      	ldr	r3, [r3, #16]
 8049be8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8049bee:	04d9      	lsls	r1, r3, #19
 8049bf0:	4b63      	ldr	r3, [pc, #396]	; (8049d80 <USB_HC_StartXfer+0x280>)
 8049bf2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049bf4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8049bf6:	68bb      	ldr	r3, [r7, #8]
 8049bf8:	7a9b      	ldrb	r3, [r3, #10]
 8049bfa:	075b      	lsls	r3, r3, #29
 8049bfc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049c00:	69f9      	ldr	r1, [r7, #28]
 8049c02:	0148      	lsls	r0, r1, #5
 8049c04:	6a39      	ldr	r1, [r7, #32]
 8049c06:	4401      	add	r1, r0
 8049c08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049c0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8049c0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8049c10:	79fb      	ldrb	r3, [r7, #7]
 8049c12:	2b00      	cmp	r3, #0
 8049c14:	d009      	beq.n	8049c2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8049c16:	68bb      	ldr	r3, [r7, #8]
 8049c18:	68d9      	ldr	r1, [r3, #12]
 8049c1a:	69fb      	ldr	r3, [r7, #28]
 8049c1c:	015a      	lsls	r2, r3, #5
 8049c1e:	6a3b      	ldr	r3, [r7, #32]
 8049c20:	4413      	add	r3, r2
 8049c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c26:	460a      	mov	r2, r1
 8049c28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8049c2a:	6a3b      	ldr	r3, [r7, #32]
 8049c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049c30:	689b      	ldr	r3, [r3, #8]
 8049c32:	f003 0301 	and.w	r3, r3, #1
 8049c36:	2b00      	cmp	r3, #0
 8049c38:	bf0c      	ite	eq
 8049c3a:	2301      	moveq	r3, #1
 8049c3c:	2300      	movne	r3, #0
 8049c3e:	b2db      	uxtb	r3, r3
 8049c40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8049c42:	69fb      	ldr	r3, [r7, #28]
 8049c44:	015a      	lsls	r2, r3, #5
 8049c46:	6a3b      	ldr	r3, [r7, #32]
 8049c48:	4413      	add	r3, r2
 8049c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c4e:	681b      	ldr	r3, [r3, #0]
 8049c50:	69fa      	ldr	r2, [r7, #28]
 8049c52:	0151      	lsls	r1, r2, #5
 8049c54:	6a3a      	ldr	r2, [r7, #32]
 8049c56:	440a      	add	r2, r1
 8049c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049c5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8049c60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8049c62:	69fb      	ldr	r3, [r7, #28]
 8049c64:	015a      	lsls	r2, r3, #5
 8049c66:	6a3b      	ldr	r3, [r7, #32]
 8049c68:	4413      	add	r3, r2
 8049c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c6e:	681a      	ldr	r2, [r3, #0]
 8049c70:	7e7b      	ldrb	r3, [r7, #25]
 8049c72:	075b      	lsls	r3, r3, #29
 8049c74:	69f9      	ldr	r1, [r7, #28]
 8049c76:	0148      	lsls	r0, r1, #5
 8049c78:	6a39      	ldr	r1, [r7, #32]
 8049c7a:	4401      	add	r1, r0
 8049c7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8049c80:	4313      	orrs	r3, r2
 8049c82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8049c84:	69fb      	ldr	r3, [r7, #28]
 8049c86:	015a      	lsls	r2, r3, #5
 8049c88:	6a3b      	ldr	r3, [r7, #32]
 8049c8a:	4413      	add	r3, r2
 8049c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c90:	681b      	ldr	r3, [r3, #0]
 8049c92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8049c94:	693b      	ldr	r3, [r7, #16]
 8049c96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049c9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8049c9c:	68bb      	ldr	r3, [r7, #8]
 8049c9e:	78db      	ldrb	r3, [r3, #3]
 8049ca0:	2b00      	cmp	r3, #0
 8049ca2:	d004      	beq.n	8049cae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8049ca4:	693b      	ldr	r3, [r7, #16]
 8049ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8049caa:	613b      	str	r3, [r7, #16]
 8049cac:	e003      	b.n	8049cb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8049cae:	693b      	ldr	r3, [r7, #16]
 8049cb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8049cb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8049cb6:	693b      	ldr	r3, [r7, #16]
 8049cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049cbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8049cbe:	69fb      	ldr	r3, [r7, #28]
 8049cc0:	015a      	lsls	r2, r3, #5
 8049cc2:	6a3b      	ldr	r3, [r7, #32]
 8049cc4:	4413      	add	r3, r2
 8049cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049cca:	461a      	mov	r2, r3
 8049ccc:	693b      	ldr	r3, [r7, #16]
 8049cce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8049cd0:	79fb      	ldrb	r3, [r7, #7]
 8049cd2:	2b00      	cmp	r3, #0
 8049cd4:	d001      	beq.n	8049cda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8049cd6:	2300      	movs	r3, #0
 8049cd8:	e04e      	b.n	8049d78 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8049cda:	68bb      	ldr	r3, [r7, #8]
 8049cdc:	78db      	ldrb	r3, [r3, #3]
 8049cde:	2b00      	cmp	r3, #0
 8049ce0:	d149      	bne.n	8049d76 <USB_HC_StartXfer+0x276>
 8049ce2:	68bb      	ldr	r3, [r7, #8]
 8049ce4:	695b      	ldr	r3, [r3, #20]
 8049ce6:	2b00      	cmp	r3, #0
 8049ce8:	d045      	beq.n	8049d76 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8049cea:	68bb      	ldr	r3, [r7, #8]
 8049cec:	79db      	ldrb	r3, [r3, #7]
 8049cee:	2b03      	cmp	r3, #3
 8049cf0:	d830      	bhi.n	8049d54 <USB_HC_StartXfer+0x254>
 8049cf2:	a201      	add	r2, pc, #4	; (adr r2, 8049cf8 <USB_HC_StartXfer+0x1f8>)
 8049cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049cf8:	08049d09 	.word	0x08049d09
 8049cfc:	08049d2d 	.word	0x08049d2d
 8049d00:	08049d09 	.word	0x08049d09
 8049d04:	08049d2d 	.word	0x08049d2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8049d08:	68bb      	ldr	r3, [r7, #8]
 8049d0a:	695b      	ldr	r3, [r3, #20]
 8049d0c:	3303      	adds	r3, #3
 8049d0e:	089b      	lsrs	r3, r3, #2
 8049d10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8049d12:	8afa      	ldrh	r2, [r7, #22]
 8049d14:	68fb      	ldr	r3, [r7, #12]
 8049d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049d18:	b29b      	uxth	r3, r3
 8049d1a:	429a      	cmp	r2, r3
 8049d1c:	d91c      	bls.n	8049d58 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8049d1e:	68fb      	ldr	r3, [r7, #12]
 8049d20:	699b      	ldr	r3, [r3, #24]
 8049d22:	f043 0220 	orr.w	r2, r3, #32
 8049d26:	68fb      	ldr	r3, [r7, #12]
 8049d28:	619a      	str	r2, [r3, #24]
        }
        break;
 8049d2a:	e015      	b.n	8049d58 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8049d2c:	68bb      	ldr	r3, [r7, #8]
 8049d2e:	695b      	ldr	r3, [r3, #20]
 8049d30:	3303      	adds	r3, #3
 8049d32:	089b      	lsrs	r3, r3, #2
 8049d34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8049d36:	8afa      	ldrh	r2, [r7, #22]
 8049d38:	6a3b      	ldr	r3, [r7, #32]
 8049d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d3e:	691b      	ldr	r3, [r3, #16]
 8049d40:	b29b      	uxth	r3, r3
 8049d42:	429a      	cmp	r2, r3
 8049d44:	d90a      	bls.n	8049d5c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8049d46:	68fb      	ldr	r3, [r7, #12]
 8049d48:	699b      	ldr	r3, [r3, #24]
 8049d4a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8049d4e:	68fb      	ldr	r3, [r7, #12]
 8049d50:	619a      	str	r2, [r3, #24]
        }
        break;
 8049d52:	e003      	b.n	8049d5c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8049d54:	bf00      	nop
 8049d56:	e002      	b.n	8049d5e <USB_HC_StartXfer+0x25e>
        break;
 8049d58:	bf00      	nop
 8049d5a:	e000      	b.n	8049d5e <USB_HC_StartXfer+0x25e>
        break;
 8049d5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8049d5e:	68bb      	ldr	r3, [r7, #8]
 8049d60:	68d9      	ldr	r1, [r3, #12]
 8049d62:	68bb      	ldr	r3, [r7, #8]
 8049d64:	785a      	ldrb	r2, [r3, #1]
 8049d66:	68bb      	ldr	r3, [r7, #8]
 8049d68:	695b      	ldr	r3, [r3, #20]
 8049d6a:	b29b      	uxth	r3, r3
 8049d6c:	2000      	movs	r0, #0
 8049d6e:	9000      	str	r0, [sp, #0]
 8049d70:	68f8      	ldr	r0, [r7, #12]
 8049d72:	f7ff fb31 	bl	80493d8 <USB_WritePacket>
  }

  return HAL_OK;
 8049d76:	2300      	movs	r3, #0
}
 8049d78:	4618      	mov	r0, r3
 8049d7a:	3728      	adds	r7, #40	; 0x28
 8049d7c:	46bd      	mov	sp, r7
 8049d7e:	bd80      	pop	{r7, pc}
 8049d80:	1ff80000 	.word	0x1ff80000

08049d84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8049d84:	b480      	push	{r7}
 8049d86:	b085      	sub	sp, #20
 8049d88:	af00      	add	r7, sp, #0
 8049d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049d8c:	687b      	ldr	r3, [r7, #4]
 8049d8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8049d90:	68fb      	ldr	r3, [r7, #12]
 8049d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d96:	695b      	ldr	r3, [r3, #20]
 8049d98:	b29b      	uxth	r3, r3
}
 8049d9a:	4618      	mov	r0, r3
 8049d9c:	3714      	adds	r7, #20
 8049d9e:	46bd      	mov	sp, r7
 8049da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049da4:	4770      	bx	lr

08049da6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8049da6:	b480      	push	{r7}
 8049da8:	b089      	sub	sp, #36	; 0x24
 8049daa:	af00      	add	r7, sp, #0
 8049dac:	6078      	str	r0, [r7, #4]
 8049dae:	460b      	mov	r3, r1
 8049db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049db2:	687b      	ldr	r3, [r7, #4]
 8049db4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8049db6:	78fb      	ldrb	r3, [r7, #3]
 8049db8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8049dba:	2300      	movs	r3, #0
 8049dbc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8049dbe:	69bb      	ldr	r3, [r7, #24]
 8049dc0:	015a      	lsls	r2, r3, #5
 8049dc2:	69fb      	ldr	r3, [r7, #28]
 8049dc4:	4413      	add	r3, r2
 8049dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049dca:	681b      	ldr	r3, [r3, #0]
 8049dcc:	0c9b      	lsrs	r3, r3, #18
 8049dce:	f003 0303 	and.w	r3, r3, #3
 8049dd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8049dd4:	69bb      	ldr	r3, [r7, #24]
 8049dd6:	015a      	lsls	r2, r3, #5
 8049dd8:	69fb      	ldr	r3, [r7, #28]
 8049dda:	4413      	add	r3, r2
 8049ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049de0:	681b      	ldr	r3, [r3, #0]
 8049de2:	0fdb      	lsrs	r3, r3, #31
 8049de4:	f003 0301 	and.w	r3, r3, #1
 8049de8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8049dea:	687b      	ldr	r3, [r7, #4]
 8049dec:	689b      	ldr	r3, [r3, #8]
 8049dee:	f003 0320 	and.w	r3, r3, #32
 8049df2:	2b20      	cmp	r3, #32
 8049df4:	d104      	bne.n	8049e00 <USB_HC_Halt+0x5a>
 8049df6:	693b      	ldr	r3, [r7, #16]
 8049df8:	2b00      	cmp	r3, #0
 8049dfa:	d101      	bne.n	8049e00 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8049dfc:	2300      	movs	r3, #0
 8049dfe:	e0c8      	b.n	8049f92 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8049e00:	697b      	ldr	r3, [r7, #20]
 8049e02:	2b00      	cmp	r3, #0
 8049e04:	d002      	beq.n	8049e0c <USB_HC_Halt+0x66>
 8049e06:	697b      	ldr	r3, [r7, #20]
 8049e08:	2b02      	cmp	r3, #2
 8049e0a:	d163      	bne.n	8049ed4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049e0c:	69bb      	ldr	r3, [r7, #24]
 8049e0e:	015a      	lsls	r2, r3, #5
 8049e10:	69fb      	ldr	r3, [r7, #28]
 8049e12:	4413      	add	r3, r2
 8049e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e18:	681b      	ldr	r3, [r3, #0]
 8049e1a:	69ba      	ldr	r2, [r7, #24]
 8049e1c:	0151      	lsls	r1, r2, #5
 8049e1e:	69fa      	ldr	r2, [r7, #28]
 8049e20:	440a      	add	r2, r1
 8049e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049e2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049e2c:	687b      	ldr	r3, [r7, #4]
 8049e2e:	689b      	ldr	r3, [r3, #8]
 8049e30:	f003 0320 	and.w	r3, r3, #32
 8049e34:	2b00      	cmp	r3, #0
 8049e36:	f040 80ab 	bne.w	8049f90 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8049e3a:	687b      	ldr	r3, [r7, #4]
 8049e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049e3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8049e42:	2b00      	cmp	r3, #0
 8049e44:	d133      	bne.n	8049eae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8049e46:	69bb      	ldr	r3, [r7, #24]
 8049e48:	015a      	lsls	r2, r3, #5
 8049e4a:	69fb      	ldr	r3, [r7, #28]
 8049e4c:	4413      	add	r3, r2
 8049e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e52:	681b      	ldr	r3, [r3, #0]
 8049e54:	69ba      	ldr	r2, [r7, #24]
 8049e56:	0151      	lsls	r1, r2, #5
 8049e58:	69fa      	ldr	r2, [r7, #28]
 8049e5a:	440a      	add	r2, r1
 8049e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049e64:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049e66:	69bb      	ldr	r3, [r7, #24]
 8049e68:	015a      	lsls	r2, r3, #5
 8049e6a:	69fb      	ldr	r3, [r7, #28]
 8049e6c:	4413      	add	r3, r2
 8049e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049e72:	681b      	ldr	r3, [r3, #0]
 8049e74:	69ba      	ldr	r2, [r7, #24]
 8049e76:	0151      	lsls	r1, r2, #5
 8049e78:	69fa      	ldr	r2, [r7, #28]
 8049e7a:	440a      	add	r2, r1
 8049e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049e84:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8049e86:	68fb      	ldr	r3, [r7, #12]
 8049e88:	3301      	adds	r3, #1
 8049e8a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8049e8c:	68fb      	ldr	r3, [r7, #12]
 8049e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049e92:	d81d      	bhi.n	8049ed0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049e94:	69bb      	ldr	r3, [r7, #24]
 8049e96:	015a      	lsls	r2, r3, #5
 8049e98:	69fb      	ldr	r3, [r7, #28]
 8049e9a:	4413      	add	r3, r2
 8049e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ea0:	681b      	ldr	r3, [r3, #0]
 8049ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049eaa:	d0ec      	beq.n	8049e86 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049eac:	e070      	b.n	8049f90 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049eae:	69bb      	ldr	r3, [r7, #24]
 8049eb0:	015a      	lsls	r2, r3, #5
 8049eb2:	69fb      	ldr	r3, [r7, #28]
 8049eb4:	4413      	add	r3, r2
 8049eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049eba:	681b      	ldr	r3, [r3, #0]
 8049ebc:	69ba      	ldr	r2, [r7, #24]
 8049ebe:	0151      	lsls	r1, r2, #5
 8049ec0:	69fa      	ldr	r2, [r7, #28]
 8049ec2:	440a      	add	r2, r1
 8049ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049ecc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049ece:	e05f      	b.n	8049f90 <USB_HC_Halt+0x1ea>
            break;
 8049ed0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8049ed2:	e05d      	b.n	8049f90 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8049ed4:	69bb      	ldr	r3, [r7, #24]
 8049ed6:	015a      	lsls	r2, r3, #5
 8049ed8:	69fb      	ldr	r3, [r7, #28]
 8049eda:	4413      	add	r3, r2
 8049edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ee0:	681b      	ldr	r3, [r3, #0]
 8049ee2:	69ba      	ldr	r2, [r7, #24]
 8049ee4:	0151      	lsls	r1, r2, #5
 8049ee6:	69fa      	ldr	r2, [r7, #28]
 8049ee8:	440a      	add	r2, r1
 8049eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049ef2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8049ef4:	69fb      	ldr	r3, [r7, #28]
 8049ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049efa:	691b      	ldr	r3, [r3, #16]
 8049efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8049f00:	2b00      	cmp	r3, #0
 8049f02:	d133      	bne.n	8049f6c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8049f04:	69bb      	ldr	r3, [r7, #24]
 8049f06:	015a      	lsls	r2, r3, #5
 8049f08:	69fb      	ldr	r3, [r7, #28]
 8049f0a:	4413      	add	r3, r2
 8049f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f10:	681b      	ldr	r3, [r3, #0]
 8049f12:	69ba      	ldr	r2, [r7, #24]
 8049f14:	0151      	lsls	r1, r2, #5
 8049f16:	69fa      	ldr	r2, [r7, #28]
 8049f18:	440a      	add	r2, r1
 8049f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8049f22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049f24:	69bb      	ldr	r3, [r7, #24]
 8049f26:	015a      	lsls	r2, r3, #5
 8049f28:	69fb      	ldr	r3, [r7, #28]
 8049f2a:	4413      	add	r3, r2
 8049f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f30:	681b      	ldr	r3, [r3, #0]
 8049f32:	69ba      	ldr	r2, [r7, #24]
 8049f34:	0151      	lsls	r1, r2, #5
 8049f36:	69fa      	ldr	r2, [r7, #28]
 8049f38:	440a      	add	r2, r1
 8049f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049f42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8049f44:	68fb      	ldr	r3, [r7, #12]
 8049f46:	3301      	adds	r3, #1
 8049f48:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8049f4a:	68fb      	ldr	r3, [r7, #12]
 8049f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8049f50:	d81d      	bhi.n	8049f8e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8049f52:	69bb      	ldr	r3, [r7, #24]
 8049f54:	015a      	lsls	r2, r3, #5
 8049f56:	69fb      	ldr	r3, [r7, #28]
 8049f58:	4413      	add	r3, r2
 8049f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f5e:	681b      	ldr	r3, [r3, #0]
 8049f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8049f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8049f68:	d0ec      	beq.n	8049f44 <USB_HC_Halt+0x19e>
 8049f6a:	e011      	b.n	8049f90 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8049f6c:	69bb      	ldr	r3, [r7, #24]
 8049f6e:	015a      	lsls	r2, r3, #5
 8049f70:	69fb      	ldr	r3, [r7, #28]
 8049f72:	4413      	add	r3, r2
 8049f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f78:	681b      	ldr	r3, [r3, #0]
 8049f7a:	69ba      	ldr	r2, [r7, #24]
 8049f7c:	0151      	lsls	r1, r2, #5
 8049f7e:	69fa      	ldr	r2, [r7, #28]
 8049f80:	440a      	add	r2, r1
 8049f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049f8a:	6013      	str	r3, [r2, #0]
 8049f8c:	e000      	b.n	8049f90 <USB_HC_Halt+0x1ea>
          break;
 8049f8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8049f90:	2300      	movs	r3, #0
}
 8049f92:	4618      	mov	r0, r3
 8049f94:	3724      	adds	r7, #36	; 0x24
 8049f96:	46bd      	mov	sp, r7
 8049f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f9c:	4770      	bx	lr
	...

08049fa0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8049fa0:	b480      	push	{r7}
 8049fa2:	b087      	sub	sp, #28
 8049fa4:	af00      	add	r7, sp, #0
 8049fa6:	6078      	str	r0, [r7, #4]
 8049fa8:	460b      	mov	r3, r1
 8049faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049fac:	687b      	ldr	r3, [r7, #4]
 8049fae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8049fb0:	78fb      	ldrb	r3, [r7, #3]
 8049fb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8049fb4:	2301      	movs	r3, #1
 8049fb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8049fb8:	68fb      	ldr	r3, [r7, #12]
 8049fba:	04da      	lsls	r2, r3, #19
 8049fbc:	4b15      	ldr	r3, [pc, #84]	; (804a014 <USB_DoPing+0x74>)
 8049fbe:	4013      	ands	r3, r2
 8049fc0:	693a      	ldr	r2, [r7, #16]
 8049fc2:	0151      	lsls	r1, r2, #5
 8049fc4:	697a      	ldr	r2, [r7, #20]
 8049fc6:	440a      	add	r2, r1
 8049fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049fd0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8049fd2:	693b      	ldr	r3, [r7, #16]
 8049fd4:	015a      	lsls	r2, r3, #5
 8049fd6:	697b      	ldr	r3, [r7, #20]
 8049fd8:	4413      	add	r3, r2
 8049fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049fde:	681b      	ldr	r3, [r3, #0]
 8049fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8049fe2:	68bb      	ldr	r3, [r7, #8]
 8049fe4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049fe8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8049fea:	68bb      	ldr	r3, [r7, #8]
 8049fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8049ff0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8049ff2:	693b      	ldr	r3, [r7, #16]
 8049ff4:	015a      	lsls	r2, r3, #5
 8049ff6:	697b      	ldr	r3, [r7, #20]
 8049ff8:	4413      	add	r3, r2
 8049ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ffe:	461a      	mov	r2, r3
 804a000:	68bb      	ldr	r3, [r7, #8]
 804a002:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804a004:	2300      	movs	r3, #0
}
 804a006:	4618      	mov	r0, r3
 804a008:	371c      	adds	r7, #28
 804a00a:	46bd      	mov	sp, r7
 804a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a010:	4770      	bx	lr
 804a012:	bf00      	nop
 804a014:	1ff80000 	.word	0x1ff80000

0804a018 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804a018:	b580      	push	{r7, lr}
 804a01a:	b088      	sub	sp, #32
 804a01c:	af00      	add	r7, sp, #0
 804a01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 804a020:	2300      	movs	r3, #0
 804a022:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a024:	687b      	ldr	r3, [r7, #4]
 804a026:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804a028:	2300      	movs	r3, #0
 804a02a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804a02c:	6878      	ldr	r0, [r7, #4]
 804a02e:	f7ff f911 	bl	8049254 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804a032:	2110      	movs	r1, #16
 804a034:	6878      	ldr	r0, [r7, #4]
 804a036:	f7ff f96b 	bl	8049310 <USB_FlushTxFifo>
 804a03a:	4603      	mov	r3, r0
 804a03c:	2b00      	cmp	r3, #0
 804a03e:	d001      	beq.n	804a044 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 804a040:	2301      	movs	r3, #1
 804a042:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804a044:	6878      	ldr	r0, [r7, #4]
 804a046:	f7ff f997 	bl	8049378 <USB_FlushRxFifo>
 804a04a:	4603      	mov	r3, r0
 804a04c:	2b00      	cmp	r3, #0
 804a04e:	d001      	beq.n	804a054 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 804a050:	2301      	movs	r3, #1
 804a052:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 804a054:	2300      	movs	r3, #0
 804a056:	61bb      	str	r3, [r7, #24]
 804a058:	e01f      	b.n	804a09a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804a05a:	69bb      	ldr	r3, [r7, #24]
 804a05c:	015a      	lsls	r2, r3, #5
 804a05e:	697b      	ldr	r3, [r7, #20]
 804a060:	4413      	add	r3, r2
 804a062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a066:	681b      	ldr	r3, [r3, #0]
 804a068:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804a06a:	693b      	ldr	r3, [r7, #16]
 804a06c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a070:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 804a072:	693b      	ldr	r3, [r7, #16]
 804a074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a07a:	693b      	ldr	r3, [r7, #16]
 804a07c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a080:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a082:	69bb      	ldr	r3, [r7, #24]
 804a084:	015a      	lsls	r2, r3, #5
 804a086:	697b      	ldr	r3, [r7, #20]
 804a088:	4413      	add	r3, r2
 804a08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a08e:	461a      	mov	r2, r3
 804a090:	693b      	ldr	r3, [r7, #16]
 804a092:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804a094:	69bb      	ldr	r3, [r7, #24]
 804a096:	3301      	adds	r3, #1
 804a098:	61bb      	str	r3, [r7, #24]
 804a09a:	69bb      	ldr	r3, [r7, #24]
 804a09c:	2b0f      	cmp	r3, #15
 804a09e:	d9dc      	bls.n	804a05a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804a0a0:	2300      	movs	r3, #0
 804a0a2:	61bb      	str	r3, [r7, #24]
 804a0a4:	e034      	b.n	804a110 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804a0a6:	69bb      	ldr	r3, [r7, #24]
 804a0a8:	015a      	lsls	r2, r3, #5
 804a0aa:	697b      	ldr	r3, [r7, #20]
 804a0ac:	4413      	add	r3, r2
 804a0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0b2:	681b      	ldr	r3, [r3, #0]
 804a0b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804a0b6:	693b      	ldr	r3, [r7, #16]
 804a0b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a0bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804a0be:	693b      	ldr	r3, [r7, #16]
 804a0c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a0c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a0c6:	693b      	ldr	r3, [r7, #16]
 804a0c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a0cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a0ce:	69bb      	ldr	r3, [r7, #24]
 804a0d0:	015a      	lsls	r2, r3, #5
 804a0d2:	697b      	ldr	r3, [r7, #20]
 804a0d4:	4413      	add	r3, r2
 804a0d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0da:	461a      	mov	r2, r3
 804a0dc:	693b      	ldr	r3, [r7, #16]
 804a0de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804a0e0:	68fb      	ldr	r3, [r7, #12]
 804a0e2:	3301      	adds	r3, #1
 804a0e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804a0e6:	68fb      	ldr	r3, [r7, #12]
 804a0e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a0ec:	d80c      	bhi.n	804a108 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a0ee:	69bb      	ldr	r3, [r7, #24]
 804a0f0:	015a      	lsls	r2, r3, #5
 804a0f2:	697b      	ldr	r3, [r7, #20]
 804a0f4:	4413      	add	r3, r2
 804a0f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0fa:	681b      	ldr	r3, [r3, #0]
 804a0fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a104:	d0ec      	beq.n	804a0e0 <USB_StopHost+0xc8>
 804a106:	e000      	b.n	804a10a <USB_StopHost+0xf2>
        break;
 804a108:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804a10a:	69bb      	ldr	r3, [r7, #24]
 804a10c:	3301      	adds	r3, #1
 804a10e:	61bb      	str	r3, [r7, #24]
 804a110:	69bb      	ldr	r3, [r7, #24]
 804a112:	2b0f      	cmp	r3, #15
 804a114:	d9c7      	bls.n	804a0a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804a116:	697b      	ldr	r3, [r7, #20]
 804a118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a11c:	461a      	mov	r2, r3
 804a11e:	f04f 33ff 	mov.w	r3, #4294967295
 804a122:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804a124:	687b      	ldr	r3, [r7, #4]
 804a126:	f04f 32ff 	mov.w	r2, #4294967295
 804a12a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804a12c:	6878      	ldr	r0, [r7, #4]
 804a12e:	f7ff f880 	bl	8049232 <USB_EnableGlobalInt>

  return ret;
 804a132:	7ffb      	ldrb	r3, [r7, #31]
}
 804a134:	4618      	mov	r0, r3
 804a136:	3720      	adds	r7, #32
 804a138:	46bd      	mov	sp, r7
 804a13a:	bd80      	pop	{r7, pc}

0804a13c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804a13c:	b590      	push	{r4, r7, lr}
 804a13e:	b089      	sub	sp, #36	; 0x24
 804a140:	af04      	add	r7, sp, #16
 804a142:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 804a144:	2301      	movs	r3, #1
 804a146:	2202      	movs	r2, #2
 804a148:	2102      	movs	r1, #2
 804a14a:	6878      	ldr	r0, [r7, #4]
 804a14c:	f000 fc66 	bl	804aa1c <USBH_FindInterface>
 804a150:	4603      	mov	r3, r0
 804a152:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a154:	7bfb      	ldrb	r3, [r7, #15]
 804a156:	2bff      	cmp	r3, #255	; 0xff
 804a158:	d002      	beq.n	804a160 <USBH_CDC_InterfaceInit+0x24>
 804a15a:	7bfb      	ldrb	r3, [r7, #15]
 804a15c:	2b01      	cmp	r3, #1
 804a15e:	d901      	bls.n	804a164 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a160:	2302      	movs	r3, #2
 804a162:	e13d      	b.n	804a3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 804a164:	7bfb      	ldrb	r3, [r7, #15]
 804a166:	4619      	mov	r1, r3
 804a168:	6878      	ldr	r0, [r7, #4]
 804a16a:	f000 fc3b 	bl	804a9e4 <USBH_SelectInterface>
 804a16e:	4603      	mov	r3, r0
 804a170:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804a172:	7bbb      	ldrb	r3, [r7, #14]
 804a174:	2b00      	cmp	r3, #0
 804a176:	d001      	beq.n	804a17c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 804a178:	2302      	movs	r3, #2
 804a17a:	e131      	b.n	804a3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 804a17c:	687b      	ldr	r3, [r7, #4]
 804a17e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804a182:	2050      	movs	r0, #80	; 0x50
 804a184:	f002 fb00 	bl	804c788 <malloc>
 804a188:	4603      	mov	r3, r0
 804a18a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a18c:	687b      	ldr	r3, [r7, #4]
 804a18e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a192:	69db      	ldr	r3, [r3, #28]
 804a194:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 804a196:	68bb      	ldr	r3, [r7, #8]
 804a198:	2b00      	cmp	r3, #0
 804a19a:	d101      	bne.n	804a1a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 804a19c:	2302      	movs	r3, #2
 804a19e:	e11f      	b.n	804a3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804a1a0:	2250      	movs	r2, #80	; 0x50
 804a1a2:	2100      	movs	r1, #0
 804a1a4:	68b8      	ldr	r0, [r7, #8]
 804a1a6:	f002 faff 	bl	804c7a8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a1aa:	7bfb      	ldrb	r3, [r7, #15]
 804a1ac:	687a      	ldr	r2, [r7, #4]
 804a1ae:	211a      	movs	r1, #26
 804a1b0:	fb01 f303 	mul.w	r3, r1, r3
 804a1b4:	4413      	add	r3, r2
 804a1b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a1ba:	781b      	ldrb	r3, [r3, #0]
 804a1bc:	b25b      	sxtb	r3, r3
 804a1be:	2b00      	cmp	r3, #0
 804a1c0:	da15      	bge.n	804a1ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a1c2:	7bfb      	ldrb	r3, [r7, #15]
 804a1c4:	687a      	ldr	r2, [r7, #4]
 804a1c6:	211a      	movs	r1, #26
 804a1c8:	fb01 f303 	mul.w	r3, r1, r3
 804a1cc:	4413      	add	r3, r2
 804a1ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a1d2:	781a      	ldrb	r2, [r3, #0]
 804a1d4:	68bb      	ldr	r3, [r7, #8]
 804a1d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a1d8:	7bfb      	ldrb	r3, [r7, #15]
 804a1da:	687a      	ldr	r2, [r7, #4]
 804a1dc:	211a      	movs	r1, #26
 804a1de:	fb01 f303 	mul.w	r3, r1, r3
 804a1e2:	4413      	add	r3, r2
 804a1e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a1e8:	881a      	ldrh	r2, [r3, #0]
 804a1ea:	68bb      	ldr	r3, [r7, #8]
 804a1ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804a1ee:	68bb      	ldr	r3, [r7, #8]
 804a1f0:	785b      	ldrb	r3, [r3, #1]
 804a1f2:	4619      	mov	r1, r3
 804a1f4:	6878      	ldr	r0, [r7, #4]
 804a1f6:	f001 ff2c 	bl	804c052 <USBH_AllocPipe>
 804a1fa:	4603      	mov	r3, r0
 804a1fc:	461a      	mov	r2, r3
 804a1fe:	68bb      	ldr	r3, [r7, #8]
 804a200:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804a202:	68bb      	ldr	r3, [r7, #8]
 804a204:	7819      	ldrb	r1, [r3, #0]
 804a206:	68bb      	ldr	r3, [r7, #8]
 804a208:	7858      	ldrb	r0, [r3, #1]
 804a20a:	687b      	ldr	r3, [r7, #4]
 804a20c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a210:	687b      	ldr	r3, [r7, #4]
 804a212:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a216:	68ba      	ldr	r2, [r7, #8]
 804a218:	8952      	ldrh	r2, [r2, #10]
 804a21a:	9202      	str	r2, [sp, #8]
 804a21c:	2203      	movs	r2, #3
 804a21e:	9201      	str	r2, [sp, #4]
 804a220:	9300      	str	r3, [sp, #0]
 804a222:	4623      	mov	r3, r4
 804a224:	4602      	mov	r2, r0
 804a226:	6878      	ldr	r0, [r7, #4]
 804a228:	f001 fee4 	bl	804bff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 804a22c:	68bb      	ldr	r3, [r7, #8]
 804a22e:	781b      	ldrb	r3, [r3, #0]
 804a230:	2200      	movs	r2, #0
 804a232:	4619      	mov	r1, r3
 804a234:	6878      	ldr	r0, [r7, #4]
 804a236:	f002 f9f9 	bl	804c62c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 804a23a:	2300      	movs	r3, #0
 804a23c:	2200      	movs	r2, #0
 804a23e:	210a      	movs	r1, #10
 804a240:	6878      	ldr	r0, [r7, #4]
 804a242:	f000 fbeb 	bl	804aa1c <USBH_FindInterface>
 804a246:	4603      	mov	r3, r0
 804a248:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a24a:	7bfb      	ldrb	r3, [r7, #15]
 804a24c:	2bff      	cmp	r3, #255	; 0xff
 804a24e:	d002      	beq.n	804a256 <USBH_CDC_InterfaceInit+0x11a>
 804a250:	7bfb      	ldrb	r3, [r7, #15]
 804a252:	2b01      	cmp	r3, #1
 804a254:	d901      	bls.n	804a25a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a256:	2302      	movs	r3, #2
 804a258:	e0c2      	b.n	804a3e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a25a:	7bfb      	ldrb	r3, [r7, #15]
 804a25c:	687a      	ldr	r2, [r7, #4]
 804a25e:	211a      	movs	r1, #26
 804a260:	fb01 f303 	mul.w	r3, r1, r3
 804a264:	4413      	add	r3, r2
 804a266:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a26a:	781b      	ldrb	r3, [r3, #0]
 804a26c:	b25b      	sxtb	r3, r3
 804a26e:	2b00      	cmp	r3, #0
 804a270:	da16      	bge.n	804a2a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a272:	7bfb      	ldrb	r3, [r7, #15]
 804a274:	687a      	ldr	r2, [r7, #4]
 804a276:	211a      	movs	r1, #26
 804a278:	fb01 f303 	mul.w	r3, r1, r3
 804a27c:	4413      	add	r3, r2
 804a27e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a282:	781a      	ldrb	r2, [r3, #0]
 804a284:	68bb      	ldr	r3, [r7, #8]
 804a286:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a288:	7bfb      	ldrb	r3, [r7, #15]
 804a28a:	687a      	ldr	r2, [r7, #4]
 804a28c:	211a      	movs	r1, #26
 804a28e:	fb01 f303 	mul.w	r3, r1, r3
 804a292:	4413      	add	r3, r2
 804a294:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a298:	881a      	ldrh	r2, [r3, #0]
 804a29a:	68bb      	ldr	r3, [r7, #8]
 804a29c:	835a      	strh	r2, [r3, #26]
 804a29e:	e015      	b.n	804a2cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a2a0:	7bfb      	ldrb	r3, [r7, #15]
 804a2a2:	687a      	ldr	r2, [r7, #4]
 804a2a4:	211a      	movs	r1, #26
 804a2a6:	fb01 f303 	mul.w	r3, r1, r3
 804a2aa:	4413      	add	r3, r2
 804a2ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a2b0:	781a      	ldrb	r2, [r3, #0]
 804a2b2:	68bb      	ldr	r3, [r7, #8]
 804a2b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a2b6:	7bfb      	ldrb	r3, [r7, #15]
 804a2b8:	687a      	ldr	r2, [r7, #4]
 804a2ba:	211a      	movs	r1, #26
 804a2bc:	fb01 f303 	mul.w	r3, r1, r3
 804a2c0:	4413      	add	r3, r2
 804a2c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a2c6:	881a      	ldrh	r2, [r3, #0]
 804a2c8:	68bb      	ldr	r3, [r7, #8]
 804a2ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804a2cc:	7bfb      	ldrb	r3, [r7, #15]
 804a2ce:	687a      	ldr	r2, [r7, #4]
 804a2d0:	211a      	movs	r1, #26
 804a2d2:	fb01 f303 	mul.w	r3, r1, r3
 804a2d6:	4413      	add	r3, r2
 804a2d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a2dc:	781b      	ldrb	r3, [r3, #0]
 804a2de:	b25b      	sxtb	r3, r3
 804a2e0:	2b00      	cmp	r3, #0
 804a2e2:	da16      	bge.n	804a312 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a2e4:	7bfb      	ldrb	r3, [r7, #15]
 804a2e6:	687a      	ldr	r2, [r7, #4]
 804a2e8:	211a      	movs	r1, #26
 804a2ea:	fb01 f303 	mul.w	r3, r1, r3
 804a2ee:	4413      	add	r3, r2
 804a2f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a2f4:	781a      	ldrb	r2, [r3, #0]
 804a2f6:	68bb      	ldr	r3, [r7, #8]
 804a2f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a2fa:	7bfb      	ldrb	r3, [r7, #15]
 804a2fc:	687a      	ldr	r2, [r7, #4]
 804a2fe:	211a      	movs	r1, #26
 804a300:	fb01 f303 	mul.w	r3, r1, r3
 804a304:	4413      	add	r3, r2
 804a306:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a30a:	881a      	ldrh	r2, [r3, #0]
 804a30c:	68bb      	ldr	r3, [r7, #8]
 804a30e:	835a      	strh	r2, [r3, #26]
 804a310:	e015      	b.n	804a33e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a312:	7bfb      	ldrb	r3, [r7, #15]
 804a314:	687a      	ldr	r2, [r7, #4]
 804a316:	211a      	movs	r1, #26
 804a318:	fb01 f303 	mul.w	r3, r1, r3
 804a31c:	4413      	add	r3, r2
 804a31e:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a322:	781a      	ldrb	r2, [r3, #0]
 804a324:	68bb      	ldr	r3, [r7, #8]
 804a326:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a328:	7bfb      	ldrb	r3, [r7, #15]
 804a32a:	687a      	ldr	r2, [r7, #4]
 804a32c:	211a      	movs	r1, #26
 804a32e:	fb01 f303 	mul.w	r3, r1, r3
 804a332:	4413      	add	r3, r2
 804a334:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a338:	881a      	ldrh	r2, [r3, #0]
 804a33a:	68bb      	ldr	r3, [r7, #8]
 804a33c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 804a33e:	68bb      	ldr	r3, [r7, #8]
 804a340:	7b9b      	ldrb	r3, [r3, #14]
 804a342:	4619      	mov	r1, r3
 804a344:	6878      	ldr	r0, [r7, #4]
 804a346:	f001 fe84 	bl	804c052 <USBH_AllocPipe>
 804a34a:	4603      	mov	r3, r0
 804a34c:	461a      	mov	r2, r3
 804a34e:	68bb      	ldr	r3, [r7, #8]
 804a350:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 804a352:	68bb      	ldr	r3, [r7, #8]
 804a354:	7bdb      	ldrb	r3, [r3, #15]
 804a356:	4619      	mov	r1, r3
 804a358:	6878      	ldr	r0, [r7, #4]
 804a35a:	f001 fe7a 	bl	804c052 <USBH_AllocPipe>
 804a35e:	4603      	mov	r3, r0
 804a360:	461a      	mov	r2, r3
 804a362:	68bb      	ldr	r3, [r7, #8]
 804a364:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 804a366:	68bb      	ldr	r3, [r7, #8]
 804a368:	7b59      	ldrb	r1, [r3, #13]
 804a36a:	68bb      	ldr	r3, [r7, #8]
 804a36c:	7b98      	ldrb	r0, [r3, #14]
 804a36e:	687b      	ldr	r3, [r7, #4]
 804a370:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a374:	687b      	ldr	r3, [r7, #4]
 804a376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a37a:	68ba      	ldr	r2, [r7, #8]
 804a37c:	8b12      	ldrh	r2, [r2, #24]
 804a37e:	9202      	str	r2, [sp, #8]
 804a380:	2202      	movs	r2, #2
 804a382:	9201      	str	r2, [sp, #4]
 804a384:	9300      	str	r3, [sp, #0]
 804a386:	4623      	mov	r3, r4
 804a388:	4602      	mov	r2, r0
 804a38a:	6878      	ldr	r0, [r7, #4]
 804a38c:	f001 fe32 	bl	804bff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804a390:	68bb      	ldr	r3, [r7, #8]
 804a392:	7b19      	ldrb	r1, [r3, #12]
 804a394:	68bb      	ldr	r3, [r7, #8]
 804a396:	7bd8      	ldrb	r0, [r3, #15]
 804a398:	687b      	ldr	r3, [r7, #4]
 804a39a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a39e:	687b      	ldr	r3, [r7, #4]
 804a3a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a3a4:	68ba      	ldr	r2, [r7, #8]
 804a3a6:	8b52      	ldrh	r2, [r2, #26]
 804a3a8:	9202      	str	r2, [sp, #8]
 804a3aa:	2202      	movs	r2, #2
 804a3ac:	9201      	str	r2, [sp, #4]
 804a3ae:	9300      	str	r3, [sp, #0]
 804a3b0:	4623      	mov	r3, r4
 804a3b2:	4602      	mov	r2, r0
 804a3b4:	6878      	ldr	r0, [r7, #4]
 804a3b6:	f001 fe1d 	bl	804bff4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 804a3ba:	68bb      	ldr	r3, [r7, #8]
 804a3bc:	2200      	movs	r2, #0
 804a3be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804a3c2:	68bb      	ldr	r3, [r7, #8]
 804a3c4:	7b5b      	ldrb	r3, [r3, #13]
 804a3c6:	2200      	movs	r2, #0
 804a3c8:	4619      	mov	r1, r3
 804a3ca:	6878      	ldr	r0, [r7, #4]
 804a3cc:	f002 f92e 	bl	804c62c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804a3d0:	68bb      	ldr	r3, [r7, #8]
 804a3d2:	7b1b      	ldrb	r3, [r3, #12]
 804a3d4:	2200      	movs	r2, #0
 804a3d6:	4619      	mov	r1, r3
 804a3d8:	6878      	ldr	r0, [r7, #4]
 804a3da:	f002 f927 	bl	804c62c <USBH_LL_SetToggle>

  return USBH_OK;
 804a3de:	2300      	movs	r3, #0
}
 804a3e0:	4618      	mov	r0, r3
 804a3e2:	3714      	adds	r7, #20
 804a3e4:	46bd      	mov	sp, r7
 804a3e6:	bd90      	pop	{r4, r7, pc}

0804a3e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804a3e8:	b580      	push	{r7, lr}
 804a3ea:	b084      	sub	sp, #16
 804a3ec:	af00      	add	r7, sp, #0
 804a3ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a3f0:	687b      	ldr	r3, [r7, #4]
 804a3f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a3f6:	69db      	ldr	r3, [r3, #28]
 804a3f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 804a3fa:	68fb      	ldr	r3, [r7, #12]
 804a3fc:	781b      	ldrb	r3, [r3, #0]
 804a3fe:	2b00      	cmp	r3, #0
 804a400:	d00e      	beq.n	804a420 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804a402:	68fb      	ldr	r3, [r7, #12]
 804a404:	781b      	ldrb	r3, [r3, #0]
 804a406:	4619      	mov	r1, r3
 804a408:	6878      	ldr	r0, [r7, #4]
 804a40a:	f001 fe12 	bl	804c032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804a40e:	68fb      	ldr	r3, [r7, #12]
 804a410:	781b      	ldrb	r3, [r3, #0]
 804a412:	4619      	mov	r1, r3
 804a414:	6878      	ldr	r0, [r7, #4]
 804a416:	f001 fe3d 	bl	804c094 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 804a41a:	68fb      	ldr	r3, [r7, #12]
 804a41c:	2200      	movs	r2, #0
 804a41e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 804a420:	68fb      	ldr	r3, [r7, #12]
 804a422:	7b1b      	ldrb	r3, [r3, #12]
 804a424:	2b00      	cmp	r3, #0
 804a426:	d00e      	beq.n	804a446 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 804a428:	68fb      	ldr	r3, [r7, #12]
 804a42a:	7b1b      	ldrb	r3, [r3, #12]
 804a42c:	4619      	mov	r1, r3
 804a42e:	6878      	ldr	r0, [r7, #4]
 804a430:	f001 fdff 	bl	804c032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 804a434:	68fb      	ldr	r3, [r7, #12]
 804a436:	7b1b      	ldrb	r3, [r3, #12]
 804a438:	4619      	mov	r1, r3
 804a43a:	6878      	ldr	r0, [r7, #4]
 804a43c:	f001 fe2a 	bl	804c094 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 804a440:	68fb      	ldr	r3, [r7, #12]
 804a442:	2200      	movs	r2, #0
 804a444:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 804a446:	68fb      	ldr	r3, [r7, #12]
 804a448:	7b5b      	ldrb	r3, [r3, #13]
 804a44a:	2b00      	cmp	r3, #0
 804a44c:	d00e      	beq.n	804a46c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 804a44e:	68fb      	ldr	r3, [r7, #12]
 804a450:	7b5b      	ldrb	r3, [r3, #13]
 804a452:	4619      	mov	r1, r3
 804a454:	6878      	ldr	r0, [r7, #4]
 804a456:	f001 fdec 	bl	804c032 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 804a45a:	68fb      	ldr	r3, [r7, #12]
 804a45c:	7b5b      	ldrb	r3, [r3, #13]
 804a45e:	4619      	mov	r1, r3
 804a460:	6878      	ldr	r0, [r7, #4]
 804a462:	f001 fe17 	bl	804c094 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 804a466:	68fb      	ldr	r3, [r7, #12]
 804a468:	2200      	movs	r2, #0
 804a46a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804a46c:	687b      	ldr	r3, [r7, #4]
 804a46e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a472:	69db      	ldr	r3, [r3, #28]
 804a474:	2b00      	cmp	r3, #0
 804a476:	d00b      	beq.n	804a490 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 804a478:	687b      	ldr	r3, [r7, #4]
 804a47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a47e:	69db      	ldr	r3, [r3, #28]
 804a480:	4618      	mov	r0, r3
 804a482:	f002 f989 	bl	804c798 <free>
    phost->pActiveClass->pData = 0U;
 804a486:	687b      	ldr	r3, [r7, #4]
 804a488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a48c:	2200      	movs	r2, #0
 804a48e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804a490:	2300      	movs	r3, #0
}
 804a492:	4618      	mov	r0, r3
 804a494:	3710      	adds	r7, #16
 804a496:	46bd      	mov	sp, r7
 804a498:	bd80      	pop	{r7, pc}

0804a49a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804a49a:	b580      	push	{r7, lr}
 804a49c:	b084      	sub	sp, #16
 804a49e:	af00      	add	r7, sp, #0
 804a4a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a4a2:	687b      	ldr	r3, [r7, #4]
 804a4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a4a8:	69db      	ldr	r3, [r3, #28]
 804a4aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804a4ac:	68fb      	ldr	r3, [r7, #12]
 804a4ae:	3340      	adds	r3, #64	; 0x40
 804a4b0:	4619      	mov	r1, r3
 804a4b2:	6878      	ldr	r0, [r7, #4]
 804a4b4:	f000 f8b1 	bl	804a61a <GetLineCoding>
 804a4b8:	4603      	mov	r3, r0
 804a4ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804a4bc:	7afb      	ldrb	r3, [r7, #11]
 804a4be:	2b00      	cmp	r3, #0
 804a4c0:	d105      	bne.n	804a4ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804a4c2:	687b      	ldr	r3, [r7, #4]
 804a4c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804a4c8:	2102      	movs	r1, #2
 804a4ca:	6878      	ldr	r0, [r7, #4]
 804a4cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804a4ce:	7afb      	ldrb	r3, [r7, #11]
}
 804a4d0:	4618      	mov	r0, r3
 804a4d2:	3710      	adds	r7, #16
 804a4d4:	46bd      	mov	sp, r7
 804a4d6:	bd80      	pop	{r7, pc}

0804a4d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804a4d8:	b580      	push	{r7, lr}
 804a4da:	b084      	sub	sp, #16
 804a4dc:	af00      	add	r7, sp, #0
 804a4de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804a4e0:	2301      	movs	r3, #1
 804a4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804a4e4:	2300      	movs	r3, #0
 804a4e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a4e8:	687b      	ldr	r3, [r7, #4]
 804a4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a4ee:	69db      	ldr	r3, [r3, #28]
 804a4f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804a4f2:	68bb      	ldr	r3, [r7, #8]
 804a4f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804a4f8:	2b04      	cmp	r3, #4
 804a4fa:	d877      	bhi.n	804a5ec <USBH_CDC_Process+0x114>
 804a4fc:	a201      	add	r2, pc, #4	; (adr r2, 804a504 <USBH_CDC_Process+0x2c>)
 804a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a502:	bf00      	nop
 804a504:	0804a519 	.word	0x0804a519
 804a508:	0804a51f 	.word	0x0804a51f
 804a50c:	0804a54f 	.word	0x0804a54f
 804a510:	0804a5c3 	.word	0x0804a5c3
 804a514:	0804a5d1 	.word	0x0804a5d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804a518:	2300      	movs	r3, #0
 804a51a:	73fb      	strb	r3, [r7, #15]
      break;
 804a51c:	e06d      	b.n	804a5fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804a51e:	68bb      	ldr	r3, [r7, #8]
 804a520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a522:	4619      	mov	r1, r3
 804a524:	6878      	ldr	r0, [r7, #4]
 804a526:	f000 f897 	bl	804a658 <SetLineCoding>
 804a52a:	4603      	mov	r3, r0
 804a52c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a52e:	7bbb      	ldrb	r3, [r7, #14]
 804a530:	2b00      	cmp	r3, #0
 804a532:	d104      	bne.n	804a53e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804a534:	68bb      	ldr	r3, [r7, #8]
 804a536:	2202      	movs	r2, #2
 804a538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a53c:	e058      	b.n	804a5f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804a53e:	7bbb      	ldrb	r3, [r7, #14]
 804a540:	2b01      	cmp	r3, #1
 804a542:	d055      	beq.n	804a5f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a544:	68bb      	ldr	r3, [r7, #8]
 804a546:	2204      	movs	r2, #4
 804a548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a54c:	e050      	b.n	804a5f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804a54e:	68bb      	ldr	r3, [r7, #8]
 804a550:	3340      	adds	r3, #64	; 0x40
 804a552:	4619      	mov	r1, r3
 804a554:	6878      	ldr	r0, [r7, #4]
 804a556:	f000 f860 	bl	804a61a <GetLineCoding>
 804a55a:	4603      	mov	r3, r0
 804a55c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a55e:	7bbb      	ldrb	r3, [r7, #14]
 804a560:	2b00      	cmp	r3, #0
 804a562:	d126      	bne.n	804a5b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804a564:	68bb      	ldr	r3, [r7, #8]
 804a566:	2200      	movs	r2, #0
 804a568:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a56c:	68bb      	ldr	r3, [r7, #8]
 804a56e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804a572:	68bb      	ldr	r3, [r7, #8]
 804a574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a576:	791b      	ldrb	r3, [r3, #4]
 804a578:	429a      	cmp	r2, r3
 804a57a:	d13b      	bne.n	804a5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a57c:	68bb      	ldr	r3, [r7, #8]
 804a57e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804a582:	68bb      	ldr	r3, [r7, #8]
 804a584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a586:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804a588:	429a      	cmp	r2, r3
 804a58a:	d133      	bne.n	804a5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a58c:	68bb      	ldr	r3, [r7, #8]
 804a58e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804a592:	68bb      	ldr	r3, [r7, #8]
 804a594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a596:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804a598:	429a      	cmp	r2, r3
 804a59a:	d12b      	bne.n	804a5f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804a59c:	68bb      	ldr	r3, [r7, #8]
 804a59e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804a5a0:	68bb      	ldr	r3, [r7, #8]
 804a5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804a5a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804a5a6:	429a      	cmp	r2, r3
 804a5a8:	d124      	bne.n	804a5f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804a5aa:	6878      	ldr	r0, [r7, #4]
 804a5ac:	f000 f958 	bl	804a860 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804a5b0:	e020      	b.n	804a5f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804a5b2:	7bbb      	ldrb	r3, [r7, #14]
 804a5b4:	2b01      	cmp	r3, #1
 804a5b6:	d01d      	beq.n	804a5f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804a5b8:	68bb      	ldr	r3, [r7, #8]
 804a5ba:	2204      	movs	r2, #4
 804a5bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804a5c0:	e018      	b.n	804a5f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804a5c2:	6878      	ldr	r0, [r7, #4]
 804a5c4:	f000 f867 	bl	804a696 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804a5c8:	6878      	ldr	r0, [r7, #4]
 804a5ca:	f000 f8da 	bl	804a782 <CDC_ProcessReception>
      break;
 804a5ce:	e014      	b.n	804a5fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804a5d0:	2100      	movs	r1, #0
 804a5d2:	6878      	ldr	r0, [r7, #4]
 804a5d4:	f000 ffef 	bl	804b5b6 <USBH_ClrFeature>
 804a5d8:	4603      	mov	r3, r0
 804a5da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804a5dc:	7bbb      	ldrb	r3, [r7, #14]
 804a5de:	2b00      	cmp	r3, #0
 804a5e0:	d10a      	bne.n	804a5f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804a5e2:	68bb      	ldr	r3, [r7, #8]
 804a5e4:	2200      	movs	r2, #0
 804a5e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804a5ea:	e005      	b.n	804a5f8 <USBH_CDC_Process+0x120>

    default:
      break;
 804a5ec:	bf00      	nop
 804a5ee:	e004      	b.n	804a5fa <USBH_CDC_Process+0x122>
      break;
 804a5f0:	bf00      	nop
 804a5f2:	e002      	b.n	804a5fa <USBH_CDC_Process+0x122>
      break;
 804a5f4:	bf00      	nop
 804a5f6:	e000      	b.n	804a5fa <USBH_CDC_Process+0x122>
      break;
 804a5f8:	bf00      	nop

  }

  return status;
 804a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 804a5fc:	4618      	mov	r0, r3
 804a5fe:	3710      	adds	r7, #16
 804a600:	46bd      	mov	sp, r7
 804a602:	bd80      	pop	{r7, pc}

0804a604 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804a604:	b480      	push	{r7}
 804a606:	b083      	sub	sp, #12
 804a608:	af00      	add	r7, sp, #0
 804a60a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804a60c:	2300      	movs	r3, #0
}
 804a60e:	4618      	mov	r0, r3
 804a610:	370c      	adds	r7, #12
 804a612:	46bd      	mov	sp, r7
 804a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a618:	4770      	bx	lr

0804a61a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804a61a:	b580      	push	{r7, lr}
 804a61c:	b082      	sub	sp, #8
 804a61e:	af00      	add	r7, sp, #0
 804a620:	6078      	str	r0, [r7, #4]
 804a622:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804a624:	687b      	ldr	r3, [r7, #4]
 804a626:	22a1      	movs	r2, #161	; 0xa1
 804a628:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804a62a:	687b      	ldr	r3, [r7, #4]
 804a62c:	2221      	movs	r2, #33	; 0x21
 804a62e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a630:	687b      	ldr	r3, [r7, #4]
 804a632:	2200      	movs	r2, #0
 804a634:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804a636:	687b      	ldr	r3, [r7, #4]
 804a638:	2200      	movs	r2, #0
 804a63a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a63c:	687b      	ldr	r3, [r7, #4]
 804a63e:	2207      	movs	r2, #7
 804a640:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a642:	683b      	ldr	r3, [r7, #0]
 804a644:	2207      	movs	r2, #7
 804a646:	4619      	mov	r1, r3
 804a648:	6878      	ldr	r0, [r7, #4]
 804a64a:	f001 fa81 	bl	804bb50 <USBH_CtlReq>
 804a64e:	4603      	mov	r3, r0
}
 804a650:	4618      	mov	r0, r3
 804a652:	3708      	adds	r7, #8
 804a654:	46bd      	mov	sp, r7
 804a656:	bd80      	pop	{r7, pc}

0804a658 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804a658:	b580      	push	{r7, lr}
 804a65a:	b082      	sub	sp, #8
 804a65c:	af00      	add	r7, sp, #0
 804a65e:	6078      	str	r0, [r7, #4]
 804a660:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804a662:	687b      	ldr	r3, [r7, #4]
 804a664:	2221      	movs	r2, #33	; 0x21
 804a666:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804a668:	687b      	ldr	r3, [r7, #4]
 804a66a:	2220      	movs	r2, #32
 804a66c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804a66e:	687b      	ldr	r3, [r7, #4]
 804a670:	2200      	movs	r2, #0
 804a672:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804a674:	687b      	ldr	r3, [r7, #4]
 804a676:	2200      	movs	r2, #0
 804a678:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804a67a:	687b      	ldr	r3, [r7, #4]
 804a67c:	2207      	movs	r2, #7
 804a67e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804a680:	683b      	ldr	r3, [r7, #0]
 804a682:	2207      	movs	r2, #7
 804a684:	4619      	mov	r1, r3
 804a686:	6878      	ldr	r0, [r7, #4]
 804a688:	f001 fa62 	bl	804bb50 <USBH_CtlReq>
 804a68c:	4603      	mov	r3, r0
}
 804a68e:	4618      	mov	r0, r3
 804a690:	3708      	adds	r7, #8
 804a692:	46bd      	mov	sp, r7
 804a694:	bd80      	pop	{r7, pc}

0804a696 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804a696:	b580      	push	{r7, lr}
 804a698:	b086      	sub	sp, #24
 804a69a:	af02      	add	r7, sp, #8
 804a69c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a69e:	687b      	ldr	r3, [r7, #4]
 804a6a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a6a4:	69db      	ldr	r3, [r3, #28]
 804a6a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a6a8:	2300      	movs	r3, #0
 804a6aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804a6ac:	68fb      	ldr	r3, [r7, #12]
 804a6ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804a6b2:	2b01      	cmp	r3, #1
 804a6b4:	d002      	beq.n	804a6bc <CDC_ProcessTransmission+0x26>
 804a6b6:	2b02      	cmp	r3, #2
 804a6b8:	d023      	beq.n	804a702 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804a6ba:	e05e      	b.n	804a77a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a6bc:	68fb      	ldr	r3, [r7, #12]
 804a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a6c0:	68fa      	ldr	r2, [r7, #12]
 804a6c2:	8b12      	ldrh	r2, [r2, #24]
 804a6c4:	4293      	cmp	r3, r2
 804a6c6:	d90b      	bls.n	804a6e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804a6c8:	68fb      	ldr	r3, [r7, #12]
 804a6ca:	69d9      	ldr	r1, [r3, #28]
 804a6cc:	68fb      	ldr	r3, [r7, #12]
 804a6ce:	8b1a      	ldrh	r2, [r3, #24]
 804a6d0:	68fb      	ldr	r3, [r7, #12]
 804a6d2:	7b5b      	ldrb	r3, [r3, #13]
 804a6d4:	2001      	movs	r0, #1
 804a6d6:	9000      	str	r0, [sp, #0]
 804a6d8:	6878      	ldr	r0, [r7, #4]
 804a6da:	f001 fc48 	bl	804bf6e <USBH_BulkSendData>
 804a6de:	e00b      	b.n	804a6f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804a6e0:	68fb      	ldr	r3, [r7, #12]
 804a6e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804a6e4:	68fb      	ldr	r3, [r7, #12]
 804a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804a6e8:	b29a      	uxth	r2, r3
 804a6ea:	68fb      	ldr	r3, [r7, #12]
 804a6ec:	7b5b      	ldrb	r3, [r3, #13]
 804a6ee:	2001      	movs	r0, #1
 804a6f0:	9000      	str	r0, [sp, #0]
 804a6f2:	6878      	ldr	r0, [r7, #4]
 804a6f4:	f001 fc3b 	bl	804bf6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804a6f8:	68fb      	ldr	r3, [r7, #12]
 804a6fa:	2202      	movs	r2, #2
 804a6fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a700:	e03b      	b.n	804a77a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804a702:	68fb      	ldr	r3, [r7, #12]
 804a704:	7b5b      	ldrb	r3, [r3, #13]
 804a706:	4619      	mov	r1, r3
 804a708:	6878      	ldr	r0, [r7, #4]
 804a70a:	f001 ff65 	bl	804c5d8 <USBH_LL_GetURBState>
 804a70e:	4603      	mov	r3, r0
 804a710:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804a712:	7afb      	ldrb	r3, [r7, #11]
 804a714:	2b01      	cmp	r3, #1
 804a716:	d128      	bne.n	804a76a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804a718:	68fb      	ldr	r3, [r7, #12]
 804a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a71c:	68fa      	ldr	r2, [r7, #12]
 804a71e:	8b12      	ldrh	r2, [r2, #24]
 804a720:	4293      	cmp	r3, r2
 804a722:	d90e      	bls.n	804a742 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804a724:	68fb      	ldr	r3, [r7, #12]
 804a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a728:	68fa      	ldr	r2, [r7, #12]
 804a72a:	8b12      	ldrh	r2, [r2, #24]
 804a72c:	1a9a      	subs	r2, r3, r2
 804a72e:	68fb      	ldr	r3, [r7, #12]
 804a730:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804a732:	68fb      	ldr	r3, [r7, #12]
 804a734:	69db      	ldr	r3, [r3, #28]
 804a736:	68fa      	ldr	r2, [r7, #12]
 804a738:	8b12      	ldrh	r2, [r2, #24]
 804a73a:	441a      	add	r2, r3
 804a73c:	68fb      	ldr	r3, [r7, #12]
 804a73e:	61da      	str	r2, [r3, #28]
 804a740:	e002      	b.n	804a748 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804a742:	68fb      	ldr	r3, [r7, #12]
 804a744:	2200      	movs	r2, #0
 804a746:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804a748:	68fb      	ldr	r3, [r7, #12]
 804a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a74c:	2b00      	cmp	r3, #0
 804a74e:	d004      	beq.n	804a75a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a750:	68fb      	ldr	r3, [r7, #12]
 804a752:	2201      	movs	r2, #1
 804a754:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a758:	e00e      	b.n	804a778 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804a75a:	68fb      	ldr	r3, [r7, #12]
 804a75c:	2200      	movs	r2, #0
 804a75e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804a762:	6878      	ldr	r0, [r7, #4]
 804a764:	f000 f868 	bl	804a838 <USBH_CDC_TransmitCallback>
      break;
 804a768:	e006      	b.n	804a778 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804a76a:	7afb      	ldrb	r3, [r7, #11]
 804a76c:	2b02      	cmp	r3, #2
 804a76e:	d103      	bne.n	804a778 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804a770:	68fb      	ldr	r3, [r7, #12]
 804a772:	2201      	movs	r2, #1
 804a774:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804a778:	bf00      	nop
  }
}
 804a77a:	bf00      	nop
 804a77c:	3710      	adds	r7, #16
 804a77e:	46bd      	mov	sp, r7
 804a780:	bd80      	pop	{r7, pc}

0804a782 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804a782:	b580      	push	{r7, lr}
 804a784:	b086      	sub	sp, #24
 804a786:	af00      	add	r7, sp, #0
 804a788:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a78a:	687b      	ldr	r3, [r7, #4]
 804a78c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a790:	69db      	ldr	r3, [r3, #28]
 804a792:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804a794:	2300      	movs	r3, #0
 804a796:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804a798:	697b      	ldr	r3, [r7, #20]
 804a79a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804a79e:	2b03      	cmp	r3, #3
 804a7a0:	d002      	beq.n	804a7a8 <CDC_ProcessReception+0x26>
 804a7a2:	2b04      	cmp	r3, #4
 804a7a4:	d00e      	beq.n	804a7c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804a7a6:	e043      	b.n	804a830 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804a7a8:	697b      	ldr	r3, [r7, #20]
 804a7aa:	6a19      	ldr	r1, [r3, #32]
 804a7ac:	697b      	ldr	r3, [r7, #20]
 804a7ae:	8b5a      	ldrh	r2, [r3, #26]
 804a7b0:	697b      	ldr	r3, [r7, #20]
 804a7b2:	7b1b      	ldrb	r3, [r3, #12]
 804a7b4:	6878      	ldr	r0, [r7, #4]
 804a7b6:	f001 fbff 	bl	804bfb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804a7ba:	697b      	ldr	r3, [r7, #20]
 804a7bc:	2204      	movs	r2, #4
 804a7be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a7c2:	e035      	b.n	804a830 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804a7c4:	697b      	ldr	r3, [r7, #20]
 804a7c6:	7b1b      	ldrb	r3, [r3, #12]
 804a7c8:	4619      	mov	r1, r3
 804a7ca:	6878      	ldr	r0, [r7, #4]
 804a7cc:	f001 ff04 	bl	804c5d8 <USBH_LL_GetURBState>
 804a7d0:	4603      	mov	r3, r0
 804a7d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804a7d4:	7cfb      	ldrb	r3, [r7, #19]
 804a7d6:	2b01      	cmp	r3, #1
 804a7d8:	d129      	bne.n	804a82e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804a7da:	697b      	ldr	r3, [r7, #20]
 804a7dc:	7b1b      	ldrb	r3, [r3, #12]
 804a7de:	4619      	mov	r1, r3
 804a7e0:	6878      	ldr	r0, [r7, #4]
 804a7e2:	f001 fe67 	bl	804c4b4 <USBH_LL_GetLastXferSize>
 804a7e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804a7e8:	697b      	ldr	r3, [r7, #20]
 804a7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a7ec:	68fa      	ldr	r2, [r7, #12]
 804a7ee:	429a      	cmp	r2, r3
 804a7f0:	d016      	beq.n	804a820 <CDC_ProcessReception+0x9e>
 804a7f2:	697b      	ldr	r3, [r7, #20]
 804a7f4:	8b5b      	ldrh	r3, [r3, #26]
 804a7f6:	461a      	mov	r2, r3
 804a7f8:	68fb      	ldr	r3, [r7, #12]
 804a7fa:	4293      	cmp	r3, r2
 804a7fc:	d910      	bls.n	804a820 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804a7fe:	697b      	ldr	r3, [r7, #20]
 804a800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804a802:	68fb      	ldr	r3, [r7, #12]
 804a804:	1ad2      	subs	r2, r2, r3
 804a806:	697b      	ldr	r3, [r7, #20]
 804a808:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804a80a:	697b      	ldr	r3, [r7, #20]
 804a80c:	6a1a      	ldr	r2, [r3, #32]
 804a80e:	68fb      	ldr	r3, [r7, #12]
 804a810:	441a      	add	r2, r3
 804a812:	697b      	ldr	r3, [r7, #20]
 804a814:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804a816:	697b      	ldr	r3, [r7, #20]
 804a818:	2203      	movs	r2, #3
 804a81a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804a81e:	e006      	b.n	804a82e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804a820:	697b      	ldr	r3, [r7, #20]
 804a822:	2200      	movs	r2, #0
 804a824:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804a828:	6878      	ldr	r0, [r7, #4]
 804a82a:	f000 f80f 	bl	804a84c <USBH_CDC_ReceiveCallback>
      break;
 804a82e:	bf00      	nop
  }
}
 804a830:	bf00      	nop
 804a832:	3718      	adds	r7, #24
 804a834:	46bd      	mov	sp, r7
 804a836:	bd80      	pop	{r7, pc}

0804a838 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804a838:	b480      	push	{r7}
 804a83a:	b083      	sub	sp, #12
 804a83c:	af00      	add	r7, sp, #0
 804a83e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a840:	bf00      	nop
 804a842:	370c      	adds	r7, #12
 804a844:	46bd      	mov	sp, r7
 804a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a84a:	4770      	bx	lr

0804a84c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804a84c:	b480      	push	{r7}
 804a84e:	b083      	sub	sp, #12
 804a850:	af00      	add	r7, sp, #0
 804a852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a854:	bf00      	nop
 804a856:	370c      	adds	r7, #12
 804a858:	46bd      	mov	sp, r7
 804a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a85e:	4770      	bx	lr

0804a860 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804a860:	b480      	push	{r7}
 804a862:	b083      	sub	sp, #12
 804a864:	af00      	add	r7, sp, #0
 804a866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804a868:	bf00      	nop
 804a86a:	370c      	adds	r7, #12
 804a86c:	46bd      	mov	sp, r7
 804a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a872:	4770      	bx	lr

0804a874 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804a874:	b580      	push	{r7, lr}
 804a876:	b084      	sub	sp, #16
 804a878:	af00      	add	r7, sp, #0
 804a87a:	60f8      	str	r0, [r7, #12]
 804a87c:	60b9      	str	r1, [r7, #8]
 804a87e:	4613      	mov	r3, r2
 804a880:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804a882:	68fb      	ldr	r3, [r7, #12]
 804a884:	2b00      	cmp	r3, #0
 804a886:	d101      	bne.n	804a88c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804a888:	2302      	movs	r3, #2
 804a88a:	e029      	b.n	804a8e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804a88c:	68fb      	ldr	r3, [r7, #12]
 804a88e:	79fa      	ldrb	r2, [r7, #7]
 804a890:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804a894:	68fb      	ldr	r3, [r7, #12]
 804a896:	2200      	movs	r2, #0
 804a898:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804a89c:	68fb      	ldr	r3, [r7, #12]
 804a89e:	2200      	movs	r2, #0
 804a8a0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804a8a4:	68f8      	ldr	r0, [r7, #12]
 804a8a6:	f000 f81f 	bl	804a8e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804a8aa:	68fb      	ldr	r3, [r7, #12]
 804a8ac:	2200      	movs	r2, #0
 804a8ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804a8b2:	68fb      	ldr	r3, [r7, #12]
 804a8b4:	2200      	movs	r2, #0
 804a8b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804a8ba:	68fb      	ldr	r3, [r7, #12]
 804a8bc:	2200      	movs	r2, #0
 804a8be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804a8c2:	68fb      	ldr	r3, [r7, #12]
 804a8c4:	2200      	movs	r2, #0
 804a8c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804a8ca:	68bb      	ldr	r3, [r7, #8]
 804a8cc:	2b00      	cmp	r3, #0
 804a8ce:	d003      	beq.n	804a8d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804a8d0:	68fb      	ldr	r3, [r7, #12]
 804a8d2:	68ba      	ldr	r2, [r7, #8]
 804a8d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804a8d8:	68f8      	ldr	r0, [r7, #12]
 804a8da:	f001 fd2d 	bl	804c338 <USBH_LL_Init>

  return USBH_OK;
 804a8de:	2300      	movs	r3, #0
}
 804a8e0:	4618      	mov	r0, r3
 804a8e2:	3710      	adds	r7, #16
 804a8e4:	46bd      	mov	sp, r7
 804a8e6:	bd80      	pop	{r7, pc}

0804a8e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804a8e8:	b480      	push	{r7}
 804a8ea:	b085      	sub	sp, #20
 804a8ec:	af00      	add	r7, sp, #0
 804a8ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804a8f0:	2300      	movs	r3, #0
 804a8f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a8f4:	2300      	movs	r3, #0
 804a8f6:	60fb      	str	r3, [r7, #12]
 804a8f8:	e009      	b.n	804a90e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804a8fa:	687a      	ldr	r2, [r7, #4]
 804a8fc:	68fb      	ldr	r3, [r7, #12]
 804a8fe:	33e0      	adds	r3, #224	; 0xe0
 804a900:	009b      	lsls	r3, r3, #2
 804a902:	4413      	add	r3, r2
 804a904:	2200      	movs	r2, #0
 804a906:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804a908:	68fb      	ldr	r3, [r7, #12]
 804a90a:	3301      	adds	r3, #1
 804a90c:	60fb      	str	r3, [r7, #12]
 804a90e:	68fb      	ldr	r3, [r7, #12]
 804a910:	2b0f      	cmp	r3, #15
 804a912:	d9f2      	bls.n	804a8fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a914:	2300      	movs	r3, #0
 804a916:	60fb      	str	r3, [r7, #12]
 804a918:	e009      	b.n	804a92e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804a91a:	687a      	ldr	r2, [r7, #4]
 804a91c:	68fb      	ldr	r3, [r7, #12]
 804a91e:	4413      	add	r3, r2
 804a920:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804a924:	2200      	movs	r2, #0
 804a926:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804a928:	68fb      	ldr	r3, [r7, #12]
 804a92a:	3301      	adds	r3, #1
 804a92c:	60fb      	str	r3, [r7, #12]
 804a92e:	68fb      	ldr	r3, [r7, #12]
 804a930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804a934:	d3f1      	bcc.n	804a91a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804a936:	687b      	ldr	r3, [r7, #4]
 804a938:	2200      	movs	r2, #0
 804a93a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804a93c:	687b      	ldr	r3, [r7, #4]
 804a93e:	2200      	movs	r2, #0
 804a940:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804a942:	687b      	ldr	r3, [r7, #4]
 804a944:	2201      	movs	r2, #1
 804a946:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804a948:	687b      	ldr	r3, [r7, #4]
 804a94a:	2200      	movs	r2, #0
 804a94c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804a950:	687b      	ldr	r3, [r7, #4]
 804a952:	2201      	movs	r2, #1
 804a954:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804a956:	687b      	ldr	r3, [r7, #4]
 804a958:	2240      	movs	r2, #64	; 0x40
 804a95a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804a95c:	687b      	ldr	r3, [r7, #4]
 804a95e:	2200      	movs	r2, #0
 804a960:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804a962:	687b      	ldr	r3, [r7, #4]
 804a964:	2200      	movs	r2, #0
 804a966:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804a96a:	687b      	ldr	r3, [r7, #4]
 804a96c:	2201      	movs	r2, #1
 804a96e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804a972:	687b      	ldr	r3, [r7, #4]
 804a974:	2200      	movs	r2, #0
 804a976:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804a97a:	687b      	ldr	r3, [r7, #4]
 804a97c:	2200      	movs	r2, #0
 804a97e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804a982:	2300      	movs	r3, #0
}
 804a984:	4618      	mov	r0, r3
 804a986:	3714      	adds	r7, #20
 804a988:	46bd      	mov	sp, r7
 804a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a98e:	4770      	bx	lr

0804a990 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804a990:	b480      	push	{r7}
 804a992:	b085      	sub	sp, #20
 804a994:	af00      	add	r7, sp, #0
 804a996:	6078      	str	r0, [r7, #4]
 804a998:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804a99a:	2300      	movs	r3, #0
 804a99c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804a99e:	683b      	ldr	r3, [r7, #0]
 804a9a0:	2b00      	cmp	r3, #0
 804a9a2:	d016      	beq.n	804a9d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804a9a4:	687b      	ldr	r3, [r7, #4]
 804a9a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a9aa:	2b00      	cmp	r3, #0
 804a9ac:	d10e      	bne.n	804a9cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804a9ae:	687b      	ldr	r3, [r7, #4]
 804a9b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804a9b4:	1c59      	adds	r1, r3, #1
 804a9b6:	687a      	ldr	r2, [r7, #4]
 804a9b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804a9bc:	687a      	ldr	r2, [r7, #4]
 804a9be:	33de      	adds	r3, #222	; 0xde
 804a9c0:	6839      	ldr	r1, [r7, #0]
 804a9c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804a9c6:	2300      	movs	r3, #0
 804a9c8:	73fb      	strb	r3, [r7, #15]
 804a9ca:	e004      	b.n	804a9d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804a9cc:	2302      	movs	r3, #2
 804a9ce:	73fb      	strb	r3, [r7, #15]
 804a9d0:	e001      	b.n	804a9d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804a9d2:	2302      	movs	r3, #2
 804a9d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 804a9d8:	4618      	mov	r0, r3
 804a9da:	3714      	adds	r7, #20
 804a9dc:	46bd      	mov	sp, r7
 804a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9e2:	4770      	bx	lr

0804a9e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804a9e4:	b480      	push	{r7}
 804a9e6:	b085      	sub	sp, #20
 804a9e8:	af00      	add	r7, sp, #0
 804a9ea:	6078      	str	r0, [r7, #4]
 804a9ec:	460b      	mov	r3, r1
 804a9ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804a9f0:	2300      	movs	r3, #0
 804a9f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804a9f4:	687b      	ldr	r3, [r7, #4]
 804a9f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804a9fa:	78fa      	ldrb	r2, [r7, #3]
 804a9fc:	429a      	cmp	r2, r3
 804a9fe:	d204      	bcs.n	804aa0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804aa00:	687b      	ldr	r3, [r7, #4]
 804aa02:	78fa      	ldrb	r2, [r7, #3]
 804aa04:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804aa08:	e001      	b.n	804aa0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804aa0a:	2302      	movs	r3, #2
 804aa0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804aa0e:	7bfb      	ldrb	r3, [r7, #15]
}
 804aa10:	4618      	mov	r0, r3
 804aa12:	3714      	adds	r7, #20
 804aa14:	46bd      	mov	sp, r7
 804aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aa1a:	4770      	bx	lr

0804aa1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804aa1c:	b480      	push	{r7}
 804aa1e:	b087      	sub	sp, #28
 804aa20:	af00      	add	r7, sp, #0
 804aa22:	6078      	str	r0, [r7, #4]
 804aa24:	4608      	mov	r0, r1
 804aa26:	4611      	mov	r1, r2
 804aa28:	461a      	mov	r2, r3
 804aa2a:	4603      	mov	r3, r0
 804aa2c:	70fb      	strb	r3, [r7, #3]
 804aa2e:	460b      	mov	r3, r1
 804aa30:	70bb      	strb	r3, [r7, #2]
 804aa32:	4613      	mov	r3, r2
 804aa34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804aa36:	2300      	movs	r3, #0
 804aa38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804aa3a:	2300      	movs	r3, #0
 804aa3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804aa3e:	687b      	ldr	r3, [r7, #4]
 804aa40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804aa44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804aa46:	e025      	b.n	804aa94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804aa48:	7dfb      	ldrb	r3, [r7, #23]
 804aa4a:	221a      	movs	r2, #26
 804aa4c:	fb02 f303 	mul.w	r3, r2, r3
 804aa50:	3308      	adds	r3, #8
 804aa52:	68fa      	ldr	r2, [r7, #12]
 804aa54:	4413      	add	r3, r2
 804aa56:	3302      	adds	r3, #2
 804aa58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804aa5a:	693b      	ldr	r3, [r7, #16]
 804aa5c:	795b      	ldrb	r3, [r3, #5]
 804aa5e:	78fa      	ldrb	r2, [r7, #3]
 804aa60:	429a      	cmp	r2, r3
 804aa62:	d002      	beq.n	804aa6a <USBH_FindInterface+0x4e>
 804aa64:	78fb      	ldrb	r3, [r7, #3]
 804aa66:	2bff      	cmp	r3, #255	; 0xff
 804aa68:	d111      	bne.n	804aa8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804aa6a:	693b      	ldr	r3, [r7, #16]
 804aa6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804aa6e:	78ba      	ldrb	r2, [r7, #2]
 804aa70:	429a      	cmp	r2, r3
 804aa72:	d002      	beq.n	804aa7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804aa74:	78bb      	ldrb	r3, [r7, #2]
 804aa76:	2bff      	cmp	r3, #255	; 0xff
 804aa78:	d109      	bne.n	804aa8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804aa7a:	693b      	ldr	r3, [r7, #16]
 804aa7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804aa7e:	787a      	ldrb	r2, [r7, #1]
 804aa80:	429a      	cmp	r2, r3
 804aa82:	d002      	beq.n	804aa8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804aa84:	787b      	ldrb	r3, [r7, #1]
 804aa86:	2bff      	cmp	r3, #255	; 0xff
 804aa88:	d101      	bne.n	804aa8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804aa8a:	7dfb      	ldrb	r3, [r7, #23]
 804aa8c:	e006      	b.n	804aa9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 804aa8e:	7dfb      	ldrb	r3, [r7, #23]
 804aa90:	3301      	adds	r3, #1
 804aa92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804aa94:	7dfb      	ldrb	r3, [r7, #23]
 804aa96:	2b01      	cmp	r3, #1
 804aa98:	d9d6      	bls.n	804aa48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804aa9a:	23ff      	movs	r3, #255	; 0xff
}
 804aa9c:	4618      	mov	r0, r3
 804aa9e:	371c      	adds	r7, #28
 804aaa0:	46bd      	mov	sp, r7
 804aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aaa6:	4770      	bx	lr

0804aaa8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804aaa8:	b580      	push	{r7, lr}
 804aaaa:	b082      	sub	sp, #8
 804aaac:	af00      	add	r7, sp, #0
 804aaae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804aab0:	6878      	ldr	r0, [r7, #4]
 804aab2:	f001 fc87 	bl	804c3c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804aab6:	2101      	movs	r1, #1
 804aab8:	6878      	ldr	r0, [r7, #4]
 804aaba:	f001 fda0 	bl	804c5fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 804aabe:	2300      	movs	r3, #0
}
 804aac0:	4618      	mov	r0, r3
 804aac2:	3708      	adds	r7, #8
 804aac4:	46bd      	mov	sp, r7
 804aac6:	bd80      	pop	{r7, pc}

0804aac8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804aac8:	b580      	push	{r7, lr}
 804aaca:	b088      	sub	sp, #32
 804aacc:	af04      	add	r7, sp, #16
 804aace:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804aad0:	2302      	movs	r3, #2
 804aad2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804aad4:	2300      	movs	r3, #0
 804aad6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804aad8:	687b      	ldr	r3, [r7, #4]
 804aada:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804aade:	b2db      	uxtb	r3, r3
 804aae0:	2b01      	cmp	r3, #1
 804aae2:	d102      	bne.n	804aaea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804aae4:	687b      	ldr	r3, [r7, #4]
 804aae6:	2203      	movs	r2, #3
 804aae8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804aaea:	687b      	ldr	r3, [r7, #4]
 804aaec:	781b      	ldrb	r3, [r3, #0]
 804aaee:	b2db      	uxtb	r3, r3
 804aaf0:	2b0b      	cmp	r3, #11
 804aaf2:	f200 81be 	bhi.w	804ae72 <USBH_Process+0x3aa>
 804aaf6:	a201      	add	r2, pc, #4	; (adr r2, 804aafc <USBH_Process+0x34>)
 804aaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aafc:	0804ab2d 	.word	0x0804ab2d
 804ab00:	0804ab5f 	.word	0x0804ab5f
 804ab04:	0804abc7 	.word	0x0804abc7
 804ab08:	0804ae0d 	.word	0x0804ae0d
 804ab0c:	0804ae73 	.word	0x0804ae73
 804ab10:	0804ac6b 	.word	0x0804ac6b
 804ab14:	0804adb3 	.word	0x0804adb3
 804ab18:	0804aca1 	.word	0x0804aca1
 804ab1c:	0804acc1 	.word	0x0804acc1
 804ab20:	0804ace1 	.word	0x0804ace1
 804ab24:	0804ad25 	.word	0x0804ad25
 804ab28:	0804adf5 	.word	0x0804adf5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804ab2c:	687b      	ldr	r3, [r7, #4]
 804ab2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804ab32:	b2db      	uxtb	r3, r3
 804ab34:	2b00      	cmp	r3, #0
 804ab36:	f000 819e 	beq.w	804ae76 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804ab3a:	687b      	ldr	r3, [r7, #4]
 804ab3c:	2201      	movs	r2, #1
 804ab3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804ab40:	20c8      	movs	r0, #200	; 0xc8
 804ab42:	f001 fda3 	bl	804c68c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804ab46:	6878      	ldr	r0, [r7, #4]
 804ab48:	f001 fc99 	bl	804c47e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804ab4c:	687b      	ldr	r3, [r7, #4]
 804ab4e:	2200      	movs	r2, #0
 804ab50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804ab54:	687b      	ldr	r3, [r7, #4]
 804ab56:	2200      	movs	r2, #0
 804ab58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ab5c:	e18b      	b.n	804ae76 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804ab5e:	687b      	ldr	r3, [r7, #4]
 804ab60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804ab64:	2b01      	cmp	r3, #1
 804ab66:	d107      	bne.n	804ab78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804ab68:	687b      	ldr	r3, [r7, #4]
 804ab6a:	2200      	movs	r2, #0
 804ab6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804ab70:	687b      	ldr	r3, [r7, #4]
 804ab72:	2202      	movs	r2, #2
 804ab74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ab76:	e18d      	b.n	804ae94 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804ab78:	687b      	ldr	r3, [r7, #4]
 804ab7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804ab7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804ab82:	d914      	bls.n	804abae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804ab84:	687b      	ldr	r3, [r7, #4]
 804ab86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804ab8a:	3301      	adds	r3, #1
 804ab8c:	b2da      	uxtb	r2, r3
 804ab8e:	687b      	ldr	r3, [r7, #4]
 804ab90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804ab94:	687b      	ldr	r3, [r7, #4]
 804ab96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804ab9a:	2b03      	cmp	r3, #3
 804ab9c:	d903      	bls.n	804aba6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804ab9e:	687b      	ldr	r3, [r7, #4]
 804aba0:	220d      	movs	r2, #13
 804aba2:	701a      	strb	r2, [r3, #0]
      break;
 804aba4:	e176      	b.n	804ae94 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804aba6:	687b      	ldr	r3, [r7, #4]
 804aba8:	2200      	movs	r2, #0
 804abaa:	701a      	strb	r2, [r3, #0]
      break;
 804abac:	e172      	b.n	804ae94 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804abae:	687b      	ldr	r3, [r7, #4]
 804abb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804abb4:	f103 020a 	add.w	r2, r3, #10
 804abb8:	687b      	ldr	r3, [r7, #4]
 804abba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804abbe:	200a      	movs	r0, #10
 804abc0:	f001 fd64 	bl	804c68c <USBH_Delay>
      break;
 804abc4:	e166      	b.n	804ae94 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804abc6:	687b      	ldr	r3, [r7, #4]
 804abc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804abcc:	2b00      	cmp	r3, #0
 804abce:	d005      	beq.n	804abdc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804abd0:	687b      	ldr	r3, [r7, #4]
 804abd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804abd6:	2104      	movs	r1, #4
 804abd8:	6878      	ldr	r0, [r7, #4]
 804abda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804abdc:	2064      	movs	r0, #100	; 0x64
 804abde:	f001 fd55 	bl	804c68c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804abe2:	6878      	ldr	r0, [r7, #4]
 804abe4:	f001 fc24 	bl	804c430 <USBH_LL_GetSpeed>
 804abe8:	4603      	mov	r3, r0
 804abea:	461a      	mov	r2, r3
 804abec:	687b      	ldr	r3, [r7, #4]
 804abee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804abf2:	687b      	ldr	r3, [r7, #4]
 804abf4:	2205      	movs	r2, #5
 804abf6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804abf8:	2100      	movs	r1, #0
 804abfa:	6878      	ldr	r0, [r7, #4]
 804abfc:	f001 fa29 	bl	804c052 <USBH_AllocPipe>
 804ac00:	4603      	mov	r3, r0
 804ac02:	461a      	mov	r2, r3
 804ac04:	687b      	ldr	r3, [r7, #4]
 804ac06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804ac08:	2180      	movs	r1, #128	; 0x80
 804ac0a:	6878      	ldr	r0, [r7, #4]
 804ac0c:	f001 fa21 	bl	804c052 <USBH_AllocPipe>
 804ac10:	4603      	mov	r3, r0
 804ac12:	461a      	mov	r2, r3
 804ac14:	687b      	ldr	r3, [r7, #4]
 804ac16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ac18:	687b      	ldr	r3, [r7, #4]
 804ac1a:	7919      	ldrb	r1, [r3, #4]
 804ac1c:	687b      	ldr	r3, [r7, #4]
 804ac1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ac22:	687b      	ldr	r3, [r7, #4]
 804ac24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804ac28:	687a      	ldr	r2, [r7, #4]
 804ac2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804ac2c:	b292      	uxth	r2, r2
 804ac2e:	9202      	str	r2, [sp, #8]
 804ac30:	2200      	movs	r2, #0
 804ac32:	9201      	str	r2, [sp, #4]
 804ac34:	9300      	str	r3, [sp, #0]
 804ac36:	4603      	mov	r3, r0
 804ac38:	2280      	movs	r2, #128	; 0x80
 804ac3a:	6878      	ldr	r0, [r7, #4]
 804ac3c:	f001 f9da 	bl	804bff4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804ac40:	687b      	ldr	r3, [r7, #4]
 804ac42:	7959      	ldrb	r1, [r3, #5]
 804ac44:	687b      	ldr	r3, [r7, #4]
 804ac46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804ac4a:	687b      	ldr	r3, [r7, #4]
 804ac4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804ac50:	687a      	ldr	r2, [r7, #4]
 804ac52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804ac54:	b292      	uxth	r2, r2
 804ac56:	9202      	str	r2, [sp, #8]
 804ac58:	2200      	movs	r2, #0
 804ac5a:	9201      	str	r2, [sp, #4]
 804ac5c:	9300      	str	r3, [sp, #0]
 804ac5e:	4603      	mov	r3, r0
 804ac60:	2200      	movs	r2, #0
 804ac62:	6878      	ldr	r0, [r7, #4]
 804ac64:	f001 f9c6 	bl	804bff4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ac68:	e114      	b.n	804ae94 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804ac6a:	6878      	ldr	r0, [r7, #4]
 804ac6c:	f000 f918 	bl	804aea0 <USBH_HandleEnum>
 804ac70:	4603      	mov	r3, r0
 804ac72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804ac74:	7bbb      	ldrb	r3, [r7, #14]
 804ac76:	b2db      	uxtb	r3, r3
 804ac78:	2b00      	cmp	r3, #0
 804ac7a:	f040 80fe 	bne.w	804ae7a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804ac7e:	687b      	ldr	r3, [r7, #4]
 804ac80:	2200      	movs	r2, #0
 804ac82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804ac86:	687b      	ldr	r3, [r7, #4]
 804ac88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804ac8c:	2b01      	cmp	r3, #1
 804ac8e:	d103      	bne.n	804ac98 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804ac90:	687b      	ldr	r3, [r7, #4]
 804ac92:	2208      	movs	r2, #8
 804ac94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804ac96:	e0f0      	b.n	804ae7a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804ac98:	687b      	ldr	r3, [r7, #4]
 804ac9a:	2207      	movs	r2, #7
 804ac9c:	701a      	strb	r2, [r3, #0]
      break;
 804ac9e:	e0ec      	b.n	804ae7a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804aca0:	687b      	ldr	r3, [r7, #4]
 804aca2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804aca6:	2b00      	cmp	r3, #0
 804aca8:	f000 80e9 	beq.w	804ae7e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804acac:	687b      	ldr	r3, [r7, #4]
 804acae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804acb2:	2101      	movs	r1, #1
 804acb4:	6878      	ldr	r0, [r7, #4]
 804acb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804acb8:	687b      	ldr	r3, [r7, #4]
 804acba:	2208      	movs	r2, #8
 804acbc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804acbe:	e0de      	b.n	804ae7e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804acc0:	687b      	ldr	r3, [r7, #4]
 804acc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804acc6:	b29b      	uxth	r3, r3
 804acc8:	4619      	mov	r1, r3
 804acca:	6878      	ldr	r0, [r7, #4]
 804accc:	f000 fc2c 	bl	804b528 <USBH_SetCfg>
 804acd0:	4603      	mov	r3, r0
 804acd2:	2b00      	cmp	r3, #0
 804acd4:	f040 80d5 	bne.w	804ae82 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804acd8:	687b      	ldr	r3, [r7, #4]
 804acda:	2209      	movs	r2, #9
 804acdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804acde:	e0d0      	b.n	804ae82 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804ace0:	687b      	ldr	r3, [r7, #4]
 804ace2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804ace6:	f003 0320 	and.w	r3, r3, #32
 804acea:	2b00      	cmp	r3, #0
 804acec:	d016      	beq.n	804ad1c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804acee:	2101      	movs	r1, #1
 804acf0:	6878      	ldr	r0, [r7, #4]
 804acf2:	f000 fc3c 	bl	804b56e <USBH_SetFeature>
 804acf6:	4603      	mov	r3, r0
 804acf8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804acfa:	7bbb      	ldrb	r3, [r7, #14]
 804acfc:	b2db      	uxtb	r3, r3
 804acfe:	2b00      	cmp	r3, #0
 804ad00:	d103      	bne.n	804ad0a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804ad02:	687b      	ldr	r3, [r7, #4]
 804ad04:	220a      	movs	r2, #10
 804ad06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ad08:	e0bd      	b.n	804ae86 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804ad0a:	7bbb      	ldrb	r3, [r7, #14]
 804ad0c:	b2db      	uxtb	r3, r3
 804ad0e:	2b03      	cmp	r3, #3
 804ad10:	f040 80b9 	bne.w	804ae86 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804ad14:	687b      	ldr	r3, [r7, #4]
 804ad16:	220a      	movs	r2, #10
 804ad18:	701a      	strb	r2, [r3, #0]
      break;
 804ad1a:	e0b4      	b.n	804ae86 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804ad1c:	687b      	ldr	r3, [r7, #4]
 804ad1e:	220a      	movs	r2, #10
 804ad20:	701a      	strb	r2, [r3, #0]
      break;
 804ad22:	e0b0      	b.n	804ae86 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804ad24:	687b      	ldr	r3, [r7, #4]
 804ad26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804ad2a:	2b00      	cmp	r3, #0
 804ad2c:	f000 80ad 	beq.w	804ae8a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804ad30:	687b      	ldr	r3, [r7, #4]
 804ad32:	2200      	movs	r2, #0
 804ad34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804ad38:	2300      	movs	r3, #0
 804ad3a:	73fb      	strb	r3, [r7, #15]
 804ad3c:	e016      	b.n	804ad6c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804ad3e:	7bfa      	ldrb	r2, [r7, #15]
 804ad40:	687b      	ldr	r3, [r7, #4]
 804ad42:	32de      	adds	r2, #222	; 0xde
 804ad44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804ad48:	791a      	ldrb	r2, [r3, #4]
 804ad4a:	687b      	ldr	r3, [r7, #4]
 804ad4c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804ad50:	429a      	cmp	r2, r3
 804ad52:	d108      	bne.n	804ad66 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804ad54:	7bfa      	ldrb	r2, [r7, #15]
 804ad56:	687b      	ldr	r3, [r7, #4]
 804ad58:	32de      	adds	r2, #222	; 0xde
 804ad5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804ad5e:	687b      	ldr	r3, [r7, #4]
 804ad60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804ad64:	e005      	b.n	804ad72 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804ad66:	7bfb      	ldrb	r3, [r7, #15]
 804ad68:	3301      	adds	r3, #1
 804ad6a:	73fb      	strb	r3, [r7, #15]
 804ad6c:	7bfb      	ldrb	r3, [r7, #15]
 804ad6e:	2b00      	cmp	r3, #0
 804ad70:	d0e5      	beq.n	804ad3e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804ad72:	687b      	ldr	r3, [r7, #4]
 804ad74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad78:	2b00      	cmp	r3, #0
 804ad7a:	d016      	beq.n	804adaa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804ad7c:	687b      	ldr	r3, [r7, #4]
 804ad7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad82:	689b      	ldr	r3, [r3, #8]
 804ad84:	6878      	ldr	r0, [r7, #4]
 804ad86:	4798      	blx	r3
 804ad88:	4603      	mov	r3, r0
 804ad8a:	2b00      	cmp	r3, #0
 804ad8c:	d109      	bne.n	804ada2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804ad8e:	687b      	ldr	r3, [r7, #4]
 804ad90:	2206      	movs	r2, #6
 804ad92:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804ad94:	687b      	ldr	r3, [r7, #4]
 804ad96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ad9a:	2103      	movs	r1, #3
 804ad9c:	6878      	ldr	r0, [r7, #4]
 804ad9e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ada0:	e073      	b.n	804ae8a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804ada2:	687b      	ldr	r3, [r7, #4]
 804ada4:	220d      	movs	r2, #13
 804ada6:	701a      	strb	r2, [r3, #0]
      break;
 804ada8:	e06f      	b.n	804ae8a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804adaa:	687b      	ldr	r3, [r7, #4]
 804adac:	220d      	movs	r2, #13
 804adae:	701a      	strb	r2, [r3, #0]
      break;
 804adb0:	e06b      	b.n	804ae8a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804adb2:	687b      	ldr	r3, [r7, #4]
 804adb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804adb8:	2b00      	cmp	r3, #0
 804adba:	d017      	beq.n	804adec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804adbc:	687b      	ldr	r3, [r7, #4]
 804adbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804adc2:	691b      	ldr	r3, [r3, #16]
 804adc4:	6878      	ldr	r0, [r7, #4]
 804adc6:	4798      	blx	r3
 804adc8:	4603      	mov	r3, r0
 804adca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804adcc:	7bbb      	ldrb	r3, [r7, #14]
 804adce:	b2db      	uxtb	r3, r3
 804add0:	2b00      	cmp	r3, #0
 804add2:	d103      	bne.n	804addc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804add4:	687b      	ldr	r3, [r7, #4]
 804add6:	220b      	movs	r2, #11
 804add8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804adda:	e058      	b.n	804ae8e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804addc:	7bbb      	ldrb	r3, [r7, #14]
 804adde:	b2db      	uxtb	r3, r3
 804ade0:	2b02      	cmp	r3, #2
 804ade2:	d154      	bne.n	804ae8e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804ade4:	687b      	ldr	r3, [r7, #4]
 804ade6:	220d      	movs	r2, #13
 804ade8:	701a      	strb	r2, [r3, #0]
      break;
 804adea:	e050      	b.n	804ae8e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804adec:	687b      	ldr	r3, [r7, #4]
 804adee:	220d      	movs	r2, #13
 804adf0:	701a      	strb	r2, [r3, #0]
      break;
 804adf2:	e04c      	b.n	804ae8e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804adf4:	687b      	ldr	r3, [r7, #4]
 804adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804adfa:	2b00      	cmp	r3, #0
 804adfc:	d049      	beq.n	804ae92 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804adfe:	687b      	ldr	r3, [r7, #4]
 804ae00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ae04:	695b      	ldr	r3, [r3, #20]
 804ae06:	6878      	ldr	r0, [r7, #4]
 804ae08:	4798      	blx	r3
      }
      break;
 804ae0a:	e042      	b.n	804ae92 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804ae0c:	687b      	ldr	r3, [r7, #4]
 804ae0e:	2200      	movs	r2, #0
 804ae10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804ae14:	6878      	ldr	r0, [r7, #4]
 804ae16:	f7ff fd67 	bl	804a8e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804ae1a:	687b      	ldr	r3, [r7, #4]
 804ae1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ae20:	2b00      	cmp	r3, #0
 804ae22:	d009      	beq.n	804ae38 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804ae24:	687b      	ldr	r3, [r7, #4]
 804ae26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ae2a:	68db      	ldr	r3, [r3, #12]
 804ae2c:	6878      	ldr	r0, [r7, #4]
 804ae2e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804ae30:	687b      	ldr	r3, [r7, #4]
 804ae32:	2200      	movs	r2, #0
 804ae34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804ae38:	687b      	ldr	r3, [r7, #4]
 804ae3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ae3e:	2b00      	cmp	r3, #0
 804ae40:	d005      	beq.n	804ae4e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804ae42:	687b      	ldr	r3, [r7, #4]
 804ae44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804ae48:	2105      	movs	r1, #5
 804ae4a:	6878      	ldr	r0, [r7, #4]
 804ae4c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804ae4e:	687b      	ldr	r3, [r7, #4]
 804ae50:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804ae54:	b2db      	uxtb	r3, r3
 804ae56:	2b01      	cmp	r3, #1
 804ae58:	d107      	bne.n	804ae6a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804ae5a:	687b      	ldr	r3, [r7, #4]
 804ae5c:	2200      	movs	r2, #0
 804ae5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804ae62:	6878      	ldr	r0, [r7, #4]
 804ae64:	f7ff fe20 	bl	804aaa8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804ae68:	e014      	b.n	804ae94 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804ae6a:	6878      	ldr	r0, [r7, #4]
 804ae6c:	f001 faaa 	bl	804c3c4 <USBH_LL_Start>
      break;
 804ae70:	e010      	b.n	804ae94 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804ae72:	bf00      	nop
 804ae74:	e00e      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae76:	bf00      	nop
 804ae78:	e00c      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae7a:	bf00      	nop
 804ae7c:	e00a      	b.n	804ae94 <USBH_Process+0x3cc>
    break;
 804ae7e:	bf00      	nop
 804ae80:	e008      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae82:	bf00      	nop
 804ae84:	e006      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae86:	bf00      	nop
 804ae88:	e004      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae8a:	bf00      	nop
 804ae8c:	e002      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae8e:	bf00      	nop
 804ae90:	e000      	b.n	804ae94 <USBH_Process+0x3cc>
      break;
 804ae92:	bf00      	nop
  }
  return USBH_OK;
 804ae94:	2300      	movs	r3, #0
}
 804ae96:	4618      	mov	r0, r3
 804ae98:	3710      	adds	r7, #16
 804ae9a:	46bd      	mov	sp, r7
 804ae9c:	bd80      	pop	{r7, pc}
 804ae9e:	bf00      	nop

0804aea0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804aea0:	b580      	push	{r7, lr}
 804aea2:	b088      	sub	sp, #32
 804aea4:	af04      	add	r7, sp, #16
 804aea6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804aea8:	2301      	movs	r3, #1
 804aeaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804aeac:	2301      	movs	r3, #1
 804aeae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804aeb0:	687b      	ldr	r3, [r7, #4]
 804aeb2:	785b      	ldrb	r3, [r3, #1]
 804aeb4:	2b07      	cmp	r3, #7
 804aeb6:	f200 81c1 	bhi.w	804b23c <USBH_HandleEnum+0x39c>
 804aeba:	a201      	add	r2, pc, #4	; (adr r2, 804aec0 <USBH_HandleEnum+0x20>)
 804aebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aec0:	0804aee1 	.word	0x0804aee1
 804aec4:	0804af9f 	.word	0x0804af9f
 804aec8:	0804b009 	.word	0x0804b009
 804aecc:	0804b097 	.word	0x0804b097
 804aed0:	0804b101 	.word	0x0804b101
 804aed4:	0804b171 	.word	0x0804b171
 804aed8:	0804b1b7 	.word	0x0804b1b7
 804aedc:	0804b1fd 	.word	0x0804b1fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804aee0:	2108      	movs	r1, #8
 804aee2:	6878      	ldr	r0, [r7, #4]
 804aee4:	f000 fa50 	bl	804b388 <USBH_Get_DevDesc>
 804aee8:	4603      	mov	r3, r0
 804aeea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804aeec:	7bbb      	ldrb	r3, [r7, #14]
 804aeee:	2b00      	cmp	r3, #0
 804aef0:	d130      	bne.n	804af54 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804aef2:	687b      	ldr	r3, [r7, #4]
 804aef4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804aef8:	687b      	ldr	r3, [r7, #4]
 804aefa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804aefc:	687b      	ldr	r3, [r7, #4]
 804aefe:	2201      	movs	r2, #1
 804af00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	7919      	ldrb	r1, [r3, #4]
 804af06:	687b      	ldr	r3, [r7, #4]
 804af08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804af0c:	687b      	ldr	r3, [r7, #4]
 804af0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804af12:	687a      	ldr	r2, [r7, #4]
 804af14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804af16:	b292      	uxth	r2, r2
 804af18:	9202      	str	r2, [sp, #8]
 804af1a:	2200      	movs	r2, #0
 804af1c:	9201      	str	r2, [sp, #4]
 804af1e:	9300      	str	r3, [sp, #0]
 804af20:	4603      	mov	r3, r0
 804af22:	2280      	movs	r2, #128	; 0x80
 804af24:	6878      	ldr	r0, [r7, #4]
 804af26:	f001 f865 	bl	804bff4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804af2a:	687b      	ldr	r3, [r7, #4]
 804af2c:	7959      	ldrb	r1, [r3, #5]
 804af2e:	687b      	ldr	r3, [r7, #4]
 804af30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804af34:	687b      	ldr	r3, [r7, #4]
 804af36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804af3a:	687a      	ldr	r2, [r7, #4]
 804af3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804af3e:	b292      	uxth	r2, r2
 804af40:	9202      	str	r2, [sp, #8]
 804af42:	2200      	movs	r2, #0
 804af44:	9201      	str	r2, [sp, #4]
 804af46:	9300      	str	r3, [sp, #0]
 804af48:	4603      	mov	r3, r0
 804af4a:	2200      	movs	r2, #0
 804af4c:	6878      	ldr	r0, [r7, #4]
 804af4e:	f001 f851 	bl	804bff4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804af52:	e175      	b.n	804b240 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804af54:	7bbb      	ldrb	r3, [r7, #14]
 804af56:	2b03      	cmp	r3, #3
 804af58:	f040 8172 	bne.w	804b240 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804af5c:	687b      	ldr	r3, [r7, #4]
 804af5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804af62:	3301      	adds	r3, #1
 804af64:	b2da      	uxtb	r2, r3
 804af66:	687b      	ldr	r3, [r7, #4]
 804af68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804af6c:	687b      	ldr	r3, [r7, #4]
 804af6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804af72:	2b03      	cmp	r3, #3
 804af74:	d903      	bls.n	804af7e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804af76:	687b      	ldr	r3, [r7, #4]
 804af78:	220d      	movs	r2, #13
 804af7a:	701a      	strb	r2, [r3, #0]
      break;
 804af7c:	e160      	b.n	804b240 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804af7e:	687b      	ldr	r3, [r7, #4]
 804af80:	795b      	ldrb	r3, [r3, #5]
 804af82:	4619      	mov	r1, r3
 804af84:	6878      	ldr	r0, [r7, #4]
 804af86:	f001 f885 	bl	804c094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804af8a:	687b      	ldr	r3, [r7, #4]
 804af8c:	791b      	ldrb	r3, [r3, #4]
 804af8e:	4619      	mov	r1, r3
 804af90:	6878      	ldr	r0, [r7, #4]
 804af92:	f001 f87f 	bl	804c094 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804af96:	687b      	ldr	r3, [r7, #4]
 804af98:	2200      	movs	r2, #0
 804af9a:	701a      	strb	r2, [r3, #0]
      break;
 804af9c:	e150      	b.n	804b240 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804af9e:	2112      	movs	r1, #18
 804afa0:	6878      	ldr	r0, [r7, #4]
 804afa2:	f000 f9f1 	bl	804b388 <USBH_Get_DevDesc>
 804afa6:	4603      	mov	r3, r0
 804afa8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804afaa:	7bbb      	ldrb	r3, [r7, #14]
 804afac:	2b00      	cmp	r3, #0
 804afae:	d103      	bne.n	804afb8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804afb0:	687b      	ldr	r3, [r7, #4]
 804afb2:	2202      	movs	r2, #2
 804afb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804afb6:	e145      	b.n	804b244 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804afb8:	7bbb      	ldrb	r3, [r7, #14]
 804afba:	2b03      	cmp	r3, #3
 804afbc:	f040 8142 	bne.w	804b244 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804afc0:	687b      	ldr	r3, [r7, #4]
 804afc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804afc6:	3301      	adds	r3, #1
 804afc8:	b2da      	uxtb	r2, r3
 804afca:	687b      	ldr	r3, [r7, #4]
 804afcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804afd0:	687b      	ldr	r3, [r7, #4]
 804afd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804afd6:	2b03      	cmp	r3, #3
 804afd8:	d903      	bls.n	804afe2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804afda:	687b      	ldr	r3, [r7, #4]
 804afdc:	220d      	movs	r2, #13
 804afde:	701a      	strb	r2, [r3, #0]
      break;
 804afe0:	e130      	b.n	804b244 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804afe2:	687b      	ldr	r3, [r7, #4]
 804afe4:	795b      	ldrb	r3, [r3, #5]
 804afe6:	4619      	mov	r1, r3
 804afe8:	6878      	ldr	r0, [r7, #4]
 804afea:	f001 f853 	bl	804c094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804afee:	687b      	ldr	r3, [r7, #4]
 804aff0:	791b      	ldrb	r3, [r3, #4]
 804aff2:	4619      	mov	r1, r3
 804aff4:	6878      	ldr	r0, [r7, #4]
 804aff6:	f001 f84d 	bl	804c094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804affa:	687b      	ldr	r3, [r7, #4]
 804affc:	2200      	movs	r2, #0
 804affe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b000:	687b      	ldr	r3, [r7, #4]
 804b002:	2200      	movs	r2, #0
 804b004:	701a      	strb	r2, [r3, #0]
      break;
 804b006:	e11d      	b.n	804b244 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804b008:	2101      	movs	r1, #1
 804b00a:	6878      	ldr	r0, [r7, #4]
 804b00c:	f000 fa68 	bl	804b4e0 <USBH_SetAddress>
 804b010:	4603      	mov	r3, r0
 804b012:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b014:	7bbb      	ldrb	r3, [r7, #14]
 804b016:	2b00      	cmp	r3, #0
 804b018:	d132      	bne.n	804b080 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804b01a:	2002      	movs	r0, #2
 804b01c:	f001 fb36 	bl	804c68c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804b020:	687b      	ldr	r3, [r7, #4]
 804b022:	2201      	movs	r2, #1
 804b024:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804b028:	687b      	ldr	r3, [r7, #4]
 804b02a:	2203      	movs	r2, #3
 804b02c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b02e:	687b      	ldr	r3, [r7, #4]
 804b030:	7919      	ldrb	r1, [r3, #4]
 804b032:	687b      	ldr	r3, [r7, #4]
 804b034:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b038:	687b      	ldr	r3, [r7, #4]
 804b03a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b03e:	687a      	ldr	r2, [r7, #4]
 804b040:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b042:	b292      	uxth	r2, r2
 804b044:	9202      	str	r2, [sp, #8]
 804b046:	2200      	movs	r2, #0
 804b048:	9201      	str	r2, [sp, #4]
 804b04a:	9300      	str	r3, [sp, #0]
 804b04c:	4603      	mov	r3, r0
 804b04e:	2280      	movs	r2, #128	; 0x80
 804b050:	6878      	ldr	r0, [r7, #4]
 804b052:	f000 ffcf 	bl	804bff4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b056:	687b      	ldr	r3, [r7, #4]
 804b058:	7959      	ldrb	r1, [r3, #5]
 804b05a:	687b      	ldr	r3, [r7, #4]
 804b05c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b060:	687b      	ldr	r3, [r7, #4]
 804b062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b066:	687a      	ldr	r2, [r7, #4]
 804b068:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b06a:	b292      	uxth	r2, r2
 804b06c:	9202      	str	r2, [sp, #8]
 804b06e:	2200      	movs	r2, #0
 804b070:	9201      	str	r2, [sp, #4]
 804b072:	9300      	str	r3, [sp, #0]
 804b074:	4603      	mov	r3, r0
 804b076:	2200      	movs	r2, #0
 804b078:	6878      	ldr	r0, [r7, #4]
 804b07a:	f000 ffbb 	bl	804bff4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804b07e:	e0e3      	b.n	804b248 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b080:	7bbb      	ldrb	r3, [r7, #14]
 804b082:	2b03      	cmp	r3, #3
 804b084:	f040 80e0 	bne.w	804b248 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804b088:	687b      	ldr	r3, [r7, #4]
 804b08a:	220d      	movs	r2, #13
 804b08c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804b08e:	687b      	ldr	r3, [r7, #4]
 804b090:	2200      	movs	r2, #0
 804b092:	705a      	strb	r2, [r3, #1]
      break;
 804b094:	e0d8      	b.n	804b248 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804b096:	2109      	movs	r1, #9
 804b098:	6878      	ldr	r0, [r7, #4]
 804b09a:	f000 f99d 	bl	804b3d8 <USBH_Get_CfgDesc>
 804b09e:	4603      	mov	r3, r0
 804b0a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b0a2:	7bbb      	ldrb	r3, [r7, #14]
 804b0a4:	2b00      	cmp	r3, #0
 804b0a6:	d103      	bne.n	804b0b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804b0a8:	687b      	ldr	r3, [r7, #4]
 804b0aa:	2204      	movs	r2, #4
 804b0ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b0ae:	e0cd      	b.n	804b24c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b0b0:	7bbb      	ldrb	r3, [r7, #14]
 804b0b2:	2b03      	cmp	r3, #3
 804b0b4:	f040 80ca 	bne.w	804b24c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804b0b8:	687b      	ldr	r3, [r7, #4]
 804b0ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b0be:	3301      	adds	r3, #1
 804b0c0:	b2da      	uxtb	r2, r3
 804b0c2:	687b      	ldr	r3, [r7, #4]
 804b0c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b0c8:	687b      	ldr	r3, [r7, #4]
 804b0ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b0ce:	2b03      	cmp	r3, #3
 804b0d0:	d903      	bls.n	804b0da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804b0d2:	687b      	ldr	r3, [r7, #4]
 804b0d4:	220d      	movs	r2, #13
 804b0d6:	701a      	strb	r2, [r3, #0]
      break;
 804b0d8:	e0b8      	b.n	804b24c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b0da:	687b      	ldr	r3, [r7, #4]
 804b0dc:	795b      	ldrb	r3, [r3, #5]
 804b0de:	4619      	mov	r1, r3
 804b0e0:	6878      	ldr	r0, [r7, #4]
 804b0e2:	f000 ffd7 	bl	804c094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b0e6:	687b      	ldr	r3, [r7, #4]
 804b0e8:	791b      	ldrb	r3, [r3, #4]
 804b0ea:	4619      	mov	r1, r3
 804b0ec:	6878      	ldr	r0, [r7, #4]
 804b0ee:	f000 ffd1 	bl	804c094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b0f2:	687b      	ldr	r3, [r7, #4]
 804b0f4:	2200      	movs	r2, #0
 804b0f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b0f8:	687b      	ldr	r3, [r7, #4]
 804b0fa:	2200      	movs	r2, #0
 804b0fc:	701a      	strb	r2, [r3, #0]
      break;
 804b0fe:	e0a5      	b.n	804b24c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804b100:	687b      	ldr	r3, [r7, #4]
 804b102:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804b106:	4619      	mov	r1, r3
 804b108:	6878      	ldr	r0, [r7, #4]
 804b10a:	f000 f965 	bl	804b3d8 <USBH_Get_CfgDesc>
 804b10e:	4603      	mov	r3, r0
 804b110:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b112:	7bbb      	ldrb	r3, [r7, #14]
 804b114:	2b00      	cmp	r3, #0
 804b116:	d103      	bne.n	804b120 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804b118:	687b      	ldr	r3, [r7, #4]
 804b11a:	2205      	movs	r2, #5
 804b11c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b11e:	e097      	b.n	804b250 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b120:	7bbb      	ldrb	r3, [r7, #14]
 804b122:	2b03      	cmp	r3, #3
 804b124:	f040 8094 	bne.w	804b250 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804b128:	687b      	ldr	r3, [r7, #4]
 804b12a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b12e:	3301      	adds	r3, #1
 804b130:	b2da      	uxtb	r2, r3
 804b132:	687b      	ldr	r3, [r7, #4]
 804b134:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b138:	687b      	ldr	r3, [r7, #4]
 804b13a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b13e:	2b03      	cmp	r3, #3
 804b140:	d903      	bls.n	804b14a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804b142:	687b      	ldr	r3, [r7, #4]
 804b144:	220d      	movs	r2, #13
 804b146:	701a      	strb	r2, [r3, #0]
      break;
 804b148:	e082      	b.n	804b250 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b14a:	687b      	ldr	r3, [r7, #4]
 804b14c:	795b      	ldrb	r3, [r3, #5]
 804b14e:	4619      	mov	r1, r3
 804b150:	6878      	ldr	r0, [r7, #4]
 804b152:	f000 ff9f 	bl	804c094 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b156:	687b      	ldr	r3, [r7, #4]
 804b158:	791b      	ldrb	r3, [r3, #4]
 804b15a:	4619      	mov	r1, r3
 804b15c:	6878      	ldr	r0, [r7, #4]
 804b15e:	f000 ff99 	bl	804c094 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b162:	687b      	ldr	r3, [r7, #4]
 804b164:	2200      	movs	r2, #0
 804b166:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b168:	687b      	ldr	r3, [r7, #4]
 804b16a:	2200      	movs	r2, #0
 804b16c:	701a      	strb	r2, [r3, #0]
      break;
 804b16e:	e06f      	b.n	804b250 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804b170:	687b      	ldr	r3, [r7, #4]
 804b172:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804b176:	2b00      	cmp	r3, #0
 804b178:	d019      	beq.n	804b1ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b17a:	687b      	ldr	r3, [r7, #4]
 804b17c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804b180:	687b      	ldr	r3, [r7, #4]
 804b182:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b186:	23ff      	movs	r3, #255	; 0xff
 804b188:	6878      	ldr	r0, [r7, #4]
 804b18a:	f000 f949 	bl	804b420 <USBH_Get_StringDesc>
 804b18e:	4603      	mov	r3, r0
 804b190:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b192:	7bbb      	ldrb	r3, [r7, #14]
 804b194:	2b00      	cmp	r3, #0
 804b196:	d103      	bne.n	804b1a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b198:	687b      	ldr	r3, [r7, #4]
 804b19a:	2206      	movs	r2, #6
 804b19c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b19e:	e059      	b.n	804b254 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b1a0:	7bbb      	ldrb	r3, [r7, #14]
 804b1a2:	2b03      	cmp	r3, #3
 804b1a4:	d156      	bne.n	804b254 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b1a6:	687b      	ldr	r3, [r7, #4]
 804b1a8:	2206      	movs	r2, #6
 804b1aa:	705a      	strb	r2, [r3, #1]
      break;
 804b1ac:	e052      	b.n	804b254 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b1ae:	687b      	ldr	r3, [r7, #4]
 804b1b0:	2206      	movs	r2, #6
 804b1b2:	705a      	strb	r2, [r3, #1]
      break;
 804b1b4:	e04e      	b.n	804b254 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804b1b6:	687b      	ldr	r3, [r7, #4]
 804b1b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804b1bc:	2b00      	cmp	r3, #0
 804b1be:	d019      	beq.n	804b1f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b1c0:	687b      	ldr	r3, [r7, #4]
 804b1c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804b1c6:	687b      	ldr	r3, [r7, #4]
 804b1c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b1cc:	23ff      	movs	r3, #255	; 0xff
 804b1ce:	6878      	ldr	r0, [r7, #4]
 804b1d0:	f000 f926 	bl	804b420 <USBH_Get_StringDesc>
 804b1d4:	4603      	mov	r3, r0
 804b1d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b1d8:	7bbb      	ldrb	r3, [r7, #14]
 804b1da:	2b00      	cmp	r3, #0
 804b1dc:	d103      	bne.n	804b1e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b1de:	687b      	ldr	r3, [r7, #4]
 804b1e0:	2207      	movs	r2, #7
 804b1e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b1e4:	e038      	b.n	804b258 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b1e6:	7bbb      	ldrb	r3, [r7, #14]
 804b1e8:	2b03      	cmp	r3, #3
 804b1ea:	d135      	bne.n	804b258 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b1ec:	687b      	ldr	r3, [r7, #4]
 804b1ee:	2207      	movs	r2, #7
 804b1f0:	705a      	strb	r2, [r3, #1]
      break;
 804b1f2:	e031      	b.n	804b258 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b1f4:	687b      	ldr	r3, [r7, #4]
 804b1f6:	2207      	movs	r2, #7
 804b1f8:	705a      	strb	r2, [r3, #1]
      break;
 804b1fa:	e02d      	b.n	804b258 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804b1fc:	687b      	ldr	r3, [r7, #4]
 804b1fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804b202:	2b00      	cmp	r3, #0
 804b204:	d017      	beq.n	804b236 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b206:	687b      	ldr	r3, [r7, #4]
 804b208:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804b20c:	687b      	ldr	r3, [r7, #4]
 804b20e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b212:	23ff      	movs	r3, #255	; 0xff
 804b214:	6878      	ldr	r0, [r7, #4]
 804b216:	f000 f903 	bl	804b420 <USBH_Get_StringDesc>
 804b21a:	4603      	mov	r3, r0
 804b21c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b21e:	7bbb      	ldrb	r3, [r7, #14]
 804b220:	2b00      	cmp	r3, #0
 804b222:	d102      	bne.n	804b22a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804b224:	2300      	movs	r3, #0
 804b226:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804b228:	e018      	b.n	804b25c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b22a:	7bbb      	ldrb	r3, [r7, #14]
 804b22c:	2b03      	cmp	r3, #3
 804b22e:	d115      	bne.n	804b25c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804b230:	2300      	movs	r3, #0
 804b232:	73fb      	strb	r3, [r7, #15]
      break;
 804b234:	e012      	b.n	804b25c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804b236:	2300      	movs	r3, #0
 804b238:	73fb      	strb	r3, [r7, #15]
      break;
 804b23a:	e00f      	b.n	804b25c <USBH_HandleEnum+0x3bc>

    default:
      break;
 804b23c:	bf00      	nop
 804b23e:	e00e      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b240:	bf00      	nop
 804b242:	e00c      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b244:	bf00      	nop
 804b246:	e00a      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b248:	bf00      	nop
 804b24a:	e008      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b24c:	bf00      	nop
 804b24e:	e006      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b250:	bf00      	nop
 804b252:	e004      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b254:	bf00      	nop
 804b256:	e002      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b258:	bf00      	nop
 804b25a:	e000      	b.n	804b25e <USBH_HandleEnum+0x3be>
      break;
 804b25c:	bf00      	nop
  }
  return Status;
 804b25e:	7bfb      	ldrb	r3, [r7, #15]
}
 804b260:	4618      	mov	r0, r3
 804b262:	3710      	adds	r7, #16
 804b264:	46bd      	mov	sp, r7
 804b266:	bd80      	pop	{r7, pc}

0804b268 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804b268:	b480      	push	{r7}
 804b26a:	b083      	sub	sp, #12
 804b26c:	af00      	add	r7, sp, #0
 804b26e:	6078      	str	r0, [r7, #4]
 804b270:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804b272:	687b      	ldr	r3, [r7, #4]
 804b274:	683a      	ldr	r2, [r7, #0]
 804b276:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804b27a:	bf00      	nop
 804b27c:	370c      	adds	r7, #12
 804b27e:	46bd      	mov	sp, r7
 804b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b284:	4770      	bx	lr

0804b286 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804b286:	b580      	push	{r7, lr}
 804b288:	b082      	sub	sp, #8
 804b28a:	af00      	add	r7, sp, #0
 804b28c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804b28e:	687b      	ldr	r3, [r7, #4]
 804b290:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b294:	1c5a      	adds	r2, r3, #1
 804b296:	687b      	ldr	r3, [r7, #4]
 804b298:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804b29c:	6878      	ldr	r0, [r7, #4]
 804b29e:	f000 f804 	bl	804b2aa <USBH_HandleSof>
}
 804b2a2:	bf00      	nop
 804b2a4:	3708      	adds	r7, #8
 804b2a6:	46bd      	mov	sp, r7
 804b2a8:	bd80      	pop	{r7, pc}

0804b2aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804b2aa:	b580      	push	{r7, lr}
 804b2ac:	b082      	sub	sp, #8
 804b2ae:	af00      	add	r7, sp, #0
 804b2b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804b2b2:	687b      	ldr	r3, [r7, #4]
 804b2b4:	781b      	ldrb	r3, [r3, #0]
 804b2b6:	b2db      	uxtb	r3, r3
 804b2b8:	2b0b      	cmp	r3, #11
 804b2ba:	d10a      	bne.n	804b2d2 <USBH_HandleSof+0x28>
 804b2bc:	687b      	ldr	r3, [r7, #4]
 804b2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2c2:	2b00      	cmp	r3, #0
 804b2c4:	d005      	beq.n	804b2d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804b2c6:	687b      	ldr	r3, [r7, #4]
 804b2c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b2cc:	699b      	ldr	r3, [r3, #24]
 804b2ce:	6878      	ldr	r0, [r7, #4]
 804b2d0:	4798      	blx	r3
  }
}
 804b2d2:	bf00      	nop
 804b2d4:	3708      	adds	r7, #8
 804b2d6:	46bd      	mov	sp, r7
 804b2d8:	bd80      	pop	{r7, pc}

0804b2da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804b2da:	b480      	push	{r7}
 804b2dc:	b083      	sub	sp, #12
 804b2de:	af00      	add	r7, sp, #0
 804b2e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804b2e2:	687b      	ldr	r3, [r7, #4]
 804b2e4:	2201      	movs	r2, #1
 804b2e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804b2ea:	bf00      	nop
}
 804b2ec:	370c      	adds	r7, #12
 804b2ee:	46bd      	mov	sp, r7
 804b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b2f4:	4770      	bx	lr

0804b2f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804b2f6:	b480      	push	{r7}
 804b2f8:	b083      	sub	sp, #12
 804b2fa:	af00      	add	r7, sp, #0
 804b2fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804b2fe:	687b      	ldr	r3, [r7, #4]
 804b300:	2200      	movs	r2, #0
 804b302:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804b306:	bf00      	nop
}
 804b308:	370c      	adds	r7, #12
 804b30a:	46bd      	mov	sp, r7
 804b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b310:	4770      	bx	lr

0804b312 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804b312:	b480      	push	{r7}
 804b314:	b083      	sub	sp, #12
 804b316:	af00      	add	r7, sp, #0
 804b318:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804b31a:	687b      	ldr	r3, [r7, #4]
 804b31c:	2201      	movs	r2, #1
 804b31e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804b322:	687b      	ldr	r3, [r7, #4]
 804b324:	2200      	movs	r2, #0
 804b326:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804b32a:	687b      	ldr	r3, [r7, #4]
 804b32c:	2200      	movs	r2, #0
 804b32e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b332:	2300      	movs	r3, #0
}
 804b334:	4618      	mov	r0, r3
 804b336:	370c      	adds	r7, #12
 804b338:	46bd      	mov	sp, r7
 804b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b33e:	4770      	bx	lr

0804b340 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804b340:	b580      	push	{r7, lr}
 804b342:	b082      	sub	sp, #8
 804b344:	af00      	add	r7, sp, #0
 804b346:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804b348:	687b      	ldr	r3, [r7, #4]
 804b34a:	2201      	movs	r2, #1
 804b34c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804b350:	687b      	ldr	r3, [r7, #4]
 804b352:	2200      	movs	r2, #0
 804b354:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804b358:	687b      	ldr	r3, [r7, #4]
 804b35a:	2200      	movs	r2, #0
 804b35c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804b360:	6878      	ldr	r0, [r7, #4]
 804b362:	f001 f84a 	bl	804c3fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b366:	687b      	ldr	r3, [r7, #4]
 804b368:	791b      	ldrb	r3, [r3, #4]
 804b36a:	4619      	mov	r1, r3
 804b36c:	6878      	ldr	r0, [r7, #4]
 804b36e:	f000 fe91 	bl	804c094 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b372:	687b      	ldr	r3, [r7, #4]
 804b374:	795b      	ldrb	r3, [r3, #5]
 804b376:	4619      	mov	r1, r3
 804b378:	6878      	ldr	r0, [r7, #4]
 804b37a:	f000 fe8b 	bl	804c094 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b37e:	2300      	movs	r3, #0
}
 804b380:	4618      	mov	r0, r3
 804b382:	3708      	adds	r7, #8
 804b384:	46bd      	mov	sp, r7
 804b386:	bd80      	pop	{r7, pc}

0804b388 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804b388:	b580      	push	{r7, lr}
 804b38a:	b086      	sub	sp, #24
 804b38c:	af02      	add	r7, sp, #8
 804b38e:	6078      	str	r0, [r7, #4]
 804b390:	460b      	mov	r3, r1
 804b392:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804b394:	687b      	ldr	r3, [r7, #4]
 804b396:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804b39a:	78fb      	ldrb	r3, [r7, #3]
 804b39c:	b29b      	uxth	r3, r3
 804b39e:	9300      	str	r3, [sp, #0]
 804b3a0:	4613      	mov	r3, r2
 804b3a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 804b3a6:	2100      	movs	r1, #0
 804b3a8:	6878      	ldr	r0, [r7, #4]
 804b3aa:	f000 f864 	bl	804b476 <USBH_GetDescriptor>
 804b3ae:	4603      	mov	r3, r0
 804b3b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804b3b2:	7bfb      	ldrb	r3, [r7, #15]
 804b3b4:	2b00      	cmp	r3, #0
 804b3b6:	d10a      	bne.n	804b3ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804b3b8:	687b      	ldr	r3, [r7, #4]
 804b3ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 804b3be:	687b      	ldr	r3, [r7, #4]
 804b3c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b3c4:	78fa      	ldrb	r2, [r7, #3]
 804b3c6:	b292      	uxth	r2, r2
 804b3c8:	4619      	mov	r1, r3
 804b3ca:	f000 f918 	bl	804b5fe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804b3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 804b3d0:	4618      	mov	r0, r3
 804b3d2:	3710      	adds	r7, #16
 804b3d4:	46bd      	mov	sp, r7
 804b3d6:	bd80      	pop	{r7, pc}

0804b3d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804b3d8:	b580      	push	{r7, lr}
 804b3da:	b086      	sub	sp, #24
 804b3dc:	af02      	add	r7, sp, #8
 804b3de:	6078      	str	r0, [r7, #4]
 804b3e0:	460b      	mov	r3, r1
 804b3e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804b3e4:	687b      	ldr	r3, [r7, #4]
 804b3e6:	331c      	adds	r3, #28
 804b3e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804b3ea:	887b      	ldrh	r3, [r7, #2]
 804b3ec:	9300      	str	r3, [sp, #0]
 804b3ee:	68bb      	ldr	r3, [r7, #8]
 804b3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 804b3f4:	2100      	movs	r1, #0
 804b3f6:	6878      	ldr	r0, [r7, #4]
 804b3f8:	f000 f83d 	bl	804b476 <USBH_GetDescriptor>
 804b3fc:	4603      	mov	r3, r0
 804b3fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804b400:	7bfb      	ldrb	r3, [r7, #15]
 804b402:	2b00      	cmp	r3, #0
 804b404:	d107      	bne.n	804b416 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804b406:	887b      	ldrh	r3, [r7, #2]
 804b408:	461a      	mov	r2, r3
 804b40a:	68b9      	ldr	r1, [r7, #8]
 804b40c:	6878      	ldr	r0, [r7, #4]
 804b40e:	f000 f987 	bl	804b720 <USBH_ParseCfgDesc>
 804b412:	4603      	mov	r3, r0
 804b414:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b416:	7bfb      	ldrb	r3, [r7, #15]
}
 804b418:	4618      	mov	r0, r3
 804b41a:	3710      	adds	r7, #16
 804b41c:	46bd      	mov	sp, r7
 804b41e:	bd80      	pop	{r7, pc}

0804b420 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804b420:	b580      	push	{r7, lr}
 804b422:	b088      	sub	sp, #32
 804b424:	af02      	add	r7, sp, #8
 804b426:	60f8      	str	r0, [r7, #12]
 804b428:	607a      	str	r2, [r7, #4]
 804b42a:	461a      	mov	r2, r3
 804b42c:	460b      	mov	r3, r1
 804b42e:	72fb      	strb	r3, [r7, #11]
 804b430:	4613      	mov	r3, r2
 804b432:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804b434:	7afb      	ldrb	r3, [r7, #11]
 804b436:	b29b      	uxth	r3, r3
 804b438:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804b43c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804b43e:	68fb      	ldr	r3, [r7, #12]
 804b440:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804b444:	893b      	ldrh	r3, [r7, #8]
 804b446:	9300      	str	r3, [sp, #0]
 804b448:	460b      	mov	r3, r1
 804b44a:	2100      	movs	r1, #0
 804b44c:	68f8      	ldr	r0, [r7, #12]
 804b44e:	f000 f812 	bl	804b476 <USBH_GetDescriptor>
 804b452:	4603      	mov	r3, r0
 804b454:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804b456:	7dfb      	ldrb	r3, [r7, #23]
 804b458:	2b00      	cmp	r3, #0
 804b45a:	d107      	bne.n	804b46c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804b45c:	68fb      	ldr	r3, [r7, #12]
 804b45e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b462:	893a      	ldrh	r2, [r7, #8]
 804b464:	6879      	ldr	r1, [r7, #4]
 804b466:	4618      	mov	r0, r3
 804b468:	f000 fb24 	bl	804bab4 <USBH_ParseStringDesc>
  }

  return status;
 804b46c:	7dfb      	ldrb	r3, [r7, #23]
}
 804b46e:	4618      	mov	r0, r3
 804b470:	3718      	adds	r7, #24
 804b472:	46bd      	mov	sp, r7
 804b474:	bd80      	pop	{r7, pc}

0804b476 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804b476:	b580      	push	{r7, lr}
 804b478:	b084      	sub	sp, #16
 804b47a:	af00      	add	r7, sp, #0
 804b47c:	60f8      	str	r0, [r7, #12]
 804b47e:	607b      	str	r3, [r7, #4]
 804b480:	460b      	mov	r3, r1
 804b482:	72fb      	strb	r3, [r7, #11]
 804b484:	4613      	mov	r3, r2
 804b486:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804b488:	68fb      	ldr	r3, [r7, #12]
 804b48a:	789b      	ldrb	r3, [r3, #2]
 804b48c:	2b01      	cmp	r3, #1
 804b48e:	d11c      	bne.n	804b4ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804b490:	7afb      	ldrb	r3, [r7, #11]
 804b492:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804b496:	b2da      	uxtb	r2, r3
 804b498:	68fb      	ldr	r3, [r7, #12]
 804b49a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804b49c:	68fb      	ldr	r3, [r7, #12]
 804b49e:	2206      	movs	r2, #6
 804b4a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804b4a2:	68fb      	ldr	r3, [r7, #12]
 804b4a4:	893a      	ldrh	r2, [r7, #8]
 804b4a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804b4a8:	893b      	ldrh	r3, [r7, #8]
 804b4aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804b4ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804b4b2:	d104      	bne.n	804b4be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804b4b4:	68fb      	ldr	r3, [r7, #12]
 804b4b6:	f240 4209 	movw	r2, #1033	; 0x409
 804b4ba:	829a      	strh	r2, [r3, #20]
 804b4bc:	e002      	b.n	804b4c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804b4be:	68fb      	ldr	r3, [r7, #12]
 804b4c0:	2200      	movs	r2, #0
 804b4c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804b4c4:	68fb      	ldr	r3, [r7, #12]
 804b4c6:	8b3a      	ldrh	r2, [r7, #24]
 804b4c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804b4ca:	8b3b      	ldrh	r3, [r7, #24]
 804b4cc:	461a      	mov	r2, r3
 804b4ce:	6879      	ldr	r1, [r7, #4]
 804b4d0:	68f8      	ldr	r0, [r7, #12]
 804b4d2:	f000 fb3d 	bl	804bb50 <USBH_CtlReq>
 804b4d6:	4603      	mov	r3, r0
}
 804b4d8:	4618      	mov	r0, r3
 804b4da:	3710      	adds	r7, #16
 804b4dc:	46bd      	mov	sp, r7
 804b4de:	bd80      	pop	{r7, pc}

0804b4e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804b4e0:	b580      	push	{r7, lr}
 804b4e2:	b082      	sub	sp, #8
 804b4e4:	af00      	add	r7, sp, #0
 804b4e6:	6078      	str	r0, [r7, #4]
 804b4e8:	460b      	mov	r3, r1
 804b4ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b4ec:	687b      	ldr	r3, [r7, #4]
 804b4ee:	789b      	ldrb	r3, [r3, #2]
 804b4f0:	2b01      	cmp	r3, #1
 804b4f2:	d10f      	bne.n	804b514 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804b4f4:	687b      	ldr	r3, [r7, #4]
 804b4f6:	2200      	movs	r2, #0
 804b4f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804b4fa:	687b      	ldr	r3, [r7, #4]
 804b4fc:	2205      	movs	r2, #5
 804b4fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804b500:	78fb      	ldrb	r3, [r7, #3]
 804b502:	b29a      	uxth	r2, r3
 804b504:	687b      	ldr	r3, [r7, #4]
 804b506:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b508:	687b      	ldr	r3, [r7, #4]
 804b50a:	2200      	movs	r2, #0
 804b50c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b50e:	687b      	ldr	r3, [r7, #4]
 804b510:	2200      	movs	r2, #0
 804b512:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b514:	2200      	movs	r2, #0
 804b516:	2100      	movs	r1, #0
 804b518:	6878      	ldr	r0, [r7, #4]
 804b51a:	f000 fb19 	bl	804bb50 <USBH_CtlReq>
 804b51e:	4603      	mov	r3, r0
}
 804b520:	4618      	mov	r0, r3
 804b522:	3708      	adds	r7, #8
 804b524:	46bd      	mov	sp, r7
 804b526:	bd80      	pop	{r7, pc}

0804b528 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804b528:	b580      	push	{r7, lr}
 804b52a:	b082      	sub	sp, #8
 804b52c:	af00      	add	r7, sp, #0
 804b52e:	6078      	str	r0, [r7, #4]
 804b530:	460b      	mov	r3, r1
 804b532:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804b534:	687b      	ldr	r3, [r7, #4]
 804b536:	789b      	ldrb	r3, [r3, #2]
 804b538:	2b01      	cmp	r3, #1
 804b53a:	d10e      	bne.n	804b55a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b53c:	687b      	ldr	r3, [r7, #4]
 804b53e:	2200      	movs	r2, #0
 804b540:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804b542:	687b      	ldr	r3, [r7, #4]
 804b544:	2209      	movs	r2, #9
 804b546:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804b548:	687b      	ldr	r3, [r7, #4]
 804b54a:	887a      	ldrh	r2, [r7, #2]
 804b54c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b54e:	687b      	ldr	r3, [r7, #4]
 804b550:	2200      	movs	r2, #0
 804b552:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b554:	687b      	ldr	r3, [r7, #4]
 804b556:	2200      	movs	r2, #0
 804b558:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b55a:	2200      	movs	r2, #0
 804b55c:	2100      	movs	r1, #0
 804b55e:	6878      	ldr	r0, [r7, #4]
 804b560:	f000 faf6 	bl	804bb50 <USBH_CtlReq>
 804b564:	4603      	mov	r3, r0
}
 804b566:	4618      	mov	r0, r3
 804b568:	3708      	adds	r7, #8
 804b56a:	46bd      	mov	sp, r7
 804b56c:	bd80      	pop	{r7, pc}

0804b56e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804b56e:	b580      	push	{r7, lr}
 804b570:	b082      	sub	sp, #8
 804b572:	af00      	add	r7, sp, #0
 804b574:	6078      	str	r0, [r7, #4]
 804b576:	460b      	mov	r3, r1
 804b578:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b57a:	687b      	ldr	r3, [r7, #4]
 804b57c:	789b      	ldrb	r3, [r3, #2]
 804b57e:	2b01      	cmp	r3, #1
 804b580:	d10f      	bne.n	804b5a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804b582:	687b      	ldr	r3, [r7, #4]
 804b584:	2200      	movs	r2, #0
 804b586:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804b588:	687b      	ldr	r3, [r7, #4]
 804b58a:	2203      	movs	r2, #3
 804b58c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804b58e:	78fb      	ldrb	r3, [r7, #3]
 804b590:	b29a      	uxth	r2, r3
 804b592:	687b      	ldr	r3, [r7, #4]
 804b594:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804b596:	687b      	ldr	r3, [r7, #4]
 804b598:	2200      	movs	r2, #0
 804b59a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b59c:	687b      	ldr	r3, [r7, #4]
 804b59e:	2200      	movs	r2, #0
 804b5a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804b5a2:	2200      	movs	r2, #0
 804b5a4:	2100      	movs	r1, #0
 804b5a6:	6878      	ldr	r0, [r7, #4]
 804b5a8:	f000 fad2 	bl	804bb50 <USBH_CtlReq>
 804b5ac:	4603      	mov	r3, r0
}
 804b5ae:	4618      	mov	r0, r3
 804b5b0:	3708      	adds	r7, #8
 804b5b2:	46bd      	mov	sp, r7
 804b5b4:	bd80      	pop	{r7, pc}

0804b5b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804b5b6:	b580      	push	{r7, lr}
 804b5b8:	b082      	sub	sp, #8
 804b5ba:	af00      	add	r7, sp, #0
 804b5bc:	6078      	str	r0, [r7, #4]
 804b5be:	460b      	mov	r3, r1
 804b5c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804b5c2:	687b      	ldr	r3, [r7, #4]
 804b5c4:	789b      	ldrb	r3, [r3, #2]
 804b5c6:	2b01      	cmp	r3, #1
 804b5c8:	d10f      	bne.n	804b5ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804b5ca:	687b      	ldr	r3, [r7, #4]
 804b5cc:	2202      	movs	r2, #2
 804b5ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804b5d0:	687b      	ldr	r3, [r7, #4]
 804b5d2:	2201      	movs	r2, #1
 804b5d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804b5d6:	687b      	ldr	r3, [r7, #4]
 804b5d8:	2200      	movs	r2, #0
 804b5da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804b5dc:	78fb      	ldrb	r3, [r7, #3]
 804b5de:	b29a      	uxth	r2, r3
 804b5e0:	687b      	ldr	r3, [r7, #4]
 804b5e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804b5e4:	687b      	ldr	r3, [r7, #4]
 804b5e6:	2200      	movs	r2, #0
 804b5e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804b5ea:	2200      	movs	r2, #0
 804b5ec:	2100      	movs	r1, #0
 804b5ee:	6878      	ldr	r0, [r7, #4]
 804b5f0:	f000 faae 	bl	804bb50 <USBH_CtlReq>
 804b5f4:	4603      	mov	r3, r0
}
 804b5f6:	4618      	mov	r0, r3
 804b5f8:	3708      	adds	r7, #8
 804b5fa:	46bd      	mov	sp, r7
 804b5fc:	bd80      	pop	{r7, pc}

0804b5fe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804b5fe:	b480      	push	{r7}
 804b600:	b085      	sub	sp, #20
 804b602:	af00      	add	r7, sp, #0
 804b604:	60f8      	str	r0, [r7, #12]
 804b606:	60b9      	str	r1, [r7, #8]
 804b608:	4613      	mov	r3, r2
 804b60a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804b60c:	68bb      	ldr	r3, [r7, #8]
 804b60e:	781a      	ldrb	r2, [r3, #0]
 804b610:	68fb      	ldr	r3, [r7, #12]
 804b612:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804b614:	68bb      	ldr	r3, [r7, #8]
 804b616:	785a      	ldrb	r2, [r3, #1]
 804b618:	68fb      	ldr	r3, [r7, #12]
 804b61a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804b61c:	68bb      	ldr	r3, [r7, #8]
 804b61e:	3302      	adds	r3, #2
 804b620:	781b      	ldrb	r3, [r3, #0]
 804b622:	b29a      	uxth	r2, r3
 804b624:	68bb      	ldr	r3, [r7, #8]
 804b626:	3303      	adds	r3, #3
 804b628:	781b      	ldrb	r3, [r3, #0]
 804b62a:	b29b      	uxth	r3, r3
 804b62c:	021b      	lsls	r3, r3, #8
 804b62e:	b29b      	uxth	r3, r3
 804b630:	4313      	orrs	r3, r2
 804b632:	b29a      	uxth	r2, r3
 804b634:	68fb      	ldr	r3, [r7, #12]
 804b636:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804b638:	68bb      	ldr	r3, [r7, #8]
 804b63a:	791a      	ldrb	r2, [r3, #4]
 804b63c:	68fb      	ldr	r3, [r7, #12]
 804b63e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804b640:	68bb      	ldr	r3, [r7, #8]
 804b642:	795a      	ldrb	r2, [r3, #5]
 804b644:	68fb      	ldr	r3, [r7, #12]
 804b646:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804b648:	68bb      	ldr	r3, [r7, #8]
 804b64a:	799a      	ldrb	r2, [r3, #6]
 804b64c:	68fb      	ldr	r3, [r7, #12]
 804b64e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804b650:	68bb      	ldr	r3, [r7, #8]
 804b652:	79da      	ldrb	r2, [r3, #7]
 804b654:	68fb      	ldr	r3, [r7, #12]
 804b656:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804b658:	68fb      	ldr	r3, [r7, #12]
 804b65a:	79db      	ldrb	r3, [r3, #7]
 804b65c:	2b20      	cmp	r3, #32
 804b65e:	dc11      	bgt.n	804b684 <USBH_ParseDevDesc+0x86>
 804b660:	2b08      	cmp	r3, #8
 804b662:	db16      	blt.n	804b692 <USBH_ParseDevDesc+0x94>
 804b664:	3b08      	subs	r3, #8
 804b666:	2201      	movs	r2, #1
 804b668:	fa02 f303 	lsl.w	r3, r2, r3
 804b66c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804b670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804b674:	2b00      	cmp	r3, #0
 804b676:	bf14      	ite	ne
 804b678:	2301      	movne	r3, #1
 804b67a:	2300      	moveq	r3, #0
 804b67c:	b2db      	uxtb	r3, r3
 804b67e:	2b00      	cmp	r3, #0
 804b680:	d102      	bne.n	804b688 <USBH_ParseDevDesc+0x8a>
 804b682:	e006      	b.n	804b692 <USBH_ParseDevDesc+0x94>
 804b684:	2b40      	cmp	r3, #64	; 0x40
 804b686:	d104      	bne.n	804b692 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804b688:	68fb      	ldr	r3, [r7, #12]
 804b68a:	79da      	ldrb	r2, [r3, #7]
 804b68c:	68fb      	ldr	r3, [r7, #12]
 804b68e:	71da      	strb	r2, [r3, #7]
      break;
 804b690:	e003      	b.n	804b69a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804b692:	68fb      	ldr	r3, [r7, #12]
 804b694:	2240      	movs	r2, #64	; 0x40
 804b696:	71da      	strb	r2, [r3, #7]
      break;
 804b698:	bf00      	nop
  }

  if (length > 8U)
 804b69a:	88fb      	ldrh	r3, [r7, #6]
 804b69c:	2b08      	cmp	r3, #8
 804b69e:	d939      	bls.n	804b714 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804b6a0:	68bb      	ldr	r3, [r7, #8]
 804b6a2:	3308      	adds	r3, #8
 804b6a4:	781b      	ldrb	r3, [r3, #0]
 804b6a6:	b29a      	uxth	r2, r3
 804b6a8:	68bb      	ldr	r3, [r7, #8]
 804b6aa:	3309      	adds	r3, #9
 804b6ac:	781b      	ldrb	r3, [r3, #0]
 804b6ae:	b29b      	uxth	r3, r3
 804b6b0:	021b      	lsls	r3, r3, #8
 804b6b2:	b29b      	uxth	r3, r3
 804b6b4:	4313      	orrs	r3, r2
 804b6b6:	b29a      	uxth	r2, r3
 804b6b8:	68fb      	ldr	r3, [r7, #12]
 804b6ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804b6bc:	68bb      	ldr	r3, [r7, #8]
 804b6be:	330a      	adds	r3, #10
 804b6c0:	781b      	ldrb	r3, [r3, #0]
 804b6c2:	b29a      	uxth	r2, r3
 804b6c4:	68bb      	ldr	r3, [r7, #8]
 804b6c6:	330b      	adds	r3, #11
 804b6c8:	781b      	ldrb	r3, [r3, #0]
 804b6ca:	b29b      	uxth	r3, r3
 804b6cc:	021b      	lsls	r3, r3, #8
 804b6ce:	b29b      	uxth	r3, r3
 804b6d0:	4313      	orrs	r3, r2
 804b6d2:	b29a      	uxth	r2, r3
 804b6d4:	68fb      	ldr	r3, [r7, #12]
 804b6d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804b6d8:	68bb      	ldr	r3, [r7, #8]
 804b6da:	330c      	adds	r3, #12
 804b6dc:	781b      	ldrb	r3, [r3, #0]
 804b6de:	b29a      	uxth	r2, r3
 804b6e0:	68bb      	ldr	r3, [r7, #8]
 804b6e2:	330d      	adds	r3, #13
 804b6e4:	781b      	ldrb	r3, [r3, #0]
 804b6e6:	b29b      	uxth	r3, r3
 804b6e8:	021b      	lsls	r3, r3, #8
 804b6ea:	b29b      	uxth	r3, r3
 804b6ec:	4313      	orrs	r3, r2
 804b6ee:	b29a      	uxth	r2, r3
 804b6f0:	68fb      	ldr	r3, [r7, #12]
 804b6f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804b6f4:	68bb      	ldr	r3, [r7, #8]
 804b6f6:	7b9a      	ldrb	r2, [r3, #14]
 804b6f8:	68fb      	ldr	r3, [r7, #12]
 804b6fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804b6fc:	68bb      	ldr	r3, [r7, #8]
 804b6fe:	7bda      	ldrb	r2, [r3, #15]
 804b700:	68fb      	ldr	r3, [r7, #12]
 804b702:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804b704:	68bb      	ldr	r3, [r7, #8]
 804b706:	7c1a      	ldrb	r2, [r3, #16]
 804b708:	68fb      	ldr	r3, [r7, #12]
 804b70a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804b70c:	68bb      	ldr	r3, [r7, #8]
 804b70e:	7c5a      	ldrb	r2, [r3, #17]
 804b710:	68fb      	ldr	r3, [r7, #12]
 804b712:	745a      	strb	r2, [r3, #17]
  }
}
 804b714:	bf00      	nop
 804b716:	3714      	adds	r7, #20
 804b718:	46bd      	mov	sp, r7
 804b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b71e:	4770      	bx	lr

0804b720 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804b720:	b580      	push	{r7, lr}
 804b722:	b08c      	sub	sp, #48	; 0x30
 804b724:	af00      	add	r7, sp, #0
 804b726:	60f8      	str	r0, [r7, #12]
 804b728:	60b9      	str	r1, [r7, #8]
 804b72a:	4613      	mov	r3, r2
 804b72c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804b72e:	68fb      	ldr	r3, [r7, #12]
 804b730:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b734:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804b736:	2300      	movs	r3, #0
 804b738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804b73c:	68bb      	ldr	r3, [r7, #8]
 804b73e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804b740:	2300      	movs	r3, #0
 804b742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804b746:	2300      	movs	r3, #0
 804b748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804b74c:	68bb      	ldr	r3, [r7, #8]
 804b74e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804b750:	68bb      	ldr	r3, [r7, #8]
 804b752:	781a      	ldrb	r2, [r3, #0]
 804b754:	6a3b      	ldr	r3, [r7, #32]
 804b756:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804b758:	68bb      	ldr	r3, [r7, #8]
 804b75a:	785a      	ldrb	r2, [r3, #1]
 804b75c:	6a3b      	ldr	r3, [r7, #32]
 804b75e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804b760:	68bb      	ldr	r3, [r7, #8]
 804b762:	3302      	adds	r3, #2
 804b764:	781b      	ldrb	r3, [r3, #0]
 804b766:	b29a      	uxth	r2, r3
 804b768:	68bb      	ldr	r3, [r7, #8]
 804b76a:	3303      	adds	r3, #3
 804b76c:	781b      	ldrb	r3, [r3, #0]
 804b76e:	b29b      	uxth	r3, r3
 804b770:	021b      	lsls	r3, r3, #8
 804b772:	b29b      	uxth	r3, r3
 804b774:	4313      	orrs	r3, r2
 804b776:	b29b      	uxth	r3, r3
 804b778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b77c:	bf28      	it	cs
 804b77e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804b782:	b29a      	uxth	r2, r3
 804b784:	6a3b      	ldr	r3, [r7, #32]
 804b786:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804b788:	68bb      	ldr	r3, [r7, #8]
 804b78a:	791a      	ldrb	r2, [r3, #4]
 804b78c:	6a3b      	ldr	r3, [r7, #32]
 804b78e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804b790:	68bb      	ldr	r3, [r7, #8]
 804b792:	795a      	ldrb	r2, [r3, #5]
 804b794:	6a3b      	ldr	r3, [r7, #32]
 804b796:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804b798:	68bb      	ldr	r3, [r7, #8]
 804b79a:	799a      	ldrb	r2, [r3, #6]
 804b79c:	6a3b      	ldr	r3, [r7, #32]
 804b79e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804b7a0:	68bb      	ldr	r3, [r7, #8]
 804b7a2:	79da      	ldrb	r2, [r3, #7]
 804b7a4:	6a3b      	ldr	r3, [r7, #32]
 804b7a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804b7a8:	68bb      	ldr	r3, [r7, #8]
 804b7aa:	7a1a      	ldrb	r2, [r3, #8]
 804b7ac:	6a3b      	ldr	r3, [r7, #32]
 804b7ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804b7b0:	6a3b      	ldr	r3, [r7, #32]
 804b7b2:	781b      	ldrb	r3, [r3, #0]
 804b7b4:	2b09      	cmp	r3, #9
 804b7b6:	d002      	beq.n	804b7be <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804b7b8:	6a3b      	ldr	r3, [r7, #32]
 804b7ba:	2209      	movs	r2, #9
 804b7bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804b7be:	88fb      	ldrh	r3, [r7, #6]
 804b7c0:	2b09      	cmp	r3, #9
 804b7c2:	f240 809d 	bls.w	804b900 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804b7c6:	2309      	movs	r3, #9
 804b7c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b7ca:	2300      	movs	r3, #0
 804b7cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b7ce:	e081      	b.n	804b8d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b7d0:	f107 0316 	add.w	r3, r7, #22
 804b7d4:	4619      	mov	r1, r3
 804b7d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b7d8:	f000 f99f 	bl	804bb1a <USBH_GetNextDesc>
 804b7dc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7e0:	785b      	ldrb	r3, [r3, #1]
 804b7e2:	2b04      	cmp	r3, #4
 804b7e4:	d176      	bne.n	804b8d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7e8:	781b      	ldrb	r3, [r3, #0]
 804b7ea:	2b09      	cmp	r3, #9
 804b7ec:	d002      	beq.n	804b7f4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b7f0:	2209      	movs	r2, #9
 804b7f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804b7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b7f8:	221a      	movs	r2, #26
 804b7fa:	fb02 f303 	mul.w	r3, r2, r3
 804b7fe:	3308      	adds	r3, #8
 804b800:	6a3a      	ldr	r2, [r7, #32]
 804b802:	4413      	add	r3, r2
 804b804:	3302      	adds	r3, #2
 804b806:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804b808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804b80a:	69f8      	ldr	r0, [r7, #28]
 804b80c:	f000 f87e 	bl	804b90c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804b810:	2300      	movs	r3, #0
 804b812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804b816:	2300      	movs	r3, #0
 804b818:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b81a:	e043      	b.n	804b8a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804b81c:	f107 0316 	add.w	r3, r7, #22
 804b820:	4619      	mov	r1, r3
 804b822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804b824:	f000 f979 	bl	804bb1a <USBH_GetNextDesc>
 804b828:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b82c:	785b      	ldrb	r3, [r3, #1]
 804b82e:	2b05      	cmp	r3, #5
 804b830:	d138      	bne.n	804b8a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804b832:	69fb      	ldr	r3, [r7, #28]
 804b834:	795b      	ldrb	r3, [r3, #5]
 804b836:	2b01      	cmp	r3, #1
 804b838:	d10f      	bne.n	804b85a <USBH_ParseCfgDesc+0x13a>
 804b83a:	69fb      	ldr	r3, [r7, #28]
 804b83c:	799b      	ldrb	r3, [r3, #6]
 804b83e:	2b02      	cmp	r3, #2
 804b840:	d10b      	bne.n	804b85a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b842:	69fb      	ldr	r3, [r7, #28]
 804b844:	79db      	ldrb	r3, [r3, #7]
 804b846:	2b00      	cmp	r3, #0
 804b848:	d10f      	bne.n	804b86a <USBH_ParseCfgDesc+0x14a>
 804b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b84c:	781b      	ldrb	r3, [r3, #0]
 804b84e:	2b09      	cmp	r3, #9
 804b850:	d00b      	beq.n	804b86a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b854:	2209      	movs	r2, #9
 804b856:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b858:	e007      	b.n	804b86a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b85c:	781b      	ldrb	r3, [r3, #0]
 804b85e:	2b07      	cmp	r3, #7
 804b860:	d004      	beq.n	804b86c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804b864:	2207      	movs	r2, #7
 804b866:	701a      	strb	r2, [r3, #0]
 804b868:	e000      	b.n	804b86c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804b86a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804b86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b870:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b874:	3201      	adds	r2, #1
 804b876:	00d2      	lsls	r2, r2, #3
 804b878:	211a      	movs	r1, #26
 804b87a:	fb01 f303 	mul.w	r3, r1, r3
 804b87e:	4413      	add	r3, r2
 804b880:	3308      	adds	r3, #8
 804b882:	6a3a      	ldr	r2, [r7, #32]
 804b884:	4413      	add	r3, r2
 804b886:	3304      	adds	r3, #4
 804b888:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804b88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804b88c:	69b9      	ldr	r1, [r7, #24]
 804b88e:	68f8      	ldr	r0, [r7, #12]
 804b890:	f000 f86b 	bl	804b96a <USBH_ParseEPDesc>
 804b894:	4603      	mov	r3, r0
 804b896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804b89a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804b89e:	3301      	adds	r3, #1
 804b8a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804b8a4:	69fb      	ldr	r3, [r7, #28]
 804b8a6:	791b      	ldrb	r3, [r3, #4]
 804b8a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b8ac:	429a      	cmp	r2, r3
 804b8ae:	d204      	bcs.n	804b8ba <USBH_ParseCfgDesc+0x19a>
 804b8b0:	6a3b      	ldr	r3, [r7, #32]
 804b8b2:	885a      	ldrh	r2, [r3, #2]
 804b8b4:	8afb      	ldrh	r3, [r7, #22]
 804b8b6:	429a      	cmp	r2, r3
 804b8b8:	d8b0      	bhi.n	804b81c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804b8ba:	69fb      	ldr	r3, [r7, #28]
 804b8bc:	791b      	ldrb	r3, [r3, #4]
 804b8be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804b8c2:	429a      	cmp	r2, r3
 804b8c4:	d201      	bcs.n	804b8ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804b8c6:	2303      	movs	r3, #3
 804b8c8:	e01c      	b.n	804b904 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804b8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b8ce:	3301      	adds	r3, #1
 804b8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804b8d8:	2b01      	cmp	r3, #1
 804b8da:	d805      	bhi.n	804b8e8 <USBH_ParseCfgDesc+0x1c8>
 804b8dc:	6a3b      	ldr	r3, [r7, #32]
 804b8de:	885a      	ldrh	r2, [r3, #2]
 804b8e0:	8afb      	ldrh	r3, [r7, #22]
 804b8e2:	429a      	cmp	r2, r3
 804b8e4:	f63f af74 	bhi.w	804b7d0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804b8e8:	6a3b      	ldr	r3, [r7, #32]
 804b8ea:	791b      	ldrb	r3, [r3, #4]
 804b8ec:	2b02      	cmp	r3, #2
 804b8ee:	bf28      	it	cs
 804b8f0:	2302      	movcs	r3, #2
 804b8f2:	b2db      	uxtb	r3, r3
 804b8f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804b8f8:	429a      	cmp	r2, r3
 804b8fa:	d201      	bcs.n	804b900 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804b8fc:	2303      	movs	r3, #3
 804b8fe:	e001      	b.n	804b904 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804b900:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804b904:	4618      	mov	r0, r3
 804b906:	3730      	adds	r7, #48	; 0x30
 804b908:	46bd      	mov	sp, r7
 804b90a:	bd80      	pop	{r7, pc}

0804b90c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804b90c:	b480      	push	{r7}
 804b90e:	b083      	sub	sp, #12
 804b910:	af00      	add	r7, sp, #0
 804b912:	6078      	str	r0, [r7, #4]
 804b914:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804b916:	683b      	ldr	r3, [r7, #0]
 804b918:	781a      	ldrb	r2, [r3, #0]
 804b91a:	687b      	ldr	r3, [r7, #4]
 804b91c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804b91e:	683b      	ldr	r3, [r7, #0]
 804b920:	785a      	ldrb	r2, [r3, #1]
 804b922:	687b      	ldr	r3, [r7, #4]
 804b924:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804b926:	683b      	ldr	r3, [r7, #0]
 804b928:	789a      	ldrb	r2, [r3, #2]
 804b92a:	687b      	ldr	r3, [r7, #4]
 804b92c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804b92e:	683b      	ldr	r3, [r7, #0]
 804b930:	78da      	ldrb	r2, [r3, #3]
 804b932:	687b      	ldr	r3, [r7, #4]
 804b934:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804b936:	683b      	ldr	r3, [r7, #0]
 804b938:	791a      	ldrb	r2, [r3, #4]
 804b93a:	687b      	ldr	r3, [r7, #4]
 804b93c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804b93e:	683b      	ldr	r3, [r7, #0]
 804b940:	795a      	ldrb	r2, [r3, #5]
 804b942:	687b      	ldr	r3, [r7, #4]
 804b944:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804b946:	683b      	ldr	r3, [r7, #0]
 804b948:	799a      	ldrb	r2, [r3, #6]
 804b94a:	687b      	ldr	r3, [r7, #4]
 804b94c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804b94e:	683b      	ldr	r3, [r7, #0]
 804b950:	79da      	ldrb	r2, [r3, #7]
 804b952:	687b      	ldr	r3, [r7, #4]
 804b954:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804b956:	683b      	ldr	r3, [r7, #0]
 804b958:	7a1a      	ldrb	r2, [r3, #8]
 804b95a:	687b      	ldr	r3, [r7, #4]
 804b95c:	721a      	strb	r2, [r3, #8]
}
 804b95e:	bf00      	nop
 804b960:	370c      	adds	r7, #12
 804b962:	46bd      	mov	sp, r7
 804b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b968:	4770      	bx	lr

0804b96a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804b96a:	b480      	push	{r7}
 804b96c:	b087      	sub	sp, #28
 804b96e:	af00      	add	r7, sp, #0
 804b970:	60f8      	str	r0, [r7, #12]
 804b972:	60b9      	str	r1, [r7, #8]
 804b974:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804b976:	2300      	movs	r3, #0
 804b978:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804b97a:	687b      	ldr	r3, [r7, #4]
 804b97c:	781a      	ldrb	r2, [r3, #0]
 804b97e:	68bb      	ldr	r3, [r7, #8]
 804b980:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804b982:	687b      	ldr	r3, [r7, #4]
 804b984:	785a      	ldrb	r2, [r3, #1]
 804b986:	68bb      	ldr	r3, [r7, #8]
 804b988:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804b98a:	687b      	ldr	r3, [r7, #4]
 804b98c:	789a      	ldrb	r2, [r3, #2]
 804b98e:	68bb      	ldr	r3, [r7, #8]
 804b990:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804b992:	687b      	ldr	r3, [r7, #4]
 804b994:	78da      	ldrb	r2, [r3, #3]
 804b996:	68bb      	ldr	r3, [r7, #8]
 804b998:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804b99a:	687b      	ldr	r3, [r7, #4]
 804b99c:	3304      	adds	r3, #4
 804b99e:	781b      	ldrb	r3, [r3, #0]
 804b9a0:	b29a      	uxth	r2, r3
 804b9a2:	687b      	ldr	r3, [r7, #4]
 804b9a4:	3305      	adds	r3, #5
 804b9a6:	781b      	ldrb	r3, [r3, #0]
 804b9a8:	b29b      	uxth	r3, r3
 804b9aa:	021b      	lsls	r3, r3, #8
 804b9ac:	b29b      	uxth	r3, r3
 804b9ae:	4313      	orrs	r3, r2
 804b9b0:	b29a      	uxth	r2, r3
 804b9b2:	68bb      	ldr	r3, [r7, #8]
 804b9b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804b9b6:	687b      	ldr	r3, [r7, #4]
 804b9b8:	799a      	ldrb	r2, [r3, #6]
 804b9ba:	68bb      	ldr	r3, [r7, #8]
 804b9bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804b9be:	68bb      	ldr	r3, [r7, #8]
 804b9c0:	889b      	ldrh	r3, [r3, #4]
 804b9c2:	2b00      	cmp	r3, #0
 804b9c4:	d102      	bne.n	804b9cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804b9c6:	2303      	movs	r3, #3
 804b9c8:	75fb      	strb	r3, [r7, #23]
 804b9ca:	e033      	b.n	804ba34 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804b9cc:	68bb      	ldr	r3, [r7, #8]
 804b9ce:	889b      	ldrh	r3, [r3, #4]
 804b9d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804b9d4:	f023 0307 	bic.w	r3, r3, #7
 804b9d8:	b29a      	uxth	r2, r3
 804b9da:	68bb      	ldr	r3, [r7, #8]
 804b9dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804b9de:	68bb      	ldr	r3, [r7, #8]
 804b9e0:	889b      	ldrh	r3, [r3, #4]
 804b9e2:	b21a      	sxth	r2, r3
 804b9e4:	687b      	ldr	r3, [r7, #4]
 804b9e6:	3304      	adds	r3, #4
 804b9e8:	781b      	ldrb	r3, [r3, #0]
 804b9ea:	b299      	uxth	r1, r3
 804b9ec:	687b      	ldr	r3, [r7, #4]
 804b9ee:	3305      	adds	r3, #5
 804b9f0:	781b      	ldrb	r3, [r3, #0]
 804b9f2:	b29b      	uxth	r3, r3
 804b9f4:	021b      	lsls	r3, r3, #8
 804b9f6:	b29b      	uxth	r3, r3
 804b9f8:	430b      	orrs	r3, r1
 804b9fa:	b29b      	uxth	r3, r3
 804b9fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804ba00:	2b00      	cmp	r3, #0
 804ba02:	d110      	bne.n	804ba26 <USBH_ParseEPDesc+0xbc>
 804ba04:	687b      	ldr	r3, [r7, #4]
 804ba06:	3304      	adds	r3, #4
 804ba08:	781b      	ldrb	r3, [r3, #0]
 804ba0a:	b299      	uxth	r1, r3
 804ba0c:	687b      	ldr	r3, [r7, #4]
 804ba0e:	3305      	adds	r3, #5
 804ba10:	781b      	ldrb	r3, [r3, #0]
 804ba12:	b29b      	uxth	r3, r3
 804ba14:	021b      	lsls	r3, r3, #8
 804ba16:	b29b      	uxth	r3, r3
 804ba18:	430b      	orrs	r3, r1
 804ba1a:	b29b      	uxth	r3, r3
 804ba1c:	b21b      	sxth	r3, r3
 804ba1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804ba22:	b21b      	sxth	r3, r3
 804ba24:	e001      	b.n	804ba2a <USBH_ParseEPDesc+0xc0>
 804ba26:	f44f 7300 	mov.w	r3, #512	; 0x200
 804ba2a:	4313      	orrs	r3, r2
 804ba2c:	b21b      	sxth	r3, r3
 804ba2e:	b29a      	uxth	r2, r3
 804ba30:	68bb      	ldr	r3, [r7, #8]
 804ba32:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804ba34:	68fb      	ldr	r3, [r7, #12]
 804ba36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804ba3a:	2b00      	cmp	r3, #0
 804ba3c:	d116      	bne.n	804ba6c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804ba3e:	68bb      	ldr	r3, [r7, #8]
 804ba40:	78db      	ldrb	r3, [r3, #3]
 804ba42:	f003 0303 	and.w	r3, r3, #3
 804ba46:	2b01      	cmp	r3, #1
 804ba48:	d005      	beq.n	804ba56 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804ba4a:	68bb      	ldr	r3, [r7, #8]
 804ba4c:	78db      	ldrb	r3, [r3, #3]
 804ba4e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804ba52:	2b03      	cmp	r3, #3
 804ba54:	d127      	bne.n	804baa6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804ba56:	68bb      	ldr	r3, [r7, #8]
 804ba58:	799b      	ldrb	r3, [r3, #6]
 804ba5a:	2b00      	cmp	r3, #0
 804ba5c:	d003      	beq.n	804ba66 <USBH_ParseEPDesc+0xfc>
 804ba5e:	68bb      	ldr	r3, [r7, #8]
 804ba60:	799b      	ldrb	r3, [r3, #6]
 804ba62:	2b10      	cmp	r3, #16
 804ba64:	d91f      	bls.n	804baa6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804ba66:	2303      	movs	r3, #3
 804ba68:	75fb      	strb	r3, [r7, #23]
 804ba6a:	e01c      	b.n	804baa6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804ba6c:	68bb      	ldr	r3, [r7, #8]
 804ba6e:	78db      	ldrb	r3, [r3, #3]
 804ba70:	f003 0303 	and.w	r3, r3, #3
 804ba74:	2b01      	cmp	r3, #1
 804ba76:	d10a      	bne.n	804ba8e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804ba78:	68bb      	ldr	r3, [r7, #8]
 804ba7a:	799b      	ldrb	r3, [r3, #6]
 804ba7c:	2b00      	cmp	r3, #0
 804ba7e:	d003      	beq.n	804ba88 <USBH_ParseEPDesc+0x11e>
 804ba80:	68bb      	ldr	r3, [r7, #8]
 804ba82:	799b      	ldrb	r3, [r3, #6]
 804ba84:	2b10      	cmp	r3, #16
 804ba86:	d90e      	bls.n	804baa6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804ba88:	2303      	movs	r3, #3
 804ba8a:	75fb      	strb	r3, [r7, #23]
 804ba8c:	e00b      	b.n	804baa6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804ba8e:	68bb      	ldr	r3, [r7, #8]
 804ba90:	78db      	ldrb	r3, [r3, #3]
 804ba92:	f003 0303 	and.w	r3, r3, #3
 804ba96:	2b03      	cmp	r3, #3
 804ba98:	d105      	bne.n	804baa6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804ba9a:	68bb      	ldr	r3, [r7, #8]
 804ba9c:	799b      	ldrb	r3, [r3, #6]
 804ba9e:	2b00      	cmp	r3, #0
 804baa0:	d101      	bne.n	804baa6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804baa2:	2303      	movs	r3, #3
 804baa4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804baa6:	7dfb      	ldrb	r3, [r7, #23]
}
 804baa8:	4618      	mov	r0, r3
 804baaa:	371c      	adds	r7, #28
 804baac:	46bd      	mov	sp, r7
 804baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bab2:	4770      	bx	lr

0804bab4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804bab4:	b480      	push	{r7}
 804bab6:	b087      	sub	sp, #28
 804bab8:	af00      	add	r7, sp, #0
 804baba:	60f8      	str	r0, [r7, #12]
 804babc:	60b9      	str	r1, [r7, #8]
 804babe:	4613      	mov	r3, r2
 804bac0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804bac2:	68fb      	ldr	r3, [r7, #12]
 804bac4:	3301      	adds	r3, #1
 804bac6:	781b      	ldrb	r3, [r3, #0]
 804bac8:	2b03      	cmp	r3, #3
 804baca:	d120      	bne.n	804bb0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804bacc:	68fb      	ldr	r3, [r7, #12]
 804bace:	781b      	ldrb	r3, [r3, #0]
 804bad0:	1e9a      	subs	r2, r3, #2
 804bad2:	88fb      	ldrh	r3, [r7, #6]
 804bad4:	4293      	cmp	r3, r2
 804bad6:	bf28      	it	cs
 804bad8:	4613      	movcs	r3, r2
 804bada:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804badc:	68fb      	ldr	r3, [r7, #12]
 804bade:	3302      	adds	r3, #2
 804bae0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804bae2:	2300      	movs	r3, #0
 804bae4:	82fb      	strh	r3, [r7, #22]
 804bae6:	e00b      	b.n	804bb00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804bae8:	8afb      	ldrh	r3, [r7, #22]
 804baea:	68fa      	ldr	r2, [r7, #12]
 804baec:	4413      	add	r3, r2
 804baee:	781a      	ldrb	r2, [r3, #0]
 804baf0:	68bb      	ldr	r3, [r7, #8]
 804baf2:	701a      	strb	r2, [r3, #0]
      pdest++;
 804baf4:	68bb      	ldr	r3, [r7, #8]
 804baf6:	3301      	adds	r3, #1
 804baf8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804bafa:	8afb      	ldrh	r3, [r7, #22]
 804bafc:	3302      	adds	r3, #2
 804bafe:	82fb      	strh	r3, [r7, #22]
 804bb00:	8afa      	ldrh	r2, [r7, #22]
 804bb02:	8abb      	ldrh	r3, [r7, #20]
 804bb04:	429a      	cmp	r2, r3
 804bb06:	d3ef      	bcc.n	804bae8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804bb08:	68bb      	ldr	r3, [r7, #8]
 804bb0a:	2200      	movs	r2, #0
 804bb0c:	701a      	strb	r2, [r3, #0]
  }
}
 804bb0e:	bf00      	nop
 804bb10:	371c      	adds	r7, #28
 804bb12:	46bd      	mov	sp, r7
 804bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bb18:	4770      	bx	lr

0804bb1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804bb1a:	b480      	push	{r7}
 804bb1c:	b085      	sub	sp, #20
 804bb1e:	af00      	add	r7, sp, #0
 804bb20:	6078      	str	r0, [r7, #4]
 804bb22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804bb24:	683b      	ldr	r3, [r7, #0]
 804bb26:	881a      	ldrh	r2, [r3, #0]
 804bb28:	687b      	ldr	r3, [r7, #4]
 804bb2a:	781b      	ldrb	r3, [r3, #0]
 804bb2c:	b29b      	uxth	r3, r3
 804bb2e:	4413      	add	r3, r2
 804bb30:	b29a      	uxth	r2, r3
 804bb32:	683b      	ldr	r3, [r7, #0]
 804bb34:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804bb36:	687b      	ldr	r3, [r7, #4]
 804bb38:	781b      	ldrb	r3, [r3, #0]
 804bb3a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804bb3c:	687b      	ldr	r3, [r7, #4]
 804bb3e:	4413      	add	r3, r2
 804bb40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804bb42:	68fb      	ldr	r3, [r7, #12]
}
 804bb44:	4618      	mov	r0, r3
 804bb46:	3714      	adds	r7, #20
 804bb48:	46bd      	mov	sp, r7
 804bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bb4e:	4770      	bx	lr

0804bb50 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804bb50:	b580      	push	{r7, lr}
 804bb52:	b086      	sub	sp, #24
 804bb54:	af00      	add	r7, sp, #0
 804bb56:	60f8      	str	r0, [r7, #12]
 804bb58:	60b9      	str	r1, [r7, #8]
 804bb5a:	4613      	mov	r3, r2
 804bb5c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804bb5e:	2301      	movs	r3, #1
 804bb60:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804bb62:	68fb      	ldr	r3, [r7, #12]
 804bb64:	789b      	ldrb	r3, [r3, #2]
 804bb66:	2b01      	cmp	r3, #1
 804bb68:	d002      	beq.n	804bb70 <USBH_CtlReq+0x20>
 804bb6a:	2b02      	cmp	r3, #2
 804bb6c:	d00f      	beq.n	804bb8e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804bb6e:	e027      	b.n	804bbc0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804bb70:	68fb      	ldr	r3, [r7, #12]
 804bb72:	68ba      	ldr	r2, [r7, #8]
 804bb74:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804bb76:	68fb      	ldr	r3, [r7, #12]
 804bb78:	88fa      	ldrh	r2, [r7, #6]
 804bb7a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804bb7c:	68fb      	ldr	r3, [r7, #12]
 804bb7e:	2201      	movs	r2, #1
 804bb80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804bb82:	68fb      	ldr	r3, [r7, #12]
 804bb84:	2202      	movs	r2, #2
 804bb86:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804bb88:	2301      	movs	r3, #1
 804bb8a:	75fb      	strb	r3, [r7, #23]
      break;
 804bb8c:	e018      	b.n	804bbc0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804bb8e:	68f8      	ldr	r0, [r7, #12]
 804bb90:	f000 f81c 	bl	804bbcc <USBH_HandleControl>
 804bb94:	4603      	mov	r3, r0
 804bb96:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804bb98:	7dfb      	ldrb	r3, [r7, #23]
 804bb9a:	2b00      	cmp	r3, #0
 804bb9c:	d002      	beq.n	804bba4 <USBH_CtlReq+0x54>
 804bb9e:	7dfb      	ldrb	r3, [r7, #23]
 804bba0:	2b03      	cmp	r3, #3
 804bba2:	d106      	bne.n	804bbb2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804bba4:	68fb      	ldr	r3, [r7, #12]
 804bba6:	2201      	movs	r2, #1
 804bba8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804bbaa:	68fb      	ldr	r3, [r7, #12]
 804bbac:	2200      	movs	r2, #0
 804bbae:	761a      	strb	r2, [r3, #24]
      break;
 804bbb0:	e005      	b.n	804bbbe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804bbb2:	7dfb      	ldrb	r3, [r7, #23]
 804bbb4:	2b02      	cmp	r3, #2
 804bbb6:	d102      	bne.n	804bbbe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804bbb8:	68fb      	ldr	r3, [r7, #12]
 804bbba:	2201      	movs	r2, #1
 804bbbc:	709a      	strb	r2, [r3, #2]
      break;
 804bbbe:	bf00      	nop
  }
  return status;
 804bbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 804bbc2:	4618      	mov	r0, r3
 804bbc4:	3718      	adds	r7, #24
 804bbc6:	46bd      	mov	sp, r7
 804bbc8:	bd80      	pop	{r7, pc}
	...

0804bbcc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804bbcc:	b580      	push	{r7, lr}
 804bbce:	b086      	sub	sp, #24
 804bbd0:	af02      	add	r7, sp, #8
 804bbd2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804bbd4:	2301      	movs	r3, #1
 804bbd6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804bbd8:	2300      	movs	r3, #0
 804bbda:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804bbdc:	687b      	ldr	r3, [r7, #4]
 804bbde:	7e1b      	ldrb	r3, [r3, #24]
 804bbe0:	3b01      	subs	r3, #1
 804bbe2:	2b0a      	cmp	r3, #10
 804bbe4:	f200 8156 	bhi.w	804be94 <USBH_HandleControl+0x2c8>
 804bbe8:	a201      	add	r2, pc, #4	; (adr r2, 804bbf0 <USBH_HandleControl+0x24>)
 804bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804bbee:	bf00      	nop
 804bbf0:	0804bc1d 	.word	0x0804bc1d
 804bbf4:	0804bc37 	.word	0x0804bc37
 804bbf8:	0804bca1 	.word	0x0804bca1
 804bbfc:	0804bcc7 	.word	0x0804bcc7
 804bc00:	0804bcff 	.word	0x0804bcff
 804bc04:	0804bd29 	.word	0x0804bd29
 804bc08:	0804bd7b 	.word	0x0804bd7b
 804bc0c:	0804bd9d 	.word	0x0804bd9d
 804bc10:	0804bdd9 	.word	0x0804bdd9
 804bc14:	0804bdff 	.word	0x0804bdff
 804bc18:	0804be3d 	.word	0x0804be3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804bc1c:	687b      	ldr	r3, [r7, #4]
 804bc1e:	f103 0110 	add.w	r1, r3, #16
 804bc22:	687b      	ldr	r3, [r7, #4]
 804bc24:	795b      	ldrb	r3, [r3, #5]
 804bc26:	461a      	mov	r2, r3
 804bc28:	6878      	ldr	r0, [r7, #4]
 804bc2a:	f000 f943 	bl	804beb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804bc2e:	687b      	ldr	r3, [r7, #4]
 804bc30:	2202      	movs	r2, #2
 804bc32:	761a      	strb	r2, [r3, #24]
      break;
 804bc34:	e139      	b.n	804beaa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bc36:	687b      	ldr	r3, [r7, #4]
 804bc38:	795b      	ldrb	r3, [r3, #5]
 804bc3a:	4619      	mov	r1, r3
 804bc3c:	6878      	ldr	r0, [r7, #4]
 804bc3e:	f000 fccb 	bl	804c5d8 <USBH_LL_GetURBState>
 804bc42:	4603      	mov	r3, r0
 804bc44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804bc46:	7bbb      	ldrb	r3, [r7, #14]
 804bc48:	2b01      	cmp	r3, #1
 804bc4a:	d11e      	bne.n	804bc8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804bc4c:	687b      	ldr	r3, [r7, #4]
 804bc4e:	7c1b      	ldrb	r3, [r3, #16]
 804bc50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804bc54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804bc56:	687b      	ldr	r3, [r7, #4]
 804bc58:	8adb      	ldrh	r3, [r3, #22]
 804bc5a:	2b00      	cmp	r3, #0
 804bc5c:	d00a      	beq.n	804bc74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804bc5e:	7b7b      	ldrb	r3, [r7, #13]
 804bc60:	2b80      	cmp	r3, #128	; 0x80
 804bc62:	d103      	bne.n	804bc6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804bc64:	687b      	ldr	r3, [r7, #4]
 804bc66:	2203      	movs	r2, #3
 804bc68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bc6a:	e115      	b.n	804be98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804bc6c:	687b      	ldr	r3, [r7, #4]
 804bc6e:	2205      	movs	r2, #5
 804bc70:	761a      	strb	r2, [r3, #24]
      break;
 804bc72:	e111      	b.n	804be98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804bc74:	7b7b      	ldrb	r3, [r7, #13]
 804bc76:	2b80      	cmp	r3, #128	; 0x80
 804bc78:	d103      	bne.n	804bc82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804bc7a:	687b      	ldr	r3, [r7, #4]
 804bc7c:	2209      	movs	r2, #9
 804bc7e:	761a      	strb	r2, [r3, #24]
      break;
 804bc80:	e10a      	b.n	804be98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804bc82:	687b      	ldr	r3, [r7, #4]
 804bc84:	2207      	movs	r2, #7
 804bc86:	761a      	strb	r2, [r3, #24]
      break;
 804bc88:	e106      	b.n	804be98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804bc8a:	7bbb      	ldrb	r3, [r7, #14]
 804bc8c:	2b04      	cmp	r3, #4
 804bc8e:	d003      	beq.n	804bc98 <USBH_HandleControl+0xcc>
 804bc90:	7bbb      	ldrb	r3, [r7, #14]
 804bc92:	2b02      	cmp	r3, #2
 804bc94:	f040 8100 	bne.w	804be98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804bc98:	687b      	ldr	r3, [r7, #4]
 804bc9a:	220b      	movs	r2, #11
 804bc9c:	761a      	strb	r2, [r3, #24]
      break;
 804bc9e:	e0fb      	b.n	804be98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804bca0:	687b      	ldr	r3, [r7, #4]
 804bca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bca6:	b29a      	uxth	r2, r3
 804bca8:	687b      	ldr	r3, [r7, #4]
 804bcaa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804bcac:	687b      	ldr	r3, [r7, #4]
 804bcae:	6899      	ldr	r1, [r3, #8]
 804bcb0:	687b      	ldr	r3, [r7, #4]
 804bcb2:	899a      	ldrh	r2, [r3, #12]
 804bcb4:	687b      	ldr	r3, [r7, #4]
 804bcb6:	791b      	ldrb	r3, [r3, #4]
 804bcb8:	6878      	ldr	r0, [r7, #4]
 804bcba:	f000 f93a 	bl	804bf32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804bcbe:	687b      	ldr	r3, [r7, #4]
 804bcc0:	2204      	movs	r2, #4
 804bcc2:	761a      	strb	r2, [r3, #24]
      break;
 804bcc4:	e0f1      	b.n	804beaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804bcc6:	687b      	ldr	r3, [r7, #4]
 804bcc8:	791b      	ldrb	r3, [r3, #4]
 804bcca:	4619      	mov	r1, r3
 804bccc:	6878      	ldr	r0, [r7, #4]
 804bcce:	f000 fc83 	bl	804c5d8 <USBH_LL_GetURBState>
 804bcd2:	4603      	mov	r3, r0
 804bcd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804bcd6:	7bbb      	ldrb	r3, [r7, #14]
 804bcd8:	2b01      	cmp	r3, #1
 804bcda:	d102      	bne.n	804bce2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804bcdc:	687b      	ldr	r3, [r7, #4]
 804bcde:	2209      	movs	r2, #9
 804bce0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804bce2:	7bbb      	ldrb	r3, [r7, #14]
 804bce4:	2b05      	cmp	r3, #5
 804bce6:	d102      	bne.n	804bcee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804bce8:	2303      	movs	r3, #3
 804bcea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bcec:	e0d6      	b.n	804be9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804bcee:	7bbb      	ldrb	r3, [r7, #14]
 804bcf0:	2b04      	cmp	r3, #4
 804bcf2:	f040 80d3 	bne.w	804be9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804bcf6:	687b      	ldr	r3, [r7, #4]
 804bcf8:	220b      	movs	r2, #11
 804bcfa:	761a      	strb	r2, [r3, #24]
      break;
 804bcfc:	e0ce      	b.n	804be9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804bcfe:	687b      	ldr	r3, [r7, #4]
 804bd00:	6899      	ldr	r1, [r3, #8]
 804bd02:	687b      	ldr	r3, [r7, #4]
 804bd04:	899a      	ldrh	r2, [r3, #12]
 804bd06:	687b      	ldr	r3, [r7, #4]
 804bd08:	795b      	ldrb	r3, [r3, #5]
 804bd0a:	2001      	movs	r0, #1
 804bd0c:	9000      	str	r0, [sp, #0]
 804bd0e:	6878      	ldr	r0, [r7, #4]
 804bd10:	f000 f8ea 	bl	804bee8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804bd14:	687b      	ldr	r3, [r7, #4]
 804bd16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bd1a:	b29a      	uxth	r2, r3
 804bd1c:	687b      	ldr	r3, [r7, #4]
 804bd1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804bd20:	687b      	ldr	r3, [r7, #4]
 804bd22:	2206      	movs	r2, #6
 804bd24:	761a      	strb	r2, [r3, #24]
      break;
 804bd26:	e0c0      	b.n	804beaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bd28:	687b      	ldr	r3, [r7, #4]
 804bd2a:	795b      	ldrb	r3, [r3, #5]
 804bd2c:	4619      	mov	r1, r3
 804bd2e:	6878      	ldr	r0, [r7, #4]
 804bd30:	f000 fc52 	bl	804c5d8 <USBH_LL_GetURBState>
 804bd34:	4603      	mov	r3, r0
 804bd36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804bd38:	7bbb      	ldrb	r3, [r7, #14]
 804bd3a:	2b01      	cmp	r3, #1
 804bd3c:	d103      	bne.n	804bd46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804bd3e:	687b      	ldr	r3, [r7, #4]
 804bd40:	2207      	movs	r2, #7
 804bd42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bd44:	e0ac      	b.n	804bea0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804bd46:	7bbb      	ldrb	r3, [r7, #14]
 804bd48:	2b05      	cmp	r3, #5
 804bd4a:	d105      	bne.n	804bd58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804bd4c:	687b      	ldr	r3, [r7, #4]
 804bd4e:	220c      	movs	r2, #12
 804bd50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804bd52:	2303      	movs	r3, #3
 804bd54:	73fb      	strb	r3, [r7, #15]
      break;
 804bd56:	e0a3      	b.n	804bea0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804bd58:	7bbb      	ldrb	r3, [r7, #14]
 804bd5a:	2b02      	cmp	r3, #2
 804bd5c:	d103      	bne.n	804bd66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804bd5e:	687b      	ldr	r3, [r7, #4]
 804bd60:	2205      	movs	r2, #5
 804bd62:	761a      	strb	r2, [r3, #24]
      break;
 804bd64:	e09c      	b.n	804bea0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804bd66:	7bbb      	ldrb	r3, [r7, #14]
 804bd68:	2b04      	cmp	r3, #4
 804bd6a:	f040 8099 	bne.w	804bea0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804bd6e:	687b      	ldr	r3, [r7, #4]
 804bd70:	220b      	movs	r2, #11
 804bd72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804bd74:	2302      	movs	r3, #2
 804bd76:	73fb      	strb	r3, [r7, #15]
      break;
 804bd78:	e092      	b.n	804bea0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804bd7a:	687b      	ldr	r3, [r7, #4]
 804bd7c:	791b      	ldrb	r3, [r3, #4]
 804bd7e:	2200      	movs	r2, #0
 804bd80:	2100      	movs	r1, #0
 804bd82:	6878      	ldr	r0, [r7, #4]
 804bd84:	f000 f8d5 	bl	804bf32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804bd88:	687b      	ldr	r3, [r7, #4]
 804bd8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bd8e:	b29a      	uxth	r2, r3
 804bd90:	687b      	ldr	r3, [r7, #4]
 804bd92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804bd94:	687b      	ldr	r3, [r7, #4]
 804bd96:	2208      	movs	r2, #8
 804bd98:	761a      	strb	r2, [r3, #24]

      break;
 804bd9a:	e086      	b.n	804beaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804bd9c:	687b      	ldr	r3, [r7, #4]
 804bd9e:	791b      	ldrb	r3, [r3, #4]
 804bda0:	4619      	mov	r1, r3
 804bda2:	6878      	ldr	r0, [r7, #4]
 804bda4:	f000 fc18 	bl	804c5d8 <USBH_LL_GetURBState>
 804bda8:	4603      	mov	r3, r0
 804bdaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804bdac:	7bbb      	ldrb	r3, [r7, #14]
 804bdae:	2b01      	cmp	r3, #1
 804bdb0:	d105      	bne.n	804bdbe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804bdb2:	687b      	ldr	r3, [r7, #4]
 804bdb4:	220d      	movs	r2, #13
 804bdb6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804bdb8:	2300      	movs	r3, #0
 804bdba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804bdbc:	e072      	b.n	804bea4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804bdbe:	7bbb      	ldrb	r3, [r7, #14]
 804bdc0:	2b04      	cmp	r3, #4
 804bdc2:	d103      	bne.n	804bdcc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804bdc4:	687b      	ldr	r3, [r7, #4]
 804bdc6:	220b      	movs	r2, #11
 804bdc8:	761a      	strb	r2, [r3, #24]
      break;
 804bdca:	e06b      	b.n	804bea4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804bdcc:	7bbb      	ldrb	r3, [r7, #14]
 804bdce:	2b05      	cmp	r3, #5
 804bdd0:	d168      	bne.n	804bea4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804bdd2:	2303      	movs	r3, #3
 804bdd4:	73fb      	strb	r3, [r7, #15]
      break;
 804bdd6:	e065      	b.n	804bea4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804bdd8:	687b      	ldr	r3, [r7, #4]
 804bdda:	795b      	ldrb	r3, [r3, #5]
 804bddc:	2201      	movs	r2, #1
 804bdde:	9200      	str	r2, [sp, #0]
 804bde0:	2200      	movs	r2, #0
 804bde2:	2100      	movs	r1, #0
 804bde4:	6878      	ldr	r0, [r7, #4]
 804bde6:	f000 f87f 	bl	804bee8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804bdea:	687b      	ldr	r3, [r7, #4]
 804bdec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804bdf0:	b29a      	uxth	r2, r3
 804bdf2:	687b      	ldr	r3, [r7, #4]
 804bdf4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804bdf6:	687b      	ldr	r3, [r7, #4]
 804bdf8:	220a      	movs	r2, #10
 804bdfa:	761a      	strb	r2, [r3, #24]
      break;
 804bdfc:	e055      	b.n	804beaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804bdfe:	687b      	ldr	r3, [r7, #4]
 804be00:	795b      	ldrb	r3, [r3, #5]
 804be02:	4619      	mov	r1, r3
 804be04:	6878      	ldr	r0, [r7, #4]
 804be06:	f000 fbe7 	bl	804c5d8 <USBH_LL_GetURBState>
 804be0a:	4603      	mov	r3, r0
 804be0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804be0e:	7bbb      	ldrb	r3, [r7, #14]
 804be10:	2b01      	cmp	r3, #1
 804be12:	d105      	bne.n	804be20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804be14:	2300      	movs	r3, #0
 804be16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804be18:	687b      	ldr	r3, [r7, #4]
 804be1a:	220d      	movs	r2, #13
 804be1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804be1e:	e043      	b.n	804bea8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804be20:	7bbb      	ldrb	r3, [r7, #14]
 804be22:	2b02      	cmp	r3, #2
 804be24:	d103      	bne.n	804be2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804be26:	687b      	ldr	r3, [r7, #4]
 804be28:	2209      	movs	r2, #9
 804be2a:	761a      	strb	r2, [r3, #24]
      break;
 804be2c:	e03c      	b.n	804bea8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804be2e:	7bbb      	ldrb	r3, [r7, #14]
 804be30:	2b04      	cmp	r3, #4
 804be32:	d139      	bne.n	804bea8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804be34:	687b      	ldr	r3, [r7, #4]
 804be36:	220b      	movs	r2, #11
 804be38:	761a      	strb	r2, [r3, #24]
      break;
 804be3a:	e035      	b.n	804bea8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804be3c:	687b      	ldr	r3, [r7, #4]
 804be3e:	7e5b      	ldrb	r3, [r3, #25]
 804be40:	3301      	adds	r3, #1
 804be42:	b2da      	uxtb	r2, r3
 804be44:	687b      	ldr	r3, [r7, #4]
 804be46:	765a      	strb	r2, [r3, #25]
 804be48:	687b      	ldr	r3, [r7, #4]
 804be4a:	7e5b      	ldrb	r3, [r3, #25]
 804be4c:	2b02      	cmp	r3, #2
 804be4e:	d806      	bhi.n	804be5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804be50:	687b      	ldr	r3, [r7, #4]
 804be52:	2201      	movs	r2, #1
 804be54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804be56:	687b      	ldr	r3, [r7, #4]
 804be58:	2201      	movs	r2, #1
 804be5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804be5c:	e025      	b.n	804beaa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804be5e:	687b      	ldr	r3, [r7, #4]
 804be60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804be64:	2106      	movs	r1, #6
 804be66:	6878      	ldr	r0, [r7, #4]
 804be68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804be6a:	687b      	ldr	r3, [r7, #4]
 804be6c:	2200      	movs	r2, #0
 804be6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804be70:	687b      	ldr	r3, [r7, #4]
 804be72:	795b      	ldrb	r3, [r3, #5]
 804be74:	4619      	mov	r1, r3
 804be76:	6878      	ldr	r0, [r7, #4]
 804be78:	f000 f90c 	bl	804c094 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804be7c:	687b      	ldr	r3, [r7, #4]
 804be7e:	791b      	ldrb	r3, [r3, #4]
 804be80:	4619      	mov	r1, r3
 804be82:	6878      	ldr	r0, [r7, #4]
 804be84:	f000 f906 	bl	804c094 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804be88:	687b      	ldr	r3, [r7, #4]
 804be8a:	2200      	movs	r2, #0
 804be8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804be8e:	2302      	movs	r3, #2
 804be90:	73fb      	strb	r3, [r7, #15]
      break;
 804be92:	e00a      	b.n	804beaa <USBH_HandleControl+0x2de>

    default:
      break;
 804be94:	bf00      	nop
 804be96:	e008      	b.n	804beaa <USBH_HandleControl+0x2de>
      break;
 804be98:	bf00      	nop
 804be9a:	e006      	b.n	804beaa <USBH_HandleControl+0x2de>
      break;
 804be9c:	bf00      	nop
 804be9e:	e004      	b.n	804beaa <USBH_HandleControl+0x2de>
      break;
 804bea0:	bf00      	nop
 804bea2:	e002      	b.n	804beaa <USBH_HandleControl+0x2de>
      break;
 804bea4:	bf00      	nop
 804bea6:	e000      	b.n	804beaa <USBH_HandleControl+0x2de>
      break;
 804bea8:	bf00      	nop
  }

  return status;
 804beaa:	7bfb      	ldrb	r3, [r7, #15]
}
 804beac:	4618      	mov	r0, r3
 804beae:	3710      	adds	r7, #16
 804beb0:	46bd      	mov	sp, r7
 804beb2:	bd80      	pop	{r7, pc}

0804beb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804beb4:	b580      	push	{r7, lr}
 804beb6:	b088      	sub	sp, #32
 804beb8:	af04      	add	r7, sp, #16
 804beba:	60f8      	str	r0, [r7, #12]
 804bebc:	60b9      	str	r1, [r7, #8]
 804bebe:	4613      	mov	r3, r2
 804bec0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bec2:	79f9      	ldrb	r1, [r7, #7]
 804bec4:	2300      	movs	r3, #0
 804bec6:	9303      	str	r3, [sp, #12]
 804bec8:	2308      	movs	r3, #8
 804beca:	9302      	str	r3, [sp, #8]
 804becc:	68bb      	ldr	r3, [r7, #8]
 804bece:	9301      	str	r3, [sp, #4]
 804bed0:	2300      	movs	r3, #0
 804bed2:	9300      	str	r3, [sp, #0]
 804bed4:	2300      	movs	r3, #0
 804bed6:	2200      	movs	r2, #0
 804bed8:	68f8      	ldr	r0, [r7, #12]
 804beda:	f000 fb4c 	bl	804c576 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804bede:	2300      	movs	r3, #0
}
 804bee0:	4618      	mov	r0, r3
 804bee2:	3710      	adds	r7, #16
 804bee4:	46bd      	mov	sp, r7
 804bee6:	bd80      	pop	{r7, pc}

0804bee8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804bee8:	b580      	push	{r7, lr}
 804beea:	b088      	sub	sp, #32
 804beec:	af04      	add	r7, sp, #16
 804beee:	60f8      	str	r0, [r7, #12]
 804bef0:	60b9      	str	r1, [r7, #8]
 804bef2:	4611      	mov	r1, r2
 804bef4:	461a      	mov	r2, r3
 804bef6:	460b      	mov	r3, r1
 804bef8:	80fb      	strh	r3, [r7, #6]
 804befa:	4613      	mov	r3, r2
 804befc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804befe:	68fb      	ldr	r3, [r7, #12]
 804bf00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804bf04:	2b00      	cmp	r3, #0
 804bf06:	d001      	beq.n	804bf0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804bf08:	2300      	movs	r3, #0
 804bf0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bf0c:	7979      	ldrb	r1, [r7, #5]
 804bf0e:	7e3b      	ldrb	r3, [r7, #24]
 804bf10:	9303      	str	r3, [sp, #12]
 804bf12:	88fb      	ldrh	r3, [r7, #6]
 804bf14:	9302      	str	r3, [sp, #8]
 804bf16:	68bb      	ldr	r3, [r7, #8]
 804bf18:	9301      	str	r3, [sp, #4]
 804bf1a:	2301      	movs	r3, #1
 804bf1c:	9300      	str	r3, [sp, #0]
 804bf1e:	2300      	movs	r3, #0
 804bf20:	2200      	movs	r2, #0
 804bf22:	68f8      	ldr	r0, [r7, #12]
 804bf24:	f000 fb27 	bl	804c576 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804bf28:	2300      	movs	r3, #0
}
 804bf2a:	4618      	mov	r0, r3
 804bf2c:	3710      	adds	r7, #16
 804bf2e:	46bd      	mov	sp, r7
 804bf30:	bd80      	pop	{r7, pc}

0804bf32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804bf32:	b580      	push	{r7, lr}
 804bf34:	b088      	sub	sp, #32
 804bf36:	af04      	add	r7, sp, #16
 804bf38:	60f8      	str	r0, [r7, #12]
 804bf3a:	60b9      	str	r1, [r7, #8]
 804bf3c:	4611      	mov	r1, r2
 804bf3e:	461a      	mov	r2, r3
 804bf40:	460b      	mov	r3, r1
 804bf42:	80fb      	strh	r3, [r7, #6]
 804bf44:	4613      	mov	r3, r2
 804bf46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bf48:	7979      	ldrb	r1, [r7, #5]
 804bf4a:	2300      	movs	r3, #0
 804bf4c:	9303      	str	r3, [sp, #12]
 804bf4e:	88fb      	ldrh	r3, [r7, #6]
 804bf50:	9302      	str	r3, [sp, #8]
 804bf52:	68bb      	ldr	r3, [r7, #8]
 804bf54:	9301      	str	r3, [sp, #4]
 804bf56:	2301      	movs	r3, #1
 804bf58:	9300      	str	r3, [sp, #0]
 804bf5a:	2300      	movs	r3, #0
 804bf5c:	2201      	movs	r2, #1
 804bf5e:	68f8      	ldr	r0, [r7, #12]
 804bf60:	f000 fb09 	bl	804c576 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bf64:	2300      	movs	r3, #0

}
 804bf66:	4618      	mov	r0, r3
 804bf68:	3710      	adds	r7, #16
 804bf6a:	46bd      	mov	sp, r7
 804bf6c:	bd80      	pop	{r7, pc}

0804bf6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804bf6e:	b580      	push	{r7, lr}
 804bf70:	b088      	sub	sp, #32
 804bf72:	af04      	add	r7, sp, #16
 804bf74:	60f8      	str	r0, [r7, #12]
 804bf76:	60b9      	str	r1, [r7, #8]
 804bf78:	4611      	mov	r1, r2
 804bf7a:	461a      	mov	r2, r3
 804bf7c:	460b      	mov	r3, r1
 804bf7e:	80fb      	strh	r3, [r7, #6]
 804bf80:	4613      	mov	r3, r2
 804bf82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804bf84:	68fb      	ldr	r3, [r7, #12]
 804bf86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804bf8a:	2b00      	cmp	r3, #0
 804bf8c:	d001      	beq.n	804bf92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804bf8e:	2300      	movs	r3, #0
 804bf90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bf92:	7979      	ldrb	r1, [r7, #5]
 804bf94:	7e3b      	ldrb	r3, [r7, #24]
 804bf96:	9303      	str	r3, [sp, #12]
 804bf98:	88fb      	ldrh	r3, [r7, #6]
 804bf9a:	9302      	str	r3, [sp, #8]
 804bf9c:	68bb      	ldr	r3, [r7, #8]
 804bf9e:	9301      	str	r3, [sp, #4]
 804bfa0:	2301      	movs	r3, #1
 804bfa2:	9300      	str	r3, [sp, #0]
 804bfa4:	2302      	movs	r3, #2
 804bfa6:	2200      	movs	r2, #0
 804bfa8:	68f8      	ldr	r0, [r7, #12]
 804bfaa:	f000 fae4 	bl	804c576 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804bfae:	2300      	movs	r3, #0
}
 804bfb0:	4618      	mov	r0, r3
 804bfb2:	3710      	adds	r7, #16
 804bfb4:	46bd      	mov	sp, r7
 804bfb6:	bd80      	pop	{r7, pc}

0804bfb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804bfb8:	b580      	push	{r7, lr}
 804bfba:	b088      	sub	sp, #32
 804bfbc:	af04      	add	r7, sp, #16
 804bfbe:	60f8      	str	r0, [r7, #12]
 804bfc0:	60b9      	str	r1, [r7, #8]
 804bfc2:	4611      	mov	r1, r2
 804bfc4:	461a      	mov	r2, r3
 804bfc6:	460b      	mov	r3, r1
 804bfc8:	80fb      	strh	r3, [r7, #6]
 804bfca:	4613      	mov	r3, r2
 804bfcc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804bfce:	7979      	ldrb	r1, [r7, #5]
 804bfd0:	2300      	movs	r3, #0
 804bfd2:	9303      	str	r3, [sp, #12]
 804bfd4:	88fb      	ldrh	r3, [r7, #6]
 804bfd6:	9302      	str	r3, [sp, #8]
 804bfd8:	68bb      	ldr	r3, [r7, #8]
 804bfda:	9301      	str	r3, [sp, #4]
 804bfdc:	2301      	movs	r3, #1
 804bfde:	9300      	str	r3, [sp, #0]
 804bfe0:	2302      	movs	r3, #2
 804bfe2:	2201      	movs	r2, #1
 804bfe4:	68f8      	ldr	r0, [r7, #12]
 804bfe6:	f000 fac6 	bl	804c576 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804bfea:	2300      	movs	r3, #0
}
 804bfec:	4618      	mov	r0, r3
 804bfee:	3710      	adds	r7, #16
 804bff0:	46bd      	mov	sp, r7
 804bff2:	bd80      	pop	{r7, pc}

0804bff4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804bff4:	b580      	push	{r7, lr}
 804bff6:	b086      	sub	sp, #24
 804bff8:	af04      	add	r7, sp, #16
 804bffa:	6078      	str	r0, [r7, #4]
 804bffc:	4608      	mov	r0, r1
 804bffe:	4611      	mov	r1, r2
 804c000:	461a      	mov	r2, r3
 804c002:	4603      	mov	r3, r0
 804c004:	70fb      	strb	r3, [r7, #3]
 804c006:	460b      	mov	r3, r1
 804c008:	70bb      	strb	r3, [r7, #2]
 804c00a:	4613      	mov	r3, r2
 804c00c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804c00e:	7878      	ldrb	r0, [r7, #1]
 804c010:	78ba      	ldrb	r2, [r7, #2]
 804c012:	78f9      	ldrb	r1, [r7, #3]
 804c014:	8b3b      	ldrh	r3, [r7, #24]
 804c016:	9302      	str	r3, [sp, #8]
 804c018:	7d3b      	ldrb	r3, [r7, #20]
 804c01a:	9301      	str	r3, [sp, #4]
 804c01c:	7c3b      	ldrb	r3, [r7, #16]
 804c01e:	9300      	str	r3, [sp, #0]
 804c020:	4603      	mov	r3, r0
 804c022:	6878      	ldr	r0, [r7, #4]
 804c024:	f000 fa59 	bl	804c4da <USBH_LL_OpenPipe>

  return USBH_OK;
 804c028:	2300      	movs	r3, #0
}
 804c02a:	4618      	mov	r0, r3
 804c02c:	3708      	adds	r7, #8
 804c02e:	46bd      	mov	sp, r7
 804c030:	bd80      	pop	{r7, pc}

0804c032 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804c032:	b580      	push	{r7, lr}
 804c034:	b082      	sub	sp, #8
 804c036:	af00      	add	r7, sp, #0
 804c038:	6078      	str	r0, [r7, #4]
 804c03a:	460b      	mov	r3, r1
 804c03c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804c03e:	78fb      	ldrb	r3, [r7, #3]
 804c040:	4619      	mov	r1, r3
 804c042:	6878      	ldr	r0, [r7, #4]
 804c044:	f000 fa78 	bl	804c538 <USBH_LL_ClosePipe>

  return USBH_OK;
 804c048:	2300      	movs	r3, #0
}
 804c04a:	4618      	mov	r0, r3
 804c04c:	3708      	adds	r7, #8
 804c04e:	46bd      	mov	sp, r7
 804c050:	bd80      	pop	{r7, pc}

0804c052 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804c052:	b580      	push	{r7, lr}
 804c054:	b084      	sub	sp, #16
 804c056:	af00      	add	r7, sp, #0
 804c058:	6078      	str	r0, [r7, #4]
 804c05a:	460b      	mov	r3, r1
 804c05c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804c05e:	6878      	ldr	r0, [r7, #4]
 804c060:	f000 f836 	bl	804c0d0 <USBH_GetFreePipe>
 804c064:	4603      	mov	r3, r0
 804c066:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804c068:	89fb      	ldrh	r3, [r7, #14]
 804c06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804c06e:	4293      	cmp	r3, r2
 804c070:	d00a      	beq.n	804c088 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804c072:	78fa      	ldrb	r2, [r7, #3]
 804c074:	89fb      	ldrh	r3, [r7, #14]
 804c076:	f003 030f 	and.w	r3, r3, #15
 804c07a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804c07e:	6879      	ldr	r1, [r7, #4]
 804c080:	33e0      	adds	r3, #224	; 0xe0
 804c082:	009b      	lsls	r3, r3, #2
 804c084:	440b      	add	r3, r1
 804c086:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804c088:	89fb      	ldrh	r3, [r7, #14]
 804c08a:	b2db      	uxtb	r3, r3
}
 804c08c:	4618      	mov	r0, r3
 804c08e:	3710      	adds	r7, #16
 804c090:	46bd      	mov	sp, r7
 804c092:	bd80      	pop	{r7, pc}

0804c094 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804c094:	b480      	push	{r7}
 804c096:	b083      	sub	sp, #12
 804c098:	af00      	add	r7, sp, #0
 804c09a:	6078      	str	r0, [r7, #4]
 804c09c:	460b      	mov	r3, r1
 804c09e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804c0a0:	78fb      	ldrb	r3, [r7, #3]
 804c0a2:	2b0f      	cmp	r3, #15
 804c0a4:	d80d      	bhi.n	804c0c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804c0a6:	78fb      	ldrb	r3, [r7, #3]
 804c0a8:	687a      	ldr	r2, [r7, #4]
 804c0aa:	33e0      	adds	r3, #224	; 0xe0
 804c0ac:	009b      	lsls	r3, r3, #2
 804c0ae:	4413      	add	r3, r2
 804c0b0:	685a      	ldr	r2, [r3, #4]
 804c0b2:	78fb      	ldrb	r3, [r7, #3]
 804c0b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804c0b8:	6879      	ldr	r1, [r7, #4]
 804c0ba:	33e0      	adds	r3, #224	; 0xe0
 804c0bc:	009b      	lsls	r3, r3, #2
 804c0be:	440b      	add	r3, r1
 804c0c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804c0c2:	2300      	movs	r3, #0
}
 804c0c4:	4618      	mov	r0, r3
 804c0c6:	370c      	adds	r7, #12
 804c0c8:	46bd      	mov	sp, r7
 804c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0ce:	4770      	bx	lr

0804c0d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804c0d0:	b480      	push	{r7}
 804c0d2:	b085      	sub	sp, #20
 804c0d4:	af00      	add	r7, sp, #0
 804c0d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804c0d8:	2300      	movs	r3, #0
 804c0da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c0dc:	2300      	movs	r3, #0
 804c0de:	73fb      	strb	r3, [r7, #15]
 804c0e0:	e00f      	b.n	804c102 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804c0e2:	7bfb      	ldrb	r3, [r7, #15]
 804c0e4:	687a      	ldr	r2, [r7, #4]
 804c0e6:	33e0      	adds	r3, #224	; 0xe0
 804c0e8:	009b      	lsls	r3, r3, #2
 804c0ea:	4413      	add	r3, r2
 804c0ec:	685b      	ldr	r3, [r3, #4]
 804c0ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804c0f2:	2b00      	cmp	r3, #0
 804c0f4:	d102      	bne.n	804c0fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804c0f6:	7bfb      	ldrb	r3, [r7, #15]
 804c0f8:	b29b      	uxth	r3, r3
 804c0fa:	e007      	b.n	804c10c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c0fc:	7bfb      	ldrb	r3, [r7, #15]
 804c0fe:	3301      	adds	r3, #1
 804c100:	73fb      	strb	r3, [r7, #15]
 804c102:	7bfb      	ldrb	r3, [r7, #15]
 804c104:	2b0f      	cmp	r3, #15
 804c106:	d9ec      	bls.n	804c0e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804c108:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804c10c:	4618      	mov	r0, r3
 804c10e:	3714      	adds	r7, #20
 804c110:	46bd      	mov	sp, r7
 804c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c116:	4770      	bx	lr

0804c118 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804c118:	b580      	push	{r7, lr}
 804c11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804c11c:	2200      	movs	r2, #0
 804c11e:	490e      	ldr	r1, [pc, #56]	; (804c158 <MX_USB_HOST_Init+0x40>)
 804c120:	480e      	ldr	r0, [pc, #56]	; (804c15c <MX_USB_HOST_Init+0x44>)
 804c122:	f7fe fba7 	bl	804a874 <USBH_Init>
 804c126:	4603      	mov	r3, r0
 804c128:	2b00      	cmp	r3, #0
 804c12a:	d001      	beq.n	804c130 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804c12c:	f7f4 fec6 	bl	8040ebc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804c130:	490b      	ldr	r1, [pc, #44]	; (804c160 <MX_USB_HOST_Init+0x48>)
 804c132:	480a      	ldr	r0, [pc, #40]	; (804c15c <MX_USB_HOST_Init+0x44>)
 804c134:	f7fe fc2c 	bl	804a990 <USBH_RegisterClass>
 804c138:	4603      	mov	r3, r0
 804c13a:	2b00      	cmp	r3, #0
 804c13c:	d001      	beq.n	804c142 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804c13e:	f7f4 febd 	bl	8040ebc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804c142:	4806      	ldr	r0, [pc, #24]	; (804c15c <MX_USB_HOST_Init+0x44>)
 804c144:	f7fe fcb0 	bl	804aaa8 <USBH_Start>
 804c148:	4603      	mov	r3, r0
 804c14a:	2b00      	cmp	r3, #0
 804c14c:	d001      	beq.n	804c152 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804c14e:	f7f4 feb5 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804c152:	bf00      	nop
 804c154:	bd80      	pop	{r7, pc}
 804c156:	bf00      	nop
 804c158:	0804c179 	.word	0x0804c179
 804c15c:	20000668 	.word	0x20000668
 804c160:	2000005c 	.word	0x2000005c

0804c164 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804c164:	b580      	push	{r7, lr}
 804c166:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804c168:	4802      	ldr	r0, [pc, #8]	; (804c174 <MX_USB_HOST_Process+0x10>)
 804c16a:	f7fe fcad 	bl	804aac8 <USBH_Process>
}
 804c16e:	bf00      	nop
 804c170:	bd80      	pop	{r7, pc}
 804c172:	bf00      	nop
 804c174:	20000668 	.word	0x20000668

0804c178 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804c178:	b480      	push	{r7}
 804c17a:	b083      	sub	sp, #12
 804c17c:	af00      	add	r7, sp, #0
 804c17e:	6078      	str	r0, [r7, #4]
 804c180:	460b      	mov	r3, r1
 804c182:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804c184:	78fb      	ldrb	r3, [r7, #3]
 804c186:	3b01      	subs	r3, #1
 804c188:	2b04      	cmp	r3, #4
 804c18a:	d819      	bhi.n	804c1c0 <USBH_UserProcess+0x48>
 804c18c:	a201      	add	r2, pc, #4	; (adr r2, 804c194 <USBH_UserProcess+0x1c>)
 804c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c192:	bf00      	nop
 804c194:	0804c1c1 	.word	0x0804c1c1
 804c198:	0804c1b1 	.word	0x0804c1b1
 804c19c:	0804c1c1 	.word	0x0804c1c1
 804c1a0:	0804c1b9 	.word	0x0804c1b9
 804c1a4:	0804c1a9 	.word	0x0804c1a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804c1a8:	4b09      	ldr	r3, [pc, #36]	; (804c1d0 <USBH_UserProcess+0x58>)
 804c1aa:	2203      	movs	r2, #3
 804c1ac:	701a      	strb	r2, [r3, #0]
  break;
 804c1ae:	e008      	b.n	804c1c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804c1b0:	4b07      	ldr	r3, [pc, #28]	; (804c1d0 <USBH_UserProcess+0x58>)
 804c1b2:	2202      	movs	r2, #2
 804c1b4:	701a      	strb	r2, [r3, #0]
  break;
 804c1b6:	e004      	b.n	804c1c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804c1b8:	4b05      	ldr	r3, [pc, #20]	; (804c1d0 <USBH_UserProcess+0x58>)
 804c1ba:	2201      	movs	r2, #1
 804c1bc:	701a      	strb	r2, [r3, #0]
  break;
 804c1be:	e000      	b.n	804c1c2 <USBH_UserProcess+0x4a>

  default:
  break;
 804c1c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804c1c2:	bf00      	nop
 804c1c4:	370c      	adds	r7, #12
 804c1c6:	46bd      	mov	sp, r7
 804c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c1cc:	4770      	bx	lr
 804c1ce:	bf00      	nop
 804c1d0:	20000a40 	.word	0x20000a40

0804c1d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804c1d4:	b580      	push	{r7, lr}
 804c1d6:	b08a      	sub	sp, #40	; 0x28
 804c1d8:	af00      	add	r7, sp, #0
 804c1da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c1dc:	f107 0314 	add.w	r3, r7, #20
 804c1e0:	2200      	movs	r2, #0
 804c1e2:	601a      	str	r2, [r3, #0]
 804c1e4:	605a      	str	r2, [r3, #4]
 804c1e6:	609a      	str	r2, [r3, #8]
 804c1e8:	60da      	str	r2, [r3, #12]
 804c1ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804c1ec:	687b      	ldr	r3, [r7, #4]
 804c1ee:	681b      	ldr	r3, [r3, #0]
 804c1f0:	4a24      	ldr	r2, [pc, #144]	; (804c284 <HAL_HCD_MspInit+0xb0>)
 804c1f2:	4293      	cmp	r3, r2
 804c1f4:	d141      	bne.n	804c27a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804c1f6:	2300      	movs	r3, #0
 804c1f8:	613b      	str	r3, [r7, #16]
 804c1fa:	4b23      	ldr	r3, [pc, #140]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c1fe:	4a22      	ldr	r2, [pc, #136]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c200:	f043 0302 	orr.w	r3, r3, #2
 804c204:	6313      	str	r3, [r2, #48]	; 0x30
 804c206:	4b20      	ldr	r3, [pc, #128]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c20a:	f003 0302 	and.w	r3, r3, #2
 804c20e:	613b      	str	r3, [r7, #16]
 804c210:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804c212:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804c216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c218:	2302      	movs	r3, #2
 804c21a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c21c:	2300      	movs	r3, #0
 804c21e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804c220:	2300      	movs	r3, #0
 804c222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804c224:	230c      	movs	r3, #12
 804c226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804c228:	f107 0314 	add.w	r3, r7, #20
 804c22c:	4619      	mov	r1, r3
 804c22e:	4817      	ldr	r0, [pc, #92]	; (804c28c <HAL_HCD_MspInit+0xb8>)
 804c230:	f7f7 fc82 	bl	8043b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804c234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804c238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804c23a:	2300      	movs	r3, #0
 804c23c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c23e:	2300      	movs	r3, #0
 804c240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804c242:	f107 0314 	add.w	r3, r7, #20
 804c246:	4619      	mov	r1, r3
 804c248:	4810      	ldr	r0, [pc, #64]	; (804c28c <HAL_HCD_MspInit+0xb8>)
 804c24a:	f7f7 fc75 	bl	8043b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804c24e:	2300      	movs	r3, #0
 804c250:	60fb      	str	r3, [r7, #12]
 804c252:	4b0d      	ldr	r3, [pc, #52]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c256:	4a0c      	ldr	r2, [pc, #48]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c258:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804c25c:	6313      	str	r3, [r2, #48]	; 0x30
 804c25e:	4b0a      	ldr	r3, [pc, #40]	; (804c288 <HAL_HCD_MspInit+0xb4>)
 804c260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804c266:	60fb      	str	r3, [r7, #12]
 804c268:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804c26a:	2200      	movs	r2, #0
 804c26c:	2100      	movs	r1, #0
 804c26e:	204d      	movs	r0, #77	; 0x4d
 804c270:	f7f6 febd 	bl	8042fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804c274:	204d      	movs	r0, #77	; 0x4d
 804c276:	f7f6 fed6 	bl	8043026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804c27a:	bf00      	nop
 804c27c:	3728      	adds	r7, #40	; 0x28
 804c27e:	46bd      	mov	sp, r7
 804c280:	bd80      	pop	{r7, pc}
 804c282:	bf00      	nop
 804c284:	40040000 	.word	0x40040000
 804c288:	40023800 	.word	0x40023800
 804c28c:	40020400 	.word	0x40020400

0804c290 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804c290:	b580      	push	{r7, lr}
 804c292:	b082      	sub	sp, #8
 804c294:	af00      	add	r7, sp, #0
 804c296:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804c298:	687b      	ldr	r3, [r7, #4]
 804c29a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c29e:	4618      	mov	r0, r3
 804c2a0:	f7fe fff1 	bl	804b286 <USBH_LL_IncTimer>
}
 804c2a4:	bf00      	nop
 804c2a6:	3708      	adds	r7, #8
 804c2a8:	46bd      	mov	sp, r7
 804c2aa:	bd80      	pop	{r7, pc}

0804c2ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c2ac:	b580      	push	{r7, lr}
 804c2ae:	b082      	sub	sp, #8
 804c2b0:	af00      	add	r7, sp, #0
 804c2b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804c2b4:	687b      	ldr	r3, [r7, #4]
 804c2b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c2ba:	4618      	mov	r0, r3
 804c2bc:	f7ff f829 	bl	804b312 <USBH_LL_Connect>
}
 804c2c0:	bf00      	nop
 804c2c2:	3708      	adds	r7, #8
 804c2c4:	46bd      	mov	sp, r7
 804c2c6:	bd80      	pop	{r7, pc}

0804c2c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c2c8:	b580      	push	{r7, lr}
 804c2ca:	b082      	sub	sp, #8
 804c2cc:	af00      	add	r7, sp, #0
 804c2ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804c2d0:	687b      	ldr	r3, [r7, #4]
 804c2d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c2d6:	4618      	mov	r0, r3
 804c2d8:	f7ff f832 	bl	804b340 <USBH_LL_Disconnect>
}
 804c2dc:	bf00      	nop
 804c2de:	3708      	adds	r7, #8
 804c2e0:	46bd      	mov	sp, r7
 804c2e2:	bd80      	pop	{r7, pc}

0804c2e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804c2e4:	b480      	push	{r7}
 804c2e6:	b083      	sub	sp, #12
 804c2e8:	af00      	add	r7, sp, #0
 804c2ea:	6078      	str	r0, [r7, #4]
 804c2ec:	460b      	mov	r3, r1
 804c2ee:	70fb      	strb	r3, [r7, #3]
 804c2f0:	4613      	mov	r3, r2
 804c2f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804c2f4:	bf00      	nop
 804c2f6:	370c      	adds	r7, #12
 804c2f8:	46bd      	mov	sp, r7
 804c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c2fe:	4770      	bx	lr

0804c300 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c300:	b580      	push	{r7, lr}
 804c302:	b082      	sub	sp, #8
 804c304:	af00      	add	r7, sp, #0
 804c306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804c308:	687b      	ldr	r3, [r7, #4]
 804c30a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c30e:	4618      	mov	r0, r3
 804c310:	f7fe ffe3 	bl	804b2da <USBH_LL_PortEnabled>
}
 804c314:	bf00      	nop
 804c316:	3708      	adds	r7, #8
 804c318:	46bd      	mov	sp, r7
 804c31a:	bd80      	pop	{r7, pc}

0804c31c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c31c:	b580      	push	{r7, lr}
 804c31e:	b082      	sub	sp, #8
 804c320:	af00      	add	r7, sp, #0
 804c322:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804c324:	687b      	ldr	r3, [r7, #4]
 804c326:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c32a:	4618      	mov	r0, r3
 804c32c:	f7fe ffe3 	bl	804b2f6 <USBH_LL_PortDisabled>
}
 804c330:	bf00      	nop
 804c332:	3708      	adds	r7, #8
 804c334:	46bd      	mov	sp, r7
 804c336:	bd80      	pop	{r7, pc}

0804c338 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804c338:	b580      	push	{r7, lr}
 804c33a:	b082      	sub	sp, #8
 804c33c:	af00      	add	r7, sp, #0
 804c33e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804c340:	687b      	ldr	r3, [r7, #4]
 804c342:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c346:	2b00      	cmp	r3, #0
 804c348:	d132      	bne.n	804c3b0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804c34a:	4a1c      	ldr	r2, [pc, #112]	; (804c3bc <USBH_LL_Init+0x84>)
 804c34c:	687b      	ldr	r3, [r7, #4]
 804c34e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804c352:	687b      	ldr	r3, [r7, #4]
 804c354:	4a19      	ldr	r2, [pc, #100]	; (804c3bc <USBH_LL_Init+0x84>)
 804c356:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804c35a:	4b18      	ldr	r3, [pc, #96]	; (804c3bc <USBH_LL_Init+0x84>)
 804c35c:	4a18      	ldr	r2, [pc, #96]	; (804c3c0 <USBH_LL_Init+0x88>)
 804c35e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804c360:	4b16      	ldr	r3, [pc, #88]	; (804c3bc <USBH_LL_Init+0x84>)
 804c362:	220c      	movs	r2, #12
 804c364:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804c366:	4b15      	ldr	r3, [pc, #84]	; (804c3bc <USBH_LL_Init+0x84>)
 804c368:	2201      	movs	r2, #1
 804c36a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804c36c:	4b13      	ldr	r3, [pc, #76]	; (804c3bc <USBH_LL_Init+0x84>)
 804c36e:	2200      	movs	r2, #0
 804c370:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804c372:	4b12      	ldr	r3, [pc, #72]	; (804c3bc <USBH_LL_Init+0x84>)
 804c374:	2202      	movs	r2, #2
 804c376:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804c378:	4b10      	ldr	r3, [pc, #64]	; (804c3bc <USBH_LL_Init+0x84>)
 804c37a:	2200      	movs	r2, #0
 804c37c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804c37e:	4b0f      	ldr	r3, [pc, #60]	; (804c3bc <USBH_LL_Init+0x84>)
 804c380:	2200      	movs	r2, #0
 804c382:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804c384:	4b0d      	ldr	r3, [pc, #52]	; (804c3bc <USBH_LL_Init+0x84>)
 804c386:	2200      	movs	r2, #0
 804c388:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804c38a:	4b0c      	ldr	r3, [pc, #48]	; (804c3bc <USBH_LL_Init+0x84>)
 804c38c:	2200      	movs	r2, #0
 804c38e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804c390:	480a      	ldr	r0, [pc, #40]	; (804c3bc <USBH_LL_Init+0x84>)
 804c392:	f7f7 febb 	bl	804410c <HAL_HCD_Init>
 804c396:	4603      	mov	r3, r0
 804c398:	2b00      	cmp	r3, #0
 804c39a:	d001      	beq.n	804c3a0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804c39c:	f7f4 fd8e 	bl	8040ebc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804c3a0:	4806      	ldr	r0, [pc, #24]	; (804c3bc <USBH_LL_Init+0x84>)
 804c3a2:	f7f8 fa9e 	bl	80448e2 <HAL_HCD_GetCurrentFrame>
 804c3a6:	4603      	mov	r3, r0
 804c3a8:	4619      	mov	r1, r3
 804c3aa:	6878      	ldr	r0, [r7, #4]
 804c3ac:	f7fe ff5c 	bl	804b268 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804c3b0:	2300      	movs	r3, #0
}
 804c3b2:	4618      	mov	r0, r3
 804c3b4:	3708      	adds	r7, #8
 804c3b6:	46bd      	mov	sp, r7
 804c3b8:	bd80      	pop	{r7, pc}
 804c3ba:	bf00      	nop
 804c3bc:	20000a44 	.word	0x20000a44
 804c3c0:	40040000 	.word	0x40040000

0804c3c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804c3c4:	b580      	push	{r7, lr}
 804c3c6:	b084      	sub	sp, #16
 804c3c8:	af00      	add	r7, sp, #0
 804c3ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c3cc:	2300      	movs	r3, #0
 804c3ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c3d0:	2300      	movs	r3, #0
 804c3d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804c3d4:	687b      	ldr	r3, [r7, #4]
 804c3d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c3da:	4618      	mov	r0, r3
 804c3dc:	f7f8 fa0b 	bl	80447f6 <HAL_HCD_Start>
 804c3e0:	4603      	mov	r3, r0
 804c3e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c3e4:	7bfb      	ldrb	r3, [r7, #15]
 804c3e6:	4618      	mov	r0, r3
 804c3e8:	f000 f95c 	bl	804c6a4 <USBH_Get_USB_Status>
 804c3ec:	4603      	mov	r3, r0
 804c3ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c3f0:	7bbb      	ldrb	r3, [r7, #14]
}
 804c3f2:	4618      	mov	r0, r3
 804c3f4:	3710      	adds	r7, #16
 804c3f6:	46bd      	mov	sp, r7
 804c3f8:	bd80      	pop	{r7, pc}

0804c3fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804c3fa:	b580      	push	{r7, lr}
 804c3fc:	b084      	sub	sp, #16
 804c3fe:	af00      	add	r7, sp, #0
 804c400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c402:	2300      	movs	r3, #0
 804c404:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c406:	2300      	movs	r3, #0
 804c408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804c40a:	687b      	ldr	r3, [r7, #4]
 804c40c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c410:	4618      	mov	r0, r3
 804c412:	f7f8 fa13 	bl	804483c <HAL_HCD_Stop>
 804c416:	4603      	mov	r3, r0
 804c418:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c41a:	7bfb      	ldrb	r3, [r7, #15]
 804c41c:	4618      	mov	r0, r3
 804c41e:	f000 f941 	bl	804c6a4 <USBH_Get_USB_Status>
 804c422:	4603      	mov	r3, r0
 804c424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c426:	7bbb      	ldrb	r3, [r7, #14]
}
 804c428:	4618      	mov	r0, r3
 804c42a:	3710      	adds	r7, #16
 804c42c:	46bd      	mov	sp, r7
 804c42e:	bd80      	pop	{r7, pc}

0804c430 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804c430:	b580      	push	{r7, lr}
 804c432:	b084      	sub	sp, #16
 804c434:	af00      	add	r7, sp, #0
 804c436:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804c438:	2301      	movs	r3, #1
 804c43a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804c43c:	687b      	ldr	r3, [r7, #4]
 804c43e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c442:	4618      	mov	r0, r3
 804c444:	f7f8 fa5b 	bl	80448fe <HAL_HCD_GetCurrentSpeed>
 804c448:	4603      	mov	r3, r0
 804c44a:	2b02      	cmp	r3, #2
 804c44c:	d00c      	beq.n	804c468 <USBH_LL_GetSpeed+0x38>
 804c44e:	2b02      	cmp	r3, #2
 804c450:	d80d      	bhi.n	804c46e <USBH_LL_GetSpeed+0x3e>
 804c452:	2b00      	cmp	r3, #0
 804c454:	d002      	beq.n	804c45c <USBH_LL_GetSpeed+0x2c>
 804c456:	2b01      	cmp	r3, #1
 804c458:	d003      	beq.n	804c462 <USBH_LL_GetSpeed+0x32>
 804c45a:	e008      	b.n	804c46e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804c45c:	2300      	movs	r3, #0
 804c45e:	73fb      	strb	r3, [r7, #15]
    break;
 804c460:	e008      	b.n	804c474 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804c462:	2301      	movs	r3, #1
 804c464:	73fb      	strb	r3, [r7, #15]
    break;
 804c466:	e005      	b.n	804c474 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804c468:	2302      	movs	r3, #2
 804c46a:	73fb      	strb	r3, [r7, #15]
    break;
 804c46c:	e002      	b.n	804c474 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804c46e:	2301      	movs	r3, #1
 804c470:	73fb      	strb	r3, [r7, #15]
    break;
 804c472:	bf00      	nop
  }
  return  speed;
 804c474:	7bfb      	ldrb	r3, [r7, #15]
}
 804c476:	4618      	mov	r0, r3
 804c478:	3710      	adds	r7, #16
 804c47a:	46bd      	mov	sp, r7
 804c47c:	bd80      	pop	{r7, pc}

0804c47e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804c47e:	b580      	push	{r7, lr}
 804c480:	b084      	sub	sp, #16
 804c482:	af00      	add	r7, sp, #0
 804c484:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c486:	2300      	movs	r3, #0
 804c488:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c48a:	2300      	movs	r3, #0
 804c48c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804c48e:	687b      	ldr	r3, [r7, #4]
 804c490:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c494:	4618      	mov	r0, r3
 804c496:	f7f8 f9ee 	bl	8044876 <HAL_HCD_ResetPort>
 804c49a:	4603      	mov	r3, r0
 804c49c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c49e:	7bfb      	ldrb	r3, [r7, #15]
 804c4a0:	4618      	mov	r0, r3
 804c4a2:	f000 f8ff 	bl	804c6a4 <USBH_Get_USB_Status>
 804c4a6:	4603      	mov	r3, r0
 804c4a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c4aa:	7bbb      	ldrb	r3, [r7, #14]
}
 804c4ac:	4618      	mov	r0, r3
 804c4ae:	3710      	adds	r7, #16
 804c4b0:	46bd      	mov	sp, r7
 804c4b2:	bd80      	pop	{r7, pc}

0804c4b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c4b4:	b580      	push	{r7, lr}
 804c4b6:	b082      	sub	sp, #8
 804c4b8:	af00      	add	r7, sp, #0
 804c4ba:	6078      	str	r0, [r7, #4]
 804c4bc:	460b      	mov	r3, r1
 804c4be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804c4c0:	687b      	ldr	r3, [r7, #4]
 804c4c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c4c6:	78fa      	ldrb	r2, [r7, #3]
 804c4c8:	4611      	mov	r1, r2
 804c4ca:	4618      	mov	r0, r3
 804c4cc:	f7f8 f9f5 	bl	80448ba <HAL_HCD_HC_GetXferCount>
 804c4d0:	4603      	mov	r3, r0
}
 804c4d2:	4618      	mov	r0, r3
 804c4d4:	3708      	adds	r7, #8
 804c4d6:	46bd      	mov	sp, r7
 804c4d8:	bd80      	pop	{r7, pc}

0804c4da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804c4da:	b590      	push	{r4, r7, lr}
 804c4dc:	b089      	sub	sp, #36	; 0x24
 804c4de:	af04      	add	r7, sp, #16
 804c4e0:	6078      	str	r0, [r7, #4]
 804c4e2:	4608      	mov	r0, r1
 804c4e4:	4611      	mov	r1, r2
 804c4e6:	461a      	mov	r2, r3
 804c4e8:	4603      	mov	r3, r0
 804c4ea:	70fb      	strb	r3, [r7, #3]
 804c4ec:	460b      	mov	r3, r1
 804c4ee:	70bb      	strb	r3, [r7, #2]
 804c4f0:	4613      	mov	r3, r2
 804c4f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c4f4:	2300      	movs	r3, #0
 804c4f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c4f8:	2300      	movs	r3, #0
 804c4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804c4fc:	687b      	ldr	r3, [r7, #4]
 804c4fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c502:	787c      	ldrb	r4, [r7, #1]
 804c504:	78ba      	ldrb	r2, [r7, #2]
 804c506:	78f9      	ldrb	r1, [r7, #3]
 804c508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c50a:	9302      	str	r3, [sp, #8]
 804c50c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804c510:	9301      	str	r3, [sp, #4]
 804c512:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c516:	9300      	str	r3, [sp, #0]
 804c518:	4623      	mov	r3, r4
 804c51a:	f7f7 fe59 	bl	80441d0 <HAL_HCD_HC_Init>
 804c51e:	4603      	mov	r3, r0
 804c520:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804c522:	7bfb      	ldrb	r3, [r7, #15]
 804c524:	4618      	mov	r0, r3
 804c526:	f000 f8bd 	bl	804c6a4 <USBH_Get_USB_Status>
 804c52a:	4603      	mov	r3, r0
 804c52c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c52e:	7bbb      	ldrb	r3, [r7, #14]
}
 804c530:	4618      	mov	r0, r3
 804c532:	3714      	adds	r7, #20
 804c534:	46bd      	mov	sp, r7
 804c536:	bd90      	pop	{r4, r7, pc}

0804c538 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c538:	b580      	push	{r7, lr}
 804c53a:	b084      	sub	sp, #16
 804c53c:	af00      	add	r7, sp, #0
 804c53e:	6078      	str	r0, [r7, #4]
 804c540:	460b      	mov	r3, r1
 804c542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c544:	2300      	movs	r3, #0
 804c546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c548:	2300      	movs	r3, #0
 804c54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804c54c:	687b      	ldr	r3, [r7, #4]
 804c54e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c552:	78fa      	ldrb	r2, [r7, #3]
 804c554:	4611      	mov	r1, r2
 804c556:	4618      	mov	r0, r3
 804c558:	f7f7 fec9 	bl	80442ee <HAL_HCD_HC_Halt>
 804c55c:	4603      	mov	r3, r0
 804c55e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c560:	7bfb      	ldrb	r3, [r7, #15]
 804c562:	4618      	mov	r0, r3
 804c564:	f000 f89e 	bl	804c6a4 <USBH_Get_USB_Status>
 804c568:	4603      	mov	r3, r0
 804c56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c56c:	7bbb      	ldrb	r3, [r7, #14]
}
 804c56e:	4618      	mov	r0, r3
 804c570:	3710      	adds	r7, #16
 804c572:	46bd      	mov	sp, r7
 804c574:	bd80      	pop	{r7, pc}

0804c576 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804c576:	b590      	push	{r4, r7, lr}
 804c578:	b089      	sub	sp, #36	; 0x24
 804c57a:	af04      	add	r7, sp, #16
 804c57c:	6078      	str	r0, [r7, #4]
 804c57e:	4608      	mov	r0, r1
 804c580:	4611      	mov	r1, r2
 804c582:	461a      	mov	r2, r3
 804c584:	4603      	mov	r3, r0
 804c586:	70fb      	strb	r3, [r7, #3]
 804c588:	460b      	mov	r3, r1
 804c58a:	70bb      	strb	r3, [r7, #2]
 804c58c:	4613      	mov	r3, r2
 804c58e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c590:	2300      	movs	r3, #0
 804c592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c594:	2300      	movs	r3, #0
 804c596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804c598:	687b      	ldr	r3, [r7, #4]
 804c59a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804c59e:	787c      	ldrb	r4, [r7, #1]
 804c5a0:	78ba      	ldrb	r2, [r7, #2]
 804c5a2:	78f9      	ldrb	r1, [r7, #3]
 804c5a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804c5a8:	9303      	str	r3, [sp, #12]
 804c5aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804c5ac:	9302      	str	r3, [sp, #8]
 804c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c5b0:	9301      	str	r3, [sp, #4]
 804c5b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 804c5b6:	9300      	str	r3, [sp, #0]
 804c5b8:	4623      	mov	r3, r4
 804c5ba:	f7f7 febb 	bl	8044334 <HAL_HCD_HC_SubmitRequest>
 804c5be:	4603      	mov	r3, r0
 804c5c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804c5c2:	7bfb      	ldrb	r3, [r7, #15]
 804c5c4:	4618      	mov	r0, r3
 804c5c6:	f000 f86d 	bl	804c6a4 <USBH_Get_USB_Status>
 804c5ca:	4603      	mov	r3, r0
 804c5cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 804c5d0:	4618      	mov	r0, r3
 804c5d2:	3714      	adds	r7, #20
 804c5d4:	46bd      	mov	sp, r7
 804c5d6:	bd90      	pop	{r4, r7, pc}

0804c5d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804c5d8:	b580      	push	{r7, lr}
 804c5da:	b082      	sub	sp, #8
 804c5dc:	af00      	add	r7, sp, #0
 804c5de:	6078      	str	r0, [r7, #4]
 804c5e0:	460b      	mov	r3, r1
 804c5e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804c5e4:	687b      	ldr	r3, [r7, #4]
 804c5e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c5ea:	78fa      	ldrb	r2, [r7, #3]
 804c5ec:	4611      	mov	r1, r2
 804c5ee:	4618      	mov	r0, r3
 804c5f0:	f7f8 f94f 	bl	8044892 <HAL_HCD_HC_GetURBState>
 804c5f4:	4603      	mov	r3, r0
}
 804c5f6:	4618      	mov	r0, r3
 804c5f8:	3708      	adds	r7, #8
 804c5fa:	46bd      	mov	sp, r7
 804c5fc:	bd80      	pop	{r7, pc}

0804c5fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804c5fe:	b580      	push	{r7, lr}
 804c600:	b082      	sub	sp, #8
 804c602:	af00      	add	r7, sp, #0
 804c604:	6078      	str	r0, [r7, #4]
 804c606:	460b      	mov	r3, r1
 804c608:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804c60a:	687b      	ldr	r3, [r7, #4]
 804c60c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c610:	2b00      	cmp	r3, #0
 804c612:	d103      	bne.n	804c61c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804c614:	78fb      	ldrb	r3, [r7, #3]
 804c616:	4618      	mov	r0, r3
 804c618:	f000 f870 	bl	804c6fc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804c61c:	20c8      	movs	r0, #200	; 0xc8
 804c61e:	f7f6 fbf3 	bl	8042e08 <HAL_Delay>
  return USBH_OK;
 804c622:	2300      	movs	r3, #0
}
 804c624:	4618      	mov	r0, r3
 804c626:	3708      	adds	r7, #8
 804c628:	46bd      	mov	sp, r7
 804c62a:	bd80      	pop	{r7, pc}

0804c62c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804c62c:	b480      	push	{r7}
 804c62e:	b085      	sub	sp, #20
 804c630:	af00      	add	r7, sp, #0
 804c632:	6078      	str	r0, [r7, #4]
 804c634:	460b      	mov	r3, r1
 804c636:	70fb      	strb	r3, [r7, #3]
 804c638:	4613      	mov	r3, r2
 804c63a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804c63c:	687b      	ldr	r3, [r7, #4]
 804c63e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c642:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804c644:	78fb      	ldrb	r3, [r7, #3]
 804c646:	68fa      	ldr	r2, [r7, #12]
 804c648:	212c      	movs	r1, #44	; 0x2c
 804c64a:	fb01 f303 	mul.w	r3, r1, r3
 804c64e:	4413      	add	r3, r2
 804c650:	333b      	adds	r3, #59	; 0x3b
 804c652:	781b      	ldrb	r3, [r3, #0]
 804c654:	2b00      	cmp	r3, #0
 804c656:	d009      	beq.n	804c66c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804c658:	78fb      	ldrb	r3, [r7, #3]
 804c65a:	68fa      	ldr	r2, [r7, #12]
 804c65c:	212c      	movs	r1, #44	; 0x2c
 804c65e:	fb01 f303 	mul.w	r3, r1, r3
 804c662:	4413      	add	r3, r2
 804c664:	3354      	adds	r3, #84	; 0x54
 804c666:	78ba      	ldrb	r2, [r7, #2]
 804c668:	701a      	strb	r2, [r3, #0]
 804c66a:	e008      	b.n	804c67e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804c66c:	78fb      	ldrb	r3, [r7, #3]
 804c66e:	68fa      	ldr	r2, [r7, #12]
 804c670:	212c      	movs	r1, #44	; 0x2c
 804c672:	fb01 f303 	mul.w	r3, r1, r3
 804c676:	4413      	add	r3, r2
 804c678:	3355      	adds	r3, #85	; 0x55
 804c67a:	78ba      	ldrb	r2, [r7, #2]
 804c67c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804c67e:	2300      	movs	r3, #0
}
 804c680:	4618      	mov	r0, r3
 804c682:	3714      	adds	r7, #20
 804c684:	46bd      	mov	sp, r7
 804c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c68a:	4770      	bx	lr

0804c68c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804c68c:	b580      	push	{r7, lr}
 804c68e:	b082      	sub	sp, #8
 804c690:	af00      	add	r7, sp, #0
 804c692:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804c694:	6878      	ldr	r0, [r7, #4]
 804c696:	f7f6 fbb7 	bl	8042e08 <HAL_Delay>
}
 804c69a:	bf00      	nop
 804c69c:	3708      	adds	r7, #8
 804c69e:	46bd      	mov	sp, r7
 804c6a0:	bd80      	pop	{r7, pc}
	...

0804c6a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804c6a4:	b480      	push	{r7}
 804c6a6:	b085      	sub	sp, #20
 804c6a8:	af00      	add	r7, sp, #0
 804c6aa:	4603      	mov	r3, r0
 804c6ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c6ae:	2300      	movs	r3, #0
 804c6b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804c6b2:	79fb      	ldrb	r3, [r7, #7]
 804c6b4:	2b03      	cmp	r3, #3
 804c6b6:	d817      	bhi.n	804c6e8 <USBH_Get_USB_Status+0x44>
 804c6b8:	a201      	add	r2, pc, #4	; (adr r2, 804c6c0 <USBH_Get_USB_Status+0x1c>)
 804c6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c6be:	bf00      	nop
 804c6c0:	0804c6d1 	.word	0x0804c6d1
 804c6c4:	0804c6d7 	.word	0x0804c6d7
 804c6c8:	0804c6dd 	.word	0x0804c6dd
 804c6cc:	0804c6e3 	.word	0x0804c6e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804c6d0:	2300      	movs	r3, #0
 804c6d2:	73fb      	strb	r3, [r7, #15]
    break;
 804c6d4:	e00b      	b.n	804c6ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804c6d6:	2302      	movs	r3, #2
 804c6d8:	73fb      	strb	r3, [r7, #15]
    break;
 804c6da:	e008      	b.n	804c6ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804c6dc:	2301      	movs	r3, #1
 804c6de:	73fb      	strb	r3, [r7, #15]
    break;
 804c6e0:	e005      	b.n	804c6ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804c6e2:	2302      	movs	r3, #2
 804c6e4:	73fb      	strb	r3, [r7, #15]
    break;
 804c6e6:	e002      	b.n	804c6ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804c6e8:	2302      	movs	r3, #2
 804c6ea:	73fb      	strb	r3, [r7, #15]
    break;
 804c6ec:	bf00      	nop
  }
  return usb_status;
 804c6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 804c6f0:	4618      	mov	r0, r3
 804c6f2:	3714      	adds	r7, #20
 804c6f4:	46bd      	mov	sp, r7
 804c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c6fa:	4770      	bx	lr

0804c6fc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804c6fc:	b580      	push	{r7, lr}
 804c6fe:	b084      	sub	sp, #16
 804c700:	af00      	add	r7, sp, #0
 804c702:	4603      	mov	r3, r0
 804c704:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804c706:	79fb      	ldrb	r3, [r7, #7]
 804c708:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804c70a:	79fb      	ldrb	r3, [r7, #7]
 804c70c:	2b00      	cmp	r3, #0
 804c70e:	d102      	bne.n	804c716 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804c710:	2301      	movs	r3, #1
 804c712:	73fb      	strb	r3, [r7, #15]
 804c714:	e001      	b.n	804c71a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804c716:	2300      	movs	r3, #0
 804c718:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804c71a:	7bfb      	ldrb	r3, [r7, #15]
 804c71c:	461a      	mov	r2, r3
 804c71e:	2110      	movs	r1, #16
 804c720:	4803      	ldr	r0, [pc, #12]	; (804c730 <MX_DriverVbusHS+0x34>)
 804c722:	f7f7 fcc1 	bl	80440a8 <HAL_GPIO_WritePin>
}
 804c726:	bf00      	nop
 804c728:	3710      	adds	r7, #16
 804c72a:	46bd      	mov	sp, r7
 804c72c:	bd80      	pop	{r7, pc}
 804c72e:	bf00      	nop
 804c730:	40020800 	.word	0x40020800

0804c734 <__errno>:
 804c734:	4b01      	ldr	r3, [pc, #4]	; (804c73c <__errno+0x8>)
 804c736:	6818      	ldr	r0, [r3, #0]
 804c738:	4770      	bx	lr
 804c73a:	bf00      	nop
 804c73c:	2000007c 	.word	0x2000007c

0804c740 <__libc_init_array>:
 804c740:	b570      	push	{r4, r5, r6, lr}
 804c742:	4d0d      	ldr	r5, [pc, #52]	; (804c778 <__libc_init_array+0x38>)
 804c744:	4c0d      	ldr	r4, [pc, #52]	; (804c77c <__libc_init_array+0x3c>)
 804c746:	1b64      	subs	r4, r4, r5
 804c748:	10a4      	asrs	r4, r4, #2
 804c74a:	2600      	movs	r6, #0
 804c74c:	42a6      	cmp	r6, r4
 804c74e:	d109      	bne.n	804c764 <__libc_init_array+0x24>
 804c750:	4d0b      	ldr	r5, [pc, #44]	; (804c780 <__libc_init_array+0x40>)
 804c752:	4c0c      	ldr	r4, [pc, #48]	; (804c784 <__libc_init_array+0x44>)
 804c754:	f001 fa10 	bl	804db78 <_init>
 804c758:	1b64      	subs	r4, r4, r5
 804c75a:	10a4      	asrs	r4, r4, #2
 804c75c:	2600      	movs	r6, #0
 804c75e:	42a6      	cmp	r6, r4
 804c760:	d105      	bne.n	804c76e <__libc_init_array+0x2e>
 804c762:	bd70      	pop	{r4, r5, r6, pc}
 804c764:	f855 3b04 	ldr.w	r3, [r5], #4
 804c768:	4798      	blx	r3
 804c76a:	3601      	adds	r6, #1
 804c76c:	e7ee      	b.n	804c74c <__libc_init_array+0xc>
 804c76e:	f855 3b04 	ldr.w	r3, [r5], #4
 804c772:	4798      	blx	r3
 804c774:	3601      	adds	r6, #1
 804c776:	e7f2      	b.n	804c75e <__libc_init_array+0x1e>
 804c778:	0804fc68 	.word	0x0804fc68
 804c77c:	0804fc68 	.word	0x0804fc68
 804c780:	0804fc68 	.word	0x0804fc68
 804c784:	0804fc6c 	.word	0x0804fc6c

0804c788 <malloc>:
 804c788:	4b02      	ldr	r3, [pc, #8]	; (804c794 <malloc+0xc>)
 804c78a:	4601      	mov	r1, r0
 804c78c:	6818      	ldr	r0, [r3, #0]
 804c78e:	f000 b87f 	b.w	804c890 <_malloc_r>
 804c792:	bf00      	nop
 804c794:	2000007c 	.word	0x2000007c

0804c798 <free>:
 804c798:	4b02      	ldr	r3, [pc, #8]	; (804c7a4 <free+0xc>)
 804c79a:	4601      	mov	r1, r0
 804c79c:	6818      	ldr	r0, [r3, #0]
 804c79e:	f000 b80b 	b.w	804c7b8 <_free_r>
 804c7a2:	bf00      	nop
 804c7a4:	2000007c 	.word	0x2000007c

0804c7a8 <memset>:
 804c7a8:	4402      	add	r2, r0
 804c7aa:	4603      	mov	r3, r0
 804c7ac:	4293      	cmp	r3, r2
 804c7ae:	d100      	bne.n	804c7b2 <memset+0xa>
 804c7b0:	4770      	bx	lr
 804c7b2:	f803 1b01 	strb.w	r1, [r3], #1
 804c7b6:	e7f9      	b.n	804c7ac <memset+0x4>

0804c7b8 <_free_r>:
 804c7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804c7ba:	2900      	cmp	r1, #0
 804c7bc:	d044      	beq.n	804c848 <_free_r+0x90>
 804c7be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804c7c2:	9001      	str	r0, [sp, #4]
 804c7c4:	2b00      	cmp	r3, #0
 804c7c6:	f1a1 0404 	sub.w	r4, r1, #4
 804c7ca:	bfb8      	it	lt
 804c7cc:	18e4      	addlt	r4, r4, r3
 804c7ce:	f000 fc71 	bl	804d0b4 <__malloc_lock>
 804c7d2:	4a1e      	ldr	r2, [pc, #120]	; (804c84c <_free_r+0x94>)
 804c7d4:	9801      	ldr	r0, [sp, #4]
 804c7d6:	6813      	ldr	r3, [r2, #0]
 804c7d8:	b933      	cbnz	r3, 804c7e8 <_free_r+0x30>
 804c7da:	6063      	str	r3, [r4, #4]
 804c7dc:	6014      	str	r4, [r2, #0]
 804c7de:	b003      	add	sp, #12
 804c7e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804c7e4:	f000 bc6c 	b.w	804d0c0 <__malloc_unlock>
 804c7e8:	42a3      	cmp	r3, r4
 804c7ea:	d908      	bls.n	804c7fe <_free_r+0x46>
 804c7ec:	6825      	ldr	r5, [r4, #0]
 804c7ee:	1961      	adds	r1, r4, r5
 804c7f0:	428b      	cmp	r3, r1
 804c7f2:	bf01      	itttt	eq
 804c7f4:	6819      	ldreq	r1, [r3, #0]
 804c7f6:	685b      	ldreq	r3, [r3, #4]
 804c7f8:	1949      	addeq	r1, r1, r5
 804c7fa:	6021      	streq	r1, [r4, #0]
 804c7fc:	e7ed      	b.n	804c7da <_free_r+0x22>
 804c7fe:	461a      	mov	r2, r3
 804c800:	685b      	ldr	r3, [r3, #4]
 804c802:	b10b      	cbz	r3, 804c808 <_free_r+0x50>
 804c804:	42a3      	cmp	r3, r4
 804c806:	d9fa      	bls.n	804c7fe <_free_r+0x46>
 804c808:	6811      	ldr	r1, [r2, #0]
 804c80a:	1855      	adds	r5, r2, r1
 804c80c:	42a5      	cmp	r5, r4
 804c80e:	d10b      	bne.n	804c828 <_free_r+0x70>
 804c810:	6824      	ldr	r4, [r4, #0]
 804c812:	4421      	add	r1, r4
 804c814:	1854      	adds	r4, r2, r1
 804c816:	42a3      	cmp	r3, r4
 804c818:	6011      	str	r1, [r2, #0]
 804c81a:	d1e0      	bne.n	804c7de <_free_r+0x26>
 804c81c:	681c      	ldr	r4, [r3, #0]
 804c81e:	685b      	ldr	r3, [r3, #4]
 804c820:	6053      	str	r3, [r2, #4]
 804c822:	4421      	add	r1, r4
 804c824:	6011      	str	r1, [r2, #0]
 804c826:	e7da      	b.n	804c7de <_free_r+0x26>
 804c828:	d902      	bls.n	804c830 <_free_r+0x78>
 804c82a:	230c      	movs	r3, #12
 804c82c:	6003      	str	r3, [r0, #0]
 804c82e:	e7d6      	b.n	804c7de <_free_r+0x26>
 804c830:	6825      	ldr	r5, [r4, #0]
 804c832:	1961      	adds	r1, r4, r5
 804c834:	428b      	cmp	r3, r1
 804c836:	bf04      	itt	eq
 804c838:	6819      	ldreq	r1, [r3, #0]
 804c83a:	685b      	ldreq	r3, [r3, #4]
 804c83c:	6063      	str	r3, [r4, #4]
 804c83e:	bf04      	itt	eq
 804c840:	1949      	addeq	r1, r1, r5
 804c842:	6021      	streq	r1, [r4, #0]
 804c844:	6054      	str	r4, [r2, #4]
 804c846:	e7ca      	b.n	804c7de <_free_r+0x26>
 804c848:	b003      	add	sp, #12
 804c84a:	bd30      	pop	{r4, r5, pc}
 804c84c:	20000d48 	.word	0x20000d48

0804c850 <sbrk_aligned>:
 804c850:	b570      	push	{r4, r5, r6, lr}
 804c852:	4e0e      	ldr	r6, [pc, #56]	; (804c88c <sbrk_aligned+0x3c>)
 804c854:	460c      	mov	r4, r1
 804c856:	6831      	ldr	r1, [r6, #0]
 804c858:	4605      	mov	r5, r0
 804c85a:	b911      	cbnz	r1, 804c862 <sbrk_aligned+0x12>
 804c85c:	f000 f91a 	bl	804ca94 <_sbrk_r>
 804c860:	6030      	str	r0, [r6, #0]
 804c862:	4621      	mov	r1, r4
 804c864:	4628      	mov	r0, r5
 804c866:	f000 f915 	bl	804ca94 <_sbrk_r>
 804c86a:	1c43      	adds	r3, r0, #1
 804c86c:	d00a      	beq.n	804c884 <sbrk_aligned+0x34>
 804c86e:	1cc4      	adds	r4, r0, #3
 804c870:	f024 0403 	bic.w	r4, r4, #3
 804c874:	42a0      	cmp	r0, r4
 804c876:	d007      	beq.n	804c888 <sbrk_aligned+0x38>
 804c878:	1a21      	subs	r1, r4, r0
 804c87a:	4628      	mov	r0, r5
 804c87c:	f000 f90a 	bl	804ca94 <_sbrk_r>
 804c880:	3001      	adds	r0, #1
 804c882:	d101      	bne.n	804c888 <sbrk_aligned+0x38>
 804c884:	f04f 34ff 	mov.w	r4, #4294967295
 804c888:	4620      	mov	r0, r4
 804c88a:	bd70      	pop	{r4, r5, r6, pc}
 804c88c:	20000d4c 	.word	0x20000d4c

0804c890 <_malloc_r>:
 804c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804c894:	1ccd      	adds	r5, r1, #3
 804c896:	f025 0503 	bic.w	r5, r5, #3
 804c89a:	3508      	adds	r5, #8
 804c89c:	2d0c      	cmp	r5, #12
 804c89e:	bf38      	it	cc
 804c8a0:	250c      	movcc	r5, #12
 804c8a2:	2d00      	cmp	r5, #0
 804c8a4:	4607      	mov	r7, r0
 804c8a6:	db01      	blt.n	804c8ac <_malloc_r+0x1c>
 804c8a8:	42a9      	cmp	r1, r5
 804c8aa:	d905      	bls.n	804c8b8 <_malloc_r+0x28>
 804c8ac:	230c      	movs	r3, #12
 804c8ae:	603b      	str	r3, [r7, #0]
 804c8b0:	2600      	movs	r6, #0
 804c8b2:	4630      	mov	r0, r6
 804c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804c8b8:	4e2e      	ldr	r6, [pc, #184]	; (804c974 <_malloc_r+0xe4>)
 804c8ba:	f000 fbfb 	bl	804d0b4 <__malloc_lock>
 804c8be:	6833      	ldr	r3, [r6, #0]
 804c8c0:	461c      	mov	r4, r3
 804c8c2:	bb34      	cbnz	r4, 804c912 <_malloc_r+0x82>
 804c8c4:	4629      	mov	r1, r5
 804c8c6:	4638      	mov	r0, r7
 804c8c8:	f7ff ffc2 	bl	804c850 <sbrk_aligned>
 804c8cc:	1c43      	adds	r3, r0, #1
 804c8ce:	4604      	mov	r4, r0
 804c8d0:	d14d      	bne.n	804c96e <_malloc_r+0xde>
 804c8d2:	6834      	ldr	r4, [r6, #0]
 804c8d4:	4626      	mov	r6, r4
 804c8d6:	2e00      	cmp	r6, #0
 804c8d8:	d140      	bne.n	804c95c <_malloc_r+0xcc>
 804c8da:	6823      	ldr	r3, [r4, #0]
 804c8dc:	4631      	mov	r1, r6
 804c8de:	4638      	mov	r0, r7
 804c8e0:	eb04 0803 	add.w	r8, r4, r3
 804c8e4:	f000 f8d6 	bl	804ca94 <_sbrk_r>
 804c8e8:	4580      	cmp	r8, r0
 804c8ea:	d13a      	bne.n	804c962 <_malloc_r+0xd2>
 804c8ec:	6821      	ldr	r1, [r4, #0]
 804c8ee:	3503      	adds	r5, #3
 804c8f0:	1a6d      	subs	r5, r5, r1
 804c8f2:	f025 0503 	bic.w	r5, r5, #3
 804c8f6:	3508      	adds	r5, #8
 804c8f8:	2d0c      	cmp	r5, #12
 804c8fa:	bf38      	it	cc
 804c8fc:	250c      	movcc	r5, #12
 804c8fe:	4629      	mov	r1, r5
 804c900:	4638      	mov	r0, r7
 804c902:	f7ff ffa5 	bl	804c850 <sbrk_aligned>
 804c906:	3001      	adds	r0, #1
 804c908:	d02b      	beq.n	804c962 <_malloc_r+0xd2>
 804c90a:	6823      	ldr	r3, [r4, #0]
 804c90c:	442b      	add	r3, r5
 804c90e:	6023      	str	r3, [r4, #0]
 804c910:	e00e      	b.n	804c930 <_malloc_r+0xa0>
 804c912:	6822      	ldr	r2, [r4, #0]
 804c914:	1b52      	subs	r2, r2, r5
 804c916:	d41e      	bmi.n	804c956 <_malloc_r+0xc6>
 804c918:	2a0b      	cmp	r2, #11
 804c91a:	d916      	bls.n	804c94a <_malloc_r+0xba>
 804c91c:	1961      	adds	r1, r4, r5
 804c91e:	42a3      	cmp	r3, r4
 804c920:	6025      	str	r5, [r4, #0]
 804c922:	bf18      	it	ne
 804c924:	6059      	strne	r1, [r3, #4]
 804c926:	6863      	ldr	r3, [r4, #4]
 804c928:	bf08      	it	eq
 804c92a:	6031      	streq	r1, [r6, #0]
 804c92c:	5162      	str	r2, [r4, r5]
 804c92e:	604b      	str	r3, [r1, #4]
 804c930:	4638      	mov	r0, r7
 804c932:	f104 060b 	add.w	r6, r4, #11
 804c936:	f000 fbc3 	bl	804d0c0 <__malloc_unlock>
 804c93a:	f026 0607 	bic.w	r6, r6, #7
 804c93e:	1d23      	adds	r3, r4, #4
 804c940:	1af2      	subs	r2, r6, r3
 804c942:	d0b6      	beq.n	804c8b2 <_malloc_r+0x22>
 804c944:	1b9b      	subs	r3, r3, r6
 804c946:	50a3      	str	r3, [r4, r2]
 804c948:	e7b3      	b.n	804c8b2 <_malloc_r+0x22>
 804c94a:	6862      	ldr	r2, [r4, #4]
 804c94c:	42a3      	cmp	r3, r4
 804c94e:	bf0c      	ite	eq
 804c950:	6032      	streq	r2, [r6, #0]
 804c952:	605a      	strne	r2, [r3, #4]
 804c954:	e7ec      	b.n	804c930 <_malloc_r+0xa0>
 804c956:	4623      	mov	r3, r4
 804c958:	6864      	ldr	r4, [r4, #4]
 804c95a:	e7b2      	b.n	804c8c2 <_malloc_r+0x32>
 804c95c:	4634      	mov	r4, r6
 804c95e:	6876      	ldr	r6, [r6, #4]
 804c960:	e7b9      	b.n	804c8d6 <_malloc_r+0x46>
 804c962:	230c      	movs	r3, #12
 804c964:	603b      	str	r3, [r7, #0]
 804c966:	4638      	mov	r0, r7
 804c968:	f000 fbaa 	bl	804d0c0 <__malloc_unlock>
 804c96c:	e7a1      	b.n	804c8b2 <_malloc_r+0x22>
 804c96e:	6025      	str	r5, [r4, #0]
 804c970:	e7de      	b.n	804c930 <_malloc_r+0xa0>
 804c972:	bf00      	nop
 804c974:	20000d48 	.word	0x20000d48

0804c978 <iprintf>:
 804c978:	b40f      	push	{r0, r1, r2, r3}
 804c97a:	4b0a      	ldr	r3, [pc, #40]	; (804c9a4 <iprintf+0x2c>)
 804c97c:	b513      	push	{r0, r1, r4, lr}
 804c97e:	681c      	ldr	r4, [r3, #0]
 804c980:	b124      	cbz	r4, 804c98c <iprintf+0x14>
 804c982:	69a3      	ldr	r3, [r4, #24]
 804c984:	b913      	cbnz	r3, 804c98c <iprintf+0x14>
 804c986:	4620      	mov	r0, r4
 804c988:	f000 fa8e 	bl	804cea8 <__sinit>
 804c98c:	ab05      	add	r3, sp, #20
 804c98e:	9a04      	ldr	r2, [sp, #16]
 804c990:	68a1      	ldr	r1, [r4, #8]
 804c992:	9301      	str	r3, [sp, #4]
 804c994:	4620      	mov	r0, r4
 804c996:	f000 fd1f 	bl	804d3d8 <_vfiprintf_r>
 804c99a:	b002      	add	sp, #8
 804c99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804c9a0:	b004      	add	sp, #16
 804c9a2:	4770      	bx	lr
 804c9a4:	2000007c 	.word	0x2000007c

0804c9a8 <_puts_r>:
 804c9a8:	b570      	push	{r4, r5, r6, lr}
 804c9aa:	460e      	mov	r6, r1
 804c9ac:	4605      	mov	r5, r0
 804c9ae:	b118      	cbz	r0, 804c9b8 <_puts_r+0x10>
 804c9b0:	6983      	ldr	r3, [r0, #24]
 804c9b2:	b90b      	cbnz	r3, 804c9b8 <_puts_r+0x10>
 804c9b4:	f000 fa78 	bl	804cea8 <__sinit>
 804c9b8:	69ab      	ldr	r3, [r5, #24]
 804c9ba:	68ac      	ldr	r4, [r5, #8]
 804c9bc:	b913      	cbnz	r3, 804c9c4 <_puts_r+0x1c>
 804c9be:	4628      	mov	r0, r5
 804c9c0:	f000 fa72 	bl	804cea8 <__sinit>
 804c9c4:	4b2c      	ldr	r3, [pc, #176]	; (804ca78 <_puts_r+0xd0>)
 804c9c6:	429c      	cmp	r4, r3
 804c9c8:	d120      	bne.n	804ca0c <_puts_r+0x64>
 804c9ca:	686c      	ldr	r4, [r5, #4]
 804c9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804c9ce:	07db      	lsls	r3, r3, #31
 804c9d0:	d405      	bmi.n	804c9de <_puts_r+0x36>
 804c9d2:	89a3      	ldrh	r3, [r4, #12]
 804c9d4:	0598      	lsls	r0, r3, #22
 804c9d6:	d402      	bmi.n	804c9de <_puts_r+0x36>
 804c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804c9da:	f000 fb03 	bl	804cfe4 <__retarget_lock_acquire_recursive>
 804c9de:	89a3      	ldrh	r3, [r4, #12]
 804c9e0:	0719      	lsls	r1, r3, #28
 804c9e2:	d51d      	bpl.n	804ca20 <_puts_r+0x78>
 804c9e4:	6923      	ldr	r3, [r4, #16]
 804c9e6:	b1db      	cbz	r3, 804ca20 <_puts_r+0x78>
 804c9e8:	3e01      	subs	r6, #1
 804c9ea:	68a3      	ldr	r3, [r4, #8]
 804c9ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804c9f0:	3b01      	subs	r3, #1
 804c9f2:	60a3      	str	r3, [r4, #8]
 804c9f4:	bb39      	cbnz	r1, 804ca46 <_puts_r+0x9e>
 804c9f6:	2b00      	cmp	r3, #0
 804c9f8:	da38      	bge.n	804ca6c <_puts_r+0xc4>
 804c9fa:	4622      	mov	r2, r4
 804c9fc:	210a      	movs	r1, #10
 804c9fe:	4628      	mov	r0, r5
 804ca00:	f000 f878 	bl	804caf4 <__swbuf_r>
 804ca04:	3001      	adds	r0, #1
 804ca06:	d011      	beq.n	804ca2c <_puts_r+0x84>
 804ca08:	250a      	movs	r5, #10
 804ca0a:	e011      	b.n	804ca30 <_puts_r+0x88>
 804ca0c:	4b1b      	ldr	r3, [pc, #108]	; (804ca7c <_puts_r+0xd4>)
 804ca0e:	429c      	cmp	r4, r3
 804ca10:	d101      	bne.n	804ca16 <_puts_r+0x6e>
 804ca12:	68ac      	ldr	r4, [r5, #8]
 804ca14:	e7da      	b.n	804c9cc <_puts_r+0x24>
 804ca16:	4b1a      	ldr	r3, [pc, #104]	; (804ca80 <_puts_r+0xd8>)
 804ca18:	429c      	cmp	r4, r3
 804ca1a:	bf08      	it	eq
 804ca1c:	68ec      	ldreq	r4, [r5, #12]
 804ca1e:	e7d5      	b.n	804c9cc <_puts_r+0x24>
 804ca20:	4621      	mov	r1, r4
 804ca22:	4628      	mov	r0, r5
 804ca24:	f000 f8b8 	bl	804cb98 <__swsetup_r>
 804ca28:	2800      	cmp	r0, #0
 804ca2a:	d0dd      	beq.n	804c9e8 <_puts_r+0x40>
 804ca2c:	f04f 35ff 	mov.w	r5, #4294967295
 804ca30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804ca32:	07da      	lsls	r2, r3, #31
 804ca34:	d405      	bmi.n	804ca42 <_puts_r+0x9a>
 804ca36:	89a3      	ldrh	r3, [r4, #12]
 804ca38:	059b      	lsls	r3, r3, #22
 804ca3a:	d402      	bmi.n	804ca42 <_puts_r+0x9a>
 804ca3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804ca3e:	f000 fad2 	bl	804cfe6 <__retarget_lock_release_recursive>
 804ca42:	4628      	mov	r0, r5
 804ca44:	bd70      	pop	{r4, r5, r6, pc}
 804ca46:	2b00      	cmp	r3, #0
 804ca48:	da04      	bge.n	804ca54 <_puts_r+0xac>
 804ca4a:	69a2      	ldr	r2, [r4, #24]
 804ca4c:	429a      	cmp	r2, r3
 804ca4e:	dc06      	bgt.n	804ca5e <_puts_r+0xb6>
 804ca50:	290a      	cmp	r1, #10
 804ca52:	d004      	beq.n	804ca5e <_puts_r+0xb6>
 804ca54:	6823      	ldr	r3, [r4, #0]
 804ca56:	1c5a      	adds	r2, r3, #1
 804ca58:	6022      	str	r2, [r4, #0]
 804ca5a:	7019      	strb	r1, [r3, #0]
 804ca5c:	e7c5      	b.n	804c9ea <_puts_r+0x42>
 804ca5e:	4622      	mov	r2, r4
 804ca60:	4628      	mov	r0, r5
 804ca62:	f000 f847 	bl	804caf4 <__swbuf_r>
 804ca66:	3001      	adds	r0, #1
 804ca68:	d1bf      	bne.n	804c9ea <_puts_r+0x42>
 804ca6a:	e7df      	b.n	804ca2c <_puts_r+0x84>
 804ca6c:	6823      	ldr	r3, [r4, #0]
 804ca6e:	250a      	movs	r5, #10
 804ca70:	1c5a      	adds	r2, r3, #1
 804ca72:	6022      	str	r2, [r4, #0]
 804ca74:	701d      	strb	r5, [r3, #0]
 804ca76:	e7db      	b.n	804ca30 <_puts_r+0x88>
 804ca78:	0804fbec 	.word	0x0804fbec
 804ca7c:	0804fc0c 	.word	0x0804fc0c
 804ca80:	0804fbcc 	.word	0x0804fbcc

0804ca84 <puts>:
 804ca84:	4b02      	ldr	r3, [pc, #8]	; (804ca90 <puts+0xc>)
 804ca86:	4601      	mov	r1, r0
 804ca88:	6818      	ldr	r0, [r3, #0]
 804ca8a:	f7ff bf8d 	b.w	804c9a8 <_puts_r>
 804ca8e:	bf00      	nop
 804ca90:	2000007c 	.word	0x2000007c

0804ca94 <_sbrk_r>:
 804ca94:	b538      	push	{r3, r4, r5, lr}
 804ca96:	4d06      	ldr	r5, [pc, #24]	; (804cab0 <_sbrk_r+0x1c>)
 804ca98:	2300      	movs	r3, #0
 804ca9a:	4604      	mov	r4, r0
 804ca9c:	4608      	mov	r0, r1
 804ca9e:	602b      	str	r3, [r5, #0]
 804caa0:	f7f4 ff1a 	bl	80418d8 <_sbrk>
 804caa4:	1c43      	adds	r3, r0, #1
 804caa6:	d102      	bne.n	804caae <_sbrk_r+0x1a>
 804caa8:	682b      	ldr	r3, [r5, #0]
 804caaa:	b103      	cbz	r3, 804caae <_sbrk_r+0x1a>
 804caac:	6023      	str	r3, [r4, #0]
 804caae:	bd38      	pop	{r3, r4, r5, pc}
 804cab0:	20000d54 	.word	0x20000d54

0804cab4 <siprintf>:
 804cab4:	b40e      	push	{r1, r2, r3}
 804cab6:	b500      	push	{lr}
 804cab8:	b09c      	sub	sp, #112	; 0x70
 804caba:	ab1d      	add	r3, sp, #116	; 0x74
 804cabc:	9002      	str	r0, [sp, #8]
 804cabe:	9006      	str	r0, [sp, #24]
 804cac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804cac4:	4809      	ldr	r0, [pc, #36]	; (804caec <siprintf+0x38>)
 804cac6:	9107      	str	r1, [sp, #28]
 804cac8:	9104      	str	r1, [sp, #16]
 804caca:	4909      	ldr	r1, [pc, #36]	; (804caf0 <siprintf+0x3c>)
 804cacc:	f853 2b04 	ldr.w	r2, [r3], #4
 804cad0:	9105      	str	r1, [sp, #20]
 804cad2:	6800      	ldr	r0, [r0, #0]
 804cad4:	9301      	str	r3, [sp, #4]
 804cad6:	a902      	add	r1, sp, #8
 804cad8:	f000 fb54 	bl	804d184 <_svfiprintf_r>
 804cadc:	9b02      	ldr	r3, [sp, #8]
 804cade:	2200      	movs	r2, #0
 804cae0:	701a      	strb	r2, [r3, #0]
 804cae2:	b01c      	add	sp, #112	; 0x70
 804cae4:	f85d eb04 	ldr.w	lr, [sp], #4
 804cae8:	b003      	add	sp, #12
 804caea:	4770      	bx	lr
 804caec:	2000007c 	.word	0x2000007c
 804caf0:	ffff0208 	.word	0xffff0208

0804caf4 <__swbuf_r>:
 804caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804caf6:	460e      	mov	r6, r1
 804caf8:	4614      	mov	r4, r2
 804cafa:	4605      	mov	r5, r0
 804cafc:	b118      	cbz	r0, 804cb06 <__swbuf_r+0x12>
 804cafe:	6983      	ldr	r3, [r0, #24]
 804cb00:	b90b      	cbnz	r3, 804cb06 <__swbuf_r+0x12>
 804cb02:	f000 f9d1 	bl	804cea8 <__sinit>
 804cb06:	4b21      	ldr	r3, [pc, #132]	; (804cb8c <__swbuf_r+0x98>)
 804cb08:	429c      	cmp	r4, r3
 804cb0a:	d12b      	bne.n	804cb64 <__swbuf_r+0x70>
 804cb0c:	686c      	ldr	r4, [r5, #4]
 804cb0e:	69a3      	ldr	r3, [r4, #24]
 804cb10:	60a3      	str	r3, [r4, #8]
 804cb12:	89a3      	ldrh	r3, [r4, #12]
 804cb14:	071a      	lsls	r2, r3, #28
 804cb16:	d52f      	bpl.n	804cb78 <__swbuf_r+0x84>
 804cb18:	6923      	ldr	r3, [r4, #16]
 804cb1a:	b36b      	cbz	r3, 804cb78 <__swbuf_r+0x84>
 804cb1c:	6923      	ldr	r3, [r4, #16]
 804cb1e:	6820      	ldr	r0, [r4, #0]
 804cb20:	1ac0      	subs	r0, r0, r3
 804cb22:	6963      	ldr	r3, [r4, #20]
 804cb24:	b2f6      	uxtb	r6, r6
 804cb26:	4283      	cmp	r3, r0
 804cb28:	4637      	mov	r7, r6
 804cb2a:	dc04      	bgt.n	804cb36 <__swbuf_r+0x42>
 804cb2c:	4621      	mov	r1, r4
 804cb2e:	4628      	mov	r0, r5
 804cb30:	f000 f926 	bl	804cd80 <_fflush_r>
 804cb34:	bb30      	cbnz	r0, 804cb84 <__swbuf_r+0x90>
 804cb36:	68a3      	ldr	r3, [r4, #8]
 804cb38:	3b01      	subs	r3, #1
 804cb3a:	60a3      	str	r3, [r4, #8]
 804cb3c:	6823      	ldr	r3, [r4, #0]
 804cb3e:	1c5a      	adds	r2, r3, #1
 804cb40:	6022      	str	r2, [r4, #0]
 804cb42:	701e      	strb	r6, [r3, #0]
 804cb44:	6963      	ldr	r3, [r4, #20]
 804cb46:	3001      	adds	r0, #1
 804cb48:	4283      	cmp	r3, r0
 804cb4a:	d004      	beq.n	804cb56 <__swbuf_r+0x62>
 804cb4c:	89a3      	ldrh	r3, [r4, #12]
 804cb4e:	07db      	lsls	r3, r3, #31
 804cb50:	d506      	bpl.n	804cb60 <__swbuf_r+0x6c>
 804cb52:	2e0a      	cmp	r6, #10
 804cb54:	d104      	bne.n	804cb60 <__swbuf_r+0x6c>
 804cb56:	4621      	mov	r1, r4
 804cb58:	4628      	mov	r0, r5
 804cb5a:	f000 f911 	bl	804cd80 <_fflush_r>
 804cb5e:	b988      	cbnz	r0, 804cb84 <__swbuf_r+0x90>
 804cb60:	4638      	mov	r0, r7
 804cb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cb64:	4b0a      	ldr	r3, [pc, #40]	; (804cb90 <__swbuf_r+0x9c>)
 804cb66:	429c      	cmp	r4, r3
 804cb68:	d101      	bne.n	804cb6e <__swbuf_r+0x7a>
 804cb6a:	68ac      	ldr	r4, [r5, #8]
 804cb6c:	e7cf      	b.n	804cb0e <__swbuf_r+0x1a>
 804cb6e:	4b09      	ldr	r3, [pc, #36]	; (804cb94 <__swbuf_r+0xa0>)
 804cb70:	429c      	cmp	r4, r3
 804cb72:	bf08      	it	eq
 804cb74:	68ec      	ldreq	r4, [r5, #12]
 804cb76:	e7ca      	b.n	804cb0e <__swbuf_r+0x1a>
 804cb78:	4621      	mov	r1, r4
 804cb7a:	4628      	mov	r0, r5
 804cb7c:	f000 f80c 	bl	804cb98 <__swsetup_r>
 804cb80:	2800      	cmp	r0, #0
 804cb82:	d0cb      	beq.n	804cb1c <__swbuf_r+0x28>
 804cb84:	f04f 37ff 	mov.w	r7, #4294967295
 804cb88:	e7ea      	b.n	804cb60 <__swbuf_r+0x6c>
 804cb8a:	bf00      	nop
 804cb8c:	0804fbec 	.word	0x0804fbec
 804cb90:	0804fc0c 	.word	0x0804fc0c
 804cb94:	0804fbcc 	.word	0x0804fbcc

0804cb98 <__swsetup_r>:
 804cb98:	4b32      	ldr	r3, [pc, #200]	; (804cc64 <__swsetup_r+0xcc>)
 804cb9a:	b570      	push	{r4, r5, r6, lr}
 804cb9c:	681d      	ldr	r5, [r3, #0]
 804cb9e:	4606      	mov	r6, r0
 804cba0:	460c      	mov	r4, r1
 804cba2:	b125      	cbz	r5, 804cbae <__swsetup_r+0x16>
 804cba4:	69ab      	ldr	r3, [r5, #24]
 804cba6:	b913      	cbnz	r3, 804cbae <__swsetup_r+0x16>
 804cba8:	4628      	mov	r0, r5
 804cbaa:	f000 f97d 	bl	804cea8 <__sinit>
 804cbae:	4b2e      	ldr	r3, [pc, #184]	; (804cc68 <__swsetup_r+0xd0>)
 804cbb0:	429c      	cmp	r4, r3
 804cbb2:	d10f      	bne.n	804cbd4 <__swsetup_r+0x3c>
 804cbb4:	686c      	ldr	r4, [r5, #4]
 804cbb6:	89a3      	ldrh	r3, [r4, #12]
 804cbb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cbbc:	0719      	lsls	r1, r3, #28
 804cbbe:	d42c      	bmi.n	804cc1a <__swsetup_r+0x82>
 804cbc0:	06dd      	lsls	r5, r3, #27
 804cbc2:	d411      	bmi.n	804cbe8 <__swsetup_r+0x50>
 804cbc4:	2309      	movs	r3, #9
 804cbc6:	6033      	str	r3, [r6, #0]
 804cbc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804cbcc:	81a3      	strh	r3, [r4, #12]
 804cbce:	f04f 30ff 	mov.w	r0, #4294967295
 804cbd2:	e03e      	b.n	804cc52 <__swsetup_r+0xba>
 804cbd4:	4b25      	ldr	r3, [pc, #148]	; (804cc6c <__swsetup_r+0xd4>)
 804cbd6:	429c      	cmp	r4, r3
 804cbd8:	d101      	bne.n	804cbde <__swsetup_r+0x46>
 804cbda:	68ac      	ldr	r4, [r5, #8]
 804cbdc:	e7eb      	b.n	804cbb6 <__swsetup_r+0x1e>
 804cbde:	4b24      	ldr	r3, [pc, #144]	; (804cc70 <__swsetup_r+0xd8>)
 804cbe0:	429c      	cmp	r4, r3
 804cbe2:	bf08      	it	eq
 804cbe4:	68ec      	ldreq	r4, [r5, #12]
 804cbe6:	e7e6      	b.n	804cbb6 <__swsetup_r+0x1e>
 804cbe8:	0758      	lsls	r0, r3, #29
 804cbea:	d512      	bpl.n	804cc12 <__swsetup_r+0x7a>
 804cbec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804cbee:	b141      	cbz	r1, 804cc02 <__swsetup_r+0x6a>
 804cbf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804cbf4:	4299      	cmp	r1, r3
 804cbf6:	d002      	beq.n	804cbfe <__swsetup_r+0x66>
 804cbf8:	4630      	mov	r0, r6
 804cbfa:	f7ff fddd 	bl	804c7b8 <_free_r>
 804cbfe:	2300      	movs	r3, #0
 804cc00:	6363      	str	r3, [r4, #52]	; 0x34
 804cc02:	89a3      	ldrh	r3, [r4, #12]
 804cc04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804cc08:	81a3      	strh	r3, [r4, #12]
 804cc0a:	2300      	movs	r3, #0
 804cc0c:	6063      	str	r3, [r4, #4]
 804cc0e:	6923      	ldr	r3, [r4, #16]
 804cc10:	6023      	str	r3, [r4, #0]
 804cc12:	89a3      	ldrh	r3, [r4, #12]
 804cc14:	f043 0308 	orr.w	r3, r3, #8
 804cc18:	81a3      	strh	r3, [r4, #12]
 804cc1a:	6923      	ldr	r3, [r4, #16]
 804cc1c:	b94b      	cbnz	r3, 804cc32 <__swsetup_r+0x9a>
 804cc1e:	89a3      	ldrh	r3, [r4, #12]
 804cc20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804cc24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804cc28:	d003      	beq.n	804cc32 <__swsetup_r+0x9a>
 804cc2a:	4621      	mov	r1, r4
 804cc2c:	4630      	mov	r0, r6
 804cc2e:	f000 fa01 	bl	804d034 <__smakebuf_r>
 804cc32:	89a0      	ldrh	r0, [r4, #12]
 804cc34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804cc38:	f010 0301 	ands.w	r3, r0, #1
 804cc3c:	d00a      	beq.n	804cc54 <__swsetup_r+0xbc>
 804cc3e:	2300      	movs	r3, #0
 804cc40:	60a3      	str	r3, [r4, #8]
 804cc42:	6963      	ldr	r3, [r4, #20]
 804cc44:	425b      	negs	r3, r3
 804cc46:	61a3      	str	r3, [r4, #24]
 804cc48:	6923      	ldr	r3, [r4, #16]
 804cc4a:	b943      	cbnz	r3, 804cc5e <__swsetup_r+0xc6>
 804cc4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804cc50:	d1ba      	bne.n	804cbc8 <__swsetup_r+0x30>
 804cc52:	bd70      	pop	{r4, r5, r6, pc}
 804cc54:	0781      	lsls	r1, r0, #30
 804cc56:	bf58      	it	pl
 804cc58:	6963      	ldrpl	r3, [r4, #20]
 804cc5a:	60a3      	str	r3, [r4, #8]
 804cc5c:	e7f4      	b.n	804cc48 <__swsetup_r+0xb0>
 804cc5e:	2000      	movs	r0, #0
 804cc60:	e7f7      	b.n	804cc52 <__swsetup_r+0xba>
 804cc62:	bf00      	nop
 804cc64:	2000007c 	.word	0x2000007c
 804cc68:	0804fbec 	.word	0x0804fbec
 804cc6c:	0804fc0c 	.word	0x0804fc0c
 804cc70:	0804fbcc 	.word	0x0804fbcc

0804cc74 <__sflush_r>:
 804cc74:	898a      	ldrh	r2, [r1, #12]
 804cc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cc7a:	4605      	mov	r5, r0
 804cc7c:	0710      	lsls	r0, r2, #28
 804cc7e:	460c      	mov	r4, r1
 804cc80:	d458      	bmi.n	804cd34 <__sflush_r+0xc0>
 804cc82:	684b      	ldr	r3, [r1, #4]
 804cc84:	2b00      	cmp	r3, #0
 804cc86:	dc05      	bgt.n	804cc94 <__sflush_r+0x20>
 804cc88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804cc8a:	2b00      	cmp	r3, #0
 804cc8c:	dc02      	bgt.n	804cc94 <__sflush_r+0x20>
 804cc8e:	2000      	movs	r0, #0
 804cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cc94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804cc96:	2e00      	cmp	r6, #0
 804cc98:	d0f9      	beq.n	804cc8e <__sflush_r+0x1a>
 804cc9a:	2300      	movs	r3, #0
 804cc9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804cca0:	682f      	ldr	r7, [r5, #0]
 804cca2:	602b      	str	r3, [r5, #0]
 804cca4:	d032      	beq.n	804cd0c <__sflush_r+0x98>
 804cca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804cca8:	89a3      	ldrh	r3, [r4, #12]
 804ccaa:	075a      	lsls	r2, r3, #29
 804ccac:	d505      	bpl.n	804ccba <__sflush_r+0x46>
 804ccae:	6863      	ldr	r3, [r4, #4]
 804ccb0:	1ac0      	subs	r0, r0, r3
 804ccb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804ccb4:	b10b      	cbz	r3, 804ccba <__sflush_r+0x46>
 804ccb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804ccb8:	1ac0      	subs	r0, r0, r3
 804ccba:	2300      	movs	r3, #0
 804ccbc:	4602      	mov	r2, r0
 804ccbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804ccc0:	6a21      	ldr	r1, [r4, #32]
 804ccc2:	4628      	mov	r0, r5
 804ccc4:	47b0      	blx	r6
 804ccc6:	1c43      	adds	r3, r0, #1
 804ccc8:	89a3      	ldrh	r3, [r4, #12]
 804ccca:	d106      	bne.n	804ccda <__sflush_r+0x66>
 804cccc:	6829      	ldr	r1, [r5, #0]
 804ccce:	291d      	cmp	r1, #29
 804ccd0:	d82c      	bhi.n	804cd2c <__sflush_r+0xb8>
 804ccd2:	4a2a      	ldr	r2, [pc, #168]	; (804cd7c <__sflush_r+0x108>)
 804ccd4:	40ca      	lsrs	r2, r1
 804ccd6:	07d6      	lsls	r6, r2, #31
 804ccd8:	d528      	bpl.n	804cd2c <__sflush_r+0xb8>
 804ccda:	2200      	movs	r2, #0
 804ccdc:	6062      	str	r2, [r4, #4]
 804ccde:	04d9      	lsls	r1, r3, #19
 804cce0:	6922      	ldr	r2, [r4, #16]
 804cce2:	6022      	str	r2, [r4, #0]
 804cce4:	d504      	bpl.n	804ccf0 <__sflush_r+0x7c>
 804cce6:	1c42      	adds	r2, r0, #1
 804cce8:	d101      	bne.n	804ccee <__sflush_r+0x7a>
 804ccea:	682b      	ldr	r3, [r5, #0]
 804ccec:	b903      	cbnz	r3, 804ccf0 <__sflush_r+0x7c>
 804ccee:	6560      	str	r0, [r4, #84]	; 0x54
 804ccf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804ccf2:	602f      	str	r7, [r5, #0]
 804ccf4:	2900      	cmp	r1, #0
 804ccf6:	d0ca      	beq.n	804cc8e <__sflush_r+0x1a>
 804ccf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804ccfc:	4299      	cmp	r1, r3
 804ccfe:	d002      	beq.n	804cd06 <__sflush_r+0x92>
 804cd00:	4628      	mov	r0, r5
 804cd02:	f7ff fd59 	bl	804c7b8 <_free_r>
 804cd06:	2000      	movs	r0, #0
 804cd08:	6360      	str	r0, [r4, #52]	; 0x34
 804cd0a:	e7c1      	b.n	804cc90 <__sflush_r+0x1c>
 804cd0c:	6a21      	ldr	r1, [r4, #32]
 804cd0e:	2301      	movs	r3, #1
 804cd10:	4628      	mov	r0, r5
 804cd12:	47b0      	blx	r6
 804cd14:	1c41      	adds	r1, r0, #1
 804cd16:	d1c7      	bne.n	804cca8 <__sflush_r+0x34>
 804cd18:	682b      	ldr	r3, [r5, #0]
 804cd1a:	2b00      	cmp	r3, #0
 804cd1c:	d0c4      	beq.n	804cca8 <__sflush_r+0x34>
 804cd1e:	2b1d      	cmp	r3, #29
 804cd20:	d001      	beq.n	804cd26 <__sflush_r+0xb2>
 804cd22:	2b16      	cmp	r3, #22
 804cd24:	d101      	bne.n	804cd2a <__sflush_r+0xb6>
 804cd26:	602f      	str	r7, [r5, #0]
 804cd28:	e7b1      	b.n	804cc8e <__sflush_r+0x1a>
 804cd2a:	89a3      	ldrh	r3, [r4, #12]
 804cd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cd30:	81a3      	strh	r3, [r4, #12]
 804cd32:	e7ad      	b.n	804cc90 <__sflush_r+0x1c>
 804cd34:	690f      	ldr	r7, [r1, #16]
 804cd36:	2f00      	cmp	r7, #0
 804cd38:	d0a9      	beq.n	804cc8e <__sflush_r+0x1a>
 804cd3a:	0793      	lsls	r3, r2, #30
 804cd3c:	680e      	ldr	r6, [r1, #0]
 804cd3e:	bf08      	it	eq
 804cd40:	694b      	ldreq	r3, [r1, #20]
 804cd42:	600f      	str	r7, [r1, #0]
 804cd44:	bf18      	it	ne
 804cd46:	2300      	movne	r3, #0
 804cd48:	eba6 0807 	sub.w	r8, r6, r7
 804cd4c:	608b      	str	r3, [r1, #8]
 804cd4e:	f1b8 0f00 	cmp.w	r8, #0
 804cd52:	dd9c      	ble.n	804cc8e <__sflush_r+0x1a>
 804cd54:	6a21      	ldr	r1, [r4, #32]
 804cd56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804cd58:	4643      	mov	r3, r8
 804cd5a:	463a      	mov	r2, r7
 804cd5c:	4628      	mov	r0, r5
 804cd5e:	47b0      	blx	r6
 804cd60:	2800      	cmp	r0, #0
 804cd62:	dc06      	bgt.n	804cd72 <__sflush_r+0xfe>
 804cd64:	89a3      	ldrh	r3, [r4, #12]
 804cd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804cd6a:	81a3      	strh	r3, [r4, #12]
 804cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 804cd70:	e78e      	b.n	804cc90 <__sflush_r+0x1c>
 804cd72:	4407      	add	r7, r0
 804cd74:	eba8 0800 	sub.w	r8, r8, r0
 804cd78:	e7e9      	b.n	804cd4e <__sflush_r+0xda>
 804cd7a:	bf00      	nop
 804cd7c:	20400001 	.word	0x20400001

0804cd80 <_fflush_r>:
 804cd80:	b538      	push	{r3, r4, r5, lr}
 804cd82:	690b      	ldr	r3, [r1, #16]
 804cd84:	4605      	mov	r5, r0
 804cd86:	460c      	mov	r4, r1
 804cd88:	b913      	cbnz	r3, 804cd90 <_fflush_r+0x10>
 804cd8a:	2500      	movs	r5, #0
 804cd8c:	4628      	mov	r0, r5
 804cd8e:	bd38      	pop	{r3, r4, r5, pc}
 804cd90:	b118      	cbz	r0, 804cd9a <_fflush_r+0x1a>
 804cd92:	6983      	ldr	r3, [r0, #24]
 804cd94:	b90b      	cbnz	r3, 804cd9a <_fflush_r+0x1a>
 804cd96:	f000 f887 	bl	804cea8 <__sinit>
 804cd9a:	4b14      	ldr	r3, [pc, #80]	; (804cdec <_fflush_r+0x6c>)
 804cd9c:	429c      	cmp	r4, r3
 804cd9e:	d11b      	bne.n	804cdd8 <_fflush_r+0x58>
 804cda0:	686c      	ldr	r4, [r5, #4]
 804cda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804cda6:	2b00      	cmp	r3, #0
 804cda8:	d0ef      	beq.n	804cd8a <_fflush_r+0xa>
 804cdaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804cdac:	07d0      	lsls	r0, r2, #31
 804cdae:	d404      	bmi.n	804cdba <_fflush_r+0x3a>
 804cdb0:	0599      	lsls	r1, r3, #22
 804cdb2:	d402      	bmi.n	804cdba <_fflush_r+0x3a>
 804cdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cdb6:	f000 f915 	bl	804cfe4 <__retarget_lock_acquire_recursive>
 804cdba:	4628      	mov	r0, r5
 804cdbc:	4621      	mov	r1, r4
 804cdbe:	f7ff ff59 	bl	804cc74 <__sflush_r>
 804cdc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804cdc4:	07da      	lsls	r2, r3, #31
 804cdc6:	4605      	mov	r5, r0
 804cdc8:	d4e0      	bmi.n	804cd8c <_fflush_r+0xc>
 804cdca:	89a3      	ldrh	r3, [r4, #12]
 804cdcc:	059b      	lsls	r3, r3, #22
 804cdce:	d4dd      	bmi.n	804cd8c <_fflush_r+0xc>
 804cdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cdd2:	f000 f908 	bl	804cfe6 <__retarget_lock_release_recursive>
 804cdd6:	e7d9      	b.n	804cd8c <_fflush_r+0xc>
 804cdd8:	4b05      	ldr	r3, [pc, #20]	; (804cdf0 <_fflush_r+0x70>)
 804cdda:	429c      	cmp	r4, r3
 804cddc:	d101      	bne.n	804cde2 <_fflush_r+0x62>
 804cdde:	68ac      	ldr	r4, [r5, #8]
 804cde0:	e7df      	b.n	804cda2 <_fflush_r+0x22>
 804cde2:	4b04      	ldr	r3, [pc, #16]	; (804cdf4 <_fflush_r+0x74>)
 804cde4:	429c      	cmp	r4, r3
 804cde6:	bf08      	it	eq
 804cde8:	68ec      	ldreq	r4, [r5, #12]
 804cdea:	e7da      	b.n	804cda2 <_fflush_r+0x22>
 804cdec:	0804fbec 	.word	0x0804fbec
 804cdf0:	0804fc0c 	.word	0x0804fc0c
 804cdf4:	0804fbcc 	.word	0x0804fbcc

0804cdf8 <std>:
 804cdf8:	2300      	movs	r3, #0
 804cdfa:	b510      	push	{r4, lr}
 804cdfc:	4604      	mov	r4, r0
 804cdfe:	e9c0 3300 	strd	r3, r3, [r0]
 804ce02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804ce06:	6083      	str	r3, [r0, #8]
 804ce08:	8181      	strh	r1, [r0, #12]
 804ce0a:	6643      	str	r3, [r0, #100]	; 0x64
 804ce0c:	81c2      	strh	r2, [r0, #14]
 804ce0e:	6183      	str	r3, [r0, #24]
 804ce10:	4619      	mov	r1, r3
 804ce12:	2208      	movs	r2, #8
 804ce14:	305c      	adds	r0, #92	; 0x5c
 804ce16:	f7ff fcc7 	bl	804c7a8 <memset>
 804ce1a:	4b05      	ldr	r3, [pc, #20]	; (804ce30 <std+0x38>)
 804ce1c:	6263      	str	r3, [r4, #36]	; 0x24
 804ce1e:	4b05      	ldr	r3, [pc, #20]	; (804ce34 <std+0x3c>)
 804ce20:	62a3      	str	r3, [r4, #40]	; 0x28
 804ce22:	4b05      	ldr	r3, [pc, #20]	; (804ce38 <std+0x40>)
 804ce24:	62e3      	str	r3, [r4, #44]	; 0x2c
 804ce26:	4b05      	ldr	r3, [pc, #20]	; (804ce3c <std+0x44>)
 804ce28:	6224      	str	r4, [r4, #32]
 804ce2a:	6323      	str	r3, [r4, #48]	; 0x30
 804ce2c:	bd10      	pop	{r4, pc}
 804ce2e:	bf00      	nop
 804ce30:	0804d961 	.word	0x0804d961
 804ce34:	0804d983 	.word	0x0804d983
 804ce38:	0804d9bb 	.word	0x0804d9bb
 804ce3c:	0804d9df 	.word	0x0804d9df

0804ce40 <_cleanup_r>:
 804ce40:	4901      	ldr	r1, [pc, #4]	; (804ce48 <_cleanup_r+0x8>)
 804ce42:	f000 b8af 	b.w	804cfa4 <_fwalk_reent>
 804ce46:	bf00      	nop
 804ce48:	0804cd81 	.word	0x0804cd81

0804ce4c <__sfmoreglue>:
 804ce4c:	b570      	push	{r4, r5, r6, lr}
 804ce4e:	2268      	movs	r2, #104	; 0x68
 804ce50:	1e4d      	subs	r5, r1, #1
 804ce52:	4355      	muls	r5, r2
 804ce54:	460e      	mov	r6, r1
 804ce56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804ce5a:	f7ff fd19 	bl	804c890 <_malloc_r>
 804ce5e:	4604      	mov	r4, r0
 804ce60:	b140      	cbz	r0, 804ce74 <__sfmoreglue+0x28>
 804ce62:	2100      	movs	r1, #0
 804ce64:	e9c0 1600 	strd	r1, r6, [r0]
 804ce68:	300c      	adds	r0, #12
 804ce6a:	60a0      	str	r0, [r4, #8]
 804ce6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804ce70:	f7ff fc9a 	bl	804c7a8 <memset>
 804ce74:	4620      	mov	r0, r4
 804ce76:	bd70      	pop	{r4, r5, r6, pc}

0804ce78 <__sfp_lock_acquire>:
 804ce78:	4801      	ldr	r0, [pc, #4]	; (804ce80 <__sfp_lock_acquire+0x8>)
 804ce7a:	f000 b8b3 	b.w	804cfe4 <__retarget_lock_acquire_recursive>
 804ce7e:	bf00      	nop
 804ce80:	20000d51 	.word	0x20000d51

0804ce84 <__sfp_lock_release>:
 804ce84:	4801      	ldr	r0, [pc, #4]	; (804ce8c <__sfp_lock_release+0x8>)
 804ce86:	f000 b8ae 	b.w	804cfe6 <__retarget_lock_release_recursive>
 804ce8a:	bf00      	nop
 804ce8c:	20000d51 	.word	0x20000d51

0804ce90 <__sinit_lock_acquire>:
 804ce90:	4801      	ldr	r0, [pc, #4]	; (804ce98 <__sinit_lock_acquire+0x8>)
 804ce92:	f000 b8a7 	b.w	804cfe4 <__retarget_lock_acquire_recursive>
 804ce96:	bf00      	nop
 804ce98:	20000d52 	.word	0x20000d52

0804ce9c <__sinit_lock_release>:
 804ce9c:	4801      	ldr	r0, [pc, #4]	; (804cea4 <__sinit_lock_release+0x8>)
 804ce9e:	f000 b8a2 	b.w	804cfe6 <__retarget_lock_release_recursive>
 804cea2:	bf00      	nop
 804cea4:	20000d52 	.word	0x20000d52

0804cea8 <__sinit>:
 804cea8:	b510      	push	{r4, lr}
 804ceaa:	4604      	mov	r4, r0
 804ceac:	f7ff fff0 	bl	804ce90 <__sinit_lock_acquire>
 804ceb0:	69a3      	ldr	r3, [r4, #24]
 804ceb2:	b11b      	cbz	r3, 804cebc <__sinit+0x14>
 804ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ceb8:	f7ff bff0 	b.w	804ce9c <__sinit_lock_release>
 804cebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804cec0:	6523      	str	r3, [r4, #80]	; 0x50
 804cec2:	4b13      	ldr	r3, [pc, #76]	; (804cf10 <__sinit+0x68>)
 804cec4:	4a13      	ldr	r2, [pc, #76]	; (804cf14 <__sinit+0x6c>)
 804cec6:	681b      	ldr	r3, [r3, #0]
 804cec8:	62a2      	str	r2, [r4, #40]	; 0x28
 804ceca:	42a3      	cmp	r3, r4
 804cecc:	bf04      	itt	eq
 804cece:	2301      	moveq	r3, #1
 804ced0:	61a3      	streq	r3, [r4, #24]
 804ced2:	4620      	mov	r0, r4
 804ced4:	f000 f820 	bl	804cf18 <__sfp>
 804ced8:	6060      	str	r0, [r4, #4]
 804ceda:	4620      	mov	r0, r4
 804cedc:	f000 f81c 	bl	804cf18 <__sfp>
 804cee0:	60a0      	str	r0, [r4, #8]
 804cee2:	4620      	mov	r0, r4
 804cee4:	f000 f818 	bl	804cf18 <__sfp>
 804cee8:	2200      	movs	r2, #0
 804ceea:	60e0      	str	r0, [r4, #12]
 804ceec:	2104      	movs	r1, #4
 804ceee:	6860      	ldr	r0, [r4, #4]
 804cef0:	f7ff ff82 	bl	804cdf8 <std>
 804cef4:	68a0      	ldr	r0, [r4, #8]
 804cef6:	2201      	movs	r2, #1
 804cef8:	2109      	movs	r1, #9
 804cefa:	f7ff ff7d 	bl	804cdf8 <std>
 804cefe:	68e0      	ldr	r0, [r4, #12]
 804cf00:	2202      	movs	r2, #2
 804cf02:	2112      	movs	r1, #18
 804cf04:	f7ff ff78 	bl	804cdf8 <std>
 804cf08:	2301      	movs	r3, #1
 804cf0a:	61a3      	str	r3, [r4, #24]
 804cf0c:	e7d2      	b.n	804ceb4 <__sinit+0xc>
 804cf0e:	bf00      	nop
 804cf10:	0804fbc8 	.word	0x0804fbc8
 804cf14:	0804ce41 	.word	0x0804ce41

0804cf18 <__sfp>:
 804cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804cf1a:	4607      	mov	r7, r0
 804cf1c:	f7ff ffac 	bl	804ce78 <__sfp_lock_acquire>
 804cf20:	4b1e      	ldr	r3, [pc, #120]	; (804cf9c <__sfp+0x84>)
 804cf22:	681e      	ldr	r6, [r3, #0]
 804cf24:	69b3      	ldr	r3, [r6, #24]
 804cf26:	b913      	cbnz	r3, 804cf2e <__sfp+0x16>
 804cf28:	4630      	mov	r0, r6
 804cf2a:	f7ff ffbd 	bl	804cea8 <__sinit>
 804cf2e:	3648      	adds	r6, #72	; 0x48
 804cf30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804cf34:	3b01      	subs	r3, #1
 804cf36:	d503      	bpl.n	804cf40 <__sfp+0x28>
 804cf38:	6833      	ldr	r3, [r6, #0]
 804cf3a:	b30b      	cbz	r3, 804cf80 <__sfp+0x68>
 804cf3c:	6836      	ldr	r6, [r6, #0]
 804cf3e:	e7f7      	b.n	804cf30 <__sfp+0x18>
 804cf40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804cf44:	b9d5      	cbnz	r5, 804cf7c <__sfp+0x64>
 804cf46:	4b16      	ldr	r3, [pc, #88]	; (804cfa0 <__sfp+0x88>)
 804cf48:	60e3      	str	r3, [r4, #12]
 804cf4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804cf4e:	6665      	str	r5, [r4, #100]	; 0x64
 804cf50:	f000 f847 	bl	804cfe2 <__retarget_lock_init_recursive>
 804cf54:	f7ff ff96 	bl	804ce84 <__sfp_lock_release>
 804cf58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804cf5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804cf60:	6025      	str	r5, [r4, #0]
 804cf62:	61a5      	str	r5, [r4, #24]
 804cf64:	2208      	movs	r2, #8
 804cf66:	4629      	mov	r1, r5
 804cf68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804cf6c:	f7ff fc1c 	bl	804c7a8 <memset>
 804cf70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804cf74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804cf78:	4620      	mov	r0, r4
 804cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804cf7c:	3468      	adds	r4, #104	; 0x68
 804cf7e:	e7d9      	b.n	804cf34 <__sfp+0x1c>
 804cf80:	2104      	movs	r1, #4
 804cf82:	4638      	mov	r0, r7
 804cf84:	f7ff ff62 	bl	804ce4c <__sfmoreglue>
 804cf88:	4604      	mov	r4, r0
 804cf8a:	6030      	str	r0, [r6, #0]
 804cf8c:	2800      	cmp	r0, #0
 804cf8e:	d1d5      	bne.n	804cf3c <__sfp+0x24>
 804cf90:	f7ff ff78 	bl	804ce84 <__sfp_lock_release>
 804cf94:	230c      	movs	r3, #12
 804cf96:	603b      	str	r3, [r7, #0]
 804cf98:	e7ee      	b.n	804cf78 <__sfp+0x60>
 804cf9a:	bf00      	nop
 804cf9c:	0804fbc8 	.word	0x0804fbc8
 804cfa0:	ffff0001 	.word	0xffff0001

0804cfa4 <_fwalk_reent>:
 804cfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804cfa8:	4606      	mov	r6, r0
 804cfaa:	4688      	mov	r8, r1
 804cfac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804cfb0:	2700      	movs	r7, #0
 804cfb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804cfb6:	f1b9 0901 	subs.w	r9, r9, #1
 804cfba:	d505      	bpl.n	804cfc8 <_fwalk_reent+0x24>
 804cfbc:	6824      	ldr	r4, [r4, #0]
 804cfbe:	2c00      	cmp	r4, #0
 804cfc0:	d1f7      	bne.n	804cfb2 <_fwalk_reent+0xe>
 804cfc2:	4638      	mov	r0, r7
 804cfc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804cfc8:	89ab      	ldrh	r3, [r5, #12]
 804cfca:	2b01      	cmp	r3, #1
 804cfcc:	d907      	bls.n	804cfde <_fwalk_reent+0x3a>
 804cfce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804cfd2:	3301      	adds	r3, #1
 804cfd4:	d003      	beq.n	804cfde <_fwalk_reent+0x3a>
 804cfd6:	4629      	mov	r1, r5
 804cfd8:	4630      	mov	r0, r6
 804cfda:	47c0      	blx	r8
 804cfdc:	4307      	orrs	r7, r0
 804cfde:	3568      	adds	r5, #104	; 0x68
 804cfe0:	e7e9      	b.n	804cfb6 <_fwalk_reent+0x12>

0804cfe2 <__retarget_lock_init_recursive>:
 804cfe2:	4770      	bx	lr

0804cfe4 <__retarget_lock_acquire_recursive>:
 804cfe4:	4770      	bx	lr

0804cfe6 <__retarget_lock_release_recursive>:
 804cfe6:	4770      	bx	lr

0804cfe8 <__swhatbuf_r>:
 804cfe8:	b570      	push	{r4, r5, r6, lr}
 804cfea:	460e      	mov	r6, r1
 804cfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804cff0:	2900      	cmp	r1, #0
 804cff2:	b096      	sub	sp, #88	; 0x58
 804cff4:	4614      	mov	r4, r2
 804cff6:	461d      	mov	r5, r3
 804cff8:	da08      	bge.n	804d00c <__swhatbuf_r+0x24>
 804cffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804cffe:	2200      	movs	r2, #0
 804d000:	602a      	str	r2, [r5, #0]
 804d002:	061a      	lsls	r2, r3, #24
 804d004:	d410      	bmi.n	804d028 <__swhatbuf_r+0x40>
 804d006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d00a:	e00e      	b.n	804d02a <__swhatbuf_r+0x42>
 804d00c:	466a      	mov	r2, sp
 804d00e:	f000 fd0d 	bl	804da2c <_fstat_r>
 804d012:	2800      	cmp	r0, #0
 804d014:	dbf1      	blt.n	804cffa <__swhatbuf_r+0x12>
 804d016:	9a01      	ldr	r2, [sp, #4]
 804d018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804d01c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804d020:	425a      	negs	r2, r3
 804d022:	415a      	adcs	r2, r3
 804d024:	602a      	str	r2, [r5, #0]
 804d026:	e7ee      	b.n	804d006 <__swhatbuf_r+0x1e>
 804d028:	2340      	movs	r3, #64	; 0x40
 804d02a:	2000      	movs	r0, #0
 804d02c:	6023      	str	r3, [r4, #0]
 804d02e:	b016      	add	sp, #88	; 0x58
 804d030:	bd70      	pop	{r4, r5, r6, pc}
	...

0804d034 <__smakebuf_r>:
 804d034:	898b      	ldrh	r3, [r1, #12]
 804d036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d038:	079d      	lsls	r5, r3, #30
 804d03a:	4606      	mov	r6, r0
 804d03c:	460c      	mov	r4, r1
 804d03e:	d507      	bpl.n	804d050 <__smakebuf_r+0x1c>
 804d040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d044:	6023      	str	r3, [r4, #0]
 804d046:	6123      	str	r3, [r4, #16]
 804d048:	2301      	movs	r3, #1
 804d04a:	6163      	str	r3, [r4, #20]
 804d04c:	b002      	add	sp, #8
 804d04e:	bd70      	pop	{r4, r5, r6, pc}
 804d050:	ab01      	add	r3, sp, #4
 804d052:	466a      	mov	r2, sp
 804d054:	f7ff ffc8 	bl	804cfe8 <__swhatbuf_r>
 804d058:	9900      	ldr	r1, [sp, #0]
 804d05a:	4605      	mov	r5, r0
 804d05c:	4630      	mov	r0, r6
 804d05e:	f7ff fc17 	bl	804c890 <_malloc_r>
 804d062:	b948      	cbnz	r0, 804d078 <__smakebuf_r+0x44>
 804d064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d068:	059a      	lsls	r2, r3, #22
 804d06a:	d4ef      	bmi.n	804d04c <__smakebuf_r+0x18>
 804d06c:	f023 0303 	bic.w	r3, r3, #3
 804d070:	f043 0302 	orr.w	r3, r3, #2
 804d074:	81a3      	strh	r3, [r4, #12]
 804d076:	e7e3      	b.n	804d040 <__smakebuf_r+0xc>
 804d078:	4b0d      	ldr	r3, [pc, #52]	; (804d0b0 <__smakebuf_r+0x7c>)
 804d07a:	62b3      	str	r3, [r6, #40]	; 0x28
 804d07c:	89a3      	ldrh	r3, [r4, #12]
 804d07e:	6020      	str	r0, [r4, #0]
 804d080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d084:	81a3      	strh	r3, [r4, #12]
 804d086:	9b00      	ldr	r3, [sp, #0]
 804d088:	6163      	str	r3, [r4, #20]
 804d08a:	9b01      	ldr	r3, [sp, #4]
 804d08c:	6120      	str	r0, [r4, #16]
 804d08e:	b15b      	cbz	r3, 804d0a8 <__smakebuf_r+0x74>
 804d090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d094:	4630      	mov	r0, r6
 804d096:	f000 fcdb 	bl	804da50 <_isatty_r>
 804d09a:	b128      	cbz	r0, 804d0a8 <__smakebuf_r+0x74>
 804d09c:	89a3      	ldrh	r3, [r4, #12]
 804d09e:	f023 0303 	bic.w	r3, r3, #3
 804d0a2:	f043 0301 	orr.w	r3, r3, #1
 804d0a6:	81a3      	strh	r3, [r4, #12]
 804d0a8:	89a0      	ldrh	r0, [r4, #12]
 804d0aa:	4305      	orrs	r5, r0
 804d0ac:	81a5      	strh	r5, [r4, #12]
 804d0ae:	e7cd      	b.n	804d04c <__smakebuf_r+0x18>
 804d0b0:	0804ce41 	.word	0x0804ce41

0804d0b4 <__malloc_lock>:
 804d0b4:	4801      	ldr	r0, [pc, #4]	; (804d0bc <__malloc_lock+0x8>)
 804d0b6:	f7ff bf95 	b.w	804cfe4 <__retarget_lock_acquire_recursive>
 804d0ba:	bf00      	nop
 804d0bc:	20000d50 	.word	0x20000d50

0804d0c0 <__malloc_unlock>:
 804d0c0:	4801      	ldr	r0, [pc, #4]	; (804d0c8 <__malloc_unlock+0x8>)
 804d0c2:	f7ff bf90 	b.w	804cfe6 <__retarget_lock_release_recursive>
 804d0c6:	bf00      	nop
 804d0c8:	20000d50 	.word	0x20000d50

0804d0cc <__ssputs_r>:
 804d0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d0d0:	688e      	ldr	r6, [r1, #8]
 804d0d2:	429e      	cmp	r6, r3
 804d0d4:	4682      	mov	sl, r0
 804d0d6:	460c      	mov	r4, r1
 804d0d8:	4690      	mov	r8, r2
 804d0da:	461f      	mov	r7, r3
 804d0dc:	d838      	bhi.n	804d150 <__ssputs_r+0x84>
 804d0de:	898a      	ldrh	r2, [r1, #12]
 804d0e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804d0e4:	d032      	beq.n	804d14c <__ssputs_r+0x80>
 804d0e6:	6825      	ldr	r5, [r4, #0]
 804d0e8:	6909      	ldr	r1, [r1, #16]
 804d0ea:	eba5 0901 	sub.w	r9, r5, r1
 804d0ee:	6965      	ldr	r5, [r4, #20]
 804d0f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804d0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804d0f8:	3301      	adds	r3, #1
 804d0fa:	444b      	add	r3, r9
 804d0fc:	106d      	asrs	r5, r5, #1
 804d0fe:	429d      	cmp	r5, r3
 804d100:	bf38      	it	cc
 804d102:	461d      	movcc	r5, r3
 804d104:	0553      	lsls	r3, r2, #21
 804d106:	d531      	bpl.n	804d16c <__ssputs_r+0xa0>
 804d108:	4629      	mov	r1, r5
 804d10a:	f7ff fbc1 	bl	804c890 <_malloc_r>
 804d10e:	4606      	mov	r6, r0
 804d110:	b950      	cbnz	r0, 804d128 <__ssputs_r+0x5c>
 804d112:	230c      	movs	r3, #12
 804d114:	f8ca 3000 	str.w	r3, [sl]
 804d118:	89a3      	ldrh	r3, [r4, #12]
 804d11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d11e:	81a3      	strh	r3, [r4, #12]
 804d120:	f04f 30ff 	mov.w	r0, #4294967295
 804d124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d128:	6921      	ldr	r1, [r4, #16]
 804d12a:	464a      	mov	r2, r9
 804d12c:	f000 fcb2 	bl	804da94 <memcpy>
 804d130:	89a3      	ldrh	r3, [r4, #12]
 804d132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804d136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d13a:	81a3      	strh	r3, [r4, #12]
 804d13c:	6126      	str	r6, [r4, #16]
 804d13e:	6165      	str	r5, [r4, #20]
 804d140:	444e      	add	r6, r9
 804d142:	eba5 0509 	sub.w	r5, r5, r9
 804d146:	6026      	str	r6, [r4, #0]
 804d148:	60a5      	str	r5, [r4, #8]
 804d14a:	463e      	mov	r6, r7
 804d14c:	42be      	cmp	r6, r7
 804d14e:	d900      	bls.n	804d152 <__ssputs_r+0x86>
 804d150:	463e      	mov	r6, r7
 804d152:	6820      	ldr	r0, [r4, #0]
 804d154:	4632      	mov	r2, r6
 804d156:	4641      	mov	r1, r8
 804d158:	f000 fcaa 	bl	804dab0 <memmove>
 804d15c:	68a3      	ldr	r3, [r4, #8]
 804d15e:	1b9b      	subs	r3, r3, r6
 804d160:	60a3      	str	r3, [r4, #8]
 804d162:	6823      	ldr	r3, [r4, #0]
 804d164:	4433      	add	r3, r6
 804d166:	6023      	str	r3, [r4, #0]
 804d168:	2000      	movs	r0, #0
 804d16a:	e7db      	b.n	804d124 <__ssputs_r+0x58>
 804d16c:	462a      	mov	r2, r5
 804d16e:	f000 fcb9 	bl	804dae4 <_realloc_r>
 804d172:	4606      	mov	r6, r0
 804d174:	2800      	cmp	r0, #0
 804d176:	d1e1      	bne.n	804d13c <__ssputs_r+0x70>
 804d178:	6921      	ldr	r1, [r4, #16]
 804d17a:	4650      	mov	r0, sl
 804d17c:	f7ff fb1c 	bl	804c7b8 <_free_r>
 804d180:	e7c7      	b.n	804d112 <__ssputs_r+0x46>
	...

0804d184 <_svfiprintf_r>:
 804d184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d188:	4698      	mov	r8, r3
 804d18a:	898b      	ldrh	r3, [r1, #12]
 804d18c:	061b      	lsls	r3, r3, #24
 804d18e:	b09d      	sub	sp, #116	; 0x74
 804d190:	4607      	mov	r7, r0
 804d192:	460d      	mov	r5, r1
 804d194:	4614      	mov	r4, r2
 804d196:	d50e      	bpl.n	804d1b6 <_svfiprintf_r+0x32>
 804d198:	690b      	ldr	r3, [r1, #16]
 804d19a:	b963      	cbnz	r3, 804d1b6 <_svfiprintf_r+0x32>
 804d19c:	2140      	movs	r1, #64	; 0x40
 804d19e:	f7ff fb77 	bl	804c890 <_malloc_r>
 804d1a2:	6028      	str	r0, [r5, #0]
 804d1a4:	6128      	str	r0, [r5, #16]
 804d1a6:	b920      	cbnz	r0, 804d1b2 <_svfiprintf_r+0x2e>
 804d1a8:	230c      	movs	r3, #12
 804d1aa:	603b      	str	r3, [r7, #0]
 804d1ac:	f04f 30ff 	mov.w	r0, #4294967295
 804d1b0:	e0d1      	b.n	804d356 <_svfiprintf_r+0x1d2>
 804d1b2:	2340      	movs	r3, #64	; 0x40
 804d1b4:	616b      	str	r3, [r5, #20]
 804d1b6:	2300      	movs	r3, #0
 804d1b8:	9309      	str	r3, [sp, #36]	; 0x24
 804d1ba:	2320      	movs	r3, #32
 804d1bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d1c0:	f8cd 800c 	str.w	r8, [sp, #12]
 804d1c4:	2330      	movs	r3, #48	; 0x30
 804d1c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804d370 <_svfiprintf_r+0x1ec>
 804d1ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d1ce:	f04f 0901 	mov.w	r9, #1
 804d1d2:	4623      	mov	r3, r4
 804d1d4:	469a      	mov	sl, r3
 804d1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d1da:	b10a      	cbz	r2, 804d1e0 <_svfiprintf_r+0x5c>
 804d1dc:	2a25      	cmp	r2, #37	; 0x25
 804d1de:	d1f9      	bne.n	804d1d4 <_svfiprintf_r+0x50>
 804d1e0:	ebba 0b04 	subs.w	fp, sl, r4
 804d1e4:	d00b      	beq.n	804d1fe <_svfiprintf_r+0x7a>
 804d1e6:	465b      	mov	r3, fp
 804d1e8:	4622      	mov	r2, r4
 804d1ea:	4629      	mov	r1, r5
 804d1ec:	4638      	mov	r0, r7
 804d1ee:	f7ff ff6d 	bl	804d0cc <__ssputs_r>
 804d1f2:	3001      	adds	r0, #1
 804d1f4:	f000 80aa 	beq.w	804d34c <_svfiprintf_r+0x1c8>
 804d1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d1fa:	445a      	add	r2, fp
 804d1fc:	9209      	str	r2, [sp, #36]	; 0x24
 804d1fe:	f89a 3000 	ldrb.w	r3, [sl]
 804d202:	2b00      	cmp	r3, #0
 804d204:	f000 80a2 	beq.w	804d34c <_svfiprintf_r+0x1c8>
 804d208:	2300      	movs	r3, #0
 804d20a:	f04f 32ff 	mov.w	r2, #4294967295
 804d20e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d212:	f10a 0a01 	add.w	sl, sl, #1
 804d216:	9304      	str	r3, [sp, #16]
 804d218:	9307      	str	r3, [sp, #28]
 804d21a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d21e:	931a      	str	r3, [sp, #104]	; 0x68
 804d220:	4654      	mov	r4, sl
 804d222:	2205      	movs	r2, #5
 804d224:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d228:	4851      	ldr	r0, [pc, #324]	; (804d370 <_svfiprintf_r+0x1ec>)
 804d22a:	f7f2 ffe1 	bl	80401f0 <memchr>
 804d22e:	9a04      	ldr	r2, [sp, #16]
 804d230:	b9d8      	cbnz	r0, 804d26a <_svfiprintf_r+0xe6>
 804d232:	06d0      	lsls	r0, r2, #27
 804d234:	bf44      	itt	mi
 804d236:	2320      	movmi	r3, #32
 804d238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d23c:	0711      	lsls	r1, r2, #28
 804d23e:	bf44      	itt	mi
 804d240:	232b      	movmi	r3, #43	; 0x2b
 804d242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d246:	f89a 3000 	ldrb.w	r3, [sl]
 804d24a:	2b2a      	cmp	r3, #42	; 0x2a
 804d24c:	d015      	beq.n	804d27a <_svfiprintf_r+0xf6>
 804d24e:	9a07      	ldr	r2, [sp, #28]
 804d250:	4654      	mov	r4, sl
 804d252:	2000      	movs	r0, #0
 804d254:	f04f 0c0a 	mov.w	ip, #10
 804d258:	4621      	mov	r1, r4
 804d25a:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d25e:	3b30      	subs	r3, #48	; 0x30
 804d260:	2b09      	cmp	r3, #9
 804d262:	d94e      	bls.n	804d302 <_svfiprintf_r+0x17e>
 804d264:	b1b0      	cbz	r0, 804d294 <_svfiprintf_r+0x110>
 804d266:	9207      	str	r2, [sp, #28]
 804d268:	e014      	b.n	804d294 <_svfiprintf_r+0x110>
 804d26a:	eba0 0308 	sub.w	r3, r0, r8
 804d26e:	fa09 f303 	lsl.w	r3, r9, r3
 804d272:	4313      	orrs	r3, r2
 804d274:	9304      	str	r3, [sp, #16]
 804d276:	46a2      	mov	sl, r4
 804d278:	e7d2      	b.n	804d220 <_svfiprintf_r+0x9c>
 804d27a:	9b03      	ldr	r3, [sp, #12]
 804d27c:	1d19      	adds	r1, r3, #4
 804d27e:	681b      	ldr	r3, [r3, #0]
 804d280:	9103      	str	r1, [sp, #12]
 804d282:	2b00      	cmp	r3, #0
 804d284:	bfbb      	ittet	lt
 804d286:	425b      	neglt	r3, r3
 804d288:	f042 0202 	orrlt.w	r2, r2, #2
 804d28c:	9307      	strge	r3, [sp, #28]
 804d28e:	9307      	strlt	r3, [sp, #28]
 804d290:	bfb8      	it	lt
 804d292:	9204      	strlt	r2, [sp, #16]
 804d294:	7823      	ldrb	r3, [r4, #0]
 804d296:	2b2e      	cmp	r3, #46	; 0x2e
 804d298:	d10c      	bne.n	804d2b4 <_svfiprintf_r+0x130>
 804d29a:	7863      	ldrb	r3, [r4, #1]
 804d29c:	2b2a      	cmp	r3, #42	; 0x2a
 804d29e:	d135      	bne.n	804d30c <_svfiprintf_r+0x188>
 804d2a0:	9b03      	ldr	r3, [sp, #12]
 804d2a2:	1d1a      	adds	r2, r3, #4
 804d2a4:	681b      	ldr	r3, [r3, #0]
 804d2a6:	9203      	str	r2, [sp, #12]
 804d2a8:	2b00      	cmp	r3, #0
 804d2aa:	bfb8      	it	lt
 804d2ac:	f04f 33ff 	movlt.w	r3, #4294967295
 804d2b0:	3402      	adds	r4, #2
 804d2b2:	9305      	str	r3, [sp, #20]
 804d2b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804d380 <_svfiprintf_r+0x1fc>
 804d2b8:	7821      	ldrb	r1, [r4, #0]
 804d2ba:	2203      	movs	r2, #3
 804d2bc:	4650      	mov	r0, sl
 804d2be:	f7f2 ff97 	bl	80401f0 <memchr>
 804d2c2:	b140      	cbz	r0, 804d2d6 <_svfiprintf_r+0x152>
 804d2c4:	2340      	movs	r3, #64	; 0x40
 804d2c6:	eba0 000a 	sub.w	r0, r0, sl
 804d2ca:	fa03 f000 	lsl.w	r0, r3, r0
 804d2ce:	9b04      	ldr	r3, [sp, #16]
 804d2d0:	4303      	orrs	r3, r0
 804d2d2:	3401      	adds	r4, #1
 804d2d4:	9304      	str	r3, [sp, #16]
 804d2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d2da:	4826      	ldr	r0, [pc, #152]	; (804d374 <_svfiprintf_r+0x1f0>)
 804d2dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d2e0:	2206      	movs	r2, #6
 804d2e2:	f7f2 ff85 	bl	80401f0 <memchr>
 804d2e6:	2800      	cmp	r0, #0
 804d2e8:	d038      	beq.n	804d35c <_svfiprintf_r+0x1d8>
 804d2ea:	4b23      	ldr	r3, [pc, #140]	; (804d378 <_svfiprintf_r+0x1f4>)
 804d2ec:	bb1b      	cbnz	r3, 804d336 <_svfiprintf_r+0x1b2>
 804d2ee:	9b03      	ldr	r3, [sp, #12]
 804d2f0:	3307      	adds	r3, #7
 804d2f2:	f023 0307 	bic.w	r3, r3, #7
 804d2f6:	3308      	adds	r3, #8
 804d2f8:	9303      	str	r3, [sp, #12]
 804d2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d2fc:	4433      	add	r3, r6
 804d2fe:	9309      	str	r3, [sp, #36]	; 0x24
 804d300:	e767      	b.n	804d1d2 <_svfiprintf_r+0x4e>
 804d302:	fb0c 3202 	mla	r2, ip, r2, r3
 804d306:	460c      	mov	r4, r1
 804d308:	2001      	movs	r0, #1
 804d30a:	e7a5      	b.n	804d258 <_svfiprintf_r+0xd4>
 804d30c:	2300      	movs	r3, #0
 804d30e:	3401      	adds	r4, #1
 804d310:	9305      	str	r3, [sp, #20]
 804d312:	4619      	mov	r1, r3
 804d314:	f04f 0c0a 	mov.w	ip, #10
 804d318:	4620      	mov	r0, r4
 804d31a:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d31e:	3a30      	subs	r2, #48	; 0x30
 804d320:	2a09      	cmp	r2, #9
 804d322:	d903      	bls.n	804d32c <_svfiprintf_r+0x1a8>
 804d324:	2b00      	cmp	r3, #0
 804d326:	d0c5      	beq.n	804d2b4 <_svfiprintf_r+0x130>
 804d328:	9105      	str	r1, [sp, #20]
 804d32a:	e7c3      	b.n	804d2b4 <_svfiprintf_r+0x130>
 804d32c:	fb0c 2101 	mla	r1, ip, r1, r2
 804d330:	4604      	mov	r4, r0
 804d332:	2301      	movs	r3, #1
 804d334:	e7f0      	b.n	804d318 <_svfiprintf_r+0x194>
 804d336:	ab03      	add	r3, sp, #12
 804d338:	9300      	str	r3, [sp, #0]
 804d33a:	462a      	mov	r2, r5
 804d33c:	4b0f      	ldr	r3, [pc, #60]	; (804d37c <_svfiprintf_r+0x1f8>)
 804d33e:	a904      	add	r1, sp, #16
 804d340:	4638      	mov	r0, r7
 804d342:	f3af 8000 	nop.w
 804d346:	1c42      	adds	r2, r0, #1
 804d348:	4606      	mov	r6, r0
 804d34a:	d1d6      	bne.n	804d2fa <_svfiprintf_r+0x176>
 804d34c:	89ab      	ldrh	r3, [r5, #12]
 804d34e:	065b      	lsls	r3, r3, #25
 804d350:	f53f af2c 	bmi.w	804d1ac <_svfiprintf_r+0x28>
 804d354:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d356:	b01d      	add	sp, #116	; 0x74
 804d358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d35c:	ab03      	add	r3, sp, #12
 804d35e:	9300      	str	r3, [sp, #0]
 804d360:	462a      	mov	r2, r5
 804d362:	4b06      	ldr	r3, [pc, #24]	; (804d37c <_svfiprintf_r+0x1f8>)
 804d364:	a904      	add	r1, sp, #16
 804d366:	4638      	mov	r0, r7
 804d368:	f000 f9d4 	bl	804d714 <_printf_i>
 804d36c:	e7eb      	b.n	804d346 <_svfiprintf_r+0x1c2>
 804d36e:	bf00      	nop
 804d370:	0804fc2c 	.word	0x0804fc2c
 804d374:	0804fc36 	.word	0x0804fc36
 804d378:	00000000 	.word	0x00000000
 804d37c:	0804d0cd 	.word	0x0804d0cd
 804d380:	0804fc32 	.word	0x0804fc32

0804d384 <__sfputc_r>:
 804d384:	6893      	ldr	r3, [r2, #8]
 804d386:	3b01      	subs	r3, #1
 804d388:	2b00      	cmp	r3, #0
 804d38a:	b410      	push	{r4}
 804d38c:	6093      	str	r3, [r2, #8]
 804d38e:	da08      	bge.n	804d3a2 <__sfputc_r+0x1e>
 804d390:	6994      	ldr	r4, [r2, #24]
 804d392:	42a3      	cmp	r3, r4
 804d394:	db01      	blt.n	804d39a <__sfputc_r+0x16>
 804d396:	290a      	cmp	r1, #10
 804d398:	d103      	bne.n	804d3a2 <__sfputc_r+0x1e>
 804d39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d39e:	f7ff bba9 	b.w	804caf4 <__swbuf_r>
 804d3a2:	6813      	ldr	r3, [r2, #0]
 804d3a4:	1c58      	adds	r0, r3, #1
 804d3a6:	6010      	str	r0, [r2, #0]
 804d3a8:	7019      	strb	r1, [r3, #0]
 804d3aa:	4608      	mov	r0, r1
 804d3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d3b0:	4770      	bx	lr

0804d3b2 <__sfputs_r>:
 804d3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d3b4:	4606      	mov	r6, r0
 804d3b6:	460f      	mov	r7, r1
 804d3b8:	4614      	mov	r4, r2
 804d3ba:	18d5      	adds	r5, r2, r3
 804d3bc:	42ac      	cmp	r4, r5
 804d3be:	d101      	bne.n	804d3c4 <__sfputs_r+0x12>
 804d3c0:	2000      	movs	r0, #0
 804d3c2:	e007      	b.n	804d3d4 <__sfputs_r+0x22>
 804d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d3c8:	463a      	mov	r2, r7
 804d3ca:	4630      	mov	r0, r6
 804d3cc:	f7ff ffda 	bl	804d384 <__sfputc_r>
 804d3d0:	1c43      	adds	r3, r0, #1
 804d3d2:	d1f3      	bne.n	804d3bc <__sfputs_r+0xa>
 804d3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804d3d8 <_vfiprintf_r>:
 804d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d3dc:	460d      	mov	r5, r1
 804d3de:	b09d      	sub	sp, #116	; 0x74
 804d3e0:	4614      	mov	r4, r2
 804d3e2:	4698      	mov	r8, r3
 804d3e4:	4606      	mov	r6, r0
 804d3e6:	b118      	cbz	r0, 804d3f0 <_vfiprintf_r+0x18>
 804d3e8:	6983      	ldr	r3, [r0, #24]
 804d3ea:	b90b      	cbnz	r3, 804d3f0 <_vfiprintf_r+0x18>
 804d3ec:	f7ff fd5c 	bl	804cea8 <__sinit>
 804d3f0:	4b89      	ldr	r3, [pc, #548]	; (804d618 <_vfiprintf_r+0x240>)
 804d3f2:	429d      	cmp	r5, r3
 804d3f4:	d11b      	bne.n	804d42e <_vfiprintf_r+0x56>
 804d3f6:	6875      	ldr	r5, [r6, #4]
 804d3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d3fa:	07d9      	lsls	r1, r3, #31
 804d3fc:	d405      	bmi.n	804d40a <_vfiprintf_r+0x32>
 804d3fe:	89ab      	ldrh	r3, [r5, #12]
 804d400:	059a      	lsls	r2, r3, #22
 804d402:	d402      	bmi.n	804d40a <_vfiprintf_r+0x32>
 804d404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d406:	f7ff fded 	bl	804cfe4 <__retarget_lock_acquire_recursive>
 804d40a:	89ab      	ldrh	r3, [r5, #12]
 804d40c:	071b      	lsls	r3, r3, #28
 804d40e:	d501      	bpl.n	804d414 <_vfiprintf_r+0x3c>
 804d410:	692b      	ldr	r3, [r5, #16]
 804d412:	b9eb      	cbnz	r3, 804d450 <_vfiprintf_r+0x78>
 804d414:	4629      	mov	r1, r5
 804d416:	4630      	mov	r0, r6
 804d418:	f7ff fbbe 	bl	804cb98 <__swsetup_r>
 804d41c:	b1c0      	cbz	r0, 804d450 <_vfiprintf_r+0x78>
 804d41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d420:	07dc      	lsls	r4, r3, #31
 804d422:	d50e      	bpl.n	804d442 <_vfiprintf_r+0x6a>
 804d424:	f04f 30ff 	mov.w	r0, #4294967295
 804d428:	b01d      	add	sp, #116	; 0x74
 804d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d42e:	4b7b      	ldr	r3, [pc, #492]	; (804d61c <_vfiprintf_r+0x244>)
 804d430:	429d      	cmp	r5, r3
 804d432:	d101      	bne.n	804d438 <_vfiprintf_r+0x60>
 804d434:	68b5      	ldr	r5, [r6, #8]
 804d436:	e7df      	b.n	804d3f8 <_vfiprintf_r+0x20>
 804d438:	4b79      	ldr	r3, [pc, #484]	; (804d620 <_vfiprintf_r+0x248>)
 804d43a:	429d      	cmp	r5, r3
 804d43c:	bf08      	it	eq
 804d43e:	68f5      	ldreq	r5, [r6, #12]
 804d440:	e7da      	b.n	804d3f8 <_vfiprintf_r+0x20>
 804d442:	89ab      	ldrh	r3, [r5, #12]
 804d444:	0598      	lsls	r0, r3, #22
 804d446:	d4ed      	bmi.n	804d424 <_vfiprintf_r+0x4c>
 804d448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d44a:	f7ff fdcc 	bl	804cfe6 <__retarget_lock_release_recursive>
 804d44e:	e7e9      	b.n	804d424 <_vfiprintf_r+0x4c>
 804d450:	2300      	movs	r3, #0
 804d452:	9309      	str	r3, [sp, #36]	; 0x24
 804d454:	2320      	movs	r3, #32
 804d456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d45a:	f8cd 800c 	str.w	r8, [sp, #12]
 804d45e:	2330      	movs	r3, #48	; 0x30
 804d460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804d624 <_vfiprintf_r+0x24c>
 804d464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d468:	f04f 0901 	mov.w	r9, #1
 804d46c:	4623      	mov	r3, r4
 804d46e:	469a      	mov	sl, r3
 804d470:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d474:	b10a      	cbz	r2, 804d47a <_vfiprintf_r+0xa2>
 804d476:	2a25      	cmp	r2, #37	; 0x25
 804d478:	d1f9      	bne.n	804d46e <_vfiprintf_r+0x96>
 804d47a:	ebba 0b04 	subs.w	fp, sl, r4
 804d47e:	d00b      	beq.n	804d498 <_vfiprintf_r+0xc0>
 804d480:	465b      	mov	r3, fp
 804d482:	4622      	mov	r2, r4
 804d484:	4629      	mov	r1, r5
 804d486:	4630      	mov	r0, r6
 804d488:	f7ff ff93 	bl	804d3b2 <__sfputs_r>
 804d48c:	3001      	adds	r0, #1
 804d48e:	f000 80aa 	beq.w	804d5e6 <_vfiprintf_r+0x20e>
 804d492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d494:	445a      	add	r2, fp
 804d496:	9209      	str	r2, [sp, #36]	; 0x24
 804d498:	f89a 3000 	ldrb.w	r3, [sl]
 804d49c:	2b00      	cmp	r3, #0
 804d49e:	f000 80a2 	beq.w	804d5e6 <_vfiprintf_r+0x20e>
 804d4a2:	2300      	movs	r3, #0
 804d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 804d4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d4ac:	f10a 0a01 	add.w	sl, sl, #1
 804d4b0:	9304      	str	r3, [sp, #16]
 804d4b2:	9307      	str	r3, [sp, #28]
 804d4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d4b8:	931a      	str	r3, [sp, #104]	; 0x68
 804d4ba:	4654      	mov	r4, sl
 804d4bc:	2205      	movs	r2, #5
 804d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d4c2:	4858      	ldr	r0, [pc, #352]	; (804d624 <_vfiprintf_r+0x24c>)
 804d4c4:	f7f2 fe94 	bl	80401f0 <memchr>
 804d4c8:	9a04      	ldr	r2, [sp, #16]
 804d4ca:	b9d8      	cbnz	r0, 804d504 <_vfiprintf_r+0x12c>
 804d4cc:	06d1      	lsls	r1, r2, #27
 804d4ce:	bf44      	itt	mi
 804d4d0:	2320      	movmi	r3, #32
 804d4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d4d6:	0713      	lsls	r3, r2, #28
 804d4d8:	bf44      	itt	mi
 804d4da:	232b      	movmi	r3, #43	; 0x2b
 804d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d4e0:	f89a 3000 	ldrb.w	r3, [sl]
 804d4e4:	2b2a      	cmp	r3, #42	; 0x2a
 804d4e6:	d015      	beq.n	804d514 <_vfiprintf_r+0x13c>
 804d4e8:	9a07      	ldr	r2, [sp, #28]
 804d4ea:	4654      	mov	r4, sl
 804d4ec:	2000      	movs	r0, #0
 804d4ee:	f04f 0c0a 	mov.w	ip, #10
 804d4f2:	4621      	mov	r1, r4
 804d4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d4f8:	3b30      	subs	r3, #48	; 0x30
 804d4fa:	2b09      	cmp	r3, #9
 804d4fc:	d94e      	bls.n	804d59c <_vfiprintf_r+0x1c4>
 804d4fe:	b1b0      	cbz	r0, 804d52e <_vfiprintf_r+0x156>
 804d500:	9207      	str	r2, [sp, #28]
 804d502:	e014      	b.n	804d52e <_vfiprintf_r+0x156>
 804d504:	eba0 0308 	sub.w	r3, r0, r8
 804d508:	fa09 f303 	lsl.w	r3, r9, r3
 804d50c:	4313      	orrs	r3, r2
 804d50e:	9304      	str	r3, [sp, #16]
 804d510:	46a2      	mov	sl, r4
 804d512:	e7d2      	b.n	804d4ba <_vfiprintf_r+0xe2>
 804d514:	9b03      	ldr	r3, [sp, #12]
 804d516:	1d19      	adds	r1, r3, #4
 804d518:	681b      	ldr	r3, [r3, #0]
 804d51a:	9103      	str	r1, [sp, #12]
 804d51c:	2b00      	cmp	r3, #0
 804d51e:	bfbb      	ittet	lt
 804d520:	425b      	neglt	r3, r3
 804d522:	f042 0202 	orrlt.w	r2, r2, #2
 804d526:	9307      	strge	r3, [sp, #28]
 804d528:	9307      	strlt	r3, [sp, #28]
 804d52a:	bfb8      	it	lt
 804d52c:	9204      	strlt	r2, [sp, #16]
 804d52e:	7823      	ldrb	r3, [r4, #0]
 804d530:	2b2e      	cmp	r3, #46	; 0x2e
 804d532:	d10c      	bne.n	804d54e <_vfiprintf_r+0x176>
 804d534:	7863      	ldrb	r3, [r4, #1]
 804d536:	2b2a      	cmp	r3, #42	; 0x2a
 804d538:	d135      	bne.n	804d5a6 <_vfiprintf_r+0x1ce>
 804d53a:	9b03      	ldr	r3, [sp, #12]
 804d53c:	1d1a      	adds	r2, r3, #4
 804d53e:	681b      	ldr	r3, [r3, #0]
 804d540:	9203      	str	r2, [sp, #12]
 804d542:	2b00      	cmp	r3, #0
 804d544:	bfb8      	it	lt
 804d546:	f04f 33ff 	movlt.w	r3, #4294967295
 804d54a:	3402      	adds	r4, #2
 804d54c:	9305      	str	r3, [sp, #20]
 804d54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804d634 <_vfiprintf_r+0x25c>
 804d552:	7821      	ldrb	r1, [r4, #0]
 804d554:	2203      	movs	r2, #3
 804d556:	4650      	mov	r0, sl
 804d558:	f7f2 fe4a 	bl	80401f0 <memchr>
 804d55c:	b140      	cbz	r0, 804d570 <_vfiprintf_r+0x198>
 804d55e:	2340      	movs	r3, #64	; 0x40
 804d560:	eba0 000a 	sub.w	r0, r0, sl
 804d564:	fa03 f000 	lsl.w	r0, r3, r0
 804d568:	9b04      	ldr	r3, [sp, #16]
 804d56a:	4303      	orrs	r3, r0
 804d56c:	3401      	adds	r4, #1
 804d56e:	9304      	str	r3, [sp, #16]
 804d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d574:	482c      	ldr	r0, [pc, #176]	; (804d628 <_vfiprintf_r+0x250>)
 804d576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d57a:	2206      	movs	r2, #6
 804d57c:	f7f2 fe38 	bl	80401f0 <memchr>
 804d580:	2800      	cmp	r0, #0
 804d582:	d03f      	beq.n	804d604 <_vfiprintf_r+0x22c>
 804d584:	4b29      	ldr	r3, [pc, #164]	; (804d62c <_vfiprintf_r+0x254>)
 804d586:	bb1b      	cbnz	r3, 804d5d0 <_vfiprintf_r+0x1f8>
 804d588:	9b03      	ldr	r3, [sp, #12]
 804d58a:	3307      	adds	r3, #7
 804d58c:	f023 0307 	bic.w	r3, r3, #7
 804d590:	3308      	adds	r3, #8
 804d592:	9303      	str	r3, [sp, #12]
 804d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d596:	443b      	add	r3, r7
 804d598:	9309      	str	r3, [sp, #36]	; 0x24
 804d59a:	e767      	b.n	804d46c <_vfiprintf_r+0x94>
 804d59c:	fb0c 3202 	mla	r2, ip, r2, r3
 804d5a0:	460c      	mov	r4, r1
 804d5a2:	2001      	movs	r0, #1
 804d5a4:	e7a5      	b.n	804d4f2 <_vfiprintf_r+0x11a>
 804d5a6:	2300      	movs	r3, #0
 804d5a8:	3401      	adds	r4, #1
 804d5aa:	9305      	str	r3, [sp, #20]
 804d5ac:	4619      	mov	r1, r3
 804d5ae:	f04f 0c0a 	mov.w	ip, #10
 804d5b2:	4620      	mov	r0, r4
 804d5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d5b8:	3a30      	subs	r2, #48	; 0x30
 804d5ba:	2a09      	cmp	r2, #9
 804d5bc:	d903      	bls.n	804d5c6 <_vfiprintf_r+0x1ee>
 804d5be:	2b00      	cmp	r3, #0
 804d5c0:	d0c5      	beq.n	804d54e <_vfiprintf_r+0x176>
 804d5c2:	9105      	str	r1, [sp, #20]
 804d5c4:	e7c3      	b.n	804d54e <_vfiprintf_r+0x176>
 804d5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 804d5ca:	4604      	mov	r4, r0
 804d5cc:	2301      	movs	r3, #1
 804d5ce:	e7f0      	b.n	804d5b2 <_vfiprintf_r+0x1da>
 804d5d0:	ab03      	add	r3, sp, #12
 804d5d2:	9300      	str	r3, [sp, #0]
 804d5d4:	462a      	mov	r2, r5
 804d5d6:	4b16      	ldr	r3, [pc, #88]	; (804d630 <_vfiprintf_r+0x258>)
 804d5d8:	a904      	add	r1, sp, #16
 804d5da:	4630      	mov	r0, r6
 804d5dc:	f3af 8000 	nop.w
 804d5e0:	4607      	mov	r7, r0
 804d5e2:	1c78      	adds	r0, r7, #1
 804d5e4:	d1d6      	bne.n	804d594 <_vfiprintf_r+0x1bc>
 804d5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d5e8:	07d9      	lsls	r1, r3, #31
 804d5ea:	d405      	bmi.n	804d5f8 <_vfiprintf_r+0x220>
 804d5ec:	89ab      	ldrh	r3, [r5, #12]
 804d5ee:	059a      	lsls	r2, r3, #22
 804d5f0:	d402      	bmi.n	804d5f8 <_vfiprintf_r+0x220>
 804d5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d5f4:	f7ff fcf7 	bl	804cfe6 <__retarget_lock_release_recursive>
 804d5f8:	89ab      	ldrh	r3, [r5, #12]
 804d5fa:	065b      	lsls	r3, r3, #25
 804d5fc:	f53f af12 	bmi.w	804d424 <_vfiprintf_r+0x4c>
 804d600:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d602:	e711      	b.n	804d428 <_vfiprintf_r+0x50>
 804d604:	ab03      	add	r3, sp, #12
 804d606:	9300      	str	r3, [sp, #0]
 804d608:	462a      	mov	r2, r5
 804d60a:	4b09      	ldr	r3, [pc, #36]	; (804d630 <_vfiprintf_r+0x258>)
 804d60c:	a904      	add	r1, sp, #16
 804d60e:	4630      	mov	r0, r6
 804d610:	f000 f880 	bl	804d714 <_printf_i>
 804d614:	e7e4      	b.n	804d5e0 <_vfiprintf_r+0x208>
 804d616:	bf00      	nop
 804d618:	0804fbec 	.word	0x0804fbec
 804d61c:	0804fc0c 	.word	0x0804fc0c
 804d620:	0804fbcc 	.word	0x0804fbcc
 804d624:	0804fc2c 	.word	0x0804fc2c
 804d628:	0804fc36 	.word	0x0804fc36
 804d62c:	00000000 	.word	0x00000000
 804d630:	0804d3b3 	.word	0x0804d3b3
 804d634:	0804fc32 	.word	0x0804fc32

0804d638 <_printf_common>:
 804d638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d63c:	4616      	mov	r6, r2
 804d63e:	4699      	mov	r9, r3
 804d640:	688a      	ldr	r2, [r1, #8]
 804d642:	690b      	ldr	r3, [r1, #16]
 804d644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804d648:	4293      	cmp	r3, r2
 804d64a:	bfb8      	it	lt
 804d64c:	4613      	movlt	r3, r2
 804d64e:	6033      	str	r3, [r6, #0]
 804d650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804d654:	4607      	mov	r7, r0
 804d656:	460c      	mov	r4, r1
 804d658:	b10a      	cbz	r2, 804d65e <_printf_common+0x26>
 804d65a:	3301      	adds	r3, #1
 804d65c:	6033      	str	r3, [r6, #0]
 804d65e:	6823      	ldr	r3, [r4, #0]
 804d660:	0699      	lsls	r1, r3, #26
 804d662:	bf42      	ittt	mi
 804d664:	6833      	ldrmi	r3, [r6, #0]
 804d666:	3302      	addmi	r3, #2
 804d668:	6033      	strmi	r3, [r6, #0]
 804d66a:	6825      	ldr	r5, [r4, #0]
 804d66c:	f015 0506 	ands.w	r5, r5, #6
 804d670:	d106      	bne.n	804d680 <_printf_common+0x48>
 804d672:	f104 0a19 	add.w	sl, r4, #25
 804d676:	68e3      	ldr	r3, [r4, #12]
 804d678:	6832      	ldr	r2, [r6, #0]
 804d67a:	1a9b      	subs	r3, r3, r2
 804d67c:	42ab      	cmp	r3, r5
 804d67e:	dc26      	bgt.n	804d6ce <_printf_common+0x96>
 804d680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804d684:	1e13      	subs	r3, r2, #0
 804d686:	6822      	ldr	r2, [r4, #0]
 804d688:	bf18      	it	ne
 804d68a:	2301      	movne	r3, #1
 804d68c:	0692      	lsls	r2, r2, #26
 804d68e:	d42b      	bmi.n	804d6e8 <_printf_common+0xb0>
 804d690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804d694:	4649      	mov	r1, r9
 804d696:	4638      	mov	r0, r7
 804d698:	47c0      	blx	r8
 804d69a:	3001      	adds	r0, #1
 804d69c:	d01e      	beq.n	804d6dc <_printf_common+0xa4>
 804d69e:	6823      	ldr	r3, [r4, #0]
 804d6a0:	68e5      	ldr	r5, [r4, #12]
 804d6a2:	6832      	ldr	r2, [r6, #0]
 804d6a4:	f003 0306 	and.w	r3, r3, #6
 804d6a8:	2b04      	cmp	r3, #4
 804d6aa:	bf08      	it	eq
 804d6ac:	1aad      	subeq	r5, r5, r2
 804d6ae:	68a3      	ldr	r3, [r4, #8]
 804d6b0:	6922      	ldr	r2, [r4, #16]
 804d6b2:	bf0c      	ite	eq
 804d6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804d6b8:	2500      	movne	r5, #0
 804d6ba:	4293      	cmp	r3, r2
 804d6bc:	bfc4      	itt	gt
 804d6be:	1a9b      	subgt	r3, r3, r2
 804d6c0:	18ed      	addgt	r5, r5, r3
 804d6c2:	2600      	movs	r6, #0
 804d6c4:	341a      	adds	r4, #26
 804d6c6:	42b5      	cmp	r5, r6
 804d6c8:	d11a      	bne.n	804d700 <_printf_common+0xc8>
 804d6ca:	2000      	movs	r0, #0
 804d6cc:	e008      	b.n	804d6e0 <_printf_common+0xa8>
 804d6ce:	2301      	movs	r3, #1
 804d6d0:	4652      	mov	r2, sl
 804d6d2:	4649      	mov	r1, r9
 804d6d4:	4638      	mov	r0, r7
 804d6d6:	47c0      	blx	r8
 804d6d8:	3001      	adds	r0, #1
 804d6da:	d103      	bne.n	804d6e4 <_printf_common+0xac>
 804d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 804d6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d6e4:	3501      	adds	r5, #1
 804d6e6:	e7c6      	b.n	804d676 <_printf_common+0x3e>
 804d6e8:	18e1      	adds	r1, r4, r3
 804d6ea:	1c5a      	adds	r2, r3, #1
 804d6ec:	2030      	movs	r0, #48	; 0x30
 804d6ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804d6f2:	4422      	add	r2, r4
 804d6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804d6f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804d6fc:	3302      	adds	r3, #2
 804d6fe:	e7c7      	b.n	804d690 <_printf_common+0x58>
 804d700:	2301      	movs	r3, #1
 804d702:	4622      	mov	r2, r4
 804d704:	4649      	mov	r1, r9
 804d706:	4638      	mov	r0, r7
 804d708:	47c0      	blx	r8
 804d70a:	3001      	adds	r0, #1
 804d70c:	d0e6      	beq.n	804d6dc <_printf_common+0xa4>
 804d70e:	3601      	adds	r6, #1
 804d710:	e7d9      	b.n	804d6c6 <_printf_common+0x8e>
	...

0804d714 <_printf_i>:
 804d714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804d718:	7e0f      	ldrb	r7, [r1, #24]
 804d71a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804d71c:	2f78      	cmp	r7, #120	; 0x78
 804d71e:	4691      	mov	r9, r2
 804d720:	4680      	mov	r8, r0
 804d722:	460c      	mov	r4, r1
 804d724:	469a      	mov	sl, r3
 804d726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804d72a:	d807      	bhi.n	804d73c <_printf_i+0x28>
 804d72c:	2f62      	cmp	r7, #98	; 0x62
 804d72e:	d80a      	bhi.n	804d746 <_printf_i+0x32>
 804d730:	2f00      	cmp	r7, #0
 804d732:	f000 80d8 	beq.w	804d8e6 <_printf_i+0x1d2>
 804d736:	2f58      	cmp	r7, #88	; 0x58
 804d738:	f000 80a3 	beq.w	804d882 <_printf_i+0x16e>
 804d73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804d740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804d744:	e03a      	b.n	804d7bc <_printf_i+0xa8>
 804d746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804d74a:	2b15      	cmp	r3, #21
 804d74c:	d8f6      	bhi.n	804d73c <_printf_i+0x28>
 804d74e:	a101      	add	r1, pc, #4	; (adr r1, 804d754 <_printf_i+0x40>)
 804d750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804d754:	0804d7ad 	.word	0x0804d7ad
 804d758:	0804d7c1 	.word	0x0804d7c1
 804d75c:	0804d73d 	.word	0x0804d73d
 804d760:	0804d73d 	.word	0x0804d73d
 804d764:	0804d73d 	.word	0x0804d73d
 804d768:	0804d73d 	.word	0x0804d73d
 804d76c:	0804d7c1 	.word	0x0804d7c1
 804d770:	0804d73d 	.word	0x0804d73d
 804d774:	0804d73d 	.word	0x0804d73d
 804d778:	0804d73d 	.word	0x0804d73d
 804d77c:	0804d73d 	.word	0x0804d73d
 804d780:	0804d8cd 	.word	0x0804d8cd
 804d784:	0804d7f1 	.word	0x0804d7f1
 804d788:	0804d8af 	.word	0x0804d8af
 804d78c:	0804d73d 	.word	0x0804d73d
 804d790:	0804d73d 	.word	0x0804d73d
 804d794:	0804d8ef 	.word	0x0804d8ef
 804d798:	0804d73d 	.word	0x0804d73d
 804d79c:	0804d7f1 	.word	0x0804d7f1
 804d7a0:	0804d73d 	.word	0x0804d73d
 804d7a4:	0804d73d 	.word	0x0804d73d
 804d7a8:	0804d8b7 	.word	0x0804d8b7
 804d7ac:	682b      	ldr	r3, [r5, #0]
 804d7ae:	1d1a      	adds	r2, r3, #4
 804d7b0:	681b      	ldr	r3, [r3, #0]
 804d7b2:	602a      	str	r2, [r5, #0]
 804d7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804d7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804d7bc:	2301      	movs	r3, #1
 804d7be:	e0a3      	b.n	804d908 <_printf_i+0x1f4>
 804d7c0:	6820      	ldr	r0, [r4, #0]
 804d7c2:	6829      	ldr	r1, [r5, #0]
 804d7c4:	0606      	lsls	r6, r0, #24
 804d7c6:	f101 0304 	add.w	r3, r1, #4
 804d7ca:	d50a      	bpl.n	804d7e2 <_printf_i+0xce>
 804d7cc:	680e      	ldr	r6, [r1, #0]
 804d7ce:	602b      	str	r3, [r5, #0]
 804d7d0:	2e00      	cmp	r6, #0
 804d7d2:	da03      	bge.n	804d7dc <_printf_i+0xc8>
 804d7d4:	232d      	movs	r3, #45	; 0x2d
 804d7d6:	4276      	negs	r6, r6
 804d7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804d7dc:	485e      	ldr	r0, [pc, #376]	; (804d958 <_printf_i+0x244>)
 804d7de:	230a      	movs	r3, #10
 804d7e0:	e019      	b.n	804d816 <_printf_i+0x102>
 804d7e2:	680e      	ldr	r6, [r1, #0]
 804d7e4:	602b      	str	r3, [r5, #0]
 804d7e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 804d7ea:	bf18      	it	ne
 804d7ec:	b236      	sxthne	r6, r6
 804d7ee:	e7ef      	b.n	804d7d0 <_printf_i+0xbc>
 804d7f0:	682b      	ldr	r3, [r5, #0]
 804d7f2:	6820      	ldr	r0, [r4, #0]
 804d7f4:	1d19      	adds	r1, r3, #4
 804d7f6:	6029      	str	r1, [r5, #0]
 804d7f8:	0601      	lsls	r1, r0, #24
 804d7fa:	d501      	bpl.n	804d800 <_printf_i+0xec>
 804d7fc:	681e      	ldr	r6, [r3, #0]
 804d7fe:	e002      	b.n	804d806 <_printf_i+0xf2>
 804d800:	0646      	lsls	r6, r0, #25
 804d802:	d5fb      	bpl.n	804d7fc <_printf_i+0xe8>
 804d804:	881e      	ldrh	r6, [r3, #0]
 804d806:	4854      	ldr	r0, [pc, #336]	; (804d958 <_printf_i+0x244>)
 804d808:	2f6f      	cmp	r7, #111	; 0x6f
 804d80a:	bf0c      	ite	eq
 804d80c:	2308      	moveq	r3, #8
 804d80e:	230a      	movne	r3, #10
 804d810:	2100      	movs	r1, #0
 804d812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804d816:	6865      	ldr	r5, [r4, #4]
 804d818:	60a5      	str	r5, [r4, #8]
 804d81a:	2d00      	cmp	r5, #0
 804d81c:	bfa2      	ittt	ge
 804d81e:	6821      	ldrge	r1, [r4, #0]
 804d820:	f021 0104 	bicge.w	r1, r1, #4
 804d824:	6021      	strge	r1, [r4, #0]
 804d826:	b90e      	cbnz	r6, 804d82c <_printf_i+0x118>
 804d828:	2d00      	cmp	r5, #0
 804d82a:	d04d      	beq.n	804d8c8 <_printf_i+0x1b4>
 804d82c:	4615      	mov	r5, r2
 804d82e:	fbb6 f1f3 	udiv	r1, r6, r3
 804d832:	fb03 6711 	mls	r7, r3, r1, r6
 804d836:	5dc7      	ldrb	r7, [r0, r7]
 804d838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804d83c:	4637      	mov	r7, r6
 804d83e:	42bb      	cmp	r3, r7
 804d840:	460e      	mov	r6, r1
 804d842:	d9f4      	bls.n	804d82e <_printf_i+0x11a>
 804d844:	2b08      	cmp	r3, #8
 804d846:	d10b      	bne.n	804d860 <_printf_i+0x14c>
 804d848:	6823      	ldr	r3, [r4, #0]
 804d84a:	07de      	lsls	r6, r3, #31
 804d84c:	d508      	bpl.n	804d860 <_printf_i+0x14c>
 804d84e:	6923      	ldr	r3, [r4, #16]
 804d850:	6861      	ldr	r1, [r4, #4]
 804d852:	4299      	cmp	r1, r3
 804d854:	bfde      	ittt	le
 804d856:	2330      	movle	r3, #48	; 0x30
 804d858:	f805 3c01 	strble.w	r3, [r5, #-1]
 804d85c:	f105 35ff 	addle.w	r5, r5, #4294967295
 804d860:	1b52      	subs	r2, r2, r5
 804d862:	6122      	str	r2, [r4, #16]
 804d864:	f8cd a000 	str.w	sl, [sp]
 804d868:	464b      	mov	r3, r9
 804d86a:	aa03      	add	r2, sp, #12
 804d86c:	4621      	mov	r1, r4
 804d86e:	4640      	mov	r0, r8
 804d870:	f7ff fee2 	bl	804d638 <_printf_common>
 804d874:	3001      	adds	r0, #1
 804d876:	d14c      	bne.n	804d912 <_printf_i+0x1fe>
 804d878:	f04f 30ff 	mov.w	r0, #4294967295
 804d87c:	b004      	add	sp, #16
 804d87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d882:	4835      	ldr	r0, [pc, #212]	; (804d958 <_printf_i+0x244>)
 804d884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804d888:	6829      	ldr	r1, [r5, #0]
 804d88a:	6823      	ldr	r3, [r4, #0]
 804d88c:	f851 6b04 	ldr.w	r6, [r1], #4
 804d890:	6029      	str	r1, [r5, #0]
 804d892:	061d      	lsls	r5, r3, #24
 804d894:	d514      	bpl.n	804d8c0 <_printf_i+0x1ac>
 804d896:	07df      	lsls	r7, r3, #31
 804d898:	bf44      	itt	mi
 804d89a:	f043 0320 	orrmi.w	r3, r3, #32
 804d89e:	6023      	strmi	r3, [r4, #0]
 804d8a0:	b91e      	cbnz	r6, 804d8aa <_printf_i+0x196>
 804d8a2:	6823      	ldr	r3, [r4, #0]
 804d8a4:	f023 0320 	bic.w	r3, r3, #32
 804d8a8:	6023      	str	r3, [r4, #0]
 804d8aa:	2310      	movs	r3, #16
 804d8ac:	e7b0      	b.n	804d810 <_printf_i+0xfc>
 804d8ae:	6823      	ldr	r3, [r4, #0]
 804d8b0:	f043 0320 	orr.w	r3, r3, #32
 804d8b4:	6023      	str	r3, [r4, #0]
 804d8b6:	2378      	movs	r3, #120	; 0x78
 804d8b8:	4828      	ldr	r0, [pc, #160]	; (804d95c <_printf_i+0x248>)
 804d8ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804d8be:	e7e3      	b.n	804d888 <_printf_i+0x174>
 804d8c0:	0659      	lsls	r1, r3, #25
 804d8c2:	bf48      	it	mi
 804d8c4:	b2b6      	uxthmi	r6, r6
 804d8c6:	e7e6      	b.n	804d896 <_printf_i+0x182>
 804d8c8:	4615      	mov	r5, r2
 804d8ca:	e7bb      	b.n	804d844 <_printf_i+0x130>
 804d8cc:	682b      	ldr	r3, [r5, #0]
 804d8ce:	6826      	ldr	r6, [r4, #0]
 804d8d0:	6961      	ldr	r1, [r4, #20]
 804d8d2:	1d18      	adds	r0, r3, #4
 804d8d4:	6028      	str	r0, [r5, #0]
 804d8d6:	0635      	lsls	r5, r6, #24
 804d8d8:	681b      	ldr	r3, [r3, #0]
 804d8da:	d501      	bpl.n	804d8e0 <_printf_i+0x1cc>
 804d8dc:	6019      	str	r1, [r3, #0]
 804d8de:	e002      	b.n	804d8e6 <_printf_i+0x1d2>
 804d8e0:	0670      	lsls	r0, r6, #25
 804d8e2:	d5fb      	bpl.n	804d8dc <_printf_i+0x1c8>
 804d8e4:	8019      	strh	r1, [r3, #0]
 804d8e6:	2300      	movs	r3, #0
 804d8e8:	6123      	str	r3, [r4, #16]
 804d8ea:	4615      	mov	r5, r2
 804d8ec:	e7ba      	b.n	804d864 <_printf_i+0x150>
 804d8ee:	682b      	ldr	r3, [r5, #0]
 804d8f0:	1d1a      	adds	r2, r3, #4
 804d8f2:	602a      	str	r2, [r5, #0]
 804d8f4:	681d      	ldr	r5, [r3, #0]
 804d8f6:	6862      	ldr	r2, [r4, #4]
 804d8f8:	2100      	movs	r1, #0
 804d8fa:	4628      	mov	r0, r5
 804d8fc:	f7f2 fc78 	bl	80401f0 <memchr>
 804d900:	b108      	cbz	r0, 804d906 <_printf_i+0x1f2>
 804d902:	1b40      	subs	r0, r0, r5
 804d904:	6060      	str	r0, [r4, #4]
 804d906:	6863      	ldr	r3, [r4, #4]
 804d908:	6123      	str	r3, [r4, #16]
 804d90a:	2300      	movs	r3, #0
 804d90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804d910:	e7a8      	b.n	804d864 <_printf_i+0x150>
 804d912:	6923      	ldr	r3, [r4, #16]
 804d914:	462a      	mov	r2, r5
 804d916:	4649      	mov	r1, r9
 804d918:	4640      	mov	r0, r8
 804d91a:	47d0      	blx	sl
 804d91c:	3001      	adds	r0, #1
 804d91e:	d0ab      	beq.n	804d878 <_printf_i+0x164>
 804d920:	6823      	ldr	r3, [r4, #0]
 804d922:	079b      	lsls	r3, r3, #30
 804d924:	d413      	bmi.n	804d94e <_printf_i+0x23a>
 804d926:	68e0      	ldr	r0, [r4, #12]
 804d928:	9b03      	ldr	r3, [sp, #12]
 804d92a:	4298      	cmp	r0, r3
 804d92c:	bfb8      	it	lt
 804d92e:	4618      	movlt	r0, r3
 804d930:	e7a4      	b.n	804d87c <_printf_i+0x168>
 804d932:	2301      	movs	r3, #1
 804d934:	4632      	mov	r2, r6
 804d936:	4649      	mov	r1, r9
 804d938:	4640      	mov	r0, r8
 804d93a:	47d0      	blx	sl
 804d93c:	3001      	adds	r0, #1
 804d93e:	d09b      	beq.n	804d878 <_printf_i+0x164>
 804d940:	3501      	adds	r5, #1
 804d942:	68e3      	ldr	r3, [r4, #12]
 804d944:	9903      	ldr	r1, [sp, #12]
 804d946:	1a5b      	subs	r3, r3, r1
 804d948:	42ab      	cmp	r3, r5
 804d94a:	dcf2      	bgt.n	804d932 <_printf_i+0x21e>
 804d94c:	e7eb      	b.n	804d926 <_printf_i+0x212>
 804d94e:	2500      	movs	r5, #0
 804d950:	f104 0619 	add.w	r6, r4, #25
 804d954:	e7f5      	b.n	804d942 <_printf_i+0x22e>
 804d956:	bf00      	nop
 804d958:	0804fc3d 	.word	0x0804fc3d
 804d95c:	0804fc4e 	.word	0x0804fc4e

0804d960 <__sread>:
 804d960:	b510      	push	{r4, lr}
 804d962:	460c      	mov	r4, r1
 804d964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d968:	f000 f8ec 	bl	804db44 <_read_r>
 804d96c:	2800      	cmp	r0, #0
 804d96e:	bfab      	itete	ge
 804d970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804d972:	89a3      	ldrhlt	r3, [r4, #12]
 804d974:	181b      	addge	r3, r3, r0
 804d976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804d97a:	bfac      	ite	ge
 804d97c:	6563      	strge	r3, [r4, #84]	; 0x54
 804d97e:	81a3      	strhlt	r3, [r4, #12]
 804d980:	bd10      	pop	{r4, pc}

0804d982 <__swrite>:
 804d982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d986:	461f      	mov	r7, r3
 804d988:	898b      	ldrh	r3, [r1, #12]
 804d98a:	05db      	lsls	r3, r3, #23
 804d98c:	4605      	mov	r5, r0
 804d98e:	460c      	mov	r4, r1
 804d990:	4616      	mov	r6, r2
 804d992:	d505      	bpl.n	804d9a0 <__swrite+0x1e>
 804d994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d998:	2302      	movs	r3, #2
 804d99a:	2200      	movs	r2, #0
 804d99c:	f000 f868 	bl	804da70 <_lseek_r>
 804d9a0:	89a3      	ldrh	r3, [r4, #12]
 804d9a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804d9aa:	81a3      	strh	r3, [r4, #12]
 804d9ac:	4632      	mov	r2, r6
 804d9ae:	463b      	mov	r3, r7
 804d9b0:	4628      	mov	r0, r5
 804d9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804d9b6:	f000 b817 	b.w	804d9e8 <_write_r>

0804d9ba <__sseek>:
 804d9ba:	b510      	push	{r4, lr}
 804d9bc:	460c      	mov	r4, r1
 804d9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d9c2:	f000 f855 	bl	804da70 <_lseek_r>
 804d9c6:	1c43      	adds	r3, r0, #1
 804d9c8:	89a3      	ldrh	r3, [r4, #12]
 804d9ca:	bf15      	itete	ne
 804d9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 804d9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804d9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804d9d6:	81a3      	strheq	r3, [r4, #12]
 804d9d8:	bf18      	it	ne
 804d9da:	81a3      	strhne	r3, [r4, #12]
 804d9dc:	bd10      	pop	{r4, pc}

0804d9de <__sclose>:
 804d9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d9e2:	f000 b813 	b.w	804da0c <_close_r>
	...

0804d9e8 <_write_r>:
 804d9e8:	b538      	push	{r3, r4, r5, lr}
 804d9ea:	4d07      	ldr	r5, [pc, #28]	; (804da08 <_write_r+0x20>)
 804d9ec:	4604      	mov	r4, r0
 804d9ee:	4608      	mov	r0, r1
 804d9f0:	4611      	mov	r1, r2
 804d9f2:	2200      	movs	r2, #0
 804d9f4:	602a      	str	r2, [r5, #0]
 804d9f6:	461a      	mov	r2, r3
 804d9f8:	f7f3 ff1d 	bl	8041836 <_write>
 804d9fc:	1c43      	adds	r3, r0, #1
 804d9fe:	d102      	bne.n	804da06 <_write_r+0x1e>
 804da00:	682b      	ldr	r3, [r5, #0]
 804da02:	b103      	cbz	r3, 804da06 <_write_r+0x1e>
 804da04:	6023      	str	r3, [r4, #0]
 804da06:	bd38      	pop	{r3, r4, r5, pc}
 804da08:	20000d54 	.word	0x20000d54

0804da0c <_close_r>:
 804da0c:	b538      	push	{r3, r4, r5, lr}
 804da0e:	4d06      	ldr	r5, [pc, #24]	; (804da28 <_close_r+0x1c>)
 804da10:	2300      	movs	r3, #0
 804da12:	4604      	mov	r4, r0
 804da14:	4608      	mov	r0, r1
 804da16:	602b      	str	r3, [r5, #0]
 804da18:	f7f3 ff29 	bl	804186e <_close>
 804da1c:	1c43      	adds	r3, r0, #1
 804da1e:	d102      	bne.n	804da26 <_close_r+0x1a>
 804da20:	682b      	ldr	r3, [r5, #0]
 804da22:	b103      	cbz	r3, 804da26 <_close_r+0x1a>
 804da24:	6023      	str	r3, [r4, #0]
 804da26:	bd38      	pop	{r3, r4, r5, pc}
 804da28:	20000d54 	.word	0x20000d54

0804da2c <_fstat_r>:
 804da2c:	b538      	push	{r3, r4, r5, lr}
 804da2e:	4d07      	ldr	r5, [pc, #28]	; (804da4c <_fstat_r+0x20>)
 804da30:	2300      	movs	r3, #0
 804da32:	4604      	mov	r4, r0
 804da34:	4608      	mov	r0, r1
 804da36:	4611      	mov	r1, r2
 804da38:	602b      	str	r3, [r5, #0]
 804da3a:	f7f3 ff24 	bl	8041886 <_fstat>
 804da3e:	1c43      	adds	r3, r0, #1
 804da40:	d102      	bne.n	804da48 <_fstat_r+0x1c>
 804da42:	682b      	ldr	r3, [r5, #0]
 804da44:	b103      	cbz	r3, 804da48 <_fstat_r+0x1c>
 804da46:	6023      	str	r3, [r4, #0]
 804da48:	bd38      	pop	{r3, r4, r5, pc}
 804da4a:	bf00      	nop
 804da4c:	20000d54 	.word	0x20000d54

0804da50 <_isatty_r>:
 804da50:	b538      	push	{r3, r4, r5, lr}
 804da52:	4d06      	ldr	r5, [pc, #24]	; (804da6c <_isatty_r+0x1c>)
 804da54:	2300      	movs	r3, #0
 804da56:	4604      	mov	r4, r0
 804da58:	4608      	mov	r0, r1
 804da5a:	602b      	str	r3, [r5, #0]
 804da5c:	f7f3 ff23 	bl	80418a6 <_isatty>
 804da60:	1c43      	adds	r3, r0, #1
 804da62:	d102      	bne.n	804da6a <_isatty_r+0x1a>
 804da64:	682b      	ldr	r3, [r5, #0]
 804da66:	b103      	cbz	r3, 804da6a <_isatty_r+0x1a>
 804da68:	6023      	str	r3, [r4, #0]
 804da6a:	bd38      	pop	{r3, r4, r5, pc}
 804da6c:	20000d54 	.word	0x20000d54

0804da70 <_lseek_r>:
 804da70:	b538      	push	{r3, r4, r5, lr}
 804da72:	4d07      	ldr	r5, [pc, #28]	; (804da90 <_lseek_r+0x20>)
 804da74:	4604      	mov	r4, r0
 804da76:	4608      	mov	r0, r1
 804da78:	4611      	mov	r1, r2
 804da7a:	2200      	movs	r2, #0
 804da7c:	602a      	str	r2, [r5, #0]
 804da7e:	461a      	mov	r2, r3
 804da80:	f7f3 ff1c 	bl	80418bc <_lseek>
 804da84:	1c43      	adds	r3, r0, #1
 804da86:	d102      	bne.n	804da8e <_lseek_r+0x1e>
 804da88:	682b      	ldr	r3, [r5, #0]
 804da8a:	b103      	cbz	r3, 804da8e <_lseek_r+0x1e>
 804da8c:	6023      	str	r3, [r4, #0]
 804da8e:	bd38      	pop	{r3, r4, r5, pc}
 804da90:	20000d54 	.word	0x20000d54

0804da94 <memcpy>:
 804da94:	440a      	add	r2, r1
 804da96:	4291      	cmp	r1, r2
 804da98:	f100 33ff 	add.w	r3, r0, #4294967295
 804da9c:	d100      	bne.n	804daa0 <memcpy+0xc>
 804da9e:	4770      	bx	lr
 804daa0:	b510      	push	{r4, lr}
 804daa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 804daa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 804daaa:	4291      	cmp	r1, r2
 804daac:	d1f9      	bne.n	804daa2 <memcpy+0xe>
 804daae:	bd10      	pop	{r4, pc}

0804dab0 <memmove>:
 804dab0:	4288      	cmp	r0, r1
 804dab2:	b510      	push	{r4, lr}
 804dab4:	eb01 0402 	add.w	r4, r1, r2
 804dab8:	d902      	bls.n	804dac0 <memmove+0x10>
 804daba:	4284      	cmp	r4, r0
 804dabc:	4623      	mov	r3, r4
 804dabe:	d807      	bhi.n	804dad0 <memmove+0x20>
 804dac0:	1e43      	subs	r3, r0, #1
 804dac2:	42a1      	cmp	r1, r4
 804dac4:	d008      	beq.n	804dad8 <memmove+0x28>
 804dac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 804daca:	f803 2f01 	strb.w	r2, [r3, #1]!
 804dace:	e7f8      	b.n	804dac2 <memmove+0x12>
 804dad0:	4402      	add	r2, r0
 804dad2:	4601      	mov	r1, r0
 804dad4:	428a      	cmp	r2, r1
 804dad6:	d100      	bne.n	804dada <memmove+0x2a>
 804dad8:	bd10      	pop	{r4, pc}
 804dada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804dade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804dae2:	e7f7      	b.n	804dad4 <memmove+0x24>

0804dae4 <_realloc_r>:
 804dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804dae8:	4680      	mov	r8, r0
 804daea:	4614      	mov	r4, r2
 804daec:	460e      	mov	r6, r1
 804daee:	b921      	cbnz	r1, 804dafa <_realloc_r+0x16>
 804daf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804daf4:	4611      	mov	r1, r2
 804daf6:	f7fe becb 	b.w	804c890 <_malloc_r>
 804dafa:	b92a      	cbnz	r2, 804db08 <_realloc_r+0x24>
 804dafc:	f7fe fe5c 	bl	804c7b8 <_free_r>
 804db00:	4625      	mov	r5, r4
 804db02:	4628      	mov	r0, r5
 804db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804db08:	f000 f82e 	bl	804db68 <_malloc_usable_size_r>
 804db0c:	4284      	cmp	r4, r0
 804db0e:	4607      	mov	r7, r0
 804db10:	d802      	bhi.n	804db18 <_realloc_r+0x34>
 804db12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804db16:	d812      	bhi.n	804db3e <_realloc_r+0x5a>
 804db18:	4621      	mov	r1, r4
 804db1a:	4640      	mov	r0, r8
 804db1c:	f7fe feb8 	bl	804c890 <_malloc_r>
 804db20:	4605      	mov	r5, r0
 804db22:	2800      	cmp	r0, #0
 804db24:	d0ed      	beq.n	804db02 <_realloc_r+0x1e>
 804db26:	42bc      	cmp	r4, r7
 804db28:	4622      	mov	r2, r4
 804db2a:	4631      	mov	r1, r6
 804db2c:	bf28      	it	cs
 804db2e:	463a      	movcs	r2, r7
 804db30:	f7ff ffb0 	bl	804da94 <memcpy>
 804db34:	4631      	mov	r1, r6
 804db36:	4640      	mov	r0, r8
 804db38:	f7fe fe3e 	bl	804c7b8 <_free_r>
 804db3c:	e7e1      	b.n	804db02 <_realloc_r+0x1e>
 804db3e:	4635      	mov	r5, r6
 804db40:	e7df      	b.n	804db02 <_realloc_r+0x1e>
	...

0804db44 <_read_r>:
 804db44:	b538      	push	{r3, r4, r5, lr}
 804db46:	4d07      	ldr	r5, [pc, #28]	; (804db64 <_read_r+0x20>)
 804db48:	4604      	mov	r4, r0
 804db4a:	4608      	mov	r0, r1
 804db4c:	4611      	mov	r1, r2
 804db4e:	2200      	movs	r2, #0
 804db50:	602a      	str	r2, [r5, #0]
 804db52:	461a      	mov	r2, r3
 804db54:	f7f3 fe52 	bl	80417fc <_read>
 804db58:	1c43      	adds	r3, r0, #1
 804db5a:	d102      	bne.n	804db62 <_read_r+0x1e>
 804db5c:	682b      	ldr	r3, [r5, #0]
 804db5e:	b103      	cbz	r3, 804db62 <_read_r+0x1e>
 804db60:	6023      	str	r3, [r4, #0]
 804db62:	bd38      	pop	{r3, r4, r5, pc}
 804db64:	20000d54 	.word	0x20000d54

0804db68 <_malloc_usable_size_r>:
 804db68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804db6c:	1f18      	subs	r0, r3, #4
 804db6e:	2b00      	cmp	r3, #0
 804db70:	bfbc      	itt	lt
 804db72:	580b      	ldrlt	r3, [r1, r0]
 804db74:	18c0      	addlt	r0, r0, r3
 804db76:	4770      	bx	lr

0804db78 <_init>:
 804db78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804db7a:	bf00      	nop
 804db7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804db7e:	bc08      	pop	{r3}
 804db80:	469e      	mov	lr, r3
 804db82:	4770      	bx	lr

0804db84 <_fini>:
 804db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804db86:	bf00      	nop
 804db88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804db8a:	bc08      	pop	{r3}
 804db8c:	469e      	mov	lr, r3
 804db8e:	4770      	bx	lr
