
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0f0  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002684  0804e2a0  0804e2a0  0001e2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08050924  08050924  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08050924  08050924  00020924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805092c  0805092c  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805092c  0805092c  0002092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08050930  08050930  00020930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08050934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000010d4  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011b4  200011b4  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b539  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059de  00000000  00000000  0005b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b8  00000000  00000000  00061028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f88  00000000  00000000  000631e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c358  00000000  00000000  00065168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b528  00000000  00000000  000914c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f04dd  00000000  00000000  000bc9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001acec5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098c8  00000000  00000000  001acf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804e288 	.word	0x0804e288

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804e288 	.word	0x0804e288

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 fef6 	bl	8043388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8d6 	bl	804074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb70 	bl	8040c84 <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f93e 	bl	8040824 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f950 	bl	804084c <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 fb1a 	bl	8040be4 <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f97e 	bl	80408b0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f9bc 	bl	8040930 <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa3a 	bl	8040a30 <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa6e 	bl	8040a9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 fae6 	bl	8040b90 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00c f930 	bl	804c828 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80405c8:	f000 fab8 	bl	8040b3c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405cc:	2300      	movs	r3, #0
 80405ce:	461a      	mov	r2, r3
 80405d0:	2301      	movs	r3, #1
 80405d2:	4951      	ldr	r1, [pc, #324]	; (8040718 <main+0x184>)
 80405d4:	4851      	ldr	r0, [pc, #324]	; (804071c <main+0x188>)
 80405d6:	f00c fdf5 	bl	804d1c4 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80405da:	2300      	movs	r3, #0
 80405dc:	2201      	movs	r2, #1
 80405de:	4619      	mov	r1, r3
 80405e0:	484f      	ldr	r0, [pc, #316]	; (8040720 <main+0x18c>)
 80405e2:	f00c fd51 	bl	804d088 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405e6:	f002 f849 	bl	804267c <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405ee:	2001      	movs	r0, #1
 80405f0:	f002 f8c6 	bl	8042780 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405f4:	2001      	movs	r0, #1
 80405f6:	f002 f927 	bl	8042848 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405fe:	f002 f9d1 	bl	80429a4 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 8040602:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8040606:	2001      	movs	r0, #1
 8040608:	f002 f96c 	bl	80428e4 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 804060c:	2100      	movs	r1, #0
 804060e:	2001      	movs	r0, #1
 8040610:	f002 f92a 	bl	8042868 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040614:	4943      	ldr	r1, [pc, #268]	; (8040724 <main+0x190>)
 8040616:	2000      	movs	r0, #0
 8040618:	f002 f8b2 	bl	8042780 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 804061c:	2000      	movs	r0, #0
 804061e:	f002 f913 	bl	8042848 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 8040622:	f002 fae9 	bl	8042bf8 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040626:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804062a:	f002 f9bb 	bl	80429a4 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804062e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040632:	f002 f983 	bl	804293c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040636:	483c      	ldr	r0, [pc, #240]	; (8040728 <main+0x194>)
 8040638:	f002 f968 	bl	804290c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 804063c:	483b      	ldr	r0, [pc, #236]	; (804072c <main+0x198>)
 804063e:	f002 f997 	bl	8042970 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 8040642:	2301      	movs	r3, #1
 8040644:	4a35      	ldr	r2, [pc, #212]	; (804071c <main+0x188>)
 8040646:	2100      	movs	r1, #0
 8040648:	2000      	movs	r0, #0
 804064a:	f002 fa17 	bl	8042a7c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804064e:	f04f 30ff 	mov.w	r0, #4294967295
 8040652:	f002 f95b 	bl	804290c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040656:	f002 f887 	bl	8042768 <BSP_LCD_GetYSize>
 804065a:	4603      	mov	r3, r0
 804065c:	085b      	lsrs	r3, r3, #1
 804065e:	b29b      	uxth	r3, r3
 8040660:	3b1b      	subs	r3, #27
 8040662:	b299      	uxth	r1, r3
 8040664:	2301      	movs	r3, #1
 8040666:	4a32      	ldr	r2, [pc, #200]	; (8040730 <main+0x19c>)
 8040668:	2000      	movs	r0, #0
 804066a:	f002 fa07 	bl	8042a7c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804066e:	f002 f87b 	bl	8042768 <BSP_LCD_GetYSize>
 8040672:	4603      	mov	r3, r0
 8040674:	085b      	lsrs	r3, r3, #1
 8040676:	b29b      	uxth	r3, r3
 8040678:	3b0c      	subs	r3, #12
 804067a:	b299      	uxth	r1, r3
 804067c:	2301      	movs	r3, #1
 804067e:	4a2d      	ldr	r2, [pc, #180]	; (8040734 <main+0x1a0>)
 8040680:	2000      	movs	r0, #0
 8040682:	f002 f9fb 	bl	8042a7c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040686:	f002 f86f 	bl	8042768 <BSP_LCD_GetYSize>
 804068a:	4603      	mov	r3, r0
 804068c:	085b      	lsrs	r3, r3, #1
 804068e:	b29b      	uxth	r3, r3
 8040690:	3303      	adds	r3, #3
 8040692:	b299      	uxth	r1, r3
 8040694:	2301      	movs	r3, #1
 8040696:	4a28      	ldr	r2, [pc, #160]	; (8040738 <main+0x1a4>)
 8040698:	2000      	movs	r0, #0
 804069a:	f002 f9ef 	bl	8042a7c <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804069e:	f00c f8e9 	bl	804c874 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406a2:	2201      	movs	r2, #1
 80406a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406a8:	4824      	ldr	r0, [pc, #144]	; (804073c <main+0x1a8>)
 80406aa:	f003 ffe3 	bl	8044674 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406b2:	f002 feab 	bl	804340c <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406b6:	2200      	movs	r2, #0
 80406b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406bc:	481f      	ldr	r0, [pc, #124]	; (804073c <main+0x1a8>)
 80406be:	f003 ffd9 	bl	8044674 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406c6:	f002 fea1 	bl	804340c <HAL_Delay>
    if (ota_update_request){
 80406ca:	4b1d      	ldr	r3, [pc, #116]	; (8040740 <main+0x1ac>)
 80406cc:	781b      	ldrb	r3, [r3, #0]
 80406ce:	2b00      	cmp	r3, #0
 80406d0:	d0e5      	beq.n	804069e <main+0x10a>
    	printf("OTA Update Requested...\r\n");
 80406d2:	481c      	ldr	r0, [pc, #112]	; (8040744 <main+0x1b0>)
 80406d4:	f00c fd5e 	bl	804d194 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406d8:	2201      	movs	r2, #1
 80406da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406de:	4817      	ldr	r0, [pc, #92]	; (804073c <main+0x1a8>)
 80406e0:	f003 ffc8 	bl	8044674 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80406e4:	2201      	movs	r2, #1
 80406e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80406ea:	4814      	ldr	r0, [pc, #80]	; (804073c <main+0x1a8>)
 80406ec:	f003 ffc2 	bl	8044674 <HAL_GPIO_WritePin>
    	go_to_ota_app(&huart5);
 80406f0:	4815      	ldr	r0, [pc, #84]	; (8040748 <main+0x1b4>)
 80406f2:	f000 fc15 	bl	8040f20 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406f6:	2200      	movs	r2, #0
 80406f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406fc:	480f      	ldr	r0, [pc, #60]	; (804073c <main+0x1a8>)
 80406fe:	f003 ffb9 	bl	8044674 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8040702:	2200      	movs	r2, #0
 8040704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040708:	480c      	ldr	r0, [pc, #48]	; (804073c <main+0x1a8>)
 804070a:	f003 ffb3 	bl	8044674 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 804070e:	4b0c      	ldr	r3, [pc, #48]	; (8040740 <main+0x1ac>)
 8040710:	2200      	movs	r2, #0
 8040712:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8040714:	e7c3      	b.n	804069e <main+0x10a>
 8040716:	bf00      	nop
 8040718:	0804e2a0 	.word	0x0804e2a0
 804071c:	2000039c 	.word	0x2000039c
 8040720:	0804e2c0 	.word	0x0804e2c0
 8040724:	d0130000 	.word	0xd0130000
 8040728:	ffff0000 	.word	0xffff0000
 804072c:	20000048 	.word	0x20000048
 8040730:	0804e2e0 	.word	0x0804e2e0
 8040734:	0804e2f0 	.word	0x0804e2f0
 8040738:	0804e2f8 	.word	0x0804e2f8
 804073c:	40021800 	.word	0x40021800
 8040740:	20000400 	.word	0x20000400
 8040744:	0804e300 	.word	0x0804e300
 8040748:	200002e0 	.word	0x200002e0

0804074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804074c:	b580      	push	{r7, lr}
 804074e:	b094      	sub	sp, #80	; 0x50
 8040750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040752:	f107 0320 	add.w	r3, r7, #32
 8040756:	2230      	movs	r2, #48	; 0x30
 8040758:	2100      	movs	r1, #0
 804075a:	4618      	mov	r0, r3
 804075c:	f00c fbac 	bl	804ceb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040760:	f107 030c 	add.w	r3, r7, #12
 8040764:	2200      	movs	r2, #0
 8040766:	601a      	str	r2, [r3, #0]
 8040768:	605a      	str	r2, [r3, #4]
 804076a:	609a      	str	r2, [r3, #8]
 804076c:	60da      	str	r2, [r3, #12]
 804076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040770:	2300      	movs	r3, #0
 8040772:	60bb      	str	r3, [r7, #8]
 8040774:	4b29      	ldr	r3, [pc, #164]	; (804081c <SystemClock_Config+0xd0>)
 8040776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040778:	4a28      	ldr	r2, [pc, #160]	; (804081c <SystemClock_Config+0xd0>)
 804077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804077e:	6413      	str	r3, [r2, #64]	; 0x40
 8040780:	4b26      	ldr	r3, [pc, #152]	; (804081c <SystemClock_Config+0xd0>)
 8040782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040788:	60bb      	str	r3, [r7, #8]
 804078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 804078c:	2300      	movs	r3, #0
 804078e:	607b      	str	r3, [r7, #4]
 8040790:	4b23      	ldr	r3, [pc, #140]	; (8040820 <SystemClock_Config+0xd4>)
 8040792:	681b      	ldr	r3, [r3, #0]
 8040794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040798:	4a21      	ldr	r2, [pc, #132]	; (8040820 <SystemClock_Config+0xd4>)
 804079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804079e:	6013      	str	r3, [r2, #0]
 80407a0:	4b1f      	ldr	r3, [pc, #124]	; (8040820 <SystemClock_Config+0xd4>)
 80407a2:	681b      	ldr	r3, [r3, #0]
 80407a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80407a8:	607b      	str	r3, [r7, #4]
 80407aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80407ac:	2301      	movs	r3, #1
 80407ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80407b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80407b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407b6:	2302      	movs	r3, #2
 80407b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80407ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80407be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80407c0:	2310      	movs	r3, #16
 80407c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80407c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80407c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407ca:	2302      	movs	r3, #2
 80407cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80407ce:	2307      	movs	r3, #7
 80407d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407d2:	f107 0320 	add.w	r3, r7, #32
 80407d6:	4618      	mov	r0, r3
 80407d8:	f006 f958 	bl	8046a8c <HAL_RCC_OscConfig>
 80407dc:	4603      	mov	r3, r0
 80407de:	2b00      	cmp	r3, #0
 80407e0:	d001      	beq.n	80407e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407e2:	f000 fb97 	bl	8040f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407e6:	230f      	movs	r3, #15
 80407e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407ea:	2302      	movs	r3, #2
 80407ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407ee:	2300      	movs	r3, #0
 80407f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80407f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80407fe:	f107 030c 	add.w	r3, r7, #12
 8040802:	2102      	movs	r1, #2
 8040804:	4618      	mov	r0, r3
 8040806:	f006 fbb9 	bl	8046f7c <HAL_RCC_ClockConfig>
 804080a:	4603      	mov	r3, r0
 804080c:	2b00      	cmp	r3, #0
 804080e:	d001      	beq.n	8040814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8040810:	f000 fb80 	bl	8040f14 <Error_Handler>
  }
}
 8040814:	bf00      	nop
 8040816:	3750      	adds	r7, #80	; 0x50
 8040818:	46bd      	mov	sp, r7
 804081a:	bd80      	pop	{r7, pc}
 804081c:	40023800 	.word	0x40023800
 8040820:	40007000 	.word	0x40007000

08040824 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040824:	b580      	push	{r7, lr}
 8040826:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040828:	4b06      	ldr	r3, [pc, #24]	; (8040844 <MX_CRC_Init+0x20>)
 804082a:	4a07      	ldr	r2, [pc, #28]	; (8040848 <MX_CRC_Init+0x24>)
 804082c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 804082e:	4805      	ldr	r0, [pc, #20]	; (8040844 <MX_CRC_Init+0x20>)
 8040830:	f002 fef2 	bl	8043618 <HAL_CRC_Init>
 8040834:	4603      	mov	r3, r0
 8040836:	2b00      	cmp	r3, #0
 8040838:	d001      	beq.n	804083e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 804083a:	f000 fb6b 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 804083e:	bf00      	nop
 8040840:	bd80      	pop	{r7, pc}
 8040842:	bf00      	nop
 8040844:	200000fc 	.word	0x200000fc
 8040848:	40023000 	.word	0x40023000

0804084c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 804084c:	b580      	push	{r7, lr}
 804084e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8040850:	4b15      	ldr	r3, [pc, #84]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040852:	4a16      	ldr	r2, [pc, #88]	; (80408ac <MX_DMA2D_Init+0x60>)
 8040854:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8040856:	4b14      	ldr	r3, [pc, #80]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040858:	2200      	movs	r2, #0
 804085a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 804085c:	4b12      	ldr	r3, [pc, #72]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804085e:	2200      	movs	r2, #0
 8040860:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8040862:	4b11      	ldr	r3, [pc, #68]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040864:	2200      	movs	r2, #0
 8040866:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040868:	4b0f      	ldr	r3, [pc, #60]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804086a:	2200      	movs	r2, #0
 804086c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 804086e:	4b0e      	ldr	r3, [pc, #56]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040870:	2200      	movs	r2, #0
 8040872:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040874:	4b0c      	ldr	r3, [pc, #48]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040876:	2200      	movs	r2, #0
 8040878:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 804087a:	4b0b      	ldr	r3, [pc, #44]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 804087c:	2200      	movs	r2, #0
 804087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8040880:	4809      	ldr	r0, [pc, #36]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040882:	f003 f8a3 	bl	80439cc <HAL_DMA2D_Init>
 8040886:	4603      	mov	r3, r0
 8040888:	2b00      	cmp	r3, #0
 804088a:	d001      	beq.n	8040890 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 804088c:	f000 fb42 	bl	8040f14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8040890:	2101      	movs	r1, #1
 8040892:	4805      	ldr	r0, [pc, #20]	; (80408a8 <MX_DMA2D_Init+0x5c>)
 8040894:	f003 fb08 	bl	8043ea8 <HAL_DMA2D_ConfigLayer>
 8040898:	4603      	mov	r3, r0
 804089a:	2b00      	cmp	r3, #0
 804089c:	d001      	beq.n	80408a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 804089e:	f000 fb39 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80408a2:	bf00      	nop
 80408a4:	bd80      	pop	{r7, pc}
 80408a6:	bf00      	nop
 80408a8:	20000104 	.word	0x20000104
 80408ac:	4002b000 	.word	0x4002b000

080408b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80408b0:	b580      	push	{r7, lr}
 80408b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80408b4:	4b1b      	ldr	r3, [pc, #108]	; (8040924 <MX_I2C3_Init+0x74>)
 80408b6:	4a1c      	ldr	r2, [pc, #112]	; (8040928 <MX_I2C3_Init+0x78>)
 80408b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80408ba:	4b1a      	ldr	r3, [pc, #104]	; (8040924 <MX_I2C3_Init+0x74>)
 80408bc:	4a1b      	ldr	r2, [pc, #108]	; (804092c <MX_I2C3_Init+0x7c>)
 80408be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80408c0:	4b18      	ldr	r3, [pc, #96]	; (8040924 <MX_I2C3_Init+0x74>)
 80408c2:	2200      	movs	r2, #0
 80408c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80408c6:	4b17      	ldr	r3, [pc, #92]	; (8040924 <MX_I2C3_Init+0x74>)
 80408c8:	2200      	movs	r2, #0
 80408ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80408cc:	4b15      	ldr	r3, [pc, #84]	; (8040924 <MX_I2C3_Init+0x74>)
 80408ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80408d4:	4b13      	ldr	r3, [pc, #76]	; (8040924 <MX_I2C3_Init+0x74>)
 80408d6:	2200      	movs	r2, #0
 80408d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80408da:	4b12      	ldr	r3, [pc, #72]	; (8040924 <MX_I2C3_Init+0x74>)
 80408dc:	2200      	movs	r2, #0
 80408de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80408e0:	4b10      	ldr	r3, [pc, #64]	; (8040924 <MX_I2C3_Init+0x74>)
 80408e2:	2200      	movs	r2, #0
 80408e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80408e6:	4b0f      	ldr	r3, [pc, #60]	; (8040924 <MX_I2C3_Init+0x74>)
 80408e8:	2200      	movs	r2, #0
 80408ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80408ec:	480d      	ldr	r0, [pc, #52]	; (8040924 <MX_I2C3_Init+0x74>)
 80408ee:	f005 fafd 	bl	8045eec <HAL_I2C_Init>
 80408f2:	4603      	mov	r3, r0
 80408f4:	2b00      	cmp	r3, #0
 80408f6:	d001      	beq.n	80408fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80408f8:	f000 fb0c 	bl	8040f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80408fc:	2100      	movs	r1, #0
 80408fe:	4809      	ldr	r0, [pc, #36]	; (8040924 <MX_I2C3_Init+0x74>)
 8040900:	f005 fc38 	bl	8046174 <HAL_I2CEx_ConfigAnalogFilter>
 8040904:	4603      	mov	r3, r0
 8040906:	2b00      	cmp	r3, #0
 8040908:	d001      	beq.n	804090e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 804090a:	f000 fb03 	bl	8040f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 804090e:	2100      	movs	r1, #0
 8040910:	4804      	ldr	r0, [pc, #16]	; (8040924 <MX_I2C3_Init+0x74>)
 8040912:	f005 fc6b 	bl	80461ec <HAL_I2CEx_ConfigDigitalFilter>
 8040916:	4603      	mov	r3, r0
 8040918:	2b00      	cmp	r3, #0
 804091a:	d001      	beq.n	8040920 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 804091c:	f000 fafa 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8040920:	bf00      	nop
 8040922:	bd80      	pop	{r7, pc}
 8040924:	20000144 	.word	0x20000144
 8040928:	40005c00 	.word	0x40005c00
 804092c:	000186a0 	.word	0x000186a0

08040930 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8040930:	b580      	push	{r7, lr}
 8040932:	b08e      	sub	sp, #56	; 0x38
 8040934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8040936:	1d3b      	adds	r3, r7, #4
 8040938:	2234      	movs	r2, #52	; 0x34
 804093a:	2100      	movs	r1, #0
 804093c:	4618      	mov	r0, r3
 804093e:	f00c fabb 	bl	804ceb8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8040942:	4b39      	ldr	r3, [pc, #228]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040944:	4a39      	ldr	r2, [pc, #228]	; (8040a2c <MX_LTDC_Init+0xfc>)
 8040946:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8040948:	4b37      	ldr	r3, [pc, #220]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804094a:	2200      	movs	r2, #0
 804094c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804094e:	4b36      	ldr	r3, [pc, #216]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040950:	2200      	movs	r2, #0
 8040952:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040954:	4b34      	ldr	r3, [pc, #208]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040956:	2200      	movs	r2, #0
 8040958:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 804095a:	4b33      	ldr	r3, [pc, #204]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804095c:	2200      	movs	r2, #0
 804095e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8040960:	4b31      	ldr	r3, [pc, #196]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040962:	2209      	movs	r2, #9
 8040964:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8040966:	4b30      	ldr	r3, [pc, #192]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040968:	2201      	movs	r2, #1
 804096a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 804096c:	4b2e      	ldr	r3, [pc, #184]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804096e:	221d      	movs	r2, #29
 8040970:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8040972:	4b2d      	ldr	r3, [pc, #180]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040974:	2203      	movs	r2, #3
 8040976:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8040978:	4b2b      	ldr	r3, [pc, #172]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804097a:	f240 120d 	movw	r2, #269	; 0x10d
 804097e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8040980:	4b29      	ldr	r3, [pc, #164]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040982:	f240 1243 	movw	r2, #323	; 0x143
 8040986:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8040988:	4b27      	ldr	r3, [pc, #156]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804098a:	f240 1217 	movw	r2, #279	; 0x117
 804098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8040990:	4b25      	ldr	r3, [pc, #148]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040992:	f240 1247 	movw	r2, #327	; 0x147
 8040996:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8040998:	4b23      	ldr	r3, [pc, #140]	; (8040a28 <MX_LTDC_Init+0xf8>)
 804099a:	2200      	movs	r2, #0
 804099c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80409a0:	4b21      	ldr	r3, [pc, #132]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409a2:	2200      	movs	r2, #0
 80409a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80409a8:	4b1f      	ldr	r3, [pc, #124]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409aa:	2200      	movs	r2, #0
 80409ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80409b0:	481d      	ldr	r0, [pc, #116]	; (8040a28 <MX_LTDC_Init+0xf8>)
 80409b2:	f005 fc5b 	bl	804626c <HAL_LTDC_Init>
 80409b6:	4603      	mov	r3, r0
 80409b8:	2b00      	cmp	r3, #0
 80409ba:	d001      	beq.n	80409c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80409bc:	f000 faaa 	bl	8040f14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80409c0:	2300      	movs	r3, #0
 80409c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80409c4:	23f0      	movs	r3, #240	; 0xf0
 80409c6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80409c8:	2300      	movs	r3, #0
 80409ca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80409cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80409d2:	2302      	movs	r3, #2
 80409d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80409d6:	23ff      	movs	r3, #255	; 0xff
 80409d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80409da:	2300      	movs	r3, #0
 80409dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80409de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80409e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80409e4:	2307      	movs	r3, #7
 80409e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80409e8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80409ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80409ee:	23f0      	movs	r3, #240	; 0xf0
 80409f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80409f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80409f8:	2300      	movs	r3, #0
 80409fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80409fe:	2300      	movs	r3, #0
 8040a00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040a04:	2300      	movs	r3, #0
 8040a06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8040a0a:	1d3b      	adds	r3, r7, #4
 8040a0c:	2200      	movs	r2, #0
 8040a0e:	4619      	mov	r1, r3
 8040a10:	4805      	ldr	r0, [pc, #20]	; (8040a28 <MX_LTDC_Init+0xf8>)
 8040a12:	f005 fdbd 	bl	8046590 <HAL_LTDC_ConfigLayer>
 8040a16:	4603      	mov	r3, r0
 8040a18:	2b00      	cmp	r3, #0
 8040a1a:	d001      	beq.n	8040a20 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040a1c:	f000 fa7a 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8040a20:	bf00      	nop
 8040a22:	3738      	adds	r7, #56	; 0x38
 8040a24:	46bd      	mov	sp, r7
 8040a26:	bd80      	pop	{r7, pc}
 8040a28:	20000198 	.word	0x20000198
 8040a2c:	40016800 	.word	0x40016800

08040a30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8040a30:	b580      	push	{r7, lr}
 8040a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040a34:	4b17      	ldr	r3, [pc, #92]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a36:	4a18      	ldr	r2, [pc, #96]	; (8040a98 <MX_SPI5_Init+0x68>)
 8040a38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040a3a:	4b16      	ldr	r3, [pc, #88]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8040a40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8040a42:	4b14      	ldr	r3, [pc, #80]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a44:	2200      	movs	r2, #0
 8040a46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040a48:	4b12      	ldr	r3, [pc, #72]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a4a:	2200      	movs	r2, #0
 8040a4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040a4e:	4b11      	ldr	r3, [pc, #68]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a50:	2200      	movs	r2, #0
 8040a52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040a54:	4b0f      	ldr	r3, [pc, #60]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a56:	2200      	movs	r2, #0
 8040a58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040a5a:	4b0e      	ldr	r3, [pc, #56]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8040a60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040a62:	4b0c      	ldr	r3, [pc, #48]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a64:	2218      	movs	r2, #24
 8040a66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040a68:	4b0a      	ldr	r3, [pc, #40]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a6a:	2200      	movs	r2, #0
 8040a6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a6e:	4b09      	ldr	r3, [pc, #36]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a70:	2200      	movs	r2, #0
 8040a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a74:	4b07      	ldr	r3, [pc, #28]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a76:	2200      	movs	r2, #0
 8040a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a7a:	4b06      	ldr	r3, [pc, #24]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a7c:	220a      	movs	r2, #10
 8040a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a80:	4804      	ldr	r0, [pc, #16]	; (8040a94 <MX_SPI5_Init+0x64>)
 8040a82:	f006 ff1e 	bl	80478c2 <HAL_SPI_Init>
 8040a86:	4603      	mov	r3, r0
 8040a88:	2b00      	cmp	r3, #0
 8040a8a:	d001      	beq.n	8040a90 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a8c:	f000 fa42 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a90:	bf00      	nop
 8040a92:	bd80      	pop	{r7, pc}
 8040a94:	20000240 	.word	0x20000240
 8040a98:	40015000 	.word	0x40015000

08040a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	b086      	sub	sp, #24
 8040aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040aa2:	f107 0308 	add.w	r3, r7, #8
 8040aa6:	2200      	movs	r2, #0
 8040aa8:	601a      	str	r2, [r3, #0]
 8040aaa:	605a      	str	r2, [r3, #4]
 8040aac:	609a      	str	r2, [r3, #8]
 8040aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040ab0:	463b      	mov	r3, r7
 8040ab2:	2200      	movs	r2, #0
 8040ab4:	601a      	str	r2, [r3, #0]
 8040ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040ab8:	4b1e      	ldr	r3, [pc, #120]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040aba:	4a1f      	ldr	r2, [pc, #124]	; (8040b38 <MX_TIM1_Init+0x9c>)
 8040abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040abe:	4b1d      	ldr	r3, [pc, #116]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ac0:	2200      	movs	r2, #0
 8040ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040ac4:	4b1b      	ldr	r3, [pc, #108]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ac6:	2200      	movs	r2, #0
 8040ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040aca:	4b1a      	ldr	r3, [pc, #104]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040ad2:	4b18      	ldr	r3, [pc, #96]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ad4:	2200      	movs	r2, #0
 8040ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040ad8:	4b16      	ldr	r3, [pc, #88]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ada:	2200      	movs	r2, #0
 8040adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040ade:	4b15      	ldr	r3, [pc, #84]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ae0:	2200      	movs	r2, #0
 8040ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040ae4:	4813      	ldr	r0, [pc, #76]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040ae6:	f007 fccb 	bl	8048480 <HAL_TIM_Base_Init>
 8040aea:	4603      	mov	r3, r0
 8040aec:	2b00      	cmp	r3, #0
 8040aee:	d001      	beq.n	8040af4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040af0:	f000 fa10 	bl	8040f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040afa:	f107 0308 	add.w	r3, r7, #8
 8040afe:	4619      	mov	r1, r3
 8040b00:	480c      	ldr	r0, [pc, #48]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040b02:	f007 fe85 	bl	8048810 <HAL_TIM_ConfigClockSource>
 8040b06:	4603      	mov	r3, r0
 8040b08:	2b00      	cmp	r3, #0
 8040b0a:	d001      	beq.n	8040b10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040b0c:	f000 fa02 	bl	8040f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040b10:	2300      	movs	r3, #0
 8040b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040b14:	2300      	movs	r3, #0
 8040b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040b18:	463b      	mov	r3, r7
 8040b1a:	4619      	mov	r1, r3
 8040b1c:	4805      	ldr	r0, [pc, #20]	; (8040b34 <MX_TIM1_Init+0x98>)
 8040b1e:	f008 f8a1 	bl	8048c64 <HAL_TIMEx_MasterConfigSynchronization>
 8040b22:	4603      	mov	r3, r0
 8040b24:	2b00      	cmp	r3, #0
 8040b26:	d001      	beq.n	8040b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040b28:	f000 f9f4 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040b2c:	bf00      	nop
 8040b2e:	3718      	adds	r7, #24
 8040b30:	46bd      	mov	sp, r7
 8040b32:	bd80      	pop	{r7, pc}
 8040b34:	20000298 	.word	0x20000298
 8040b38:	40010000 	.word	0x40010000

08040b3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8040b3c:	b580      	push	{r7, lr}
 8040b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8040b40:	4b11      	ldr	r3, [pc, #68]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b42:	4a12      	ldr	r2, [pc, #72]	; (8040b8c <MX_UART5_Init+0x50>)
 8040b44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8040b46:	4b10      	ldr	r3, [pc, #64]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8040b4e:	4b0e      	ldr	r3, [pc, #56]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b50:	2200      	movs	r2, #0
 8040b52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8040b54:	4b0c      	ldr	r3, [pc, #48]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b56:	2200      	movs	r2, #0
 8040b58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8040b5a:	4b0b      	ldr	r3, [pc, #44]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b5c:	2200      	movs	r2, #0
 8040b5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8040b60:	4b09      	ldr	r3, [pc, #36]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b62:	220c      	movs	r2, #12
 8040b64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b66:	4b08      	ldr	r3, [pc, #32]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b68:	2200      	movs	r2, #0
 8040b6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b6c:	4b06      	ldr	r3, [pc, #24]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b6e:	2200      	movs	r2, #0
 8040b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8040b72:	4805      	ldr	r0, [pc, #20]	; (8040b88 <MX_UART5_Init+0x4c>)
 8040b74:	f008 f906 	bl	8048d84 <HAL_UART_Init>
 8040b78:	4603      	mov	r3, r0
 8040b7a:	2b00      	cmp	r3, #0
 8040b7c:	d001      	beq.n	8040b82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8040b7e:	f000 f9c9 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8040b82:	bf00      	nop
 8040b84:	bd80      	pop	{r7, pc}
 8040b86:	bf00      	nop
 8040b88:	200002e0 	.word	0x200002e0
 8040b8c:	40005000 	.word	0x40005000

08040b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b90:	b580      	push	{r7, lr}
 8040b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b94:	4b11      	ldr	r3, [pc, #68]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040b96:	4a12      	ldr	r2, [pc, #72]	; (8040be0 <MX_USART1_UART_Init+0x50>)
 8040b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b9a:	4b10      	ldr	r3, [pc, #64]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040ba2:	4b0e      	ldr	r3, [pc, #56]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040ba4:	2200      	movs	r2, #0
 8040ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040ba8:	4b0c      	ldr	r3, [pc, #48]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040baa:	2200      	movs	r2, #0
 8040bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040bae:	4b0b      	ldr	r3, [pc, #44]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bb0:	2200      	movs	r2, #0
 8040bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040bb4:	4b09      	ldr	r3, [pc, #36]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bb6:	220c      	movs	r2, #12
 8040bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040bba:	4b08      	ldr	r3, [pc, #32]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bbc:	2200      	movs	r2, #0
 8040bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040bc0:	4b06      	ldr	r3, [pc, #24]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bc2:	2200      	movs	r2, #0
 8040bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040bc6:	4805      	ldr	r0, [pc, #20]	; (8040bdc <MX_USART1_UART_Init+0x4c>)
 8040bc8:	f008 f8dc 	bl	8048d84 <HAL_UART_Init>
 8040bcc:	4603      	mov	r3, r0
 8040bce:	2b00      	cmp	r3, #0
 8040bd0:	d001      	beq.n	8040bd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040bd2:	f000 f99f 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040bd6:	bf00      	nop
 8040bd8:	bd80      	pop	{r7, pc}
 8040bda:	bf00      	nop
 8040bdc:	20000324 	.word	0x20000324
 8040be0:	40011000 	.word	0x40011000

08040be4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040be4:	b580      	push	{r7, lr}
 8040be6:	b088      	sub	sp, #32
 8040be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040bea:	1d3b      	adds	r3, r7, #4
 8040bec:	2200      	movs	r2, #0
 8040bee:	601a      	str	r2, [r3, #0]
 8040bf0:	605a      	str	r2, [r3, #4]
 8040bf2:	609a      	str	r2, [r3, #8]
 8040bf4:	60da      	str	r2, [r3, #12]
 8040bf6:	611a      	str	r2, [r3, #16]
 8040bf8:	615a      	str	r2, [r3, #20]
 8040bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040bfc:	4b1f      	ldr	r3, [pc, #124]	; (8040c7c <MX_FMC_Init+0x98>)
 8040bfe:	4a20      	ldr	r2, [pc, #128]	; (8040c80 <MX_FMC_Init+0x9c>)
 8040c00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040c02:	4b1e      	ldr	r3, [pc, #120]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c04:	2201      	movs	r2, #1
 8040c06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040c08:	4b1c      	ldr	r3, [pc, #112]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c0a:	2200      	movs	r2, #0
 8040c0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040c0e:	4b1b      	ldr	r3, [pc, #108]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c10:	2204      	movs	r2, #4
 8040c12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040c14:	4b19      	ldr	r3, [pc, #100]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c16:	2210      	movs	r2, #16
 8040c18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040c1a:	4b18      	ldr	r3, [pc, #96]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c1c:	2240      	movs	r2, #64	; 0x40
 8040c1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040c20:	4b16      	ldr	r3, [pc, #88]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040c26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040c28:	4b14      	ldr	r3, [pc, #80]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c2a:	2200      	movs	r2, #0
 8040c2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040c2e:	4b13      	ldr	r3, [pc, #76]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040c34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040c36:	4b11      	ldr	r3, [pc, #68]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c38:	2200      	movs	r2, #0
 8040c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040c3c:	4b0f      	ldr	r3, [pc, #60]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040c42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040c44:	2302      	movs	r3, #2
 8040c46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040c48:	2307      	movs	r3, #7
 8040c4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040c4c:	2304      	movs	r3, #4
 8040c4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040c50:	2307      	movs	r3, #7
 8040c52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040c54:	2303      	movs	r3, #3
 8040c56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040c58:	2302      	movs	r3, #2
 8040c5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040c5c:	2302      	movs	r3, #2
 8040c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040c60:	1d3b      	adds	r3, r7, #4
 8040c62:	4619      	mov	r1, r3
 8040c64:	4805      	ldr	r0, [pc, #20]	; (8040c7c <MX_FMC_Init+0x98>)
 8040c66:	f006 fd9b 	bl	80477a0 <HAL_SDRAM_Init>
 8040c6a:	4603      	mov	r3, r0
 8040c6c:	2b00      	cmp	r3, #0
 8040c6e:	d001      	beq.n	8040c74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040c70:	f000 f950 	bl	8040f14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040c74:	bf00      	nop
 8040c76:	3720      	adds	r7, #32
 8040c78:	46bd      	mov	sp, r7
 8040c7a:	bd80      	pop	{r7, pc}
 8040c7c:	20000368 	.word	0x20000368
 8040c80:	a0000140 	.word	0xa0000140

08040c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040c84:	b580      	push	{r7, lr}
 8040c86:	b08e      	sub	sp, #56	; 0x38
 8040c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c8e:	2200      	movs	r2, #0
 8040c90:	601a      	str	r2, [r3, #0]
 8040c92:	605a      	str	r2, [r3, #4]
 8040c94:	609a      	str	r2, [r3, #8]
 8040c96:	60da      	str	r2, [r3, #12]
 8040c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c9a:	2300      	movs	r3, #0
 8040c9c:	623b      	str	r3, [r7, #32]
 8040c9e:	4b85      	ldr	r3, [pc, #532]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ca2:	4a84      	ldr	r2, [pc, #528]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ca4:	f043 0304 	orr.w	r3, r3, #4
 8040ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8040caa:	4b82      	ldr	r3, [pc, #520]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cae:	f003 0304 	and.w	r3, r3, #4
 8040cb2:	623b      	str	r3, [r7, #32]
 8040cb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040cb6:	2300      	movs	r3, #0
 8040cb8:	61fb      	str	r3, [r7, #28]
 8040cba:	4b7e      	ldr	r3, [pc, #504]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cbe:	4a7d      	ldr	r2, [pc, #500]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cc0:	f043 0320 	orr.w	r3, r3, #32
 8040cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8040cc6:	4b7b      	ldr	r3, [pc, #492]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cca:	f003 0320 	and.w	r3, r3, #32
 8040cce:	61fb      	str	r3, [r7, #28]
 8040cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040cd2:	2300      	movs	r3, #0
 8040cd4:	61bb      	str	r3, [r7, #24]
 8040cd6:	4b77      	ldr	r3, [pc, #476]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cda:	4a76      	ldr	r2, [pc, #472]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8040ce2:	4b74      	ldr	r3, [pc, #464]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040cea:	61bb      	str	r3, [r7, #24]
 8040cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040cee:	2300      	movs	r3, #0
 8040cf0:	617b      	str	r3, [r7, #20]
 8040cf2:	4b70      	ldr	r3, [pc, #448]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf6:	4a6f      	ldr	r2, [pc, #444]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040cf8:	f043 0301 	orr.w	r3, r3, #1
 8040cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfe:	4b6d      	ldr	r3, [pc, #436]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d02:	f003 0301 	and.w	r3, r3, #1
 8040d06:	617b      	str	r3, [r7, #20]
 8040d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040d0a:	2300      	movs	r3, #0
 8040d0c:	613b      	str	r3, [r7, #16]
 8040d0e:	4b69      	ldr	r3, [pc, #420]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d12:	4a68      	ldr	r2, [pc, #416]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d14:	f043 0302 	orr.w	r3, r3, #2
 8040d18:	6313      	str	r3, [r2, #48]	; 0x30
 8040d1a:	4b66      	ldr	r3, [pc, #408]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d1e:	f003 0302 	and.w	r3, r3, #2
 8040d22:	613b      	str	r3, [r7, #16]
 8040d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040d26:	2300      	movs	r3, #0
 8040d28:	60fb      	str	r3, [r7, #12]
 8040d2a:	4b62      	ldr	r3, [pc, #392]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d2e:	4a61      	ldr	r2, [pc, #388]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040d34:	6313      	str	r3, [r2, #48]	; 0x30
 8040d36:	4b5f      	ldr	r3, [pc, #380]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040d3e:	60fb      	str	r3, [r7, #12]
 8040d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040d42:	2300      	movs	r3, #0
 8040d44:	60bb      	str	r3, [r7, #8]
 8040d46:	4b5b      	ldr	r3, [pc, #364]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d4a:	4a5a      	ldr	r2, [pc, #360]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d4c:	f043 0310 	orr.w	r3, r3, #16
 8040d50:	6313      	str	r3, [r2, #48]	; 0x30
 8040d52:	4b58      	ldr	r3, [pc, #352]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d56:	f003 0310 	and.w	r3, r3, #16
 8040d5a:	60bb      	str	r3, [r7, #8]
 8040d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040d5e:	2300      	movs	r3, #0
 8040d60:	607b      	str	r3, [r7, #4]
 8040d62:	4b54      	ldr	r3, [pc, #336]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d66:	4a53      	ldr	r2, [pc, #332]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d68:	f043 0308 	orr.w	r3, r3, #8
 8040d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8040d6e:	4b51      	ldr	r3, [pc, #324]	; (8040eb4 <MX_GPIO_Init+0x230>)
 8040d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d72:	f003 0308 	and.w	r3, r3, #8
 8040d76:	607b      	str	r3, [r7, #4]
 8040d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040d7a:	2200      	movs	r2, #0
 8040d7c:	2116      	movs	r1, #22
 8040d7e:	484e      	ldr	r0, [pc, #312]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040d80:	f003 fc78 	bl	8044674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040d84:	2200      	movs	r2, #0
 8040d86:	2180      	movs	r1, #128	; 0x80
 8040d88:	484c      	ldr	r0, [pc, #304]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040d8a:	f003 fc73 	bl	8044674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040d8e:	2200      	movs	r2, #0
 8040d90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040d94:	484a      	ldr	r0, [pc, #296]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040d96:	f003 fc6d 	bl	8044674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040d9a:	2200      	movs	r2, #0
 8040d9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040da0:	4848      	ldr	r0, [pc, #288]	; (8040ec4 <MX_GPIO_Init+0x240>)
 8040da2:	f003 fc67 	bl	8044674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040da6:	2316      	movs	r3, #22
 8040da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040daa:	2301      	movs	r3, #1
 8040dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dae:	2300      	movs	r3, #0
 8040db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040db2:	2300      	movs	r3, #0
 8040db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dba:	4619      	mov	r1, r3
 8040dbc:	483e      	ldr	r0, [pc, #248]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040dbe:	f003 f9a1 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040dc2:	2301      	movs	r3, #1
 8040dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040dc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8040dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dcc:	2300      	movs	r3, #0
 8040dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dd4:	4619      	mov	r1, r3
 8040dd6:	4839      	ldr	r0, [pc, #228]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040dd8:	f003 f994 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040ddc:	f248 0306 	movw	r3, #32774	; 0x8006
 8040de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040de2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040de8:	2300      	movs	r3, #0
 8040dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040df0:	4619      	mov	r1, r3
 8040df2:	4832      	ldr	r0, [pc, #200]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040df4:	f003 f986 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040df8:	2380      	movs	r3, #128	; 0x80
 8040dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040dfc:	2301      	movs	r3, #1
 8040dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e00:	2300      	movs	r3, #0
 8040e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e04:	2300      	movs	r3, #0
 8040e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e0c:	4619      	mov	r1, r3
 8040e0e:	482b      	ldr	r0, [pc, #172]	; (8040ebc <MX_GPIO_Init+0x238>)
 8040e10:	f003 f978 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040e14:	2320      	movs	r3, #32
 8040e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040e18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e1e:	2300      	movs	r3, #0
 8040e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e26:	4619      	mov	r1, r3
 8040e28:	4823      	ldr	r0, [pc, #140]	; (8040eb8 <MX_GPIO_Init+0x234>)
 8040e2a:	f003 f96b 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040e2e:	2304      	movs	r3, #4
 8040e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040e32:	2300      	movs	r3, #0
 8040e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e36:	2300      	movs	r3, #0
 8040e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e3e:	4619      	mov	r1, r3
 8040e40:	4821      	ldr	r0, [pc, #132]	; (8040ec8 <MX_GPIO_Init+0x244>)
 8040e42:	f003 f95f 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040e4c:	2300      	movs	r3, #0
 8040e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e50:	2300      	movs	r3, #0
 8040e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e58:	4619      	mov	r1, r3
 8040e5a:	4819      	ldr	r0, [pc, #100]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040e5c:	f003 f952 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040e60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e66:	2301      	movs	r3, #1
 8040e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e6a:	2300      	movs	r3, #0
 8040e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e6e:	2300      	movs	r3, #0
 8040e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e76:	4619      	mov	r1, r3
 8040e78:	4811      	ldr	r0, [pc, #68]	; (8040ec0 <MX_GPIO_Init+0x23c>)
 8040e7a:	f003 f943 	bl	8044104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040e7e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e84:	2301      	movs	r3, #1
 8040e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e88:	2300      	movs	r3, #0
 8040e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e8c:	2300      	movs	r3, #0
 8040e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e94:	4619      	mov	r1, r3
 8040e96:	480b      	ldr	r0, [pc, #44]	; (8040ec4 <MX_GPIO_Init+0x240>)
 8040e98:	f003 f934 	bl	8044104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8040e9c:	2200      	movs	r2, #0
 8040e9e:	2100      	movs	r1, #0
 8040ea0:	2006      	movs	r0, #6
 8040ea2:	f002 fb8f 	bl	80435c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8040ea6:	2006      	movs	r0, #6
 8040ea8:	f002 fba8 	bl	80435fc <HAL_NVIC_EnableIRQ>

}
 8040eac:	bf00      	nop
 8040eae:	3738      	adds	r7, #56	; 0x38
 8040eb0:	46bd      	mov	sp, r7
 8040eb2:	bd80      	pop	{r7, pc}
 8040eb4:	40023800 	.word	0x40023800
 8040eb8:	40020800 	.word	0x40020800
 8040ebc:	40020000 	.word	0x40020000
 8040ec0:	40020c00 	.word	0x40020c00
 8040ec4:	40021800 	.word	0x40021800
 8040ec8:	40020400 	.word	0x40020400

08040ecc <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8040ecc:	b580      	push	{r7, lr}
 8040ece:	b082      	sub	sp, #8
 8040ed0:	af00      	add	r7, sp, #0
 8040ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040ed4:	1d39      	adds	r1, r7, #4
 8040ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8040eda:	2201      	movs	r2, #1
 8040edc:	4803      	ldr	r0, [pc, #12]	; (8040eec <__io_putchar+0x20>)
 8040ede:	f007 ff9e 	bl	8048e1e <HAL_UART_Transmit>
	return ch;
 8040ee2:	687b      	ldr	r3, [r7, #4]
}
 8040ee4:	4618      	mov	r0, r3
 8040ee6:	3708      	adds	r7, #8
 8040ee8:	46bd      	mov	sp, r7
 8040eea:	bd80      	pop	{r7, pc}
 8040eec:	20000324 	.word	0x20000324

08040ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040ef0:	b580      	push	{r7, lr}
 8040ef2:	b082      	sub	sp, #8
 8040ef4:	af00      	add	r7, sp, #0
 8040ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040ef8:	687b      	ldr	r3, [r7, #4]
 8040efa:	681b      	ldr	r3, [r3, #0]
 8040efc:	4a04      	ldr	r2, [pc, #16]	; (8040f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040efe:	4293      	cmp	r3, r2
 8040f00:	d101      	bne.n	8040f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040f02:	f002 fa63 	bl	80433cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040f06:	bf00      	nop
 8040f08:	3708      	adds	r7, #8
 8040f0a:	46bd      	mov	sp, r7
 8040f0c:	bd80      	pop	{r7, pc}
 8040f0e:	bf00      	nop
 8040f10:	40001000 	.word	0x40001000

08040f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040f14:	b480      	push	{r7}
 8040f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040f18:	b672      	cpsid	i
}
 8040f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040f1c:	e7fe      	b.n	8040f1c <Error_Handler+0x8>
	...

08040f20 <go_to_ota_app>:
 * @brief run ota application
 * @param hurat uart handler receive ota
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8040f20:	b580      	push	{r7, lr}
 8040f22:	b082      	sub	sp, #8
 8040f24:	af00      	add	r7, sp, #0
 8040f26:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8040f28:	480e      	ldr	r0, [pc, #56]	; (8040f64 <go_to_ota_app+0x44>)
 8040f2a:	f00c f933 	bl	804d194 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8040f2e:	6878      	ldr	r0, [r7, #4]
 8040f30:	f000 f820 	bl	8040f74 <ota_download_and_flash>
 8040f34:	4603      	mov	r3, r0
 8040f36:	2b00      	cmp	r3, #0
 8040f38:	d009      	beq.n	8040f4e <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8040f3a:	480b      	ldr	r0, [pc, #44]	; (8040f68 <go_to_ota_app+0x48>)
 8040f3c:	f00c f92a 	bl	804d194 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8040f40:	2200      	movs	r2, #0
 8040f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040f46:	4809      	ldr	r0, [pc, #36]	; (8040f6c <go_to_ota_app+0x4c>)
 8040f48:	f003 fb94 	bl	8044674 <HAL_GPIO_WritePin>
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_Delay(10000);
//      HAL_NVIC_SystemReset();
    }
}
 8040f4c:	e006      	b.n	8040f5c <go_to_ota_app+0x3c>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8040f4e:	4808      	ldr	r0, [pc, #32]	; (8040f70 <go_to_ota_app+0x50>)
 8040f50:	f00c f920 	bl	804d194 <puts>
      HAL_Delay(10000);
 8040f54:	f242 7010 	movw	r0, #10000	; 0x2710
 8040f58:	f002 fa58 	bl	804340c <HAL_Delay>
}
 8040f5c:	bf00      	nop
 8040f5e:	3708      	adds	r7, #8
 8040f60:	46bd      	mov	sp, r7
 8040f62:	bd80      	pop	{r7, pc}
 8040f64:	0804e31c 	.word	0x0804e31c
 8040f68:	0804e33c 	.word	0x0804e33c
 8040f6c:	40021800 	.word	0x40021800
 8040f70:	0804e35c 	.word	0x0804e35c

08040f74 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8040f74:	b580      	push	{r7, lr}
 8040f76:	b084      	sub	sp, #16
 8040f78:	af00      	add	r7, sp, #0
 8040f7a:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8040f7c:	2300      	movs	r3, #0
 8040f7e:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8040f80:	4820      	ldr	r0, [pc, #128]	; (8041004 <ota_download_and_flash+0x90>)
 8040f82:	f00c f907 	bl	804d194 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8040f86:	4b20      	ldr	r3, [pc, #128]	; (8041008 <ota_download_and_flash+0x94>)
 8040f88:	2200      	movs	r2, #0
 8040f8a:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8040f8c:	4b1f      	ldr	r3, [pc, #124]	; (804100c <ota_download_and_flash+0x98>)
 8040f8e:	2200      	movs	r2, #0
 8040f90:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8040f92:	4b1f      	ldr	r3, [pc, #124]	; (8041010 <ota_download_and_flash+0x9c>)
 8040f94:	2200      	movs	r2, #0
 8040f96:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8040f98:	4b1e      	ldr	r3, [pc, #120]	; (8041014 <ota_download_and_flash+0xa0>)
 8040f9a:	2201      	movs	r2, #1
 8040f9c:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8040f9e:	f240 4209 	movw	r2, #1033	; 0x409
 8040fa2:	2100      	movs	r1, #0
 8040fa4:	481c      	ldr	r0, [pc, #112]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fa6:	f00b ff87 	bl	804ceb8 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8040faa:	f240 4209 	movw	r2, #1033	; 0x409
 8040fae:	491a      	ldr	r1, [pc, #104]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fb0:	6878      	ldr	r0, [r7, #4]
 8040fb2:	f000 f835 	bl	8041020 <ota_receive_chunk>
 8040fb6:	4603      	mov	r3, r0
 8040fb8:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8040fba:	89bb      	ldrh	r3, [r7, #12]
 8040fbc:	2b00      	cmp	r3, #0
 8040fbe:	d007      	beq.n	8040fd0 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8040fc0:	89bb      	ldrh	r3, [r7, #12]
 8040fc2:	4619      	mov	r1, r3
 8040fc4:	4814      	ldr	r0, [pc, #80]	; (8041018 <ota_download_and_flash+0xa4>)
 8040fc6:	f000 f90d 	bl	80411e4 <ota_process_data>
 8040fca:	4603      	mov	r3, r0
 8040fcc:	73fb      	strb	r3, [r7, #15]
 8040fce:	e001      	b.n	8040fd4 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8040fd0:	2301      	movs	r3, #1
 8040fd2:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8040fd4:	7bfb      	ldrb	r3, [r7, #15]
 8040fd6:	2b00      	cmp	r3, #0
 8040fd8:	d007      	beq.n	8040fea <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8040fda:	4810      	ldr	r0, [pc, #64]	; (804101c <ota_download_and_flash+0xa8>)
 8040fdc:	f00c f8da 	bl	804d194 <puts>
			ota_send_resp(huart, OTA_NACK);
 8040fe0:	2101      	movs	r1, #1
 8040fe2:	6878      	ldr	r0, [r7, #4]
 8040fe4:	f000 f9f8 	bl	80413d8 <ota_send_resp>
			break;
 8040fe8:	e007      	b.n	8040ffa <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8040fea:	2100      	movs	r1, #0
 8040fec:	6878      	ldr	r0, [r7, #4]
 8040fee:	f000 f9f3 	bl	80413d8 <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8040ff2:	4b08      	ldr	r3, [pc, #32]	; (8041014 <ota_download_and_flash+0xa0>)
 8040ff4:	781b      	ldrb	r3, [r3, #0]
 8040ff6:	2b00      	cmp	r3, #0
 8040ff8:	d1d1      	bne.n	8040f9e <ota_download_and_flash+0x2a>

	return ret;
 8040ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8040ffc:	4618      	mov	r0, r3
 8040ffe:	3710      	adds	r7, #16
 8041000:	46bd      	mov	sp, r7
 8041002:	bd80      	pop	{r7, pc}
 8041004:	0804e388 	.word	0x0804e388
 8041008:	20000404 	.word	0x20000404
 804100c:	2000040c 	.word	0x2000040c
 8041010:	20000408 	.word	0x20000408
 8041014:	20000401 	.word	0x20000401
 8041018:	20000410 	.word	0x20000410
 804101c:	0804e3a4 	.word	0x0804e3a4

08041020 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8041020:	b580      	push	{r7, lr}
 8041022:	b08a      	sub	sp, #40	; 0x28
 8041024:	af00      	add	r7, sp, #0
 8041026:	60f8      	str	r0, [r7, #12]
 8041028:	60b9      	str	r1, [r7, #8]
 804102a:	4613      	mov	r3, r2
 804102c:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 804102e:	2300      	movs	r3, #0
 8041030:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8041032:	2300      	movs	r3, #0
 8041034:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8041036:	2300      	movs	r3, #0
 8041038:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 804103a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804103c:	68ba      	ldr	r2, [r7, #8]
 804103e:	18d1      	adds	r1, r2, r3
 8041040:	f04f 33ff 	mov.w	r3, #4294967295
 8041044:	2201      	movs	r2, #1
 8041046:	68f8      	ldr	r0, [r7, #12]
 8041048:	f007 ff7b 	bl	8048f42 <HAL_UART_Receive>
 804104c:	4603      	mov	r3, r0
 804104e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8041050:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041054:	2b00      	cmp	r3, #0
 8041056:	f040 809c 	bne.w	8041192 <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 804105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804105c:	1c5a      	adds	r2, r3, #1
 804105e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041060:	461a      	mov	r2, r3
 8041062:	68bb      	ldr	r3, [r7, #8]
 8041064:	4413      	add	r3, r2
 8041066:	781b      	ldrb	r3, [r3, #0]
 8041068:	2baa      	cmp	r3, #170	; 0xaa
 804106a:	f040 8094 	bne.w	8041196 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 804106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041070:	1c5a      	adds	r2, r3, #1
 8041072:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041074:	461a      	mov	r2, r3
 8041076:	68bb      	ldr	r3, [r7, #8]
 8041078:	1899      	adds	r1, r3, r2
 804107a:	f04f 33ff 	mov.w	r3, #4294967295
 804107e:	2201      	movs	r2, #1
 8041080:	68f8      	ldr	r0, [r7, #12]
 8041082:	f007 ff5e 	bl	8048f42 <HAL_UART_Receive>
 8041086:	4603      	mov	r3, r0
 8041088:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 804108e:	2b00      	cmp	r3, #0
 8041090:	f040 8083 	bne.w	804119a <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8041094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041096:	68ba      	ldr	r2, [r7, #8]
 8041098:	18d1      	adds	r1, r2, r3
 804109a:	f04f 33ff 	mov.w	r3, #4294967295
 804109e:	2202      	movs	r2, #2
 80410a0:	68f8      	ldr	r0, [r7, #12]
 80410a2:	f007 ff4e 	bl	8048f42 <HAL_UART_Receive>
 80410a6:	4603      	mov	r3, r0
 80410a8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80410aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410ae:	2b00      	cmp	r3, #0
 80410b0:	d175      	bne.n	804119e <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 80410b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410b4:	68ba      	ldr	r2, [r7, #8]
 80410b6:	4413      	add	r3, r2
 80410b8:	881b      	ldrh	r3, [r3, #0]
 80410ba:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 80410bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410be:	3302      	adds	r3, #2
 80410c0:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 80410c2:	2300      	movs	r3, #0
 80410c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80410c6:	e014      	b.n	80410f2 <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 80410c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410ca:	1c5a      	adds	r2, r3, #1
 80410cc:	84ba      	strh	r2, [r7, #36]	; 0x24
 80410ce:	461a      	mov	r2, r3
 80410d0:	68bb      	ldr	r3, [r7, #8]
 80410d2:	1899      	adds	r1, r3, r2
 80410d4:	f04f 33ff 	mov.w	r3, #4294967295
 80410d8:	2201      	movs	r2, #1
 80410da:	68f8      	ldr	r0, [r7, #12]
 80410dc:	f007 ff31 	bl	8048f42 <HAL_UART_Receive>
 80410e0:	4603      	mov	r3, r0
 80410e2:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 80410e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410e8:	2b00      	cmp	r3, #0
 80410ea:	d107      	bne.n	80410fc <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 80410ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80410ee:	3301      	adds	r3, #1
 80410f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80410f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80410f4:	8afb      	ldrh	r3, [r7, #22]
 80410f6:	429a      	cmp	r2, r3
 80410f8:	d3e6      	bcc.n	80410c8 <ota_receive_chunk+0xa8>
 80410fa:	e000      	b.n	80410fe <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 80410fc:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 80410fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041102:	2b00      	cmp	r3, #0
 8041104:	d14d      	bne.n	80411a2 <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8041106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041108:	68ba      	ldr	r2, [r7, #8]
 804110a:	18d1      	adds	r1, r2, r3
 804110c:	f04f 33ff 	mov.w	r3, #4294967295
 8041110:	2204      	movs	r2, #4
 8041112:	68f8      	ldr	r0, [r7, #12]
 8041114:	f007 ff15 	bl	8048f42 <HAL_UART_Receive>
 8041118:	4603      	mov	r3, r0
 804111a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804111c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041120:	2b00      	cmp	r3, #0
 8041122:	d140      	bne.n	80411a6 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 8041124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041126:	68ba      	ldr	r2, [r7, #8]
 8041128:	4413      	add	r3, r2
 804112a:	681b      	ldr	r3, [r3, #0]
 804112c:	61bb      	str	r3, [r7, #24]
		index +=4u;
 804112e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041130:	3304      	adds	r3, #4
 8041132:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8041134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041136:	68ba      	ldr	r2, [r7, #8]
 8041138:	18d1      	adds	r1, r2, r3
 804113a:	f04f 33ff 	mov.w	r3, #4294967295
 804113e:	2201      	movs	r2, #1
 8041140:	68f8      	ldr	r0, [r7, #12]
 8041142:	f007 fefe 	bl	8048f42 <HAL_UART_Receive>
 8041146:	4603      	mov	r3, r0
 8041148:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 804114a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 804114e:	2b00      	cmp	r3, #0
 8041150:	d12b      	bne.n	80411aa <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 8041152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041154:	1c5a      	adds	r2, r3, #1
 8041156:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041158:	461a      	mov	r2, r3
 804115a:	68bb      	ldr	r3, [r7, #8]
 804115c:	4413      	add	r3, r2
 804115e:	781b      	ldrb	r3, [r3, #0]
 8041160:	2bbb      	cmp	r3, #187	; 0xbb
 8041162:	d002      	beq.n	804116a <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 8041164:	2301      	movs	r3, #1
 8041166:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8041168:	e020      	b.n	80411ac <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 804116a:	68bb      	ldr	r3, [r7, #8]
 804116c:	3304      	adds	r3, #4
 804116e:	8afa      	ldrh	r2, [r7, #22]
 8041170:	4611      	mov	r1, r2
 8041172:	4618      	mov	r0, r3
 8041174:	f000 f95c 	bl	8041430 <ota_calcCRC>
 8041178:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 804117a:	69fa      	ldr	r2, [r7, #28]
 804117c:	69bb      	ldr	r3, [r7, #24]
 804117e:	429a      	cmp	r2, r3
 8041180:	d014      	beq.n	80411ac <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8041182:	69ba      	ldr	r2, [r7, #24]
 8041184:	69f9      	ldr	r1, [r7, #28]
 8041186:	4815      	ldr	r0, [pc, #84]	; (80411dc <ota_receive_chunk+0x1bc>)
 8041188:	f00b ff7e 	bl	804d088 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 804118c:	2301      	movs	r3, #1
 804118e:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8041190:	e00c      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 8041192:	bf00      	nop
 8041194:	e00a      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 8041196:	bf00      	nop
 8041198:	e008      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 804119a:	bf00      	nop
 804119c:	e006      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 804119e:	bf00      	nop
 80411a0:	e004      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411a2:	bf00      	nop
 80411a4:	e002      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411a6:	bf00      	nop
 80411a8:	e000      	b.n	80411ac <ota_receive_chunk+0x18c>
			break;
 80411aa:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 80411ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80411b0:	2b00      	cmp	r3, #0
 80411b2:	d001      	beq.n	80411b8 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 80411b4:	2300      	movs	r3, #0
 80411b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 80411b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80411ba:	88fb      	ldrh	r3, [r7, #6]
 80411bc:	429a      	cmp	r2, r3
 80411be:	d907      	bls.n	80411d0 <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 80411c0:	88fb      	ldrh	r3, [r7, #6]
 80411c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80411c4:	4619      	mov	r1, r3
 80411c6:	4806      	ldr	r0, [pc, #24]	; (80411e0 <ota_receive_chunk+0x1c0>)
 80411c8:	f00b ff5e 	bl	804d088 <iprintf>
															  	  max_len, index );
		index = 0u;
 80411cc:	2300      	movs	r3, #0
 80411ce:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 80411d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 80411d2:	4618      	mov	r0, r3
 80411d4:	3728      	adds	r7, #40	; 0x28
 80411d6:	46bd      	mov	sp, r7
 80411d8:	bd80      	pop	{r7, pc}
 80411da:	bf00      	nop
 80411dc:	0804e3b4 	.word	0x0804e3b4
 80411e0:	0804e3f4 	.word	0x0804e3f4

080411e4 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 80411e4:	b580      	push	{r7, lr}
 80411e6:	b08a      	sub	sp, #40	; 0x28
 80411e8:	af00      	add	r7, sp, #0
 80411ea:	6078      	str	r0, [r7, #4]
 80411ec:	460b      	mov	r3, r1
 80411ee:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 80411f0:	2301      	movs	r3, #1
 80411f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf== NULL) || (len == 0u))
 80411f6:	687b      	ldr	r3, [r7, #4]
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	f000 80c1 	beq.w	8041380 <ota_process_data+0x19c>
 80411fe:	887b      	ldrh	r3, [r7, #2]
 8041200:	2b00      	cmp	r3, #0
 8041202:	f000 80bd 	beq.w	8041380 <ota_process_data+0x19c>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8041206:	687b      	ldr	r3, [r7, #4]
 8041208:	623b      	str	r3, [r7, #32]
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 804120a:	6a3b      	ldr	r3, [r7, #32]
 804120c:	785b      	ldrb	r3, [r3, #1]
 804120e:	2b00      	cmp	r3, #0
 8041210:	d104      	bne.n	804121c <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 8041212:	6a3b      	ldr	r3, [r7, #32]
 8041214:	791b      	ldrb	r3, [r3, #4]
 8041216:	2b02      	cmp	r3, #2
 8041218:	f000 80b4 	beq.w	8041384 <ota_process_data+0x1a0>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 804121c:	4b61      	ldr	r3, [pc, #388]	; (80413a4 <ota_process_data+0x1c0>)
 804121e:	781b      	ldrb	r3, [r3, #0]
 8041220:	2b04      	cmp	r3, #4
 8041222:	f200 80a9 	bhi.w	8041378 <ota_process_data+0x194>
 8041226:	a201      	add	r2, pc, #4	; (adr r2, 804122c <ota_process_data+0x48>)
 8041228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804122c:	08041241 	.word	0x08041241
 8041230:	0804124f 	.word	0x0804124f
 8041234:	0804127b 	.word	0x0804127b
 8041238:	080412b7 	.word	0x080412b7
 804123c:	08041323 	.word	0x08041323
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 8041240:	4859      	ldr	r0, [pc, #356]	; (80413a8 <ota_process_data+0x1c4>)
 8041242:	f00b ffa7 	bl	804d194 <puts>
				ret = OTA_EX_OK;
 8041246:	2300      	movs	r3, #0
 8041248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 804124c:	e0a3      	b.n	8041396 <ota_process_data+0x1b2>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 804124e:	687b      	ldr	r3, [r7, #4]
 8041250:	60bb      	str	r3, [r7, #8]
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8041252:	68bb      	ldr	r3, [r7, #8]
 8041254:	785b      	ldrb	r3, [r3, #1]
 8041256:	2b00      	cmp	r3, #0
 8041258:	f040 8096 	bne.w	8041388 <ota_process_data+0x1a4>
				{
					if( cmd->cmd == OTA_CMD_START)
 804125c:	68bb      	ldr	r3, [r7, #8]
 804125e:	791b      	ldrb	r3, [r3, #4]
 8041260:	2b00      	cmp	r3, #0
 8041262:	f040 8091 	bne.w	8041388 <ota_process_data+0x1a4>
					{
						printf("Received OTA Start command\r\n");
 8041266:	4851      	ldr	r0, [pc, #324]	; (80413ac <ota_process_data+0x1c8>)
 8041268:	f00b ff94 	bl	804d194 <puts>
						ota_state = OTA_STATE_HEADER;
 804126c:	4b4d      	ldr	r3, [pc, #308]	; (80413a4 <ota_process_data+0x1c0>)
 804126e:	2202      	movs	r2, #2
 8041270:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 8041272:	2300      	movs	r3, #0
 8041274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8041278:	e086      	b.n	8041388 <ota_process_data+0x1a4>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 804127a:	687b      	ldr	r3, [r7, #4]
 804127c:	60fb      	str	r3, [r7, #12]

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 804127e:	68fb      	ldr	r3, [r7, #12]
 8041280:	785b      	ldrb	r3, [r3, #1]
 8041282:	2b02      	cmp	r3, #2
 8041284:	f040 8082 	bne.w	804138c <ota_process_data+0x1a8>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8041288:	68fb      	ldr	r3, [r7, #12]
 804128a:	685b      	ldr	r3, [r3, #4]
 804128c:	4a48      	ldr	r2, [pc, #288]	; (80413b0 <ota_process_data+0x1cc>)
 804128e:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8041290:	68fb      	ldr	r3, [r7, #12]
 8041292:	689b      	ldr	r3, [r3, #8]
 8041294:	4a47      	ldr	r2, [pc, #284]	; (80413b4 <ota_process_data+0x1d0>)
 8041296:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8041298:	4b47      	ldr	r3, [pc, #284]	; (80413b8 <ota_process_data+0x1d4>)
 804129a:	681b      	ldr	r3, [r3, #0]
 804129c:	4a45      	ldr	r2, [pc, #276]	; (80413b4 <ota_process_data+0x1d0>)
 804129e:	6812      	ldr	r2, [r2, #0]
 80412a0:	4619      	mov	r1, r3
 80412a2:	4846      	ldr	r0, [pc, #280]	; (80413bc <ota_process_data+0x1d8>)
 80412a4:	f00b fef0 	bl	804d088 <iprintf>
													ota_fw_received_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 80412a8:	4b3e      	ldr	r3, [pc, #248]	; (80413a4 <ota_process_data+0x1c0>)
 80412aa:	2203      	movs	r2, #3
 80412ac:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 80412ae:	2300      	movs	r3, #0
 80412b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				}
			}
			break;
 80412b4:	e06a      	b.n	804138c <ota_process_data+0x1a8>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 80412b6:	687b      	ldr	r3, [r7, #4]
 80412b8:	617b      	str	r3, [r7, #20]
				uint16_t			data_len = data->data_len;
 80412ba:	697b      	ldr	r3, [r7, #20]
 80412bc:	789a      	ldrb	r2, [r3, #2]
 80412be:	78db      	ldrb	r3, [r3, #3]
 80412c0:	021b      	lsls	r3, r3, #8
 80412c2:	4313      	orrs	r3, r2
 80412c4:	827b      	strh	r3, [r7, #18]
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 80412c6:	2301      	movs	r3, #1
 80412c8:	747b      	strb	r3, [r7, #17]

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 80412ca:	697b      	ldr	r3, [r7, #20]
 80412cc:	785b      	ldrb	r3, [r3, #1]
 80412ce:	2b01      	cmp	r3, #1
 80412d0:	d15e      	bne.n	8041390 <ota_process_data+0x1ac>
					bool is_first_block = false;
 80412d2:	2300      	movs	r3, #0
 80412d4:	743b      	strb	r3, [r7, #16]

					if( ota_fw_received_size == 0){
 80412d6:	4b38      	ldr	r3, [pc, #224]	; (80413b8 <ota_process_data+0x1d4>)
 80412d8:	681b      	ldr	r3, [r3, #0]
 80412da:	2b00      	cmp	r3, #0
 80412dc:	d101      	bne.n	80412e2 <ota_process_data+0xfe>
						// This is the first block
						is_first_block = true;
 80412de:	2301      	movs	r3, #1
 80412e0:	743b      	strb	r3, [r7, #16]
					/* Write the chunk to the Flash */
					// TODO: write data to slot
					// ex = write_data_to_slot ()

					//Delete this line in future
					ota_fw_received_size += data_len;
 80412e2:	8a7a      	ldrh	r2, [r7, #18]
 80412e4:	4b34      	ldr	r3, [pc, #208]	; (80413b8 <ota_process_data+0x1d4>)
 80412e6:	681b      	ldr	r3, [r3, #0]
 80412e8:	4413      	add	r3, r2
 80412ea:	4a33      	ldr	r2, [pc, #204]	; (80413b8 <ota_process_data+0x1d4>)
 80412ec:	6013      	str	r3, [r2, #0]

					if( ex != HAL_OK)
 80412ee:	7c7b      	ldrb	r3, [r7, #17]
 80412f0:	2b00      	cmp	r3, #0
 80412f2:	d04d      	beq.n	8041390 <ota_process_data+0x1ac>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 80412f4:	4b30      	ldr	r3, [pc, #192]	; (80413b8 <ota_process_data+0x1d4>)
 80412f6:	681b      	ldr	r3, [r3, #0]
 80412f8:	0a99      	lsrs	r1, r3, #10
 80412fa:	4b2d      	ldr	r3, [pc, #180]	; (80413b0 <ota_process_data+0x1cc>)
 80412fc:	681b      	ldr	r3, [r3, #0]
 80412fe:	0a9b      	lsrs	r3, r3, #10
 8041300:	461a      	mov	r2, r3
 8041302:	482f      	ldr	r0, [pc, #188]	; (80413c0 <ota_process_data+0x1dc>)
 8041304:	f00b fec0 	bl	804d088 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 8041308:	4b2b      	ldr	r3, [pc, #172]	; (80413b8 <ota_process_data+0x1d4>)
 804130a:	681a      	ldr	r2, [r3, #0]
 804130c:	4b28      	ldr	r3, [pc, #160]	; (80413b0 <ota_process_data+0x1cc>)
 804130e:	681b      	ldr	r3, [r3, #0]
 8041310:	429a      	cmp	r2, r3
 8041312:	d302      	bcc.n	804131a <ota_process_data+0x136>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 8041314:	4b23      	ldr	r3, [pc, #140]	; (80413a4 <ota_process_data+0x1c0>)
 8041316:	2204      	movs	r2, #4
 8041318:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 804131a:	2300      	movs	r3, #0
 804131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8041320:	e036      	b.n	8041390 <ota_process_data+0x1ac>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8041322:	687b      	ldr	r3, [r7, #4]
 8041324:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8041326:	69fb      	ldr	r3, [r7, #28]
 8041328:	785b      	ldrb	r3, [r3, #1]
 804132a:	2b00      	cmp	r3, #0
 804132c:	d132      	bne.n	8041394 <ota_process_data+0x1b0>
				{
					if( cmd->cmd )
 804132e:	69fb      	ldr	r3, [r7, #28]
 8041330:	791b      	ldrb	r3, [r3, #4]
 8041332:	2b00      	cmp	r3, #0
 8041334:	d02e      	beq.n	8041394 <ota_process_data+0x1b0>
					{
						printf("Received OTA END COMMAND\r\n");
 8041336:	4823      	ldr	r0, [pc, #140]	; (80413c4 <ota_process_data+0x1e0>)
 8041338:	f00b ff2c 	bl	804d194 <puts>

						printf("Validating the received Binary....\r\n");
 804133c:	4822      	ldr	r0, [pc, #136]	; (80413c8 <ota_process_data+0x1e4>)
 804133e:	f00b ff29 	bl	804d194 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR
 8041342:	4b1b      	ldr	r3, [pc, #108]	; (80413b0 <ota_process_data+0x1cc>)
 8041344:	681b      	ldr	r3, [r3, #0]
 8041346:	4619      	mov	r1, r3
 8041348:	4820      	ldr	r0, [pc, #128]	; (80413cc <ota_process_data+0x1e8>)
 804134a:	f000 f871 	bl	8041430 <ota_calcCRC>
 804134e:	61b8      	str	r0, [r7, #24]
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 8041350:	4b18      	ldr	r3, [pc, #96]	; (80413b4 <ota_process_data+0x1d0>)
 8041352:	681b      	ldr	r3, [r3, #0]
 8041354:	69ba      	ldr	r2, [r7, #24]
 8041356:	429a      	cmp	r2, r3
 8041358:	d007      	beq.n	804136a <ota_process_data+0x186>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 804135a:	4b16      	ldr	r3, [pc, #88]	; (80413b4 <ota_process_data+0x1d0>)
 804135c:	681b      	ldr	r3, [r3, #0]
 804135e:	461a      	mov	r2, r3
 8041360:	69b9      	ldr	r1, [r7, #24]
 8041362:	481b      	ldr	r0, [pc, #108]	; (80413d0 <ota_process_data+0x1ec>)
 8041364:	f00b fe90 	bl	804d088 <iprintf>
																			cal_crc, ota_fw_crc);
							break;
 8041368:	e015      	b.n	8041396 <ota_process_data+0x1b2>
						}

						printf("Done!\r\n");
 804136a:	481a      	ldr	r0, [pc, #104]	; (80413d4 <ota_process_data+0x1f0>)
 804136c:	f00b ff12 	bl	804d194 <puts>

						// TODO: Update CFG

						ret = OTA_EX_OK;
 8041370:	2300      	movs	r3, #0
 8041372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8041376:	e00d      	b.n	8041394 <ota_process_data+0x1b0>

			default:
			{
				ret = OTA_EX_ERR;
 8041378:	2301      	movs	r3, #1
 804137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 804137e:	e00a      	b.n	8041396 <ota_process_data+0x1b2>
		};
 8041380:	bf00      	nop
 8041382:	e008      	b.n	8041396 <ota_process_data+0x1b2>
				break;
 8041384:	bf00      	nop
 8041386:	e006      	b.n	8041396 <ota_process_data+0x1b2>
			break;
 8041388:	bf00      	nop
 804138a:	e004      	b.n	8041396 <ota_process_data+0x1b2>
			break;
 804138c:	bf00      	nop
 804138e:	e002      	b.n	8041396 <ota_process_data+0x1b2>
			break;
 8041390:	bf00      	nop
 8041392:	e000      	b.n	8041396 <ota_process_data+0x1b2>
			break;
 8041394:	bf00      	nop
	}while(false);

	return ret;
 8041396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 804139a:	4618      	mov	r0, r3
 804139c:	3728      	adds	r7, #40	; 0x28
 804139e:	46bd      	mov	sp, r7
 80413a0:	bd80      	pop	{r7, pc}
 80413a2:	bf00      	nop
 80413a4:	20000401 	.word	0x20000401
 80413a8:	0804e438 	.word	0x0804e438
 80413ac:	0804e44c 	.word	0x0804e44c
 80413b0:	20000404 	.word	0x20000404
 80413b4:	20000408 	.word	0x20000408
 80413b8:	2000040c 	.word	0x2000040c
 80413bc:	0804e468 	.word	0x0804e468
 80413c0:	0804e4a4 	.word	0x0804e4a4
 80413c4:	0804e4b0 	.word	0x0804e4b0
 80413c8:	0804e4cc 	.word	0x0804e4cc
 80413cc:	08120000 	.word	0x08120000
 80413d0:	0804e4f0 	.word	0x0804e4f0
 80413d4:	0804e534 	.word	0x0804e534

080413d8 <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 80413d8:	b580      	push	{r7, lr}
 80413da:	b086      	sub	sp, #24
 80413dc:	af00      	add	r7, sp, #0
 80413de:	6078      	str	r0, [r7, #4]
 80413e0:	460b      	mov	r3, r1
 80413e2:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 80413e4:	f107 030c 	add.w	r3, r7, #12
 80413e8:	2200      	movs	r2, #0
 80413ea:	601a      	str	r2, [r3, #0]
 80413ec:	605a      	str	r2, [r3, #4]
 80413ee:	811a      	strh	r2, [r3, #8]
 80413f0:	23aa      	movs	r3, #170	; 0xaa
 80413f2:	733b      	strb	r3, [r7, #12]
 80413f4:	2303      	movs	r3, #3
 80413f6:	737b      	strb	r3, [r7, #13]
 80413f8:	2301      	movs	r3, #1
 80413fa:	81fb      	strh	r3, [r7, #14]
 80413fc:	78fb      	ldrb	r3, [r7, #3]
 80413fe:	743b      	strb	r3, [r7, #16]
 8041400:	23bb      	movs	r3, #187	; 0xbb
 8041402:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 8041404:	f107 030c 	add.w	r3, r7, #12
 8041408:	3304      	adds	r3, #4
 804140a:	2101      	movs	r1, #1
 804140c:	4618      	mov	r0, r3
 804140e:	f000 f80f 	bl	8041430 <ota_calcCRC>
 8041412:	4603      	mov	r3, r0
 8041414:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 8041418:	f107 010c 	add.w	r1, r7, #12
 804141c:	f04f 33ff 	mov.w	r3, #4294967295
 8041420:	220a      	movs	r2, #10
 8041422:	6878      	ldr	r0, [r7, #4]
 8041424:	f007 fcfb 	bl	8048e1e <HAL_UART_Transmit>

}
 8041428:	bf00      	nop
 804142a:	3718      	adds	r7, #24
 804142c:	46bd      	mov	sp, r7
 804142e:	bd80      	pop	{r7, pc}

08041430 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8041430:	b480      	push	{r7}
 8041432:	b087      	sub	sp, #28
 8041434:	af00      	add	r7, sp, #0
 8041436:	6078      	str	r0, [r7, #4]
 8041438:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 804143a:	f04f 33ff 	mov.w	r3, #4294967295
 804143e:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8041440:	2300      	movs	r3, #0
 8041442:	613b      	str	r3, [r7, #16]
 8041444:	e014      	b.n	8041470 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 8041446:	697b      	ldr	r3, [r7, #20]
 8041448:	0e1b      	lsrs	r3, r3, #24
 804144a:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 804144c:	687a      	ldr	r2, [r7, #4]
 804144e:	693b      	ldr	r3, [r7, #16]
 8041450:	4413      	add	r3, r2
 8041452:	781a      	ldrb	r2, [r3, #0]
 8041454:	7bfb      	ldrb	r3, [r7, #15]
 8041456:	4053      	eors	r3, r2
 8041458:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 804145a:	697b      	ldr	r3, [r7, #20]
 804145c:	021a      	lsls	r2, r3, #8
 804145e:	7bfb      	ldrb	r3, [r7, #15]
 8041460:	4909      	ldr	r1, [pc, #36]	; (8041488 <ota_calcCRC+0x58>)
 8041462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8041466:	4053      	eors	r3, r2
 8041468:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 804146a:	693b      	ldr	r3, [r7, #16]
 804146c:	3301      	adds	r3, #1
 804146e:	613b      	str	r3, [r7, #16]
 8041470:	693a      	ldr	r2, [r7, #16]
 8041472:	683b      	ldr	r3, [r7, #0]
 8041474:	429a      	cmp	r2, r3
 8041476:	d3e6      	bcc.n	8041446 <ota_calcCRC+0x16>
    }
    return Checksum;
 8041478:	697b      	ldr	r3, [r7, #20]
}
 804147a:	4618      	mov	r0, r3
 804147c:	371c      	adds	r7, #28
 804147e:	46bd      	mov	sp, r7
 8041480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041484:	4770      	bx	lr
 8041486:	bf00      	nop
 8041488:	0804e540 	.word	0x0804e540

0804148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804148c:	b480      	push	{r7}
 804148e:	b083      	sub	sp, #12
 8041490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041492:	2300      	movs	r3, #0
 8041494:	607b      	str	r3, [r7, #4]
 8041496:	4b10      	ldr	r3, [pc, #64]	; (80414d8 <HAL_MspInit+0x4c>)
 8041498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804149a:	4a0f      	ldr	r2, [pc, #60]	; (80414d8 <HAL_MspInit+0x4c>)
 804149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80414a0:	6453      	str	r3, [r2, #68]	; 0x44
 80414a2:	4b0d      	ldr	r3, [pc, #52]	; (80414d8 <HAL_MspInit+0x4c>)
 80414a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80414a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80414aa:	607b      	str	r3, [r7, #4]
 80414ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80414ae:	2300      	movs	r3, #0
 80414b0:	603b      	str	r3, [r7, #0]
 80414b2:	4b09      	ldr	r3, [pc, #36]	; (80414d8 <HAL_MspInit+0x4c>)
 80414b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414b6:	4a08      	ldr	r2, [pc, #32]	; (80414d8 <HAL_MspInit+0x4c>)
 80414b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80414bc:	6413      	str	r3, [r2, #64]	; 0x40
 80414be:	4b06      	ldr	r3, [pc, #24]	; (80414d8 <HAL_MspInit+0x4c>)
 80414c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80414c6:	603b      	str	r3, [r7, #0]
 80414c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80414ca:	bf00      	nop
 80414cc:	370c      	adds	r7, #12
 80414ce:	46bd      	mov	sp, r7
 80414d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414d4:	4770      	bx	lr
 80414d6:	bf00      	nop
 80414d8:	40023800 	.word	0x40023800

080414dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80414dc:	b480      	push	{r7}
 80414de:	b085      	sub	sp, #20
 80414e0:	af00      	add	r7, sp, #0
 80414e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80414e4:	687b      	ldr	r3, [r7, #4]
 80414e6:	681b      	ldr	r3, [r3, #0]
 80414e8:	4a0b      	ldr	r2, [pc, #44]	; (8041518 <HAL_CRC_MspInit+0x3c>)
 80414ea:	4293      	cmp	r3, r2
 80414ec:	d10d      	bne.n	804150a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80414ee:	2300      	movs	r3, #0
 80414f0:	60fb      	str	r3, [r7, #12]
 80414f2:	4b0a      	ldr	r3, [pc, #40]	; (804151c <HAL_CRC_MspInit+0x40>)
 80414f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414f6:	4a09      	ldr	r2, [pc, #36]	; (804151c <HAL_CRC_MspInit+0x40>)
 80414f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80414fc:	6313      	str	r3, [r2, #48]	; 0x30
 80414fe:	4b07      	ldr	r3, [pc, #28]	; (804151c <HAL_CRC_MspInit+0x40>)
 8041500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041506:	60fb      	str	r3, [r7, #12]
 8041508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 804150a:	bf00      	nop
 804150c:	3714      	adds	r7, #20
 804150e:	46bd      	mov	sp, r7
 8041510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041514:	4770      	bx	lr
 8041516:	bf00      	nop
 8041518:	40023000 	.word	0x40023000
 804151c:	40023800 	.word	0x40023800

08041520 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8041520:	b580      	push	{r7, lr}
 8041522:	b084      	sub	sp, #16
 8041524:	af00      	add	r7, sp, #0
 8041526:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	681b      	ldr	r3, [r3, #0]
 804152c:	4a0e      	ldr	r2, [pc, #56]	; (8041568 <HAL_DMA2D_MspInit+0x48>)
 804152e:	4293      	cmp	r3, r2
 8041530:	d115      	bne.n	804155e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8041532:	2300      	movs	r3, #0
 8041534:	60fb      	str	r3, [r7, #12]
 8041536:	4b0d      	ldr	r3, [pc, #52]	; (804156c <HAL_DMA2D_MspInit+0x4c>)
 8041538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804153a:	4a0c      	ldr	r2, [pc, #48]	; (804156c <HAL_DMA2D_MspInit+0x4c>)
 804153c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8041540:	6313      	str	r3, [r2, #48]	; 0x30
 8041542:	4b0a      	ldr	r3, [pc, #40]	; (804156c <HAL_DMA2D_MspInit+0x4c>)
 8041544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804154a:	60fb      	str	r3, [r7, #12]
 804154c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 804154e:	2200      	movs	r2, #0
 8041550:	2105      	movs	r1, #5
 8041552:	205a      	movs	r0, #90	; 0x5a
 8041554:	f002 f836 	bl	80435c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8041558:	205a      	movs	r0, #90	; 0x5a
 804155a:	f002 f84f 	bl	80435fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 804155e:	bf00      	nop
 8041560:	3710      	adds	r7, #16
 8041562:	46bd      	mov	sp, r7
 8041564:	bd80      	pop	{r7, pc}
 8041566:	bf00      	nop
 8041568:	4002b000 	.word	0x4002b000
 804156c:	40023800 	.word	0x40023800

08041570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8041570:	b580      	push	{r7, lr}
 8041572:	b08a      	sub	sp, #40	; 0x28
 8041574:	af00      	add	r7, sp, #0
 8041576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041578:	f107 0314 	add.w	r3, r7, #20
 804157c:	2200      	movs	r2, #0
 804157e:	601a      	str	r2, [r3, #0]
 8041580:	605a      	str	r2, [r3, #4]
 8041582:	609a      	str	r2, [r3, #8]
 8041584:	60da      	str	r2, [r3, #12]
 8041586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8041588:	687b      	ldr	r3, [r7, #4]
 804158a:	681b      	ldr	r3, [r3, #0]
 804158c:	4a29      	ldr	r2, [pc, #164]	; (8041634 <HAL_I2C_MspInit+0xc4>)
 804158e:	4293      	cmp	r3, r2
 8041590:	d14b      	bne.n	804162a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041592:	2300      	movs	r3, #0
 8041594:	613b      	str	r3, [r7, #16]
 8041596:	4b28      	ldr	r3, [pc, #160]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 8041598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804159a:	4a27      	ldr	r2, [pc, #156]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 804159c:	f043 0304 	orr.w	r3, r3, #4
 80415a0:	6313      	str	r3, [r2, #48]	; 0x30
 80415a2:	4b25      	ldr	r3, [pc, #148]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 80415a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415a6:	f003 0304 	and.w	r3, r3, #4
 80415aa:	613b      	str	r3, [r7, #16]
 80415ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80415ae:	2300      	movs	r3, #0
 80415b0:	60fb      	str	r3, [r7, #12]
 80415b2:	4b21      	ldr	r3, [pc, #132]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 80415b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415b6:	4a20      	ldr	r2, [pc, #128]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 80415b8:	f043 0301 	orr.w	r3, r3, #1
 80415bc:	6313      	str	r3, [r2, #48]	; 0x30
 80415be:	4b1e      	ldr	r3, [pc, #120]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 80415c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415c2:	f003 0301 	and.w	r3, r3, #1
 80415c6:	60fb      	str	r3, [r7, #12]
 80415c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80415ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80415ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80415d0:	2312      	movs	r3, #18
 80415d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80415d4:	2301      	movs	r3, #1
 80415d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80415d8:	2300      	movs	r3, #0
 80415da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80415dc:	2304      	movs	r3, #4
 80415de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80415e0:	f107 0314 	add.w	r3, r7, #20
 80415e4:	4619      	mov	r1, r3
 80415e6:	4815      	ldr	r0, [pc, #84]	; (804163c <HAL_I2C_MspInit+0xcc>)
 80415e8:	f002 fd8c 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80415ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80415f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80415f2:	2312      	movs	r3, #18
 80415f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80415f6:	2301      	movs	r3, #1
 80415f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80415fa:	2300      	movs	r3, #0
 80415fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80415fe:	2304      	movs	r3, #4
 8041600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8041602:	f107 0314 	add.w	r3, r7, #20
 8041606:	4619      	mov	r1, r3
 8041608:	480d      	ldr	r0, [pc, #52]	; (8041640 <HAL_I2C_MspInit+0xd0>)
 804160a:	f002 fd7b 	bl	8044104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 804160e:	2300      	movs	r3, #0
 8041610:	60bb      	str	r3, [r7, #8]
 8041612:	4b09      	ldr	r3, [pc, #36]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 8041614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041616:	4a08      	ldr	r2, [pc, #32]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 8041618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804161c:	6413      	str	r3, [r2, #64]	; 0x40
 804161e:	4b06      	ldr	r3, [pc, #24]	; (8041638 <HAL_I2C_MspInit+0xc8>)
 8041620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8041626:	60bb      	str	r3, [r7, #8]
 8041628:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 804162a:	bf00      	nop
 804162c:	3728      	adds	r7, #40	; 0x28
 804162e:	46bd      	mov	sp, r7
 8041630:	bd80      	pop	{r7, pc}
 8041632:	bf00      	nop
 8041634:	40005c00 	.word	0x40005c00
 8041638:	40023800 	.word	0x40023800
 804163c:	40020800 	.word	0x40020800
 8041640:	40020000 	.word	0x40020000

08041644 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8041644:	b580      	push	{r7, lr}
 8041646:	b09a      	sub	sp, #104	; 0x68
 8041648:	af00      	add	r7, sp, #0
 804164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804164c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041650:	2200      	movs	r2, #0
 8041652:	601a      	str	r2, [r3, #0]
 8041654:	605a      	str	r2, [r3, #4]
 8041656:	609a      	str	r2, [r3, #8]
 8041658:	60da      	str	r2, [r3, #12]
 804165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041660:	2230      	movs	r2, #48	; 0x30
 8041662:	2100      	movs	r1, #0
 8041664:	4618      	mov	r0, r3
 8041666:	f00b fc27 	bl	804ceb8 <memset>
  if(hltdc->Instance==LTDC)
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	681b      	ldr	r3, [r3, #0]
 804166e:	4a85      	ldr	r2, [pc, #532]	; (8041884 <HAL_LTDC_MspInit+0x240>)
 8041670:	4293      	cmp	r3, r2
 8041672:	f040 8102 	bne.w	804187a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8041676:	2308      	movs	r3, #8
 8041678:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 804167a:	2331      	movs	r3, #49	; 0x31
 804167c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 804167e:	2302      	movs	r3, #2
 8041680:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8041682:	2300      	movs	r3, #0
 8041684:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8041686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804168a:	4618      	mov	r0, r3
 804168c:	f005 fec8 	bl	8047420 <HAL_RCCEx_PeriphCLKConfig>
 8041690:	4603      	mov	r3, r0
 8041692:	2b00      	cmp	r3, #0
 8041694:	d001      	beq.n	804169a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8041696:	f7ff fc3d 	bl	8040f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 804169a:	2300      	movs	r3, #0
 804169c:	623b      	str	r3, [r7, #32]
 804169e:	4b7a      	ldr	r3, [pc, #488]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80416a2:	4a79      	ldr	r2, [pc, #484]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80416a8:	6453      	str	r3, [r2, #68]	; 0x44
 80416aa:	4b77      	ldr	r3, [pc, #476]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80416ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80416b2:	623b      	str	r3, [r7, #32]
 80416b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80416b6:	2300      	movs	r3, #0
 80416b8:	61fb      	str	r3, [r7, #28]
 80416ba:	4b73      	ldr	r3, [pc, #460]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416be:	4a72      	ldr	r2, [pc, #456]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416c0:	f043 0320 	orr.w	r3, r3, #32
 80416c4:	6313      	str	r3, [r2, #48]	; 0x30
 80416c6:	4b70      	ldr	r3, [pc, #448]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ca:	f003 0320 	and.w	r3, r3, #32
 80416ce:	61fb      	str	r3, [r7, #28]
 80416d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80416d2:	2300      	movs	r3, #0
 80416d4:	61bb      	str	r3, [r7, #24]
 80416d6:	4b6c      	ldr	r3, [pc, #432]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416da:	4a6b      	ldr	r2, [pc, #428]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416dc:	f043 0301 	orr.w	r3, r3, #1
 80416e0:	6313      	str	r3, [r2, #48]	; 0x30
 80416e2:	4b69      	ldr	r3, [pc, #420]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416e6:	f003 0301 	and.w	r3, r3, #1
 80416ea:	61bb      	str	r3, [r7, #24]
 80416ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80416ee:	2300      	movs	r3, #0
 80416f0:	617b      	str	r3, [r7, #20]
 80416f2:	4b65      	ldr	r3, [pc, #404]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416f6:	4a64      	ldr	r2, [pc, #400]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 80416f8:	f043 0302 	orr.w	r3, r3, #2
 80416fc:	6313      	str	r3, [r2, #48]	; 0x30
 80416fe:	4b62      	ldr	r3, [pc, #392]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041702:	f003 0302 	and.w	r3, r3, #2
 8041706:	617b      	str	r3, [r7, #20]
 8041708:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 804170a:	2300      	movs	r3, #0
 804170c:	613b      	str	r3, [r7, #16]
 804170e:	4b5e      	ldr	r3, [pc, #376]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041712:	4a5d      	ldr	r2, [pc, #372]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8041718:	6313      	str	r3, [r2, #48]	; 0x30
 804171a:	4b5b      	ldr	r3, [pc, #364]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 804171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041722:	613b      	str	r3, [r7, #16]
 8041724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041726:	2300      	movs	r3, #0
 8041728:	60fb      	str	r3, [r7, #12]
 804172a:	4b57      	ldr	r3, [pc, #348]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 804172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804172e:	4a56      	ldr	r2, [pc, #344]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041730:	f043 0304 	orr.w	r3, r3, #4
 8041734:	6313      	str	r3, [r2, #48]	; 0x30
 8041736:	4b54      	ldr	r3, [pc, #336]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804173a:	f003 0304 	and.w	r3, r3, #4
 804173e:	60fb      	str	r3, [r7, #12]
 8041740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041742:	2300      	movs	r3, #0
 8041744:	60bb      	str	r3, [r7, #8]
 8041746:	4b50      	ldr	r3, [pc, #320]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804174a:	4a4f      	ldr	r2, [pc, #316]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 804174c:	f043 0308 	orr.w	r3, r3, #8
 8041750:	6313      	str	r3, [r2, #48]	; 0x30
 8041752:	4b4d      	ldr	r3, [pc, #308]	; (8041888 <HAL_LTDC_MspInit+0x244>)
 8041754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041756:	f003 0308 	and.w	r3, r3, #8
 804175a:	60bb      	str	r3, [r7, #8]
 804175c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 804175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041762:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041764:	2302      	movs	r3, #2
 8041766:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041768:	2300      	movs	r3, #0
 804176a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804176c:	2300      	movs	r3, #0
 804176e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041770:	230e      	movs	r3, #14
 8041772:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8041774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041778:	4619      	mov	r1, r3
 804177a:	4844      	ldr	r0, [pc, #272]	; (804188c <HAL_LTDC_MspInit+0x248>)
 804177c:	f002 fcc2 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8041780:	f641 0358 	movw	r3, #6232	; 0x1858
 8041784:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041786:	2302      	movs	r3, #2
 8041788:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804178a:	2300      	movs	r3, #0
 804178c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804178e:	2300      	movs	r3, #0
 8041790:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041792:	230e      	movs	r3, #14
 8041794:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804179a:	4619      	mov	r1, r3
 804179c:	483c      	ldr	r0, [pc, #240]	; (8041890 <HAL_LTDC_MspInit+0x24c>)
 804179e:	f002 fcb1 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80417a2:	2303      	movs	r3, #3
 80417a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417a6:	2302      	movs	r3, #2
 80417a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417aa:	2300      	movs	r3, #0
 80417ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417ae:	2300      	movs	r3, #0
 80417b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80417b2:	2309      	movs	r3, #9
 80417b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80417b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417ba:	4619      	mov	r1, r3
 80417bc:	4835      	ldr	r0, [pc, #212]	; (8041894 <HAL_LTDC_MspInit+0x250>)
 80417be:	f002 fca1 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80417c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80417c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417c8:	2302      	movs	r3, #2
 80417ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417cc:	2300      	movs	r3, #0
 80417ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417d0:	2300      	movs	r3, #0
 80417d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80417d4:	230e      	movs	r3, #14
 80417d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80417d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417dc:	4619      	mov	r1, r3
 80417de:	482d      	ldr	r0, [pc, #180]	; (8041894 <HAL_LTDC_MspInit+0x250>)
 80417e0:	f002 fc90 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80417e4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80417e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417ea:	2302      	movs	r3, #2
 80417ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417ee:	2300      	movs	r3, #0
 80417f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417f2:	2300      	movs	r3, #0
 80417f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80417f6:	230e      	movs	r3, #14
 80417f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80417fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417fe:	4619      	mov	r1, r3
 8041800:	4825      	ldr	r0, [pc, #148]	; (8041898 <HAL_LTDC_MspInit+0x254>)
 8041802:	f002 fc7f 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8041806:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804180a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804180c:	2302      	movs	r3, #2
 804180e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041810:	2300      	movs	r3, #0
 8041812:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041814:	2300      	movs	r3, #0
 8041816:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041818:	230e      	movs	r3, #14
 804181a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804181c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041820:	4619      	mov	r1, r3
 8041822:	481e      	ldr	r0, [pc, #120]	; (804189c <HAL_LTDC_MspInit+0x258>)
 8041824:	f002 fc6e 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8041828:	2348      	movs	r3, #72	; 0x48
 804182a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804182c:	2302      	movs	r3, #2
 804182e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041830:	2300      	movs	r3, #0
 8041832:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041834:	2300      	movs	r3, #0
 8041836:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041838:	230e      	movs	r3, #14
 804183a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804183c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041840:	4619      	mov	r1, r3
 8041842:	4817      	ldr	r0, [pc, #92]	; (80418a0 <HAL_LTDC_MspInit+0x25c>)
 8041844:	f002 fc5e 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8041848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804184c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804184e:	2302      	movs	r3, #2
 8041850:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041852:	2300      	movs	r3, #0
 8041854:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041856:	2300      	movs	r3, #0
 8041858:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 804185a:	2309      	movs	r3, #9
 804185c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041862:	4619      	mov	r1, r3
 8041864:	480c      	ldr	r0, [pc, #48]	; (8041898 <HAL_LTDC_MspInit+0x254>)
 8041866:	f002 fc4d 	bl	8044104 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 804186a:	2200      	movs	r2, #0
 804186c:	2105      	movs	r1, #5
 804186e:	2058      	movs	r0, #88	; 0x58
 8041870:	f001 fea8 	bl	80435c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8041874:	2058      	movs	r0, #88	; 0x58
 8041876:	f001 fec1 	bl	80435fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 804187a:	bf00      	nop
 804187c:	3768      	adds	r7, #104	; 0x68
 804187e:	46bd      	mov	sp, r7
 8041880:	bd80      	pop	{r7, pc}
 8041882:	bf00      	nop
 8041884:	40016800 	.word	0x40016800
 8041888:	40023800 	.word	0x40023800
 804188c:	40021400 	.word	0x40021400
 8041890:	40020000 	.word	0x40020000
 8041894:	40020400 	.word	0x40020400
 8041898:	40021800 	.word	0x40021800
 804189c:	40020800 	.word	0x40020800
 80418a0:	40020c00 	.word	0x40020c00

080418a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80418a4:	b580      	push	{r7, lr}
 80418a6:	b08a      	sub	sp, #40	; 0x28
 80418a8:	af00      	add	r7, sp, #0
 80418aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80418ac:	f107 0314 	add.w	r3, r7, #20
 80418b0:	2200      	movs	r2, #0
 80418b2:	601a      	str	r2, [r3, #0]
 80418b4:	605a      	str	r2, [r3, #4]
 80418b6:	609a      	str	r2, [r3, #8]
 80418b8:	60da      	str	r2, [r3, #12]
 80418ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80418bc:	687b      	ldr	r3, [r7, #4]
 80418be:	681b      	ldr	r3, [r3, #0]
 80418c0:	4a19      	ldr	r2, [pc, #100]	; (8041928 <HAL_SPI_MspInit+0x84>)
 80418c2:	4293      	cmp	r3, r2
 80418c4:	d12c      	bne.n	8041920 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80418c6:	2300      	movs	r3, #0
 80418c8:	613b      	str	r3, [r7, #16]
 80418ca:	4b18      	ldr	r3, [pc, #96]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80418ce:	4a17      	ldr	r2, [pc, #92]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80418d4:	6453      	str	r3, [r2, #68]	; 0x44
 80418d6:	4b15      	ldr	r3, [pc, #84]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80418da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80418de:	613b      	str	r3, [r7, #16]
 80418e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80418e2:	2300      	movs	r3, #0
 80418e4:	60fb      	str	r3, [r7, #12]
 80418e6:	4b11      	ldr	r3, [pc, #68]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80418ea:	4a10      	ldr	r2, [pc, #64]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418ec:	f043 0320 	orr.w	r3, r3, #32
 80418f0:	6313      	str	r3, [r2, #48]	; 0x30
 80418f2:	4b0e      	ldr	r3, [pc, #56]	; (804192c <HAL_SPI_MspInit+0x88>)
 80418f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80418f6:	f003 0320 	and.w	r3, r3, #32
 80418fa:	60fb      	str	r3, [r7, #12]
 80418fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80418fe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041904:	2302      	movs	r3, #2
 8041906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041908:	2300      	movs	r3, #0
 804190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804190c:	2300      	movs	r3, #0
 804190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8041910:	2305      	movs	r3, #5
 8041912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041914:	f107 0314 	add.w	r3, r7, #20
 8041918:	4619      	mov	r1, r3
 804191a:	4805      	ldr	r0, [pc, #20]	; (8041930 <HAL_SPI_MspInit+0x8c>)
 804191c:	f002 fbf2 	bl	8044104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8041920:	bf00      	nop
 8041922:	3728      	adds	r7, #40	; 0x28
 8041924:	46bd      	mov	sp, r7
 8041926:	bd80      	pop	{r7, pc}
 8041928:	40015000 	.word	0x40015000
 804192c:	40023800 	.word	0x40023800
 8041930:	40021400 	.word	0x40021400

08041934 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8041934:	b580      	push	{r7, lr}
 8041936:	b082      	sub	sp, #8
 8041938:	af00      	add	r7, sp, #0
 804193a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 804193c:	687b      	ldr	r3, [r7, #4]
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	4a08      	ldr	r2, [pc, #32]	; (8041964 <HAL_SPI_MspDeInit+0x30>)
 8041942:	4293      	cmp	r3, r2
 8041944:	d10a      	bne.n	804195c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8041946:	4b08      	ldr	r3, [pc, #32]	; (8041968 <HAL_SPI_MspDeInit+0x34>)
 8041948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804194a:	4a07      	ldr	r2, [pc, #28]	; (8041968 <HAL_SPI_MspDeInit+0x34>)
 804194c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8041950:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8041952:	f44f 7160 	mov.w	r1, #896	; 0x380
 8041956:	4805      	ldr	r0, [pc, #20]	; (804196c <HAL_SPI_MspDeInit+0x38>)
 8041958:	f002 fd80 	bl	804445c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 804195c:	bf00      	nop
 804195e:	3708      	adds	r7, #8
 8041960:	46bd      	mov	sp, r7
 8041962:	bd80      	pop	{r7, pc}
 8041964:	40015000 	.word	0x40015000
 8041968:	40023800 	.word	0x40023800
 804196c:	40021400 	.word	0x40021400

08041970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041970:	b480      	push	{r7}
 8041972:	b085      	sub	sp, #20
 8041974:	af00      	add	r7, sp, #0
 8041976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	681b      	ldr	r3, [r3, #0]
 804197c:	4a0b      	ldr	r2, [pc, #44]	; (80419ac <HAL_TIM_Base_MspInit+0x3c>)
 804197e:	4293      	cmp	r3, r2
 8041980:	d10d      	bne.n	804199e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041982:	2300      	movs	r3, #0
 8041984:	60fb      	str	r3, [r7, #12]
 8041986:	4b0a      	ldr	r3, [pc, #40]	; (80419b0 <HAL_TIM_Base_MspInit+0x40>)
 8041988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804198a:	4a09      	ldr	r2, [pc, #36]	; (80419b0 <HAL_TIM_Base_MspInit+0x40>)
 804198c:	f043 0301 	orr.w	r3, r3, #1
 8041990:	6453      	str	r3, [r2, #68]	; 0x44
 8041992:	4b07      	ldr	r3, [pc, #28]	; (80419b0 <HAL_TIM_Base_MspInit+0x40>)
 8041994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041996:	f003 0301 	and.w	r3, r3, #1
 804199a:	60fb      	str	r3, [r7, #12]
 804199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 804199e:	bf00      	nop
 80419a0:	3714      	adds	r7, #20
 80419a2:	46bd      	mov	sp, r7
 80419a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419a8:	4770      	bx	lr
 80419aa:	bf00      	nop
 80419ac:	40010000 	.word	0x40010000
 80419b0:	40023800 	.word	0x40023800

080419b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80419b4:	b580      	push	{r7, lr}
 80419b6:	b08c      	sub	sp, #48	; 0x30
 80419b8:	af00      	add	r7, sp, #0
 80419ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80419bc:	f107 031c 	add.w	r3, r7, #28
 80419c0:	2200      	movs	r2, #0
 80419c2:	601a      	str	r2, [r3, #0]
 80419c4:	605a      	str	r2, [r3, #4]
 80419c6:	609a      	str	r2, [r3, #8]
 80419c8:	60da      	str	r2, [r3, #12]
 80419ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80419cc:	687b      	ldr	r3, [r7, #4]
 80419ce:	681b      	ldr	r3, [r3, #0]
 80419d0:	4a42      	ldr	r2, [pc, #264]	; (8041adc <HAL_UART_MspInit+0x128>)
 80419d2:	4293      	cmp	r3, r2
 80419d4:	d14b      	bne.n	8041a6e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80419d6:	2300      	movs	r3, #0
 80419d8:	61bb      	str	r3, [r7, #24]
 80419da:	4b41      	ldr	r3, [pc, #260]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 80419dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80419de:	4a40      	ldr	r2, [pc, #256]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 80419e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80419e4:	6413      	str	r3, [r2, #64]	; 0x40
 80419e6:	4b3e      	ldr	r3, [pc, #248]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 80419e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80419ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80419ee:	61bb      	str	r3, [r7, #24]
 80419f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80419f2:	2300      	movs	r3, #0
 80419f4:	617b      	str	r3, [r7, #20]
 80419f6:	4b3a      	ldr	r3, [pc, #232]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 80419f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80419fa:	4a39      	ldr	r2, [pc, #228]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 80419fc:	f043 0304 	orr.w	r3, r3, #4
 8041a00:	6313      	str	r3, [r2, #48]	; 0x30
 8041a02:	4b37      	ldr	r3, [pc, #220]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a06:	f003 0304 	and.w	r3, r3, #4
 8041a0a:	617b      	str	r3, [r7, #20]
 8041a0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8041a0e:	2300      	movs	r3, #0
 8041a10:	613b      	str	r3, [r7, #16]
 8041a12:	4b33      	ldr	r3, [pc, #204]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a16:	4a32      	ldr	r2, [pc, #200]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a18:	f043 0308 	orr.w	r3, r3, #8
 8041a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8041a1e:	4b30      	ldr	r3, [pc, #192]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a22:	f003 0308 	and.w	r3, r3, #8
 8041a26:	613b      	str	r3, [r7, #16]
 8041a28:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8041a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a30:	2302      	movs	r3, #2
 8041a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a34:	2300      	movs	r3, #0
 8041a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a38:	2303      	movs	r3, #3
 8041a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8041a3c:	2308      	movs	r3, #8
 8041a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041a40:	f107 031c 	add.w	r3, r7, #28
 8041a44:	4619      	mov	r1, r3
 8041a46:	4827      	ldr	r0, [pc, #156]	; (8041ae4 <HAL_UART_MspInit+0x130>)
 8041a48:	f002 fb5c 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8041a4c:	2304      	movs	r3, #4
 8041a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a50:	2302      	movs	r3, #2
 8041a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a54:	2300      	movs	r3, #0
 8041a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a58:	2303      	movs	r3, #3
 8041a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8041a5c:	2308      	movs	r3, #8
 8041a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041a60:	f107 031c 	add.w	r3, r7, #28
 8041a64:	4619      	mov	r1, r3
 8041a66:	4820      	ldr	r0, [pc, #128]	; (8041ae8 <HAL_UART_MspInit+0x134>)
 8041a68:	f002 fb4c 	bl	8044104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8041a6c:	e031      	b.n	8041ad2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8041a6e:	687b      	ldr	r3, [r7, #4]
 8041a70:	681b      	ldr	r3, [r3, #0]
 8041a72:	4a1e      	ldr	r2, [pc, #120]	; (8041aec <HAL_UART_MspInit+0x138>)
 8041a74:	4293      	cmp	r3, r2
 8041a76:	d12c      	bne.n	8041ad2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8041a78:	2300      	movs	r3, #0
 8041a7a:	60fb      	str	r3, [r7, #12]
 8041a7c:	4b18      	ldr	r3, [pc, #96]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a80:	4a17      	ldr	r2, [pc, #92]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a82:	f043 0310 	orr.w	r3, r3, #16
 8041a86:	6453      	str	r3, [r2, #68]	; 0x44
 8041a88:	4b15      	ldr	r3, [pc, #84]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a8c:	f003 0310 	and.w	r3, r3, #16
 8041a90:	60fb      	str	r3, [r7, #12]
 8041a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041a94:	2300      	movs	r3, #0
 8041a96:	60bb      	str	r3, [r7, #8]
 8041a98:	4b11      	ldr	r3, [pc, #68]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a9c:	4a10      	ldr	r2, [pc, #64]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041a9e:	f043 0301 	orr.w	r3, r3, #1
 8041aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8041aa4:	4b0e      	ldr	r3, [pc, #56]	; (8041ae0 <HAL_UART_MspInit+0x12c>)
 8041aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041aa8:	f003 0301 	and.w	r3, r3, #1
 8041aac:	60bb      	str	r3, [r7, #8]
 8041aae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8041ab0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8041ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041ab6:	2302      	movs	r3, #2
 8041ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041aba:	2300      	movs	r3, #0
 8041abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041abe:	2303      	movs	r3, #3
 8041ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8041ac2:	2307      	movs	r3, #7
 8041ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041ac6:	f107 031c 	add.w	r3, r7, #28
 8041aca:	4619      	mov	r1, r3
 8041acc:	4808      	ldr	r0, [pc, #32]	; (8041af0 <HAL_UART_MspInit+0x13c>)
 8041ace:	f002 fb19 	bl	8044104 <HAL_GPIO_Init>
}
 8041ad2:	bf00      	nop
 8041ad4:	3730      	adds	r7, #48	; 0x30
 8041ad6:	46bd      	mov	sp, r7
 8041ad8:	bd80      	pop	{r7, pc}
 8041ada:	bf00      	nop
 8041adc:	40005000 	.word	0x40005000
 8041ae0:	40023800 	.word	0x40023800
 8041ae4:	40020800 	.word	0x40020800
 8041ae8:	40020c00 	.word	0x40020c00
 8041aec:	40011000 	.word	0x40011000
 8041af0:	40020000 	.word	0x40020000

08041af4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8041af4:	b580      	push	{r7, lr}
 8041af6:	b086      	sub	sp, #24
 8041af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8041afa:	1d3b      	adds	r3, r7, #4
 8041afc:	2200      	movs	r2, #0
 8041afe:	601a      	str	r2, [r3, #0]
 8041b00:	605a      	str	r2, [r3, #4]
 8041b02:	609a      	str	r2, [r3, #8]
 8041b04:	60da      	str	r2, [r3, #12]
 8041b06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8041b08:	4b3b      	ldr	r3, [pc, #236]	; (8041bf8 <HAL_FMC_MspInit+0x104>)
 8041b0a:	681b      	ldr	r3, [r3, #0]
 8041b0c:	2b00      	cmp	r3, #0
 8041b0e:	d16f      	bne.n	8041bf0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8041b10:	4b39      	ldr	r3, [pc, #228]	; (8041bf8 <HAL_FMC_MspInit+0x104>)
 8041b12:	2201      	movs	r2, #1
 8041b14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8041b16:	2300      	movs	r3, #0
 8041b18:	603b      	str	r3, [r7, #0]
 8041b1a:	4b38      	ldr	r3, [pc, #224]	; (8041bfc <HAL_FMC_MspInit+0x108>)
 8041b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041b1e:	4a37      	ldr	r2, [pc, #220]	; (8041bfc <HAL_FMC_MspInit+0x108>)
 8041b20:	f043 0301 	orr.w	r3, r3, #1
 8041b24:	6393      	str	r3, [r2, #56]	; 0x38
 8041b26:	4b35      	ldr	r3, [pc, #212]	; (8041bfc <HAL_FMC_MspInit+0x108>)
 8041b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041b2a:	f003 0301 	and.w	r3, r3, #1
 8041b2e:	603b      	str	r3, [r7, #0]
 8041b30:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8041b32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8041b36:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b38:	2302      	movs	r3, #2
 8041b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b3c:	2300      	movs	r3, #0
 8041b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b40:	2303      	movs	r3, #3
 8041b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041b44:	230c      	movs	r3, #12
 8041b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041b48:	1d3b      	adds	r3, r7, #4
 8041b4a:	4619      	mov	r1, r3
 8041b4c:	482c      	ldr	r0, [pc, #176]	; (8041c00 <HAL_FMC_MspInit+0x10c>)
 8041b4e:	f002 fad9 	bl	8044104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8041b52:	2301      	movs	r3, #1
 8041b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b56:	2302      	movs	r3, #2
 8041b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b5a:	2300      	movs	r3, #0
 8041b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b5e:	2303      	movs	r3, #3
 8041b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041b62:	230c      	movs	r3, #12
 8041b64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8041b66:	1d3b      	adds	r3, r7, #4
 8041b68:	4619      	mov	r1, r3
 8041b6a:	4826      	ldr	r0, [pc, #152]	; (8041c04 <HAL_FMC_MspInit+0x110>)
 8041b6c:	f002 faca 	bl	8044104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041b70:	f248 1333 	movw	r3, #33075	; 0x8133
 8041b74:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b76:	2302      	movs	r3, #2
 8041b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b7a:	2300      	movs	r3, #0
 8041b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b7e:	2303      	movs	r3, #3
 8041b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041b82:	230c      	movs	r3, #12
 8041b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041b86:	1d3b      	adds	r3, r7, #4
 8041b88:	4619      	mov	r1, r3
 8041b8a:	481f      	ldr	r0, [pc, #124]	; (8041c08 <HAL_FMC_MspInit+0x114>)
 8041b8c:	f002 faba 	bl	8044104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8041b90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8041b94:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b96:	2302      	movs	r3, #2
 8041b98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b9a:	2300      	movs	r3, #0
 8041b9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041b9e:	2303      	movs	r3, #3
 8041ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041ba2:	230c      	movs	r3, #12
 8041ba4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041ba6:	1d3b      	adds	r3, r7, #4
 8041ba8:	4619      	mov	r1, r3
 8041baa:	4818      	ldr	r0, [pc, #96]	; (8041c0c <HAL_FMC_MspInit+0x118>)
 8041bac:	f002 faaa 	bl	8044104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8041bb0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8041bb4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041bb6:	2302      	movs	r3, #2
 8041bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041bba:	2300      	movs	r3, #0
 8041bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041bbe:	2303      	movs	r3, #3
 8041bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041bc2:	230c      	movs	r3, #12
 8041bc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041bc6:	1d3b      	adds	r3, r7, #4
 8041bc8:	4619      	mov	r1, r3
 8041bca:	4811      	ldr	r0, [pc, #68]	; (8041c10 <HAL_FMC_MspInit+0x11c>)
 8041bcc:	f002 fa9a 	bl	8044104 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8041bd0:	2360      	movs	r3, #96	; 0x60
 8041bd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041bd4:	2302      	movs	r3, #2
 8041bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041bd8:	2300      	movs	r3, #0
 8041bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041bdc:	2303      	movs	r3, #3
 8041bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041be0:	230c      	movs	r3, #12
 8041be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041be4:	1d3b      	adds	r3, r7, #4
 8041be6:	4619      	mov	r1, r3
 8041be8:	480a      	ldr	r0, [pc, #40]	; (8041c14 <HAL_FMC_MspInit+0x120>)
 8041bea:	f002 fa8b 	bl	8044104 <HAL_GPIO_Init>
 8041bee:	e000      	b.n	8041bf2 <HAL_FMC_MspInit+0xfe>
    return;
 8041bf0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8041bf2:	3718      	adds	r7, #24
 8041bf4:	46bd      	mov	sp, r7
 8041bf6:	bd80      	pop	{r7, pc}
 8041bf8:	2000081c 	.word	0x2000081c
 8041bfc:	40023800 	.word	0x40023800
 8041c00:	40021400 	.word	0x40021400
 8041c04:	40020800 	.word	0x40020800
 8041c08:	40021800 	.word	0x40021800
 8041c0c:	40021000 	.word	0x40021000
 8041c10:	40020c00 	.word	0x40020c00
 8041c14:	40020400 	.word	0x40020400

08041c18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8041c18:	b580      	push	{r7, lr}
 8041c1a:	b082      	sub	sp, #8
 8041c1c:	af00      	add	r7, sp, #0
 8041c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8041c20:	f7ff ff68 	bl	8041af4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8041c24:	bf00      	nop
 8041c26:	3708      	adds	r7, #8
 8041c28:	46bd      	mov	sp, r7
 8041c2a:	bd80      	pop	{r7, pc}

08041c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041c2c:	b580      	push	{r7, lr}
 8041c2e:	b08e      	sub	sp, #56	; 0x38
 8041c30:	af00      	add	r7, sp, #0
 8041c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041c34:	2300      	movs	r3, #0
 8041c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041c38:	2300      	movs	r3, #0
 8041c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041c3c:	2300      	movs	r3, #0
 8041c3e:	60fb      	str	r3, [r7, #12]
 8041c40:	4b33      	ldr	r3, [pc, #204]	; (8041d10 <HAL_InitTick+0xe4>)
 8041c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041c44:	4a32      	ldr	r2, [pc, #200]	; (8041d10 <HAL_InitTick+0xe4>)
 8041c46:	f043 0310 	orr.w	r3, r3, #16
 8041c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8041c4c:	4b30      	ldr	r3, [pc, #192]	; (8041d10 <HAL_InitTick+0xe4>)
 8041c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041c50:	f003 0310 	and.w	r3, r3, #16
 8041c54:	60fb      	str	r3, [r7, #12]
 8041c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041c58:	f107 0210 	add.w	r2, r7, #16
 8041c5c:	f107 0314 	add.w	r3, r7, #20
 8041c60:	4611      	mov	r1, r2
 8041c62:	4618      	mov	r0, r3
 8041c64:	f005 fbaa 	bl	80473bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041c68:	6a3b      	ldr	r3, [r7, #32]
 8041c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041c6e:	2b00      	cmp	r3, #0
 8041c70:	d103      	bne.n	8041c7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041c72:	f005 fb7b 	bl	804736c <HAL_RCC_GetPCLK1Freq>
 8041c76:	6378      	str	r0, [r7, #52]	; 0x34
 8041c78:	e004      	b.n	8041c84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041c7a:	f005 fb77 	bl	804736c <HAL_RCC_GetPCLK1Freq>
 8041c7e:	4603      	mov	r3, r0
 8041c80:	005b      	lsls	r3, r3, #1
 8041c82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041c86:	4a23      	ldr	r2, [pc, #140]	; (8041d14 <HAL_InitTick+0xe8>)
 8041c88:	fba2 2303 	umull	r2, r3, r2, r3
 8041c8c:	0c9b      	lsrs	r3, r3, #18
 8041c8e:	3b01      	subs	r3, #1
 8041c90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041c92:	4b21      	ldr	r3, [pc, #132]	; (8041d18 <HAL_InitTick+0xec>)
 8041c94:	4a21      	ldr	r2, [pc, #132]	; (8041d1c <HAL_InitTick+0xf0>)
 8041c96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041c98:	4b1f      	ldr	r3, [pc, #124]	; (8041d18 <HAL_InitTick+0xec>)
 8041c9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041ca0:	4a1d      	ldr	r2, [pc, #116]	; (8041d18 <HAL_InitTick+0xec>)
 8041ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041ca4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041ca6:	4b1c      	ldr	r3, [pc, #112]	; (8041d18 <HAL_InitTick+0xec>)
 8041ca8:	2200      	movs	r2, #0
 8041caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041cac:	4b1a      	ldr	r3, [pc, #104]	; (8041d18 <HAL_InitTick+0xec>)
 8041cae:	2200      	movs	r2, #0
 8041cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041cb2:	4b19      	ldr	r3, [pc, #100]	; (8041d18 <HAL_InitTick+0xec>)
 8041cb4:	2200      	movs	r2, #0
 8041cb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041cb8:	4817      	ldr	r0, [pc, #92]	; (8041d18 <HAL_InitTick+0xec>)
 8041cba:	f006 fbe1 	bl	8048480 <HAL_TIM_Base_Init>
 8041cbe:	4603      	mov	r3, r0
 8041cc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8041cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041cc8:	2b00      	cmp	r3, #0
 8041cca:	d11b      	bne.n	8041d04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8041ccc:	4812      	ldr	r0, [pc, #72]	; (8041d18 <HAL_InitTick+0xec>)
 8041cce:	f006 fc27 	bl	8048520 <HAL_TIM_Base_Start_IT>
 8041cd2:	4603      	mov	r3, r0
 8041cd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8041cd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041cdc:	2b00      	cmp	r3, #0
 8041cde:	d111      	bne.n	8041d04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041ce0:	2036      	movs	r0, #54	; 0x36
 8041ce2:	f001 fc8b 	bl	80435fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041ce6:	687b      	ldr	r3, [r7, #4]
 8041ce8:	2b0f      	cmp	r3, #15
 8041cea:	d808      	bhi.n	8041cfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041cec:	2200      	movs	r2, #0
 8041cee:	6879      	ldr	r1, [r7, #4]
 8041cf0:	2036      	movs	r0, #54	; 0x36
 8041cf2:	f001 fc67 	bl	80435c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041cf6:	4a0a      	ldr	r2, [pc, #40]	; (8041d20 <HAL_InitTick+0xf4>)
 8041cf8:	687b      	ldr	r3, [r7, #4]
 8041cfa:	6013      	str	r3, [r2, #0]
 8041cfc:	e002      	b.n	8041d04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8041cfe:	2301      	movs	r3, #1
 8041d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041d04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8041d08:	4618      	mov	r0, r3
 8041d0a:	3738      	adds	r7, #56	; 0x38
 8041d0c:	46bd      	mov	sp, r7
 8041d0e:	bd80      	pop	{r7, pc}
 8041d10:	40023800 	.word	0x40023800
 8041d14:	431bde83 	.word	0x431bde83
 8041d18:	20000820 	.word	0x20000820
 8041d1c:	40001000 	.word	0x40001000
 8041d20:	20000054 	.word	0x20000054

08041d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041d24:	b480      	push	{r7}
 8041d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041d28:	e7fe      	b.n	8041d28 <NMI_Handler+0x4>

08041d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041d2a:	b480      	push	{r7}
 8041d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041d2e:	e7fe      	b.n	8041d2e <HardFault_Handler+0x4>

08041d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041d30:	b480      	push	{r7}
 8041d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041d34:	e7fe      	b.n	8041d34 <MemManage_Handler+0x4>

08041d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041d36:	b480      	push	{r7}
 8041d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041d3a:	e7fe      	b.n	8041d3a <BusFault_Handler+0x4>

08041d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041d3c:	b480      	push	{r7}
 8041d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041d40:	e7fe      	b.n	8041d40 <UsageFault_Handler+0x4>

08041d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041d42:	b480      	push	{r7}
 8041d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041d46:	bf00      	nop
 8041d48:	46bd      	mov	sp, r7
 8041d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d4e:	4770      	bx	lr

08041d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041d50:	b480      	push	{r7}
 8041d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041d54:	bf00      	nop
 8041d56:	46bd      	mov	sp, r7
 8041d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d5c:	4770      	bx	lr

08041d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041d5e:	b480      	push	{r7}
 8041d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041d62:	bf00      	nop
 8041d64:	46bd      	mov	sp, r7
 8041d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d6a:	4770      	bx	lr

08041d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041d6c:	b480      	push	{r7}
 8041d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041d70:	bf00      	nop
 8041d72:	46bd      	mov	sp, r7
 8041d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d78:	4770      	bx	lr

08041d7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8041d7a:	b580      	push	{r7, lr}
 8041d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8041d7e:	2001      	movs	r0, #1
 8041d80:	f002 fc92 	bl	80446a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8041d84:	bf00      	nop
 8041d86:	bd80      	pop	{r7, pc}

08041d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041d88:	b580      	push	{r7, lr}
 8041d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041d8c:	4802      	ldr	r0, [pc, #8]	; (8041d98 <TIM6_DAC_IRQHandler+0x10>)
 8041d8e:	f006 fc37 	bl	8048600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041d92:	bf00      	nop
 8041d94:	bd80      	pop	{r7, pc}
 8041d96:	bf00      	nop
 8041d98:	20000820 	.word	0x20000820

08041d9c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041d9c:	b580      	push	{r7, lr}
 8041d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8041da0:	4802      	ldr	r0, [pc, #8]	; (8041dac <OTG_HS_IRQHandler+0x10>)
 8041da2:	f002 ff03 	bl	8044bac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041da6:	bf00      	nop
 8041da8:	bd80      	pop	{r7, pc}
 8041daa:	bf00      	nop
 8041dac:	20000ea0 	.word	0x20000ea0

08041db0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8041db0:	b580      	push	{r7, lr}
 8041db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8041db4:	4802      	ldr	r0, [pc, #8]	; (8041dc0 <LTDC_IRQHandler+0x10>)
 8041db6:	f004 fb29 	bl	804640c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8041dba:	bf00      	nop
 8041dbc:	bd80      	pop	{r7, pc}
 8041dbe:	bf00      	nop
 8041dc0:	20000198 	.word	0x20000198

08041dc4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8041dc4:	b580      	push	{r7, lr}
 8041dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8041dc8:	4802      	ldr	r0, [pc, #8]	; (8041dd4 <DMA2D_IRQHandler+0x10>)
 8041dca:	f001 ff5c 	bl	8043c86 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8041dce:	bf00      	nop
 8041dd0:	bd80      	pop	{r7, pc}
 8041dd2:	bf00      	nop
 8041dd4:	20000104 	.word	0x20000104

08041dd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8041dd8:	b480      	push	{r7}
 8041dda:	b083      	sub	sp, #12
 8041ddc:	af00      	add	r7, sp, #0
 8041dde:	4603      	mov	r3, r0
 8041de0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8041de2:	88fb      	ldrh	r3, [r7, #6]
 8041de4:	2b01      	cmp	r3, #1
 8041de6:	d102      	bne.n	8041dee <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8041de8:	4b04      	ldr	r3, [pc, #16]	; (8041dfc <HAL_GPIO_EXTI_Callback+0x24>)
 8041dea:	2201      	movs	r2, #1
 8041dec:	701a      	strb	r2, [r3, #0]

	}
}
 8041dee:	bf00      	nop
 8041df0:	370c      	adds	r7, #12
 8041df2:	46bd      	mov	sp, r7
 8041df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041df8:	4770      	bx	lr
 8041dfa:	bf00      	nop
 8041dfc:	20000400 	.word	0x20000400

08041e00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041e00:	b580      	push	{r7, lr}
 8041e02:	b086      	sub	sp, #24
 8041e04:	af00      	add	r7, sp, #0
 8041e06:	60f8      	str	r0, [r7, #12]
 8041e08:	60b9      	str	r1, [r7, #8]
 8041e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041e0c:	2300      	movs	r3, #0
 8041e0e:	617b      	str	r3, [r7, #20]
 8041e10:	e00a      	b.n	8041e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8041e12:	f3af 8000 	nop.w
 8041e16:	4601      	mov	r1, r0
 8041e18:	68bb      	ldr	r3, [r7, #8]
 8041e1a:	1c5a      	adds	r2, r3, #1
 8041e1c:	60ba      	str	r2, [r7, #8]
 8041e1e:	b2ca      	uxtb	r2, r1
 8041e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041e22:	697b      	ldr	r3, [r7, #20]
 8041e24:	3301      	adds	r3, #1
 8041e26:	617b      	str	r3, [r7, #20]
 8041e28:	697a      	ldr	r2, [r7, #20]
 8041e2a:	687b      	ldr	r3, [r7, #4]
 8041e2c:	429a      	cmp	r2, r3
 8041e2e:	dbf0      	blt.n	8041e12 <_read+0x12>
  }

  return len;
 8041e30:	687b      	ldr	r3, [r7, #4]
}
 8041e32:	4618      	mov	r0, r3
 8041e34:	3718      	adds	r7, #24
 8041e36:	46bd      	mov	sp, r7
 8041e38:	bd80      	pop	{r7, pc}

08041e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041e3a:	b580      	push	{r7, lr}
 8041e3c:	b086      	sub	sp, #24
 8041e3e:	af00      	add	r7, sp, #0
 8041e40:	60f8      	str	r0, [r7, #12]
 8041e42:	60b9      	str	r1, [r7, #8]
 8041e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041e46:	2300      	movs	r3, #0
 8041e48:	617b      	str	r3, [r7, #20]
 8041e4a:	e009      	b.n	8041e60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8041e4c:	68bb      	ldr	r3, [r7, #8]
 8041e4e:	1c5a      	adds	r2, r3, #1
 8041e50:	60ba      	str	r2, [r7, #8]
 8041e52:	781b      	ldrb	r3, [r3, #0]
 8041e54:	4618      	mov	r0, r3
 8041e56:	f7ff f839 	bl	8040ecc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041e5a:	697b      	ldr	r3, [r7, #20]
 8041e5c:	3301      	adds	r3, #1
 8041e5e:	617b      	str	r3, [r7, #20]
 8041e60:	697a      	ldr	r2, [r7, #20]
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	429a      	cmp	r2, r3
 8041e66:	dbf1      	blt.n	8041e4c <_write+0x12>
  }
  return len;
 8041e68:	687b      	ldr	r3, [r7, #4]
}
 8041e6a:	4618      	mov	r0, r3
 8041e6c:	3718      	adds	r7, #24
 8041e6e:	46bd      	mov	sp, r7
 8041e70:	bd80      	pop	{r7, pc}

08041e72 <_close>:

int _close(int file)
{
 8041e72:	b480      	push	{r7}
 8041e74:	b083      	sub	sp, #12
 8041e76:	af00      	add	r7, sp, #0
 8041e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041e7e:	4618      	mov	r0, r3
 8041e80:	370c      	adds	r7, #12
 8041e82:	46bd      	mov	sp, r7
 8041e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e88:	4770      	bx	lr

08041e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041e8a:	b480      	push	{r7}
 8041e8c:	b083      	sub	sp, #12
 8041e8e:	af00      	add	r7, sp, #0
 8041e90:	6078      	str	r0, [r7, #4]
 8041e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8041e94:	683b      	ldr	r3, [r7, #0]
 8041e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8041e9c:	2300      	movs	r3, #0
}
 8041e9e:	4618      	mov	r0, r3
 8041ea0:	370c      	adds	r7, #12
 8041ea2:	46bd      	mov	sp, r7
 8041ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ea8:	4770      	bx	lr

08041eaa <_isatty>:

int _isatty(int file)
{
 8041eaa:	b480      	push	{r7}
 8041eac:	b083      	sub	sp, #12
 8041eae:	af00      	add	r7, sp, #0
 8041eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8041eb2:	2301      	movs	r3, #1
}
 8041eb4:	4618      	mov	r0, r3
 8041eb6:	370c      	adds	r7, #12
 8041eb8:	46bd      	mov	sp, r7
 8041eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ebe:	4770      	bx	lr

08041ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041ec0:	b480      	push	{r7}
 8041ec2:	b085      	sub	sp, #20
 8041ec4:	af00      	add	r7, sp, #0
 8041ec6:	60f8      	str	r0, [r7, #12]
 8041ec8:	60b9      	str	r1, [r7, #8]
 8041eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8041ecc:	2300      	movs	r3, #0
}
 8041ece:	4618      	mov	r0, r3
 8041ed0:	3714      	adds	r7, #20
 8041ed2:	46bd      	mov	sp, r7
 8041ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ed8:	4770      	bx	lr
	...

08041edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041edc:	b580      	push	{r7, lr}
 8041ede:	b086      	sub	sp, #24
 8041ee0:	af00      	add	r7, sp, #0
 8041ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041ee4:	4a14      	ldr	r2, [pc, #80]	; (8041f38 <_sbrk+0x5c>)
 8041ee6:	4b15      	ldr	r3, [pc, #84]	; (8041f3c <_sbrk+0x60>)
 8041ee8:	1ad3      	subs	r3, r2, r3
 8041eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041eec:	697b      	ldr	r3, [r7, #20]
 8041eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041ef0:	4b13      	ldr	r3, [pc, #76]	; (8041f40 <_sbrk+0x64>)
 8041ef2:	681b      	ldr	r3, [r3, #0]
 8041ef4:	2b00      	cmp	r3, #0
 8041ef6:	d102      	bne.n	8041efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8041ef8:	4b11      	ldr	r3, [pc, #68]	; (8041f40 <_sbrk+0x64>)
 8041efa:	4a12      	ldr	r2, [pc, #72]	; (8041f44 <_sbrk+0x68>)
 8041efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8041efe:	4b10      	ldr	r3, [pc, #64]	; (8041f40 <_sbrk+0x64>)
 8041f00:	681a      	ldr	r2, [r3, #0]
 8041f02:	687b      	ldr	r3, [r7, #4]
 8041f04:	4413      	add	r3, r2
 8041f06:	693a      	ldr	r2, [r7, #16]
 8041f08:	429a      	cmp	r2, r3
 8041f0a:	d207      	bcs.n	8041f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041f0c:	f00a ff9a 	bl	804ce44 <__errno>
 8041f10:	4603      	mov	r3, r0
 8041f12:	220c      	movs	r2, #12
 8041f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8041f16:	f04f 33ff 	mov.w	r3, #4294967295
 8041f1a:	e009      	b.n	8041f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041f1c:	4b08      	ldr	r3, [pc, #32]	; (8041f40 <_sbrk+0x64>)
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041f22:	4b07      	ldr	r3, [pc, #28]	; (8041f40 <_sbrk+0x64>)
 8041f24:	681a      	ldr	r2, [r3, #0]
 8041f26:	687b      	ldr	r3, [r7, #4]
 8041f28:	4413      	add	r3, r2
 8041f2a:	4a05      	ldr	r2, [pc, #20]	; (8041f40 <_sbrk+0x64>)
 8041f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041f2e:	68fb      	ldr	r3, [r7, #12]
}
 8041f30:	4618      	mov	r0, r3
 8041f32:	3718      	adds	r7, #24
 8041f34:	46bd      	mov	sp, r7
 8041f36:	bd80      	pop	{r7, pc}
 8041f38:	20030000 	.word	0x20030000
 8041f3c:	00000400 	.word	0x00000400
 8041f40:	20000868 	.word	0x20000868
 8041f44:	200011b8 	.word	0x200011b8

08041f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041f48:	b480      	push	{r7}
 8041f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041f4c:	4b07      	ldr	r3, [pc, #28]	; (8041f6c <SystemInit+0x24>)
 8041f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041f52:	4a06      	ldr	r2, [pc, #24]	; (8041f6c <SystemInit+0x24>)
 8041f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041f5c:	4b03      	ldr	r3, [pc, #12]	; (8041f6c <SystemInit+0x24>)
 8041f5e:	4a04      	ldr	r2, [pc, #16]	; (8041f70 <SystemInit+0x28>)
 8041f60:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041f62:	bf00      	nop
 8041f64:	46bd      	mov	sp, r7
 8041f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f6a:	4770      	bx	lr
 8041f6c:	e000ed00 	.word	0xe000ed00
 8041f70:	08040000 	.word	0x08040000

08041f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8041f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041fac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041f78:	480d      	ldr	r0, [pc, #52]	; (8041fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041f7a:	490e      	ldr	r1, [pc, #56]	; (8041fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041f7c:	4a0e      	ldr	r2, [pc, #56]	; (8041fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041f80:	e002      	b.n	8041f88 <LoopCopyDataInit>

08041f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041f86:	3304      	adds	r3, #4

08041f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041f8c:	d3f9      	bcc.n	8041f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041f8e:	4a0b      	ldr	r2, [pc, #44]	; (8041fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041f90:	4c0b      	ldr	r4, [pc, #44]	; (8041fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041f94:	e001      	b.n	8041f9a <LoopFillZerobss>

08041f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041f98:	3204      	adds	r2, #4

08041f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041f9c:	d3fb      	bcc.n	8041f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8041f9e:	f7ff ffd3 	bl	8041f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8041fa2:	f00a ff55 	bl	804ce50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041fa6:	f7fe faf5 	bl	8040594 <main>
  bx  lr    
 8041faa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8041fac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8041fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041fb4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8041fb8:	08050934 	.word	0x08050934
  ldr r2, =_sbss
 8041fbc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8041fc0:	200011b4 	.word	0x200011b4

08041fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041fc4:	e7fe      	b.n	8041fc4 <ADC_IRQHandler>

08041fc6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8041fc6:	b580      	push	{r7, lr}
 8041fc8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8041fca:	f000 fa5d 	bl	8042488 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8041fce:	20ca      	movs	r0, #202	; 0xca
 8041fd0:	f000 f95d 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8041fd4:	20c3      	movs	r0, #195	; 0xc3
 8041fd6:	f000 f967 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8041fda:	2008      	movs	r0, #8
 8041fdc:	f000 f964 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8041fe0:	2050      	movs	r0, #80	; 0x50
 8041fe2:	f000 f961 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8041fe6:	20cf      	movs	r0, #207	; 0xcf
 8041fe8:	f000 f951 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041fec:	2000      	movs	r0, #0
 8041fee:	f000 f95b 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8041ff2:	20c1      	movs	r0, #193	; 0xc1
 8041ff4:	f000 f958 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8041ff8:	2030      	movs	r0, #48	; 0x30
 8041ffa:	f000 f955 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8041ffe:	20ed      	movs	r0, #237	; 0xed
 8042000:	f000 f945 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8042004:	2064      	movs	r0, #100	; 0x64
 8042006:	f000 f94f 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 804200a:	2003      	movs	r0, #3
 804200c:	f000 f94c 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8042010:	2012      	movs	r0, #18
 8042012:	f000 f949 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8042016:	2081      	movs	r0, #129	; 0x81
 8042018:	f000 f946 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 804201c:	20e8      	movs	r0, #232	; 0xe8
 804201e:	f000 f936 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8042022:	2085      	movs	r0, #133	; 0x85
 8042024:	f000 f940 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042028:	2000      	movs	r0, #0
 804202a:	f000 f93d 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 804202e:	2078      	movs	r0, #120	; 0x78
 8042030:	f000 f93a 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8042034:	20cb      	movs	r0, #203	; 0xcb
 8042036:	f000 f92a 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 804203a:	2039      	movs	r0, #57	; 0x39
 804203c:	f000 f934 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8042040:	202c      	movs	r0, #44	; 0x2c
 8042042:	f000 f931 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042046:	2000      	movs	r0, #0
 8042048:	f000 f92e 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 804204c:	2034      	movs	r0, #52	; 0x34
 804204e:	f000 f92b 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8042052:	2002      	movs	r0, #2
 8042054:	f000 f928 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8042058:	20f7      	movs	r0, #247	; 0xf7
 804205a:	f000 f918 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 804205e:	2020      	movs	r0, #32
 8042060:	f000 f922 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8042064:	20ea      	movs	r0, #234	; 0xea
 8042066:	f000 f912 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804206a:	2000      	movs	r0, #0
 804206c:	f000 f91c 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042070:	2000      	movs	r0, #0
 8042072:	f000 f919 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8042076:	20b1      	movs	r0, #177	; 0xb1
 8042078:	f000 f909 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804207c:	2000      	movs	r0, #0
 804207e:	f000 f913 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8042082:	201b      	movs	r0, #27
 8042084:	f000 f910 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8042088:	20b6      	movs	r0, #182	; 0xb6
 804208a:	f000 f900 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 804208e:	200a      	movs	r0, #10
 8042090:	f000 f90a 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8042094:	20a2      	movs	r0, #162	; 0xa2
 8042096:	f000 f907 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 804209a:	20c0      	movs	r0, #192	; 0xc0
 804209c:	f000 f8f7 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80420a0:	2010      	movs	r0, #16
 80420a2:	f000 f901 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80420a6:	20c1      	movs	r0, #193	; 0xc1
 80420a8:	f000 f8f1 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80420ac:	2010      	movs	r0, #16
 80420ae:	f000 f8fb 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80420b2:	20c5      	movs	r0, #197	; 0xc5
 80420b4:	f000 f8eb 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80420b8:	2045      	movs	r0, #69	; 0x45
 80420ba:	f000 f8f5 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80420be:	2015      	movs	r0, #21
 80420c0:	f000 f8f2 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80420c4:	20c7      	movs	r0, #199	; 0xc7
 80420c6:	f000 f8e2 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80420ca:	2090      	movs	r0, #144	; 0x90
 80420cc:	f000 f8ec 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80420d0:	2036      	movs	r0, #54	; 0x36
 80420d2:	f000 f8dc 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80420d6:	20c8      	movs	r0, #200	; 0xc8
 80420d8:	f000 f8e6 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80420dc:	20f2      	movs	r0, #242	; 0xf2
 80420de:	f000 f8d6 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80420e2:	2000      	movs	r0, #0
 80420e4:	f000 f8e0 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80420e8:	20b0      	movs	r0, #176	; 0xb0
 80420ea:	f000 f8d0 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80420ee:	20c2      	movs	r0, #194	; 0xc2
 80420f0:	f000 f8da 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80420f4:	20b6      	movs	r0, #182	; 0xb6
 80420f6:	f000 f8ca 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80420fa:	200a      	movs	r0, #10
 80420fc:	f000 f8d4 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8042100:	20a7      	movs	r0, #167	; 0xa7
 8042102:	f000 f8d1 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8042106:	2027      	movs	r0, #39	; 0x27
 8042108:	f000 f8ce 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 804210c:	2004      	movs	r0, #4
 804210e:	f000 f8cb 	bl	80422a8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8042112:	202a      	movs	r0, #42	; 0x2a
 8042114:	f000 f8bb 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8042118:	2000      	movs	r0, #0
 804211a:	f000 f8c5 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804211e:	2000      	movs	r0, #0
 8042120:	f000 f8c2 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042124:	2000      	movs	r0, #0
 8042126:	f000 f8bf 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 804212a:	20ef      	movs	r0, #239	; 0xef
 804212c:	f000 f8bc 	bl	80422a8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8042130:	202b      	movs	r0, #43	; 0x2b
 8042132:	f000 f8ac 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8042136:	2000      	movs	r0, #0
 8042138:	f000 f8b6 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804213c:	2000      	movs	r0, #0
 804213e:	f000 f8b3 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8042142:	2001      	movs	r0, #1
 8042144:	f000 f8b0 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8042148:	203f      	movs	r0, #63	; 0x3f
 804214a:	f000 f8ad 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 804214e:	20f6      	movs	r0, #246	; 0xf6
 8042150:	f000 f89d 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8042154:	2001      	movs	r0, #1
 8042156:	f000 f8a7 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804215a:	2000      	movs	r0, #0
 804215c:	f000 f8a4 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8042160:	2006      	movs	r0, #6
 8042162:	f000 f8a1 	bl	80422a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8042166:	202c      	movs	r0, #44	; 0x2c
 8042168:	f000 f891 	bl	804228e <ili9341_WriteReg>
  LCD_Delay(200);
 804216c:	20c8      	movs	r0, #200	; 0xc8
 804216e:	f000 fa79 	bl	8042664 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8042172:	2026      	movs	r0, #38	; 0x26
 8042174:	f000 f88b 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8042178:	2001      	movs	r0, #1
 804217a:	f000 f895 	bl	80422a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 804217e:	20e0      	movs	r0, #224	; 0xe0
 8042180:	f000 f885 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8042184:	200f      	movs	r0, #15
 8042186:	f000 f88f 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 804218a:	2029      	movs	r0, #41	; 0x29
 804218c:	f000 f88c 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8042190:	2024      	movs	r0, #36	; 0x24
 8042192:	f000 f889 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8042196:	200c      	movs	r0, #12
 8042198:	f000 f886 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 804219c:	200e      	movs	r0, #14
 804219e:	f000 f883 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80421a2:	2009      	movs	r0, #9
 80421a4:	f000 f880 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80421a8:	204e      	movs	r0, #78	; 0x4e
 80421aa:	f000 f87d 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80421ae:	2078      	movs	r0, #120	; 0x78
 80421b0:	f000 f87a 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80421b4:	203c      	movs	r0, #60	; 0x3c
 80421b6:	f000 f877 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80421ba:	2009      	movs	r0, #9
 80421bc:	f000 f874 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80421c0:	2013      	movs	r0, #19
 80421c2:	f000 f871 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80421c6:	2005      	movs	r0, #5
 80421c8:	f000 f86e 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80421cc:	2017      	movs	r0, #23
 80421ce:	f000 f86b 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80421d2:	2011      	movs	r0, #17
 80421d4:	f000 f868 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80421d8:	2000      	movs	r0, #0
 80421da:	f000 f865 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80421de:	20e1      	movs	r0, #225	; 0xe1
 80421e0:	f000 f855 	bl	804228e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80421e4:	2000      	movs	r0, #0
 80421e6:	f000 f85f 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80421ea:	2016      	movs	r0, #22
 80421ec:	f000 f85c 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80421f0:	201b      	movs	r0, #27
 80421f2:	f000 f859 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80421f6:	2004      	movs	r0, #4
 80421f8:	f000 f856 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80421fc:	2011      	movs	r0, #17
 80421fe:	f000 f853 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8042202:	2007      	movs	r0, #7
 8042204:	f000 f850 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8042208:	2031      	movs	r0, #49	; 0x31
 804220a:	f000 f84d 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 804220e:	2033      	movs	r0, #51	; 0x33
 8042210:	f000 f84a 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8042214:	2042      	movs	r0, #66	; 0x42
 8042216:	f000 f847 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 804221a:	2005      	movs	r0, #5
 804221c:	f000 f844 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8042220:	200c      	movs	r0, #12
 8042222:	f000 f841 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8042226:	200a      	movs	r0, #10
 8042228:	f000 f83e 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 804222c:	2028      	movs	r0, #40	; 0x28
 804222e:	f000 f83b 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8042232:	202f      	movs	r0, #47	; 0x2f
 8042234:	f000 f838 	bl	80422a8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8042238:	200f      	movs	r0, #15
 804223a:	f000 f835 	bl	80422a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 804223e:	2011      	movs	r0, #17
 8042240:	f000 f825 	bl	804228e <ili9341_WriteReg>
  LCD_Delay(200);
 8042244:	20c8      	movs	r0, #200	; 0xc8
 8042246:	f000 fa0d 	bl	8042664 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 804224a:	2029      	movs	r0, #41	; 0x29
 804224c:	f000 f81f 	bl	804228e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8042250:	202c      	movs	r0, #44	; 0x2c
 8042252:	f000 f81c 	bl	804228e <ili9341_WriteReg>
}
 8042256:	bf00      	nop
 8042258:	bd80      	pop	{r7, pc}

0804225a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 804225a:	b580      	push	{r7, lr}
 804225c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 804225e:	f000 f913 	bl	8042488 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8042262:	2103      	movs	r1, #3
 8042264:	20d3      	movs	r0, #211	; 0xd3
 8042266:	f000 f82c 	bl	80422c2 <ili9341_ReadData>
 804226a:	4603      	mov	r3, r0
 804226c:	b29b      	uxth	r3, r3
}
 804226e:	4618      	mov	r0, r3
 8042270:	bd80      	pop	{r7, pc}

08042272 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8042272:	b580      	push	{r7, lr}
 8042274:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8042276:	2029      	movs	r0, #41	; 0x29
 8042278:	f000 f809 	bl	804228e <ili9341_WriteReg>
}
 804227c:	bf00      	nop
 804227e:	bd80      	pop	{r7, pc}

08042280 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8042280:	b580      	push	{r7, lr}
 8042282:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8042284:	2028      	movs	r0, #40	; 0x28
 8042286:	f000 f802 	bl	804228e <ili9341_WriteReg>
}
 804228a:	bf00      	nop
 804228c:	bd80      	pop	{r7, pc}

0804228e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 804228e:	b580      	push	{r7, lr}
 8042290:	b082      	sub	sp, #8
 8042292:	af00      	add	r7, sp, #0
 8042294:	4603      	mov	r3, r0
 8042296:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8042298:	79fb      	ldrb	r3, [r7, #7]
 804229a:	4618      	mov	r0, r3
 804229c:	f000 f98e 	bl	80425bc <LCD_IO_WriteReg>
}
 80422a0:	bf00      	nop
 80422a2:	3708      	adds	r7, #8
 80422a4:	46bd      	mov	sp, r7
 80422a6:	bd80      	pop	{r7, pc}

080422a8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80422a8:	b580      	push	{r7, lr}
 80422aa:	b082      	sub	sp, #8
 80422ac:	af00      	add	r7, sp, #0
 80422ae:	4603      	mov	r3, r0
 80422b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80422b2:	88fb      	ldrh	r3, [r7, #6]
 80422b4:	4618      	mov	r0, r3
 80422b6:	f000 f95f 	bl	8042578 <LCD_IO_WriteData>
}
 80422ba:	bf00      	nop
 80422bc:	3708      	adds	r7, #8
 80422be:	46bd      	mov	sp, r7
 80422c0:	bd80      	pop	{r7, pc}

080422c2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80422c2:	b580      	push	{r7, lr}
 80422c4:	b082      	sub	sp, #8
 80422c6:	af00      	add	r7, sp, #0
 80422c8:	4603      	mov	r3, r0
 80422ca:	460a      	mov	r2, r1
 80422cc:	80fb      	strh	r3, [r7, #6]
 80422ce:	4613      	mov	r3, r2
 80422d0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80422d2:	797a      	ldrb	r2, [r7, #5]
 80422d4:	88fb      	ldrh	r3, [r7, #6]
 80422d6:	4611      	mov	r1, r2
 80422d8:	4618      	mov	r0, r3
 80422da:	f000 f991 	bl	8042600 <LCD_IO_ReadData>
 80422de:	4603      	mov	r3, r0
}
 80422e0:	4618      	mov	r0, r3
 80422e2:	3708      	adds	r7, #8
 80422e4:	46bd      	mov	sp, r7
 80422e6:	bd80      	pop	{r7, pc}

080422e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80422e8:	b480      	push	{r7}
 80422ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80422ec:	23f0      	movs	r3, #240	; 0xf0
}
 80422ee:	4618      	mov	r0, r3
 80422f0:	46bd      	mov	sp, r7
 80422f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422f6:	4770      	bx	lr

080422f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80422f8:	b480      	push	{r7}
 80422fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80422fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8042300:	4618      	mov	r0, r3
 8042302:	46bd      	mov	sp, r7
 8042304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042308:	4770      	bx	lr
	...

0804230c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 804230c:	b580      	push	{r7, lr}
 804230e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8042310:	4819      	ldr	r0, [pc, #100]	; (8042378 <SPIx_Init+0x6c>)
 8042312:	f005 ff76 	bl	8048202 <HAL_SPI_GetState>
 8042316:	4603      	mov	r3, r0
 8042318:	2b00      	cmp	r3, #0
 804231a:	d12b      	bne.n	8042374 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 804231c:	4b16      	ldr	r3, [pc, #88]	; (8042378 <SPIx_Init+0x6c>)
 804231e:	4a17      	ldr	r2, [pc, #92]	; (804237c <SPIx_Init+0x70>)
 8042320:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8042322:	4b15      	ldr	r3, [pc, #84]	; (8042378 <SPIx_Init+0x6c>)
 8042324:	2218      	movs	r2, #24
 8042326:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8042328:	4b13      	ldr	r3, [pc, #76]	; (8042378 <SPIx_Init+0x6c>)
 804232a:	2200      	movs	r2, #0
 804232c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 804232e:	4b12      	ldr	r3, [pc, #72]	; (8042378 <SPIx_Init+0x6c>)
 8042330:	2200      	movs	r2, #0
 8042332:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8042334:	4b10      	ldr	r3, [pc, #64]	; (8042378 <SPIx_Init+0x6c>)
 8042336:	2200      	movs	r2, #0
 8042338:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 804233a:	4b0f      	ldr	r3, [pc, #60]	; (8042378 <SPIx_Init+0x6c>)
 804233c:	2200      	movs	r2, #0
 804233e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8042340:	4b0d      	ldr	r3, [pc, #52]	; (8042378 <SPIx_Init+0x6c>)
 8042342:	2207      	movs	r2, #7
 8042344:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8042346:	4b0c      	ldr	r3, [pc, #48]	; (8042378 <SPIx_Init+0x6c>)
 8042348:	2200      	movs	r2, #0
 804234a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 804234c:	4b0a      	ldr	r3, [pc, #40]	; (8042378 <SPIx_Init+0x6c>)
 804234e:	2200      	movs	r2, #0
 8042350:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8042352:	4b09      	ldr	r3, [pc, #36]	; (8042378 <SPIx_Init+0x6c>)
 8042354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042358:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 804235a:	4b07      	ldr	r3, [pc, #28]	; (8042378 <SPIx_Init+0x6c>)
 804235c:	2200      	movs	r2, #0
 804235e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8042360:	4b05      	ldr	r3, [pc, #20]	; (8042378 <SPIx_Init+0x6c>)
 8042362:	f44f 7282 	mov.w	r2, #260	; 0x104
 8042366:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8042368:	4803      	ldr	r0, [pc, #12]	; (8042378 <SPIx_Init+0x6c>)
 804236a:	f000 f853 	bl	8042414 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 804236e:	4802      	ldr	r0, [pc, #8]	; (8042378 <SPIx_Init+0x6c>)
 8042370:	f005 faa7 	bl	80478c2 <HAL_SPI_Init>
  } 
}
 8042374:	bf00      	nop
 8042376:	bd80      	pop	{r7, pc}
 8042378:	2000086c 	.word	0x2000086c
 804237c:	40015000 	.word	0x40015000

08042380 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8042380:	b580      	push	{r7, lr}
 8042382:	b084      	sub	sp, #16
 8042384:	af00      	add	r7, sp, #0
 8042386:	4603      	mov	r3, r0
 8042388:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 804238a:	2300      	movs	r3, #0
 804238c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 804238e:	79fb      	ldrb	r3, [r7, #7]
 8042390:	b29a      	uxth	r2, r3
 8042392:	4b09      	ldr	r3, [pc, #36]	; (80423b8 <SPIx_Read+0x38>)
 8042394:	681b      	ldr	r3, [r3, #0]
 8042396:	f107 0108 	add.w	r1, r7, #8
 804239a:	4808      	ldr	r0, [pc, #32]	; (80423bc <SPIx_Read+0x3c>)
 804239c:	f005 fc7e 	bl	8047c9c <HAL_SPI_Receive>
 80423a0:	4603      	mov	r3, r0
 80423a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80423a4:	7bfb      	ldrb	r3, [r7, #15]
 80423a6:	2b00      	cmp	r3, #0
 80423a8:	d001      	beq.n	80423ae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80423aa:	f000 f827 	bl	80423fc <SPIx_Error>
  }
  
  return readvalue;
 80423ae:	68bb      	ldr	r3, [r7, #8]
}
 80423b0:	4618      	mov	r0, r3
 80423b2:	3710      	adds	r7, #16
 80423b4:	46bd      	mov	sp, r7
 80423b6:	bd80      	pop	{r7, pc}
 80423b8:	2000003c 	.word	0x2000003c
 80423bc:	2000086c 	.word	0x2000086c

080423c0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80423c0:	b580      	push	{r7, lr}
 80423c2:	b084      	sub	sp, #16
 80423c4:	af00      	add	r7, sp, #0
 80423c6:	4603      	mov	r3, r0
 80423c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80423ca:	2300      	movs	r3, #0
 80423cc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80423ce:	4b09      	ldr	r3, [pc, #36]	; (80423f4 <SPIx_Write+0x34>)
 80423d0:	681b      	ldr	r3, [r3, #0]
 80423d2:	1db9      	adds	r1, r7, #6
 80423d4:	2201      	movs	r2, #1
 80423d6:	4808      	ldr	r0, [pc, #32]	; (80423f8 <SPIx_Write+0x38>)
 80423d8:	f005 fb24 	bl	8047a24 <HAL_SPI_Transmit>
 80423dc:	4603      	mov	r3, r0
 80423de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80423e0:	7bfb      	ldrb	r3, [r7, #15]
 80423e2:	2b00      	cmp	r3, #0
 80423e4:	d001      	beq.n	80423ea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80423e6:	f000 f809 	bl	80423fc <SPIx_Error>
  }
}
 80423ea:	bf00      	nop
 80423ec:	3710      	adds	r7, #16
 80423ee:	46bd      	mov	sp, r7
 80423f0:	bd80      	pop	{r7, pc}
 80423f2:	bf00      	nop
 80423f4:	2000003c 	.word	0x2000003c
 80423f8:	2000086c 	.word	0x2000086c

080423fc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80423fc:	b580      	push	{r7, lr}
 80423fe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8042400:	4803      	ldr	r0, [pc, #12]	; (8042410 <SPIx_Error+0x14>)
 8042402:	f005 fae7 	bl	80479d4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8042406:	f7ff ff81 	bl	804230c <SPIx_Init>
}
 804240a:	bf00      	nop
 804240c:	bd80      	pop	{r7, pc}
 804240e:	bf00      	nop
 8042410:	2000086c 	.word	0x2000086c

08042414 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8042414:	b580      	push	{r7, lr}
 8042416:	b08a      	sub	sp, #40	; 0x28
 8042418:	af00      	add	r7, sp, #0
 804241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 804241c:	2300      	movs	r3, #0
 804241e:	613b      	str	r3, [r7, #16]
 8042420:	4b17      	ldr	r3, [pc, #92]	; (8042480 <SPIx_MspInit+0x6c>)
 8042422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042424:	4a16      	ldr	r2, [pc, #88]	; (8042480 <SPIx_MspInit+0x6c>)
 8042426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804242a:	6453      	str	r3, [r2, #68]	; 0x44
 804242c:	4b14      	ldr	r3, [pc, #80]	; (8042480 <SPIx_MspInit+0x6c>)
 804242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042434:	613b      	str	r3, [r7, #16]
 8042436:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8042438:	2300      	movs	r3, #0
 804243a:	60fb      	str	r3, [r7, #12]
 804243c:	4b10      	ldr	r3, [pc, #64]	; (8042480 <SPIx_MspInit+0x6c>)
 804243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042440:	4a0f      	ldr	r2, [pc, #60]	; (8042480 <SPIx_MspInit+0x6c>)
 8042442:	f043 0320 	orr.w	r3, r3, #32
 8042446:	6313      	str	r3, [r2, #48]	; 0x30
 8042448:	4b0d      	ldr	r3, [pc, #52]	; (8042480 <SPIx_MspInit+0x6c>)
 804244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804244c:	f003 0320 	and.w	r3, r3, #32
 8042450:	60fb      	str	r3, [r7, #12]
 8042452:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8042454:	f44f 7360 	mov.w	r3, #896	; 0x380
 8042458:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 804245a:	2302      	movs	r3, #2
 804245c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 804245e:	2302      	movs	r3, #2
 8042460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8042462:	2301      	movs	r3, #1
 8042464:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8042466:	2305      	movs	r3, #5
 8042468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 804246a:	f107 0314 	add.w	r3, r7, #20
 804246e:	4619      	mov	r1, r3
 8042470:	4804      	ldr	r0, [pc, #16]	; (8042484 <SPIx_MspInit+0x70>)
 8042472:	f001 fe47 	bl	8044104 <HAL_GPIO_Init>
}
 8042476:	bf00      	nop
 8042478:	3728      	adds	r7, #40	; 0x28
 804247a:	46bd      	mov	sp, r7
 804247c:	bd80      	pop	{r7, pc}
 804247e:	bf00      	nop
 8042480:	40023800 	.word	0x40023800
 8042484:	40021400 	.word	0x40021400

08042488 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8042488:	b580      	push	{r7, lr}
 804248a:	b088      	sub	sp, #32
 804248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 804248e:	4b36      	ldr	r3, [pc, #216]	; (8042568 <LCD_IO_Init+0xe0>)
 8042490:	781b      	ldrb	r3, [r3, #0]
 8042492:	2b00      	cmp	r3, #0
 8042494:	d164      	bne.n	8042560 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8042496:	4b34      	ldr	r3, [pc, #208]	; (8042568 <LCD_IO_Init+0xe0>)
 8042498:	2201      	movs	r2, #1
 804249a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 804249c:	2300      	movs	r3, #0
 804249e:	60bb      	str	r3, [r7, #8]
 80424a0:	4b32      	ldr	r3, [pc, #200]	; (804256c <LCD_IO_Init+0xe4>)
 80424a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424a4:	4a31      	ldr	r2, [pc, #196]	; (804256c <LCD_IO_Init+0xe4>)
 80424a6:	f043 0308 	orr.w	r3, r3, #8
 80424aa:	6313      	str	r3, [r2, #48]	; 0x30
 80424ac:	4b2f      	ldr	r3, [pc, #188]	; (804256c <LCD_IO_Init+0xe4>)
 80424ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424b0:	f003 0308 	and.w	r3, r3, #8
 80424b4:	60bb      	str	r3, [r7, #8]
 80424b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80424b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80424bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80424be:	2301      	movs	r3, #1
 80424c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80424c2:	2300      	movs	r3, #0
 80424c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80424c6:	2302      	movs	r3, #2
 80424c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80424ca:	f107 030c 	add.w	r3, r7, #12
 80424ce:	4619      	mov	r1, r3
 80424d0:	4827      	ldr	r0, [pc, #156]	; (8042570 <LCD_IO_Init+0xe8>)
 80424d2:	f001 fe17 	bl	8044104 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80424d6:	2300      	movs	r3, #0
 80424d8:	607b      	str	r3, [r7, #4]
 80424da:	4b24      	ldr	r3, [pc, #144]	; (804256c <LCD_IO_Init+0xe4>)
 80424dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424de:	4a23      	ldr	r2, [pc, #140]	; (804256c <LCD_IO_Init+0xe4>)
 80424e0:	f043 0308 	orr.w	r3, r3, #8
 80424e4:	6313      	str	r3, [r2, #48]	; 0x30
 80424e6:	4b21      	ldr	r3, [pc, #132]	; (804256c <LCD_IO_Init+0xe4>)
 80424e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424ea:	f003 0308 	and.w	r3, r3, #8
 80424ee:	607b      	str	r3, [r7, #4]
 80424f0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80424f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80424f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80424f8:	2301      	movs	r3, #1
 80424fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80424fc:	2300      	movs	r3, #0
 80424fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8042500:	2302      	movs	r3, #2
 8042502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8042504:	f107 030c 	add.w	r3, r7, #12
 8042508:	4619      	mov	r1, r3
 804250a:	4819      	ldr	r0, [pc, #100]	; (8042570 <LCD_IO_Init+0xe8>)
 804250c:	f001 fdfa 	bl	8044104 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8042510:	2300      	movs	r3, #0
 8042512:	603b      	str	r3, [r7, #0]
 8042514:	4b15      	ldr	r3, [pc, #84]	; (804256c <LCD_IO_Init+0xe4>)
 8042516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042518:	4a14      	ldr	r2, [pc, #80]	; (804256c <LCD_IO_Init+0xe4>)
 804251a:	f043 0304 	orr.w	r3, r3, #4
 804251e:	6313      	str	r3, [r2, #48]	; 0x30
 8042520:	4b12      	ldr	r3, [pc, #72]	; (804256c <LCD_IO_Init+0xe4>)
 8042522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042524:	f003 0304 	and.w	r3, r3, #4
 8042528:	603b      	str	r3, [r7, #0]
 804252a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 804252c:	2304      	movs	r3, #4
 804252e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8042530:	2301      	movs	r3, #1
 8042532:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8042534:	2300      	movs	r3, #0
 8042536:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8042538:	2302      	movs	r3, #2
 804253a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 804253c:	f107 030c 	add.w	r3, r7, #12
 8042540:	4619      	mov	r1, r3
 8042542:	480c      	ldr	r0, [pc, #48]	; (8042574 <LCD_IO_Init+0xec>)
 8042544:	f001 fdde 	bl	8044104 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8042548:	2200      	movs	r2, #0
 804254a:	2104      	movs	r1, #4
 804254c:	4809      	ldr	r0, [pc, #36]	; (8042574 <LCD_IO_Init+0xec>)
 804254e:	f002 f891 	bl	8044674 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8042552:	2201      	movs	r2, #1
 8042554:	2104      	movs	r1, #4
 8042556:	4807      	ldr	r0, [pc, #28]	; (8042574 <LCD_IO_Init+0xec>)
 8042558:	f002 f88c 	bl	8044674 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 804255c:	f7ff fed6 	bl	804230c <SPIx_Init>
  }
}
 8042560:	bf00      	nop
 8042562:	3720      	adds	r7, #32
 8042564:	46bd      	mov	sp, r7
 8042566:	bd80      	pop	{r7, pc}
 8042568:	200008c4 	.word	0x200008c4
 804256c:	40023800 	.word	0x40023800
 8042570:	40020c00 	.word	0x40020c00
 8042574:	40020800 	.word	0x40020800

08042578 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8042578:	b580      	push	{r7, lr}
 804257a:	b082      	sub	sp, #8
 804257c:	af00      	add	r7, sp, #0
 804257e:	4603      	mov	r3, r0
 8042580:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042582:	2201      	movs	r2, #1
 8042584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042588:	480a      	ldr	r0, [pc, #40]	; (80425b4 <LCD_IO_WriteData+0x3c>)
 804258a:	f002 f873 	bl	8044674 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 804258e:	2200      	movs	r2, #0
 8042590:	2104      	movs	r1, #4
 8042592:	4809      	ldr	r0, [pc, #36]	; (80425b8 <LCD_IO_WriteData+0x40>)
 8042594:	f002 f86e 	bl	8044674 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8042598:	88fb      	ldrh	r3, [r7, #6]
 804259a:	4618      	mov	r0, r3
 804259c:	f7ff ff10 	bl	80423c0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80425a0:	2201      	movs	r2, #1
 80425a2:	2104      	movs	r1, #4
 80425a4:	4804      	ldr	r0, [pc, #16]	; (80425b8 <LCD_IO_WriteData+0x40>)
 80425a6:	f002 f865 	bl	8044674 <HAL_GPIO_WritePin>
}
 80425aa:	bf00      	nop
 80425ac:	3708      	adds	r7, #8
 80425ae:	46bd      	mov	sp, r7
 80425b0:	bd80      	pop	{r7, pc}
 80425b2:	bf00      	nop
 80425b4:	40020c00 	.word	0x40020c00
 80425b8:	40020800 	.word	0x40020800

080425bc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80425bc:	b580      	push	{r7, lr}
 80425be:	b082      	sub	sp, #8
 80425c0:	af00      	add	r7, sp, #0
 80425c2:	4603      	mov	r3, r0
 80425c4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80425c6:	2200      	movs	r2, #0
 80425c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80425cc:	480a      	ldr	r0, [pc, #40]	; (80425f8 <LCD_IO_WriteReg+0x3c>)
 80425ce:	f002 f851 	bl	8044674 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80425d2:	2200      	movs	r2, #0
 80425d4:	2104      	movs	r1, #4
 80425d6:	4809      	ldr	r0, [pc, #36]	; (80425fc <LCD_IO_WriteReg+0x40>)
 80425d8:	f002 f84c 	bl	8044674 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80425dc:	79fb      	ldrb	r3, [r7, #7]
 80425de:	b29b      	uxth	r3, r3
 80425e0:	4618      	mov	r0, r3
 80425e2:	f7ff feed 	bl	80423c0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80425e6:	2201      	movs	r2, #1
 80425e8:	2104      	movs	r1, #4
 80425ea:	4804      	ldr	r0, [pc, #16]	; (80425fc <LCD_IO_WriteReg+0x40>)
 80425ec:	f002 f842 	bl	8044674 <HAL_GPIO_WritePin>
}
 80425f0:	bf00      	nop
 80425f2:	3708      	adds	r7, #8
 80425f4:	46bd      	mov	sp, r7
 80425f6:	bd80      	pop	{r7, pc}
 80425f8:	40020c00 	.word	0x40020c00
 80425fc:	40020800 	.word	0x40020800

08042600 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8042600:	b580      	push	{r7, lr}
 8042602:	b084      	sub	sp, #16
 8042604:	af00      	add	r7, sp, #0
 8042606:	4603      	mov	r3, r0
 8042608:	460a      	mov	r2, r1
 804260a:	80fb      	strh	r3, [r7, #6]
 804260c:	4613      	mov	r3, r2
 804260e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8042610:	2300      	movs	r3, #0
 8042612:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8042614:	2200      	movs	r2, #0
 8042616:	2104      	movs	r1, #4
 8042618:	4810      	ldr	r0, [pc, #64]	; (804265c <LCD_IO_ReadData+0x5c>)
 804261a:	f002 f82b 	bl	8044674 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 804261e:	2200      	movs	r2, #0
 8042620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042624:	480e      	ldr	r0, [pc, #56]	; (8042660 <LCD_IO_ReadData+0x60>)
 8042626:	f002 f825 	bl	8044674 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 804262a:	88fb      	ldrh	r3, [r7, #6]
 804262c:	4618      	mov	r0, r3
 804262e:	f7ff fec7 	bl	80423c0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8042632:	797b      	ldrb	r3, [r7, #5]
 8042634:	4618      	mov	r0, r3
 8042636:	f7ff fea3 	bl	8042380 <SPIx_Read>
 804263a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 804263c:	2201      	movs	r2, #1
 804263e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042642:	4807      	ldr	r0, [pc, #28]	; (8042660 <LCD_IO_ReadData+0x60>)
 8042644:	f002 f816 	bl	8044674 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8042648:	2201      	movs	r2, #1
 804264a:	2104      	movs	r1, #4
 804264c:	4803      	ldr	r0, [pc, #12]	; (804265c <LCD_IO_ReadData+0x5c>)
 804264e:	f002 f811 	bl	8044674 <HAL_GPIO_WritePin>
  
  return readvalue;
 8042652:	68fb      	ldr	r3, [r7, #12]
}
 8042654:	4618      	mov	r0, r3
 8042656:	3710      	adds	r7, #16
 8042658:	46bd      	mov	sp, r7
 804265a:	bd80      	pop	{r7, pc}
 804265c:	40020800 	.word	0x40020800
 8042660:	40020c00 	.word	0x40020c00

08042664 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8042664:	b580      	push	{r7, lr}
 8042666:	b082      	sub	sp, #8
 8042668:	af00      	add	r7, sp, #0
 804266a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804266c:	6878      	ldr	r0, [r7, #4]
 804266e:	f000 fecd 	bl	804340c <HAL_Delay>
}
 8042672:	bf00      	nop
 8042674:	3708      	adds	r7, #8
 8042676:	46bd      	mov	sp, r7
 8042678:	bd80      	pop	{r7, pc}
	...

0804267c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 804267c:	b580      	push	{r7, lr}
 804267e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8042680:	4b2d      	ldr	r3, [pc, #180]	; (8042738 <BSP_LCD_Init+0xbc>)
 8042682:	4a2e      	ldr	r2, [pc, #184]	; (804273c <BSP_LCD_Init+0xc0>)
 8042684:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8042686:	4b2c      	ldr	r3, [pc, #176]	; (8042738 <BSP_LCD_Init+0xbc>)
 8042688:	2209      	movs	r2, #9
 804268a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 804268c:	4b2a      	ldr	r3, [pc, #168]	; (8042738 <BSP_LCD_Init+0xbc>)
 804268e:	2201      	movs	r2, #1
 8042690:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8042692:	4b29      	ldr	r3, [pc, #164]	; (8042738 <BSP_LCD_Init+0xbc>)
 8042694:	221d      	movs	r2, #29
 8042696:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8042698:	4b27      	ldr	r3, [pc, #156]	; (8042738 <BSP_LCD_Init+0xbc>)
 804269a:	2203      	movs	r2, #3
 804269c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 804269e:	4b26      	ldr	r3, [pc, #152]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426a0:	f240 120d 	movw	r2, #269	; 0x10d
 80426a4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80426a6:	4b24      	ldr	r3, [pc, #144]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426a8:	f240 1243 	movw	r2, #323	; 0x143
 80426ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80426ae:	4b22      	ldr	r3, [pc, #136]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426b0:	f240 1217 	movw	r2, #279	; 0x117
 80426b4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80426b6:	4b20      	ldr	r3, [pc, #128]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426b8:	f240 1247 	movw	r2, #327	; 0x147
 80426bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80426be:	4b1e      	ldr	r3, [pc, #120]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426c0:	2200      	movs	r2, #0
 80426c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80426c6:	4b1c      	ldr	r3, [pc, #112]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426c8:	2200      	movs	r2, #0
 80426ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80426ce:	4b1a      	ldr	r3, [pc, #104]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426d0:	2200      	movs	r2, #0
 80426d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80426d6:	4b1a      	ldr	r3, [pc, #104]	; (8042740 <BSP_LCD_Init+0xc4>)
 80426d8:	2208      	movs	r2, #8
 80426da:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80426dc:	4b18      	ldr	r3, [pc, #96]	; (8042740 <BSP_LCD_Init+0xc4>)
 80426de:	22c0      	movs	r2, #192	; 0xc0
 80426e0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80426e2:	4b17      	ldr	r3, [pc, #92]	; (8042740 <BSP_LCD_Init+0xc4>)
 80426e4:	2204      	movs	r2, #4
 80426e6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80426e8:	4b15      	ldr	r3, [pc, #84]	; (8042740 <BSP_LCD_Init+0xc4>)
 80426ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80426ee:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80426f0:	4813      	ldr	r0, [pc, #76]	; (8042740 <BSP_LCD_Init+0xc4>)
 80426f2:	f004 fe95 	bl	8047420 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80426f6:	4b10      	ldr	r3, [pc, #64]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426f8:	2200      	movs	r2, #0
 80426fa:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80426fc:	4b0e      	ldr	r3, [pc, #56]	; (8042738 <BSP_LCD_Init+0xbc>)
 80426fe:	2200      	movs	r2, #0
 8042700:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8042702:	4b0d      	ldr	r3, [pc, #52]	; (8042738 <BSP_LCD_Init+0xbc>)
 8042704:	2200      	movs	r2, #0
 8042706:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8042708:	4b0b      	ldr	r3, [pc, #44]	; (8042738 <BSP_LCD_Init+0xbc>)
 804270a:	2200      	movs	r2, #0
 804270c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 804270e:	f000 fa83 	bl	8042c18 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8042712:	4809      	ldr	r0, [pc, #36]	; (8042738 <BSP_LCD_Init+0xbc>)
 8042714:	f003 fdaa 	bl	804626c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8042718:	4b0a      	ldr	r3, [pc, #40]	; (8042744 <BSP_LCD_Init+0xc8>)
 804271a:	4a0b      	ldr	r2, [pc, #44]	; (8042748 <BSP_LCD_Init+0xcc>)
 804271c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 804271e:	4b09      	ldr	r3, [pc, #36]	; (8042744 <BSP_LCD_Init+0xc8>)
 8042720:	681b      	ldr	r3, [r3, #0]
 8042722:	681b      	ldr	r3, [r3, #0]
 8042724:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8042726:	f000 fc65 	bl	8042ff4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 804272a:	4808      	ldr	r0, [pc, #32]	; (804274c <BSP_LCD_Init+0xd0>)
 804272c:	f000 f920 	bl	8042970 <BSP_LCD_SetFont>

  return LCD_OK;
 8042730:	2300      	movs	r3, #0
}  
 8042732:	4618      	mov	r0, r3
 8042734:	bd80      	pop	{r7, pc}
 8042736:	bf00      	nop
 8042738:	200008c8 	.word	0x200008c8
 804273c:	40016800 	.word	0x40016800
 8042740:	200009b0 	.word	0x200009b0
 8042744:	200009fc 	.word	0x200009fc
 8042748:	20000004 	.word	0x20000004
 804274c:	20000040 	.word	0x20000040

08042750 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8042750:	b580      	push	{r7, lr}
 8042752:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8042754:	4b03      	ldr	r3, [pc, #12]	; (8042764 <BSP_LCD_GetXSize+0x14>)
 8042756:	681b      	ldr	r3, [r3, #0]
 8042758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804275a:	4798      	blx	r3
 804275c:	4603      	mov	r3, r0
}
 804275e:	4618      	mov	r0, r3
 8042760:	bd80      	pop	{r7, pc}
 8042762:	bf00      	nop
 8042764:	200009fc 	.word	0x200009fc

08042768 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8042768:	b580      	push	{r7, lr}
 804276a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 804276c:	4b03      	ldr	r3, [pc, #12]	; (804277c <BSP_LCD_GetYSize+0x14>)
 804276e:	681b      	ldr	r3, [r3, #0]
 8042770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042772:	4798      	blx	r3
 8042774:	4603      	mov	r3, r0
}
 8042776:	4618      	mov	r0, r3
 8042778:	bd80      	pop	{r7, pc}
 804277a:	bf00      	nop
 804277c:	200009fc 	.word	0x200009fc

08042780 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8042780:	b580      	push	{r7, lr}
 8042782:	b090      	sub	sp, #64	; 0x40
 8042784:	af00      	add	r7, sp, #0
 8042786:	4603      	mov	r3, r0
 8042788:	6039      	str	r1, [r7, #0]
 804278a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 804278c:	2300      	movs	r3, #0
 804278e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8042790:	f7ff ffde 	bl	8042750 <BSP_LCD_GetXSize>
 8042794:	4603      	mov	r3, r0
 8042796:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8042798:	2300      	movs	r3, #0
 804279a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 804279c:	f7ff ffe4 	bl	8042768 <BSP_LCD_GetYSize>
 80427a0:	4603      	mov	r3, r0
 80427a2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80427a4:	2300      	movs	r3, #0
 80427a6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80427a8:	683b      	ldr	r3, [r7, #0]
 80427aa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80427ac:	23ff      	movs	r3, #255	; 0xff
 80427ae:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80427b0:	2300      	movs	r3, #0
 80427b2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80427b4:	2300      	movs	r3, #0
 80427b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80427ba:	2300      	movs	r3, #0
 80427bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80427c0:	2300      	movs	r3, #0
 80427c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80427c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80427ca:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80427cc:	2307      	movs	r3, #7
 80427ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80427d0:	f7ff ffbe 	bl	8042750 <BSP_LCD_GetXSize>
 80427d4:	4603      	mov	r3, r0
 80427d6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80427d8:	f7ff ffc6 	bl	8042768 <BSP_LCD_GetYSize>
 80427dc:	4603      	mov	r3, r0
 80427de:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80427e0:	88fa      	ldrh	r2, [r7, #6]
 80427e2:	f107 030c 	add.w	r3, r7, #12
 80427e6:	4619      	mov	r1, r3
 80427e8:	4814      	ldr	r0, [pc, #80]	; (804283c <BSP_LCD_LayerDefaultInit+0xbc>)
 80427ea:	f003 fed1 	bl	8046590 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80427ee:	88fa      	ldrh	r2, [r7, #6]
 80427f0:	4913      	ldr	r1, [pc, #76]	; (8042840 <BSP_LCD_LayerDefaultInit+0xc0>)
 80427f2:	4613      	mov	r3, r2
 80427f4:	005b      	lsls	r3, r3, #1
 80427f6:	4413      	add	r3, r2
 80427f8:	009b      	lsls	r3, r3, #2
 80427fa:	440b      	add	r3, r1
 80427fc:	3304      	adds	r3, #4
 80427fe:	f04f 32ff 	mov.w	r2, #4294967295
 8042802:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8042804:	88fa      	ldrh	r2, [r7, #6]
 8042806:	490e      	ldr	r1, [pc, #56]	; (8042840 <BSP_LCD_LayerDefaultInit+0xc0>)
 8042808:	4613      	mov	r3, r2
 804280a:	005b      	lsls	r3, r3, #1
 804280c:	4413      	add	r3, r2
 804280e:	009b      	lsls	r3, r3, #2
 8042810:	440b      	add	r3, r1
 8042812:	3308      	adds	r3, #8
 8042814:	4a0b      	ldr	r2, [pc, #44]	; (8042844 <BSP_LCD_LayerDefaultInit+0xc4>)
 8042816:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8042818:	88fa      	ldrh	r2, [r7, #6]
 804281a:	4909      	ldr	r1, [pc, #36]	; (8042840 <BSP_LCD_LayerDefaultInit+0xc0>)
 804281c:	4613      	mov	r3, r2
 804281e:	005b      	lsls	r3, r3, #1
 8042820:	4413      	add	r3, r2
 8042822:	009b      	lsls	r3, r3, #2
 8042824:	440b      	add	r3, r1
 8042826:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 804282a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 804282c:	4803      	ldr	r0, [pc, #12]	; (804283c <BSP_LCD_LayerDefaultInit+0xbc>)
 804282e:	f003 ff6b 	bl	8046708 <HAL_LTDC_EnableDither>
}
 8042832:	bf00      	nop
 8042834:	3740      	adds	r7, #64	; 0x40
 8042836:	46bd      	mov	sp, r7
 8042838:	bd80      	pop	{r7, pc}
 804283a:	bf00      	nop
 804283c:	200008c8 	.word	0x200008c8
 8042840:	200009e4 	.word	0x200009e4
 8042844:	20000040 	.word	0x20000040

08042848 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8042848:	b480      	push	{r7}
 804284a:	b083      	sub	sp, #12
 804284c:	af00      	add	r7, sp, #0
 804284e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8042850:	4a04      	ldr	r2, [pc, #16]	; (8042864 <BSP_LCD_SelectLayer+0x1c>)
 8042852:	687b      	ldr	r3, [r7, #4]
 8042854:	6013      	str	r3, [r2, #0]
}
 8042856:	bf00      	nop
 8042858:	370c      	adds	r7, #12
 804285a:	46bd      	mov	sp, r7
 804285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042860:	4770      	bx	lr
 8042862:	bf00      	nop
 8042864:	200009e0 	.word	0x200009e0

08042868 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8042868:	b480      	push	{r7}
 804286a:	b083      	sub	sp, #12
 804286c:	af00      	add	r7, sp, #0
 804286e:	6078      	str	r0, [r7, #4]
 8042870:	460b      	mov	r3, r1
 8042872:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8042874:	78fb      	ldrb	r3, [r7, #3]
 8042876:	2b01      	cmp	r3, #1
 8042878:	d112      	bne.n	80428a0 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 804287a:	4b19      	ldr	r3, [pc, #100]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 804287c:	681b      	ldr	r3, [r3, #0]
 804287e:	461a      	mov	r2, r3
 8042880:	687b      	ldr	r3, [r7, #4]
 8042882:	01db      	lsls	r3, r3, #7
 8042884:	4413      	add	r3, r2
 8042886:	3384      	adds	r3, #132	; 0x84
 8042888:	681b      	ldr	r3, [r3, #0]
 804288a:	4a15      	ldr	r2, [pc, #84]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 804288c:	6812      	ldr	r2, [r2, #0]
 804288e:	4611      	mov	r1, r2
 8042890:	687a      	ldr	r2, [r7, #4]
 8042892:	01d2      	lsls	r2, r2, #7
 8042894:	440a      	add	r2, r1
 8042896:	3284      	adds	r2, #132	; 0x84
 8042898:	f043 0301 	orr.w	r3, r3, #1
 804289c:	6013      	str	r3, [r2, #0]
 804289e:	e011      	b.n	80428c4 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80428a0:	4b0f      	ldr	r3, [pc, #60]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 80428a2:	681b      	ldr	r3, [r3, #0]
 80428a4:	461a      	mov	r2, r3
 80428a6:	687b      	ldr	r3, [r7, #4]
 80428a8:	01db      	lsls	r3, r3, #7
 80428aa:	4413      	add	r3, r2
 80428ac:	3384      	adds	r3, #132	; 0x84
 80428ae:	681b      	ldr	r3, [r3, #0]
 80428b0:	4a0b      	ldr	r2, [pc, #44]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 80428b2:	6812      	ldr	r2, [r2, #0]
 80428b4:	4611      	mov	r1, r2
 80428b6:	687a      	ldr	r2, [r7, #4]
 80428b8:	01d2      	lsls	r2, r2, #7
 80428ba:	440a      	add	r2, r1
 80428bc:	3284      	adds	r2, #132	; 0x84
 80428be:	f023 0301 	bic.w	r3, r3, #1
 80428c2:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80428c4:	4b06      	ldr	r3, [pc, #24]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 80428c6:	681b      	ldr	r3, [r3, #0]
 80428c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80428ca:	4b05      	ldr	r3, [pc, #20]	; (80428e0 <BSP_LCD_SetLayerVisible+0x78>)
 80428cc:	681b      	ldr	r3, [r3, #0]
 80428ce:	f042 0201 	orr.w	r2, r2, #1
 80428d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80428d4:	bf00      	nop
 80428d6:	370c      	adds	r7, #12
 80428d8:	46bd      	mov	sp, r7
 80428da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428de:	4770      	bx	lr
 80428e0:	200008c8 	.word	0x200008c8

080428e4 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80428e4:	b580      	push	{r7, lr}
 80428e6:	b082      	sub	sp, #8
 80428e8:	af00      	add	r7, sp, #0
 80428ea:	6078      	str	r0, [r7, #4]
 80428ec:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80428ee:	687a      	ldr	r2, [r7, #4]
 80428f0:	6839      	ldr	r1, [r7, #0]
 80428f2:	4805      	ldr	r0, [pc, #20]	; (8042908 <BSP_LCD_SetColorKeying+0x24>)
 80428f4:	f003 fe8a 	bl	804660c <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80428f8:	6879      	ldr	r1, [r7, #4]
 80428fa:	4803      	ldr	r0, [pc, #12]	; (8042908 <BSP_LCD_SetColorKeying+0x24>)
 80428fc:	f003 feca 	bl	8046694 <HAL_LTDC_EnableColorKeying>
}
 8042900:	bf00      	nop
 8042902:	3708      	adds	r7, #8
 8042904:	46bd      	mov	sp, r7
 8042906:	bd80      	pop	{r7, pc}
 8042908:	200008c8 	.word	0x200008c8

0804290c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 804290c:	b480      	push	{r7}
 804290e:	b083      	sub	sp, #12
 8042910:	af00      	add	r7, sp, #0
 8042912:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8042914:	4b07      	ldr	r3, [pc, #28]	; (8042934 <BSP_LCD_SetTextColor+0x28>)
 8042916:	681a      	ldr	r2, [r3, #0]
 8042918:	4907      	ldr	r1, [pc, #28]	; (8042938 <BSP_LCD_SetTextColor+0x2c>)
 804291a:	4613      	mov	r3, r2
 804291c:	005b      	lsls	r3, r3, #1
 804291e:	4413      	add	r3, r2
 8042920:	009b      	lsls	r3, r3, #2
 8042922:	440b      	add	r3, r1
 8042924:	687a      	ldr	r2, [r7, #4]
 8042926:	601a      	str	r2, [r3, #0]
}
 8042928:	bf00      	nop
 804292a:	370c      	adds	r7, #12
 804292c:	46bd      	mov	sp, r7
 804292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042932:	4770      	bx	lr
 8042934:	200009e0 	.word	0x200009e0
 8042938:	200009e4 	.word	0x200009e4

0804293c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 804293c:	b480      	push	{r7}
 804293e:	b083      	sub	sp, #12
 8042940:	af00      	add	r7, sp, #0
 8042942:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8042944:	4b08      	ldr	r3, [pc, #32]	; (8042968 <BSP_LCD_SetBackColor+0x2c>)
 8042946:	681a      	ldr	r2, [r3, #0]
 8042948:	4908      	ldr	r1, [pc, #32]	; (804296c <BSP_LCD_SetBackColor+0x30>)
 804294a:	4613      	mov	r3, r2
 804294c:	005b      	lsls	r3, r3, #1
 804294e:	4413      	add	r3, r2
 8042950:	009b      	lsls	r3, r3, #2
 8042952:	440b      	add	r3, r1
 8042954:	3304      	adds	r3, #4
 8042956:	687a      	ldr	r2, [r7, #4]
 8042958:	601a      	str	r2, [r3, #0]
}
 804295a:	bf00      	nop
 804295c:	370c      	adds	r7, #12
 804295e:	46bd      	mov	sp, r7
 8042960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042964:	4770      	bx	lr
 8042966:	bf00      	nop
 8042968:	200009e0 	.word	0x200009e0
 804296c:	200009e4 	.word	0x200009e4

08042970 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8042970:	b480      	push	{r7}
 8042972:	b083      	sub	sp, #12
 8042974:	af00      	add	r7, sp, #0
 8042976:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8042978:	4b08      	ldr	r3, [pc, #32]	; (804299c <BSP_LCD_SetFont+0x2c>)
 804297a:	681a      	ldr	r2, [r3, #0]
 804297c:	4908      	ldr	r1, [pc, #32]	; (80429a0 <BSP_LCD_SetFont+0x30>)
 804297e:	4613      	mov	r3, r2
 8042980:	005b      	lsls	r3, r3, #1
 8042982:	4413      	add	r3, r2
 8042984:	009b      	lsls	r3, r3, #2
 8042986:	440b      	add	r3, r1
 8042988:	3308      	adds	r3, #8
 804298a:	687a      	ldr	r2, [r7, #4]
 804298c:	601a      	str	r2, [r3, #0]
}
 804298e:	bf00      	nop
 8042990:	370c      	adds	r7, #12
 8042992:	46bd      	mov	sp, r7
 8042994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042998:	4770      	bx	lr
 804299a:	bf00      	nop
 804299c:	200009e0 	.word	0x200009e0
 80429a0:	200009e4 	.word	0x200009e4

080429a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80429a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80429a6:	b085      	sub	sp, #20
 80429a8:	af02      	add	r7, sp, #8
 80429aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80429ac:	4b0f      	ldr	r3, [pc, #60]	; (80429ec <BSP_LCD_Clear+0x48>)
 80429ae:	681c      	ldr	r4, [r3, #0]
 80429b0:	4b0e      	ldr	r3, [pc, #56]	; (80429ec <BSP_LCD_Clear+0x48>)
 80429b2:	681b      	ldr	r3, [r3, #0]
 80429b4:	4a0e      	ldr	r2, [pc, #56]	; (80429f0 <BSP_LCD_Clear+0x4c>)
 80429b6:	2134      	movs	r1, #52	; 0x34
 80429b8:	fb01 f303 	mul.w	r3, r1, r3
 80429bc:	4413      	add	r3, r2
 80429be:	335c      	adds	r3, #92	; 0x5c
 80429c0:	681b      	ldr	r3, [r3, #0]
 80429c2:	461e      	mov	r6, r3
 80429c4:	f7ff fec4 	bl	8042750 <BSP_LCD_GetXSize>
 80429c8:	4605      	mov	r5, r0
 80429ca:	f7ff fecd 	bl	8042768 <BSP_LCD_GetYSize>
 80429ce:	4602      	mov	r2, r0
 80429d0:	687b      	ldr	r3, [r7, #4]
 80429d2:	9301      	str	r3, [sp, #4]
 80429d4:	2300      	movs	r3, #0
 80429d6:	9300      	str	r3, [sp, #0]
 80429d8:	4613      	mov	r3, r2
 80429da:	462a      	mov	r2, r5
 80429dc:	4631      	mov	r1, r6
 80429de:	4620      	mov	r0, r4
 80429e0:	f000 fad0 	bl	8042f84 <FillBuffer>
}
 80429e4:	bf00      	nop
 80429e6:	370c      	adds	r7, #12
 80429e8:	46bd      	mov	sp, r7
 80429ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80429ec:	200009e0 	.word	0x200009e0
 80429f0:	200008c8 	.word	0x200008c8

080429f4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80429f4:	b590      	push	{r4, r7, lr}
 80429f6:	b083      	sub	sp, #12
 80429f8:	af00      	add	r7, sp, #0
 80429fa:	4603      	mov	r3, r0
 80429fc:	80fb      	strh	r3, [r7, #6]
 80429fe:	460b      	mov	r3, r1
 8042a00:	80bb      	strh	r3, [r7, #4]
 8042a02:	4613      	mov	r3, r2
 8042a04:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042a06:	4b1b      	ldr	r3, [pc, #108]	; (8042a74 <BSP_LCD_DisplayChar+0x80>)
 8042a08:	681a      	ldr	r2, [r3, #0]
 8042a0a:	491b      	ldr	r1, [pc, #108]	; (8042a78 <BSP_LCD_DisplayChar+0x84>)
 8042a0c:	4613      	mov	r3, r2
 8042a0e:	005b      	lsls	r3, r3, #1
 8042a10:	4413      	add	r3, r2
 8042a12:	009b      	lsls	r3, r3, #2
 8042a14:	440b      	add	r3, r1
 8042a16:	3308      	adds	r3, #8
 8042a18:	681b      	ldr	r3, [r3, #0]
 8042a1a:	6819      	ldr	r1, [r3, #0]
 8042a1c:	78fb      	ldrb	r3, [r7, #3]
 8042a1e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042a22:	4b14      	ldr	r3, [pc, #80]	; (8042a74 <BSP_LCD_DisplayChar+0x80>)
 8042a24:	681a      	ldr	r2, [r3, #0]
 8042a26:	4c14      	ldr	r4, [pc, #80]	; (8042a78 <BSP_LCD_DisplayChar+0x84>)
 8042a28:	4613      	mov	r3, r2
 8042a2a:	005b      	lsls	r3, r3, #1
 8042a2c:	4413      	add	r3, r2
 8042a2e:	009b      	lsls	r3, r3, #2
 8042a30:	4423      	add	r3, r4
 8042a32:	3308      	adds	r3, #8
 8042a34:	681b      	ldr	r3, [r3, #0]
 8042a36:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042a38:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042a3c:	4b0d      	ldr	r3, [pc, #52]	; (8042a74 <BSP_LCD_DisplayChar+0x80>)
 8042a3e:	681a      	ldr	r2, [r3, #0]
 8042a40:	4c0d      	ldr	r4, [pc, #52]	; (8042a78 <BSP_LCD_DisplayChar+0x84>)
 8042a42:	4613      	mov	r3, r2
 8042a44:	005b      	lsls	r3, r3, #1
 8042a46:	4413      	add	r3, r2
 8042a48:	009b      	lsls	r3, r3, #2
 8042a4a:	4423      	add	r3, r4
 8042a4c:	3308      	adds	r3, #8
 8042a4e:	681b      	ldr	r3, [r3, #0]
 8042a50:	889b      	ldrh	r3, [r3, #4]
 8042a52:	3307      	adds	r3, #7
 8042a54:	2b00      	cmp	r3, #0
 8042a56:	da00      	bge.n	8042a5a <BSP_LCD_DisplayChar+0x66>
 8042a58:	3307      	adds	r3, #7
 8042a5a:	10db      	asrs	r3, r3, #3
 8042a5c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042a60:	18ca      	adds	r2, r1, r3
 8042a62:	88b9      	ldrh	r1, [r7, #4]
 8042a64:	88fb      	ldrh	r3, [r7, #6]
 8042a66:	4618      	mov	r0, r3
 8042a68:	f000 f9d2 	bl	8042e10 <DrawChar>
}
 8042a6c:	bf00      	nop
 8042a6e:	370c      	adds	r7, #12
 8042a70:	46bd      	mov	sp, r7
 8042a72:	bd90      	pop	{r4, r7, pc}
 8042a74:	200009e0 	.word	0x200009e0
 8042a78:	200009e4 	.word	0x200009e4

08042a7c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8042a7c:	b5b0      	push	{r4, r5, r7, lr}
 8042a7e:	b088      	sub	sp, #32
 8042a80:	af00      	add	r7, sp, #0
 8042a82:	60ba      	str	r2, [r7, #8]
 8042a84:	461a      	mov	r2, r3
 8042a86:	4603      	mov	r3, r0
 8042a88:	81fb      	strh	r3, [r7, #14]
 8042a8a:	460b      	mov	r3, r1
 8042a8c:	81bb      	strh	r3, [r7, #12]
 8042a8e:	4613      	mov	r3, r2
 8042a90:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8042a92:	2301      	movs	r3, #1
 8042a94:	83fb      	strh	r3, [r7, #30]
 8042a96:	2300      	movs	r3, #0
 8042a98:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8042a9a:	2300      	movs	r3, #0
 8042a9c:	61bb      	str	r3, [r7, #24]
 8042a9e:	2300      	movs	r3, #0
 8042aa0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8042aa2:	68bb      	ldr	r3, [r7, #8]
 8042aa4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8042aa6:	e002      	b.n	8042aae <BSP_LCD_DisplayStringAt+0x32>
 8042aa8:	69bb      	ldr	r3, [r7, #24]
 8042aaa:	3301      	adds	r3, #1
 8042aac:	61bb      	str	r3, [r7, #24]
 8042aae:	697b      	ldr	r3, [r7, #20]
 8042ab0:	1c5a      	adds	r2, r3, #1
 8042ab2:	617a      	str	r2, [r7, #20]
 8042ab4:	781b      	ldrb	r3, [r3, #0]
 8042ab6:	2b00      	cmp	r3, #0
 8042ab8:	d1f6      	bne.n	8042aa8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8042aba:	f7ff fe49 	bl	8042750 <BSP_LCD_GetXSize>
 8042abe:	4601      	mov	r1, r0
 8042ac0:	4b4b      	ldr	r3, [pc, #300]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042ac2:	681a      	ldr	r2, [r3, #0]
 8042ac4:	484b      	ldr	r0, [pc, #300]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042ac6:	4613      	mov	r3, r2
 8042ac8:	005b      	lsls	r3, r3, #1
 8042aca:	4413      	add	r3, r2
 8042acc:	009b      	lsls	r3, r3, #2
 8042ace:	4403      	add	r3, r0
 8042ad0:	3308      	adds	r3, #8
 8042ad2:	681b      	ldr	r3, [r3, #0]
 8042ad4:	889b      	ldrh	r3, [r3, #4]
 8042ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8042ada:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8042adc:	79fb      	ldrb	r3, [r7, #7]
 8042ade:	2b03      	cmp	r3, #3
 8042ae0:	d01c      	beq.n	8042b1c <BSP_LCD_DisplayStringAt+0xa0>
 8042ae2:	2b03      	cmp	r3, #3
 8042ae4:	dc33      	bgt.n	8042b4e <BSP_LCD_DisplayStringAt+0xd2>
 8042ae6:	2b01      	cmp	r3, #1
 8042ae8:	d002      	beq.n	8042af0 <BSP_LCD_DisplayStringAt+0x74>
 8042aea:	2b02      	cmp	r3, #2
 8042aec:	d019      	beq.n	8042b22 <BSP_LCD_DisplayStringAt+0xa6>
 8042aee:	e02e      	b.n	8042b4e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8042af0:	693a      	ldr	r2, [r7, #16]
 8042af2:	69bb      	ldr	r3, [r7, #24]
 8042af4:	1ad1      	subs	r1, r2, r3
 8042af6:	4b3e      	ldr	r3, [pc, #248]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042af8:	681a      	ldr	r2, [r3, #0]
 8042afa:	483e      	ldr	r0, [pc, #248]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042afc:	4613      	mov	r3, r2
 8042afe:	005b      	lsls	r3, r3, #1
 8042b00:	4413      	add	r3, r2
 8042b02:	009b      	lsls	r3, r3, #2
 8042b04:	4403      	add	r3, r0
 8042b06:	3308      	adds	r3, #8
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	889b      	ldrh	r3, [r3, #4]
 8042b0c:	fb01 f303 	mul.w	r3, r1, r3
 8042b10:	085b      	lsrs	r3, r3, #1
 8042b12:	b29a      	uxth	r2, r3
 8042b14:	89fb      	ldrh	r3, [r7, #14]
 8042b16:	4413      	add	r3, r2
 8042b18:	83fb      	strh	r3, [r7, #30]
      break;
 8042b1a:	e01b      	b.n	8042b54 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8042b1c:	89fb      	ldrh	r3, [r7, #14]
 8042b1e:	83fb      	strh	r3, [r7, #30]
      break;
 8042b20:	e018      	b.n	8042b54 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8042b22:	693a      	ldr	r2, [r7, #16]
 8042b24:	69bb      	ldr	r3, [r7, #24]
 8042b26:	1ad3      	subs	r3, r2, r3
 8042b28:	b299      	uxth	r1, r3
 8042b2a:	4b31      	ldr	r3, [pc, #196]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042b2c:	681a      	ldr	r2, [r3, #0]
 8042b2e:	4831      	ldr	r0, [pc, #196]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042b30:	4613      	mov	r3, r2
 8042b32:	005b      	lsls	r3, r3, #1
 8042b34:	4413      	add	r3, r2
 8042b36:	009b      	lsls	r3, r3, #2
 8042b38:	4403      	add	r3, r0
 8042b3a:	3308      	adds	r3, #8
 8042b3c:	681b      	ldr	r3, [r3, #0]
 8042b3e:	889b      	ldrh	r3, [r3, #4]
 8042b40:	fb11 f303 	smulbb	r3, r1, r3
 8042b44:	b29a      	uxth	r2, r3
 8042b46:	89fb      	ldrh	r3, [r7, #14]
 8042b48:	4413      	add	r3, r2
 8042b4a:	83fb      	strh	r3, [r7, #30]
      break;
 8042b4c:	e002      	b.n	8042b54 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8042b4e:	89fb      	ldrh	r3, [r7, #14]
 8042b50:	83fb      	strh	r3, [r7, #30]
      break;
 8042b52:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042b54:	e01a      	b.n	8042b8c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8042b56:	68bb      	ldr	r3, [r7, #8]
 8042b58:	781a      	ldrb	r2, [r3, #0]
 8042b5a:	89b9      	ldrh	r1, [r7, #12]
 8042b5c:	8bfb      	ldrh	r3, [r7, #30]
 8042b5e:	4618      	mov	r0, r3
 8042b60:	f7ff ff48 	bl	80429f4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8042b64:	4b22      	ldr	r3, [pc, #136]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042b66:	681a      	ldr	r2, [r3, #0]
 8042b68:	4922      	ldr	r1, [pc, #136]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042b6a:	4613      	mov	r3, r2
 8042b6c:	005b      	lsls	r3, r3, #1
 8042b6e:	4413      	add	r3, r2
 8042b70:	009b      	lsls	r3, r3, #2
 8042b72:	440b      	add	r3, r1
 8042b74:	3308      	adds	r3, #8
 8042b76:	681b      	ldr	r3, [r3, #0]
 8042b78:	889a      	ldrh	r2, [r3, #4]
 8042b7a:	8bfb      	ldrh	r3, [r7, #30]
 8042b7c:	4413      	add	r3, r2
 8042b7e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8042b80:	68bb      	ldr	r3, [r7, #8]
 8042b82:	3301      	adds	r3, #1
 8042b84:	60bb      	str	r3, [r7, #8]
    i++;
 8042b86:	8bbb      	ldrh	r3, [r7, #28]
 8042b88:	3301      	adds	r3, #1
 8042b8a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042b8c:	68bb      	ldr	r3, [r7, #8]
 8042b8e:	781b      	ldrb	r3, [r3, #0]
 8042b90:	2b00      	cmp	r3, #0
 8042b92:	bf14      	ite	ne
 8042b94:	2301      	movne	r3, #1
 8042b96:	2300      	moveq	r3, #0
 8042b98:	b2dc      	uxtb	r4, r3
 8042b9a:	f7ff fdd9 	bl	8042750 <BSP_LCD_GetXSize>
 8042b9e:	8bb9      	ldrh	r1, [r7, #28]
 8042ba0:	4b13      	ldr	r3, [pc, #76]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042ba2:	681a      	ldr	r2, [r3, #0]
 8042ba4:	4d13      	ldr	r5, [pc, #76]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042ba6:	4613      	mov	r3, r2
 8042ba8:	005b      	lsls	r3, r3, #1
 8042baa:	4413      	add	r3, r2
 8042bac:	009b      	lsls	r3, r3, #2
 8042bae:	442b      	add	r3, r5
 8042bb0:	3308      	adds	r3, #8
 8042bb2:	681b      	ldr	r3, [r3, #0]
 8042bb4:	889b      	ldrh	r3, [r3, #4]
 8042bb6:	fb01 f303 	mul.w	r3, r1, r3
 8042bba:	1ac3      	subs	r3, r0, r3
 8042bbc:	b299      	uxth	r1, r3
 8042bbe:	4b0c      	ldr	r3, [pc, #48]	; (8042bf0 <BSP_LCD_DisplayStringAt+0x174>)
 8042bc0:	681a      	ldr	r2, [r3, #0]
 8042bc2:	480c      	ldr	r0, [pc, #48]	; (8042bf4 <BSP_LCD_DisplayStringAt+0x178>)
 8042bc4:	4613      	mov	r3, r2
 8042bc6:	005b      	lsls	r3, r3, #1
 8042bc8:	4413      	add	r3, r2
 8042bca:	009b      	lsls	r3, r3, #2
 8042bcc:	4403      	add	r3, r0
 8042bce:	3308      	adds	r3, #8
 8042bd0:	681b      	ldr	r3, [r3, #0]
 8042bd2:	889b      	ldrh	r3, [r3, #4]
 8042bd4:	4299      	cmp	r1, r3
 8042bd6:	bf2c      	ite	cs
 8042bd8:	2301      	movcs	r3, #1
 8042bda:	2300      	movcc	r3, #0
 8042bdc:	b2db      	uxtb	r3, r3
 8042bde:	4023      	ands	r3, r4
 8042be0:	b2db      	uxtb	r3, r3
 8042be2:	2b00      	cmp	r3, #0
 8042be4:	d1b7      	bne.n	8042b56 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8042be6:	bf00      	nop
 8042be8:	bf00      	nop
 8042bea:	3720      	adds	r7, #32
 8042bec:	46bd      	mov	sp, r7
 8042bee:	bdb0      	pop	{r4, r5, r7, pc}
 8042bf0:	200009e0 	.word	0x200009e0
 8042bf4:	200009e4 	.word	0x200009e4

08042bf8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8042bf8:	b580      	push	{r7, lr}
 8042bfa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8042bfc:	4b05      	ldr	r3, [pc, #20]	; (8042c14 <BSP_LCD_DisplayOn+0x1c>)
 8042bfe:	681b      	ldr	r3, [r3, #0]
 8042c00:	689b      	ldr	r3, [r3, #8]
 8042c02:	2b00      	cmp	r3, #0
 8042c04:	d003      	beq.n	8042c0e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8042c06:	4b03      	ldr	r3, [pc, #12]	; (8042c14 <BSP_LCD_DisplayOn+0x1c>)
 8042c08:	681b      	ldr	r3, [r3, #0]
 8042c0a:	689b      	ldr	r3, [r3, #8]
 8042c0c:	4798      	blx	r3
  }
}
 8042c0e:	bf00      	nop
 8042c10:	bd80      	pop	{r7, pc}
 8042c12:	bf00      	nop
 8042c14:	200009fc 	.word	0x200009fc

08042c18 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8042c18:	b580      	push	{r7, lr}
 8042c1a:	b08e      	sub	sp, #56	; 0x38
 8042c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8042c1e:	2300      	movs	r3, #0
 8042c20:	623b      	str	r3, [r7, #32]
 8042c22:	4b61      	ldr	r3, [pc, #388]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042c26:	4a60      	ldr	r2, [pc, #384]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8042c2e:	4b5e      	ldr	r3, [pc, #376]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042c36:	623b      	str	r3, [r7, #32]
 8042c38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8042c3a:	2300      	movs	r3, #0
 8042c3c:	61fb      	str	r3, [r7, #28]
 8042c3e:	4b5a      	ldr	r3, [pc, #360]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c42:	4a59      	ldr	r2, [pc, #356]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8042c48:	6313      	str	r3, [r2, #48]	; 0x30
 8042c4a:	4b57      	ldr	r3, [pc, #348]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042c52:	61fb      	str	r3, [r7, #28]
 8042c54:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8042c56:	2300      	movs	r3, #0
 8042c58:	61bb      	str	r3, [r7, #24]
 8042c5a:	4b53      	ldr	r3, [pc, #332]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c5e:	4a52      	ldr	r2, [pc, #328]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c60:	f043 0301 	orr.w	r3, r3, #1
 8042c64:	6313      	str	r3, [r2, #48]	; 0x30
 8042c66:	4b50      	ldr	r3, [pc, #320]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c6a:	f003 0301 	and.w	r3, r3, #1
 8042c6e:	61bb      	str	r3, [r7, #24]
 8042c70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042c72:	2300      	movs	r3, #0
 8042c74:	617b      	str	r3, [r7, #20]
 8042c76:	4b4c      	ldr	r3, [pc, #304]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c7a:	4a4b      	ldr	r2, [pc, #300]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c7c:	f043 0302 	orr.w	r3, r3, #2
 8042c80:	6313      	str	r3, [r2, #48]	; 0x30
 8042c82:	4b49      	ldr	r3, [pc, #292]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c86:	f003 0302 	and.w	r3, r3, #2
 8042c8a:	617b      	str	r3, [r7, #20]
 8042c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042c8e:	2300      	movs	r3, #0
 8042c90:	613b      	str	r3, [r7, #16]
 8042c92:	4b45      	ldr	r3, [pc, #276]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042c96:	4a44      	ldr	r2, [pc, #272]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042c98:	f043 0304 	orr.w	r3, r3, #4
 8042c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8042c9e:	4b42      	ldr	r3, [pc, #264]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042ca2:	f003 0304 	and.w	r3, r3, #4
 8042ca6:	613b      	str	r3, [r7, #16]
 8042ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042caa:	2300      	movs	r3, #0
 8042cac:	60fb      	str	r3, [r7, #12]
 8042cae:	4b3e      	ldr	r3, [pc, #248]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cb2:	4a3d      	ldr	r2, [pc, #244]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cb4:	f043 0308 	orr.w	r3, r3, #8
 8042cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8042cba:	4b3b      	ldr	r3, [pc, #236]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cbe:	f003 0308 	and.w	r3, r3, #8
 8042cc2:	60fb      	str	r3, [r7, #12]
 8042cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042cc6:	2300      	movs	r3, #0
 8042cc8:	60bb      	str	r3, [r7, #8]
 8042cca:	4b37      	ldr	r3, [pc, #220]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cce:	4a36      	ldr	r2, [pc, #216]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cd0:	f043 0320 	orr.w	r3, r3, #32
 8042cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8042cd6:	4b34      	ldr	r3, [pc, #208]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cda:	f003 0320 	and.w	r3, r3, #32
 8042cde:	60bb      	str	r3, [r7, #8]
 8042ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042ce2:	2300      	movs	r3, #0
 8042ce4:	607b      	str	r3, [r7, #4]
 8042ce6:	4b30      	ldr	r3, [pc, #192]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cea:	4a2f      	ldr	r2, [pc, #188]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8042cf2:	4b2d      	ldr	r3, [pc, #180]	; (8042da8 <BSP_LCD_MspInit+0x190>)
 8042cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042cfa:	607b      	str	r3, [r7, #4]
 8042cfc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8042cfe:	f641 0358 	movw	r3, #6232	; 0x1858
 8042d02:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8042d04:	2302      	movs	r3, #2
 8042d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8042d08:	2300      	movs	r3, #0
 8042d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042d0c:	2302      	movs	r3, #2
 8042d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8042d10:	230e      	movs	r3, #14
 8042d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8042d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d18:	4619      	mov	r1, r3
 8042d1a:	4824      	ldr	r0, [pc, #144]	; (8042dac <BSP_LCD_MspInit+0x194>)
 8042d1c:	f001 f9f2 	bl	8044104 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8042d20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8042d24:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d2a:	4619      	mov	r1, r3
 8042d2c:	4820      	ldr	r0, [pc, #128]	; (8042db0 <BSP_LCD_MspInit+0x198>)
 8042d2e:	f001 f9e9 	bl	8044104 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8042d32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8042d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8042d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d3c:	4619      	mov	r1, r3
 8042d3e:	481d      	ldr	r0, [pc, #116]	; (8042db4 <BSP_LCD_MspInit+0x19c>)
 8042d40:	f001 f9e0 	bl	8044104 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8042d44:	2348      	movs	r3, #72	; 0x48
 8042d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d4c:	4619      	mov	r1, r3
 8042d4e:	481a      	ldr	r0, [pc, #104]	; (8042db8 <BSP_LCD_MspInit+0x1a0>)
 8042d50:	f001 f9d8 	bl	8044104 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8042d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8042d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d5e:	4619      	mov	r1, r3
 8042d60:	4816      	ldr	r0, [pc, #88]	; (8042dbc <BSP_LCD_MspInit+0x1a4>)
 8042d62:	f001 f9cf 	bl	8044104 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8042d66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8042d6a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d70:	4619      	mov	r1, r3
 8042d72:	4813      	ldr	r0, [pc, #76]	; (8042dc0 <BSP_LCD_MspInit+0x1a8>)
 8042d74:	f001 f9c6 	bl	8044104 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042d78:	2303      	movs	r3, #3
 8042d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8042d7c:	2309      	movs	r3, #9
 8042d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d84:	4619      	mov	r1, r3
 8042d86:	480a      	ldr	r0, [pc, #40]	; (8042db0 <BSP_LCD_MspInit+0x198>)
 8042d88:	f001 f9bc 	bl	8044104 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8042d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8042d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042d96:	4619      	mov	r1, r3
 8042d98:	4809      	ldr	r0, [pc, #36]	; (8042dc0 <BSP_LCD_MspInit+0x1a8>)
 8042d9a:	f001 f9b3 	bl	8044104 <HAL_GPIO_Init>
}
 8042d9e:	bf00      	nop
 8042da0:	3738      	adds	r7, #56	; 0x38
 8042da2:	46bd      	mov	sp, r7
 8042da4:	bd80      	pop	{r7, pc}
 8042da6:	bf00      	nop
 8042da8:	40023800 	.word	0x40023800
 8042dac:	40020000 	.word	0x40020000
 8042db0:	40020400 	.word	0x40020400
 8042db4:	40020800 	.word	0x40020800
 8042db8:	40020c00 	.word	0x40020c00
 8042dbc:	40021400 	.word	0x40021400
 8042dc0:	40021800 	.word	0x40021800

08042dc4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8042dc4:	b5b0      	push	{r4, r5, r7, lr}
 8042dc6:	b082      	sub	sp, #8
 8042dc8:	af00      	add	r7, sp, #0
 8042dca:	4603      	mov	r3, r0
 8042dcc:	603a      	str	r2, [r7, #0]
 8042dce:	80fb      	strh	r3, [r7, #6]
 8042dd0:	460b      	mov	r3, r1
 8042dd2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8042dd4:	4b0c      	ldr	r3, [pc, #48]	; (8042e08 <BSP_LCD_DrawPixel+0x44>)
 8042dd6:	681b      	ldr	r3, [r3, #0]
 8042dd8:	4a0c      	ldr	r2, [pc, #48]	; (8042e0c <BSP_LCD_DrawPixel+0x48>)
 8042dda:	2134      	movs	r1, #52	; 0x34
 8042ddc:	fb01 f303 	mul.w	r3, r1, r3
 8042de0:	4413      	add	r3, r2
 8042de2:	335c      	adds	r3, #92	; 0x5c
 8042de4:	681c      	ldr	r4, [r3, #0]
 8042de6:	88bd      	ldrh	r5, [r7, #4]
 8042de8:	f7ff fcb2 	bl	8042750 <BSP_LCD_GetXSize>
 8042dec:	4603      	mov	r3, r0
 8042dee:	fb03 f205 	mul.w	r2, r3, r5
 8042df2:	88fb      	ldrh	r3, [r7, #6]
 8042df4:	4413      	add	r3, r2
 8042df6:	009b      	lsls	r3, r3, #2
 8042df8:	4423      	add	r3, r4
 8042dfa:	461a      	mov	r2, r3
 8042dfc:	683b      	ldr	r3, [r7, #0]
 8042dfe:	6013      	str	r3, [r2, #0]
}
 8042e00:	bf00      	nop
 8042e02:	3708      	adds	r7, #8
 8042e04:	46bd      	mov	sp, r7
 8042e06:	bdb0      	pop	{r4, r5, r7, pc}
 8042e08:	200009e0 	.word	0x200009e0
 8042e0c:	200008c8 	.word	0x200008c8

08042e10 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8042e10:	b580      	push	{r7, lr}
 8042e12:	b088      	sub	sp, #32
 8042e14:	af00      	add	r7, sp, #0
 8042e16:	4603      	mov	r3, r0
 8042e18:	603a      	str	r2, [r7, #0]
 8042e1a:	80fb      	strh	r3, [r7, #6]
 8042e1c:	460b      	mov	r3, r1
 8042e1e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8042e20:	2300      	movs	r3, #0
 8042e22:	61fb      	str	r3, [r7, #28]
 8042e24:	2300      	movs	r3, #0
 8042e26:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8042e28:	2300      	movs	r3, #0
 8042e2a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8042e2c:	4b53      	ldr	r3, [pc, #332]	; (8042f7c <DrawChar+0x16c>)
 8042e2e:	681a      	ldr	r2, [r3, #0]
 8042e30:	4953      	ldr	r1, [pc, #332]	; (8042f80 <DrawChar+0x170>)
 8042e32:	4613      	mov	r3, r2
 8042e34:	005b      	lsls	r3, r3, #1
 8042e36:	4413      	add	r3, r2
 8042e38:	009b      	lsls	r3, r3, #2
 8042e3a:	440b      	add	r3, r1
 8042e3c:	3308      	adds	r3, #8
 8042e3e:	681b      	ldr	r3, [r3, #0]
 8042e40:	88db      	ldrh	r3, [r3, #6]
 8042e42:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8042e44:	4b4d      	ldr	r3, [pc, #308]	; (8042f7c <DrawChar+0x16c>)
 8042e46:	681a      	ldr	r2, [r3, #0]
 8042e48:	494d      	ldr	r1, [pc, #308]	; (8042f80 <DrawChar+0x170>)
 8042e4a:	4613      	mov	r3, r2
 8042e4c:	005b      	lsls	r3, r3, #1
 8042e4e:	4413      	add	r3, r2
 8042e50:	009b      	lsls	r3, r3, #2
 8042e52:	440b      	add	r3, r1
 8042e54:	3308      	adds	r3, #8
 8042e56:	681b      	ldr	r3, [r3, #0]
 8042e58:	889b      	ldrh	r3, [r3, #4]
 8042e5a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8042e5c:	8a3b      	ldrh	r3, [r7, #16]
 8042e5e:	3307      	adds	r3, #7
 8042e60:	2b00      	cmp	r3, #0
 8042e62:	da00      	bge.n	8042e66 <DrawChar+0x56>
 8042e64:	3307      	adds	r3, #7
 8042e66:	10db      	asrs	r3, r3, #3
 8042e68:	b2db      	uxtb	r3, r3
 8042e6a:	00db      	lsls	r3, r3, #3
 8042e6c:	b2da      	uxtb	r2, r3
 8042e6e:	8a3b      	ldrh	r3, [r7, #16]
 8042e70:	b2db      	uxtb	r3, r3
 8042e72:	1ad3      	subs	r3, r2, r3
 8042e74:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8042e76:	2300      	movs	r3, #0
 8042e78:	61fb      	str	r3, [r7, #28]
 8042e7a:	e076      	b.n	8042f6a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8042e7c:	8a3b      	ldrh	r3, [r7, #16]
 8042e7e:	3307      	adds	r3, #7
 8042e80:	2b00      	cmp	r3, #0
 8042e82:	da00      	bge.n	8042e86 <DrawChar+0x76>
 8042e84:	3307      	adds	r3, #7
 8042e86:	10db      	asrs	r3, r3, #3
 8042e88:	461a      	mov	r2, r3
 8042e8a:	69fb      	ldr	r3, [r7, #28]
 8042e8c:	fb02 f303 	mul.w	r3, r2, r3
 8042e90:	683a      	ldr	r2, [r7, #0]
 8042e92:	4413      	add	r3, r2
 8042e94:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8042e96:	8a3b      	ldrh	r3, [r7, #16]
 8042e98:	3307      	adds	r3, #7
 8042e9a:	2b00      	cmp	r3, #0
 8042e9c:	da00      	bge.n	8042ea0 <DrawChar+0x90>
 8042e9e:	3307      	adds	r3, #7
 8042ea0:	10db      	asrs	r3, r3, #3
 8042ea2:	2b01      	cmp	r3, #1
 8042ea4:	d002      	beq.n	8042eac <DrawChar+0x9c>
 8042ea6:	2b02      	cmp	r3, #2
 8042ea8:	d004      	beq.n	8042eb4 <DrawChar+0xa4>
 8042eaa:	e00c      	b.n	8042ec6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8042eac:	68bb      	ldr	r3, [r7, #8]
 8042eae:	781b      	ldrb	r3, [r3, #0]
 8042eb0:	617b      	str	r3, [r7, #20]
      break;
 8042eb2:	e016      	b.n	8042ee2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8042eb4:	68bb      	ldr	r3, [r7, #8]
 8042eb6:	781b      	ldrb	r3, [r3, #0]
 8042eb8:	021b      	lsls	r3, r3, #8
 8042eba:	68ba      	ldr	r2, [r7, #8]
 8042ebc:	3201      	adds	r2, #1
 8042ebe:	7812      	ldrb	r2, [r2, #0]
 8042ec0:	4313      	orrs	r3, r2
 8042ec2:	617b      	str	r3, [r7, #20]
      break;
 8042ec4:	e00d      	b.n	8042ee2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8042ec6:	68bb      	ldr	r3, [r7, #8]
 8042ec8:	781b      	ldrb	r3, [r3, #0]
 8042eca:	041a      	lsls	r2, r3, #16
 8042ecc:	68bb      	ldr	r3, [r7, #8]
 8042ece:	3301      	adds	r3, #1
 8042ed0:	781b      	ldrb	r3, [r3, #0]
 8042ed2:	021b      	lsls	r3, r3, #8
 8042ed4:	4313      	orrs	r3, r2
 8042ed6:	68ba      	ldr	r2, [r7, #8]
 8042ed8:	3202      	adds	r2, #2
 8042eda:	7812      	ldrb	r2, [r2, #0]
 8042edc:	4313      	orrs	r3, r2
 8042ede:	617b      	str	r3, [r7, #20]
      break;
 8042ee0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8042ee2:	2300      	movs	r3, #0
 8042ee4:	61bb      	str	r3, [r7, #24]
 8042ee6:	e036      	b.n	8042f56 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8042ee8:	8a3a      	ldrh	r2, [r7, #16]
 8042eea:	69bb      	ldr	r3, [r7, #24]
 8042eec:	1ad2      	subs	r2, r2, r3
 8042eee:	7bfb      	ldrb	r3, [r7, #15]
 8042ef0:	4413      	add	r3, r2
 8042ef2:	3b01      	subs	r3, #1
 8042ef4:	2201      	movs	r2, #1
 8042ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8042efa:	461a      	mov	r2, r3
 8042efc:	697b      	ldr	r3, [r7, #20]
 8042efe:	4013      	ands	r3, r2
 8042f00:	2b00      	cmp	r3, #0
 8042f02:	d012      	beq.n	8042f2a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8042f04:	69bb      	ldr	r3, [r7, #24]
 8042f06:	b29a      	uxth	r2, r3
 8042f08:	88fb      	ldrh	r3, [r7, #6]
 8042f0a:	4413      	add	r3, r2
 8042f0c:	b298      	uxth	r0, r3
 8042f0e:	4b1b      	ldr	r3, [pc, #108]	; (8042f7c <DrawChar+0x16c>)
 8042f10:	681a      	ldr	r2, [r3, #0]
 8042f12:	491b      	ldr	r1, [pc, #108]	; (8042f80 <DrawChar+0x170>)
 8042f14:	4613      	mov	r3, r2
 8042f16:	005b      	lsls	r3, r3, #1
 8042f18:	4413      	add	r3, r2
 8042f1a:	009b      	lsls	r3, r3, #2
 8042f1c:	440b      	add	r3, r1
 8042f1e:	681a      	ldr	r2, [r3, #0]
 8042f20:	88bb      	ldrh	r3, [r7, #4]
 8042f22:	4619      	mov	r1, r3
 8042f24:	f7ff ff4e 	bl	8042dc4 <BSP_LCD_DrawPixel>
 8042f28:	e012      	b.n	8042f50 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8042f2a:	69bb      	ldr	r3, [r7, #24]
 8042f2c:	b29a      	uxth	r2, r3
 8042f2e:	88fb      	ldrh	r3, [r7, #6]
 8042f30:	4413      	add	r3, r2
 8042f32:	b298      	uxth	r0, r3
 8042f34:	4b11      	ldr	r3, [pc, #68]	; (8042f7c <DrawChar+0x16c>)
 8042f36:	681a      	ldr	r2, [r3, #0]
 8042f38:	4911      	ldr	r1, [pc, #68]	; (8042f80 <DrawChar+0x170>)
 8042f3a:	4613      	mov	r3, r2
 8042f3c:	005b      	lsls	r3, r3, #1
 8042f3e:	4413      	add	r3, r2
 8042f40:	009b      	lsls	r3, r3, #2
 8042f42:	440b      	add	r3, r1
 8042f44:	3304      	adds	r3, #4
 8042f46:	681a      	ldr	r2, [r3, #0]
 8042f48:	88bb      	ldrh	r3, [r7, #4]
 8042f4a:	4619      	mov	r1, r3
 8042f4c:	f7ff ff3a 	bl	8042dc4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8042f50:	69bb      	ldr	r3, [r7, #24]
 8042f52:	3301      	adds	r3, #1
 8042f54:	61bb      	str	r3, [r7, #24]
 8042f56:	8a3b      	ldrh	r3, [r7, #16]
 8042f58:	69ba      	ldr	r2, [r7, #24]
 8042f5a:	429a      	cmp	r2, r3
 8042f5c:	d3c4      	bcc.n	8042ee8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8042f5e:	88bb      	ldrh	r3, [r7, #4]
 8042f60:	3301      	adds	r3, #1
 8042f62:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8042f64:	69fb      	ldr	r3, [r7, #28]
 8042f66:	3301      	adds	r3, #1
 8042f68:	61fb      	str	r3, [r7, #28]
 8042f6a:	8a7b      	ldrh	r3, [r7, #18]
 8042f6c:	69fa      	ldr	r2, [r7, #28]
 8042f6e:	429a      	cmp	r2, r3
 8042f70:	d384      	bcc.n	8042e7c <DrawChar+0x6c>
  }
}
 8042f72:	bf00      	nop
 8042f74:	bf00      	nop
 8042f76:	3720      	adds	r7, #32
 8042f78:	46bd      	mov	sp, r7
 8042f7a:	bd80      	pop	{r7, pc}
 8042f7c:	200009e0 	.word	0x200009e0
 8042f80:	200009e4 	.word	0x200009e4

08042f84 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8042f84:	b580      	push	{r7, lr}
 8042f86:	b086      	sub	sp, #24
 8042f88:	af02      	add	r7, sp, #8
 8042f8a:	60f8      	str	r0, [r7, #12]
 8042f8c:	60b9      	str	r1, [r7, #8]
 8042f8e:	607a      	str	r2, [r7, #4]
 8042f90:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8042f92:	4b16      	ldr	r3, [pc, #88]	; (8042fec <FillBuffer+0x68>)
 8042f94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8042f98:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8042f9a:	4b14      	ldr	r3, [pc, #80]	; (8042fec <FillBuffer+0x68>)
 8042f9c:	2200      	movs	r2, #0
 8042f9e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8042fa0:	4a12      	ldr	r2, [pc, #72]	; (8042fec <FillBuffer+0x68>)
 8042fa2:	69bb      	ldr	r3, [r7, #24]
 8042fa4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8042fa6:	4b11      	ldr	r3, [pc, #68]	; (8042fec <FillBuffer+0x68>)
 8042fa8:	4a11      	ldr	r2, [pc, #68]	; (8042ff0 <FillBuffer+0x6c>)
 8042faa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8042fac:	480f      	ldr	r0, [pc, #60]	; (8042fec <FillBuffer+0x68>)
 8042fae:	f000 fd0d 	bl	80439cc <HAL_DMA2D_Init>
 8042fb2:	4603      	mov	r3, r0
 8042fb4:	2b00      	cmp	r3, #0
 8042fb6:	d115      	bne.n	8042fe4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8042fb8:	68f9      	ldr	r1, [r7, #12]
 8042fba:	480c      	ldr	r0, [pc, #48]	; (8042fec <FillBuffer+0x68>)
 8042fbc:	f000 ff74 	bl	8043ea8 <HAL_DMA2D_ConfigLayer>
 8042fc0:	4603      	mov	r3, r0
 8042fc2:	2b00      	cmp	r3, #0
 8042fc4:	d10e      	bne.n	8042fe4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8042fc6:	68ba      	ldr	r2, [r7, #8]
 8042fc8:	683b      	ldr	r3, [r7, #0]
 8042fca:	9300      	str	r3, [sp, #0]
 8042fcc:	687b      	ldr	r3, [r7, #4]
 8042fce:	69f9      	ldr	r1, [r7, #28]
 8042fd0:	4806      	ldr	r0, [pc, #24]	; (8042fec <FillBuffer+0x68>)
 8042fd2:	f000 fd44 	bl	8043a5e <HAL_DMA2D_Start>
 8042fd6:	4603      	mov	r3, r0
 8042fd8:	2b00      	cmp	r3, #0
 8042fda:	d103      	bne.n	8042fe4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8042fdc:	210a      	movs	r1, #10
 8042fde:	4803      	ldr	r0, [pc, #12]	; (8042fec <FillBuffer+0x68>)
 8042fe0:	f000 fd68 	bl	8043ab4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8042fe4:	bf00      	nop
 8042fe6:	3710      	adds	r7, #16
 8042fe8:	46bd      	mov	sp, r7
 8042fea:	bd80      	pop	{r7, pc}
 8042fec:	20000970 	.word	0x20000970
 8042ff0:	4002b000 	.word	0x4002b000

08042ff4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8042ff4:	b580      	push	{r7, lr}
 8042ff6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8042ff8:	4b29      	ldr	r3, [pc, #164]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8042ffa:	4a2a      	ldr	r2, [pc, #168]	; (80430a4 <BSP_SDRAM_Init+0xb0>)
 8042ffc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8042ffe:	4b2a      	ldr	r3, [pc, #168]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043000:	2202      	movs	r2, #2
 8043002:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8043004:	4b28      	ldr	r3, [pc, #160]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043006:	2207      	movs	r2, #7
 8043008:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 804300a:	4b27      	ldr	r3, [pc, #156]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 804300c:	2204      	movs	r2, #4
 804300e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8043010:	4b25      	ldr	r3, [pc, #148]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043012:	2207      	movs	r2, #7
 8043014:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8043016:	4b24      	ldr	r3, [pc, #144]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043018:	2202      	movs	r2, #2
 804301a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 804301c:	4b22      	ldr	r3, [pc, #136]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 804301e:	2202      	movs	r2, #2
 8043020:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8043022:	4b21      	ldr	r3, [pc, #132]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043024:	2202      	movs	r2, #2
 8043026:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8043028:	4b1d      	ldr	r3, [pc, #116]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 804302a:	2201      	movs	r2, #1
 804302c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 804302e:	4b1c      	ldr	r3, [pc, #112]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043030:	2200      	movs	r2, #0
 8043032:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8043034:	4b1a      	ldr	r3, [pc, #104]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043036:	2204      	movs	r2, #4
 8043038:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 804303a:	4b19      	ldr	r3, [pc, #100]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 804303c:	2210      	movs	r2, #16
 804303e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8043040:	4b17      	ldr	r3, [pc, #92]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043042:	2240      	movs	r2, #64	; 0x40
 8043044:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8043046:	4b16      	ldr	r3, [pc, #88]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043048:	f44f 72c0 	mov.w	r2, #384	; 0x180
 804304c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 804304e:	4b14      	ldr	r3, [pc, #80]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043050:	2200      	movs	r2, #0
 8043052:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8043054:	4b12      	ldr	r3, [pc, #72]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804305a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 804305c:	4b10      	ldr	r3, [pc, #64]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 804305e:	2200      	movs	r2, #0
 8043060:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8043062:	4b0f      	ldr	r3, [pc, #60]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8043068:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 804306a:	2100      	movs	r1, #0
 804306c:	480c      	ldr	r0, [pc, #48]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 804306e:	f000 f87f 	bl	8043170 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8043072:	490d      	ldr	r1, [pc, #52]	; (80430a8 <BSP_SDRAM_Init+0xb4>)
 8043074:	480a      	ldr	r0, [pc, #40]	; (80430a0 <BSP_SDRAM_Init+0xac>)
 8043076:	f004 fb93 	bl	80477a0 <HAL_SDRAM_Init>
 804307a:	4603      	mov	r3, r0
 804307c:	2b00      	cmp	r3, #0
 804307e:	d003      	beq.n	8043088 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8043080:	4b0a      	ldr	r3, [pc, #40]	; (80430ac <BSP_SDRAM_Init+0xb8>)
 8043082:	2201      	movs	r2, #1
 8043084:	701a      	strb	r2, [r3, #0]
 8043086:	e002      	b.n	804308e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8043088:	4b08      	ldr	r3, [pc, #32]	; (80430ac <BSP_SDRAM_Init+0xb8>)
 804308a:	2200      	movs	r2, #0
 804308c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 804308e:	f240 506a 	movw	r0, #1386	; 0x56a
 8043092:	f000 f80d 	bl	80430b0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8043096:	4b05      	ldr	r3, [pc, #20]	; (80430ac <BSP_SDRAM_Init+0xb8>)
 8043098:	781b      	ldrb	r3, [r3, #0]
}
 804309a:	4618      	mov	r0, r3
 804309c:	bd80      	pop	{r7, pc}
 804309e:	bf00      	nop
 80430a0:	20000a00 	.word	0x20000a00
 80430a4:	a0000140 	.word	0xa0000140
 80430a8:	20000a34 	.word	0x20000a34
 80430ac:	20000050 	.word	0x20000050

080430b0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80430b0:	b580      	push	{r7, lr}
 80430b2:	b084      	sub	sp, #16
 80430b4:	af00      	add	r7, sp, #0
 80430b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80430b8:	2300      	movs	r3, #0
 80430ba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80430bc:	4b2a      	ldr	r3, [pc, #168]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430be:	2201      	movs	r2, #1
 80430c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80430c2:	4b29      	ldr	r3, [pc, #164]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430c4:	2208      	movs	r2, #8
 80430c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80430c8:	4b27      	ldr	r3, [pc, #156]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430ca:	2201      	movs	r2, #1
 80430cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80430ce:	4b26      	ldr	r3, [pc, #152]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430d0:	2200      	movs	r2, #0
 80430d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80430d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80430d8:	4923      	ldr	r1, [pc, #140]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430da:	4824      	ldr	r0, [pc, #144]	; (804316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80430dc:	f004 fb94 	bl	8047808 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80430e0:	2001      	movs	r0, #1
 80430e2:	f000 f993 	bl	804340c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80430e6:	4b20      	ldr	r3, [pc, #128]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430e8:	2202      	movs	r2, #2
 80430ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80430ec:	4b1e      	ldr	r3, [pc, #120]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430ee:	2208      	movs	r2, #8
 80430f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80430f2:	4b1d      	ldr	r3, [pc, #116]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430f4:	2201      	movs	r2, #1
 80430f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80430f8:	4b1b      	ldr	r3, [pc, #108]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80430fa:	2200      	movs	r2, #0
 80430fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80430fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043102:	4919      	ldr	r1, [pc, #100]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043104:	4819      	ldr	r0, [pc, #100]	; (804316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043106:	f004 fb7f 	bl	8047808 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 804310a:	4b17      	ldr	r3, [pc, #92]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804310c:	2203      	movs	r2, #3
 804310e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8043110:	4b15      	ldr	r3, [pc, #84]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043112:	2208      	movs	r2, #8
 8043114:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8043116:	4b14      	ldr	r3, [pc, #80]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043118:	2204      	movs	r2, #4
 804311a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 804311c:	4b12      	ldr	r3, [pc, #72]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804311e:	2200      	movs	r2, #0
 8043120:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8043122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043126:	4910      	ldr	r1, [pc, #64]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043128:	4810      	ldr	r0, [pc, #64]	; (804316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 804312a:	f004 fb6d 	bl	8047808 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 804312e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8043132:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8043134:	4b0c      	ldr	r3, [pc, #48]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043136:	2204      	movs	r2, #4
 8043138:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 804313a:	4b0b      	ldr	r3, [pc, #44]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804313c:	2208      	movs	r2, #8
 804313e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8043140:	4b09      	ldr	r3, [pc, #36]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043142:	2201      	movs	r2, #1
 8043144:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8043146:	68fb      	ldr	r3, [r7, #12]
 8043148:	4a07      	ldr	r2, [pc, #28]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804314a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 804314c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043150:	4905      	ldr	r1, [pc, #20]	; (8043168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043152:	4806      	ldr	r0, [pc, #24]	; (804316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043154:	f004 fb58 	bl	8047808 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8043158:	6879      	ldr	r1, [r7, #4]
 804315a:	4804      	ldr	r0, [pc, #16]	; (804316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 804315c:	f004 fb89 	bl	8047872 <HAL_SDRAM_ProgramRefreshRate>
}
 8043160:	bf00      	nop
 8043162:	3710      	adds	r7, #16
 8043164:	46bd      	mov	sp, r7
 8043166:	bd80      	pop	{r7, pc}
 8043168:	20000a50 	.word	0x20000a50
 804316c:	20000a00 	.word	0x20000a00

08043170 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8043170:	b580      	push	{r7, lr}
 8043172:	b090      	sub	sp, #64	; 0x40
 8043174:	af00      	add	r7, sp, #0
 8043176:	6078      	str	r0, [r7, #4]
 8043178:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 804317a:	687b      	ldr	r3, [r7, #4]
 804317c:	2b00      	cmp	r3, #0
 804317e:	f000 80ec 	beq.w	804335a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8043182:	2300      	movs	r3, #0
 8043184:	62bb      	str	r3, [r7, #40]	; 0x28
 8043186:	4b77      	ldr	r3, [pc, #476]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804318a:	4a76      	ldr	r2, [pc, #472]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 804318c:	f043 0301 	orr.w	r3, r3, #1
 8043190:	6393      	str	r3, [r2, #56]	; 0x38
 8043192:	4b74      	ldr	r3, [pc, #464]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043196:	f003 0301 	and.w	r3, r3, #1
 804319a:	62bb      	str	r3, [r7, #40]	; 0x28
 804319c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 804319e:	2300      	movs	r3, #0
 80431a0:	627b      	str	r3, [r7, #36]	; 0x24
 80431a2:	4b70      	ldr	r3, [pc, #448]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431a6:	4a6f      	ldr	r2, [pc, #444]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80431ac:	6313      	str	r3, [r2, #48]	; 0x30
 80431ae:	4b6d      	ldr	r3, [pc, #436]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80431b6:	627b      	str	r3, [r7, #36]	; 0x24
 80431b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80431ba:	2300      	movs	r3, #0
 80431bc:	623b      	str	r3, [r7, #32]
 80431be:	4b69      	ldr	r3, [pc, #420]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431c2:	4a68      	ldr	r2, [pc, #416]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431c4:	f043 0302 	orr.w	r3, r3, #2
 80431c8:	6313      	str	r3, [r2, #48]	; 0x30
 80431ca:	4b66      	ldr	r3, [pc, #408]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431ce:	f003 0302 	and.w	r3, r3, #2
 80431d2:	623b      	str	r3, [r7, #32]
 80431d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80431d6:	2300      	movs	r3, #0
 80431d8:	61fb      	str	r3, [r7, #28]
 80431da:	4b62      	ldr	r3, [pc, #392]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431de:	4a61      	ldr	r2, [pc, #388]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431e0:	f043 0304 	orr.w	r3, r3, #4
 80431e4:	6313      	str	r3, [r2, #48]	; 0x30
 80431e6:	4b5f      	ldr	r3, [pc, #380]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431ea:	f003 0304 	and.w	r3, r3, #4
 80431ee:	61fb      	str	r3, [r7, #28]
 80431f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80431f2:	2300      	movs	r3, #0
 80431f4:	61bb      	str	r3, [r7, #24]
 80431f6:	4b5b      	ldr	r3, [pc, #364]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80431fa:	4a5a      	ldr	r2, [pc, #360]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 80431fc:	f043 0308 	orr.w	r3, r3, #8
 8043200:	6313      	str	r3, [r2, #48]	; 0x30
 8043202:	4b58      	ldr	r3, [pc, #352]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043206:	f003 0308 	and.w	r3, r3, #8
 804320a:	61bb      	str	r3, [r7, #24]
 804320c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 804320e:	2300      	movs	r3, #0
 8043210:	617b      	str	r3, [r7, #20]
 8043212:	4b54      	ldr	r3, [pc, #336]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043216:	4a53      	ldr	r2, [pc, #332]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043218:	f043 0310 	orr.w	r3, r3, #16
 804321c:	6313      	str	r3, [r2, #48]	; 0x30
 804321e:	4b51      	ldr	r3, [pc, #324]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043222:	f003 0310 	and.w	r3, r3, #16
 8043226:	617b      	str	r3, [r7, #20]
 8043228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 804322a:	2300      	movs	r3, #0
 804322c:	613b      	str	r3, [r7, #16]
 804322e:	4b4d      	ldr	r3, [pc, #308]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043232:	4a4c      	ldr	r2, [pc, #304]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043234:	f043 0320 	orr.w	r3, r3, #32
 8043238:	6313      	str	r3, [r2, #48]	; 0x30
 804323a:	4b4a      	ldr	r3, [pc, #296]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 804323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804323e:	f003 0320 	and.w	r3, r3, #32
 8043242:	613b      	str	r3, [r7, #16]
 8043244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8043246:	2300      	movs	r3, #0
 8043248:	60fb      	str	r3, [r7, #12]
 804324a:	4b46      	ldr	r3, [pc, #280]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 804324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804324e:	4a45      	ldr	r2, [pc, #276]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043254:	6313      	str	r3, [r2, #48]	; 0x30
 8043256:	4b43      	ldr	r3, [pc, #268]	; (8043364 <BSP_SDRAM_MspInit+0x1f4>)
 8043258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804325e:	60fb      	str	r3, [r7, #12]
 8043260:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8043262:	2302      	movs	r3, #2
 8043264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8043266:	2302      	movs	r3, #2
 8043268:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 804326a:	2300      	movs	r3, #0
 804326c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 804326e:	230c      	movs	r3, #12
 8043270:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8043272:	2360      	movs	r3, #96	; 0x60
 8043274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8043276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804327a:	4619      	mov	r1, r3
 804327c:	483a      	ldr	r0, [pc, #232]	; (8043368 <BSP_SDRAM_MspInit+0x1f8>)
 804327e:	f000 ff41 	bl	8044104 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8043282:	2301      	movs	r3, #1
 8043284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8043286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804328a:	4619      	mov	r1, r3
 804328c:	4837      	ldr	r0, [pc, #220]	; (804336c <BSP_SDRAM_MspInit+0x1fc>)
 804328e:	f000 ff39 	bl	8044104 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8043292:	f24c 7303 	movw	r3, #50947	; 0xc703
 8043296:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8043298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804329c:	4619      	mov	r1, r3
 804329e:	4834      	ldr	r0, [pc, #208]	; (8043370 <BSP_SDRAM_MspInit+0x200>)
 80432a0:	f000 ff30 	bl	8044104 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80432a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80432a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80432aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80432ae:	4619      	mov	r1, r3
 80432b0:	4830      	ldr	r0, [pc, #192]	; (8043374 <BSP_SDRAM_MspInit+0x204>)
 80432b2:	f000 ff27 	bl	8044104 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80432b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80432ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80432bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80432c0:	4619      	mov	r1, r3
 80432c2:	482d      	ldr	r0, [pc, #180]	; (8043378 <BSP_SDRAM_MspInit+0x208>)
 80432c4:	f000 ff1e 	bl	8044104 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80432c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80432cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80432ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80432d2:	4619      	mov	r1, r3
 80432d4:	4829      	ldr	r0, [pc, #164]	; (804337c <BSP_SDRAM_MspInit+0x20c>)
 80432d6:	f000 ff15 	bl	8044104 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80432da:	4b29      	ldr	r3, [pc, #164]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 80432dc:	2200      	movs	r2, #0
 80432de:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80432e0:	4b27      	ldr	r3, [pc, #156]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 80432e2:	2280      	movs	r2, #128	; 0x80
 80432e4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80432e6:	4b26      	ldr	r3, [pc, #152]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 80432e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80432ec:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80432ee:	4b24      	ldr	r3, [pc, #144]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 80432f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80432f4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80432f6:	4b22      	ldr	r3, [pc, #136]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 80432f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80432fc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80432fe:	4b20      	ldr	r3, [pc, #128]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043300:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8043304:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8043306:	4b1e      	ldr	r3, [pc, #120]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043308:	2200      	movs	r2, #0
 804330a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 804330c:	4b1c      	ldr	r3, [pc, #112]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 804330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8043312:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8043314:	4b1a      	ldr	r3, [pc, #104]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043316:	2200      	movs	r2, #0
 8043318:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 804331a:	4b19      	ldr	r3, [pc, #100]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 804331c:	2203      	movs	r2, #3
 804331e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8043320:	4b17      	ldr	r3, [pc, #92]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043322:	2200      	movs	r2, #0
 8043324:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8043326:	4b16      	ldr	r3, [pc, #88]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043328:	2200      	movs	r2, #0
 804332a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 804332c:	4b14      	ldr	r3, [pc, #80]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 804332e:	4a15      	ldr	r2, [pc, #84]	; (8043384 <BSP_SDRAM_MspInit+0x214>)
 8043330:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	4a12      	ldr	r2, [pc, #72]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043336:	631a      	str	r2, [r3, #48]	; 0x30
 8043338:	4a11      	ldr	r2, [pc, #68]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 804333a:	687b      	ldr	r3, [r7, #4]
 804333c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 804333e:	4810      	ldr	r0, [pc, #64]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043340:	f000 fa34 	bl	80437ac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8043344:	480e      	ldr	r0, [pc, #56]	; (8043380 <BSP_SDRAM_MspInit+0x210>)
 8043346:	f000 f983 	bl	8043650 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 804334a:	2200      	movs	r2, #0
 804334c:	210f      	movs	r1, #15
 804334e:	2038      	movs	r0, #56	; 0x38
 8043350:	f000 f938 	bl	80435c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8043354:	2038      	movs	r0, #56	; 0x38
 8043356:	f000 f951 	bl	80435fc <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 804335a:	bf00      	nop
 804335c:	3740      	adds	r7, #64	; 0x40
 804335e:	46bd      	mov	sp, r7
 8043360:	bd80      	pop	{r7, pc}
 8043362:	bf00      	nop
 8043364:	40023800 	.word	0x40023800
 8043368:	40020400 	.word	0x40020400
 804336c:	40020800 	.word	0x40020800
 8043370:	40020c00 	.word	0x40020c00
 8043374:	40021000 	.word	0x40021000
 8043378:	40021400 	.word	0x40021400
 804337c:	40021800 	.word	0x40021800
 8043380:	20000a60 	.word	0x20000a60
 8043384:	40026410 	.word	0x40026410

08043388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8043388:	b580      	push	{r7, lr}
 804338a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804338c:	4b0e      	ldr	r3, [pc, #56]	; (80433c8 <HAL_Init+0x40>)
 804338e:	681b      	ldr	r3, [r3, #0]
 8043390:	4a0d      	ldr	r2, [pc, #52]	; (80433c8 <HAL_Init+0x40>)
 8043392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8043396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8043398:	4b0b      	ldr	r3, [pc, #44]	; (80433c8 <HAL_Init+0x40>)
 804339a:	681b      	ldr	r3, [r3, #0]
 804339c:	4a0a      	ldr	r2, [pc, #40]	; (80433c8 <HAL_Init+0x40>)
 804339e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80433a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80433a4:	4b08      	ldr	r3, [pc, #32]	; (80433c8 <HAL_Init+0x40>)
 80433a6:	681b      	ldr	r3, [r3, #0]
 80433a8:	4a07      	ldr	r2, [pc, #28]	; (80433c8 <HAL_Init+0x40>)
 80433aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80433ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80433b0:	2003      	movs	r0, #3
 80433b2:	f000 f8fc 	bl	80435ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80433b6:	200f      	movs	r0, #15
 80433b8:	f7fe fc38 	bl	8041c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80433bc:	f7fe f866 	bl	804148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80433c0:	2300      	movs	r3, #0
}
 80433c2:	4618      	mov	r0, r3
 80433c4:	bd80      	pop	{r7, pc}
 80433c6:	bf00      	nop
 80433c8:	40023c00 	.word	0x40023c00

080433cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80433cc:	b480      	push	{r7}
 80433ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80433d0:	4b06      	ldr	r3, [pc, #24]	; (80433ec <HAL_IncTick+0x20>)
 80433d2:	781b      	ldrb	r3, [r3, #0]
 80433d4:	461a      	mov	r2, r3
 80433d6:	4b06      	ldr	r3, [pc, #24]	; (80433f0 <HAL_IncTick+0x24>)
 80433d8:	681b      	ldr	r3, [r3, #0]
 80433da:	4413      	add	r3, r2
 80433dc:	4a04      	ldr	r2, [pc, #16]	; (80433f0 <HAL_IncTick+0x24>)
 80433de:	6013      	str	r3, [r2, #0]
}
 80433e0:	bf00      	nop
 80433e2:	46bd      	mov	sp, r7
 80433e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80433e8:	4770      	bx	lr
 80433ea:	bf00      	nop
 80433ec:	20000058 	.word	0x20000058
 80433f0:	20000ac0 	.word	0x20000ac0

080433f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80433f4:	b480      	push	{r7}
 80433f6:	af00      	add	r7, sp, #0
  return uwTick;
 80433f8:	4b03      	ldr	r3, [pc, #12]	; (8043408 <HAL_GetTick+0x14>)
 80433fa:	681b      	ldr	r3, [r3, #0]
}
 80433fc:	4618      	mov	r0, r3
 80433fe:	46bd      	mov	sp, r7
 8043400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043404:	4770      	bx	lr
 8043406:	bf00      	nop
 8043408:	20000ac0 	.word	0x20000ac0

0804340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 804340c:	b580      	push	{r7, lr}
 804340e:	b084      	sub	sp, #16
 8043410:	af00      	add	r7, sp, #0
 8043412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8043414:	f7ff ffee 	bl	80433f4 <HAL_GetTick>
 8043418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804341a:	687b      	ldr	r3, [r7, #4]
 804341c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 804341e:	68fb      	ldr	r3, [r7, #12]
 8043420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043424:	d005      	beq.n	8043432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8043426:	4b0a      	ldr	r3, [pc, #40]	; (8043450 <HAL_Delay+0x44>)
 8043428:	781b      	ldrb	r3, [r3, #0]
 804342a:	461a      	mov	r2, r3
 804342c:	68fb      	ldr	r3, [r7, #12]
 804342e:	4413      	add	r3, r2
 8043430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8043432:	bf00      	nop
 8043434:	f7ff ffde 	bl	80433f4 <HAL_GetTick>
 8043438:	4602      	mov	r2, r0
 804343a:	68bb      	ldr	r3, [r7, #8]
 804343c:	1ad3      	subs	r3, r2, r3
 804343e:	68fa      	ldr	r2, [r7, #12]
 8043440:	429a      	cmp	r2, r3
 8043442:	d8f7      	bhi.n	8043434 <HAL_Delay+0x28>
  {
  }
}
 8043444:	bf00      	nop
 8043446:	bf00      	nop
 8043448:	3710      	adds	r7, #16
 804344a:	46bd      	mov	sp, r7
 804344c:	bd80      	pop	{r7, pc}
 804344e:	bf00      	nop
 8043450:	20000058 	.word	0x20000058

08043454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8043454:	b480      	push	{r7}
 8043456:	b085      	sub	sp, #20
 8043458:	af00      	add	r7, sp, #0
 804345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 804345c:	687b      	ldr	r3, [r7, #4]
 804345e:	f003 0307 	and.w	r3, r3, #7
 8043462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043464:	4b0c      	ldr	r3, [pc, #48]	; (8043498 <__NVIC_SetPriorityGrouping+0x44>)
 8043466:	68db      	ldr	r3, [r3, #12]
 8043468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804346a:	68ba      	ldr	r2, [r7, #8]
 804346c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8043470:	4013      	ands	r3, r2
 8043472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043474:	68fb      	ldr	r3, [r7, #12]
 8043476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8043478:	68bb      	ldr	r3, [r7, #8]
 804347a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 804347c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8043480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8043486:	4a04      	ldr	r2, [pc, #16]	; (8043498 <__NVIC_SetPriorityGrouping+0x44>)
 8043488:	68bb      	ldr	r3, [r7, #8]
 804348a:	60d3      	str	r3, [r2, #12]
}
 804348c:	bf00      	nop
 804348e:	3714      	adds	r7, #20
 8043490:	46bd      	mov	sp, r7
 8043492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043496:	4770      	bx	lr
 8043498:	e000ed00 	.word	0xe000ed00

0804349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 804349c:	b480      	push	{r7}
 804349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80434a0:	4b04      	ldr	r3, [pc, #16]	; (80434b4 <__NVIC_GetPriorityGrouping+0x18>)
 80434a2:	68db      	ldr	r3, [r3, #12]
 80434a4:	0a1b      	lsrs	r3, r3, #8
 80434a6:	f003 0307 	and.w	r3, r3, #7
}
 80434aa:	4618      	mov	r0, r3
 80434ac:	46bd      	mov	sp, r7
 80434ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434b2:	4770      	bx	lr
 80434b4:	e000ed00 	.word	0xe000ed00

080434b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80434b8:	b480      	push	{r7}
 80434ba:	b083      	sub	sp, #12
 80434bc:	af00      	add	r7, sp, #0
 80434be:	4603      	mov	r3, r0
 80434c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80434c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80434c6:	2b00      	cmp	r3, #0
 80434c8:	db0b      	blt.n	80434e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80434ca:	79fb      	ldrb	r3, [r7, #7]
 80434cc:	f003 021f 	and.w	r2, r3, #31
 80434d0:	4907      	ldr	r1, [pc, #28]	; (80434f0 <__NVIC_EnableIRQ+0x38>)
 80434d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80434d6:	095b      	lsrs	r3, r3, #5
 80434d8:	2001      	movs	r0, #1
 80434da:	fa00 f202 	lsl.w	r2, r0, r2
 80434de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80434e2:	bf00      	nop
 80434e4:	370c      	adds	r7, #12
 80434e6:	46bd      	mov	sp, r7
 80434e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434ec:	4770      	bx	lr
 80434ee:	bf00      	nop
 80434f0:	e000e100 	.word	0xe000e100

080434f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80434f4:	b480      	push	{r7}
 80434f6:	b083      	sub	sp, #12
 80434f8:	af00      	add	r7, sp, #0
 80434fa:	4603      	mov	r3, r0
 80434fc:	6039      	str	r1, [r7, #0]
 80434fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8043500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043504:	2b00      	cmp	r3, #0
 8043506:	db0a      	blt.n	804351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043508:	683b      	ldr	r3, [r7, #0]
 804350a:	b2da      	uxtb	r2, r3
 804350c:	490c      	ldr	r1, [pc, #48]	; (8043540 <__NVIC_SetPriority+0x4c>)
 804350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043512:	0112      	lsls	r2, r2, #4
 8043514:	b2d2      	uxtb	r2, r2
 8043516:	440b      	add	r3, r1
 8043518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 804351c:	e00a      	b.n	8043534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804351e:	683b      	ldr	r3, [r7, #0]
 8043520:	b2da      	uxtb	r2, r3
 8043522:	4908      	ldr	r1, [pc, #32]	; (8043544 <__NVIC_SetPriority+0x50>)
 8043524:	79fb      	ldrb	r3, [r7, #7]
 8043526:	f003 030f 	and.w	r3, r3, #15
 804352a:	3b04      	subs	r3, #4
 804352c:	0112      	lsls	r2, r2, #4
 804352e:	b2d2      	uxtb	r2, r2
 8043530:	440b      	add	r3, r1
 8043532:	761a      	strb	r2, [r3, #24]
}
 8043534:	bf00      	nop
 8043536:	370c      	adds	r7, #12
 8043538:	46bd      	mov	sp, r7
 804353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804353e:	4770      	bx	lr
 8043540:	e000e100 	.word	0xe000e100
 8043544:	e000ed00 	.word	0xe000ed00

08043548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8043548:	b480      	push	{r7}
 804354a:	b089      	sub	sp, #36	; 0x24
 804354c:	af00      	add	r7, sp, #0
 804354e:	60f8      	str	r0, [r7, #12]
 8043550:	60b9      	str	r1, [r7, #8]
 8043552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8043554:	68fb      	ldr	r3, [r7, #12]
 8043556:	f003 0307 	and.w	r3, r3, #7
 804355a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 804355c:	69fb      	ldr	r3, [r7, #28]
 804355e:	f1c3 0307 	rsb	r3, r3, #7
 8043562:	2b04      	cmp	r3, #4
 8043564:	bf28      	it	cs
 8043566:	2304      	movcs	r3, #4
 8043568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804356a:	69fb      	ldr	r3, [r7, #28]
 804356c:	3304      	adds	r3, #4
 804356e:	2b06      	cmp	r3, #6
 8043570:	d902      	bls.n	8043578 <NVIC_EncodePriority+0x30>
 8043572:	69fb      	ldr	r3, [r7, #28]
 8043574:	3b03      	subs	r3, #3
 8043576:	e000      	b.n	804357a <NVIC_EncodePriority+0x32>
 8043578:	2300      	movs	r3, #0
 804357a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804357c:	f04f 32ff 	mov.w	r2, #4294967295
 8043580:	69bb      	ldr	r3, [r7, #24]
 8043582:	fa02 f303 	lsl.w	r3, r2, r3
 8043586:	43da      	mvns	r2, r3
 8043588:	68bb      	ldr	r3, [r7, #8]
 804358a:	401a      	ands	r2, r3
 804358c:	697b      	ldr	r3, [r7, #20]
 804358e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8043590:	f04f 31ff 	mov.w	r1, #4294967295
 8043594:	697b      	ldr	r3, [r7, #20]
 8043596:	fa01 f303 	lsl.w	r3, r1, r3
 804359a:	43d9      	mvns	r1, r3
 804359c:	687b      	ldr	r3, [r7, #4]
 804359e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80435a0:	4313      	orrs	r3, r2
         );
}
 80435a2:	4618      	mov	r0, r3
 80435a4:	3724      	adds	r7, #36	; 0x24
 80435a6:	46bd      	mov	sp, r7
 80435a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80435ac:	4770      	bx	lr

080435ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80435ae:	b580      	push	{r7, lr}
 80435b0:	b082      	sub	sp, #8
 80435b2:	af00      	add	r7, sp, #0
 80435b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80435b6:	6878      	ldr	r0, [r7, #4]
 80435b8:	f7ff ff4c 	bl	8043454 <__NVIC_SetPriorityGrouping>
}
 80435bc:	bf00      	nop
 80435be:	3708      	adds	r7, #8
 80435c0:	46bd      	mov	sp, r7
 80435c2:	bd80      	pop	{r7, pc}

080435c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80435c4:	b580      	push	{r7, lr}
 80435c6:	b086      	sub	sp, #24
 80435c8:	af00      	add	r7, sp, #0
 80435ca:	4603      	mov	r3, r0
 80435cc:	60b9      	str	r1, [r7, #8]
 80435ce:	607a      	str	r2, [r7, #4]
 80435d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80435d2:	2300      	movs	r3, #0
 80435d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80435d6:	f7ff ff61 	bl	804349c <__NVIC_GetPriorityGrouping>
 80435da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80435dc:	687a      	ldr	r2, [r7, #4]
 80435de:	68b9      	ldr	r1, [r7, #8]
 80435e0:	6978      	ldr	r0, [r7, #20]
 80435e2:	f7ff ffb1 	bl	8043548 <NVIC_EncodePriority>
 80435e6:	4602      	mov	r2, r0
 80435e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80435ec:	4611      	mov	r1, r2
 80435ee:	4618      	mov	r0, r3
 80435f0:	f7ff ff80 	bl	80434f4 <__NVIC_SetPriority>
}
 80435f4:	bf00      	nop
 80435f6:	3718      	adds	r7, #24
 80435f8:	46bd      	mov	sp, r7
 80435fa:	bd80      	pop	{r7, pc}

080435fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80435fc:	b580      	push	{r7, lr}
 80435fe:	b082      	sub	sp, #8
 8043600:	af00      	add	r7, sp, #0
 8043602:	4603      	mov	r3, r0
 8043604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8043606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804360a:	4618      	mov	r0, r3
 804360c:	f7ff ff54 	bl	80434b8 <__NVIC_EnableIRQ>
}
 8043610:	bf00      	nop
 8043612:	3708      	adds	r7, #8
 8043614:	46bd      	mov	sp, r7
 8043616:	bd80      	pop	{r7, pc}

08043618 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8043618:	b580      	push	{r7, lr}
 804361a:	b082      	sub	sp, #8
 804361c:	af00      	add	r7, sp, #0
 804361e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8043620:	687b      	ldr	r3, [r7, #4]
 8043622:	2b00      	cmp	r3, #0
 8043624:	d101      	bne.n	804362a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8043626:	2301      	movs	r3, #1
 8043628:	e00e      	b.n	8043648 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 804362a:	687b      	ldr	r3, [r7, #4]
 804362c:	795b      	ldrb	r3, [r3, #5]
 804362e:	b2db      	uxtb	r3, r3
 8043630:	2b00      	cmp	r3, #0
 8043632:	d105      	bne.n	8043640 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8043634:	687b      	ldr	r3, [r7, #4]
 8043636:	2200      	movs	r2, #0
 8043638:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 804363a:	6878      	ldr	r0, [r7, #4]
 804363c:	f7fd ff4e 	bl	80414dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8043640:	687b      	ldr	r3, [r7, #4]
 8043642:	2201      	movs	r2, #1
 8043644:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8043646:	2300      	movs	r3, #0
}
 8043648:	4618      	mov	r0, r3
 804364a:	3708      	adds	r7, #8
 804364c:	46bd      	mov	sp, r7
 804364e:	bd80      	pop	{r7, pc}

08043650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8043650:	b580      	push	{r7, lr}
 8043652:	b086      	sub	sp, #24
 8043654:	af00      	add	r7, sp, #0
 8043656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8043658:	2300      	movs	r3, #0
 804365a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 804365c:	f7ff feca 	bl	80433f4 <HAL_GetTick>
 8043660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043662:	687b      	ldr	r3, [r7, #4]
 8043664:	2b00      	cmp	r3, #0
 8043666:	d101      	bne.n	804366c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8043668:	2301      	movs	r3, #1
 804366a:	e099      	b.n	80437a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 804366c:	687b      	ldr	r3, [r7, #4]
 804366e:	2202      	movs	r2, #2
 8043670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8043674:	687b      	ldr	r3, [r7, #4]
 8043676:	2200      	movs	r2, #0
 8043678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 804367c:	687b      	ldr	r3, [r7, #4]
 804367e:	681b      	ldr	r3, [r3, #0]
 8043680:	681a      	ldr	r2, [r3, #0]
 8043682:	687b      	ldr	r3, [r7, #4]
 8043684:	681b      	ldr	r3, [r3, #0]
 8043686:	f022 0201 	bic.w	r2, r2, #1
 804368a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804368c:	e00f      	b.n	80436ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804368e:	f7ff feb1 	bl	80433f4 <HAL_GetTick>
 8043692:	4602      	mov	r2, r0
 8043694:	693b      	ldr	r3, [r7, #16]
 8043696:	1ad3      	subs	r3, r2, r3
 8043698:	2b05      	cmp	r3, #5
 804369a:	d908      	bls.n	80436ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 804369c:	687b      	ldr	r3, [r7, #4]
 804369e:	2220      	movs	r2, #32
 80436a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80436a2:	687b      	ldr	r3, [r7, #4]
 80436a4:	2203      	movs	r2, #3
 80436a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80436aa:	2303      	movs	r3, #3
 80436ac:	e078      	b.n	80437a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80436ae:	687b      	ldr	r3, [r7, #4]
 80436b0:	681b      	ldr	r3, [r3, #0]
 80436b2:	681b      	ldr	r3, [r3, #0]
 80436b4:	f003 0301 	and.w	r3, r3, #1
 80436b8:	2b00      	cmp	r3, #0
 80436ba:	d1e8      	bne.n	804368e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80436bc:	687b      	ldr	r3, [r7, #4]
 80436be:	681b      	ldr	r3, [r3, #0]
 80436c0:	681b      	ldr	r3, [r3, #0]
 80436c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80436c4:	697a      	ldr	r2, [r7, #20]
 80436c6:	4b38      	ldr	r3, [pc, #224]	; (80437a8 <HAL_DMA_Init+0x158>)
 80436c8:	4013      	ands	r3, r2
 80436ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80436cc:	687b      	ldr	r3, [r7, #4]
 80436ce:	685a      	ldr	r2, [r3, #4]
 80436d0:	687b      	ldr	r3, [r7, #4]
 80436d2:	689b      	ldr	r3, [r3, #8]
 80436d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80436d6:	687b      	ldr	r3, [r7, #4]
 80436d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80436da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80436dc:	687b      	ldr	r3, [r7, #4]
 80436de:	691b      	ldr	r3, [r3, #16]
 80436e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80436e2:	687b      	ldr	r3, [r7, #4]
 80436e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80436e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80436e8:	687b      	ldr	r3, [r7, #4]
 80436ea:	699b      	ldr	r3, [r3, #24]
 80436ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80436ee:	687b      	ldr	r3, [r7, #4]
 80436f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80436f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80436f4:	687b      	ldr	r3, [r7, #4]
 80436f6:	6a1b      	ldr	r3, [r3, #32]
 80436f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80436fa:	697a      	ldr	r2, [r7, #20]
 80436fc:	4313      	orrs	r3, r2
 80436fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8043700:	687b      	ldr	r3, [r7, #4]
 8043702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043704:	2b04      	cmp	r3, #4
 8043706:	d107      	bne.n	8043718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8043708:	687b      	ldr	r3, [r7, #4]
 804370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804370c:	687b      	ldr	r3, [r7, #4]
 804370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043710:	4313      	orrs	r3, r2
 8043712:	697a      	ldr	r2, [r7, #20]
 8043714:	4313      	orrs	r3, r2
 8043716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8043718:	687b      	ldr	r3, [r7, #4]
 804371a:	681b      	ldr	r3, [r3, #0]
 804371c:	697a      	ldr	r2, [r7, #20]
 804371e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8043720:	687b      	ldr	r3, [r7, #4]
 8043722:	681b      	ldr	r3, [r3, #0]
 8043724:	695b      	ldr	r3, [r3, #20]
 8043726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8043728:	697b      	ldr	r3, [r7, #20]
 804372a:	f023 0307 	bic.w	r3, r3, #7
 804372e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8043730:	687b      	ldr	r3, [r7, #4]
 8043732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043734:	697a      	ldr	r2, [r7, #20]
 8043736:	4313      	orrs	r3, r2
 8043738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804373a:	687b      	ldr	r3, [r7, #4]
 804373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804373e:	2b04      	cmp	r3, #4
 8043740:	d117      	bne.n	8043772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8043742:	687b      	ldr	r3, [r7, #4]
 8043744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043746:	697a      	ldr	r2, [r7, #20]
 8043748:	4313      	orrs	r3, r2
 804374a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 804374c:	687b      	ldr	r3, [r7, #4]
 804374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043750:	2b00      	cmp	r3, #0
 8043752:	d00e      	beq.n	8043772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8043754:	6878      	ldr	r0, [r7, #4]
 8043756:	f000 f8bd 	bl	80438d4 <DMA_CheckFifoParam>
 804375a:	4603      	mov	r3, r0
 804375c:	2b00      	cmp	r3, #0
 804375e:	d008      	beq.n	8043772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043760:	687b      	ldr	r3, [r7, #4]
 8043762:	2240      	movs	r2, #64	; 0x40
 8043764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8043766:	687b      	ldr	r3, [r7, #4]
 8043768:	2201      	movs	r2, #1
 804376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 804376e:	2301      	movs	r3, #1
 8043770:	e016      	b.n	80437a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8043772:	687b      	ldr	r3, [r7, #4]
 8043774:	681b      	ldr	r3, [r3, #0]
 8043776:	697a      	ldr	r2, [r7, #20]
 8043778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804377a:	6878      	ldr	r0, [r7, #4]
 804377c:	f000 f874 	bl	8043868 <DMA_CalcBaseAndBitshift>
 8043780:	4603      	mov	r3, r0
 8043782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043784:	687b      	ldr	r3, [r7, #4]
 8043786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043788:	223f      	movs	r2, #63	; 0x3f
 804378a:	409a      	lsls	r2, r3
 804378c:	68fb      	ldr	r3, [r7, #12]
 804378e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043790:	687b      	ldr	r3, [r7, #4]
 8043792:	2200      	movs	r2, #0
 8043794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8043796:	687b      	ldr	r3, [r7, #4]
 8043798:	2201      	movs	r2, #1
 804379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 804379e:	2300      	movs	r3, #0
}
 80437a0:	4618      	mov	r0, r3
 80437a2:	3718      	adds	r7, #24
 80437a4:	46bd      	mov	sp, r7
 80437a6:	bd80      	pop	{r7, pc}
 80437a8:	f010803f 	.word	0xf010803f

080437ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80437ac:	b580      	push	{r7, lr}
 80437ae:	b084      	sub	sp, #16
 80437b0:	af00      	add	r7, sp, #0
 80437b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	2b00      	cmp	r3, #0
 80437b8:	d101      	bne.n	80437be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80437ba:	2301      	movs	r3, #1
 80437bc:	e050      	b.n	8043860 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80437be:	687b      	ldr	r3, [r7, #4]
 80437c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80437c4:	b2db      	uxtb	r3, r3
 80437c6:	2b02      	cmp	r3, #2
 80437c8:	d101      	bne.n	80437ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80437ca:	2302      	movs	r3, #2
 80437cc:	e048      	b.n	8043860 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80437ce:	687b      	ldr	r3, [r7, #4]
 80437d0:	681b      	ldr	r3, [r3, #0]
 80437d2:	681a      	ldr	r2, [r3, #0]
 80437d4:	687b      	ldr	r3, [r7, #4]
 80437d6:	681b      	ldr	r3, [r3, #0]
 80437d8:	f022 0201 	bic.w	r2, r2, #1
 80437dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80437de:	687b      	ldr	r3, [r7, #4]
 80437e0:	681b      	ldr	r3, [r3, #0]
 80437e2:	2200      	movs	r2, #0
 80437e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80437e6:	687b      	ldr	r3, [r7, #4]
 80437e8:	681b      	ldr	r3, [r3, #0]
 80437ea:	2200      	movs	r2, #0
 80437ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80437ee:	687b      	ldr	r3, [r7, #4]
 80437f0:	681b      	ldr	r3, [r3, #0]
 80437f2:	2200      	movs	r2, #0
 80437f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80437f6:	687b      	ldr	r3, [r7, #4]
 80437f8:	681b      	ldr	r3, [r3, #0]
 80437fa:	2200      	movs	r2, #0
 80437fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80437fe:	687b      	ldr	r3, [r7, #4]
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	2200      	movs	r2, #0
 8043804:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8043806:	687b      	ldr	r3, [r7, #4]
 8043808:	681b      	ldr	r3, [r3, #0]
 804380a:	2221      	movs	r2, #33	; 0x21
 804380c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804380e:	6878      	ldr	r0, [r7, #4]
 8043810:	f000 f82a 	bl	8043868 <DMA_CalcBaseAndBitshift>
 8043814:	4603      	mov	r3, r0
 8043816:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8043818:	687b      	ldr	r3, [r7, #4]
 804381a:	2200      	movs	r2, #0
 804381c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 804381e:	687b      	ldr	r3, [r7, #4]
 8043820:	2200      	movs	r2, #0
 8043822:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8043824:	687b      	ldr	r3, [r7, #4]
 8043826:	2200      	movs	r2, #0
 8043828:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 804382a:	687b      	ldr	r3, [r7, #4]
 804382c:	2200      	movs	r2, #0
 804382e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8043830:	687b      	ldr	r3, [r7, #4]
 8043832:	2200      	movs	r2, #0
 8043834:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8043836:	687b      	ldr	r3, [r7, #4]
 8043838:	2200      	movs	r2, #0
 804383a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 804383c:	687b      	ldr	r3, [r7, #4]
 804383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043840:	223f      	movs	r2, #63	; 0x3f
 8043842:	409a      	lsls	r2, r3
 8043844:	68fb      	ldr	r3, [r7, #12]
 8043846:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043848:	687b      	ldr	r3, [r7, #4]
 804384a:	2200      	movs	r2, #0
 804384c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 804384e:	687b      	ldr	r3, [r7, #4]
 8043850:	2200      	movs	r2, #0
 8043852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8043856:	687b      	ldr	r3, [r7, #4]
 8043858:	2200      	movs	r2, #0
 804385a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 804385e:	2300      	movs	r3, #0
}
 8043860:	4618      	mov	r0, r3
 8043862:	3710      	adds	r7, #16
 8043864:	46bd      	mov	sp, r7
 8043866:	bd80      	pop	{r7, pc}

08043868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8043868:	b480      	push	{r7}
 804386a:	b085      	sub	sp, #20
 804386c:	af00      	add	r7, sp, #0
 804386e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043870:	687b      	ldr	r3, [r7, #4]
 8043872:	681b      	ldr	r3, [r3, #0]
 8043874:	b2db      	uxtb	r3, r3
 8043876:	3b10      	subs	r3, #16
 8043878:	4a14      	ldr	r2, [pc, #80]	; (80438cc <DMA_CalcBaseAndBitshift+0x64>)
 804387a:	fba2 2303 	umull	r2, r3, r2, r3
 804387e:	091b      	lsrs	r3, r3, #4
 8043880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043882:	4a13      	ldr	r2, [pc, #76]	; (80438d0 <DMA_CalcBaseAndBitshift+0x68>)
 8043884:	68fb      	ldr	r3, [r7, #12]
 8043886:	4413      	add	r3, r2
 8043888:	781b      	ldrb	r3, [r3, #0]
 804388a:	461a      	mov	r2, r3
 804388c:	687b      	ldr	r3, [r7, #4]
 804388e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8043890:	68fb      	ldr	r3, [r7, #12]
 8043892:	2b03      	cmp	r3, #3
 8043894:	d909      	bls.n	80438aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8043896:	687b      	ldr	r3, [r7, #4]
 8043898:	681b      	ldr	r3, [r3, #0]
 804389a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 804389e:	f023 0303 	bic.w	r3, r3, #3
 80438a2:	1d1a      	adds	r2, r3, #4
 80438a4:	687b      	ldr	r3, [r7, #4]
 80438a6:	659a      	str	r2, [r3, #88]	; 0x58
 80438a8:	e007      	b.n	80438ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80438aa:	687b      	ldr	r3, [r7, #4]
 80438ac:	681b      	ldr	r3, [r3, #0]
 80438ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80438b2:	f023 0303 	bic.w	r3, r3, #3
 80438b6:	687a      	ldr	r2, [r7, #4]
 80438b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80438ba:	687b      	ldr	r3, [r7, #4]
 80438bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80438be:	4618      	mov	r0, r3
 80438c0:	3714      	adds	r7, #20
 80438c2:	46bd      	mov	sp, r7
 80438c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438c8:	4770      	bx	lr
 80438ca:	bf00      	nop
 80438cc:	aaaaaaab 	.word	0xaaaaaaab
 80438d0:	08050884 	.word	0x08050884

080438d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80438d4:	b480      	push	{r7}
 80438d6:	b085      	sub	sp, #20
 80438d8:	af00      	add	r7, sp, #0
 80438da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80438dc:	2300      	movs	r3, #0
 80438de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80438e0:	687b      	ldr	r3, [r7, #4]
 80438e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80438e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80438e6:	687b      	ldr	r3, [r7, #4]
 80438e8:	699b      	ldr	r3, [r3, #24]
 80438ea:	2b00      	cmp	r3, #0
 80438ec:	d11f      	bne.n	804392e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80438ee:	68bb      	ldr	r3, [r7, #8]
 80438f0:	2b03      	cmp	r3, #3
 80438f2:	d856      	bhi.n	80439a2 <DMA_CheckFifoParam+0xce>
 80438f4:	a201      	add	r2, pc, #4	; (adr r2, 80438fc <DMA_CheckFifoParam+0x28>)
 80438f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80438fa:	bf00      	nop
 80438fc:	0804390d 	.word	0x0804390d
 8043900:	0804391f 	.word	0x0804391f
 8043904:	0804390d 	.word	0x0804390d
 8043908:	080439a3 	.word	0x080439a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804390c:	687b      	ldr	r3, [r7, #4]
 804390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043914:	2b00      	cmp	r3, #0
 8043916:	d046      	beq.n	80439a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8043918:	2301      	movs	r3, #1
 804391a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804391c:	e043      	b.n	80439a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804391e:	687b      	ldr	r3, [r7, #4]
 8043920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043926:	d140      	bne.n	80439aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8043928:	2301      	movs	r3, #1
 804392a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804392c:	e03d      	b.n	80439aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 804392e:	687b      	ldr	r3, [r7, #4]
 8043930:	699b      	ldr	r3, [r3, #24]
 8043932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043936:	d121      	bne.n	804397c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8043938:	68bb      	ldr	r3, [r7, #8]
 804393a:	2b03      	cmp	r3, #3
 804393c:	d837      	bhi.n	80439ae <DMA_CheckFifoParam+0xda>
 804393e:	a201      	add	r2, pc, #4	; (adr r2, 8043944 <DMA_CheckFifoParam+0x70>)
 8043940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043944:	08043955 	.word	0x08043955
 8043948:	0804395b 	.word	0x0804395b
 804394c:	08043955 	.word	0x08043955
 8043950:	0804396d 	.word	0x0804396d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8043954:	2301      	movs	r3, #1
 8043956:	73fb      	strb	r3, [r7, #15]
      break;
 8043958:	e030      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804395a:	687b      	ldr	r3, [r7, #4]
 804395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804395e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043962:	2b00      	cmp	r3, #0
 8043964:	d025      	beq.n	80439b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8043966:	2301      	movs	r3, #1
 8043968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804396a:	e022      	b.n	80439b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043970:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043974:	d11f      	bne.n	80439b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8043976:	2301      	movs	r3, #1
 8043978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 804397a:	e01c      	b.n	80439b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 804397c:	68bb      	ldr	r3, [r7, #8]
 804397e:	2b02      	cmp	r3, #2
 8043980:	d903      	bls.n	804398a <DMA_CheckFifoParam+0xb6>
 8043982:	68bb      	ldr	r3, [r7, #8]
 8043984:	2b03      	cmp	r3, #3
 8043986:	d003      	beq.n	8043990 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8043988:	e018      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 804398a:	2301      	movs	r3, #1
 804398c:	73fb      	strb	r3, [r7, #15]
      break;
 804398e:	e015      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043990:	687b      	ldr	r3, [r7, #4]
 8043992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043998:	2b00      	cmp	r3, #0
 804399a:	d00e      	beq.n	80439ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 804399c:	2301      	movs	r3, #1
 804399e:	73fb      	strb	r3, [r7, #15]
      break;
 80439a0:	e00b      	b.n	80439ba <DMA_CheckFifoParam+0xe6>
      break;
 80439a2:	bf00      	nop
 80439a4:	e00a      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;
 80439a6:	bf00      	nop
 80439a8:	e008      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;
 80439aa:	bf00      	nop
 80439ac:	e006      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;
 80439ae:	bf00      	nop
 80439b0:	e004      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;
 80439b2:	bf00      	nop
 80439b4:	e002      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;   
 80439b6:	bf00      	nop
 80439b8:	e000      	b.n	80439bc <DMA_CheckFifoParam+0xe8>
      break;
 80439ba:	bf00      	nop
    }
  } 
  
  return status; 
 80439bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80439be:	4618      	mov	r0, r3
 80439c0:	3714      	adds	r7, #20
 80439c2:	46bd      	mov	sp, r7
 80439c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80439c8:	4770      	bx	lr
 80439ca:	bf00      	nop

080439cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80439cc:	b580      	push	{r7, lr}
 80439ce:	b082      	sub	sp, #8
 80439d0:	af00      	add	r7, sp, #0
 80439d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80439d4:	687b      	ldr	r3, [r7, #4]
 80439d6:	2b00      	cmp	r3, #0
 80439d8:	d101      	bne.n	80439de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80439da:	2301      	movs	r3, #1
 80439dc:	e03b      	b.n	8043a56 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80439de:	687b      	ldr	r3, [r7, #4]
 80439e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80439e4:	b2db      	uxtb	r3, r3
 80439e6:	2b00      	cmp	r3, #0
 80439e8:	d106      	bne.n	80439f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80439ea:	687b      	ldr	r3, [r7, #4]
 80439ec:	2200      	movs	r2, #0
 80439ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80439f2:	6878      	ldr	r0, [r7, #4]
 80439f4:	f7fd fd94 	bl	8041520 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80439f8:	687b      	ldr	r3, [r7, #4]
 80439fa:	2202      	movs	r2, #2
 80439fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8043a00:	687b      	ldr	r3, [r7, #4]
 8043a02:	681b      	ldr	r3, [r3, #0]
 8043a04:	681b      	ldr	r3, [r3, #0]
 8043a06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8043a0a:	687b      	ldr	r3, [r7, #4]
 8043a0c:	685a      	ldr	r2, [r3, #4]
 8043a0e:	687b      	ldr	r3, [r7, #4]
 8043a10:	681b      	ldr	r3, [r3, #0]
 8043a12:	430a      	orrs	r2, r1
 8043a14:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8043a16:	687b      	ldr	r3, [r7, #4]
 8043a18:	681b      	ldr	r3, [r3, #0]
 8043a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043a1c:	f023 0107 	bic.w	r1, r3, #7
 8043a20:	687b      	ldr	r3, [r7, #4]
 8043a22:	689a      	ldr	r2, [r3, #8]
 8043a24:	687b      	ldr	r3, [r7, #4]
 8043a26:	681b      	ldr	r3, [r3, #0]
 8043a28:	430a      	orrs	r2, r1
 8043a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8043a2c:	687b      	ldr	r3, [r7, #4]
 8043a2e:	681b      	ldr	r3, [r3, #0]
 8043a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043a32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8043a36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8043a3a:	687a      	ldr	r2, [r7, #4]
 8043a3c:	68d1      	ldr	r1, [r2, #12]
 8043a3e:	687a      	ldr	r2, [r7, #4]
 8043a40:	6812      	ldr	r2, [r2, #0]
 8043a42:	430b      	orrs	r3, r1
 8043a44:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8043a46:	687b      	ldr	r3, [r7, #4]
 8043a48:	2200      	movs	r2, #0
 8043a4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8043a4c:	687b      	ldr	r3, [r7, #4]
 8043a4e:	2201      	movs	r2, #1
 8043a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8043a54:	2300      	movs	r3, #0
}
 8043a56:	4618      	mov	r0, r3
 8043a58:	3708      	adds	r7, #8
 8043a5a:	46bd      	mov	sp, r7
 8043a5c:	bd80      	pop	{r7, pc}

08043a5e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8043a5e:	b580      	push	{r7, lr}
 8043a60:	b086      	sub	sp, #24
 8043a62:	af02      	add	r7, sp, #8
 8043a64:	60f8      	str	r0, [r7, #12]
 8043a66:	60b9      	str	r1, [r7, #8]
 8043a68:	607a      	str	r2, [r7, #4]
 8043a6a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043a6c:	68fb      	ldr	r3, [r7, #12]
 8043a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043a72:	2b01      	cmp	r3, #1
 8043a74:	d101      	bne.n	8043a7a <HAL_DMA2D_Start+0x1c>
 8043a76:	2302      	movs	r3, #2
 8043a78:	e018      	b.n	8043aac <HAL_DMA2D_Start+0x4e>
 8043a7a:	68fb      	ldr	r3, [r7, #12]
 8043a7c:	2201      	movs	r2, #1
 8043a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043a82:	68fb      	ldr	r3, [r7, #12]
 8043a84:	2202      	movs	r2, #2
 8043a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8043a8a:	69bb      	ldr	r3, [r7, #24]
 8043a8c:	9300      	str	r3, [sp, #0]
 8043a8e:	683b      	ldr	r3, [r7, #0]
 8043a90:	687a      	ldr	r2, [r7, #4]
 8043a92:	68b9      	ldr	r1, [r7, #8]
 8043a94:	68f8      	ldr	r0, [r7, #12]
 8043a96:	f000 fa99 	bl	8043fcc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8043a9a:	68fb      	ldr	r3, [r7, #12]
 8043a9c:	681b      	ldr	r3, [r3, #0]
 8043a9e:	681a      	ldr	r2, [r3, #0]
 8043aa0:	68fb      	ldr	r3, [r7, #12]
 8043aa2:	681b      	ldr	r3, [r3, #0]
 8043aa4:	f042 0201 	orr.w	r2, r2, #1
 8043aa8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8043aaa:	2300      	movs	r3, #0
}
 8043aac:	4618      	mov	r0, r3
 8043aae:	3710      	adds	r7, #16
 8043ab0:	46bd      	mov	sp, r7
 8043ab2:	bd80      	pop	{r7, pc}

08043ab4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8043ab4:	b580      	push	{r7, lr}
 8043ab6:	b086      	sub	sp, #24
 8043ab8:	af00      	add	r7, sp, #0
 8043aba:	6078      	str	r0, [r7, #4]
 8043abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8043abe:	2300      	movs	r3, #0
 8043ac0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8043ac2:	687b      	ldr	r3, [r7, #4]
 8043ac4:	681b      	ldr	r3, [r3, #0]
 8043ac6:	681b      	ldr	r3, [r3, #0]
 8043ac8:	f003 0301 	and.w	r3, r3, #1
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d056      	beq.n	8043b7e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043ad0:	f7ff fc90 	bl	80433f4 <HAL_GetTick>
 8043ad4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043ad6:	e04b      	b.n	8043b70 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043ad8:	687b      	ldr	r3, [r7, #4]
 8043ada:	681b      	ldr	r3, [r3, #0]
 8043adc:	685b      	ldr	r3, [r3, #4]
 8043ade:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043ae0:	68fb      	ldr	r3, [r7, #12]
 8043ae2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8043ae6:	2b00      	cmp	r3, #0
 8043ae8:	d023      	beq.n	8043b32 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043aea:	68fb      	ldr	r3, [r7, #12]
 8043aec:	f003 0320 	and.w	r3, r3, #32
 8043af0:	2b00      	cmp	r3, #0
 8043af2:	d005      	beq.n	8043b00 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043af4:	687b      	ldr	r3, [r7, #4]
 8043af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043af8:	f043 0202 	orr.w	r2, r3, #2
 8043afc:	687b      	ldr	r3, [r7, #4]
 8043afe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043b00:	68fb      	ldr	r3, [r7, #12]
 8043b02:	f003 0301 	and.w	r3, r3, #1
 8043b06:	2b00      	cmp	r3, #0
 8043b08:	d005      	beq.n	8043b16 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043b0a:	687b      	ldr	r3, [r7, #4]
 8043b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043b0e:	f043 0201 	orr.w	r2, r3, #1
 8043b12:	687b      	ldr	r3, [r7, #4]
 8043b14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043b16:	687b      	ldr	r3, [r7, #4]
 8043b18:	681b      	ldr	r3, [r3, #0]
 8043b1a:	2221      	movs	r2, #33	; 0x21
 8043b1c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043b1e:	687b      	ldr	r3, [r7, #4]
 8043b20:	2204      	movs	r2, #4
 8043b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	2200      	movs	r2, #0
 8043b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043b2e:	2301      	movs	r3, #1
 8043b30:	e0a5      	b.n	8043c7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043b32:	683b      	ldr	r3, [r7, #0]
 8043b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043b38:	d01a      	beq.n	8043b70 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043b3a:	f7ff fc5b 	bl	80433f4 <HAL_GetTick>
 8043b3e:	4602      	mov	r2, r0
 8043b40:	697b      	ldr	r3, [r7, #20]
 8043b42:	1ad3      	subs	r3, r2, r3
 8043b44:	683a      	ldr	r2, [r7, #0]
 8043b46:	429a      	cmp	r2, r3
 8043b48:	d302      	bcc.n	8043b50 <HAL_DMA2D_PollForTransfer+0x9c>
 8043b4a:	683b      	ldr	r3, [r7, #0]
 8043b4c:	2b00      	cmp	r3, #0
 8043b4e:	d10f      	bne.n	8043b70 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043b50:	687b      	ldr	r3, [r7, #4]
 8043b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043b54:	f043 0220 	orr.w	r2, r3, #32
 8043b58:	687b      	ldr	r3, [r7, #4]
 8043b5a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043b5c:	687b      	ldr	r3, [r7, #4]
 8043b5e:	2203      	movs	r2, #3
 8043b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043b64:	687b      	ldr	r3, [r7, #4]
 8043b66:	2200      	movs	r2, #0
 8043b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043b6c:	2303      	movs	r3, #3
 8043b6e:	e086      	b.n	8043c7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043b70:	687b      	ldr	r3, [r7, #4]
 8043b72:	681b      	ldr	r3, [r3, #0]
 8043b74:	685b      	ldr	r3, [r3, #4]
 8043b76:	f003 0302 	and.w	r3, r3, #2
 8043b7a:	2b00      	cmp	r3, #0
 8043b7c:	d0ac      	beq.n	8043ad8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8043b7e:	687b      	ldr	r3, [r7, #4]
 8043b80:	681b      	ldr	r3, [r3, #0]
 8043b82:	69db      	ldr	r3, [r3, #28]
 8043b84:	f003 0320 	and.w	r3, r3, #32
 8043b88:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8043b8a:	687b      	ldr	r3, [r7, #4]
 8043b8c:	681b      	ldr	r3, [r3, #0]
 8043b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043b90:	f003 0320 	and.w	r3, r3, #32
 8043b94:	693a      	ldr	r2, [r7, #16]
 8043b96:	4313      	orrs	r3, r2
 8043b98:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8043b9a:	693b      	ldr	r3, [r7, #16]
 8043b9c:	2b00      	cmp	r3, #0
 8043b9e:	d061      	beq.n	8043c64 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043ba0:	f7ff fc28 	bl	80433f4 <HAL_GetTick>
 8043ba4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043ba6:	e056      	b.n	8043c56 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043ba8:	687b      	ldr	r3, [r7, #4]
 8043baa:	681b      	ldr	r3, [r3, #0]
 8043bac:	685b      	ldr	r3, [r3, #4]
 8043bae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043bb0:	68fb      	ldr	r3, [r7, #12]
 8043bb2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8043bb6:	2b00      	cmp	r3, #0
 8043bb8:	d02e      	beq.n	8043c18 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043bba:	68fb      	ldr	r3, [r7, #12]
 8043bbc:	f003 0308 	and.w	r3, r3, #8
 8043bc0:	2b00      	cmp	r3, #0
 8043bc2:	d005      	beq.n	8043bd0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043bc4:	687b      	ldr	r3, [r7, #4]
 8043bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043bc8:	f043 0204 	orr.w	r2, r3, #4
 8043bcc:	687b      	ldr	r3, [r7, #4]
 8043bce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043bd0:	68fb      	ldr	r3, [r7, #12]
 8043bd2:	f003 0320 	and.w	r3, r3, #32
 8043bd6:	2b00      	cmp	r3, #0
 8043bd8:	d005      	beq.n	8043be6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043bda:	687b      	ldr	r3, [r7, #4]
 8043bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043bde:	f043 0202 	orr.w	r2, r3, #2
 8043be2:	687b      	ldr	r3, [r7, #4]
 8043be4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043be6:	68fb      	ldr	r3, [r7, #12]
 8043be8:	f003 0301 	and.w	r3, r3, #1
 8043bec:	2b00      	cmp	r3, #0
 8043bee:	d005      	beq.n	8043bfc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043bf0:	687b      	ldr	r3, [r7, #4]
 8043bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043bf4:	f043 0201 	orr.w	r2, r3, #1
 8043bf8:	687b      	ldr	r3, [r7, #4]
 8043bfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043bfc:	687b      	ldr	r3, [r7, #4]
 8043bfe:	681b      	ldr	r3, [r3, #0]
 8043c00:	2229      	movs	r2, #41	; 0x29
 8043c02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043c04:	687b      	ldr	r3, [r7, #4]
 8043c06:	2204      	movs	r2, #4
 8043c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	2200      	movs	r2, #0
 8043c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043c14:	2301      	movs	r3, #1
 8043c16:	e032      	b.n	8043c7e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043c18:	683b      	ldr	r3, [r7, #0]
 8043c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043c1e:	d01a      	beq.n	8043c56 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043c20:	f7ff fbe8 	bl	80433f4 <HAL_GetTick>
 8043c24:	4602      	mov	r2, r0
 8043c26:	697b      	ldr	r3, [r7, #20]
 8043c28:	1ad3      	subs	r3, r2, r3
 8043c2a:	683a      	ldr	r2, [r7, #0]
 8043c2c:	429a      	cmp	r2, r3
 8043c2e:	d302      	bcc.n	8043c36 <HAL_DMA2D_PollForTransfer+0x182>
 8043c30:	683b      	ldr	r3, [r7, #0]
 8043c32:	2b00      	cmp	r3, #0
 8043c34:	d10f      	bne.n	8043c56 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043c36:	687b      	ldr	r3, [r7, #4]
 8043c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c3a:	f043 0220 	orr.w	r2, r3, #32
 8043c3e:	687b      	ldr	r3, [r7, #4]
 8043c40:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043c42:	687b      	ldr	r3, [r7, #4]
 8043c44:	2203      	movs	r2, #3
 8043c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043c4a:	687b      	ldr	r3, [r7, #4]
 8043c4c:	2200      	movs	r2, #0
 8043c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043c52:	2303      	movs	r3, #3
 8043c54:	e013      	b.n	8043c7e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043c56:	687b      	ldr	r3, [r7, #4]
 8043c58:	681b      	ldr	r3, [r3, #0]
 8043c5a:	685b      	ldr	r3, [r3, #4]
 8043c5c:	f003 0310 	and.w	r3, r3, #16
 8043c60:	2b00      	cmp	r3, #0
 8043c62:	d0a1      	beq.n	8043ba8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	681b      	ldr	r3, [r3, #0]
 8043c68:	2212      	movs	r2, #18
 8043c6a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043c6c:	687b      	ldr	r3, [r7, #4]
 8043c6e:	2201      	movs	r2, #1
 8043c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043c74:	687b      	ldr	r3, [r7, #4]
 8043c76:	2200      	movs	r2, #0
 8043c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043c7c:	2300      	movs	r3, #0
}
 8043c7e:	4618      	mov	r0, r3
 8043c80:	3718      	adds	r7, #24
 8043c82:	46bd      	mov	sp, r7
 8043c84:	bd80      	pop	{r7, pc}

08043c86 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8043c86:	b580      	push	{r7, lr}
 8043c88:	b084      	sub	sp, #16
 8043c8a:	af00      	add	r7, sp, #0
 8043c8c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	681b      	ldr	r3, [r3, #0]
 8043c92:	685b      	ldr	r3, [r3, #4]
 8043c94:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8043c96:	687b      	ldr	r3, [r7, #4]
 8043c98:	681b      	ldr	r3, [r3, #0]
 8043c9a:	681b      	ldr	r3, [r3, #0]
 8043c9c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043c9e:	68fb      	ldr	r3, [r7, #12]
 8043ca0:	f003 0301 	and.w	r3, r3, #1
 8043ca4:	2b00      	cmp	r3, #0
 8043ca6:	d026      	beq.n	8043cf6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8043ca8:	68bb      	ldr	r3, [r7, #8]
 8043caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043cae:	2b00      	cmp	r3, #0
 8043cb0:	d021      	beq.n	8043cf6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8043cb2:	687b      	ldr	r3, [r7, #4]
 8043cb4:	681b      	ldr	r3, [r3, #0]
 8043cb6:	681a      	ldr	r2, [r3, #0]
 8043cb8:	687b      	ldr	r3, [r7, #4]
 8043cba:	681b      	ldr	r3, [r3, #0]
 8043cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043cc0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043cc2:	687b      	ldr	r3, [r7, #4]
 8043cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043cc6:	f043 0201 	orr.w	r2, r3, #1
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8043cce:	687b      	ldr	r3, [r7, #4]
 8043cd0:	681b      	ldr	r3, [r3, #0]
 8043cd2:	2201      	movs	r2, #1
 8043cd4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043cd6:	687b      	ldr	r3, [r7, #4]
 8043cd8:	2204      	movs	r2, #4
 8043cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043cde:	687b      	ldr	r3, [r7, #4]
 8043ce0:	2200      	movs	r2, #0
 8043ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043ce6:	687b      	ldr	r3, [r7, #4]
 8043ce8:	695b      	ldr	r3, [r3, #20]
 8043cea:	2b00      	cmp	r3, #0
 8043cec:	d003      	beq.n	8043cf6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043cee:	687b      	ldr	r3, [r7, #4]
 8043cf0:	695b      	ldr	r3, [r3, #20]
 8043cf2:	6878      	ldr	r0, [r7, #4]
 8043cf4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043cf6:	68fb      	ldr	r3, [r7, #12]
 8043cf8:	f003 0320 	and.w	r3, r3, #32
 8043cfc:	2b00      	cmp	r3, #0
 8043cfe:	d026      	beq.n	8043d4e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8043d00:	68bb      	ldr	r3, [r7, #8]
 8043d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8043d06:	2b00      	cmp	r3, #0
 8043d08:	d021      	beq.n	8043d4e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8043d0a:	687b      	ldr	r3, [r7, #4]
 8043d0c:	681b      	ldr	r3, [r3, #0]
 8043d0e:	681a      	ldr	r2, [r3, #0]
 8043d10:	687b      	ldr	r3, [r7, #4]
 8043d12:	681b      	ldr	r3, [r3, #0]
 8043d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8043d18:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8043d1a:	687b      	ldr	r3, [r7, #4]
 8043d1c:	681b      	ldr	r3, [r3, #0]
 8043d1e:	2220      	movs	r2, #32
 8043d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043d22:	687b      	ldr	r3, [r7, #4]
 8043d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043d26:	f043 0202 	orr.w	r2, r3, #2
 8043d2a:	687b      	ldr	r3, [r7, #4]
 8043d2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043d2e:	687b      	ldr	r3, [r7, #4]
 8043d30:	2204      	movs	r2, #4
 8043d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043d36:	687b      	ldr	r3, [r7, #4]
 8043d38:	2200      	movs	r2, #0
 8043d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043d3e:	687b      	ldr	r3, [r7, #4]
 8043d40:	695b      	ldr	r3, [r3, #20]
 8043d42:	2b00      	cmp	r3, #0
 8043d44:	d003      	beq.n	8043d4e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043d46:	687b      	ldr	r3, [r7, #4]
 8043d48:	695b      	ldr	r3, [r3, #20]
 8043d4a:	6878      	ldr	r0, [r7, #4]
 8043d4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043d4e:	68fb      	ldr	r3, [r7, #12]
 8043d50:	f003 0308 	and.w	r3, r3, #8
 8043d54:	2b00      	cmp	r3, #0
 8043d56:	d026      	beq.n	8043da6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8043d58:	68bb      	ldr	r3, [r7, #8]
 8043d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043d5e:	2b00      	cmp	r3, #0
 8043d60:	d021      	beq.n	8043da6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8043d62:	687b      	ldr	r3, [r7, #4]
 8043d64:	681b      	ldr	r3, [r3, #0]
 8043d66:	681a      	ldr	r2, [r3, #0]
 8043d68:	687b      	ldr	r3, [r7, #4]
 8043d6a:	681b      	ldr	r3, [r3, #0]
 8043d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043d70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8043d72:	687b      	ldr	r3, [r7, #4]
 8043d74:	681b      	ldr	r3, [r3, #0]
 8043d76:	2208      	movs	r2, #8
 8043d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043d7a:	687b      	ldr	r3, [r7, #4]
 8043d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043d7e:	f043 0204 	orr.w	r2, r3, #4
 8043d82:	687b      	ldr	r3, [r7, #4]
 8043d84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043d86:	687b      	ldr	r3, [r7, #4]
 8043d88:	2204      	movs	r2, #4
 8043d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043d8e:	687b      	ldr	r3, [r7, #4]
 8043d90:	2200      	movs	r2, #0
 8043d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043d96:	687b      	ldr	r3, [r7, #4]
 8043d98:	695b      	ldr	r3, [r3, #20]
 8043d9a:	2b00      	cmp	r3, #0
 8043d9c:	d003      	beq.n	8043da6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043d9e:	687b      	ldr	r3, [r7, #4]
 8043da0:	695b      	ldr	r3, [r3, #20]
 8043da2:	6878      	ldr	r0, [r7, #4]
 8043da4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8043da6:	68fb      	ldr	r3, [r7, #12]
 8043da8:	f003 0304 	and.w	r3, r3, #4
 8043dac:	2b00      	cmp	r3, #0
 8043dae:	d013      	beq.n	8043dd8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8043db0:	68bb      	ldr	r3, [r7, #8]
 8043db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043db6:	2b00      	cmp	r3, #0
 8043db8:	d00e      	beq.n	8043dd8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8043dba:	687b      	ldr	r3, [r7, #4]
 8043dbc:	681b      	ldr	r3, [r3, #0]
 8043dbe:	681a      	ldr	r2, [r3, #0]
 8043dc0:	687b      	ldr	r3, [r7, #4]
 8043dc2:	681b      	ldr	r3, [r3, #0]
 8043dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043dc8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8043dca:	687b      	ldr	r3, [r7, #4]
 8043dcc:	681b      	ldr	r3, [r3, #0]
 8043dce:	2204      	movs	r2, #4
 8043dd0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8043dd2:	6878      	ldr	r0, [r7, #4]
 8043dd4:	f000 f853 	bl	8043e7e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8043dd8:	68fb      	ldr	r3, [r7, #12]
 8043dda:	f003 0302 	and.w	r3, r3, #2
 8043dde:	2b00      	cmp	r3, #0
 8043de0:	d024      	beq.n	8043e2c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8043de2:	68bb      	ldr	r3, [r7, #8]
 8043de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043de8:	2b00      	cmp	r3, #0
 8043dea:	d01f      	beq.n	8043e2c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8043dec:	687b      	ldr	r3, [r7, #4]
 8043dee:	681b      	ldr	r3, [r3, #0]
 8043df0:	681a      	ldr	r2, [r3, #0]
 8043df2:	687b      	ldr	r3, [r7, #4]
 8043df4:	681b      	ldr	r3, [r3, #0]
 8043df6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8043dfa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8043dfc:	687b      	ldr	r3, [r7, #4]
 8043dfe:	681b      	ldr	r3, [r3, #0]
 8043e00:	2202      	movs	r2, #2
 8043e02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043e04:	687b      	ldr	r3, [r7, #4]
 8043e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043e08:	687b      	ldr	r3, [r7, #4]
 8043e0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043e0c:	687b      	ldr	r3, [r7, #4]
 8043e0e:	2201      	movs	r2, #1
 8043e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043e14:	687b      	ldr	r3, [r7, #4]
 8043e16:	2200      	movs	r2, #0
 8043e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8043e1c:	687b      	ldr	r3, [r7, #4]
 8043e1e:	691b      	ldr	r3, [r3, #16]
 8043e20:	2b00      	cmp	r3, #0
 8043e22:	d003      	beq.n	8043e2c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8043e24:	687b      	ldr	r3, [r7, #4]
 8043e26:	691b      	ldr	r3, [r3, #16]
 8043e28:	6878      	ldr	r0, [r7, #4]
 8043e2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8043e2c:	68fb      	ldr	r3, [r7, #12]
 8043e2e:	f003 0310 	and.w	r3, r3, #16
 8043e32:	2b00      	cmp	r3, #0
 8043e34:	d01f      	beq.n	8043e76 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8043e36:	68bb      	ldr	r3, [r7, #8]
 8043e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043e3c:	2b00      	cmp	r3, #0
 8043e3e:	d01a      	beq.n	8043e76 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8043e40:	687b      	ldr	r3, [r7, #4]
 8043e42:	681b      	ldr	r3, [r3, #0]
 8043e44:	681a      	ldr	r2, [r3, #0]
 8043e46:	687b      	ldr	r3, [r7, #4]
 8043e48:	681b      	ldr	r3, [r3, #0]
 8043e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043e4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8043e50:	687b      	ldr	r3, [r7, #4]
 8043e52:	681b      	ldr	r3, [r3, #0]
 8043e54:	2210      	movs	r2, #16
 8043e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043e58:	687b      	ldr	r3, [r7, #4]
 8043e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043e5c:	687b      	ldr	r3, [r7, #4]
 8043e5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043e60:	687b      	ldr	r3, [r7, #4]
 8043e62:	2201      	movs	r2, #1
 8043e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043e68:	687b      	ldr	r3, [r7, #4]
 8043e6a:	2200      	movs	r2, #0
 8043e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8043e70:	6878      	ldr	r0, [r7, #4]
 8043e72:	f000 f80e 	bl	8043e92 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8043e76:	bf00      	nop
 8043e78:	3710      	adds	r7, #16
 8043e7a:	46bd      	mov	sp, r7
 8043e7c:	bd80      	pop	{r7, pc}

08043e7e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043e7e:	b480      	push	{r7}
 8043e80:	b083      	sub	sp, #12
 8043e82:	af00      	add	r7, sp, #0
 8043e84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8043e86:	bf00      	nop
 8043e88:	370c      	adds	r7, #12
 8043e8a:	46bd      	mov	sp, r7
 8043e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e90:	4770      	bx	lr

08043e92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043e92:	b480      	push	{r7}
 8043e94:	b083      	sub	sp, #12
 8043e96:	af00      	add	r7, sp, #0
 8043e98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8043e9a:	bf00      	nop
 8043e9c:	370c      	adds	r7, #12
 8043e9e:	46bd      	mov	sp, r7
 8043ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ea4:	4770      	bx	lr
	...

08043ea8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8043ea8:	b480      	push	{r7}
 8043eaa:	b087      	sub	sp, #28
 8043eac:	af00      	add	r7, sp, #0
 8043eae:	6078      	str	r0, [r7, #4]
 8043eb0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8043eb2:	687b      	ldr	r3, [r7, #4]
 8043eb4:	685b      	ldr	r3, [r3, #4]
 8043eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043eba:	687b      	ldr	r3, [r7, #4]
 8043ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043ec0:	2b01      	cmp	r3, #1
 8043ec2:	d101      	bne.n	8043ec8 <HAL_DMA2D_ConfigLayer+0x20>
 8043ec4:	2302      	movs	r3, #2
 8043ec6:	e079      	b.n	8043fbc <HAL_DMA2D_ConfigLayer+0x114>
 8043ec8:	687b      	ldr	r3, [r7, #4]
 8043eca:	2201      	movs	r2, #1
 8043ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043ed0:	687b      	ldr	r3, [r7, #4]
 8043ed2:	2202      	movs	r2, #2
 8043ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8043ed8:	683b      	ldr	r3, [r7, #0]
 8043eda:	011b      	lsls	r3, r3, #4
 8043edc:	3318      	adds	r3, #24
 8043ede:	687a      	ldr	r2, [r7, #4]
 8043ee0:	4413      	add	r3, r2
 8043ee2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8043ee4:	693b      	ldr	r3, [r7, #16]
 8043ee6:	685a      	ldr	r2, [r3, #4]
 8043ee8:	693b      	ldr	r3, [r7, #16]
 8043eea:	689b      	ldr	r3, [r3, #8]
 8043eec:	041b      	lsls	r3, r3, #16
 8043eee:	4313      	orrs	r3, r2
 8043ef0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8043ef2:	4b35      	ldr	r3, [pc, #212]	; (8043fc8 <HAL_DMA2D_ConfigLayer+0x120>)
 8043ef4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043ef6:	693b      	ldr	r3, [r7, #16]
 8043ef8:	685b      	ldr	r3, [r3, #4]
 8043efa:	2b0a      	cmp	r3, #10
 8043efc:	d003      	beq.n	8043f06 <HAL_DMA2D_ConfigLayer+0x5e>
 8043efe:	693b      	ldr	r3, [r7, #16]
 8043f00:	685b      	ldr	r3, [r3, #4]
 8043f02:	2b09      	cmp	r3, #9
 8043f04:	d107      	bne.n	8043f16 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8043f06:	693b      	ldr	r3, [r7, #16]
 8043f08:	68db      	ldr	r3, [r3, #12]
 8043f0a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8043f0e:	697a      	ldr	r2, [r7, #20]
 8043f10:	4313      	orrs	r3, r2
 8043f12:	617b      	str	r3, [r7, #20]
 8043f14:	e005      	b.n	8043f22 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8043f16:	693b      	ldr	r3, [r7, #16]
 8043f18:	68db      	ldr	r3, [r3, #12]
 8043f1a:	061b      	lsls	r3, r3, #24
 8043f1c:	697a      	ldr	r2, [r7, #20]
 8043f1e:	4313      	orrs	r3, r2
 8043f20:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8043f22:	683b      	ldr	r3, [r7, #0]
 8043f24:	2b00      	cmp	r3, #0
 8043f26:	d120      	bne.n	8043f6a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8043f28:	687b      	ldr	r3, [r7, #4]
 8043f2a:	681b      	ldr	r3, [r3, #0]
 8043f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043f2e:	68fb      	ldr	r3, [r7, #12]
 8043f30:	43db      	mvns	r3, r3
 8043f32:	ea02 0103 	and.w	r1, r2, r3
 8043f36:	687b      	ldr	r3, [r7, #4]
 8043f38:	681b      	ldr	r3, [r3, #0]
 8043f3a:	697a      	ldr	r2, [r7, #20]
 8043f3c:	430a      	orrs	r2, r1
 8043f3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8043f40:	687b      	ldr	r3, [r7, #4]
 8043f42:	681b      	ldr	r3, [r3, #0]
 8043f44:	693a      	ldr	r2, [r7, #16]
 8043f46:	6812      	ldr	r2, [r2, #0]
 8043f48:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043f4a:	693b      	ldr	r3, [r7, #16]
 8043f4c:	685b      	ldr	r3, [r3, #4]
 8043f4e:	2b0a      	cmp	r3, #10
 8043f50:	d003      	beq.n	8043f5a <HAL_DMA2D_ConfigLayer+0xb2>
 8043f52:	693b      	ldr	r3, [r7, #16]
 8043f54:	685b      	ldr	r3, [r3, #4]
 8043f56:	2b09      	cmp	r3, #9
 8043f58:	d127      	bne.n	8043faa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8043f5a:	693b      	ldr	r3, [r7, #16]
 8043f5c:	68da      	ldr	r2, [r3, #12]
 8043f5e:	687b      	ldr	r3, [r7, #4]
 8043f60:	681b      	ldr	r3, [r3, #0]
 8043f62:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043f66:	629a      	str	r2, [r3, #40]	; 0x28
 8043f68:	e01f      	b.n	8043faa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8043f6a:	687b      	ldr	r3, [r7, #4]
 8043f6c:	681b      	ldr	r3, [r3, #0]
 8043f6e:	69da      	ldr	r2, [r3, #28]
 8043f70:	68fb      	ldr	r3, [r7, #12]
 8043f72:	43db      	mvns	r3, r3
 8043f74:	ea02 0103 	and.w	r1, r2, r3
 8043f78:	687b      	ldr	r3, [r7, #4]
 8043f7a:	681b      	ldr	r3, [r3, #0]
 8043f7c:	697a      	ldr	r2, [r7, #20]
 8043f7e:	430a      	orrs	r2, r1
 8043f80:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8043f82:	687b      	ldr	r3, [r7, #4]
 8043f84:	681b      	ldr	r3, [r3, #0]
 8043f86:	693a      	ldr	r2, [r7, #16]
 8043f88:	6812      	ldr	r2, [r2, #0]
 8043f8a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043f8c:	693b      	ldr	r3, [r7, #16]
 8043f8e:	685b      	ldr	r3, [r3, #4]
 8043f90:	2b0a      	cmp	r3, #10
 8043f92:	d003      	beq.n	8043f9c <HAL_DMA2D_ConfigLayer+0xf4>
 8043f94:	693b      	ldr	r3, [r7, #16]
 8043f96:	685b      	ldr	r3, [r3, #4]
 8043f98:	2b09      	cmp	r3, #9
 8043f9a:	d106      	bne.n	8043faa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8043f9c:	693b      	ldr	r3, [r7, #16]
 8043f9e:	68da      	ldr	r2, [r3, #12]
 8043fa0:	687b      	ldr	r3, [r7, #4]
 8043fa2:	681b      	ldr	r3, [r3, #0]
 8043fa4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043fa8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043faa:	687b      	ldr	r3, [r7, #4]
 8043fac:	2201      	movs	r2, #1
 8043fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043fb2:	687b      	ldr	r3, [r7, #4]
 8043fb4:	2200      	movs	r2, #0
 8043fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043fba:	2300      	movs	r3, #0
}
 8043fbc:	4618      	mov	r0, r3
 8043fbe:	371c      	adds	r7, #28
 8043fc0:	46bd      	mov	sp, r7
 8043fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fc6:	4770      	bx	lr
 8043fc8:	ff03000f 	.word	0xff03000f

08043fcc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8043fcc:	b480      	push	{r7}
 8043fce:	b08b      	sub	sp, #44	; 0x2c
 8043fd0:	af00      	add	r7, sp, #0
 8043fd2:	60f8      	str	r0, [r7, #12]
 8043fd4:	60b9      	str	r1, [r7, #8]
 8043fd6:	607a      	str	r2, [r7, #4]
 8043fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8043fda:	68fb      	ldr	r3, [r7, #12]
 8043fdc:	681b      	ldr	r3, [r3, #0]
 8043fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043fe0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8043fe4:	683b      	ldr	r3, [r7, #0]
 8043fe6:	041a      	lsls	r2, r3, #16
 8043fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043fea:	431a      	orrs	r2, r3
 8043fec:	68fb      	ldr	r3, [r7, #12]
 8043fee:	681b      	ldr	r3, [r3, #0]
 8043ff0:	430a      	orrs	r2, r1
 8043ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8043ff4:	68fb      	ldr	r3, [r7, #12]
 8043ff6:	681b      	ldr	r3, [r3, #0]
 8043ff8:	687a      	ldr	r2, [r7, #4]
 8043ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8043ffc:	68fb      	ldr	r3, [r7, #12]
 8043ffe:	685b      	ldr	r3, [r3, #4]
 8044000:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8044004:	d174      	bne.n	80440f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8044006:	68bb      	ldr	r3, [r7, #8]
 8044008:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 804400c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 804400e:	68bb      	ldr	r3, [r7, #8]
 8044010:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8044014:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8044016:	68bb      	ldr	r3, [r7, #8]
 8044018:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804401c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 804401e:	68bb      	ldr	r3, [r7, #8]
 8044020:	b2db      	uxtb	r3, r3
 8044022:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8044024:	68fb      	ldr	r3, [r7, #12]
 8044026:	689b      	ldr	r3, [r3, #8]
 8044028:	2b00      	cmp	r3, #0
 804402a:	d108      	bne.n	804403e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 804402c:	69ba      	ldr	r2, [r7, #24]
 804402e:	69fb      	ldr	r3, [r7, #28]
 8044030:	431a      	orrs	r2, r3
 8044032:	6a3b      	ldr	r3, [r7, #32]
 8044034:	4313      	orrs	r3, r2
 8044036:	697a      	ldr	r2, [r7, #20]
 8044038:	4313      	orrs	r3, r2
 804403a:	627b      	str	r3, [r7, #36]	; 0x24
 804403c:	e053      	b.n	80440e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 804403e:	68fb      	ldr	r3, [r7, #12]
 8044040:	689b      	ldr	r3, [r3, #8]
 8044042:	2b01      	cmp	r3, #1
 8044044:	d106      	bne.n	8044054 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8044046:	69ba      	ldr	r2, [r7, #24]
 8044048:	69fb      	ldr	r3, [r7, #28]
 804404a:	4313      	orrs	r3, r2
 804404c:	697a      	ldr	r2, [r7, #20]
 804404e:	4313      	orrs	r3, r2
 8044050:	627b      	str	r3, [r7, #36]	; 0x24
 8044052:	e048      	b.n	80440e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8044054:	68fb      	ldr	r3, [r7, #12]
 8044056:	689b      	ldr	r3, [r3, #8]
 8044058:	2b02      	cmp	r3, #2
 804405a:	d111      	bne.n	8044080 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 804405c:	69fb      	ldr	r3, [r7, #28]
 804405e:	0cdb      	lsrs	r3, r3, #19
 8044060:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8044062:	69bb      	ldr	r3, [r7, #24]
 8044064:	0a9b      	lsrs	r3, r3, #10
 8044066:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8044068:	697b      	ldr	r3, [r7, #20]
 804406a:	08db      	lsrs	r3, r3, #3
 804406c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 804406e:	69bb      	ldr	r3, [r7, #24]
 8044070:	015a      	lsls	r2, r3, #5
 8044072:	69fb      	ldr	r3, [r7, #28]
 8044074:	02db      	lsls	r3, r3, #11
 8044076:	4313      	orrs	r3, r2
 8044078:	697a      	ldr	r2, [r7, #20]
 804407a:	4313      	orrs	r3, r2
 804407c:	627b      	str	r3, [r7, #36]	; 0x24
 804407e:	e032      	b.n	80440e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8044080:	68fb      	ldr	r3, [r7, #12]
 8044082:	689b      	ldr	r3, [r3, #8]
 8044084:	2b03      	cmp	r3, #3
 8044086:	d117      	bne.n	80440b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8044088:	6a3b      	ldr	r3, [r7, #32]
 804408a:	0fdb      	lsrs	r3, r3, #31
 804408c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 804408e:	69fb      	ldr	r3, [r7, #28]
 8044090:	0cdb      	lsrs	r3, r3, #19
 8044092:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8044094:	69bb      	ldr	r3, [r7, #24]
 8044096:	0adb      	lsrs	r3, r3, #11
 8044098:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 804409a:	697b      	ldr	r3, [r7, #20]
 804409c:	08db      	lsrs	r3, r3, #3
 804409e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80440a0:	69bb      	ldr	r3, [r7, #24]
 80440a2:	015a      	lsls	r2, r3, #5
 80440a4:	69fb      	ldr	r3, [r7, #28]
 80440a6:	029b      	lsls	r3, r3, #10
 80440a8:	431a      	orrs	r2, r3
 80440aa:	6a3b      	ldr	r3, [r7, #32]
 80440ac:	03db      	lsls	r3, r3, #15
 80440ae:	4313      	orrs	r3, r2
 80440b0:	697a      	ldr	r2, [r7, #20]
 80440b2:	4313      	orrs	r3, r2
 80440b4:	627b      	str	r3, [r7, #36]	; 0x24
 80440b6:	e016      	b.n	80440e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80440b8:	6a3b      	ldr	r3, [r7, #32]
 80440ba:	0f1b      	lsrs	r3, r3, #28
 80440bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80440be:	69fb      	ldr	r3, [r7, #28]
 80440c0:	0d1b      	lsrs	r3, r3, #20
 80440c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80440c4:	69bb      	ldr	r3, [r7, #24]
 80440c6:	0b1b      	lsrs	r3, r3, #12
 80440c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80440ca:	697b      	ldr	r3, [r7, #20]
 80440cc:	091b      	lsrs	r3, r3, #4
 80440ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80440d0:	69bb      	ldr	r3, [r7, #24]
 80440d2:	011a      	lsls	r2, r3, #4
 80440d4:	69fb      	ldr	r3, [r7, #28]
 80440d6:	021b      	lsls	r3, r3, #8
 80440d8:	431a      	orrs	r2, r3
 80440da:	6a3b      	ldr	r3, [r7, #32]
 80440dc:	031b      	lsls	r3, r3, #12
 80440de:	4313      	orrs	r3, r2
 80440e0:	697a      	ldr	r2, [r7, #20]
 80440e2:	4313      	orrs	r3, r2
 80440e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80440e6:	68fb      	ldr	r3, [r7, #12]
 80440e8:	681b      	ldr	r3, [r3, #0]
 80440ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80440ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80440ee:	e003      	b.n	80440f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80440f0:	68fb      	ldr	r3, [r7, #12]
 80440f2:	681b      	ldr	r3, [r3, #0]
 80440f4:	68ba      	ldr	r2, [r7, #8]
 80440f6:	60da      	str	r2, [r3, #12]
}
 80440f8:	bf00      	nop
 80440fa:	372c      	adds	r7, #44	; 0x2c
 80440fc:	46bd      	mov	sp, r7
 80440fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044102:	4770      	bx	lr

08044104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044104:	b480      	push	{r7}
 8044106:	b089      	sub	sp, #36	; 0x24
 8044108:	af00      	add	r7, sp, #0
 804410a:	6078      	str	r0, [r7, #4]
 804410c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 804410e:	2300      	movs	r3, #0
 8044110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8044112:	2300      	movs	r3, #0
 8044114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8044116:	2300      	movs	r3, #0
 8044118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 804411a:	2300      	movs	r3, #0
 804411c:	61fb      	str	r3, [r7, #28]
 804411e:	e177      	b.n	8044410 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044120:	2201      	movs	r2, #1
 8044122:	69fb      	ldr	r3, [r7, #28]
 8044124:	fa02 f303 	lsl.w	r3, r2, r3
 8044128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804412a:	683b      	ldr	r3, [r7, #0]
 804412c:	681b      	ldr	r3, [r3, #0]
 804412e:	697a      	ldr	r2, [r7, #20]
 8044130:	4013      	ands	r3, r2
 8044132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8044134:	693a      	ldr	r2, [r7, #16]
 8044136:	697b      	ldr	r3, [r7, #20]
 8044138:	429a      	cmp	r2, r3
 804413a:	f040 8166 	bne.w	804440a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 804413e:	683b      	ldr	r3, [r7, #0]
 8044140:	685b      	ldr	r3, [r3, #4]
 8044142:	f003 0303 	and.w	r3, r3, #3
 8044146:	2b01      	cmp	r3, #1
 8044148:	d005      	beq.n	8044156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804414a:	683b      	ldr	r3, [r7, #0]
 804414c:	685b      	ldr	r3, [r3, #4]
 804414e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044152:	2b02      	cmp	r3, #2
 8044154:	d130      	bne.n	80441b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8044156:	687b      	ldr	r3, [r7, #4]
 8044158:	689b      	ldr	r3, [r3, #8]
 804415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 804415c:	69fb      	ldr	r3, [r7, #28]
 804415e:	005b      	lsls	r3, r3, #1
 8044160:	2203      	movs	r2, #3
 8044162:	fa02 f303 	lsl.w	r3, r2, r3
 8044166:	43db      	mvns	r3, r3
 8044168:	69ba      	ldr	r2, [r7, #24]
 804416a:	4013      	ands	r3, r2
 804416c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804416e:	683b      	ldr	r3, [r7, #0]
 8044170:	68da      	ldr	r2, [r3, #12]
 8044172:	69fb      	ldr	r3, [r7, #28]
 8044174:	005b      	lsls	r3, r3, #1
 8044176:	fa02 f303 	lsl.w	r3, r2, r3
 804417a:	69ba      	ldr	r2, [r7, #24]
 804417c:	4313      	orrs	r3, r2
 804417e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8044180:	687b      	ldr	r3, [r7, #4]
 8044182:	69ba      	ldr	r2, [r7, #24]
 8044184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8044186:	687b      	ldr	r3, [r7, #4]
 8044188:	685b      	ldr	r3, [r3, #4]
 804418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 804418c:	2201      	movs	r2, #1
 804418e:	69fb      	ldr	r3, [r7, #28]
 8044190:	fa02 f303 	lsl.w	r3, r2, r3
 8044194:	43db      	mvns	r3, r3
 8044196:	69ba      	ldr	r2, [r7, #24]
 8044198:	4013      	ands	r3, r2
 804419a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 804419c:	683b      	ldr	r3, [r7, #0]
 804419e:	685b      	ldr	r3, [r3, #4]
 80441a0:	091b      	lsrs	r3, r3, #4
 80441a2:	f003 0201 	and.w	r2, r3, #1
 80441a6:	69fb      	ldr	r3, [r7, #28]
 80441a8:	fa02 f303 	lsl.w	r3, r2, r3
 80441ac:	69ba      	ldr	r2, [r7, #24]
 80441ae:	4313      	orrs	r3, r2
 80441b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80441b2:	687b      	ldr	r3, [r7, #4]
 80441b4:	69ba      	ldr	r2, [r7, #24]
 80441b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80441b8:	683b      	ldr	r3, [r7, #0]
 80441ba:	685b      	ldr	r3, [r3, #4]
 80441bc:	f003 0303 	and.w	r3, r3, #3
 80441c0:	2b03      	cmp	r3, #3
 80441c2:	d017      	beq.n	80441f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80441c4:	687b      	ldr	r3, [r7, #4]
 80441c6:	68db      	ldr	r3, [r3, #12]
 80441c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80441ca:	69fb      	ldr	r3, [r7, #28]
 80441cc:	005b      	lsls	r3, r3, #1
 80441ce:	2203      	movs	r2, #3
 80441d0:	fa02 f303 	lsl.w	r3, r2, r3
 80441d4:	43db      	mvns	r3, r3
 80441d6:	69ba      	ldr	r2, [r7, #24]
 80441d8:	4013      	ands	r3, r2
 80441da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80441dc:	683b      	ldr	r3, [r7, #0]
 80441de:	689a      	ldr	r2, [r3, #8]
 80441e0:	69fb      	ldr	r3, [r7, #28]
 80441e2:	005b      	lsls	r3, r3, #1
 80441e4:	fa02 f303 	lsl.w	r3, r2, r3
 80441e8:	69ba      	ldr	r2, [r7, #24]
 80441ea:	4313      	orrs	r3, r2
 80441ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80441ee:	687b      	ldr	r3, [r7, #4]
 80441f0:	69ba      	ldr	r2, [r7, #24]
 80441f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80441f4:	683b      	ldr	r3, [r7, #0]
 80441f6:	685b      	ldr	r3, [r3, #4]
 80441f8:	f003 0303 	and.w	r3, r3, #3
 80441fc:	2b02      	cmp	r3, #2
 80441fe:	d123      	bne.n	8044248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8044200:	69fb      	ldr	r3, [r7, #28]
 8044202:	08da      	lsrs	r2, r3, #3
 8044204:	687b      	ldr	r3, [r7, #4]
 8044206:	3208      	adds	r2, #8
 8044208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 804420e:	69fb      	ldr	r3, [r7, #28]
 8044210:	f003 0307 	and.w	r3, r3, #7
 8044214:	009b      	lsls	r3, r3, #2
 8044216:	220f      	movs	r2, #15
 8044218:	fa02 f303 	lsl.w	r3, r2, r3
 804421c:	43db      	mvns	r3, r3
 804421e:	69ba      	ldr	r2, [r7, #24]
 8044220:	4013      	ands	r3, r2
 8044222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8044224:	683b      	ldr	r3, [r7, #0]
 8044226:	691a      	ldr	r2, [r3, #16]
 8044228:	69fb      	ldr	r3, [r7, #28]
 804422a:	f003 0307 	and.w	r3, r3, #7
 804422e:	009b      	lsls	r3, r3, #2
 8044230:	fa02 f303 	lsl.w	r3, r2, r3
 8044234:	69ba      	ldr	r2, [r7, #24]
 8044236:	4313      	orrs	r3, r2
 8044238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804423a:	69fb      	ldr	r3, [r7, #28]
 804423c:	08da      	lsrs	r2, r3, #3
 804423e:	687b      	ldr	r3, [r7, #4]
 8044240:	3208      	adds	r2, #8
 8044242:	69b9      	ldr	r1, [r7, #24]
 8044244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044248:	687b      	ldr	r3, [r7, #4]
 804424a:	681b      	ldr	r3, [r3, #0]
 804424c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 804424e:	69fb      	ldr	r3, [r7, #28]
 8044250:	005b      	lsls	r3, r3, #1
 8044252:	2203      	movs	r2, #3
 8044254:	fa02 f303 	lsl.w	r3, r2, r3
 8044258:	43db      	mvns	r3, r3
 804425a:	69ba      	ldr	r2, [r7, #24]
 804425c:	4013      	ands	r3, r2
 804425e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044260:	683b      	ldr	r3, [r7, #0]
 8044262:	685b      	ldr	r3, [r3, #4]
 8044264:	f003 0203 	and.w	r2, r3, #3
 8044268:	69fb      	ldr	r3, [r7, #28]
 804426a:	005b      	lsls	r3, r3, #1
 804426c:	fa02 f303 	lsl.w	r3, r2, r3
 8044270:	69ba      	ldr	r2, [r7, #24]
 8044272:	4313      	orrs	r3, r2
 8044274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8044276:	687b      	ldr	r3, [r7, #4]
 8044278:	69ba      	ldr	r2, [r7, #24]
 804427a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 804427c:	683b      	ldr	r3, [r7, #0]
 804427e:	685b      	ldr	r3, [r3, #4]
 8044280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8044284:	2b00      	cmp	r3, #0
 8044286:	f000 80c0 	beq.w	804440a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804428a:	2300      	movs	r3, #0
 804428c:	60fb      	str	r3, [r7, #12]
 804428e:	4b66      	ldr	r3, [pc, #408]	; (8044428 <HAL_GPIO_Init+0x324>)
 8044290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044292:	4a65      	ldr	r2, [pc, #404]	; (8044428 <HAL_GPIO_Init+0x324>)
 8044294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8044298:	6453      	str	r3, [r2, #68]	; 0x44
 804429a:	4b63      	ldr	r3, [pc, #396]	; (8044428 <HAL_GPIO_Init+0x324>)
 804429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80442a2:	60fb      	str	r3, [r7, #12]
 80442a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80442a6:	4a61      	ldr	r2, [pc, #388]	; (804442c <HAL_GPIO_Init+0x328>)
 80442a8:	69fb      	ldr	r3, [r7, #28]
 80442aa:	089b      	lsrs	r3, r3, #2
 80442ac:	3302      	adds	r3, #2
 80442ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80442b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80442b4:	69fb      	ldr	r3, [r7, #28]
 80442b6:	f003 0303 	and.w	r3, r3, #3
 80442ba:	009b      	lsls	r3, r3, #2
 80442bc:	220f      	movs	r2, #15
 80442be:	fa02 f303 	lsl.w	r3, r2, r3
 80442c2:	43db      	mvns	r3, r3
 80442c4:	69ba      	ldr	r2, [r7, #24]
 80442c6:	4013      	ands	r3, r2
 80442c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80442ca:	687b      	ldr	r3, [r7, #4]
 80442cc:	4a58      	ldr	r2, [pc, #352]	; (8044430 <HAL_GPIO_Init+0x32c>)
 80442ce:	4293      	cmp	r3, r2
 80442d0:	d037      	beq.n	8044342 <HAL_GPIO_Init+0x23e>
 80442d2:	687b      	ldr	r3, [r7, #4]
 80442d4:	4a57      	ldr	r2, [pc, #348]	; (8044434 <HAL_GPIO_Init+0x330>)
 80442d6:	4293      	cmp	r3, r2
 80442d8:	d031      	beq.n	804433e <HAL_GPIO_Init+0x23a>
 80442da:	687b      	ldr	r3, [r7, #4]
 80442dc:	4a56      	ldr	r2, [pc, #344]	; (8044438 <HAL_GPIO_Init+0x334>)
 80442de:	4293      	cmp	r3, r2
 80442e0:	d02b      	beq.n	804433a <HAL_GPIO_Init+0x236>
 80442e2:	687b      	ldr	r3, [r7, #4]
 80442e4:	4a55      	ldr	r2, [pc, #340]	; (804443c <HAL_GPIO_Init+0x338>)
 80442e6:	4293      	cmp	r3, r2
 80442e8:	d025      	beq.n	8044336 <HAL_GPIO_Init+0x232>
 80442ea:	687b      	ldr	r3, [r7, #4]
 80442ec:	4a54      	ldr	r2, [pc, #336]	; (8044440 <HAL_GPIO_Init+0x33c>)
 80442ee:	4293      	cmp	r3, r2
 80442f0:	d01f      	beq.n	8044332 <HAL_GPIO_Init+0x22e>
 80442f2:	687b      	ldr	r3, [r7, #4]
 80442f4:	4a53      	ldr	r2, [pc, #332]	; (8044444 <HAL_GPIO_Init+0x340>)
 80442f6:	4293      	cmp	r3, r2
 80442f8:	d019      	beq.n	804432e <HAL_GPIO_Init+0x22a>
 80442fa:	687b      	ldr	r3, [r7, #4]
 80442fc:	4a52      	ldr	r2, [pc, #328]	; (8044448 <HAL_GPIO_Init+0x344>)
 80442fe:	4293      	cmp	r3, r2
 8044300:	d013      	beq.n	804432a <HAL_GPIO_Init+0x226>
 8044302:	687b      	ldr	r3, [r7, #4]
 8044304:	4a51      	ldr	r2, [pc, #324]	; (804444c <HAL_GPIO_Init+0x348>)
 8044306:	4293      	cmp	r3, r2
 8044308:	d00d      	beq.n	8044326 <HAL_GPIO_Init+0x222>
 804430a:	687b      	ldr	r3, [r7, #4]
 804430c:	4a50      	ldr	r2, [pc, #320]	; (8044450 <HAL_GPIO_Init+0x34c>)
 804430e:	4293      	cmp	r3, r2
 8044310:	d007      	beq.n	8044322 <HAL_GPIO_Init+0x21e>
 8044312:	687b      	ldr	r3, [r7, #4]
 8044314:	4a4f      	ldr	r2, [pc, #316]	; (8044454 <HAL_GPIO_Init+0x350>)
 8044316:	4293      	cmp	r3, r2
 8044318:	d101      	bne.n	804431e <HAL_GPIO_Init+0x21a>
 804431a:	2309      	movs	r3, #9
 804431c:	e012      	b.n	8044344 <HAL_GPIO_Init+0x240>
 804431e:	230a      	movs	r3, #10
 8044320:	e010      	b.n	8044344 <HAL_GPIO_Init+0x240>
 8044322:	2308      	movs	r3, #8
 8044324:	e00e      	b.n	8044344 <HAL_GPIO_Init+0x240>
 8044326:	2307      	movs	r3, #7
 8044328:	e00c      	b.n	8044344 <HAL_GPIO_Init+0x240>
 804432a:	2306      	movs	r3, #6
 804432c:	e00a      	b.n	8044344 <HAL_GPIO_Init+0x240>
 804432e:	2305      	movs	r3, #5
 8044330:	e008      	b.n	8044344 <HAL_GPIO_Init+0x240>
 8044332:	2304      	movs	r3, #4
 8044334:	e006      	b.n	8044344 <HAL_GPIO_Init+0x240>
 8044336:	2303      	movs	r3, #3
 8044338:	e004      	b.n	8044344 <HAL_GPIO_Init+0x240>
 804433a:	2302      	movs	r3, #2
 804433c:	e002      	b.n	8044344 <HAL_GPIO_Init+0x240>
 804433e:	2301      	movs	r3, #1
 8044340:	e000      	b.n	8044344 <HAL_GPIO_Init+0x240>
 8044342:	2300      	movs	r3, #0
 8044344:	69fa      	ldr	r2, [r7, #28]
 8044346:	f002 0203 	and.w	r2, r2, #3
 804434a:	0092      	lsls	r2, r2, #2
 804434c:	4093      	lsls	r3, r2
 804434e:	69ba      	ldr	r2, [r7, #24]
 8044350:	4313      	orrs	r3, r2
 8044352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8044354:	4935      	ldr	r1, [pc, #212]	; (804442c <HAL_GPIO_Init+0x328>)
 8044356:	69fb      	ldr	r3, [r7, #28]
 8044358:	089b      	lsrs	r3, r3, #2
 804435a:	3302      	adds	r3, #2
 804435c:	69ba      	ldr	r2, [r7, #24]
 804435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8044362:	4b3d      	ldr	r3, [pc, #244]	; (8044458 <HAL_GPIO_Init+0x354>)
 8044364:	689b      	ldr	r3, [r3, #8]
 8044366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044368:	693b      	ldr	r3, [r7, #16]
 804436a:	43db      	mvns	r3, r3
 804436c:	69ba      	ldr	r2, [r7, #24]
 804436e:	4013      	ands	r3, r2
 8044370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8044372:	683b      	ldr	r3, [r7, #0]
 8044374:	685b      	ldr	r3, [r3, #4]
 8044376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804437a:	2b00      	cmp	r3, #0
 804437c:	d003      	beq.n	8044386 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 804437e:	69ba      	ldr	r2, [r7, #24]
 8044380:	693b      	ldr	r3, [r7, #16]
 8044382:	4313      	orrs	r3, r2
 8044384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8044386:	4a34      	ldr	r2, [pc, #208]	; (8044458 <HAL_GPIO_Init+0x354>)
 8044388:	69bb      	ldr	r3, [r7, #24]
 804438a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 804438c:	4b32      	ldr	r3, [pc, #200]	; (8044458 <HAL_GPIO_Init+0x354>)
 804438e:	68db      	ldr	r3, [r3, #12]
 8044390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044392:	693b      	ldr	r3, [r7, #16]
 8044394:	43db      	mvns	r3, r3
 8044396:	69ba      	ldr	r2, [r7, #24]
 8044398:	4013      	ands	r3, r2
 804439a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 804439c:	683b      	ldr	r3, [r7, #0]
 804439e:	685b      	ldr	r3, [r3, #4]
 80443a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80443a4:	2b00      	cmp	r3, #0
 80443a6:	d003      	beq.n	80443b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80443a8:	69ba      	ldr	r2, [r7, #24]
 80443aa:	693b      	ldr	r3, [r7, #16]
 80443ac:	4313      	orrs	r3, r2
 80443ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80443b0:	4a29      	ldr	r2, [pc, #164]	; (8044458 <HAL_GPIO_Init+0x354>)
 80443b2:	69bb      	ldr	r3, [r7, #24]
 80443b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80443b6:	4b28      	ldr	r3, [pc, #160]	; (8044458 <HAL_GPIO_Init+0x354>)
 80443b8:	685b      	ldr	r3, [r3, #4]
 80443ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80443bc:	693b      	ldr	r3, [r7, #16]
 80443be:	43db      	mvns	r3, r3
 80443c0:	69ba      	ldr	r2, [r7, #24]
 80443c2:	4013      	ands	r3, r2
 80443c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80443c6:	683b      	ldr	r3, [r7, #0]
 80443c8:	685b      	ldr	r3, [r3, #4]
 80443ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80443ce:	2b00      	cmp	r3, #0
 80443d0:	d003      	beq.n	80443da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80443d2:	69ba      	ldr	r2, [r7, #24]
 80443d4:	693b      	ldr	r3, [r7, #16]
 80443d6:	4313      	orrs	r3, r2
 80443d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80443da:	4a1f      	ldr	r2, [pc, #124]	; (8044458 <HAL_GPIO_Init+0x354>)
 80443dc:	69bb      	ldr	r3, [r7, #24]
 80443de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80443e0:	4b1d      	ldr	r3, [pc, #116]	; (8044458 <HAL_GPIO_Init+0x354>)
 80443e2:	681b      	ldr	r3, [r3, #0]
 80443e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80443e6:	693b      	ldr	r3, [r7, #16]
 80443e8:	43db      	mvns	r3, r3
 80443ea:	69ba      	ldr	r2, [r7, #24]
 80443ec:	4013      	ands	r3, r2
 80443ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80443f0:	683b      	ldr	r3, [r7, #0]
 80443f2:	685b      	ldr	r3, [r3, #4]
 80443f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80443f8:	2b00      	cmp	r3, #0
 80443fa:	d003      	beq.n	8044404 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80443fc:	69ba      	ldr	r2, [r7, #24]
 80443fe:	693b      	ldr	r3, [r7, #16]
 8044400:	4313      	orrs	r3, r2
 8044402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8044404:	4a14      	ldr	r2, [pc, #80]	; (8044458 <HAL_GPIO_Init+0x354>)
 8044406:	69bb      	ldr	r3, [r7, #24]
 8044408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804440a:	69fb      	ldr	r3, [r7, #28]
 804440c:	3301      	adds	r3, #1
 804440e:	61fb      	str	r3, [r7, #28]
 8044410:	69fb      	ldr	r3, [r7, #28]
 8044412:	2b0f      	cmp	r3, #15
 8044414:	f67f ae84 	bls.w	8044120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8044418:	bf00      	nop
 804441a:	bf00      	nop
 804441c:	3724      	adds	r7, #36	; 0x24
 804441e:	46bd      	mov	sp, r7
 8044420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044424:	4770      	bx	lr
 8044426:	bf00      	nop
 8044428:	40023800 	.word	0x40023800
 804442c:	40013800 	.word	0x40013800
 8044430:	40020000 	.word	0x40020000
 8044434:	40020400 	.word	0x40020400
 8044438:	40020800 	.word	0x40020800
 804443c:	40020c00 	.word	0x40020c00
 8044440:	40021000 	.word	0x40021000
 8044444:	40021400 	.word	0x40021400
 8044448:	40021800 	.word	0x40021800
 804444c:	40021c00 	.word	0x40021c00
 8044450:	40022000 	.word	0x40022000
 8044454:	40022400 	.word	0x40022400
 8044458:	40013c00 	.word	0x40013c00

0804445c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 804445c:	b480      	push	{r7}
 804445e:	b087      	sub	sp, #28
 8044460:	af00      	add	r7, sp, #0
 8044462:	6078      	str	r0, [r7, #4]
 8044464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8044466:	2300      	movs	r3, #0
 8044468:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 804446a:	2300      	movs	r3, #0
 804446c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 804446e:	2300      	movs	r3, #0
 8044470:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044472:	2300      	movs	r3, #0
 8044474:	617b      	str	r3, [r7, #20]
 8044476:	e0d9      	b.n	804462c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044478:	2201      	movs	r2, #1
 804447a:	697b      	ldr	r3, [r7, #20]
 804447c:	fa02 f303 	lsl.w	r3, r2, r3
 8044480:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8044482:	683a      	ldr	r2, [r7, #0]
 8044484:	693b      	ldr	r3, [r7, #16]
 8044486:	4013      	ands	r3, r2
 8044488:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 804448a:	68fa      	ldr	r2, [r7, #12]
 804448c:	693b      	ldr	r3, [r7, #16]
 804448e:	429a      	cmp	r2, r3
 8044490:	f040 80c9 	bne.w	8044626 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8044494:	4a6b      	ldr	r2, [pc, #428]	; (8044644 <HAL_GPIO_DeInit+0x1e8>)
 8044496:	697b      	ldr	r3, [r7, #20]
 8044498:	089b      	lsrs	r3, r3, #2
 804449a:	3302      	adds	r3, #2
 804449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80444a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80444a2:	697b      	ldr	r3, [r7, #20]
 80444a4:	f003 0303 	and.w	r3, r3, #3
 80444a8:	009b      	lsls	r3, r3, #2
 80444aa:	220f      	movs	r2, #15
 80444ac:	fa02 f303 	lsl.w	r3, r2, r3
 80444b0:	68ba      	ldr	r2, [r7, #8]
 80444b2:	4013      	ands	r3, r2
 80444b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80444b6:	687b      	ldr	r3, [r7, #4]
 80444b8:	4a63      	ldr	r2, [pc, #396]	; (8044648 <HAL_GPIO_DeInit+0x1ec>)
 80444ba:	4293      	cmp	r3, r2
 80444bc:	d037      	beq.n	804452e <HAL_GPIO_DeInit+0xd2>
 80444be:	687b      	ldr	r3, [r7, #4]
 80444c0:	4a62      	ldr	r2, [pc, #392]	; (804464c <HAL_GPIO_DeInit+0x1f0>)
 80444c2:	4293      	cmp	r3, r2
 80444c4:	d031      	beq.n	804452a <HAL_GPIO_DeInit+0xce>
 80444c6:	687b      	ldr	r3, [r7, #4]
 80444c8:	4a61      	ldr	r2, [pc, #388]	; (8044650 <HAL_GPIO_DeInit+0x1f4>)
 80444ca:	4293      	cmp	r3, r2
 80444cc:	d02b      	beq.n	8044526 <HAL_GPIO_DeInit+0xca>
 80444ce:	687b      	ldr	r3, [r7, #4]
 80444d0:	4a60      	ldr	r2, [pc, #384]	; (8044654 <HAL_GPIO_DeInit+0x1f8>)
 80444d2:	4293      	cmp	r3, r2
 80444d4:	d025      	beq.n	8044522 <HAL_GPIO_DeInit+0xc6>
 80444d6:	687b      	ldr	r3, [r7, #4]
 80444d8:	4a5f      	ldr	r2, [pc, #380]	; (8044658 <HAL_GPIO_DeInit+0x1fc>)
 80444da:	4293      	cmp	r3, r2
 80444dc:	d01f      	beq.n	804451e <HAL_GPIO_DeInit+0xc2>
 80444de:	687b      	ldr	r3, [r7, #4]
 80444e0:	4a5e      	ldr	r2, [pc, #376]	; (804465c <HAL_GPIO_DeInit+0x200>)
 80444e2:	4293      	cmp	r3, r2
 80444e4:	d019      	beq.n	804451a <HAL_GPIO_DeInit+0xbe>
 80444e6:	687b      	ldr	r3, [r7, #4]
 80444e8:	4a5d      	ldr	r2, [pc, #372]	; (8044660 <HAL_GPIO_DeInit+0x204>)
 80444ea:	4293      	cmp	r3, r2
 80444ec:	d013      	beq.n	8044516 <HAL_GPIO_DeInit+0xba>
 80444ee:	687b      	ldr	r3, [r7, #4]
 80444f0:	4a5c      	ldr	r2, [pc, #368]	; (8044664 <HAL_GPIO_DeInit+0x208>)
 80444f2:	4293      	cmp	r3, r2
 80444f4:	d00d      	beq.n	8044512 <HAL_GPIO_DeInit+0xb6>
 80444f6:	687b      	ldr	r3, [r7, #4]
 80444f8:	4a5b      	ldr	r2, [pc, #364]	; (8044668 <HAL_GPIO_DeInit+0x20c>)
 80444fa:	4293      	cmp	r3, r2
 80444fc:	d007      	beq.n	804450e <HAL_GPIO_DeInit+0xb2>
 80444fe:	687b      	ldr	r3, [r7, #4]
 8044500:	4a5a      	ldr	r2, [pc, #360]	; (804466c <HAL_GPIO_DeInit+0x210>)
 8044502:	4293      	cmp	r3, r2
 8044504:	d101      	bne.n	804450a <HAL_GPIO_DeInit+0xae>
 8044506:	2309      	movs	r3, #9
 8044508:	e012      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804450a:	230a      	movs	r3, #10
 804450c:	e010      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804450e:	2308      	movs	r3, #8
 8044510:	e00e      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 8044512:	2307      	movs	r3, #7
 8044514:	e00c      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 8044516:	2306      	movs	r3, #6
 8044518:	e00a      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804451a:	2305      	movs	r3, #5
 804451c:	e008      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804451e:	2304      	movs	r3, #4
 8044520:	e006      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 8044522:	2303      	movs	r3, #3
 8044524:	e004      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 8044526:	2302      	movs	r3, #2
 8044528:	e002      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804452a:	2301      	movs	r3, #1
 804452c:	e000      	b.n	8044530 <HAL_GPIO_DeInit+0xd4>
 804452e:	2300      	movs	r3, #0
 8044530:	697a      	ldr	r2, [r7, #20]
 8044532:	f002 0203 	and.w	r2, r2, #3
 8044536:	0092      	lsls	r2, r2, #2
 8044538:	4093      	lsls	r3, r2
 804453a:	68ba      	ldr	r2, [r7, #8]
 804453c:	429a      	cmp	r2, r3
 804453e:	d132      	bne.n	80445a6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8044540:	4b4b      	ldr	r3, [pc, #300]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 8044542:	681a      	ldr	r2, [r3, #0]
 8044544:	68fb      	ldr	r3, [r7, #12]
 8044546:	43db      	mvns	r3, r3
 8044548:	4949      	ldr	r1, [pc, #292]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 804454a:	4013      	ands	r3, r2
 804454c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 804454e:	4b48      	ldr	r3, [pc, #288]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 8044550:	685a      	ldr	r2, [r3, #4]
 8044552:	68fb      	ldr	r3, [r7, #12]
 8044554:	43db      	mvns	r3, r3
 8044556:	4946      	ldr	r1, [pc, #280]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 8044558:	4013      	ands	r3, r2
 804455a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 804455c:	4b44      	ldr	r3, [pc, #272]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 804455e:	68da      	ldr	r2, [r3, #12]
 8044560:	68fb      	ldr	r3, [r7, #12]
 8044562:	43db      	mvns	r3, r3
 8044564:	4942      	ldr	r1, [pc, #264]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 8044566:	4013      	ands	r3, r2
 8044568:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 804456a:	4b41      	ldr	r3, [pc, #260]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 804456c:	689a      	ldr	r2, [r3, #8]
 804456e:	68fb      	ldr	r3, [r7, #12]
 8044570:	43db      	mvns	r3, r3
 8044572:	493f      	ldr	r1, [pc, #252]	; (8044670 <HAL_GPIO_DeInit+0x214>)
 8044574:	4013      	ands	r3, r2
 8044576:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8044578:	697b      	ldr	r3, [r7, #20]
 804457a:	f003 0303 	and.w	r3, r3, #3
 804457e:	009b      	lsls	r3, r3, #2
 8044580:	220f      	movs	r2, #15
 8044582:	fa02 f303 	lsl.w	r3, r2, r3
 8044586:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8044588:	4a2e      	ldr	r2, [pc, #184]	; (8044644 <HAL_GPIO_DeInit+0x1e8>)
 804458a:	697b      	ldr	r3, [r7, #20]
 804458c:	089b      	lsrs	r3, r3, #2
 804458e:	3302      	adds	r3, #2
 8044590:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8044594:	68bb      	ldr	r3, [r7, #8]
 8044596:	43da      	mvns	r2, r3
 8044598:	482a      	ldr	r0, [pc, #168]	; (8044644 <HAL_GPIO_DeInit+0x1e8>)
 804459a:	697b      	ldr	r3, [r7, #20]
 804459c:	089b      	lsrs	r3, r3, #2
 804459e:	400a      	ands	r2, r1
 80445a0:	3302      	adds	r3, #2
 80445a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80445a6:	687b      	ldr	r3, [r7, #4]
 80445a8:	681a      	ldr	r2, [r3, #0]
 80445aa:	697b      	ldr	r3, [r7, #20]
 80445ac:	005b      	lsls	r3, r3, #1
 80445ae:	2103      	movs	r1, #3
 80445b0:	fa01 f303 	lsl.w	r3, r1, r3
 80445b4:	43db      	mvns	r3, r3
 80445b6:	401a      	ands	r2, r3
 80445b8:	687b      	ldr	r3, [r7, #4]
 80445ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80445bc:	697b      	ldr	r3, [r7, #20]
 80445be:	08da      	lsrs	r2, r3, #3
 80445c0:	687b      	ldr	r3, [r7, #4]
 80445c2:	3208      	adds	r2, #8
 80445c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80445c8:	697b      	ldr	r3, [r7, #20]
 80445ca:	f003 0307 	and.w	r3, r3, #7
 80445ce:	009b      	lsls	r3, r3, #2
 80445d0:	220f      	movs	r2, #15
 80445d2:	fa02 f303 	lsl.w	r3, r2, r3
 80445d6:	43db      	mvns	r3, r3
 80445d8:	697a      	ldr	r2, [r7, #20]
 80445da:	08d2      	lsrs	r2, r2, #3
 80445dc:	4019      	ands	r1, r3
 80445de:	687b      	ldr	r3, [r7, #4]
 80445e0:	3208      	adds	r2, #8
 80445e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80445e6:	687b      	ldr	r3, [r7, #4]
 80445e8:	68da      	ldr	r2, [r3, #12]
 80445ea:	697b      	ldr	r3, [r7, #20]
 80445ec:	005b      	lsls	r3, r3, #1
 80445ee:	2103      	movs	r1, #3
 80445f0:	fa01 f303 	lsl.w	r3, r1, r3
 80445f4:	43db      	mvns	r3, r3
 80445f6:	401a      	ands	r2, r3
 80445f8:	687b      	ldr	r3, [r7, #4]
 80445fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80445fc:	687b      	ldr	r3, [r7, #4]
 80445fe:	685a      	ldr	r2, [r3, #4]
 8044600:	2101      	movs	r1, #1
 8044602:	697b      	ldr	r3, [r7, #20]
 8044604:	fa01 f303 	lsl.w	r3, r1, r3
 8044608:	43db      	mvns	r3, r3
 804460a:	401a      	ands	r2, r3
 804460c:	687b      	ldr	r3, [r7, #4]
 804460e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	689a      	ldr	r2, [r3, #8]
 8044614:	697b      	ldr	r3, [r7, #20]
 8044616:	005b      	lsls	r3, r3, #1
 8044618:	2103      	movs	r1, #3
 804461a:	fa01 f303 	lsl.w	r3, r1, r3
 804461e:	43db      	mvns	r3, r3
 8044620:	401a      	ands	r2, r3
 8044622:	687b      	ldr	r3, [r7, #4]
 8044624:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044626:	697b      	ldr	r3, [r7, #20]
 8044628:	3301      	adds	r3, #1
 804462a:	617b      	str	r3, [r7, #20]
 804462c:	697b      	ldr	r3, [r7, #20]
 804462e:	2b0f      	cmp	r3, #15
 8044630:	f67f af22 	bls.w	8044478 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8044634:	bf00      	nop
 8044636:	bf00      	nop
 8044638:	371c      	adds	r7, #28
 804463a:	46bd      	mov	sp, r7
 804463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044640:	4770      	bx	lr
 8044642:	bf00      	nop
 8044644:	40013800 	.word	0x40013800
 8044648:	40020000 	.word	0x40020000
 804464c:	40020400 	.word	0x40020400
 8044650:	40020800 	.word	0x40020800
 8044654:	40020c00 	.word	0x40020c00
 8044658:	40021000 	.word	0x40021000
 804465c:	40021400 	.word	0x40021400
 8044660:	40021800 	.word	0x40021800
 8044664:	40021c00 	.word	0x40021c00
 8044668:	40022000 	.word	0x40022000
 804466c:	40022400 	.word	0x40022400
 8044670:	40013c00 	.word	0x40013c00

08044674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044674:	b480      	push	{r7}
 8044676:	b083      	sub	sp, #12
 8044678:	af00      	add	r7, sp, #0
 804467a:	6078      	str	r0, [r7, #4]
 804467c:	460b      	mov	r3, r1
 804467e:	807b      	strh	r3, [r7, #2]
 8044680:	4613      	mov	r3, r2
 8044682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044684:	787b      	ldrb	r3, [r7, #1]
 8044686:	2b00      	cmp	r3, #0
 8044688:	d003      	beq.n	8044692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804468a:	887a      	ldrh	r2, [r7, #2]
 804468c:	687b      	ldr	r3, [r7, #4]
 804468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044690:	e003      	b.n	804469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044692:	887b      	ldrh	r3, [r7, #2]
 8044694:	041a      	lsls	r2, r3, #16
 8044696:	687b      	ldr	r3, [r7, #4]
 8044698:	619a      	str	r2, [r3, #24]
}
 804469a:	bf00      	nop
 804469c:	370c      	adds	r7, #12
 804469e:	46bd      	mov	sp, r7
 80446a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446a4:	4770      	bx	lr
	...

080446a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80446a8:	b580      	push	{r7, lr}
 80446aa:	b082      	sub	sp, #8
 80446ac:	af00      	add	r7, sp, #0
 80446ae:	4603      	mov	r3, r0
 80446b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80446b2:	4b08      	ldr	r3, [pc, #32]	; (80446d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80446b4:	695a      	ldr	r2, [r3, #20]
 80446b6:	88fb      	ldrh	r3, [r7, #6]
 80446b8:	4013      	ands	r3, r2
 80446ba:	2b00      	cmp	r3, #0
 80446bc:	d006      	beq.n	80446cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80446be:	4a05      	ldr	r2, [pc, #20]	; (80446d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80446c0:	88fb      	ldrh	r3, [r7, #6]
 80446c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80446c4:	88fb      	ldrh	r3, [r7, #6]
 80446c6:	4618      	mov	r0, r3
 80446c8:	f7fd fb86 	bl	8041dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80446cc:	bf00      	nop
 80446ce:	3708      	adds	r7, #8
 80446d0:	46bd      	mov	sp, r7
 80446d2:	bd80      	pop	{r7, pc}
 80446d4:	40013c00 	.word	0x40013c00

080446d8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80446d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80446da:	b08f      	sub	sp, #60	; 0x3c
 80446dc:	af0a      	add	r7, sp, #40	; 0x28
 80446de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80446e0:	687b      	ldr	r3, [r7, #4]
 80446e2:	2b00      	cmp	r3, #0
 80446e4:	d101      	bne.n	80446ea <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80446e6:	2301      	movs	r3, #1
 80446e8:	e054      	b.n	8044794 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80446ea:	687b      	ldr	r3, [r7, #4]
 80446ec:	681b      	ldr	r3, [r3, #0]
 80446ee:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80446f0:	687b      	ldr	r3, [r7, #4]
 80446f2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80446f6:	b2db      	uxtb	r3, r3
 80446f8:	2b00      	cmp	r3, #0
 80446fa:	d106      	bne.n	804470a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80446fc:	687b      	ldr	r3, [r7, #4]
 80446fe:	2200      	movs	r2, #0
 8044700:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8044704:	6878      	ldr	r0, [r7, #4]
 8044706:	f008 f8ed 	bl	804c8e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 804470a:	687b      	ldr	r3, [r7, #4]
 804470c:	2203      	movs	r2, #3
 804470e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8044712:	68fb      	ldr	r3, [r7, #12]
 8044714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804471a:	2b00      	cmp	r3, #0
 804471c:	d102      	bne.n	8044724 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 804471e:	687b      	ldr	r3, [r7, #4]
 8044720:	2200      	movs	r2, #0
 8044722:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8044724:	687b      	ldr	r3, [r7, #4]
 8044726:	681b      	ldr	r3, [r3, #0]
 8044728:	4618      	mov	r0, r3
 804472a:	f005 f91b 	bl	8049964 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 804472e:	687b      	ldr	r3, [r7, #4]
 8044730:	681b      	ldr	r3, [r3, #0]
 8044732:	603b      	str	r3, [r7, #0]
 8044734:	687e      	ldr	r6, [r7, #4]
 8044736:	466d      	mov	r5, sp
 8044738:	f106 0410 	add.w	r4, r6, #16
 804473c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804473e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8044748:	e885 0003 	stmia.w	r5, {r0, r1}
 804474c:	1d33      	adds	r3, r6, #4
 804474e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044750:	6838      	ldr	r0, [r7, #0]
 8044752:	f005 f895 	bl	8049880 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8044756:	687b      	ldr	r3, [r7, #4]
 8044758:	681b      	ldr	r3, [r3, #0]
 804475a:	2101      	movs	r1, #1
 804475c:	4618      	mov	r0, r3
 804475e:	f005 f912 	bl	8049986 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8044762:	687b      	ldr	r3, [r7, #4]
 8044764:	681b      	ldr	r3, [r3, #0]
 8044766:	603b      	str	r3, [r7, #0]
 8044768:	687e      	ldr	r6, [r7, #4]
 804476a:	466d      	mov	r5, sp
 804476c:	f106 0410 	add.w	r4, r6, #16
 8044770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044778:	e894 0003 	ldmia.w	r4, {r0, r1}
 804477c:	e885 0003 	stmia.w	r5, {r0, r1}
 8044780:	1d33      	adds	r3, r6, #4
 8044782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044784:	6838      	ldr	r0, [r7, #0]
 8044786:	f005 fa9b 	bl	8049cc0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 804478a:	687b      	ldr	r3, [r7, #4]
 804478c:	2201      	movs	r2, #1
 804478e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8044792:	2300      	movs	r3, #0
}
 8044794:	4618      	mov	r0, r3
 8044796:	3714      	adds	r7, #20
 8044798:	46bd      	mov	sp, r7
 804479a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0804479c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 804479c:	b590      	push	{r4, r7, lr}
 804479e:	b089      	sub	sp, #36	; 0x24
 80447a0:	af04      	add	r7, sp, #16
 80447a2:	6078      	str	r0, [r7, #4]
 80447a4:	4608      	mov	r0, r1
 80447a6:	4611      	mov	r1, r2
 80447a8:	461a      	mov	r2, r3
 80447aa:	4603      	mov	r3, r0
 80447ac:	70fb      	strb	r3, [r7, #3]
 80447ae:	460b      	mov	r3, r1
 80447b0:	70bb      	strb	r3, [r7, #2]
 80447b2:	4613      	mov	r3, r2
 80447b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80447b6:	687b      	ldr	r3, [r7, #4]
 80447b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80447bc:	2b01      	cmp	r3, #1
 80447be:	d101      	bne.n	80447c4 <HAL_HCD_HC_Init+0x28>
 80447c0:	2302      	movs	r3, #2
 80447c2:	e076      	b.n	80448b2 <HAL_HCD_HC_Init+0x116>
 80447c4:	687b      	ldr	r3, [r7, #4]
 80447c6:	2201      	movs	r2, #1
 80447c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80447cc:	78fb      	ldrb	r3, [r7, #3]
 80447ce:	687a      	ldr	r2, [r7, #4]
 80447d0:	212c      	movs	r1, #44	; 0x2c
 80447d2:	fb01 f303 	mul.w	r3, r1, r3
 80447d6:	4413      	add	r3, r2
 80447d8:	333d      	adds	r3, #61	; 0x3d
 80447da:	2200      	movs	r2, #0
 80447dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80447de:	78fb      	ldrb	r3, [r7, #3]
 80447e0:	687a      	ldr	r2, [r7, #4]
 80447e2:	212c      	movs	r1, #44	; 0x2c
 80447e4:	fb01 f303 	mul.w	r3, r1, r3
 80447e8:	4413      	add	r3, r2
 80447ea:	3338      	adds	r3, #56	; 0x38
 80447ec:	787a      	ldrb	r2, [r7, #1]
 80447ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80447f0:	78fb      	ldrb	r3, [r7, #3]
 80447f2:	687a      	ldr	r2, [r7, #4]
 80447f4:	212c      	movs	r1, #44	; 0x2c
 80447f6:	fb01 f303 	mul.w	r3, r1, r3
 80447fa:	4413      	add	r3, r2
 80447fc:	3340      	adds	r3, #64	; 0x40
 80447fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8044800:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044802:	78fb      	ldrb	r3, [r7, #3]
 8044804:	687a      	ldr	r2, [r7, #4]
 8044806:	212c      	movs	r1, #44	; 0x2c
 8044808:	fb01 f303 	mul.w	r3, r1, r3
 804480c:	4413      	add	r3, r2
 804480e:	3339      	adds	r3, #57	; 0x39
 8044810:	78fa      	ldrb	r2, [r7, #3]
 8044812:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8044814:	78fb      	ldrb	r3, [r7, #3]
 8044816:	687a      	ldr	r2, [r7, #4]
 8044818:	212c      	movs	r1, #44	; 0x2c
 804481a:	fb01 f303 	mul.w	r3, r1, r3
 804481e:	4413      	add	r3, r2
 8044820:	333f      	adds	r3, #63	; 0x3f
 8044822:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8044826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8044828:	78fb      	ldrb	r3, [r7, #3]
 804482a:	78ba      	ldrb	r2, [r7, #2]
 804482c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8044830:	b2d0      	uxtb	r0, r2
 8044832:	687a      	ldr	r2, [r7, #4]
 8044834:	212c      	movs	r1, #44	; 0x2c
 8044836:	fb01 f303 	mul.w	r3, r1, r3
 804483a:	4413      	add	r3, r2
 804483c:	333a      	adds	r3, #58	; 0x3a
 804483e:	4602      	mov	r2, r0
 8044840:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8044842:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8044846:	2b00      	cmp	r3, #0
 8044848:	da09      	bge.n	804485e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 804484a:	78fb      	ldrb	r3, [r7, #3]
 804484c:	687a      	ldr	r2, [r7, #4]
 804484e:	212c      	movs	r1, #44	; 0x2c
 8044850:	fb01 f303 	mul.w	r3, r1, r3
 8044854:	4413      	add	r3, r2
 8044856:	333b      	adds	r3, #59	; 0x3b
 8044858:	2201      	movs	r2, #1
 804485a:	701a      	strb	r2, [r3, #0]
 804485c:	e008      	b.n	8044870 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 804485e:	78fb      	ldrb	r3, [r7, #3]
 8044860:	687a      	ldr	r2, [r7, #4]
 8044862:	212c      	movs	r1, #44	; 0x2c
 8044864:	fb01 f303 	mul.w	r3, r1, r3
 8044868:	4413      	add	r3, r2
 804486a:	333b      	adds	r3, #59	; 0x3b
 804486c:	2200      	movs	r2, #0
 804486e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8044870:	78fb      	ldrb	r3, [r7, #3]
 8044872:	687a      	ldr	r2, [r7, #4]
 8044874:	212c      	movs	r1, #44	; 0x2c
 8044876:	fb01 f303 	mul.w	r3, r1, r3
 804487a:	4413      	add	r3, r2
 804487c:	333c      	adds	r3, #60	; 0x3c
 804487e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8044882:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8044884:	687b      	ldr	r3, [r7, #4]
 8044886:	6818      	ldr	r0, [r3, #0]
 8044888:	787c      	ldrb	r4, [r7, #1]
 804488a:	78ba      	ldrb	r2, [r7, #2]
 804488c:	78f9      	ldrb	r1, [r7, #3]
 804488e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044890:	9302      	str	r3, [sp, #8]
 8044892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8044896:	9301      	str	r3, [sp, #4]
 8044898:	f897 3020 	ldrb.w	r3, [r7, #32]
 804489c:	9300      	str	r3, [sp, #0]
 804489e:	4623      	mov	r3, r4
 80448a0:	f005 fb94 	bl	8049fcc <USB_HC_Init>
 80448a4:	4603      	mov	r3, r0
 80448a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80448a8:	687b      	ldr	r3, [r7, #4]
 80448aa:	2200      	movs	r2, #0
 80448ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80448b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80448b2:	4618      	mov	r0, r3
 80448b4:	3714      	adds	r7, #20
 80448b6:	46bd      	mov	sp, r7
 80448b8:	bd90      	pop	{r4, r7, pc}

080448ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80448ba:	b580      	push	{r7, lr}
 80448bc:	b084      	sub	sp, #16
 80448be:	af00      	add	r7, sp, #0
 80448c0:	6078      	str	r0, [r7, #4]
 80448c2:	460b      	mov	r3, r1
 80448c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80448c6:	2300      	movs	r3, #0
 80448c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80448ca:	687b      	ldr	r3, [r7, #4]
 80448cc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80448d0:	2b01      	cmp	r3, #1
 80448d2:	d101      	bne.n	80448d8 <HAL_HCD_HC_Halt+0x1e>
 80448d4:	2302      	movs	r3, #2
 80448d6:	e00f      	b.n	80448f8 <HAL_HCD_HC_Halt+0x3e>
 80448d8:	687b      	ldr	r3, [r7, #4]
 80448da:	2201      	movs	r2, #1
 80448dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80448e0:	687b      	ldr	r3, [r7, #4]
 80448e2:	681b      	ldr	r3, [r3, #0]
 80448e4:	78fa      	ldrb	r2, [r7, #3]
 80448e6:	4611      	mov	r1, r2
 80448e8:	4618      	mov	r0, r3
 80448ea:	f005 fde4 	bl	804a4b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80448ee:	687b      	ldr	r3, [r7, #4]
 80448f0:	2200      	movs	r2, #0
 80448f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80448f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80448f8:	4618      	mov	r0, r3
 80448fa:	3710      	adds	r7, #16
 80448fc:	46bd      	mov	sp, r7
 80448fe:	bd80      	pop	{r7, pc}

08044900 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8044900:	b580      	push	{r7, lr}
 8044902:	b082      	sub	sp, #8
 8044904:	af00      	add	r7, sp, #0
 8044906:	6078      	str	r0, [r7, #4]
 8044908:	4608      	mov	r0, r1
 804490a:	4611      	mov	r1, r2
 804490c:	461a      	mov	r2, r3
 804490e:	4603      	mov	r3, r0
 8044910:	70fb      	strb	r3, [r7, #3]
 8044912:	460b      	mov	r3, r1
 8044914:	70bb      	strb	r3, [r7, #2]
 8044916:	4613      	mov	r3, r2
 8044918:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 804491a:	78fb      	ldrb	r3, [r7, #3]
 804491c:	687a      	ldr	r2, [r7, #4]
 804491e:	212c      	movs	r1, #44	; 0x2c
 8044920:	fb01 f303 	mul.w	r3, r1, r3
 8044924:	4413      	add	r3, r2
 8044926:	333b      	adds	r3, #59	; 0x3b
 8044928:	78ba      	ldrb	r2, [r7, #2]
 804492a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 804492c:	78fb      	ldrb	r3, [r7, #3]
 804492e:	687a      	ldr	r2, [r7, #4]
 8044930:	212c      	movs	r1, #44	; 0x2c
 8044932:	fb01 f303 	mul.w	r3, r1, r3
 8044936:	4413      	add	r3, r2
 8044938:	333f      	adds	r3, #63	; 0x3f
 804493a:	787a      	ldrb	r2, [r7, #1]
 804493c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 804493e:	7c3b      	ldrb	r3, [r7, #16]
 8044940:	2b00      	cmp	r3, #0
 8044942:	d112      	bne.n	804496a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8044944:	78fb      	ldrb	r3, [r7, #3]
 8044946:	687a      	ldr	r2, [r7, #4]
 8044948:	212c      	movs	r1, #44	; 0x2c
 804494a:	fb01 f303 	mul.w	r3, r1, r3
 804494e:	4413      	add	r3, r2
 8044950:	3342      	adds	r3, #66	; 0x42
 8044952:	2203      	movs	r2, #3
 8044954:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8044956:	78fb      	ldrb	r3, [r7, #3]
 8044958:	687a      	ldr	r2, [r7, #4]
 804495a:	212c      	movs	r1, #44	; 0x2c
 804495c:	fb01 f303 	mul.w	r3, r1, r3
 8044960:	4413      	add	r3, r2
 8044962:	333d      	adds	r3, #61	; 0x3d
 8044964:	7f3a      	ldrb	r2, [r7, #28]
 8044966:	701a      	strb	r2, [r3, #0]
 8044968:	e008      	b.n	804497c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804496a:	78fb      	ldrb	r3, [r7, #3]
 804496c:	687a      	ldr	r2, [r7, #4]
 804496e:	212c      	movs	r1, #44	; 0x2c
 8044970:	fb01 f303 	mul.w	r3, r1, r3
 8044974:	4413      	add	r3, r2
 8044976:	3342      	adds	r3, #66	; 0x42
 8044978:	2202      	movs	r2, #2
 804497a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 804497c:	787b      	ldrb	r3, [r7, #1]
 804497e:	2b03      	cmp	r3, #3
 8044980:	f200 80c6 	bhi.w	8044b10 <HAL_HCD_HC_SubmitRequest+0x210>
 8044984:	a201      	add	r2, pc, #4	; (adr r2, 804498c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8044986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804498a:	bf00      	nop
 804498c:	0804499d 	.word	0x0804499d
 8044990:	08044afd 	.word	0x08044afd
 8044994:	08044a01 	.word	0x08044a01
 8044998:	08044a7f 	.word	0x08044a7f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 804499c:	7c3b      	ldrb	r3, [r7, #16]
 804499e:	2b01      	cmp	r3, #1
 80449a0:	f040 80b8 	bne.w	8044b14 <HAL_HCD_HC_SubmitRequest+0x214>
 80449a4:	78bb      	ldrb	r3, [r7, #2]
 80449a6:	2b00      	cmp	r3, #0
 80449a8:	f040 80b4 	bne.w	8044b14 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80449ac:	8b3b      	ldrh	r3, [r7, #24]
 80449ae:	2b00      	cmp	r3, #0
 80449b0:	d108      	bne.n	80449c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80449b2:	78fb      	ldrb	r3, [r7, #3]
 80449b4:	687a      	ldr	r2, [r7, #4]
 80449b6:	212c      	movs	r1, #44	; 0x2c
 80449b8:	fb01 f303 	mul.w	r3, r1, r3
 80449bc:	4413      	add	r3, r2
 80449be:	3355      	adds	r3, #85	; 0x55
 80449c0:	2201      	movs	r2, #1
 80449c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80449c4:	78fb      	ldrb	r3, [r7, #3]
 80449c6:	687a      	ldr	r2, [r7, #4]
 80449c8:	212c      	movs	r1, #44	; 0x2c
 80449ca:	fb01 f303 	mul.w	r3, r1, r3
 80449ce:	4413      	add	r3, r2
 80449d0:	3355      	adds	r3, #85	; 0x55
 80449d2:	781b      	ldrb	r3, [r3, #0]
 80449d4:	2b00      	cmp	r3, #0
 80449d6:	d109      	bne.n	80449ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80449d8:	78fb      	ldrb	r3, [r7, #3]
 80449da:	687a      	ldr	r2, [r7, #4]
 80449dc:	212c      	movs	r1, #44	; 0x2c
 80449de:	fb01 f303 	mul.w	r3, r1, r3
 80449e2:	4413      	add	r3, r2
 80449e4:	3342      	adds	r3, #66	; 0x42
 80449e6:	2200      	movs	r2, #0
 80449e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80449ea:	e093      	b.n	8044b14 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80449ec:	78fb      	ldrb	r3, [r7, #3]
 80449ee:	687a      	ldr	r2, [r7, #4]
 80449f0:	212c      	movs	r1, #44	; 0x2c
 80449f2:	fb01 f303 	mul.w	r3, r1, r3
 80449f6:	4413      	add	r3, r2
 80449f8:	3342      	adds	r3, #66	; 0x42
 80449fa:	2202      	movs	r2, #2
 80449fc:	701a      	strb	r2, [r3, #0]
      break;
 80449fe:	e089      	b.n	8044b14 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8044a00:	78bb      	ldrb	r3, [r7, #2]
 8044a02:	2b00      	cmp	r3, #0
 8044a04:	d11d      	bne.n	8044a42 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8044a06:	78fb      	ldrb	r3, [r7, #3]
 8044a08:	687a      	ldr	r2, [r7, #4]
 8044a0a:	212c      	movs	r1, #44	; 0x2c
 8044a0c:	fb01 f303 	mul.w	r3, r1, r3
 8044a10:	4413      	add	r3, r2
 8044a12:	3355      	adds	r3, #85	; 0x55
 8044a14:	781b      	ldrb	r3, [r3, #0]
 8044a16:	2b00      	cmp	r3, #0
 8044a18:	d109      	bne.n	8044a2e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044a1a:	78fb      	ldrb	r3, [r7, #3]
 8044a1c:	687a      	ldr	r2, [r7, #4]
 8044a1e:	212c      	movs	r1, #44	; 0x2c
 8044a20:	fb01 f303 	mul.w	r3, r1, r3
 8044a24:	4413      	add	r3, r2
 8044a26:	3342      	adds	r3, #66	; 0x42
 8044a28:	2200      	movs	r2, #0
 8044a2a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8044a2c:	e073      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044a2e:	78fb      	ldrb	r3, [r7, #3]
 8044a30:	687a      	ldr	r2, [r7, #4]
 8044a32:	212c      	movs	r1, #44	; 0x2c
 8044a34:	fb01 f303 	mul.w	r3, r1, r3
 8044a38:	4413      	add	r3, r2
 8044a3a:	3342      	adds	r3, #66	; 0x42
 8044a3c:	2202      	movs	r2, #2
 8044a3e:	701a      	strb	r2, [r3, #0]
      break;
 8044a40:	e069      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044a42:	78fb      	ldrb	r3, [r7, #3]
 8044a44:	687a      	ldr	r2, [r7, #4]
 8044a46:	212c      	movs	r1, #44	; 0x2c
 8044a48:	fb01 f303 	mul.w	r3, r1, r3
 8044a4c:	4413      	add	r3, r2
 8044a4e:	3354      	adds	r3, #84	; 0x54
 8044a50:	781b      	ldrb	r3, [r3, #0]
 8044a52:	2b00      	cmp	r3, #0
 8044a54:	d109      	bne.n	8044a6a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044a56:	78fb      	ldrb	r3, [r7, #3]
 8044a58:	687a      	ldr	r2, [r7, #4]
 8044a5a:	212c      	movs	r1, #44	; 0x2c
 8044a5c:	fb01 f303 	mul.w	r3, r1, r3
 8044a60:	4413      	add	r3, r2
 8044a62:	3342      	adds	r3, #66	; 0x42
 8044a64:	2200      	movs	r2, #0
 8044a66:	701a      	strb	r2, [r3, #0]
      break;
 8044a68:	e055      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044a6a:	78fb      	ldrb	r3, [r7, #3]
 8044a6c:	687a      	ldr	r2, [r7, #4]
 8044a6e:	212c      	movs	r1, #44	; 0x2c
 8044a70:	fb01 f303 	mul.w	r3, r1, r3
 8044a74:	4413      	add	r3, r2
 8044a76:	3342      	adds	r3, #66	; 0x42
 8044a78:	2202      	movs	r2, #2
 8044a7a:	701a      	strb	r2, [r3, #0]
      break;
 8044a7c:	e04b      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8044a7e:	78bb      	ldrb	r3, [r7, #2]
 8044a80:	2b00      	cmp	r3, #0
 8044a82:	d11d      	bne.n	8044ac0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8044a84:	78fb      	ldrb	r3, [r7, #3]
 8044a86:	687a      	ldr	r2, [r7, #4]
 8044a88:	212c      	movs	r1, #44	; 0x2c
 8044a8a:	fb01 f303 	mul.w	r3, r1, r3
 8044a8e:	4413      	add	r3, r2
 8044a90:	3355      	adds	r3, #85	; 0x55
 8044a92:	781b      	ldrb	r3, [r3, #0]
 8044a94:	2b00      	cmp	r3, #0
 8044a96:	d109      	bne.n	8044aac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044a98:	78fb      	ldrb	r3, [r7, #3]
 8044a9a:	687a      	ldr	r2, [r7, #4]
 8044a9c:	212c      	movs	r1, #44	; 0x2c
 8044a9e:	fb01 f303 	mul.w	r3, r1, r3
 8044aa2:	4413      	add	r3, r2
 8044aa4:	3342      	adds	r3, #66	; 0x42
 8044aa6:	2200      	movs	r2, #0
 8044aa8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8044aaa:	e034      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044aac:	78fb      	ldrb	r3, [r7, #3]
 8044aae:	687a      	ldr	r2, [r7, #4]
 8044ab0:	212c      	movs	r1, #44	; 0x2c
 8044ab2:	fb01 f303 	mul.w	r3, r1, r3
 8044ab6:	4413      	add	r3, r2
 8044ab8:	3342      	adds	r3, #66	; 0x42
 8044aba:	2202      	movs	r2, #2
 8044abc:	701a      	strb	r2, [r3, #0]
      break;
 8044abe:	e02a      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044ac0:	78fb      	ldrb	r3, [r7, #3]
 8044ac2:	687a      	ldr	r2, [r7, #4]
 8044ac4:	212c      	movs	r1, #44	; 0x2c
 8044ac6:	fb01 f303 	mul.w	r3, r1, r3
 8044aca:	4413      	add	r3, r2
 8044acc:	3354      	adds	r3, #84	; 0x54
 8044ace:	781b      	ldrb	r3, [r3, #0]
 8044ad0:	2b00      	cmp	r3, #0
 8044ad2:	d109      	bne.n	8044ae8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044ad4:	78fb      	ldrb	r3, [r7, #3]
 8044ad6:	687a      	ldr	r2, [r7, #4]
 8044ad8:	212c      	movs	r1, #44	; 0x2c
 8044ada:	fb01 f303 	mul.w	r3, r1, r3
 8044ade:	4413      	add	r3, r2
 8044ae0:	3342      	adds	r3, #66	; 0x42
 8044ae2:	2200      	movs	r2, #0
 8044ae4:	701a      	strb	r2, [r3, #0]
      break;
 8044ae6:	e016      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044ae8:	78fb      	ldrb	r3, [r7, #3]
 8044aea:	687a      	ldr	r2, [r7, #4]
 8044aec:	212c      	movs	r1, #44	; 0x2c
 8044aee:	fb01 f303 	mul.w	r3, r1, r3
 8044af2:	4413      	add	r3, r2
 8044af4:	3342      	adds	r3, #66	; 0x42
 8044af6:	2202      	movs	r2, #2
 8044af8:	701a      	strb	r2, [r3, #0]
      break;
 8044afa:	e00c      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8044afc:	78fb      	ldrb	r3, [r7, #3]
 8044afe:	687a      	ldr	r2, [r7, #4]
 8044b00:	212c      	movs	r1, #44	; 0x2c
 8044b02:	fb01 f303 	mul.w	r3, r1, r3
 8044b06:	4413      	add	r3, r2
 8044b08:	3342      	adds	r3, #66	; 0x42
 8044b0a:	2200      	movs	r2, #0
 8044b0c:	701a      	strb	r2, [r3, #0]
      break;
 8044b0e:	e002      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8044b10:	bf00      	nop
 8044b12:	e000      	b.n	8044b16 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8044b14:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8044b16:	78fb      	ldrb	r3, [r7, #3]
 8044b18:	687a      	ldr	r2, [r7, #4]
 8044b1a:	212c      	movs	r1, #44	; 0x2c
 8044b1c:	fb01 f303 	mul.w	r3, r1, r3
 8044b20:	4413      	add	r3, r2
 8044b22:	3344      	adds	r3, #68	; 0x44
 8044b24:	697a      	ldr	r2, [r7, #20]
 8044b26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8044b28:	78fb      	ldrb	r3, [r7, #3]
 8044b2a:	8b3a      	ldrh	r2, [r7, #24]
 8044b2c:	6879      	ldr	r1, [r7, #4]
 8044b2e:	202c      	movs	r0, #44	; 0x2c
 8044b30:	fb00 f303 	mul.w	r3, r0, r3
 8044b34:	440b      	add	r3, r1
 8044b36:	334c      	adds	r3, #76	; 0x4c
 8044b38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8044b3a:	78fb      	ldrb	r3, [r7, #3]
 8044b3c:	687a      	ldr	r2, [r7, #4]
 8044b3e:	212c      	movs	r1, #44	; 0x2c
 8044b40:	fb01 f303 	mul.w	r3, r1, r3
 8044b44:	4413      	add	r3, r2
 8044b46:	3360      	adds	r3, #96	; 0x60
 8044b48:	2200      	movs	r2, #0
 8044b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8044b4c:	78fb      	ldrb	r3, [r7, #3]
 8044b4e:	687a      	ldr	r2, [r7, #4]
 8044b50:	212c      	movs	r1, #44	; 0x2c
 8044b52:	fb01 f303 	mul.w	r3, r1, r3
 8044b56:	4413      	add	r3, r2
 8044b58:	3350      	adds	r3, #80	; 0x50
 8044b5a:	2200      	movs	r2, #0
 8044b5c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044b5e:	78fb      	ldrb	r3, [r7, #3]
 8044b60:	687a      	ldr	r2, [r7, #4]
 8044b62:	212c      	movs	r1, #44	; 0x2c
 8044b64:	fb01 f303 	mul.w	r3, r1, r3
 8044b68:	4413      	add	r3, r2
 8044b6a:	3339      	adds	r3, #57	; 0x39
 8044b6c:	78fa      	ldrb	r2, [r7, #3]
 8044b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8044b70:	78fb      	ldrb	r3, [r7, #3]
 8044b72:	687a      	ldr	r2, [r7, #4]
 8044b74:	212c      	movs	r1, #44	; 0x2c
 8044b76:	fb01 f303 	mul.w	r3, r1, r3
 8044b7a:	4413      	add	r3, r2
 8044b7c:	3361      	adds	r3, #97	; 0x61
 8044b7e:	2200      	movs	r2, #0
 8044b80:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8044b82:	687b      	ldr	r3, [r7, #4]
 8044b84:	6818      	ldr	r0, [r3, #0]
 8044b86:	78fb      	ldrb	r3, [r7, #3]
 8044b88:	222c      	movs	r2, #44	; 0x2c
 8044b8a:	fb02 f303 	mul.w	r3, r2, r3
 8044b8e:	3338      	adds	r3, #56	; 0x38
 8044b90:	687a      	ldr	r2, [r7, #4]
 8044b92:	18d1      	adds	r1, r2, r3
 8044b94:	687b      	ldr	r3, [r7, #4]
 8044b96:	691b      	ldr	r3, [r3, #16]
 8044b98:	b2db      	uxtb	r3, r3
 8044b9a:	461a      	mov	r2, r3
 8044b9c:	f005 fb38 	bl	804a210 <USB_HC_StartXfer>
 8044ba0:	4603      	mov	r3, r0
}
 8044ba2:	4618      	mov	r0, r3
 8044ba4:	3708      	adds	r7, #8
 8044ba6:	46bd      	mov	sp, r7
 8044ba8:	bd80      	pop	{r7, pc}
 8044baa:	bf00      	nop

08044bac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8044bac:	b580      	push	{r7, lr}
 8044bae:	b086      	sub	sp, #24
 8044bb0:	af00      	add	r7, sp, #0
 8044bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044bb4:	687b      	ldr	r3, [r7, #4]
 8044bb6:	681b      	ldr	r3, [r3, #0]
 8044bb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044bba:	693b      	ldr	r3, [r7, #16]
 8044bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8044bbe:	687b      	ldr	r3, [r7, #4]
 8044bc0:	681b      	ldr	r3, [r3, #0]
 8044bc2:	4618      	mov	r0, r3
 8044bc4:	f005 f839 	bl	8049c3a <USB_GetMode>
 8044bc8:	4603      	mov	r3, r0
 8044bca:	2b01      	cmp	r3, #1
 8044bcc:	f040 80f6 	bne.w	8044dbc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8044bd0:	687b      	ldr	r3, [r7, #4]
 8044bd2:	681b      	ldr	r3, [r3, #0]
 8044bd4:	4618      	mov	r0, r3
 8044bd6:	f005 f81d 	bl	8049c14 <USB_ReadInterrupts>
 8044bda:	4603      	mov	r3, r0
 8044bdc:	2b00      	cmp	r3, #0
 8044bde:	f000 80ec 	beq.w	8044dba <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8044be2:	687b      	ldr	r3, [r7, #4]
 8044be4:	681b      	ldr	r3, [r3, #0]
 8044be6:	4618      	mov	r0, r3
 8044be8:	f005 f814 	bl	8049c14 <USB_ReadInterrupts>
 8044bec:	4603      	mov	r3, r0
 8044bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044bf6:	d104      	bne.n	8044c02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8044bf8:	687b      	ldr	r3, [r7, #4]
 8044bfa:	681b      	ldr	r3, [r3, #0]
 8044bfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8044c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8044c02:	687b      	ldr	r3, [r7, #4]
 8044c04:	681b      	ldr	r3, [r3, #0]
 8044c06:	4618      	mov	r0, r3
 8044c08:	f005 f804 	bl	8049c14 <USB_ReadInterrupts>
 8044c0c:	4603      	mov	r3, r0
 8044c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044c16:	d104      	bne.n	8044c22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8044c18:	687b      	ldr	r3, [r7, #4]
 8044c1a:	681b      	ldr	r3, [r3, #0]
 8044c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8044c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8044c22:	687b      	ldr	r3, [r7, #4]
 8044c24:	681b      	ldr	r3, [r3, #0]
 8044c26:	4618      	mov	r0, r3
 8044c28:	f004 fff4 	bl	8049c14 <USB_ReadInterrupts>
 8044c2c:	4603      	mov	r3, r0
 8044c2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8044c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8044c36:	d104      	bne.n	8044c42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8044c38:	687b      	ldr	r3, [r7, #4]
 8044c3a:	681b      	ldr	r3, [r3, #0]
 8044c3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8044c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8044c42:	687b      	ldr	r3, [r7, #4]
 8044c44:	681b      	ldr	r3, [r3, #0]
 8044c46:	4618      	mov	r0, r3
 8044c48:	f004 ffe4 	bl	8049c14 <USB_ReadInterrupts>
 8044c4c:	4603      	mov	r3, r0
 8044c4e:	f003 0302 	and.w	r3, r3, #2
 8044c52:	2b02      	cmp	r3, #2
 8044c54:	d103      	bne.n	8044c5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8044c56:	687b      	ldr	r3, [r7, #4]
 8044c58:	681b      	ldr	r3, [r3, #0]
 8044c5a:	2202      	movs	r2, #2
 8044c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8044c5e:	687b      	ldr	r3, [r7, #4]
 8044c60:	681b      	ldr	r3, [r3, #0]
 8044c62:	4618      	mov	r0, r3
 8044c64:	f004 ffd6 	bl	8049c14 <USB_ReadInterrupts>
 8044c68:	4603      	mov	r3, r0
 8044c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044c72:	d11c      	bne.n	8044cae <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8044c74:	687b      	ldr	r3, [r7, #4]
 8044c76:	681b      	ldr	r3, [r3, #0]
 8044c78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8044c7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8044c7e:	68fb      	ldr	r3, [r7, #12]
 8044c80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8044c84:	681b      	ldr	r3, [r3, #0]
 8044c86:	f003 0301 	and.w	r3, r3, #1
 8044c8a:	2b00      	cmp	r3, #0
 8044c8c:	d10f      	bne.n	8044cae <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8044c8e:	2110      	movs	r1, #16
 8044c90:	6938      	ldr	r0, [r7, #16]
 8044c92:	f004 fec5 	bl	8049a20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8044c96:	6938      	ldr	r0, [r7, #16]
 8044c98:	f004 fef6 	bl	8049a88 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8044c9c:	687b      	ldr	r3, [r7, #4]
 8044c9e:	681b      	ldr	r3, [r3, #0]
 8044ca0:	2101      	movs	r1, #1
 8044ca2:	4618      	mov	r0, r3
 8044ca4:	f005 f8cc 	bl	8049e40 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8044ca8:	6878      	ldr	r0, [r7, #4]
 8044caa:	f007 fe95 	bl	804c9d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8044cae:	687b      	ldr	r3, [r7, #4]
 8044cb0:	681b      	ldr	r3, [r3, #0]
 8044cb2:	4618      	mov	r0, r3
 8044cb4:	f004 ffae 	bl	8049c14 <USB_ReadInterrupts>
 8044cb8:	4603      	mov	r3, r0
 8044cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8044cc2:	d102      	bne.n	8044cca <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8044cc4:	6878      	ldr	r0, [r7, #4]
 8044cc6:	f001 f89e 	bl	8045e06 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8044cca:	687b      	ldr	r3, [r7, #4]
 8044ccc:	681b      	ldr	r3, [r3, #0]
 8044cce:	4618      	mov	r0, r3
 8044cd0:	f004 ffa0 	bl	8049c14 <USB_ReadInterrupts>
 8044cd4:	4603      	mov	r3, r0
 8044cd6:	f003 0308 	and.w	r3, r3, #8
 8044cda:	2b08      	cmp	r3, #8
 8044cdc:	d106      	bne.n	8044cec <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8044cde:	6878      	ldr	r0, [r7, #4]
 8044ce0:	f007 fe5e 	bl	804c9a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8044ce4:	687b      	ldr	r3, [r7, #4]
 8044ce6:	681b      	ldr	r3, [r3, #0]
 8044ce8:	2208      	movs	r2, #8
 8044cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8044cec:	687b      	ldr	r3, [r7, #4]
 8044cee:	681b      	ldr	r3, [r3, #0]
 8044cf0:	4618      	mov	r0, r3
 8044cf2:	f004 ff8f 	bl	8049c14 <USB_ReadInterrupts>
 8044cf6:	4603      	mov	r3, r0
 8044cf8:	f003 0310 	and.w	r3, r3, #16
 8044cfc:	2b10      	cmp	r3, #16
 8044cfe:	d101      	bne.n	8044d04 <HAL_HCD_IRQHandler+0x158>
 8044d00:	2301      	movs	r3, #1
 8044d02:	e000      	b.n	8044d06 <HAL_HCD_IRQHandler+0x15a>
 8044d04:	2300      	movs	r3, #0
 8044d06:	2b00      	cmp	r3, #0
 8044d08:	d012      	beq.n	8044d30 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8044d0a:	687b      	ldr	r3, [r7, #4]
 8044d0c:	681b      	ldr	r3, [r3, #0]
 8044d0e:	699a      	ldr	r2, [r3, #24]
 8044d10:	687b      	ldr	r3, [r7, #4]
 8044d12:	681b      	ldr	r3, [r3, #0]
 8044d14:	f022 0210 	bic.w	r2, r2, #16
 8044d18:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8044d1a:	6878      	ldr	r0, [r7, #4]
 8044d1c:	f000 ffa1 	bl	8045c62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8044d20:	687b      	ldr	r3, [r7, #4]
 8044d22:	681b      	ldr	r3, [r3, #0]
 8044d24:	699a      	ldr	r2, [r3, #24]
 8044d26:	687b      	ldr	r3, [r7, #4]
 8044d28:	681b      	ldr	r3, [r3, #0]
 8044d2a:	f042 0210 	orr.w	r2, r2, #16
 8044d2e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8044d30:	687b      	ldr	r3, [r7, #4]
 8044d32:	681b      	ldr	r3, [r3, #0]
 8044d34:	4618      	mov	r0, r3
 8044d36:	f004 ff6d 	bl	8049c14 <USB_ReadInterrupts>
 8044d3a:	4603      	mov	r3, r0
 8044d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044d44:	d13a      	bne.n	8044dbc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8044d46:	687b      	ldr	r3, [r7, #4]
 8044d48:	681b      	ldr	r3, [r3, #0]
 8044d4a:	4618      	mov	r0, r3
 8044d4c:	f005 fba2 	bl	804a494 <USB_HC_ReadInterrupt>
 8044d50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044d52:	2300      	movs	r3, #0
 8044d54:	617b      	str	r3, [r7, #20]
 8044d56:	e025      	b.n	8044da4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8044d58:	697b      	ldr	r3, [r7, #20]
 8044d5a:	f003 030f 	and.w	r3, r3, #15
 8044d5e:	68ba      	ldr	r2, [r7, #8]
 8044d60:	fa22 f303 	lsr.w	r3, r2, r3
 8044d64:	f003 0301 	and.w	r3, r3, #1
 8044d68:	2b00      	cmp	r3, #0
 8044d6a:	d018      	beq.n	8044d9e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8044d6c:	697b      	ldr	r3, [r7, #20]
 8044d6e:	015a      	lsls	r2, r3, #5
 8044d70:	68fb      	ldr	r3, [r7, #12]
 8044d72:	4413      	add	r3, r2
 8044d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044d78:	681b      	ldr	r3, [r3, #0]
 8044d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8044d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044d82:	d106      	bne.n	8044d92 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8044d84:	697b      	ldr	r3, [r7, #20]
 8044d86:	b2db      	uxtb	r3, r3
 8044d88:	4619      	mov	r1, r3
 8044d8a:	6878      	ldr	r0, [r7, #4]
 8044d8c:	f000 f8ab 	bl	8044ee6 <HCD_HC_IN_IRQHandler>
 8044d90:	e005      	b.n	8044d9e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8044d92:	697b      	ldr	r3, [r7, #20]
 8044d94:	b2db      	uxtb	r3, r3
 8044d96:	4619      	mov	r1, r3
 8044d98:	6878      	ldr	r0, [r7, #4]
 8044d9a:	f000 fbf9 	bl	8045590 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044d9e:	697b      	ldr	r3, [r7, #20]
 8044da0:	3301      	adds	r3, #1
 8044da2:	617b      	str	r3, [r7, #20]
 8044da4:	687b      	ldr	r3, [r7, #4]
 8044da6:	689b      	ldr	r3, [r3, #8]
 8044da8:	697a      	ldr	r2, [r7, #20]
 8044daa:	429a      	cmp	r2, r3
 8044dac:	d3d4      	bcc.n	8044d58 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8044dae:	687b      	ldr	r3, [r7, #4]
 8044db0:	681b      	ldr	r3, [r3, #0]
 8044db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8044db6:	615a      	str	r2, [r3, #20]
 8044db8:	e000      	b.n	8044dbc <HAL_HCD_IRQHandler+0x210>
      return;
 8044dba:	bf00      	nop
    }
  }
}
 8044dbc:	3718      	adds	r7, #24
 8044dbe:	46bd      	mov	sp, r7
 8044dc0:	bd80      	pop	{r7, pc}

08044dc2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8044dc2:	b580      	push	{r7, lr}
 8044dc4:	b082      	sub	sp, #8
 8044dc6:	af00      	add	r7, sp, #0
 8044dc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044dca:	687b      	ldr	r3, [r7, #4]
 8044dcc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044dd0:	2b01      	cmp	r3, #1
 8044dd2:	d101      	bne.n	8044dd8 <HAL_HCD_Start+0x16>
 8044dd4:	2302      	movs	r3, #2
 8044dd6:	e013      	b.n	8044e00 <HAL_HCD_Start+0x3e>
 8044dd8:	687b      	ldr	r3, [r7, #4]
 8044dda:	2201      	movs	r2, #1
 8044ddc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8044de0:	687b      	ldr	r3, [r7, #4]
 8044de2:	681b      	ldr	r3, [r3, #0]
 8044de4:	2101      	movs	r1, #1
 8044de6:	4618      	mov	r0, r3
 8044de8:	f005 f88e 	bl	8049f08 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8044dec:	687b      	ldr	r3, [r7, #4]
 8044dee:	681b      	ldr	r3, [r3, #0]
 8044df0:	4618      	mov	r0, r3
 8044df2:	f004 fda6 	bl	8049942 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8044df6:	687b      	ldr	r3, [r7, #4]
 8044df8:	2200      	movs	r2, #0
 8044dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044dfe:	2300      	movs	r3, #0
}
 8044e00:	4618      	mov	r0, r3
 8044e02:	3708      	adds	r7, #8
 8044e04:	46bd      	mov	sp, r7
 8044e06:	bd80      	pop	{r7, pc}

08044e08 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8044e08:	b580      	push	{r7, lr}
 8044e0a:	b082      	sub	sp, #8
 8044e0c:	af00      	add	r7, sp, #0
 8044e0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044e10:	687b      	ldr	r3, [r7, #4]
 8044e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044e16:	2b01      	cmp	r3, #1
 8044e18:	d101      	bne.n	8044e1e <HAL_HCD_Stop+0x16>
 8044e1a:	2302      	movs	r3, #2
 8044e1c:	e00d      	b.n	8044e3a <HAL_HCD_Stop+0x32>
 8044e1e:	687b      	ldr	r3, [r7, #4]
 8044e20:	2201      	movs	r2, #1
 8044e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8044e26:	687b      	ldr	r3, [r7, #4]
 8044e28:	681b      	ldr	r3, [r3, #0]
 8044e2a:	4618      	mov	r0, r3
 8044e2c:	f005 fc7c 	bl	804a728 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8044e30:	687b      	ldr	r3, [r7, #4]
 8044e32:	2200      	movs	r2, #0
 8044e34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044e38:	2300      	movs	r3, #0
}
 8044e3a:	4618      	mov	r0, r3
 8044e3c:	3708      	adds	r7, #8
 8044e3e:	46bd      	mov	sp, r7
 8044e40:	bd80      	pop	{r7, pc}

08044e42 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8044e42:	b580      	push	{r7, lr}
 8044e44:	b082      	sub	sp, #8
 8044e46:	af00      	add	r7, sp, #0
 8044e48:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8044e4a:	687b      	ldr	r3, [r7, #4]
 8044e4c:	681b      	ldr	r3, [r3, #0]
 8044e4e:	4618      	mov	r0, r3
 8044e50:	f005 f830 	bl	8049eb4 <USB_ResetPort>
 8044e54:	4603      	mov	r3, r0
}
 8044e56:	4618      	mov	r0, r3
 8044e58:	3708      	adds	r7, #8
 8044e5a:	46bd      	mov	sp, r7
 8044e5c:	bd80      	pop	{r7, pc}

08044e5e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044e5e:	b480      	push	{r7}
 8044e60:	b083      	sub	sp, #12
 8044e62:	af00      	add	r7, sp, #0
 8044e64:	6078      	str	r0, [r7, #4]
 8044e66:	460b      	mov	r3, r1
 8044e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8044e6a:	78fb      	ldrb	r3, [r7, #3]
 8044e6c:	687a      	ldr	r2, [r7, #4]
 8044e6e:	212c      	movs	r1, #44	; 0x2c
 8044e70:	fb01 f303 	mul.w	r3, r1, r3
 8044e74:	4413      	add	r3, r2
 8044e76:	3360      	adds	r3, #96	; 0x60
 8044e78:	781b      	ldrb	r3, [r3, #0]
}
 8044e7a:	4618      	mov	r0, r3
 8044e7c:	370c      	adds	r7, #12
 8044e7e:	46bd      	mov	sp, r7
 8044e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e84:	4770      	bx	lr

08044e86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044e86:	b480      	push	{r7}
 8044e88:	b083      	sub	sp, #12
 8044e8a:	af00      	add	r7, sp, #0
 8044e8c:	6078      	str	r0, [r7, #4]
 8044e8e:	460b      	mov	r3, r1
 8044e90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8044e92:	78fb      	ldrb	r3, [r7, #3]
 8044e94:	687a      	ldr	r2, [r7, #4]
 8044e96:	212c      	movs	r1, #44	; 0x2c
 8044e98:	fb01 f303 	mul.w	r3, r1, r3
 8044e9c:	4413      	add	r3, r2
 8044e9e:	3350      	adds	r3, #80	; 0x50
 8044ea0:	681b      	ldr	r3, [r3, #0]
}
 8044ea2:	4618      	mov	r0, r3
 8044ea4:	370c      	adds	r7, #12
 8044ea6:	46bd      	mov	sp, r7
 8044ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044eac:	4770      	bx	lr

08044eae <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8044eae:	b580      	push	{r7, lr}
 8044eb0:	b082      	sub	sp, #8
 8044eb2:	af00      	add	r7, sp, #0
 8044eb4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8044eb6:	687b      	ldr	r3, [r7, #4]
 8044eb8:	681b      	ldr	r3, [r3, #0]
 8044eba:	4618      	mov	r0, r3
 8044ebc:	f005 f874 	bl	8049fa8 <USB_GetCurrentFrame>
 8044ec0:	4603      	mov	r3, r0
}
 8044ec2:	4618      	mov	r0, r3
 8044ec4:	3708      	adds	r7, #8
 8044ec6:	46bd      	mov	sp, r7
 8044ec8:	bd80      	pop	{r7, pc}

08044eca <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8044eca:	b580      	push	{r7, lr}
 8044ecc:	b082      	sub	sp, #8
 8044ece:	af00      	add	r7, sp, #0
 8044ed0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8044ed2:	687b      	ldr	r3, [r7, #4]
 8044ed4:	681b      	ldr	r3, [r3, #0]
 8044ed6:	4618      	mov	r0, r3
 8044ed8:	f005 f84f 	bl	8049f7a <USB_GetHostSpeed>
 8044edc:	4603      	mov	r3, r0
}
 8044ede:	4618      	mov	r0, r3
 8044ee0:	3708      	adds	r7, #8
 8044ee2:	46bd      	mov	sp, r7
 8044ee4:	bd80      	pop	{r7, pc}

08044ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044ee6:	b580      	push	{r7, lr}
 8044ee8:	b086      	sub	sp, #24
 8044eea:	af00      	add	r7, sp, #0
 8044eec:	6078      	str	r0, [r7, #4]
 8044eee:	460b      	mov	r3, r1
 8044ef0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044ef2:	687b      	ldr	r3, [r7, #4]
 8044ef4:	681b      	ldr	r3, [r3, #0]
 8044ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044ef8:	697b      	ldr	r3, [r7, #20]
 8044efa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8044efc:	78fb      	ldrb	r3, [r7, #3]
 8044efe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044f00:	68fb      	ldr	r3, [r7, #12]
 8044f02:	015a      	lsls	r2, r3, #5
 8044f04:	693b      	ldr	r3, [r7, #16]
 8044f06:	4413      	add	r3, r2
 8044f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f0c:	689b      	ldr	r3, [r3, #8]
 8044f0e:	f003 0304 	and.w	r3, r3, #4
 8044f12:	2b04      	cmp	r3, #4
 8044f14:	d11a      	bne.n	8044f4c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8044f16:	68fb      	ldr	r3, [r7, #12]
 8044f18:	015a      	lsls	r2, r3, #5
 8044f1a:	693b      	ldr	r3, [r7, #16]
 8044f1c:	4413      	add	r3, r2
 8044f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f22:	461a      	mov	r2, r3
 8044f24:	2304      	movs	r3, #4
 8044f26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044f28:	687a      	ldr	r2, [r7, #4]
 8044f2a:	68fb      	ldr	r3, [r7, #12]
 8044f2c:	212c      	movs	r1, #44	; 0x2c
 8044f2e:	fb01 f303 	mul.w	r3, r1, r3
 8044f32:	4413      	add	r3, r2
 8044f34:	3361      	adds	r3, #97	; 0x61
 8044f36:	2206      	movs	r2, #6
 8044f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f3a:	687b      	ldr	r3, [r7, #4]
 8044f3c:	681b      	ldr	r3, [r3, #0]
 8044f3e:	68fa      	ldr	r2, [r7, #12]
 8044f40:	b2d2      	uxtb	r2, r2
 8044f42:	4611      	mov	r1, r2
 8044f44:	4618      	mov	r0, r3
 8044f46:	f005 fab6 	bl	804a4b6 <USB_HC_Halt>
 8044f4a:	e0af      	b.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8044f4c:	68fb      	ldr	r3, [r7, #12]
 8044f4e:	015a      	lsls	r2, r3, #5
 8044f50:	693b      	ldr	r3, [r7, #16]
 8044f52:	4413      	add	r3, r2
 8044f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f58:	689b      	ldr	r3, [r3, #8]
 8044f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044f62:	d11b      	bne.n	8044f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8044f64:	68fb      	ldr	r3, [r7, #12]
 8044f66:	015a      	lsls	r2, r3, #5
 8044f68:	693b      	ldr	r3, [r7, #16]
 8044f6a:	4413      	add	r3, r2
 8044f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f70:	461a      	mov	r2, r3
 8044f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8044f78:	687a      	ldr	r2, [r7, #4]
 8044f7a:	68fb      	ldr	r3, [r7, #12]
 8044f7c:	212c      	movs	r1, #44	; 0x2c
 8044f7e:	fb01 f303 	mul.w	r3, r1, r3
 8044f82:	4413      	add	r3, r2
 8044f84:	3361      	adds	r3, #97	; 0x61
 8044f86:	2207      	movs	r2, #7
 8044f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f8a:	687b      	ldr	r3, [r7, #4]
 8044f8c:	681b      	ldr	r3, [r3, #0]
 8044f8e:	68fa      	ldr	r2, [r7, #12]
 8044f90:	b2d2      	uxtb	r2, r2
 8044f92:	4611      	mov	r1, r2
 8044f94:	4618      	mov	r0, r3
 8044f96:	f005 fa8e 	bl	804a4b6 <USB_HC_Halt>
 8044f9a:	e087      	b.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8044f9c:	68fb      	ldr	r3, [r7, #12]
 8044f9e:	015a      	lsls	r2, r3, #5
 8044fa0:	693b      	ldr	r3, [r7, #16]
 8044fa2:	4413      	add	r3, r2
 8044fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fa8:	689b      	ldr	r3, [r3, #8]
 8044faa:	f003 0320 	and.w	r3, r3, #32
 8044fae:	2b20      	cmp	r3, #32
 8044fb0:	d109      	bne.n	8044fc6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8044fb2:	68fb      	ldr	r3, [r7, #12]
 8044fb4:	015a      	lsls	r2, r3, #5
 8044fb6:	693b      	ldr	r3, [r7, #16]
 8044fb8:	4413      	add	r3, r2
 8044fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fbe:	461a      	mov	r2, r3
 8044fc0:	2320      	movs	r3, #32
 8044fc2:	6093      	str	r3, [r2, #8]
 8044fc4:	e072      	b.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8044fc6:	68fb      	ldr	r3, [r7, #12]
 8044fc8:	015a      	lsls	r2, r3, #5
 8044fca:	693b      	ldr	r3, [r7, #16]
 8044fcc:	4413      	add	r3, r2
 8044fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fd2:	689b      	ldr	r3, [r3, #8]
 8044fd4:	f003 0308 	and.w	r3, r3, #8
 8044fd8:	2b08      	cmp	r3, #8
 8044fda:	d11a      	bne.n	8045012 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8044fdc:	68fb      	ldr	r3, [r7, #12]
 8044fde:	015a      	lsls	r2, r3, #5
 8044fe0:	693b      	ldr	r3, [r7, #16]
 8044fe2:	4413      	add	r3, r2
 8044fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fe8:	461a      	mov	r2, r3
 8044fea:	2308      	movs	r3, #8
 8044fec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8044fee:	687a      	ldr	r2, [r7, #4]
 8044ff0:	68fb      	ldr	r3, [r7, #12]
 8044ff2:	212c      	movs	r1, #44	; 0x2c
 8044ff4:	fb01 f303 	mul.w	r3, r1, r3
 8044ff8:	4413      	add	r3, r2
 8044ffa:	3361      	adds	r3, #97	; 0x61
 8044ffc:	2205      	movs	r2, #5
 8044ffe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045000:	687b      	ldr	r3, [r7, #4]
 8045002:	681b      	ldr	r3, [r3, #0]
 8045004:	68fa      	ldr	r2, [r7, #12]
 8045006:	b2d2      	uxtb	r2, r2
 8045008:	4611      	mov	r1, r2
 804500a:	4618      	mov	r0, r3
 804500c:	f005 fa53 	bl	804a4b6 <USB_HC_Halt>
 8045010:	e04c      	b.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045012:	68fb      	ldr	r3, [r7, #12]
 8045014:	015a      	lsls	r2, r3, #5
 8045016:	693b      	ldr	r3, [r7, #16]
 8045018:	4413      	add	r3, r2
 804501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804501e:	689b      	ldr	r3, [r3, #8]
 8045020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045028:	d11b      	bne.n	8045062 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 804502a:	68fb      	ldr	r3, [r7, #12]
 804502c:	015a      	lsls	r2, r3, #5
 804502e:	693b      	ldr	r3, [r7, #16]
 8045030:	4413      	add	r3, r2
 8045032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045036:	461a      	mov	r2, r3
 8045038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804503c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 804503e:	687a      	ldr	r2, [r7, #4]
 8045040:	68fb      	ldr	r3, [r7, #12]
 8045042:	212c      	movs	r1, #44	; 0x2c
 8045044:	fb01 f303 	mul.w	r3, r1, r3
 8045048:	4413      	add	r3, r2
 804504a:	3361      	adds	r3, #97	; 0x61
 804504c:	2208      	movs	r2, #8
 804504e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045050:	687b      	ldr	r3, [r7, #4]
 8045052:	681b      	ldr	r3, [r3, #0]
 8045054:	68fa      	ldr	r2, [r7, #12]
 8045056:	b2d2      	uxtb	r2, r2
 8045058:	4611      	mov	r1, r2
 804505a:	4618      	mov	r0, r3
 804505c:	f005 fa2b 	bl	804a4b6 <USB_HC_Halt>
 8045060:	e024      	b.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045062:	68fb      	ldr	r3, [r7, #12]
 8045064:	015a      	lsls	r2, r3, #5
 8045066:	693b      	ldr	r3, [r7, #16]
 8045068:	4413      	add	r3, r2
 804506a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804506e:	689b      	ldr	r3, [r3, #8]
 8045070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045074:	2b80      	cmp	r3, #128	; 0x80
 8045076:	d119      	bne.n	80450ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045078:	68fb      	ldr	r3, [r7, #12]
 804507a:	015a      	lsls	r2, r3, #5
 804507c:	693b      	ldr	r3, [r7, #16]
 804507e:	4413      	add	r3, r2
 8045080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045084:	461a      	mov	r2, r3
 8045086:	2380      	movs	r3, #128	; 0x80
 8045088:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 804508a:	687a      	ldr	r2, [r7, #4]
 804508c:	68fb      	ldr	r3, [r7, #12]
 804508e:	212c      	movs	r1, #44	; 0x2c
 8045090:	fb01 f303 	mul.w	r3, r1, r3
 8045094:	4413      	add	r3, r2
 8045096:	3361      	adds	r3, #97	; 0x61
 8045098:	2206      	movs	r2, #6
 804509a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804509c:	687b      	ldr	r3, [r7, #4]
 804509e:	681b      	ldr	r3, [r3, #0]
 80450a0:	68fa      	ldr	r2, [r7, #12]
 80450a2:	b2d2      	uxtb	r2, r2
 80450a4:	4611      	mov	r1, r2
 80450a6:	4618      	mov	r0, r3
 80450a8:	f005 fa05 	bl	804a4b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80450ac:	68fb      	ldr	r3, [r7, #12]
 80450ae:	015a      	lsls	r2, r3, #5
 80450b0:	693b      	ldr	r3, [r7, #16]
 80450b2:	4413      	add	r3, r2
 80450b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450b8:	689b      	ldr	r3, [r3, #8]
 80450ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80450be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80450c2:	d112      	bne.n	80450ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80450c4:	687b      	ldr	r3, [r7, #4]
 80450c6:	681b      	ldr	r3, [r3, #0]
 80450c8:	68fa      	ldr	r2, [r7, #12]
 80450ca:	b2d2      	uxtb	r2, r2
 80450cc:	4611      	mov	r1, r2
 80450ce:	4618      	mov	r0, r3
 80450d0:	f005 f9f1 	bl	804a4b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80450d4:	68fb      	ldr	r3, [r7, #12]
 80450d6:	015a      	lsls	r2, r3, #5
 80450d8:	693b      	ldr	r3, [r7, #16]
 80450da:	4413      	add	r3, r2
 80450dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450e0:	461a      	mov	r2, r3
 80450e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80450e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80450e8:	e24e      	b.n	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80450ea:	68fb      	ldr	r3, [r7, #12]
 80450ec:	015a      	lsls	r2, r3, #5
 80450ee:	693b      	ldr	r3, [r7, #16]
 80450f0:	4413      	add	r3, r2
 80450f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450f6:	689b      	ldr	r3, [r3, #8]
 80450f8:	f003 0301 	and.w	r3, r3, #1
 80450fc:	2b01      	cmp	r3, #1
 80450fe:	f040 80df 	bne.w	80452c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8045102:	687b      	ldr	r3, [r7, #4]
 8045104:	691b      	ldr	r3, [r3, #16]
 8045106:	2b00      	cmp	r3, #0
 8045108:	d019      	beq.n	804513e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 804510a:	687a      	ldr	r2, [r7, #4]
 804510c:	68fb      	ldr	r3, [r7, #12]
 804510e:	212c      	movs	r1, #44	; 0x2c
 8045110:	fb01 f303 	mul.w	r3, r1, r3
 8045114:	4413      	add	r3, r2
 8045116:	3348      	adds	r3, #72	; 0x48
 8045118:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 804511a:	68fb      	ldr	r3, [r7, #12]
 804511c:	0159      	lsls	r1, r3, #5
 804511e:	693b      	ldr	r3, [r7, #16]
 8045120:	440b      	add	r3, r1
 8045122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045126:	691b      	ldr	r3, [r3, #16]
 8045128:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 804512c:	1ad2      	subs	r2, r2, r3
 804512e:	6879      	ldr	r1, [r7, #4]
 8045130:	68fb      	ldr	r3, [r7, #12]
 8045132:	202c      	movs	r0, #44	; 0x2c
 8045134:	fb00 f303 	mul.w	r3, r0, r3
 8045138:	440b      	add	r3, r1
 804513a:	3350      	adds	r3, #80	; 0x50
 804513c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 804513e:	687a      	ldr	r2, [r7, #4]
 8045140:	68fb      	ldr	r3, [r7, #12]
 8045142:	212c      	movs	r1, #44	; 0x2c
 8045144:	fb01 f303 	mul.w	r3, r1, r3
 8045148:	4413      	add	r3, r2
 804514a:	3361      	adds	r3, #97	; 0x61
 804514c:	2201      	movs	r2, #1
 804514e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045150:	687a      	ldr	r2, [r7, #4]
 8045152:	68fb      	ldr	r3, [r7, #12]
 8045154:	212c      	movs	r1, #44	; 0x2c
 8045156:	fb01 f303 	mul.w	r3, r1, r3
 804515a:	4413      	add	r3, r2
 804515c:	335c      	adds	r3, #92	; 0x5c
 804515e:	2200      	movs	r2, #0
 8045160:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8045162:	68fb      	ldr	r3, [r7, #12]
 8045164:	015a      	lsls	r2, r3, #5
 8045166:	693b      	ldr	r3, [r7, #16]
 8045168:	4413      	add	r3, r2
 804516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804516e:	461a      	mov	r2, r3
 8045170:	2301      	movs	r3, #1
 8045172:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045174:	687a      	ldr	r2, [r7, #4]
 8045176:	68fb      	ldr	r3, [r7, #12]
 8045178:	212c      	movs	r1, #44	; 0x2c
 804517a:	fb01 f303 	mul.w	r3, r1, r3
 804517e:	4413      	add	r3, r2
 8045180:	333f      	adds	r3, #63	; 0x3f
 8045182:	781b      	ldrb	r3, [r3, #0]
 8045184:	2b00      	cmp	r3, #0
 8045186:	d009      	beq.n	804519c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8045188:	687a      	ldr	r2, [r7, #4]
 804518a:	68fb      	ldr	r3, [r7, #12]
 804518c:	212c      	movs	r1, #44	; 0x2c
 804518e:	fb01 f303 	mul.w	r3, r1, r3
 8045192:	4413      	add	r3, r2
 8045194:	333f      	adds	r3, #63	; 0x3f
 8045196:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045198:	2b02      	cmp	r3, #2
 804519a:	d111      	bne.n	80451c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804519c:	687b      	ldr	r3, [r7, #4]
 804519e:	681b      	ldr	r3, [r3, #0]
 80451a0:	68fa      	ldr	r2, [r7, #12]
 80451a2:	b2d2      	uxtb	r2, r2
 80451a4:	4611      	mov	r1, r2
 80451a6:	4618      	mov	r0, r3
 80451a8:	f005 f985 	bl	804a4b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80451ac:	68fb      	ldr	r3, [r7, #12]
 80451ae:	015a      	lsls	r2, r3, #5
 80451b0:	693b      	ldr	r3, [r7, #16]
 80451b2:	4413      	add	r3, r2
 80451b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451b8:	461a      	mov	r2, r3
 80451ba:	2310      	movs	r3, #16
 80451bc:	6093      	str	r3, [r2, #8]
 80451be:	e03a      	b.n	8045236 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80451c0:	687a      	ldr	r2, [r7, #4]
 80451c2:	68fb      	ldr	r3, [r7, #12]
 80451c4:	212c      	movs	r1, #44	; 0x2c
 80451c6:	fb01 f303 	mul.w	r3, r1, r3
 80451ca:	4413      	add	r3, r2
 80451cc:	333f      	adds	r3, #63	; 0x3f
 80451ce:	781b      	ldrb	r3, [r3, #0]
 80451d0:	2b03      	cmp	r3, #3
 80451d2:	d009      	beq.n	80451e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80451d4:	687a      	ldr	r2, [r7, #4]
 80451d6:	68fb      	ldr	r3, [r7, #12]
 80451d8:	212c      	movs	r1, #44	; 0x2c
 80451da:	fb01 f303 	mul.w	r3, r1, r3
 80451de:	4413      	add	r3, r2
 80451e0:	333f      	adds	r3, #63	; 0x3f
 80451e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80451e4:	2b01      	cmp	r3, #1
 80451e6:	d126      	bne.n	8045236 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80451e8:	68fb      	ldr	r3, [r7, #12]
 80451ea:	015a      	lsls	r2, r3, #5
 80451ec:	693b      	ldr	r3, [r7, #16]
 80451ee:	4413      	add	r3, r2
 80451f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451f4:	681b      	ldr	r3, [r3, #0]
 80451f6:	68fa      	ldr	r2, [r7, #12]
 80451f8:	0151      	lsls	r1, r2, #5
 80451fa:	693a      	ldr	r2, [r7, #16]
 80451fc:	440a      	add	r2, r1
 80451fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8045202:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8045206:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8045208:	687a      	ldr	r2, [r7, #4]
 804520a:	68fb      	ldr	r3, [r7, #12]
 804520c:	212c      	movs	r1, #44	; 0x2c
 804520e:	fb01 f303 	mul.w	r3, r1, r3
 8045212:	4413      	add	r3, r2
 8045214:	3360      	adds	r3, #96	; 0x60
 8045216:	2201      	movs	r2, #1
 8045218:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804521a:	68fb      	ldr	r3, [r7, #12]
 804521c:	b2d9      	uxtb	r1, r3
 804521e:	687a      	ldr	r2, [r7, #4]
 8045220:	68fb      	ldr	r3, [r7, #12]
 8045222:	202c      	movs	r0, #44	; 0x2c
 8045224:	fb00 f303 	mul.w	r3, r0, r3
 8045228:	4413      	add	r3, r2
 804522a:	3360      	adds	r3, #96	; 0x60
 804522c:	781b      	ldrb	r3, [r3, #0]
 804522e:	461a      	mov	r2, r3
 8045230:	6878      	ldr	r0, [r7, #4]
 8045232:	f007 fbdf 	bl	804c9f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8045236:	687b      	ldr	r3, [r7, #4]
 8045238:	691b      	ldr	r3, [r3, #16]
 804523a:	2b01      	cmp	r3, #1
 804523c:	d12b      	bne.n	8045296 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 804523e:	687a      	ldr	r2, [r7, #4]
 8045240:	68fb      	ldr	r3, [r7, #12]
 8045242:	212c      	movs	r1, #44	; 0x2c
 8045244:	fb01 f303 	mul.w	r3, r1, r3
 8045248:	4413      	add	r3, r2
 804524a:	3348      	adds	r3, #72	; 0x48
 804524c:	681b      	ldr	r3, [r3, #0]
 804524e:	6879      	ldr	r1, [r7, #4]
 8045250:	68fa      	ldr	r2, [r7, #12]
 8045252:	202c      	movs	r0, #44	; 0x2c
 8045254:	fb00 f202 	mul.w	r2, r0, r2
 8045258:	440a      	add	r2, r1
 804525a:	3240      	adds	r2, #64	; 0x40
 804525c:	8812      	ldrh	r2, [r2, #0]
 804525e:	fbb3 f3f2 	udiv	r3, r3, r2
 8045262:	f003 0301 	and.w	r3, r3, #1
 8045266:	2b00      	cmp	r3, #0
 8045268:	f000 818e 	beq.w	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 804526c:	687a      	ldr	r2, [r7, #4]
 804526e:	68fb      	ldr	r3, [r7, #12]
 8045270:	212c      	movs	r1, #44	; 0x2c
 8045272:	fb01 f303 	mul.w	r3, r1, r3
 8045276:	4413      	add	r3, r2
 8045278:	3354      	adds	r3, #84	; 0x54
 804527a:	781b      	ldrb	r3, [r3, #0]
 804527c:	f083 0301 	eor.w	r3, r3, #1
 8045280:	b2d8      	uxtb	r0, r3
 8045282:	687a      	ldr	r2, [r7, #4]
 8045284:	68fb      	ldr	r3, [r7, #12]
 8045286:	212c      	movs	r1, #44	; 0x2c
 8045288:	fb01 f303 	mul.w	r3, r1, r3
 804528c:	4413      	add	r3, r2
 804528e:	3354      	adds	r3, #84	; 0x54
 8045290:	4602      	mov	r2, r0
 8045292:	701a      	strb	r2, [r3, #0]
}
 8045294:	e178      	b.n	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8045296:	687a      	ldr	r2, [r7, #4]
 8045298:	68fb      	ldr	r3, [r7, #12]
 804529a:	212c      	movs	r1, #44	; 0x2c
 804529c:	fb01 f303 	mul.w	r3, r1, r3
 80452a0:	4413      	add	r3, r2
 80452a2:	3354      	adds	r3, #84	; 0x54
 80452a4:	781b      	ldrb	r3, [r3, #0]
 80452a6:	f083 0301 	eor.w	r3, r3, #1
 80452aa:	b2d8      	uxtb	r0, r3
 80452ac:	687a      	ldr	r2, [r7, #4]
 80452ae:	68fb      	ldr	r3, [r7, #12]
 80452b0:	212c      	movs	r1, #44	; 0x2c
 80452b2:	fb01 f303 	mul.w	r3, r1, r3
 80452b6:	4413      	add	r3, r2
 80452b8:	3354      	adds	r3, #84	; 0x54
 80452ba:	4602      	mov	r2, r0
 80452bc:	701a      	strb	r2, [r3, #0]
}
 80452be:	e163      	b.n	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80452c0:	68fb      	ldr	r3, [r7, #12]
 80452c2:	015a      	lsls	r2, r3, #5
 80452c4:	693b      	ldr	r3, [r7, #16]
 80452c6:	4413      	add	r3, r2
 80452c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80452cc:	689b      	ldr	r3, [r3, #8]
 80452ce:	f003 0302 	and.w	r3, r3, #2
 80452d2:	2b02      	cmp	r3, #2
 80452d4:	f040 80f6 	bne.w	80454c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80452d8:	687a      	ldr	r2, [r7, #4]
 80452da:	68fb      	ldr	r3, [r7, #12]
 80452dc:	212c      	movs	r1, #44	; 0x2c
 80452de:	fb01 f303 	mul.w	r3, r1, r3
 80452e2:	4413      	add	r3, r2
 80452e4:	3361      	adds	r3, #97	; 0x61
 80452e6:	781b      	ldrb	r3, [r3, #0]
 80452e8:	2b01      	cmp	r3, #1
 80452ea:	d109      	bne.n	8045300 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80452ec:	687a      	ldr	r2, [r7, #4]
 80452ee:	68fb      	ldr	r3, [r7, #12]
 80452f0:	212c      	movs	r1, #44	; 0x2c
 80452f2:	fb01 f303 	mul.w	r3, r1, r3
 80452f6:	4413      	add	r3, r2
 80452f8:	3360      	adds	r3, #96	; 0x60
 80452fa:	2201      	movs	r2, #1
 80452fc:	701a      	strb	r2, [r3, #0]
 80452fe:	e0c9      	b.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045300:	687a      	ldr	r2, [r7, #4]
 8045302:	68fb      	ldr	r3, [r7, #12]
 8045304:	212c      	movs	r1, #44	; 0x2c
 8045306:	fb01 f303 	mul.w	r3, r1, r3
 804530a:	4413      	add	r3, r2
 804530c:	3361      	adds	r3, #97	; 0x61
 804530e:	781b      	ldrb	r3, [r3, #0]
 8045310:	2b05      	cmp	r3, #5
 8045312:	d109      	bne.n	8045328 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8045314:	687a      	ldr	r2, [r7, #4]
 8045316:	68fb      	ldr	r3, [r7, #12]
 8045318:	212c      	movs	r1, #44	; 0x2c
 804531a:	fb01 f303 	mul.w	r3, r1, r3
 804531e:	4413      	add	r3, r2
 8045320:	3360      	adds	r3, #96	; 0x60
 8045322:	2205      	movs	r2, #5
 8045324:	701a      	strb	r2, [r3, #0]
 8045326:	e0b5      	b.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045328:	687a      	ldr	r2, [r7, #4]
 804532a:	68fb      	ldr	r3, [r7, #12]
 804532c:	212c      	movs	r1, #44	; 0x2c
 804532e:	fb01 f303 	mul.w	r3, r1, r3
 8045332:	4413      	add	r3, r2
 8045334:	3361      	adds	r3, #97	; 0x61
 8045336:	781b      	ldrb	r3, [r3, #0]
 8045338:	2b06      	cmp	r3, #6
 804533a:	d009      	beq.n	8045350 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 804533c:	687a      	ldr	r2, [r7, #4]
 804533e:	68fb      	ldr	r3, [r7, #12]
 8045340:	212c      	movs	r1, #44	; 0x2c
 8045342:	fb01 f303 	mul.w	r3, r1, r3
 8045346:	4413      	add	r3, r2
 8045348:	3361      	adds	r3, #97	; 0x61
 804534a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 804534c:	2b08      	cmp	r3, #8
 804534e:	d150      	bne.n	80453f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8045350:	687a      	ldr	r2, [r7, #4]
 8045352:	68fb      	ldr	r3, [r7, #12]
 8045354:	212c      	movs	r1, #44	; 0x2c
 8045356:	fb01 f303 	mul.w	r3, r1, r3
 804535a:	4413      	add	r3, r2
 804535c:	335c      	adds	r3, #92	; 0x5c
 804535e:	681b      	ldr	r3, [r3, #0]
 8045360:	1c5a      	adds	r2, r3, #1
 8045362:	6879      	ldr	r1, [r7, #4]
 8045364:	68fb      	ldr	r3, [r7, #12]
 8045366:	202c      	movs	r0, #44	; 0x2c
 8045368:	fb00 f303 	mul.w	r3, r0, r3
 804536c:	440b      	add	r3, r1
 804536e:	335c      	adds	r3, #92	; 0x5c
 8045370:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045372:	687a      	ldr	r2, [r7, #4]
 8045374:	68fb      	ldr	r3, [r7, #12]
 8045376:	212c      	movs	r1, #44	; 0x2c
 8045378:	fb01 f303 	mul.w	r3, r1, r3
 804537c:	4413      	add	r3, r2
 804537e:	335c      	adds	r3, #92	; 0x5c
 8045380:	681b      	ldr	r3, [r3, #0]
 8045382:	2b02      	cmp	r3, #2
 8045384:	d912      	bls.n	80453ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045386:	687a      	ldr	r2, [r7, #4]
 8045388:	68fb      	ldr	r3, [r7, #12]
 804538a:	212c      	movs	r1, #44	; 0x2c
 804538c:	fb01 f303 	mul.w	r3, r1, r3
 8045390:	4413      	add	r3, r2
 8045392:	335c      	adds	r3, #92	; 0x5c
 8045394:	2200      	movs	r2, #0
 8045396:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045398:	687a      	ldr	r2, [r7, #4]
 804539a:	68fb      	ldr	r3, [r7, #12]
 804539c:	212c      	movs	r1, #44	; 0x2c
 804539e:	fb01 f303 	mul.w	r3, r1, r3
 80453a2:	4413      	add	r3, r2
 80453a4:	3360      	adds	r3, #96	; 0x60
 80453a6:	2204      	movs	r2, #4
 80453a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80453aa:	e073      	b.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80453ac:	687a      	ldr	r2, [r7, #4]
 80453ae:	68fb      	ldr	r3, [r7, #12]
 80453b0:	212c      	movs	r1, #44	; 0x2c
 80453b2:	fb01 f303 	mul.w	r3, r1, r3
 80453b6:	4413      	add	r3, r2
 80453b8:	3360      	adds	r3, #96	; 0x60
 80453ba:	2202      	movs	r2, #2
 80453bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80453be:	68fb      	ldr	r3, [r7, #12]
 80453c0:	015a      	lsls	r2, r3, #5
 80453c2:	693b      	ldr	r3, [r7, #16]
 80453c4:	4413      	add	r3, r2
 80453c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453ca:	681b      	ldr	r3, [r3, #0]
 80453cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80453ce:	68bb      	ldr	r3, [r7, #8]
 80453d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80453d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80453d6:	68bb      	ldr	r3, [r7, #8]
 80453d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80453dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80453de:	68fb      	ldr	r3, [r7, #12]
 80453e0:	015a      	lsls	r2, r3, #5
 80453e2:	693b      	ldr	r3, [r7, #16]
 80453e4:	4413      	add	r3, r2
 80453e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453ea:	461a      	mov	r2, r3
 80453ec:	68bb      	ldr	r3, [r7, #8]
 80453ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80453f0:	e050      	b.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80453f2:	687a      	ldr	r2, [r7, #4]
 80453f4:	68fb      	ldr	r3, [r7, #12]
 80453f6:	212c      	movs	r1, #44	; 0x2c
 80453f8:	fb01 f303 	mul.w	r3, r1, r3
 80453fc:	4413      	add	r3, r2
 80453fe:	3361      	adds	r3, #97	; 0x61
 8045400:	781b      	ldrb	r3, [r3, #0]
 8045402:	2b03      	cmp	r3, #3
 8045404:	d122      	bne.n	804544c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8045406:	687a      	ldr	r2, [r7, #4]
 8045408:	68fb      	ldr	r3, [r7, #12]
 804540a:	212c      	movs	r1, #44	; 0x2c
 804540c:	fb01 f303 	mul.w	r3, r1, r3
 8045410:	4413      	add	r3, r2
 8045412:	3360      	adds	r3, #96	; 0x60
 8045414:	2202      	movs	r2, #2
 8045416:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045418:	68fb      	ldr	r3, [r7, #12]
 804541a:	015a      	lsls	r2, r3, #5
 804541c:	693b      	ldr	r3, [r7, #16]
 804541e:	4413      	add	r3, r2
 8045420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045424:	681b      	ldr	r3, [r3, #0]
 8045426:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045428:	68bb      	ldr	r3, [r7, #8]
 804542a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804542e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045430:	68bb      	ldr	r3, [r7, #8]
 8045432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045436:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045438:	68fb      	ldr	r3, [r7, #12]
 804543a:	015a      	lsls	r2, r3, #5
 804543c:	693b      	ldr	r3, [r7, #16]
 804543e:	4413      	add	r3, r2
 8045440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045444:	461a      	mov	r2, r3
 8045446:	68bb      	ldr	r3, [r7, #8]
 8045448:	6013      	str	r3, [r2, #0]
 804544a:	e023      	b.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 804544c:	687a      	ldr	r2, [r7, #4]
 804544e:	68fb      	ldr	r3, [r7, #12]
 8045450:	212c      	movs	r1, #44	; 0x2c
 8045452:	fb01 f303 	mul.w	r3, r1, r3
 8045456:	4413      	add	r3, r2
 8045458:	3361      	adds	r3, #97	; 0x61
 804545a:	781b      	ldrb	r3, [r3, #0]
 804545c:	2b07      	cmp	r3, #7
 804545e:	d119      	bne.n	8045494 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8045460:	687a      	ldr	r2, [r7, #4]
 8045462:	68fb      	ldr	r3, [r7, #12]
 8045464:	212c      	movs	r1, #44	; 0x2c
 8045466:	fb01 f303 	mul.w	r3, r1, r3
 804546a:	4413      	add	r3, r2
 804546c:	335c      	adds	r3, #92	; 0x5c
 804546e:	681b      	ldr	r3, [r3, #0]
 8045470:	1c5a      	adds	r2, r3, #1
 8045472:	6879      	ldr	r1, [r7, #4]
 8045474:	68fb      	ldr	r3, [r7, #12]
 8045476:	202c      	movs	r0, #44	; 0x2c
 8045478:	fb00 f303 	mul.w	r3, r0, r3
 804547c:	440b      	add	r3, r1
 804547e:	335c      	adds	r3, #92	; 0x5c
 8045480:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045482:	687a      	ldr	r2, [r7, #4]
 8045484:	68fb      	ldr	r3, [r7, #12]
 8045486:	212c      	movs	r1, #44	; 0x2c
 8045488:	fb01 f303 	mul.w	r3, r1, r3
 804548c:	4413      	add	r3, r2
 804548e:	3360      	adds	r3, #96	; 0x60
 8045490:	2204      	movs	r2, #4
 8045492:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045494:	68fb      	ldr	r3, [r7, #12]
 8045496:	015a      	lsls	r2, r3, #5
 8045498:	693b      	ldr	r3, [r7, #16]
 804549a:	4413      	add	r3, r2
 804549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454a0:	461a      	mov	r2, r3
 80454a2:	2302      	movs	r3, #2
 80454a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80454a6:	68fb      	ldr	r3, [r7, #12]
 80454a8:	b2d9      	uxtb	r1, r3
 80454aa:	687a      	ldr	r2, [r7, #4]
 80454ac:	68fb      	ldr	r3, [r7, #12]
 80454ae:	202c      	movs	r0, #44	; 0x2c
 80454b0:	fb00 f303 	mul.w	r3, r0, r3
 80454b4:	4413      	add	r3, r2
 80454b6:	3360      	adds	r3, #96	; 0x60
 80454b8:	781b      	ldrb	r3, [r3, #0]
 80454ba:	461a      	mov	r2, r3
 80454bc:	6878      	ldr	r0, [r7, #4]
 80454be:	f007 fa99 	bl	804c9f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80454c2:	e061      	b.n	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80454c4:	68fb      	ldr	r3, [r7, #12]
 80454c6:	015a      	lsls	r2, r3, #5
 80454c8:	693b      	ldr	r3, [r7, #16]
 80454ca:	4413      	add	r3, r2
 80454cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454d0:	689b      	ldr	r3, [r3, #8]
 80454d2:	f003 0310 	and.w	r3, r3, #16
 80454d6:	2b10      	cmp	r3, #16
 80454d8:	d156      	bne.n	8045588 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80454da:	687a      	ldr	r2, [r7, #4]
 80454dc:	68fb      	ldr	r3, [r7, #12]
 80454de:	212c      	movs	r1, #44	; 0x2c
 80454e0:	fb01 f303 	mul.w	r3, r1, r3
 80454e4:	4413      	add	r3, r2
 80454e6:	333f      	adds	r3, #63	; 0x3f
 80454e8:	781b      	ldrb	r3, [r3, #0]
 80454ea:	2b03      	cmp	r3, #3
 80454ec:	d111      	bne.n	8045512 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80454ee:	687a      	ldr	r2, [r7, #4]
 80454f0:	68fb      	ldr	r3, [r7, #12]
 80454f2:	212c      	movs	r1, #44	; 0x2c
 80454f4:	fb01 f303 	mul.w	r3, r1, r3
 80454f8:	4413      	add	r3, r2
 80454fa:	335c      	adds	r3, #92	; 0x5c
 80454fc:	2200      	movs	r2, #0
 80454fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045500:	687b      	ldr	r3, [r7, #4]
 8045502:	681b      	ldr	r3, [r3, #0]
 8045504:	68fa      	ldr	r2, [r7, #12]
 8045506:	b2d2      	uxtb	r2, r2
 8045508:	4611      	mov	r1, r2
 804550a:	4618      	mov	r0, r3
 804550c:	f004 ffd3 	bl	804a4b6 <USB_HC_Halt>
 8045510:	e031      	b.n	8045576 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045512:	687a      	ldr	r2, [r7, #4]
 8045514:	68fb      	ldr	r3, [r7, #12]
 8045516:	212c      	movs	r1, #44	; 0x2c
 8045518:	fb01 f303 	mul.w	r3, r1, r3
 804551c:	4413      	add	r3, r2
 804551e:	333f      	adds	r3, #63	; 0x3f
 8045520:	781b      	ldrb	r3, [r3, #0]
 8045522:	2b00      	cmp	r3, #0
 8045524:	d009      	beq.n	804553a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8045526:	687a      	ldr	r2, [r7, #4]
 8045528:	68fb      	ldr	r3, [r7, #12]
 804552a:	212c      	movs	r1, #44	; 0x2c
 804552c:	fb01 f303 	mul.w	r3, r1, r3
 8045530:	4413      	add	r3, r2
 8045532:	333f      	adds	r3, #63	; 0x3f
 8045534:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045536:	2b02      	cmp	r3, #2
 8045538:	d11d      	bne.n	8045576 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 804553a:	687a      	ldr	r2, [r7, #4]
 804553c:	68fb      	ldr	r3, [r7, #12]
 804553e:	212c      	movs	r1, #44	; 0x2c
 8045540:	fb01 f303 	mul.w	r3, r1, r3
 8045544:	4413      	add	r3, r2
 8045546:	335c      	adds	r3, #92	; 0x5c
 8045548:	2200      	movs	r2, #0
 804554a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 804554c:	687b      	ldr	r3, [r7, #4]
 804554e:	691b      	ldr	r3, [r3, #16]
 8045550:	2b00      	cmp	r3, #0
 8045552:	d110      	bne.n	8045576 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8045554:	687a      	ldr	r2, [r7, #4]
 8045556:	68fb      	ldr	r3, [r7, #12]
 8045558:	212c      	movs	r1, #44	; 0x2c
 804555a:	fb01 f303 	mul.w	r3, r1, r3
 804555e:	4413      	add	r3, r2
 8045560:	3361      	adds	r3, #97	; 0x61
 8045562:	2203      	movs	r2, #3
 8045564:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045566:	687b      	ldr	r3, [r7, #4]
 8045568:	681b      	ldr	r3, [r3, #0]
 804556a:	68fa      	ldr	r2, [r7, #12]
 804556c:	b2d2      	uxtb	r2, r2
 804556e:	4611      	mov	r1, r2
 8045570:	4618      	mov	r0, r3
 8045572:	f004 ffa0 	bl	804a4b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045576:	68fb      	ldr	r3, [r7, #12]
 8045578:	015a      	lsls	r2, r3, #5
 804557a:	693b      	ldr	r3, [r7, #16]
 804557c:	4413      	add	r3, r2
 804557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045582:	461a      	mov	r2, r3
 8045584:	2310      	movs	r3, #16
 8045586:	6093      	str	r3, [r2, #8]
}
 8045588:	bf00      	nop
 804558a:	3718      	adds	r7, #24
 804558c:	46bd      	mov	sp, r7
 804558e:	bd80      	pop	{r7, pc}

08045590 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045590:	b580      	push	{r7, lr}
 8045592:	b088      	sub	sp, #32
 8045594:	af00      	add	r7, sp, #0
 8045596:	6078      	str	r0, [r7, #4]
 8045598:	460b      	mov	r3, r1
 804559a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804559c:	687b      	ldr	r3, [r7, #4]
 804559e:	681b      	ldr	r3, [r3, #0]
 80455a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80455a2:	69fb      	ldr	r3, [r7, #28]
 80455a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80455a6:	78fb      	ldrb	r3, [r7, #3]
 80455a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80455aa:	697b      	ldr	r3, [r7, #20]
 80455ac:	015a      	lsls	r2, r3, #5
 80455ae:	69bb      	ldr	r3, [r7, #24]
 80455b0:	4413      	add	r3, r2
 80455b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455b6:	689b      	ldr	r3, [r3, #8]
 80455b8:	f003 0304 	and.w	r3, r3, #4
 80455bc:	2b04      	cmp	r3, #4
 80455be:	d11a      	bne.n	80455f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80455c0:	697b      	ldr	r3, [r7, #20]
 80455c2:	015a      	lsls	r2, r3, #5
 80455c4:	69bb      	ldr	r3, [r7, #24]
 80455c6:	4413      	add	r3, r2
 80455c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455cc:	461a      	mov	r2, r3
 80455ce:	2304      	movs	r3, #4
 80455d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80455d2:	687a      	ldr	r2, [r7, #4]
 80455d4:	697b      	ldr	r3, [r7, #20]
 80455d6:	212c      	movs	r1, #44	; 0x2c
 80455d8:	fb01 f303 	mul.w	r3, r1, r3
 80455dc:	4413      	add	r3, r2
 80455de:	3361      	adds	r3, #97	; 0x61
 80455e0:	2206      	movs	r2, #6
 80455e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80455e4:	687b      	ldr	r3, [r7, #4]
 80455e6:	681b      	ldr	r3, [r3, #0]
 80455e8:	697a      	ldr	r2, [r7, #20]
 80455ea:	b2d2      	uxtb	r2, r2
 80455ec:	4611      	mov	r1, r2
 80455ee:	4618      	mov	r0, r3
 80455f0:	f004 ff61 	bl	804a4b6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80455f4:	e331      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80455f6:	697b      	ldr	r3, [r7, #20]
 80455f8:	015a      	lsls	r2, r3, #5
 80455fa:	69bb      	ldr	r3, [r7, #24]
 80455fc:	4413      	add	r3, r2
 80455fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045602:	689b      	ldr	r3, [r3, #8]
 8045604:	f003 0320 	and.w	r3, r3, #32
 8045608:	2b20      	cmp	r3, #32
 804560a:	d12e      	bne.n	804566a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 804560c:	697b      	ldr	r3, [r7, #20]
 804560e:	015a      	lsls	r2, r3, #5
 8045610:	69bb      	ldr	r3, [r7, #24]
 8045612:	4413      	add	r3, r2
 8045614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045618:	461a      	mov	r2, r3
 804561a:	2320      	movs	r3, #32
 804561c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 804561e:	687a      	ldr	r2, [r7, #4]
 8045620:	697b      	ldr	r3, [r7, #20]
 8045622:	212c      	movs	r1, #44	; 0x2c
 8045624:	fb01 f303 	mul.w	r3, r1, r3
 8045628:	4413      	add	r3, r2
 804562a:	333d      	adds	r3, #61	; 0x3d
 804562c:	781b      	ldrb	r3, [r3, #0]
 804562e:	2b01      	cmp	r3, #1
 8045630:	f040 8313 	bne.w	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8045634:	687a      	ldr	r2, [r7, #4]
 8045636:	697b      	ldr	r3, [r7, #20]
 8045638:	212c      	movs	r1, #44	; 0x2c
 804563a:	fb01 f303 	mul.w	r3, r1, r3
 804563e:	4413      	add	r3, r2
 8045640:	333d      	adds	r3, #61	; 0x3d
 8045642:	2200      	movs	r2, #0
 8045644:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045646:	687a      	ldr	r2, [r7, #4]
 8045648:	697b      	ldr	r3, [r7, #20]
 804564a:	212c      	movs	r1, #44	; 0x2c
 804564c:	fb01 f303 	mul.w	r3, r1, r3
 8045650:	4413      	add	r3, r2
 8045652:	3360      	adds	r3, #96	; 0x60
 8045654:	2202      	movs	r2, #2
 8045656:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045658:	687b      	ldr	r3, [r7, #4]
 804565a:	681b      	ldr	r3, [r3, #0]
 804565c:	697a      	ldr	r2, [r7, #20]
 804565e:	b2d2      	uxtb	r2, r2
 8045660:	4611      	mov	r1, r2
 8045662:	4618      	mov	r0, r3
 8045664:	f004 ff27 	bl	804a4b6 <USB_HC_Halt>
}
 8045668:	e2f7      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 804566a:	697b      	ldr	r3, [r7, #20]
 804566c:	015a      	lsls	r2, r3, #5
 804566e:	69bb      	ldr	r3, [r7, #24]
 8045670:	4413      	add	r3, r2
 8045672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045676:	689b      	ldr	r3, [r3, #8]
 8045678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045680:	d112      	bne.n	80456a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8045682:	697b      	ldr	r3, [r7, #20]
 8045684:	015a      	lsls	r2, r3, #5
 8045686:	69bb      	ldr	r3, [r7, #24]
 8045688:	4413      	add	r3, r2
 804568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804568e:	461a      	mov	r2, r3
 8045690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045694:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045696:	687b      	ldr	r3, [r7, #4]
 8045698:	681b      	ldr	r3, [r3, #0]
 804569a:	697a      	ldr	r2, [r7, #20]
 804569c:	b2d2      	uxtb	r2, r2
 804569e:	4611      	mov	r1, r2
 80456a0:	4618      	mov	r0, r3
 80456a2:	f004 ff08 	bl	804a4b6 <USB_HC_Halt>
}
 80456a6:	e2d8      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80456a8:	697b      	ldr	r3, [r7, #20]
 80456aa:	015a      	lsls	r2, r3, #5
 80456ac:	69bb      	ldr	r3, [r7, #24]
 80456ae:	4413      	add	r3, r2
 80456b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456b4:	689b      	ldr	r3, [r3, #8]
 80456b6:	f003 0301 	and.w	r3, r3, #1
 80456ba:	2b01      	cmp	r3, #1
 80456bc:	d140      	bne.n	8045740 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80456be:	687a      	ldr	r2, [r7, #4]
 80456c0:	697b      	ldr	r3, [r7, #20]
 80456c2:	212c      	movs	r1, #44	; 0x2c
 80456c4:	fb01 f303 	mul.w	r3, r1, r3
 80456c8:	4413      	add	r3, r2
 80456ca:	335c      	adds	r3, #92	; 0x5c
 80456cc:	2200      	movs	r2, #0
 80456ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80456d0:	697b      	ldr	r3, [r7, #20]
 80456d2:	015a      	lsls	r2, r3, #5
 80456d4:	69bb      	ldr	r3, [r7, #24]
 80456d6:	4413      	add	r3, r2
 80456d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456dc:	689b      	ldr	r3, [r3, #8]
 80456de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80456e2:	2b40      	cmp	r3, #64	; 0x40
 80456e4:	d111      	bne.n	804570a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80456e6:	687a      	ldr	r2, [r7, #4]
 80456e8:	697b      	ldr	r3, [r7, #20]
 80456ea:	212c      	movs	r1, #44	; 0x2c
 80456ec:	fb01 f303 	mul.w	r3, r1, r3
 80456f0:	4413      	add	r3, r2
 80456f2:	333d      	adds	r3, #61	; 0x3d
 80456f4:	2201      	movs	r2, #1
 80456f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80456f8:	697b      	ldr	r3, [r7, #20]
 80456fa:	015a      	lsls	r2, r3, #5
 80456fc:	69bb      	ldr	r3, [r7, #24]
 80456fe:	4413      	add	r3, r2
 8045700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045704:	461a      	mov	r2, r3
 8045706:	2340      	movs	r3, #64	; 0x40
 8045708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 804570a:	697b      	ldr	r3, [r7, #20]
 804570c:	015a      	lsls	r2, r3, #5
 804570e:	69bb      	ldr	r3, [r7, #24]
 8045710:	4413      	add	r3, r2
 8045712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045716:	461a      	mov	r2, r3
 8045718:	2301      	movs	r3, #1
 804571a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 804571c:	687a      	ldr	r2, [r7, #4]
 804571e:	697b      	ldr	r3, [r7, #20]
 8045720:	212c      	movs	r1, #44	; 0x2c
 8045722:	fb01 f303 	mul.w	r3, r1, r3
 8045726:	4413      	add	r3, r2
 8045728:	3361      	adds	r3, #97	; 0x61
 804572a:	2201      	movs	r2, #1
 804572c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804572e:	687b      	ldr	r3, [r7, #4]
 8045730:	681b      	ldr	r3, [r3, #0]
 8045732:	697a      	ldr	r2, [r7, #20]
 8045734:	b2d2      	uxtb	r2, r2
 8045736:	4611      	mov	r1, r2
 8045738:	4618      	mov	r0, r3
 804573a:	f004 febc 	bl	804a4b6 <USB_HC_Halt>
}
 804573e:	e28c      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045740:	697b      	ldr	r3, [r7, #20]
 8045742:	015a      	lsls	r2, r3, #5
 8045744:	69bb      	ldr	r3, [r7, #24]
 8045746:	4413      	add	r3, r2
 8045748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804574c:	689b      	ldr	r3, [r3, #8]
 804574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045752:	2b40      	cmp	r3, #64	; 0x40
 8045754:	d12c      	bne.n	80457b0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8045756:	687a      	ldr	r2, [r7, #4]
 8045758:	697b      	ldr	r3, [r7, #20]
 804575a:	212c      	movs	r1, #44	; 0x2c
 804575c:	fb01 f303 	mul.w	r3, r1, r3
 8045760:	4413      	add	r3, r2
 8045762:	3361      	adds	r3, #97	; 0x61
 8045764:	2204      	movs	r2, #4
 8045766:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8045768:	687a      	ldr	r2, [r7, #4]
 804576a:	697b      	ldr	r3, [r7, #20]
 804576c:	212c      	movs	r1, #44	; 0x2c
 804576e:	fb01 f303 	mul.w	r3, r1, r3
 8045772:	4413      	add	r3, r2
 8045774:	333d      	adds	r3, #61	; 0x3d
 8045776:	2201      	movs	r2, #1
 8045778:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 804577a:	687a      	ldr	r2, [r7, #4]
 804577c:	697b      	ldr	r3, [r7, #20]
 804577e:	212c      	movs	r1, #44	; 0x2c
 8045780:	fb01 f303 	mul.w	r3, r1, r3
 8045784:	4413      	add	r3, r2
 8045786:	335c      	adds	r3, #92	; 0x5c
 8045788:	2200      	movs	r2, #0
 804578a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804578c:	687b      	ldr	r3, [r7, #4]
 804578e:	681b      	ldr	r3, [r3, #0]
 8045790:	697a      	ldr	r2, [r7, #20]
 8045792:	b2d2      	uxtb	r2, r2
 8045794:	4611      	mov	r1, r2
 8045796:	4618      	mov	r0, r3
 8045798:	f004 fe8d 	bl	804a4b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 804579c:	697b      	ldr	r3, [r7, #20]
 804579e:	015a      	lsls	r2, r3, #5
 80457a0:	69bb      	ldr	r3, [r7, #24]
 80457a2:	4413      	add	r3, r2
 80457a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457a8:	461a      	mov	r2, r3
 80457aa:	2340      	movs	r3, #64	; 0x40
 80457ac:	6093      	str	r3, [r2, #8]
}
 80457ae:	e254      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80457b0:	697b      	ldr	r3, [r7, #20]
 80457b2:	015a      	lsls	r2, r3, #5
 80457b4:	69bb      	ldr	r3, [r7, #24]
 80457b6:	4413      	add	r3, r2
 80457b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457bc:	689b      	ldr	r3, [r3, #8]
 80457be:	f003 0308 	and.w	r3, r3, #8
 80457c2:	2b08      	cmp	r3, #8
 80457c4:	d11a      	bne.n	80457fc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80457c6:	697b      	ldr	r3, [r7, #20]
 80457c8:	015a      	lsls	r2, r3, #5
 80457ca:	69bb      	ldr	r3, [r7, #24]
 80457cc:	4413      	add	r3, r2
 80457ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80457d2:	461a      	mov	r2, r3
 80457d4:	2308      	movs	r3, #8
 80457d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80457d8:	687a      	ldr	r2, [r7, #4]
 80457da:	697b      	ldr	r3, [r7, #20]
 80457dc:	212c      	movs	r1, #44	; 0x2c
 80457de:	fb01 f303 	mul.w	r3, r1, r3
 80457e2:	4413      	add	r3, r2
 80457e4:	3361      	adds	r3, #97	; 0x61
 80457e6:	2205      	movs	r2, #5
 80457e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80457ea:	687b      	ldr	r3, [r7, #4]
 80457ec:	681b      	ldr	r3, [r3, #0]
 80457ee:	697a      	ldr	r2, [r7, #20]
 80457f0:	b2d2      	uxtb	r2, r2
 80457f2:	4611      	mov	r1, r2
 80457f4:	4618      	mov	r0, r3
 80457f6:	f004 fe5e 	bl	804a4b6 <USB_HC_Halt>
}
 80457fa:	e22e      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80457fc:	697b      	ldr	r3, [r7, #20]
 80457fe:	015a      	lsls	r2, r3, #5
 8045800:	69bb      	ldr	r3, [r7, #24]
 8045802:	4413      	add	r3, r2
 8045804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045808:	689b      	ldr	r3, [r3, #8]
 804580a:	f003 0310 	and.w	r3, r3, #16
 804580e:	2b10      	cmp	r3, #16
 8045810:	d140      	bne.n	8045894 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045812:	687a      	ldr	r2, [r7, #4]
 8045814:	697b      	ldr	r3, [r7, #20]
 8045816:	212c      	movs	r1, #44	; 0x2c
 8045818:	fb01 f303 	mul.w	r3, r1, r3
 804581c:	4413      	add	r3, r2
 804581e:	335c      	adds	r3, #92	; 0x5c
 8045820:	2200      	movs	r2, #0
 8045822:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8045824:	687a      	ldr	r2, [r7, #4]
 8045826:	697b      	ldr	r3, [r7, #20]
 8045828:	212c      	movs	r1, #44	; 0x2c
 804582a:	fb01 f303 	mul.w	r3, r1, r3
 804582e:	4413      	add	r3, r2
 8045830:	3361      	adds	r3, #97	; 0x61
 8045832:	2203      	movs	r2, #3
 8045834:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8045836:	687a      	ldr	r2, [r7, #4]
 8045838:	697b      	ldr	r3, [r7, #20]
 804583a:	212c      	movs	r1, #44	; 0x2c
 804583c:	fb01 f303 	mul.w	r3, r1, r3
 8045840:	4413      	add	r3, r2
 8045842:	333d      	adds	r3, #61	; 0x3d
 8045844:	781b      	ldrb	r3, [r3, #0]
 8045846:	2b00      	cmp	r3, #0
 8045848:	d112      	bne.n	8045870 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 804584a:	687a      	ldr	r2, [r7, #4]
 804584c:	697b      	ldr	r3, [r7, #20]
 804584e:	212c      	movs	r1, #44	; 0x2c
 8045850:	fb01 f303 	mul.w	r3, r1, r3
 8045854:	4413      	add	r3, r2
 8045856:	333c      	adds	r3, #60	; 0x3c
 8045858:	781b      	ldrb	r3, [r3, #0]
 804585a:	2b00      	cmp	r3, #0
 804585c:	d108      	bne.n	8045870 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 804585e:	687a      	ldr	r2, [r7, #4]
 8045860:	697b      	ldr	r3, [r7, #20]
 8045862:	212c      	movs	r1, #44	; 0x2c
 8045864:	fb01 f303 	mul.w	r3, r1, r3
 8045868:	4413      	add	r3, r2
 804586a:	333d      	adds	r3, #61	; 0x3d
 804586c:	2201      	movs	r2, #1
 804586e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045870:	687b      	ldr	r3, [r7, #4]
 8045872:	681b      	ldr	r3, [r3, #0]
 8045874:	697a      	ldr	r2, [r7, #20]
 8045876:	b2d2      	uxtb	r2, r2
 8045878:	4611      	mov	r1, r2
 804587a:	4618      	mov	r0, r3
 804587c:	f004 fe1b 	bl	804a4b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045880:	697b      	ldr	r3, [r7, #20]
 8045882:	015a      	lsls	r2, r3, #5
 8045884:	69bb      	ldr	r3, [r7, #24]
 8045886:	4413      	add	r3, r2
 8045888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804588c:	461a      	mov	r2, r3
 804588e:	2310      	movs	r3, #16
 8045890:	6093      	str	r3, [r2, #8]
}
 8045892:	e1e2      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045894:	697b      	ldr	r3, [r7, #20]
 8045896:	015a      	lsls	r2, r3, #5
 8045898:	69bb      	ldr	r3, [r7, #24]
 804589a:	4413      	add	r3, r2
 804589c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80458a0:	689b      	ldr	r3, [r3, #8]
 80458a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80458a6:	2b80      	cmp	r3, #128	; 0x80
 80458a8:	d164      	bne.n	8045974 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80458aa:	687b      	ldr	r3, [r7, #4]
 80458ac:	691b      	ldr	r3, [r3, #16]
 80458ae:	2b00      	cmp	r3, #0
 80458b0:	d111      	bne.n	80458d6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80458b2:	687a      	ldr	r2, [r7, #4]
 80458b4:	697b      	ldr	r3, [r7, #20]
 80458b6:	212c      	movs	r1, #44	; 0x2c
 80458b8:	fb01 f303 	mul.w	r3, r1, r3
 80458bc:	4413      	add	r3, r2
 80458be:	3361      	adds	r3, #97	; 0x61
 80458c0:	2206      	movs	r2, #6
 80458c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80458c4:	687b      	ldr	r3, [r7, #4]
 80458c6:	681b      	ldr	r3, [r3, #0]
 80458c8:	697a      	ldr	r2, [r7, #20]
 80458ca:	b2d2      	uxtb	r2, r2
 80458cc:	4611      	mov	r1, r2
 80458ce:	4618      	mov	r0, r3
 80458d0:	f004 fdf1 	bl	804a4b6 <USB_HC_Halt>
 80458d4:	e044      	b.n	8045960 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80458d6:	687a      	ldr	r2, [r7, #4]
 80458d8:	697b      	ldr	r3, [r7, #20]
 80458da:	212c      	movs	r1, #44	; 0x2c
 80458dc:	fb01 f303 	mul.w	r3, r1, r3
 80458e0:	4413      	add	r3, r2
 80458e2:	335c      	adds	r3, #92	; 0x5c
 80458e4:	681b      	ldr	r3, [r3, #0]
 80458e6:	1c5a      	adds	r2, r3, #1
 80458e8:	6879      	ldr	r1, [r7, #4]
 80458ea:	697b      	ldr	r3, [r7, #20]
 80458ec:	202c      	movs	r0, #44	; 0x2c
 80458ee:	fb00 f303 	mul.w	r3, r0, r3
 80458f2:	440b      	add	r3, r1
 80458f4:	335c      	adds	r3, #92	; 0x5c
 80458f6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80458f8:	687a      	ldr	r2, [r7, #4]
 80458fa:	697b      	ldr	r3, [r7, #20]
 80458fc:	212c      	movs	r1, #44	; 0x2c
 80458fe:	fb01 f303 	mul.w	r3, r1, r3
 8045902:	4413      	add	r3, r2
 8045904:	335c      	adds	r3, #92	; 0x5c
 8045906:	681b      	ldr	r3, [r3, #0]
 8045908:	2b02      	cmp	r3, #2
 804590a:	d920      	bls.n	804594e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804590c:	687a      	ldr	r2, [r7, #4]
 804590e:	697b      	ldr	r3, [r7, #20]
 8045910:	212c      	movs	r1, #44	; 0x2c
 8045912:	fb01 f303 	mul.w	r3, r1, r3
 8045916:	4413      	add	r3, r2
 8045918:	335c      	adds	r3, #92	; 0x5c
 804591a:	2200      	movs	r2, #0
 804591c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804591e:	687a      	ldr	r2, [r7, #4]
 8045920:	697b      	ldr	r3, [r7, #20]
 8045922:	212c      	movs	r1, #44	; 0x2c
 8045924:	fb01 f303 	mul.w	r3, r1, r3
 8045928:	4413      	add	r3, r2
 804592a:	3360      	adds	r3, #96	; 0x60
 804592c:	2204      	movs	r2, #4
 804592e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045930:	697b      	ldr	r3, [r7, #20]
 8045932:	b2d9      	uxtb	r1, r3
 8045934:	687a      	ldr	r2, [r7, #4]
 8045936:	697b      	ldr	r3, [r7, #20]
 8045938:	202c      	movs	r0, #44	; 0x2c
 804593a:	fb00 f303 	mul.w	r3, r0, r3
 804593e:	4413      	add	r3, r2
 8045940:	3360      	adds	r3, #96	; 0x60
 8045942:	781b      	ldrb	r3, [r3, #0]
 8045944:	461a      	mov	r2, r3
 8045946:	6878      	ldr	r0, [r7, #4]
 8045948:	f007 f854 	bl	804c9f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 804594c:	e008      	b.n	8045960 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804594e:	687a      	ldr	r2, [r7, #4]
 8045950:	697b      	ldr	r3, [r7, #20]
 8045952:	212c      	movs	r1, #44	; 0x2c
 8045954:	fb01 f303 	mul.w	r3, r1, r3
 8045958:	4413      	add	r3, r2
 804595a:	3360      	adds	r3, #96	; 0x60
 804595c:	2202      	movs	r2, #2
 804595e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045960:	697b      	ldr	r3, [r7, #20]
 8045962:	015a      	lsls	r2, r3, #5
 8045964:	69bb      	ldr	r3, [r7, #24]
 8045966:	4413      	add	r3, r2
 8045968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804596c:	461a      	mov	r2, r3
 804596e:	2380      	movs	r3, #128	; 0x80
 8045970:	6093      	str	r3, [r2, #8]
}
 8045972:	e172      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045974:	697b      	ldr	r3, [r7, #20]
 8045976:	015a      	lsls	r2, r3, #5
 8045978:	69bb      	ldr	r3, [r7, #24]
 804597a:	4413      	add	r3, r2
 804597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045980:	689b      	ldr	r3, [r3, #8]
 8045982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804598a:	d11b      	bne.n	80459c4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 804598c:	687a      	ldr	r2, [r7, #4]
 804598e:	697b      	ldr	r3, [r7, #20]
 8045990:	212c      	movs	r1, #44	; 0x2c
 8045992:	fb01 f303 	mul.w	r3, r1, r3
 8045996:	4413      	add	r3, r2
 8045998:	3361      	adds	r3, #97	; 0x61
 804599a:	2208      	movs	r2, #8
 804599c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804599e:	687b      	ldr	r3, [r7, #4]
 80459a0:	681b      	ldr	r3, [r3, #0]
 80459a2:	697a      	ldr	r2, [r7, #20]
 80459a4:	b2d2      	uxtb	r2, r2
 80459a6:	4611      	mov	r1, r2
 80459a8:	4618      	mov	r0, r3
 80459aa:	f004 fd84 	bl	804a4b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80459ae:	697b      	ldr	r3, [r7, #20]
 80459b0:	015a      	lsls	r2, r3, #5
 80459b2:	69bb      	ldr	r3, [r7, #24]
 80459b4:	4413      	add	r3, r2
 80459b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80459ba:	461a      	mov	r2, r3
 80459bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80459c0:	6093      	str	r3, [r2, #8]
}
 80459c2:	e14a      	b.n	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80459c4:	697b      	ldr	r3, [r7, #20]
 80459c6:	015a      	lsls	r2, r3, #5
 80459c8:	69bb      	ldr	r3, [r7, #24]
 80459ca:	4413      	add	r3, r2
 80459cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80459d0:	689b      	ldr	r3, [r3, #8]
 80459d2:	f003 0302 	and.w	r3, r3, #2
 80459d6:	2b02      	cmp	r3, #2
 80459d8:	f040 813f 	bne.w	8045c5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80459dc:	687a      	ldr	r2, [r7, #4]
 80459de:	697b      	ldr	r3, [r7, #20]
 80459e0:	212c      	movs	r1, #44	; 0x2c
 80459e2:	fb01 f303 	mul.w	r3, r1, r3
 80459e6:	4413      	add	r3, r2
 80459e8:	3361      	adds	r3, #97	; 0x61
 80459ea:	781b      	ldrb	r3, [r3, #0]
 80459ec:	2b01      	cmp	r3, #1
 80459ee:	d17d      	bne.n	8045aec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80459f0:	687a      	ldr	r2, [r7, #4]
 80459f2:	697b      	ldr	r3, [r7, #20]
 80459f4:	212c      	movs	r1, #44	; 0x2c
 80459f6:	fb01 f303 	mul.w	r3, r1, r3
 80459fa:	4413      	add	r3, r2
 80459fc:	3360      	adds	r3, #96	; 0x60
 80459fe:	2201      	movs	r2, #1
 8045a00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8045a02:	687a      	ldr	r2, [r7, #4]
 8045a04:	697b      	ldr	r3, [r7, #20]
 8045a06:	212c      	movs	r1, #44	; 0x2c
 8045a08:	fb01 f303 	mul.w	r3, r1, r3
 8045a0c:	4413      	add	r3, r2
 8045a0e:	333f      	adds	r3, #63	; 0x3f
 8045a10:	781b      	ldrb	r3, [r3, #0]
 8045a12:	2b02      	cmp	r3, #2
 8045a14:	d00a      	beq.n	8045a2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8045a16:	687a      	ldr	r2, [r7, #4]
 8045a18:	697b      	ldr	r3, [r7, #20]
 8045a1a:	212c      	movs	r1, #44	; 0x2c
 8045a1c:	fb01 f303 	mul.w	r3, r1, r3
 8045a20:	4413      	add	r3, r2
 8045a22:	333f      	adds	r3, #63	; 0x3f
 8045a24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8045a26:	2b03      	cmp	r3, #3
 8045a28:	f040 8100 	bne.w	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8045a2c:	687b      	ldr	r3, [r7, #4]
 8045a2e:	691b      	ldr	r3, [r3, #16]
 8045a30:	2b00      	cmp	r3, #0
 8045a32:	d113      	bne.n	8045a5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8045a34:	687a      	ldr	r2, [r7, #4]
 8045a36:	697b      	ldr	r3, [r7, #20]
 8045a38:	212c      	movs	r1, #44	; 0x2c
 8045a3a:	fb01 f303 	mul.w	r3, r1, r3
 8045a3e:	4413      	add	r3, r2
 8045a40:	3355      	adds	r3, #85	; 0x55
 8045a42:	781b      	ldrb	r3, [r3, #0]
 8045a44:	f083 0301 	eor.w	r3, r3, #1
 8045a48:	b2d8      	uxtb	r0, r3
 8045a4a:	687a      	ldr	r2, [r7, #4]
 8045a4c:	697b      	ldr	r3, [r7, #20]
 8045a4e:	212c      	movs	r1, #44	; 0x2c
 8045a50:	fb01 f303 	mul.w	r3, r1, r3
 8045a54:	4413      	add	r3, r2
 8045a56:	3355      	adds	r3, #85	; 0x55
 8045a58:	4602      	mov	r2, r0
 8045a5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8045a5c:	687b      	ldr	r3, [r7, #4]
 8045a5e:	691b      	ldr	r3, [r3, #16]
 8045a60:	2b01      	cmp	r3, #1
 8045a62:	f040 80e3 	bne.w	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
 8045a66:	687a      	ldr	r2, [r7, #4]
 8045a68:	697b      	ldr	r3, [r7, #20]
 8045a6a:	212c      	movs	r1, #44	; 0x2c
 8045a6c:	fb01 f303 	mul.w	r3, r1, r3
 8045a70:	4413      	add	r3, r2
 8045a72:	334c      	adds	r3, #76	; 0x4c
 8045a74:	681b      	ldr	r3, [r3, #0]
 8045a76:	2b00      	cmp	r3, #0
 8045a78:	f000 80d8 	beq.w	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8045a7c:	687a      	ldr	r2, [r7, #4]
 8045a7e:	697b      	ldr	r3, [r7, #20]
 8045a80:	212c      	movs	r1, #44	; 0x2c
 8045a82:	fb01 f303 	mul.w	r3, r1, r3
 8045a86:	4413      	add	r3, r2
 8045a88:	334c      	adds	r3, #76	; 0x4c
 8045a8a:	681b      	ldr	r3, [r3, #0]
 8045a8c:	6879      	ldr	r1, [r7, #4]
 8045a8e:	697a      	ldr	r2, [r7, #20]
 8045a90:	202c      	movs	r0, #44	; 0x2c
 8045a92:	fb00 f202 	mul.w	r2, r0, r2
 8045a96:	440a      	add	r2, r1
 8045a98:	3240      	adds	r2, #64	; 0x40
 8045a9a:	8812      	ldrh	r2, [r2, #0]
 8045a9c:	4413      	add	r3, r2
 8045a9e:	3b01      	subs	r3, #1
 8045aa0:	6879      	ldr	r1, [r7, #4]
 8045aa2:	697a      	ldr	r2, [r7, #20]
 8045aa4:	202c      	movs	r0, #44	; 0x2c
 8045aa6:	fb00 f202 	mul.w	r2, r0, r2
 8045aaa:	440a      	add	r2, r1
 8045aac:	3240      	adds	r2, #64	; 0x40
 8045aae:	8812      	ldrh	r2, [r2, #0]
 8045ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8045ab4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8045ab6:	68fb      	ldr	r3, [r7, #12]
 8045ab8:	f003 0301 	and.w	r3, r3, #1
 8045abc:	2b00      	cmp	r3, #0
 8045abe:	f000 80b5 	beq.w	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8045ac2:	687a      	ldr	r2, [r7, #4]
 8045ac4:	697b      	ldr	r3, [r7, #20]
 8045ac6:	212c      	movs	r1, #44	; 0x2c
 8045ac8:	fb01 f303 	mul.w	r3, r1, r3
 8045acc:	4413      	add	r3, r2
 8045ace:	3355      	adds	r3, #85	; 0x55
 8045ad0:	781b      	ldrb	r3, [r3, #0]
 8045ad2:	f083 0301 	eor.w	r3, r3, #1
 8045ad6:	b2d8      	uxtb	r0, r3
 8045ad8:	687a      	ldr	r2, [r7, #4]
 8045ada:	697b      	ldr	r3, [r7, #20]
 8045adc:	212c      	movs	r1, #44	; 0x2c
 8045ade:	fb01 f303 	mul.w	r3, r1, r3
 8045ae2:	4413      	add	r3, r2
 8045ae4:	3355      	adds	r3, #85	; 0x55
 8045ae6:	4602      	mov	r2, r0
 8045ae8:	701a      	strb	r2, [r3, #0]
 8045aea:	e09f      	b.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8045aec:	687a      	ldr	r2, [r7, #4]
 8045aee:	697b      	ldr	r3, [r7, #20]
 8045af0:	212c      	movs	r1, #44	; 0x2c
 8045af2:	fb01 f303 	mul.w	r3, r1, r3
 8045af6:	4413      	add	r3, r2
 8045af8:	3361      	adds	r3, #97	; 0x61
 8045afa:	781b      	ldrb	r3, [r3, #0]
 8045afc:	2b03      	cmp	r3, #3
 8045afe:	d109      	bne.n	8045b14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045b00:	687a      	ldr	r2, [r7, #4]
 8045b02:	697b      	ldr	r3, [r7, #20]
 8045b04:	212c      	movs	r1, #44	; 0x2c
 8045b06:	fb01 f303 	mul.w	r3, r1, r3
 8045b0a:	4413      	add	r3, r2
 8045b0c:	3360      	adds	r3, #96	; 0x60
 8045b0e:	2202      	movs	r2, #2
 8045b10:	701a      	strb	r2, [r3, #0]
 8045b12:	e08b      	b.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8045b14:	687a      	ldr	r2, [r7, #4]
 8045b16:	697b      	ldr	r3, [r7, #20]
 8045b18:	212c      	movs	r1, #44	; 0x2c
 8045b1a:	fb01 f303 	mul.w	r3, r1, r3
 8045b1e:	4413      	add	r3, r2
 8045b20:	3361      	adds	r3, #97	; 0x61
 8045b22:	781b      	ldrb	r3, [r3, #0]
 8045b24:	2b04      	cmp	r3, #4
 8045b26:	d109      	bne.n	8045b3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8045b28:	687a      	ldr	r2, [r7, #4]
 8045b2a:	697b      	ldr	r3, [r7, #20]
 8045b2c:	212c      	movs	r1, #44	; 0x2c
 8045b2e:	fb01 f303 	mul.w	r3, r1, r3
 8045b32:	4413      	add	r3, r2
 8045b34:	3360      	adds	r3, #96	; 0x60
 8045b36:	2202      	movs	r2, #2
 8045b38:	701a      	strb	r2, [r3, #0]
 8045b3a:	e077      	b.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045b3c:	687a      	ldr	r2, [r7, #4]
 8045b3e:	697b      	ldr	r3, [r7, #20]
 8045b40:	212c      	movs	r1, #44	; 0x2c
 8045b42:	fb01 f303 	mul.w	r3, r1, r3
 8045b46:	4413      	add	r3, r2
 8045b48:	3361      	adds	r3, #97	; 0x61
 8045b4a:	781b      	ldrb	r3, [r3, #0]
 8045b4c:	2b05      	cmp	r3, #5
 8045b4e:	d109      	bne.n	8045b64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8045b50:	687a      	ldr	r2, [r7, #4]
 8045b52:	697b      	ldr	r3, [r7, #20]
 8045b54:	212c      	movs	r1, #44	; 0x2c
 8045b56:	fb01 f303 	mul.w	r3, r1, r3
 8045b5a:	4413      	add	r3, r2
 8045b5c:	3360      	adds	r3, #96	; 0x60
 8045b5e:	2205      	movs	r2, #5
 8045b60:	701a      	strb	r2, [r3, #0]
 8045b62:	e063      	b.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045b64:	687a      	ldr	r2, [r7, #4]
 8045b66:	697b      	ldr	r3, [r7, #20]
 8045b68:	212c      	movs	r1, #44	; 0x2c
 8045b6a:	fb01 f303 	mul.w	r3, r1, r3
 8045b6e:	4413      	add	r3, r2
 8045b70:	3361      	adds	r3, #97	; 0x61
 8045b72:	781b      	ldrb	r3, [r3, #0]
 8045b74:	2b06      	cmp	r3, #6
 8045b76:	d009      	beq.n	8045b8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045b78:	687a      	ldr	r2, [r7, #4]
 8045b7a:	697b      	ldr	r3, [r7, #20]
 8045b7c:	212c      	movs	r1, #44	; 0x2c
 8045b7e:	fb01 f303 	mul.w	r3, r1, r3
 8045b82:	4413      	add	r3, r2
 8045b84:	3361      	adds	r3, #97	; 0x61
 8045b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045b88:	2b08      	cmp	r3, #8
 8045b8a:	d14f      	bne.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8045b8c:	687a      	ldr	r2, [r7, #4]
 8045b8e:	697b      	ldr	r3, [r7, #20]
 8045b90:	212c      	movs	r1, #44	; 0x2c
 8045b92:	fb01 f303 	mul.w	r3, r1, r3
 8045b96:	4413      	add	r3, r2
 8045b98:	335c      	adds	r3, #92	; 0x5c
 8045b9a:	681b      	ldr	r3, [r3, #0]
 8045b9c:	1c5a      	adds	r2, r3, #1
 8045b9e:	6879      	ldr	r1, [r7, #4]
 8045ba0:	697b      	ldr	r3, [r7, #20]
 8045ba2:	202c      	movs	r0, #44	; 0x2c
 8045ba4:	fb00 f303 	mul.w	r3, r0, r3
 8045ba8:	440b      	add	r3, r1
 8045baa:	335c      	adds	r3, #92	; 0x5c
 8045bac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045bae:	687a      	ldr	r2, [r7, #4]
 8045bb0:	697b      	ldr	r3, [r7, #20]
 8045bb2:	212c      	movs	r1, #44	; 0x2c
 8045bb4:	fb01 f303 	mul.w	r3, r1, r3
 8045bb8:	4413      	add	r3, r2
 8045bba:	335c      	adds	r3, #92	; 0x5c
 8045bbc:	681b      	ldr	r3, [r3, #0]
 8045bbe:	2b02      	cmp	r3, #2
 8045bc0:	d912      	bls.n	8045be8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045bc2:	687a      	ldr	r2, [r7, #4]
 8045bc4:	697b      	ldr	r3, [r7, #20]
 8045bc6:	212c      	movs	r1, #44	; 0x2c
 8045bc8:	fb01 f303 	mul.w	r3, r1, r3
 8045bcc:	4413      	add	r3, r2
 8045bce:	335c      	adds	r3, #92	; 0x5c
 8045bd0:	2200      	movs	r2, #0
 8045bd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045bd4:	687a      	ldr	r2, [r7, #4]
 8045bd6:	697b      	ldr	r3, [r7, #20]
 8045bd8:	212c      	movs	r1, #44	; 0x2c
 8045bda:	fb01 f303 	mul.w	r3, r1, r3
 8045bde:	4413      	add	r3, r2
 8045be0:	3360      	adds	r3, #96	; 0x60
 8045be2:	2204      	movs	r2, #4
 8045be4:	701a      	strb	r2, [r3, #0]
 8045be6:	e021      	b.n	8045c2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045be8:	687a      	ldr	r2, [r7, #4]
 8045bea:	697b      	ldr	r3, [r7, #20]
 8045bec:	212c      	movs	r1, #44	; 0x2c
 8045bee:	fb01 f303 	mul.w	r3, r1, r3
 8045bf2:	4413      	add	r3, r2
 8045bf4:	3360      	adds	r3, #96	; 0x60
 8045bf6:	2202      	movs	r2, #2
 8045bf8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045bfa:	697b      	ldr	r3, [r7, #20]
 8045bfc:	015a      	lsls	r2, r3, #5
 8045bfe:	69bb      	ldr	r3, [r7, #24]
 8045c00:	4413      	add	r3, r2
 8045c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c06:	681b      	ldr	r3, [r3, #0]
 8045c08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045c0a:	693b      	ldr	r3, [r7, #16]
 8045c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045c10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045c12:	693b      	ldr	r3, [r7, #16]
 8045c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045c18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045c1a:	697b      	ldr	r3, [r7, #20]
 8045c1c:	015a      	lsls	r2, r3, #5
 8045c1e:	69bb      	ldr	r3, [r7, #24]
 8045c20:	4413      	add	r3, r2
 8045c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c26:	461a      	mov	r2, r3
 8045c28:	693b      	ldr	r3, [r7, #16]
 8045c2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045c2c:	697b      	ldr	r3, [r7, #20]
 8045c2e:	015a      	lsls	r2, r3, #5
 8045c30:	69bb      	ldr	r3, [r7, #24]
 8045c32:	4413      	add	r3, r2
 8045c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c38:	461a      	mov	r2, r3
 8045c3a:	2302      	movs	r3, #2
 8045c3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045c3e:	697b      	ldr	r3, [r7, #20]
 8045c40:	b2d9      	uxtb	r1, r3
 8045c42:	687a      	ldr	r2, [r7, #4]
 8045c44:	697b      	ldr	r3, [r7, #20]
 8045c46:	202c      	movs	r0, #44	; 0x2c
 8045c48:	fb00 f303 	mul.w	r3, r0, r3
 8045c4c:	4413      	add	r3, r2
 8045c4e:	3360      	adds	r3, #96	; 0x60
 8045c50:	781b      	ldrb	r3, [r3, #0]
 8045c52:	461a      	mov	r2, r3
 8045c54:	6878      	ldr	r0, [r7, #4]
 8045c56:	f006 fecd 	bl	804c9f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8045c5a:	bf00      	nop
 8045c5c:	3720      	adds	r7, #32
 8045c5e:	46bd      	mov	sp, r7
 8045c60:	bd80      	pop	{r7, pc}

08045c62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045c62:	b580      	push	{r7, lr}
 8045c64:	b08a      	sub	sp, #40	; 0x28
 8045c66:	af00      	add	r7, sp, #0
 8045c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045c6a:	687b      	ldr	r3, [r7, #4]
 8045c6c:	681b      	ldr	r3, [r3, #0]
 8045c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045c72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8045c74:	687b      	ldr	r3, [r7, #4]
 8045c76:	681b      	ldr	r3, [r3, #0]
 8045c78:	6a1b      	ldr	r3, [r3, #32]
 8045c7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8045c7c:	69fb      	ldr	r3, [r7, #28]
 8045c7e:	f003 030f 	and.w	r3, r3, #15
 8045c82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8045c84:	69fb      	ldr	r3, [r7, #28]
 8045c86:	0c5b      	lsrs	r3, r3, #17
 8045c88:	f003 030f 	and.w	r3, r3, #15
 8045c8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8045c8e:	69fb      	ldr	r3, [r7, #28]
 8045c90:	091b      	lsrs	r3, r3, #4
 8045c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8045c96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8045c98:	697b      	ldr	r3, [r7, #20]
 8045c9a:	2b02      	cmp	r3, #2
 8045c9c:	d004      	beq.n	8045ca8 <HCD_RXQLVL_IRQHandler+0x46>
 8045c9e:	697b      	ldr	r3, [r7, #20]
 8045ca0:	2b05      	cmp	r3, #5
 8045ca2:	f000 80a9 	beq.w	8045df8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8045ca6:	e0aa      	b.n	8045dfe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8045ca8:	693b      	ldr	r3, [r7, #16]
 8045caa:	2b00      	cmp	r3, #0
 8045cac:	f000 80a6 	beq.w	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
 8045cb0:	687a      	ldr	r2, [r7, #4]
 8045cb2:	69bb      	ldr	r3, [r7, #24]
 8045cb4:	212c      	movs	r1, #44	; 0x2c
 8045cb6:	fb01 f303 	mul.w	r3, r1, r3
 8045cba:	4413      	add	r3, r2
 8045cbc:	3344      	adds	r3, #68	; 0x44
 8045cbe:	681b      	ldr	r3, [r3, #0]
 8045cc0:	2b00      	cmp	r3, #0
 8045cc2:	f000 809b 	beq.w	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8045cc6:	687a      	ldr	r2, [r7, #4]
 8045cc8:	69bb      	ldr	r3, [r7, #24]
 8045cca:	212c      	movs	r1, #44	; 0x2c
 8045ccc:	fb01 f303 	mul.w	r3, r1, r3
 8045cd0:	4413      	add	r3, r2
 8045cd2:	3350      	adds	r3, #80	; 0x50
 8045cd4:	681a      	ldr	r2, [r3, #0]
 8045cd6:	693b      	ldr	r3, [r7, #16]
 8045cd8:	441a      	add	r2, r3
 8045cda:	6879      	ldr	r1, [r7, #4]
 8045cdc:	69bb      	ldr	r3, [r7, #24]
 8045cde:	202c      	movs	r0, #44	; 0x2c
 8045ce0:	fb00 f303 	mul.w	r3, r0, r3
 8045ce4:	440b      	add	r3, r1
 8045ce6:	334c      	adds	r3, #76	; 0x4c
 8045ce8:	681b      	ldr	r3, [r3, #0]
 8045cea:	429a      	cmp	r2, r3
 8045cec:	d87a      	bhi.n	8045de4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8045cee:	687b      	ldr	r3, [r7, #4]
 8045cf0:	6818      	ldr	r0, [r3, #0]
 8045cf2:	687a      	ldr	r2, [r7, #4]
 8045cf4:	69bb      	ldr	r3, [r7, #24]
 8045cf6:	212c      	movs	r1, #44	; 0x2c
 8045cf8:	fb01 f303 	mul.w	r3, r1, r3
 8045cfc:	4413      	add	r3, r2
 8045cfe:	3344      	adds	r3, #68	; 0x44
 8045d00:	681b      	ldr	r3, [r3, #0]
 8045d02:	693a      	ldr	r2, [r7, #16]
 8045d04:	b292      	uxth	r2, r2
 8045d06:	4619      	mov	r1, r3
 8045d08:	f003 ff2c 	bl	8049b64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8045d0c:	687a      	ldr	r2, [r7, #4]
 8045d0e:	69bb      	ldr	r3, [r7, #24]
 8045d10:	212c      	movs	r1, #44	; 0x2c
 8045d12:	fb01 f303 	mul.w	r3, r1, r3
 8045d16:	4413      	add	r3, r2
 8045d18:	3344      	adds	r3, #68	; 0x44
 8045d1a:	681a      	ldr	r2, [r3, #0]
 8045d1c:	693b      	ldr	r3, [r7, #16]
 8045d1e:	441a      	add	r2, r3
 8045d20:	6879      	ldr	r1, [r7, #4]
 8045d22:	69bb      	ldr	r3, [r7, #24]
 8045d24:	202c      	movs	r0, #44	; 0x2c
 8045d26:	fb00 f303 	mul.w	r3, r0, r3
 8045d2a:	440b      	add	r3, r1
 8045d2c:	3344      	adds	r3, #68	; 0x44
 8045d2e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8045d30:	687a      	ldr	r2, [r7, #4]
 8045d32:	69bb      	ldr	r3, [r7, #24]
 8045d34:	212c      	movs	r1, #44	; 0x2c
 8045d36:	fb01 f303 	mul.w	r3, r1, r3
 8045d3a:	4413      	add	r3, r2
 8045d3c:	3350      	adds	r3, #80	; 0x50
 8045d3e:	681a      	ldr	r2, [r3, #0]
 8045d40:	693b      	ldr	r3, [r7, #16]
 8045d42:	441a      	add	r2, r3
 8045d44:	6879      	ldr	r1, [r7, #4]
 8045d46:	69bb      	ldr	r3, [r7, #24]
 8045d48:	202c      	movs	r0, #44	; 0x2c
 8045d4a:	fb00 f303 	mul.w	r3, r0, r3
 8045d4e:	440b      	add	r3, r1
 8045d50:	3350      	adds	r3, #80	; 0x50
 8045d52:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8045d54:	69bb      	ldr	r3, [r7, #24]
 8045d56:	015a      	lsls	r2, r3, #5
 8045d58:	6a3b      	ldr	r3, [r7, #32]
 8045d5a:	4413      	add	r3, r2
 8045d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d60:	691b      	ldr	r3, [r3, #16]
 8045d62:	0cdb      	lsrs	r3, r3, #19
 8045d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045d68:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8045d6a:	687a      	ldr	r2, [r7, #4]
 8045d6c:	69bb      	ldr	r3, [r7, #24]
 8045d6e:	212c      	movs	r1, #44	; 0x2c
 8045d70:	fb01 f303 	mul.w	r3, r1, r3
 8045d74:	4413      	add	r3, r2
 8045d76:	3340      	adds	r3, #64	; 0x40
 8045d78:	881b      	ldrh	r3, [r3, #0]
 8045d7a:	461a      	mov	r2, r3
 8045d7c:	693b      	ldr	r3, [r7, #16]
 8045d7e:	4293      	cmp	r3, r2
 8045d80:	d13c      	bne.n	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
 8045d82:	68fb      	ldr	r3, [r7, #12]
 8045d84:	2b00      	cmp	r3, #0
 8045d86:	d039      	beq.n	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045d88:	69bb      	ldr	r3, [r7, #24]
 8045d8a:	015a      	lsls	r2, r3, #5
 8045d8c:	6a3b      	ldr	r3, [r7, #32]
 8045d8e:	4413      	add	r3, r2
 8045d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045d94:	681b      	ldr	r3, [r3, #0]
 8045d96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045d98:	68bb      	ldr	r3, [r7, #8]
 8045d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045d9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045da0:	68bb      	ldr	r3, [r7, #8]
 8045da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045da6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045da8:	69bb      	ldr	r3, [r7, #24]
 8045daa:	015a      	lsls	r2, r3, #5
 8045dac:	6a3b      	ldr	r3, [r7, #32]
 8045dae:	4413      	add	r3, r2
 8045db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045db4:	461a      	mov	r2, r3
 8045db6:	68bb      	ldr	r3, [r7, #8]
 8045db8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8045dba:	687a      	ldr	r2, [r7, #4]
 8045dbc:	69bb      	ldr	r3, [r7, #24]
 8045dbe:	212c      	movs	r1, #44	; 0x2c
 8045dc0:	fb01 f303 	mul.w	r3, r1, r3
 8045dc4:	4413      	add	r3, r2
 8045dc6:	3354      	adds	r3, #84	; 0x54
 8045dc8:	781b      	ldrb	r3, [r3, #0]
 8045dca:	f083 0301 	eor.w	r3, r3, #1
 8045dce:	b2d8      	uxtb	r0, r3
 8045dd0:	687a      	ldr	r2, [r7, #4]
 8045dd2:	69bb      	ldr	r3, [r7, #24]
 8045dd4:	212c      	movs	r1, #44	; 0x2c
 8045dd6:	fb01 f303 	mul.w	r3, r1, r3
 8045dda:	4413      	add	r3, r2
 8045ddc:	3354      	adds	r3, #84	; 0x54
 8045dde:	4602      	mov	r2, r0
 8045de0:	701a      	strb	r2, [r3, #0]
      break;
 8045de2:	e00b      	b.n	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045de4:	687a      	ldr	r2, [r7, #4]
 8045de6:	69bb      	ldr	r3, [r7, #24]
 8045de8:	212c      	movs	r1, #44	; 0x2c
 8045dea:	fb01 f303 	mul.w	r3, r1, r3
 8045dee:	4413      	add	r3, r2
 8045df0:	3360      	adds	r3, #96	; 0x60
 8045df2:	2204      	movs	r2, #4
 8045df4:	701a      	strb	r2, [r3, #0]
      break;
 8045df6:	e001      	b.n	8045dfc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8045df8:	bf00      	nop
 8045dfa:	e000      	b.n	8045dfe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8045dfc:	bf00      	nop
  }
}
 8045dfe:	bf00      	nop
 8045e00:	3728      	adds	r7, #40	; 0x28
 8045e02:	46bd      	mov	sp, r7
 8045e04:	bd80      	pop	{r7, pc}

08045e06 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045e06:	b580      	push	{r7, lr}
 8045e08:	b086      	sub	sp, #24
 8045e0a:	af00      	add	r7, sp, #0
 8045e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045e0e:	687b      	ldr	r3, [r7, #4]
 8045e10:	681b      	ldr	r3, [r3, #0]
 8045e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045e14:	697b      	ldr	r3, [r7, #20]
 8045e16:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8045e18:	693b      	ldr	r3, [r7, #16]
 8045e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045e1e:	681b      	ldr	r3, [r3, #0]
 8045e20:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8045e22:	693b      	ldr	r3, [r7, #16]
 8045e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045e28:	681b      	ldr	r3, [r3, #0]
 8045e2a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8045e2c:	68bb      	ldr	r3, [r7, #8]
 8045e2e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8045e32:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8045e34:	68fb      	ldr	r3, [r7, #12]
 8045e36:	f003 0302 	and.w	r3, r3, #2
 8045e3a:	2b02      	cmp	r3, #2
 8045e3c:	d10b      	bne.n	8045e56 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8045e3e:	68fb      	ldr	r3, [r7, #12]
 8045e40:	f003 0301 	and.w	r3, r3, #1
 8045e44:	2b01      	cmp	r3, #1
 8045e46:	d102      	bne.n	8045e4e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8045e48:	6878      	ldr	r0, [r7, #4]
 8045e4a:	f006 fdb7 	bl	804c9bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8045e4e:	68bb      	ldr	r3, [r7, #8]
 8045e50:	f043 0302 	orr.w	r3, r3, #2
 8045e54:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8045e56:	68fb      	ldr	r3, [r7, #12]
 8045e58:	f003 0308 	and.w	r3, r3, #8
 8045e5c:	2b08      	cmp	r3, #8
 8045e5e:	d132      	bne.n	8045ec6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8045e60:	68bb      	ldr	r3, [r7, #8]
 8045e62:	f043 0308 	orr.w	r3, r3, #8
 8045e66:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8045e68:	68fb      	ldr	r3, [r7, #12]
 8045e6a:	f003 0304 	and.w	r3, r3, #4
 8045e6e:	2b04      	cmp	r3, #4
 8045e70:	d126      	bne.n	8045ec0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8045e72:	687b      	ldr	r3, [r7, #4]
 8045e74:	699b      	ldr	r3, [r3, #24]
 8045e76:	2b02      	cmp	r3, #2
 8045e78:	d113      	bne.n	8045ea2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8045e7a:	68fb      	ldr	r3, [r7, #12]
 8045e7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8045e84:	d106      	bne.n	8045e94 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8045e86:	687b      	ldr	r3, [r7, #4]
 8045e88:	681b      	ldr	r3, [r3, #0]
 8045e8a:	2102      	movs	r1, #2
 8045e8c:	4618      	mov	r0, r3
 8045e8e:	f003 ffd7 	bl	8049e40 <USB_InitFSLSPClkSel>
 8045e92:	e011      	b.n	8045eb8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8045e94:	687b      	ldr	r3, [r7, #4]
 8045e96:	681b      	ldr	r3, [r3, #0]
 8045e98:	2101      	movs	r1, #1
 8045e9a:	4618      	mov	r0, r3
 8045e9c:	f003 ffd0 	bl	8049e40 <USB_InitFSLSPClkSel>
 8045ea0:	e00a      	b.n	8045eb8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8045ea2:	687b      	ldr	r3, [r7, #4]
 8045ea4:	68db      	ldr	r3, [r3, #12]
 8045ea6:	2b01      	cmp	r3, #1
 8045ea8:	d106      	bne.n	8045eb8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8045eaa:	693b      	ldr	r3, [r7, #16]
 8045eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045eb0:	461a      	mov	r2, r3
 8045eb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8045eb6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8045eb8:	6878      	ldr	r0, [r7, #4]
 8045eba:	f006 fda9 	bl	804ca10 <HAL_HCD_PortEnabled_Callback>
 8045ebe:	e002      	b.n	8045ec6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8045ec0:	6878      	ldr	r0, [r7, #4]
 8045ec2:	f006 fdb3 	bl	804ca2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8045ec6:	68fb      	ldr	r3, [r7, #12]
 8045ec8:	f003 0320 	and.w	r3, r3, #32
 8045ecc:	2b20      	cmp	r3, #32
 8045ece:	d103      	bne.n	8045ed8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8045ed0:	68bb      	ldr	r3, [r7, #8]
 8045ed2:	f043 0320 	orr.w	r3, r3, #32
 8045ed6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8045ed8:	693b      	ldr	r3, [r7, #16]
 8045eda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045ede:	461a      	mov	r2, r3
 8045ee0:	68bb      	ldr	r3, [r7, #8]
 8045ee2:	6013      	str	r3, [r2, #0]
}
 8045ee4:	bf00      	nop
 8045ee6:	3718      	adds	r7, #24
 8045ee8:	46bd      	mov	sp, r7
 8045eea:	bd80      	pop	{r7, pc}

08045eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045eec:	b580      	push	{r7, lr}
 8045eee:	b084      	sub	sp, #16
 8045ef0:	af00      	add	r7, sp, #0
 8045ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045ef4:	687b      	ldr	r3, [r7, #4]
 8045ef6:	2b00      	cmp	r3, #0
 8045ef8:	d101      	bne.n	8045efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8045efa:	2301      	movs	r3, #1
 8045efc:	e12b      	b.n	8046156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045efe:	687b      	ldr	r3, [r7, #4]
 8045f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045f04:	b2db      	uxtb	r3, r3
 8045f06:	2b00      	cmp	r3, #0
 8045f08:	d106      	bne.n	8045f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8045f0a:	687b      	ldr	r3, [r7, #4]
 8045f0c:	2200      	movs	r2, #0
 8045f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8045f12:	6878      	ldr	r0, [r7, #4]
 8045f14:	f7fb fb2c 	bl	8041570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8045f18:	687b      	ldr	r3, [r7, #4]
 8045f1a:	2224      	movs	r2, #36	; 0x24
 8045f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045f20:	687b      	ldr	r3, [r7, #4]
 8045f22:	681b      	ldr	r3, [r3, #0]
 8045f24:	681a      	ldr	r2, [r3, #0]
 8045f26:	687b      	ldr	r3, [r7, #4]
 8045f28:	681b      	ldr	r3, [r3, #0]
 8045f2a:	f022 0201 	bic.w	r2, r2, #1
 8045f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8045f30:	687b      	ldr	r3, [r7, #4]
 8045f32:	681b      	ldr	r3, [r3, #0]
 8045f34:	681a      	ldr	r2, [r3, #0]
 8045f36:	687b      	ldr	r3, [r7, #4]
 8045f38:	681b      	ldr	r3, [r3, #0]
 8045f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8045f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8045f40:	687b      	ldr	r3, [r7, #4]
 8045f42:	681b      	ldr	r3, [r3, #0]
 8045f44:	681a      	ldr	r2, [r3, #0]
 8045f46:	687b      	ldr	r3, [r7, #4]
 8045f48:	681b      	ldr	r3, [r3, #0]
 8045f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8045f50:	f001 fa0c 	bl	804736c <HAL_RCC_GetPCLK1Freq>
 8045f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8045f56:	687b      	ldr	r3, [r7, #4]
 8045f58:	685b      	ldr	r3, [r3, #4]
 8045f5a:	4a81      	ldr	r2, [pc, #516]	; (8046160 <HAL_I2C_Init+0x274>)
 8045f5c:	4293      	cmp	r3, r2
 8045f5e:	d807      	bhi.n	8045f70 <HAL_I2C_Init+0x84>
 8045f60:	68fb      	ldr	r3, [r7, #12]
 8045f62:	4a80      	ldr	r2, [pc, #512]	; (8046164 <HAL_I2C_Init+0x278>)
 8045f64:	4293      	cmp	r3, r2
 8045f66:	bf94      	ite	ls
 8045f68:	2301      	movls	r3, #1
 8045f6a:	2300      	movhi	r3, #0
 8045f6c:	b2db      	uxtb	r3, r3
 8045f6e:	e006      	b.n	8045f7e <HAL_I2C_Init+0x92>
 8045f70:	68fb      	ldr	r3, [r7, #12]
 8045f72:	4a7d      	ldr	r2, [pc, #500]	; (8046168 <HAL_I2C_Init+0x27c>)
 8045f74:	4293      	cmp	r3, r2
 8045f76:	bf94      	ite	ls
 8045f78:	2301      	movls	r3, #1
 8045f7a:	2300      	movhi	r3, #0
 8045f7c:	b2db      	uxtb	r3, r3
 8045f7e:	2b00      	cmp	r3, #0
 8045f80:	d001      	beq.n	8045f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8045f82:	2301      	movs	r3, #1
 8045f84:	e0e7      	b.n	8046156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8045f86:	68fb      	ldr	r3, [r7, #12]
 8045f88:	4a78      	ldr	r2, [pc, #480]	; (804616c <HAL_I2C_Init+0x280>)
 8045f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8045f8e:	0c9b      	lsrs	r3, r3, #18
 8045f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8045f92:	687b      	ldr	r3, [r7, #4]
 8045f94:	681b      	ldr	r3, [r3, #0]
 8045f96:	685b      	ldr	r3, [r3, #4]
 8045f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045f9c:	687b      	ldr	r3, [r7, #4]
 8045f9e:	681b      	ldr	r3, [r3, #0]
 8045fa0:	68ba      	ldr	r2, [r7, #8]
 8045fa2:	430a      	orrs	r2, r1
 8045fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8045fa6:	687b      	ldr	r3, [r7, #4]
 8045fa8:	681b      	ldr	r3, [r3, #0]
 8045faa:	6a1b      	ldr	r3, [r3, #32]
 8045fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045fb0:	687b      	ldr	r3, [r7, #4]
 8045fb2:	685b      	ldr	r3, [r3, #4]
 8045fb4:	4a6a      	ldr	r2, [pc, #424]	; (8046160 <HAL_I2C_Init+0x274>)
 8045fb6:	4293      	cmp	r3, r2
 8045fb8:	d802      	bhi.n	8045fc0 <HAL_I2C_Init+0xd4>
 8045fba:	68bb      	ldr	r3, [r7, #8]
 8045fbc:	3301      	adds	r3, #1
 8045fbe:	e009      	b.n	8045fd4 <HAL_I2C_Init+0xe8>
 8045fc0:	68bb      	ldr	r3, [r7, #8]
 8045fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8045fc6:	fb02 f303 	mul.w	r3, r2, r3
 8045fca:	4a69      	ldr	r2, [pc, #420]	; (8046170 <HAL_I2C_Init+0x284>)
 8045fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8045fd0:	099b      	lsrs	r3, r3, #6
 8045fd2:	3301      	adds	r3, #1
 8045fd4:	687a      	ldr	r2, [r7, #4]
 8045fd6:	6812      	ldr	r2, [r2, #0]
 8045fd8:	430b      	orrs	r3, r1
 8045fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045fdc:	687b      	ldr	r3, [r7, #4]
 8045fde:	681b      	ldr	r3, [r3, #0]
 8045fe0:	69db      	ldr	r3, [r3, #28]
 8045fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045fea:	687b      	ldr	r3, [r7, #4]
 8045fec:	685b      	ldr	r3, [r3, #4]
 8045fee:	495c      	ldr	r1, [pc, #368]	; (8046160 <HAL_I2C_Init+0x274>)
 8045ff0:	428b      	cmp	r3, r1
 8045ff2:	d819      	bhi.n	8046028 <HAL_I2C_Init+0x13c>
 8045ff4:	68fb      	ldr	r3, [r7, #12]
 8045ff6:	1e59      	subs	r1, r3, #1
 8045ff8:	687b      	ldr	r3, [r7, #4]
 8045ffa:	685b      	ldr	r3, [r3, #4]
 8045ffc:	005b      	lsls	r3, r3, #1
 8045ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8046002:	1c59      	adds	r1, r3, #1
 8046004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8046008:	400b      	ands	r3, r1
 804600a:	2b00      	cmp	r3, #0
 804600c:	d00a      	beq.n	8046024 <HAL_I2C_Init+0x138>
 804600e:	68fb      	ldr	r3, [r7, #12]
 8046010:	1e59      	subs	r1, r3, #1
 8046012:	687b      	ldr	r3, [r7, #4]
 8046014:	685b      	ldr	r3, [r3, #4]
 8046016:	005b      	lsls	r3, r3, #1
 8046018:	fbb1 f3f3 	udiv	r3, r1, r3
 804601c:	3301      	adds	r3, #1
 804601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046022:	e051      	b.n	80460c8 <HAL_I2C_Init+0x1dc>
 8046024:	2304      	movs	r3, #4
 8046026:	e04f      	b.n	80460c8 <HAL_I2C_Init+0x1dc>
 8046028:	687b      	ldr	r3, [r7, #4]
 804602a:	689b      	ldr	r3, [r3, #8]
 804602c:	2b00      	cmp	r3, #0
 804602e:	d111      	bne.n	8046054 <HAL_I2C_Init+0x168>
 8046030:	68fb      	ldr	r3, [r7, #12]
 8046032:	1e58      	subs	r0, r3, #1
 8046034:	687b      	ldr	r3, [r7, #4]
 8046036:	6859      	ldr	r1, [r3, #4]
 8046038:	460b      	mov	r3, r1
 804603a:	005b      	lsls	r3, r3, #1
 804603c:	440b      	add	r3, r1
 804603e:	fbb0 f3f3 	udiv	r3, r0, r3
 8046042:	3301      	adds	r3, #1
 8046044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046048:	2b00      	cmp	r3, #0
 804604a:	bf0c      	ite	eq
 804604c:	2301      	moveq	r3, #1
 804604e:	2300      	movne	r3, #0
 8046050:	b2db      	uxtb	r3, r3
 8046052:	e012      	b.n	804607a <HAL_I2C_Init+0x18e>
 8046054:	68fb      	ldr	r3, [r7, #12]
 8046056:	1e58      	subs	r0, r3, #1
 8046058:	687b      	ldr	r3, [r7, #4]
 804605a:	6859      	ldr	r1, [r3, #4]
 804605c:	460b      	mov	r3, r1
 804605e:	009b      	lsls	r3, r3, #2
 8046060:	440b      	add	r3, r1
 8046062:	0099      	lsls	r1, r3, #2
 8046064:	440b      	add	r3, r1
 8046066:	fbb0 f3f3 	udiv	r3, r0, r3
 804606a:	3301      	adds	r3, #1
 804606c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046070:	2b00      	cmp	r3, #0
 8046072:	bf0c      	ite	eq
 8046074:	2301      	moveq	r3, #1
 8046076:	2300      	movne	r3, #0
 8046078:	b2db      	uxtb	r3, r3
 804607a:	2b00      	cmp	r3, #0
 804607c:	d001      	beq.n	8046082 <HAL_I2C_Init+0x196>
 804607e:	2301      	movs	r3, #1
 8046080:	e022      	b.n	80460c8 <HAL_I2C_Init+0x1dc>
 8046082:	687b      	ldr	r3, [r7, #4]
 8046084:	689b      	ldr	r3, [r3, #8]
 8046086:	2b00      	cmp	r3, #0
 8046088:	d10e      	bne.n	80460a8 <HAL_I2C_Init+0x1bc>
 804608a:	68fb      	ldr	r3, [r7, #12]
 804608c:	1e58      	subs	r0, r3, #1
 804608e:	687b      	ldr	r3, [r7, #4]
 8046090:	6859      	ldr	r1, [r3, #4]
 8046092:	460b      	mov	r3, r1
 8046094:	005b      	lsls	r3, r3, #1
 8046096:	440b      	add	r3, r1
 8046098:	fbb0 f3f3 	udiv	r3, r0, r3
 804609c:	3301      	adds	r3, #1
 804609e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80460a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80460a6:	e00f      	b.n	80460c8 <HAL_I2C_Init+0x1dc>
 80460a8:	68fb      	ldr	r3, [r7, #12]
 80460aa:	1e58      	subs	r0, r3, #1
 80460ac:	687b      	ldr	r3, [r7, #4]
 80460ae:	6859      	ldr	r1, [r3, #4]
 80460b0:	460b      	mov	r3, r1
 80460b2:	009b      	lsls	r3, r3, #2
 80460b4:	440b      	add	r3, r1
 80460b6:	0099      	lsls	r1, r3, #2
 80460b8:	440b      	add	r3, r1
 80460ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80460be:	3301      	adds	r3, #1
 80460c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80460c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80460c8:	6879      	ldr	r1, [r7, #4]
 80460ca:	6809      	ldr	r1, [r1, #0]
 80460cc:	4313      	orrs	r3, r2
 80460ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80460d0:	687b      	ldr	r3, [r7, #4]
 80460d2:	681b      	ldr	r3, [r3, #0]
 80460d4:	681b      	ldr	r3, [r3, #0]
 80460d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80460da:	687b      	ldr	r3, [r7, #4]
 80460dc:	69da      	ldr	r2, [r3, #28]
 80460de:	687b      	ldr	r3, [r7, #4]
 80460e0:	6a1b      	ldr	r3, [r3, #32]
 80460e2:	431a      	orrs	r2, r3
 80460e4:	687b      	ldr	r3, [r7, #4]
 80460e6:	681b      	ldr	r3, [r3, #0]
 80460e8:	430a      	orrs	r2, r1
 80460ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80460ec:	687b      	ldr	r3, [r7, #4]
 80460ee:	681b      	ldr	r3, [r3, #0]
 80460f0:	689b      	ldr	r3, [r3, #8]
 80460f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80460f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80460fa:	687a      	ldr	r2, [r7, #4]
 80460fc:	6911      	ldr	r1, [r2, #16]
 80460fe:	687a      	ldr	r2, [r7, #4]
 8046100:	68d2      	ldr	r2, [r2, #12]
 8046102:	4311      	orrs	r1, r2
 8046104:	687a      	ldr	r2, [r7, #4]
 8046106:	6812      	ldr	r2, [r2, #0]
 8046108:	430b      	orrs	r3, r1
 804610a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 804610c:	687b      	ldr	r3, [r7, #4]
 804610e:	681b      	ldr	r3, [r3, #0]
 8046110:	68db      	ldr	r3, [r3, #12]
 8046112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8046116:	687b      	ldr	r3, [r7, #4]
 8046118:	695a      	ldr	r2, [r3, #20]
 804611a:	687b      	ldr	r3, [r7, #4]
 804611c:	699b      	ldr	r3, [r3, #24]
 804611e:	431a      	orrs	r2, r3
 8046120:	687b      	ldr	r3, [r7, #4]
 8046122:	681b      	ldr	r3, [r3, #0]
 8046124:	430a      	orrs	r2, r1
 8046126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8046128:	687b      	ldr	r3, [r7, #4]
 804612a:	681b      	ldr	r3, [r3, #0]
 804612c:	681a      	ldr	r2, [r3, #0]
 804612e:	687b      	ldr	r3, [r7, #4]
 8046130:	681b      	ldr	r3, [r3, #0]
 8046132:	f042 0201 	orr.w	r2, r2, #1
 8046136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8046138:	687b      	ldr	r3, [r7, #4]
 804613a:	2200      	movs	r2, #0
 804613c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 804613e:	687b      	ldr	r3, [r7, #4]
 8046140:	2220      	movs	r2, #32
 8046142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8046146:	687b      	ldr	r3, [r7, #4]
 8046148:	2200      	movs	r2, #0
 804614a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 804614c:	687b      	ldr	r3, [r7, #4]
 804614e:	2200      	movs	r2, #0
 8046150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8046154:	2300      	movs	r3, #0
}
 8046156:	4618      	mov	r0, r3
 8046158:	3710      	adds	r7, #16
 804615a:	46bd      	mov	sp, r7
 804615c:	bd80      	pop	{r7, pc}
 804615e:	bf00      	nop
 8046160:	000186a0 	.word	0x000186a0
 8046164:	001e847f 	.word	0x001e847f
 8046168:	003d08ff 	.word	0x003d08ff
 804616c:	431bde83 	.word	0x431bde83
 8046170:	10624dd3 	.word	0x10624dd3

08046174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8046174:	b480      	push	{r7}
 8046176:	b083      	sub	sp, #12
 8046178:	af00      	add	r7, sp, #0
 804617a:	6078      	str	r0, [r7, #4]
 804617c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804617e:	687b      	ldr	r3, [r7, #4]
 8046180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046184:	b2db      	uxtb	r3, r3
 8046186:	2b20      	cmp	r3, #32
 8046188:	d129      	bne.n	80461de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 804618a:	687b      	ldr	r3, [r7, #4]
 804618c:	2224      	movs	r2, #36	; 0x24
 804618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8046192:	687b      	ldr	r3, [r7, #4]
 8046194:	681b      	ldr	r3, [r3, #0]
 8046196:	681a      	ldr	r2, [r3, #0]
 8046198:	687b      	ldr	r3, [r7, #4]
 804619a:	681b      	ldr	r3, [r3, #0]
 804619c:	f022 0201 	bic.w	r2, r2, #1
 80461a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80461a2:	687b      	ldr	r3, [r7, #4]
 80461a4:	681b      	ldr	r3, [r3, #0]
 80461a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80461a8:	687b      	ldr	r3, [r7, #4]
 80461aa:	681b      	ldr	r3, [r3, #0]
 80461ac:	f022 0210 	bic.w	r2, r2, #16
 80461b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80461b2:	687b      	ldr	r3, [r7, #4]
 80461b4:	681b      	ldr	r3, [r3, #0]
 80461b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80461b8:	687b      	ldr	r3, [r7, #4]
 80461ba:	681b      	ldr	r3, [r3, #0]
 80461bc:	683a      	ldr	r2, [r7, #0]
 80461be:	430a      	orrs	r2, r1
 80461c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80461c2:	687b      	ldr	r3, [r7, #4]
 80461c4:	681b      	ldr	r3, [r3, #0]
 80461c6:	681a      	ldr	r2, [r3, #0]
 80461c8:	687b      	ldr	r3, [r7, #4]
 80461ca:	681b      	ldr	r3, [r3, #0]
 80461cc:	f042 0201 	orr.w	r2, r2, #1
 80461d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80461d2:	687b      	ldr	r3, [r7, #4]
 80461d4:	2220      	movs	r2, #32
 80461d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80461da:	2300      	movs	r3, #0
 80461dc:	e000      	b.n	80461e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80461de:	2302      	movs	r3, #2
  }
}
 80461e0:	4618      	mov	r0, r3
 80461e2:	370c      	adds	r7, #12
 80461e4:	46bd      	mov	sp, r7
 80461e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80461ea:	4770      	bx	lr

080461ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80461ec:	b480      	push	{r7}
 80461ee:	b085      	sub	sp, #20
 80461f0:	af00      	add	r7, sp, #0
 80461f2:	6078      	str	r0, [r7, #4]
 80461f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80461f6:	2300      	movs	r3, #0
 80461f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80461fa:	687b      	ldr	r3, [r7, #4]
 80461fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046200:	b2db      	uxtb	r3, r3
 8046202:	2b20      	cmp	r3, #32
 8046204:	d12a      	bne.n	804625c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8046206:	687b      	ldr	r3, [r7, #4]
 8046208:	2224      	movs	r2, #36	; 0x24
 804620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804620e:	687b      	ldr	r3, [r7, #4]
 8046210:	681b      	ldr	r3, [r3, #0]
 8046212:	681a      	ldr	r2, [r3, #0]
 8046214:	687b      	ldr	r3, [r7, #4]
 8046216:	681b      	ldr	r3, [r3, #0]
 8046218:	f022 0201 	bic.w	r2, r2, #1
 804621c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 804621e:	687b      	ldr	r3, [r7, #4]
 8046220:	681b      	ldr	r3, [r3, #0]
 8046222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046224:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8046226:	89fb      	ldrh	r3, [r7, #14]
 8046228:	f023 030f 	bic.w	r3, r3, #15
 804622c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 804622e:	683b      	ldr	r3, [r7, #0]
 8046230:	b29a      	uxth	r2, r3
 8046232:	89fb      	ldrh	r3, [r7, #14]
 8046234:	4313      	orrs	r3, r2
 8046236:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8046238:	687b      	ldr	r3, [r7, #4]
 804623a:	681b      	ldr	r3, [r3, #0]
 804623c:	89fa      	ldrh	r2, [r7, #14]
 804623e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8046240:	687b      	ldr	r3, [r7, #4]
 8046242:	681b      	ldr	r3, [r3, #0]
 8046244:	681a      	ldr	r2, [r3, #0]
 8046246:	687b      	ldr	r3, [r7, #4]
 8046248:	681b      	ldr	r3, [r3, #0]
 804624a:	f042 0201 	orr.w	r2, r2, #1
 804624e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8046250:	687b      	ldr	r3, [r7, #4]
 8046252:	2220      	movs	r2, #32
 8046254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8046258:	2300      	movs	r3, #0
 804625a:	e000      	b.n	804625e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 804625c:	2302      	movs	r3, #2
  }
}
 804625e:	4618      	mov	r0, r3
 8046260:	3714      	adds	r7, #20
 8046262:	46bd      	mov	sp, r7
 8046264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046268:	4770      	bx	lr
	...

0804626c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 804626c:	b580      	push	{r7, lr}
 804626e:	b084      	sub	sp, #16
 8046270:	af00      	add	r7, sp, #0
 8046272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8046274:	687b      	ldr	r3, [r7, #4]
 8046276:	2b00      	cmp	r3, #0
 8046278:	d101      	bne.n	804627e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 804627a:	2301      	movs	r3, #1
 804627c:	e0bf      	b.n	80463fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 804627e:	687b      	ldr	r3, [r7, #4]
 8046280:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8046284:	b2db      	uxtb	r3, r3
 8046286:	2b00      	cmp	r3, #0
 8046288:	d106      	bne.n	8046298 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 804628a:	687b      	ldr	r3, [r7, #4]
 804628c:	2200      	movs	r2, #0
 804628e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8046292:	6878      	ldr	r0, [r7, #4]
 8046294:	f7fb f9d6 	bl	8041644 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046298:	687b      	ldr	r3, [r7, #4]
 804629a:	2202      	movs	r2, #2
 804629c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80462a0:	687b      	ldr	r3, [r7, #4]
 80462a2:	681b      	ldr	r3, [r3, #0]
 80462a4:	699a      	ldr	r2, [r3, #24]
 80462a6:	687b      	ldr	r3, [r7, #4]
 80462a8:	681b      	ldr	r3, [r3, #0]
 80462aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80462ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80462b0:	687b      	ldr	r3, [r7, #4]
 80462b2:	681b      	ldr	r3, [r3, #0]
 80462b4:	6999      	ldr	r1, [r3, #24]
 80462b6:	687b      	ldr	r3, [r7, #4]
 80462b8:	685a      	ldr	r2, [r3, #4]
 80462ba:	687b      	ldr	r3, [r7, #4]
 80462bc:	689b      	ldr	r3, [r3, #8]
 80462be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80462c0:	687b      	ldr	r3, [r7, #4]
 80462c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80462c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80462c6:	687b      	ldr	r3, [r7, #4]
 80462c8:	691b      	ldr	r3, [r3, #16]
 80462ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80462cc:	687b      	ldr	r3, [r7, #4]
 80462ce:	681b      	ldr	r3, [r3, #0]
 80462d0:	430a      	orrs	r2, r1
 80462d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80462d4:	687b      	ldr	r3, [r7, #4]
 80462d6:	681b      	ldr	r3, [r3, #0]
 80462d8:	6899      	ldr	r1, [r3, #8]
 80462da:	687b      	ldr	r3, [r7, #4]
 80462dc:	681a      	ldr	r2, [r3, #0]
 80462de:	4b4a      	ldr	r3, [pc, #296]	; (8046408 <HAL_LTDC_Init+0x19c>)
 80462e0:	400b      	ands	r3, r1
 80462e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80462e4:	687b      	ldr	r3, [r7, #4]
 80462e6:	695b      	ldr	r3, [r3, #20]
 80462e8:	041b      	lsls	r3, r3, #16
 80462ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80462ec:	687b      	ldr	r3, [r7, #4]
 80462ee:	681b      	ldr	r3, [r3, #0]
 80462f0:	6899      	ldr	r1, [r3, #8]
 80462f2:	687b      	ldr	r3, [r7, #4]
 80462f4:	699a      	ldr	r2, [r3, #24]
 80462f6:	68fb      	ldr	r3, [r7, #12]
 80462f8:	431a      	orrs	r2, r3
 80462fa:	687b      	ldr	r3, [r7, #4]
 80462fc:	681b      	ldr	r3, [r3, #0]
 80462fe:	430a      	orrs	r2, r1
 8046300:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8046302:	687b      	ldr	r3, [r7, #4]
 8046304:	681b      	ldr	r3, [r3, #0]
 8046306:	68d9      	ldr	r1, [r3, #12]
 8046308:	687b      	ldr	r3, [r7, #4]
 804630a:	681a      	ldr	r2, [r3, #0]
 804630c:	4b3e      	ldr	r3, [pc, #248]	; (8046408 <HAL_LTDC_Init+0x19c>)
 804630e:	400b      	ands	r3, r1
 8046310:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8046312:	687b      	ldr	r3, [r7, #4]
 8046314:	69db      	ldr	r3, [r3, #28]
 8046316:	041b      	lsls	r3, r3, #16
 8046318:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 804631a:	687b      	ldr	r3, [r7, #4]
 804631c:	681b      	ldr	r3, [r3, #0]
 804631e:	68d9      	ldr	r1, [r3, #12]
 8046320:	687b      	ldr	r3, [r7, #4]
 8046322:	6a1a      	ldr	r2, [r3, #32]
 8046324:	68fb      	ldr	r3, [r7, #12]
 8046326:	431a      	orrs	r2, r3
 8046328:	687b      	ldr	r3, [r7, #4]
 804632a:	681b      	ldr	r3, [r3, #0]
 804632c:	430a      	orrs	r2, r1
 804632e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8046330:	687b      	ldr	r3, [r7, #4]
 8046332:	681b      	ldr	r3, [r3, #0]
 8046334:	6919      	ldr	r1, [r3, #16]
 8046336:	687b      	ldr	r3, [r7, #4]
 8046338:	681a      	ldr	r2, [r3, #0]
 804633a:	4b33      	ldr	r3, [pc, #204]	; (8046408 <HAL_LTDC_Init+0x19c>)
 804633c:	400b      	ands	r3, r1
 804633e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8046340:	687b      	ldr	r3, [r7, #4]
 8046342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046344:	041b      	lsls	r3, r3, #16
 8046346:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8046348:	687b      	ldr	r3, [r7, #4]
 804634a:	681b      	ldr	r3, [r3, #0]
 804634c:	6919      	ldr	r1, [r3, #16]
 804634e:	687b      	ldr	r3, [r7, #4]
 8046350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8046352:	68fb      	ldr	r3, [r7, #12]
 8046354:	431a      	orrs	r2, r3
 8046356:	687b      	ldr	r3, [r7, #4]
 8046358:	681b      	ldr	r3, [r3, #0]
 804635a:	430a      	orrs	r2, r1
 804635c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 804635e:	687b      	ldr	r3, [r7, #4]
 8046360:	681b      	ldr	r3, [r3, #0]
 8046362:	6959      	ldr	r1, [r3, #20]
 8046364:	687b      	ldr	r3, [r7, #4]
 8046366:	681a      	ldr	r2, [r3, #0]
 8046368:	4b27      	ldr	r3, [pc, #156]	; (8046408 <HAL_LTDC_Init+0x19c>)
 804636a:	400b      	ands	r3, r1
 804636c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 804636e:	687b      	ldr	r3, [r7, #4]
 8046370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046372:	041b      	lsls	r3, r3, #16
 8046374:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8046376:	687b      	ldr	r3, [r7, #4]
 8046378:	681b      	ldr	r3, [r3, #0]
 804637a:	6959      	ldr	r1, [r3, #20]
 804637c:	687b      	ldr	r3, [r7, #4]
 804637e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046380:	68fb      	ldr	r3, [r7, #12]
 8046382:	431a      	orrs	r2, r3
 8046384:	687b      	ldr	r3, [r7, #4]
 8046386:	681b      	ldr	r3, [r3, #0]
 8046388:	430a      	orrs	r2, r1
 804638a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 804638c:	687b      	ldr	r3, [r7, #4]
 804638e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8046392:	021b      	lsls	r3, r3, #8
 8046394:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8046396:	687b      	ldr	r3, [r7, #4]
 8046398:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 804639c:	041b      	lsls	r3, r3, #16
 804639e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80463a0:	687b      	ldr	r3, [r7, #4]
 80463a2:	681b      	ldr	r3, [r3, #0]
 80463a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80463a6:	687b      	ldr	r3, [r7, #4]
 80463a8:	681b      	ldr	r3, [r3, #0]
 80463aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80463ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80463b0:	687b      	ldr	r3, [r7, #4]
 80463b2:	681b      	ldr	r3, [r3, #0]
 80463b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80463b6:	68ba      	ldr	r2, [r7, #8]
 80463b8:	68fb      	ldr	r3, [r7, #12]
 80463ba:	4313      	orrs	r3, r2
 80463bc:	687a      	ldr	r2, [r7, #4]
 80463be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80463c2:	431a      	orrs	r2, r3
 80463c4:	687b      	ldr	r3, [r7, #4]
 80463c6:	681b      	ldr	r3, [r3, #0]
 80463c8:	430a      	orrs	r2, r1
 80463ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80463cc:	687b      	ldr	r3, [r7, #4]
 80463ce:	681b      	ldr	r3, [r3, #0]
 80463d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80463d2:	687b      	ldr	r3, [r7, #4]
 80463d4:	681b      	ldr	r3, [r3, #0]
 80463d6:	f042 0206 	orr.w	r2, r2, #6
 80463da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80463dc:	687b      	ldr	r3, [r7, #4]
 80463de:	681b      	ldr	r3, [r3, #0]
 80463e0:	699a      	ldr	r2, [r3, #24]
 80463e2:	687b      	ldr	r3, [r7, #4]
 80463e4:	681b      	ldr	r3, [r3, #0]
 80463e6:	f042 0201 	orr.w	r2, r2, #1
 80463ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80463ec:	687b      	ldr	r3, [r7, #4]
 80463ee:	2200      	movs	r2, #0
 80463f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80463f4:	687b      	ldr	r3, [r7, #4]
 80463f6:	2201      	movs	r2, #1
 80463f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80463fc:	2300      	movs	r3, #0
}
 80463fe:	4618      	mov	r0, r3
 8046400:	3710      	adds	r7, #16
 8046402:	46bd      	mov	sp, r7
 8046404:	bd80      	pop	{r7, pc}
 8046406:	bf00      	nop
 8046408:	f000f800 	.word	0xf000f800

0804640c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 804640c:	b580      	push	{r7, lr}
 804640e:	b084      	sub	sp, #16
 8046410:	af00      	add	r7, sp, #0
 8046412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8046414:	687b      	ldr	r3, [r7, #4]
 8046416:	681b      	ldr	r3, [r3, #0]
 8046418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804641a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 804641c:	687b      	ldr	r3, [r7, #4]
 804641e:	681b      	ldr	r3, [r3, #0]
 8046420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046422:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8046424:	68fb      	ldr	r3, [r7, #12]
 8046426:	f003 0304 	and.w	r3, r3, #4
 804642a:	2b00      	cmp	r3, #0
 804642c:	d023      	beq.n	8046476 <HAL_LTDC_IRQHandler+0x6a>
 804642e:	68bb      	ldr	r3, [r7, #8]
 8046430:	f003 0304 	and.w	r3, r3, #4
 8046434:	2b00      	cmp	r3, #0
 8046436:	d01e      	beq.n	8046476 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8046438:	687b      	ldr	r3, [r7, #4]
 804643a:	681b      	ldr	r3, [r3, #0]
 804643c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804643e:	687b      	ldr	r3, [r7, #4]
 8046440:	681b      	ldr	r3, [r3, #0]
 8046442:	f022 0204 	bic.w	r2, r2, #4
 8046446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8046448:	687b      	ldr	r3, [r7, #4]
 804644a:	681b      	ldr	r3, [r3, #0]
 804644c:	2204      	movs	r2, #4
 804644e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8046450:	687b      	ldr	r3, [r7, #4]
 8046452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8046456:	f043 0201 	orr.w	r2, r3, #1
 804645a:	687b      	ldr	r3, [r7, #4]
 804645c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8046460:	687b      	ldr	r3, [r7, #4]
 8046462:	2204      	movs	r2, #4
 8046464:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046468:	687b      	ldr	r3, [r7, #4]
 804646a:	2200      	movs	r2, #0
 804646c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8046470:	6878      	ldr	r0, [r7, #4]
 8046472:	f000 f86f 	bl	8046554 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8046476:	68fb      	ldr	r3, [r7, #12]
 8046478:	f003 0302 	and.w	r3, r3, #2
 804647c:	2b00      	cmp	r3, #0
 804647e:	d023      	beq.n	80464c8 <HAL_LTDC_IRQHandler+0xbc>
 8046480:	68bb      	ldr	r3, [r7, #8]
 8046482:	f003 0302 	and.w	r3, r3, #2
 8046486:	2b00      	cmp	r3, #0
 8046488:	d01e      	beq.n	80464c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 804648a:	687b      	ldr	r3, [r7, #4]
 804648c:	681b      	ldr	r3, [r3, #0]
 804648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046490:	687b      	ldr	r3, [r7, #4]
 8046492:	681b      	ldr	r3, [r3, #0]
 8046494:	f022 0202 	bic.w	r2, r2, #2
 8046498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 804649a:	687b      	ldr	r3, [r7, #4]
 804649c:	681b      	ldr	r3, [r3, #0]
 804649e:	2202      	movs	r2, #2
 80464a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80464a2:	687b      	ldr	r3, [r7, #4]
 80464a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80464a8:	f043 0202 	orr.w	r2, r3, #2
 80464ac:	687b      	ldr	r3, [r7, #4]
 80464ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80464b2:	687b      	ldr	r3, [r7, #4]
 80464b4:	2204      	movs	r2, #4
 80464b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80464ba:	687b      	ldr	r3, [r7, #4]
 80464bc:	2200      	movs	r2, #0
 80464be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80464c2:	6878      	ldr	r0, [r7, #4]
 80464c4:	f000 f846 	bl	8046554 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80464c8:	68fb      	ldr	r3, [r7, #12]
 80464ca:	f003 0301 	and.w	r3, r3, #1
 80464ce:	2b00      	cmp	r3, #0
 80464d0:	d01b      	beq.n	804650a <HAL_LTDC_IRQHandler+0xfe>
 80464d2:	68bb      	ldr	r3, [r7, #8]
 80464d4:	f003 0301 	and.w	r3, r3, #1
 80464d8:	2b00      	cmp	r3, #0
 80464da:	d016      	beq.n	804650a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80464dc:	687b      	ldr	r3, [r7, #4]
 80464de:	681b      	ldr	r3, [r3, #0]
 80464e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80464e2:	687b      	ldr	r3, [r7, #4]
 80464e4:	681b      	ldr	r3, [r3, #0]
 80464e6:	f022 0201 	bic.w	r2, r2, #1
 80464ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80464ec:	687b      	ldr	r3, [r7, #4]
 80464ee:	681b      	ldr	r3, [r3, #0]
 80464f0:	2201      	movs	r2, #1
 80464f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80464f4:	687b      	ldr	r3, [r7, #4]
 80464f6:	2201      	movs	r2, #1
 80464f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80464fc:	687b      	ldr	r3, [r7, #4]
 80464fe:	2200      	movs	r2, #0
 8046500:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8046504:	6878      	ldr	r0, [r7, #4]
 8046506:	f000 f82f 	bl	8046568 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 804650a:	68fb      	ldr	r3, [r7, #12]
 804650c:	f003 0308 	and.w	r3, r3, #8
 8046510:	2b00      	cmp	r3, #0
 8046512:	d01b      	beq.n	804654c <HAL_LTDC_IRQHandler+0x140>
 8046514:	68bb      	ldr	r3, [r7, #8]
 8046516:	f003 0308 	and.w	r3, r3, #8
 804651a:	2b00      	cmp	r3, #0
 804651c:	d016      	beq.n	804654c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 804651e:	687b      	ldr	r3, [r7, #4]
 8046520:	681b      	ldr	r3, [r3, #0]
 8046522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046524:	687b      	ldr	r3, [r7, #4]
 8046526:	681b      	ldr	r3, [r3, #0]
 8046528:	f022 0208 	bic.w	r2, r2, #8
 804652c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 804652e:	687b      	ldr	r3, [r7, #4]
 8046530:	681b      	ldr	r3, [r3, #0]
 8046532:	2208      	movs	r2, #8
 8046534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8046536:	687b      	ldr	r3, [r7, #4]
 8046538:	2201      	movs	r2, #1
 804653a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 804653e:	687b      	ldr	r3, [r7, #4]
 8046540:	2200      	movs	r2, #0
 8046542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8046546:	6878      	ldr	r0, [r7, #4]
 8046548:	f000 f818 	bl	804657c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 804654c:	bf00      	nop
 804654e:	3710      	adds	r7, #16
 8046550:	46bd      	mov	sp, r7
 8046552:	bd80      	pop	{r7, pc}

08046554 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8046554:	b480      	push	{r7}
 8046556:	b083      	sub	sp, #12
 8046558:	af00      	add	r7, sp, #0
 804655a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 804655c:	bf00      	nop
 804655e:	370c      	adds	r7, #12
 8046560:	46bd      	mov	sp, r7
 8046562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046566:	4770      	bx	lr

08046568 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8046568:	b480      	push	{r7}
 804656a:	b083      	sub	sp, #12
 804656c:	af00      	add	r7, sp, #0
 804656e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8046570:	bf00      	nop
 8046572:	370c      	adds	r7, #12
 8046574:	46bd      	mov	sp, r7
 8046576:	f85d 7b04 	ldr.w	r7, [sp], #4
 804657a:	4770      	bx	lr

0804657c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 804657c:	b480      	push	{r7}
 804657e:	b083      	sub	sp, #12
 8046580:	af00      	add	r7, sp, #0
 8046582:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8046584:	bf00      	nop
 8046586:	370c      	adds	r7, #12
 8046588:	46bd      	mov	sp, r7
 804658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804658e:	4770      	bx	lr

08046590 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046590:	b5b0      	push	{r4, r5, r7, lr}
 8046592:	b084      	sub	sp, #16
 8046594:	af00      	add	r7, sp, #0
 8046596:	60f8      	str	r0, [r7, #12]
 8046598:	60b9      	str	r1, [r7, #8]
 804659a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 804659c:	68fb      	ldr	r3, [r7, #12]
 804659e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80465a2:	2b01      	cmp	r3, #1
 80465a4:	d101      	bne.n	80465aa <HAL_LTDC_ConfigLayer+0x1a>
 80465a6:	2302      	movs	r3, #2
 80465a8:	e02c      	b.n	8046604 <HAL_LTDC_ConfigLayer+0x74>
 80465aa:	68fb      	ldr	r3, [r7, #12]
 80465ac:	2201      	movs	r2, #1
 80465ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80465b2:	68fb      	ldr	r3, [r7, #12]
 80465b4:	2202      	movs	r2, #2
 80465b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80465ba:	68fa      	ldr	r2, [r7, #12]
 80465bc:	687b      	ldr	r3, [r7, #4]
 80465be:	2134      	movs	r1, #52	; 0x34
 80465c0:	fb01 f303 	mul.w	r3, r1, r3
 80465c4:	4413      	add	r3, r2
 80465c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80465ca:	68bb      	ldr	r3, [r7, #8]
 80465cc:	4614      	mov	r4, r2
 80465ce:	461d      	mov	r5, r3
 80465d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80465d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80465d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80465d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80465d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80465da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80465dc:	682b      	ldr	r3, [r5, #0]
 80465de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80465e0:	687a      	ldr	r2, [r7, #4]
 80465e2:	68b9      	ldr	r1, [r7, #8]
 80465e4:	68f8      	ldr	r0, [r7, #12]
 80465e6:	f000 f8b9 	bl	804675c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80465ea:	68fb      	ldr	r3, [r7, #12]
 80465ec:	681b      	ldr	r3, [r3, #0]
 80465ee:	2201      	movs	r2, #1
 80465f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80465f2:	68fb      	ldr	r3, [r7, #12]
 80465f4:	2201      	movs	r2, #1
 80465f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80465fa:	68fb      	ldr	r3, [r7, #12]
 80465fc:	2200      	movs	r2, #0
 80465fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046602:	2300      	movs	r3, #0
}
 8046604:	4618      	mov	r0, r3
 8046606:	3710      	adds	r7, #16
 8046608:	46bd      	mov	sp, r7
 804660a:	bdb0      	pop	{r4, r5, r7, pc}

0804660c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 804660c:	b480      	push	{r7}
 804660e:	b085      	sub	sp, #20
 8046610:	af00      	add	r7, sp, #0
 8046612:	60f8      	str	r0, [r7, #12]
 8046614:	60b9      	str	r1, [r7, #8]
 8046616:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046618:	68fb      	ldr	r3, [r7, #12]
 804661a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 804661e:	2b01      	cmp	r3, #1
 8046620:	d101      	bne.n	8046626 <HAL_LTDC_ConfigColorKeying+0x1a>
 8046622:	2302      	movs	r3, #2
 8046624:	e030      	b.n	8046688 <HAL_LTDC_ConfigColorKeying+0x7c>
 8046626:	68fb      	ldr	r3, [r7, #12]
 8046628:	2201      	movs	r2, #1
 804662a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 804662e:	68fb      	ldr	r3, [r7, #12]
 8046630:	2202      	movs	r2, #2
 8046632:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8046636:	68fb      	ldr	r3, [r7, #12]
 8046638:	681b      	ldr	r3, [r3, #0]
 804663a:	461a      	mov	r2, r3
 804663c:	687b      	ldr	r3, [r7, #4]
 804663e:	01db      	lsls	r3, r3, #7
 8046640:	4413      	add	r3, r2
 8046642:	3384      	adds	r3, #132	; 0x84
 8046644:	68db      	ldr	r3, [r3, #12]
 8046646:	68fa      	ldr	r2, [r7, #12]
 8046648:	6812      	ldr	r2, [r2, #0]
 804664a:	4611      	mov	r1, r2
 804664c:	687a      	ldr	r2, [r7, #4]
 804664e:	01d2      	lsls	r2, r2, #7
 8046650:	440a      	add	r2, r1
 8046652:	3284      	adds	r2, #132	; 0x84
 8046654:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8046658:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 804665a:	68fb      	ldr	r3, [r7, #12]
 804665c:	681b      	ldr	r3, [r3, #0]
 804665e:	461a      	mov	r2, r3
 8046660:	687b      	ldr	r3, [r7, #4]
 8046662:	01db      	lsls	r3, r3, #7
 8046664:	4413      	add	r3, r2
 8046666:	3384      	adds	r3, #132	; 0x84
 8046668:	461a      	mov	r2, r3
 804666a:	68bb      	ldr	r3, [r7, #8]
 804666c:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 804666e:	68fb      	ldr	r3, [r7, #12]
 8046670:	681b      	ldr	r3, [r3, #0]
 8046672:	2201      	movs	r2, #1
 8046674:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8046676:	68fb      	ldr	r3, [r7, #12]
 8046678:	2201      	movs	r2, #1
 804667a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 804667e:	68fb      	ldr	r3, [r7, #12]
 8046680:	2200      	movs	r2, #0
 8046682:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8046686:	2300      	movs	r3, #0
}
 8046688:	4618      	mov	r0, r3
 804668a:	3714      	adds	r7, #20
 804668c:	46bd      	mov	sp, r7
 804668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046692:	4770      	bx	lr

08046694 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8046694:	b480      	push	{r7}
 8046696:	b083      	sub	sp, #12
 8046698:	af00      	add	r7, sp, #0
 804669a:	6078      	str	r0, [r7, #4]
 804669c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 804669e:	687b      	ldr	r3, [r7, #4]
 80466a0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80466a4:	2b01      	cmp	r3, #1
 80466a6:	d101      	bne.n	80466ac <HAL_LTDC_EnableColorKeying+0x18>
 80466a8:	2302      	movs	r3, #2
 80466aa:	e026      	b.n	80466fa <HAL_LTDC_EnableColorKeying+0x66>
 80466ac:	687b      	ldr	r3, [r7, #4]
 80466ae:	2201      	movs	r2, #1
 80466b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80466b4:	687b      	ldr	r3, [r7, #4]
 80466b6:	2202      	movs	r2, #2
 80466b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80466bc:	687b      	ldr	r3, [r7, #4]
 80466be:	681b      	ldr	r3, [r3, #0]
 80466c0:	461a      	mov	r2, r3
 80466c2:	683b      	ldr	r3, [r7, #0]
 80466c4:	01db      	lsls	r3, r3, #7
 80466c6:	4413      	add	r3, r2
 80466c8:	3384      	adds	r3, #132	; 0x84
 80466ca:	681b      	ldr	r3, [r3, #0]
 80466cc:	687a      	ldr	r2, [r7, #4]
 80466ce:	6812      	ldr	r2, [r2, #0]
 80466d0:	4611      	mov	r1, r2
 80466d2:	683a      	ldr	r2, [r7, #0]
 80466d4:	01d2      	lsls	r2, r2, #7
 80466d6:	440a      	add	r2, r1
 80466d8:	3284      	adds	r2, #132	; 0x84
 80466da:	f043 0302 	orr.w	r3, r3, #2
 80466de:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80466e0:	687b      	ldr	r3, [r7, #4]
 80466e2:	681b      	ldr	r3, [r3, #0]
 80466e4:	2201      	movs	r2, #1
 80466e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80466e8:	687b      	ldr	r3, [r7, #4]
 80466ea:	2201      	movs	r2, #1
 80466ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80466f0:	687b      	ldr	r3, [r7, #4]
 80466f2:	2200      	movs	r2, #0
 80466f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80466f8:	2300      	movs	r3, #0
}
 80466fa:	4618      	mov	r0, r3
 80466fc:	370c      	adds	r7, #12
 80466fe:	46bd      	mov	sp, r7
 8046700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046704:	4770      	bx	lr
	...

08046708 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8046708:	b480      	push	{r7}
 804670a:	b083      	sub	sp, #12
 804670c:	af00      	add	r7, sp, #0
 804670e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8046710:	687b      	ldr	r3, [r7, #4]
 8046712:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046716:	2b01      	cmp	r3, #1
 8046718:	d101      	bne.n	804671e <HAL_LTDC_EnableDither+0x16>
 804671a:	2302      	movs	r3, #2
 804671c:	e016      	b.n	804674c <HAL_LTDC_EnableDither+0x44>
 804671e:	687b      	ldr	r3, [r7, #4]
 8046720:	2201      	movs	r2, #1
 8046722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046726:	687b      	ldr	r3, [r7, #4]
 8046728:	2202      	movs	r2, #2
 804672a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 804672e:	4b0a      	ldr	r3, [pc, #40]	; (8046758 <HAL_LTDC_EnableDither+0x50>)
 8046730:	699b      	ldr	r3, [r3, #24]
 8046732:	4a09      	ldr	r2, [pc, #36]	; (8046758 <HAL_LTDC_EnableDither+0x50>)
 8046734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046738:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804673a:	687b      	ldr	r3, [r7, #4]
 804673c:	2201      	movs	r2, #1
 804673e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046742:	687b      	ldr	r3, [r7, #4]
 8046744:	2200      	movs	r2, #0
 8046746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804674a:	2300      	movs	r3, #0
}
 804674c:	4618      	mov	r0, r3
 804674e:	370c      	adds	r7, #12
 8046750:	46bd      	mov	sp, r7
 8046752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046756:	4770      	bx	lr
 8046758:	40016800 	.word	0x40016800

0804675c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 804675c:	b480      	push	{r7}
 804675e:	b089      	sub	sp, #36	; 0x24
 8046760:	af00      	add	r7, sp, #0
 8046762:	60f8      	str	r0, [r7, #12]
 8046764:	60b9      	str	r1, [r7, #8]
 8046766:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8046768:	68bb      	ldr	r3, [r7, #8]
 804676a:	685a      	ldr	r2, [r3, #4]
 804676c:	68fb      	ldr	r3, [r7, #12]
 804676e:	681b      	ldr	r3, [r3, #0]
 8046770:	68db      	ldr	r3, [r3, #12]
 8046772:	0c1b      	lsrs	r3, r3, #16
 8046774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8046778:	4413      	add	r3, r2
 804677a:	041b      	lsls	r3, r3, #16
 804677c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 804677e:	68fb      	ldr	r3, [r7, #12]
 8046780:	681b      	ldr	r3, [r3, #0]
 8046782:	461a      	mov	r2, r3
 8046784:	687b      	ldr	r3, [r7, #4]
 8046786:	01db      	lsls	r3, r3, #7
 8046788:	4413      	add	r3, r2
 804678a:	3384      	adds	r3, #132	; 0x84
 804678c:	685b      	ldr	r3, [r3, #4]
 804678e:	68fa      	ldr	r2, [r7, #12]
 8046790:	6812      	ldr	r2, [r2, #0]
 8046792:	4611      	mov	r1, r2
 8046794:	687a      	ldr	r2, [r7, #4]
 8046796:	01d2      	lsls	r2, r2, #7
 8046798:	440a      	add	r2, r1
 804679a:	3284      	adds	r2, #132	; 0x84
 804679c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80467a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80467a2:	68bb      	ldr	r3, [r7, #8]
 80467a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80467a6:	68fb      	ldr	r3, [r7, #12]
 80467a8:	681b      	ldr	r3, [r3, #0]
 80467aa:	68db      	ldr	r3, [r3, #12]
 80467ac:	0c1b      	lsrs	r3, r3, #16
 80467ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80467b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80467b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80467b6:	68fb      	ldr	r3, [r7, #12]
 80467b8:	681b      	ldr	r3, [r3, #0]
 80467ba:	4619      	mov	r1, r3
 80467bc:	687b      	ldr	r3, [r7, #4]
 80467be:	01db      	lsls	r3, r3, #7
 80467c0:	440b      	add	r3, r1
 80467c2:	3384      	adds	r3, #132	; 0x84
 80467c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80467c6:	69fb      	ldr	r3, [r7, #28]
 80467c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80467ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80467cc:	68bb      	ldr	r3, [r7, #8]
 80467ce:	68da      	ldr	r2, [r3, #12]
 80467d0:	68fb      	ldr	r3, [r7, #12]
 80467d2:	681b      	ldr	r3, [r3, #0]
 80467d4:	68db      	ldr	r3, [r3, #12]
 80467d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80467da:	4413      	add	r3, r2
 80467dc:	041b      	lsls	r3, r3, #16
 80467de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80467e0:	68fb      	ldr	r3, [r7, #12]
 80467e2:	681b      	ldr	r3, [r3, #0]
 80467e4:	461a      	mov	r2, r3
 80467e6:	687b      	ldr	r3, [r7, #4]
 80467e8:	01db      	lsls	r3, r3, #7
 80467ea:	4413      	add	r3, r2
 80467ec:	3384      	adds	r3, #132	; 0x84
 80467ee:	689b      	ldr	r3, [r3, #8]
 80467f0:	68fa      	ldr	r2, [r7, #12]
 80467f2:	6812      	ldr	r2, [r2, #0]
 80467f4:	4611      	mov	r1, r2
 80467f6:	687a      	ldr	r2, [r7, #4]
 80467f8:	01d2      	lsls	r2, r2, #7
 80467fa:	440a      	add	r2, r1
 80467fc:	3284      	adds	r2, #132	; 0x84
 80467fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046802:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8046804:	68bb      	ldr	r3, [r7, #8]
 8046806:	689a      	ldr	r2, [r3, #8]
 8046808:	68fb      	ldr	r3, [r7, #12]
 804680a:	681b      	ldr	r3, [r3, #0]
 804680c:	68db      	ldr	r3, [r3, #12]
 804680e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8046812:	4413      	add	r3, r2
 8046814:	1c5a      	adds	r2, r3, #1
 8046816:	68fb      	ldr	r3, [r7, #12]
 8046818:	681b      	ldr	r3, [r3, #0]
 804681a:	4619      	mov	r1, r3
 804681c:	687b      	ldr	r3, [r7, #4]
 804681e:	01db      	lsls	r3, r3, #7
 8046820:	440b      	add	r3, r1
 8046822:	3384      	adds	r3, #132	; 0x84
 8046824:	4619      	mov	r1, r3
 8046826:	69fb      	ldr	r3, [r7, #28]
 8046828:	4313      	orrs	r3, r2
 804682a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 804682c:	68fb      	ldr	r3, [r7, #12]
 804682e:	681b      	ldr	r3, [r3, #0]
 8046830:	461a      	mov	r2, r3
 8046832:	687b      	ldr	r3, [r7, #4]
 8046834:	01db      	lsls	r3, r3, #7
 8046836:	4413      	add	r3, r2
 8046838:	3384      	adds	r3, #132	; 0x84
 804683a:	691b      	ldr	r3, [r3, #16]
 804683c:	68fa      	ldr	r2, [r7, #12]
 804683e:	6812      	ldr	r2, [r2, #0]
 8046840:	4611      	mov	r1, r2
 8046842:	687a      	ldr	r2, [r7, #4]
 8046844:	01d2      	lsls	r2, r2, #7
 8046846:	440a      	add	r2, r1
 8046848:	3284      	adds	r2, #132	; 0x84
 804684a:	f023 0307 	bic.w	r3, r3, #7
 804684e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8046850:	68fb      	ldr	r3, [r7, #12]
 8046852:	681b      	ldr	r3, [r3, #0]
 8046854:	461a      	mov	r2, r3
 8046856:	687b      	ldr	r3, [r7, #4]
 8046858:	01db      	lsls	r3, r3, #7
 804685a:	4413      	add	r3, r2
 804685c:	3384      	adds	r3, #132	; 0x84
 804685e:	461a      	mov	r2, r3
 8046860:	68bb      	ldr	r3, [r7, #8]
 8046862:	691b      	ldr	r3, [r3, #16]
 8046864:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8046866:	68bb      	ldr	r3, [r7, #8]
 8046868:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 804686c:	021b      	lsls	r3, r3, #8
 804686e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8046870:	68bb      	ldr	r3, [r7, #8]
 8046872:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8046876:	041b      	lsls	r3, r3, #16
 8046878:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 804687a:	68bb      	ldr	r3, [r7, #8]
 804687c:	699b      	ldr	r3, [r3, #24]
 804687e:	061b      	lsls	r3, r3, #24
 8046880:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8046882:	68fb      	ldr	r3, [r7, #12]
 8046884:	681b      	ldr	r3, [r3, #0]
 8046886:	461a      	mov	r2, r3
 8046888:	687b      	ldr	r3, [r7, #4]
 804688a:	01db      	lsls	r3, r3, #7
 804688c:	4413      	add	r3, r2
 804688e:	3384      	adds	r3, #132	; 0x84
 8046890:	699b      	ldr	r3, [r3, #24]
 8046892:	68fb      	ldr	r3, [r7, #12]
 8046894:	681b      	ldr	r3, [r3, #0]
 8046896:	461a      	mov	r2, r3
 8046898:	687b      	ldr	r3, [r7, #4]
 804689a:	01db      	lsls	r3, r3, #7
 804689c:	4413      	add	r3, r2
 804689e:	3384      	adds	r3, #132	; 0x84
 80468a0:	461a      	mov	r2, r3
 80468a2:	2300      	movs	r3, #0
 80468a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80468a6:	68bb      	ldr	r3, [r7, #8]
 80468a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80468ac:	461a      	mov	r2, r3
 80468ae:	69fb      	ldr	r3, [r7, #28]
 80468b0:	431a      	orrs	r2, r3
 80468b2:	69bb      	ldr	r3, [r7, #24]
 80468b4:	431a      	orrs	r2, r3
 80468b6:	68fb      	ldr	r3, [r7, #12]
 80468b8:	681b      	ldr	r3, [r3, #0]
 80468ba:	4619      	mov	r1, r3
 80468bc:	687b      	ldr	r3, [r7, #4]
 80468be:	01db      	lsls	r3, r3, #7
 80468c0:	440b      	add	r3, r1
 80468c2:	3384      	adds	r3, #132	; 0x84
 80468c4:	4619      	mov	r1, r3
 80468c6:	697b      	ldr	r3, [r7, #20]
 80468c8:	4313      	orrs	r3, r2
 80468ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80468cc:	68fb      	ldr	r3, [r7, #12]
 80468ce:	681b      	ldr	r3, [r3, #0]
 80468d0:	461a      	mov	r2, r3
 80468d2:	687b      	ldr	r3, [r7, #4]
 80468d4:	01db      	lsls	r3, r3, #7
 80468d6:	4413      	add	r3, r2
 80468d8:	3384      	adds	r3, #132	; 0x84
 80468da:	695b      	ldr	r3, [r3, #20]
 80468dc:	68fa      	ldr	r2, [r7, #12]
 80468de:	6812      	ldr	r2, [r2, #0]
 80468e0:	4611      	mov	r1, r2
 80468e2:	687a      	ldr	r2, [r7, #4]
 80468e4:	01d2      	lsls	r2, r2, #7
 80468e6:	440a      	add	r2, r1
 80468e8:	3284      	adds	r2, #132	; 0x84
 80468ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80468ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80468f0:	68fb      	ldr	r3, [r7, #12]
 80468f2:	681b      	ldr	r3, [r3, #0]
 80468f4:	461a      	mov	r2, r3
 80468f6:	687b      	ldr	r3, [r7, #4]
 80468f8:	01db      	lsls	r3, r3, #7
 80468fa:	4413      	add	r3, r2
 80468fc:	3384      	adds	r3, #132	; 0x84
 80468fe:	461a      	mov	r2, r3
 8046900:	68bb      	ldr	r3, [r7, #8]
 8046902:	695b      	ldr	r3, [r3, #20]
 8046904:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8046906:	68fb      	ldr	r3, [r7, #12]
 8046908:	681b      	ldr	r3, [r3, #0]
 804690a:	461a      	mov	r2, r3
 804690c:	687b      	ldr	r3, [r7, #4]
 804690e:	01db      	lsls	r3, r3, #7
 8046910:	4413      	add	r3, r2
 8046912:	3384      	adds	r3, #132	; 0x84
 8046914:	69db      	ldr	r3, [r3, #28]
 8046916:	68fa      	ldr	r2, [r7, #12]
 8046918:	6812      	ldr	r2, [r2, #0]
 804691a:	4611      	mov	r1, r2
 804691c:	687a      	ldr	r2, [r7, #4]
 804691e:	01d2      	lsls	r2, r2, #7
 8046920:	440a      	add	r2, r1
 8046922:	3284      	adds	r2, #132	; 0x84
 8046924:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8046928:	f023 0307 	bic.w	r3, r3, #7
 804692c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 804692e:	68bb      	ldr	r3, [r7, #8]
 8046930:	69da      	ldr	r2, [r3, #28]
 8046932:	68bb      	ldr	r3, [r7, #8]
 8046934:	6a1b      	ldr	r3, [r3, #32]
 8046936:	68f9      	ldr	r1, [r7, #12]
 8046938:	6809      	ldr	r1, [r1, #0]
 804693a:	4608      	mov	r0, r1
 804693c:	6879      	ldr	r1, [r7, #4]
 804693e:	01c9      	lsls	r1, r1, #7
 8046940:	4401      	add	r1, r0
 8046942:	3184      	adds	r1, #132	; 0x84
 8046944:	4313      	orrs	r3, r2
 8046946:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8046948:	68fb      	ldr	r3, [r7, #12]
 804694a:	681b      	ldr	r3, [r3, #0]
 804694c:	461a      	mov	r2, r3
 804694e:	687b      	ldr	r3, [r7, #4]
 8046950:	01db      	lsls	r3, r3, #7
 8046952:	4413      	add	r3, r2
 8046954:	3384      	adds	r3, #132	; 0x84
 8046956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046958:	68fb      	ldr	r3, [r7, #12]
 804695a:	681b      	ldr	r3, [r3, #0]
 804695c:	461a      	mov	r2, r3
 804695e:	687b      	ldr	r3, [r7, #4]
 8046960:	01db      	lsls	r3, r3, #7
 8046962:	4413      	add	r3, r2
 8046964:	3384      	adds	r3, #132	; 0x84
 8046966:	461a      	mov	r2, r3
 8046968:	2300      	movs	r3, #0
 804696a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 804696c:	68fb      	ldr	r3, [r7, #12]
 804696e:	681b      	ldr	r3, [r3, #0]
 8046970:	461a      	mov	r2, r3
 8046972:	687b      	ldr	r3, [r7, #4]
 8046974:	01db      	lsls	r3, r3, #7
 8046976:	4413      	add	r3, r2
 8046978:	3384      	adds	r3, #132	; 0x84
 804697a:	461a      	mov	r2, r3
 804697c:	68bb      	ldr	r3, [r7, #8]
 804697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046980:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8046982:	68bb      	ldr	r3, [r7, #8]
 8046984:	691b      	ldr	r3, [r3, #16]
 8046986:	2b00      	cmp	r3, #0
 8046988:	d102      	bne.n	8046990 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 804698a:	2304      	movs	r3, #4
 804698c:	61fb      	str	r3, [r7, #28]
 804698e:	e01b      	b.n	80469c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8046990:	68bb      	ldr	r3, [r7, #8]
 8046992:	691b      	ldr	r3, [r3, #16]
 8046994:	2b01      	cmp	r3, #1
 8046996:	d102      	bne.n	804699e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8046998:	2303      	movs	r3, #3
 804699a:	61fb      	str	r3, [r7, #28]
 804699c:	e014      	b.n	80469c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804699e:	68bb      	ldr	r3, [r7, #8]
 80469a0:	691b      	ldr	r3, [r3, #16]
 80469a2:	2b04      	cmp	r3, #4
 80469a4:	d00b      	beq.n	80469be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80469a6:	68bb      	ldr	r3, [r7, #8]
 80469a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80469aa:	2b02      	cmp	r3, #2
 80469ac:	d007      	beq.n	80469be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80469ae:	68bb      	ldr	r3, [r7, #8]
 80469b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80469b2:	2b03      	cmp	r3, #3
 80469b4:	d003      	beq.n	80469be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80469b6:	68bb      	ldr	r3, [r7, #8]
 80469b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80469ba:	2b07      	cmp	r3, #7
 80469bc:	d102      	bne.n	80469c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80469be:	2302      	movs	r3, #2
 80469c0:	61fb      	str	r3, [r7, #28]
 80469c2:	e001      	b.n	80469c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80469c4:	2301      	movs	r3, #1
 80469c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80469c8:	68fb      	ldr	r3, [r7, #12]
 80469ca:	681b      	ldr	r3, [r3, #0]
 80469cc:	461a      	mov	r2, r3
 80469ce:	687b      	ldr	r3, [r7, #4]
 80469d0:	01db      	lsls	r3, r3, #7
 80469d2:	4413      	add	r3, r2
 80469d4:	3384      	adds	r3, #132	; 0x84
 80469d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80469d8:	68fa      	ldr	r2, [r7, #12]
 80469da:	6812      	ldr	r2, [r2, #0]
 80469dc:	4611      	mov	r1, r2
 80469de:	687a      	ldr	r2, [r7, #4]
 80469e0:	01d2      	lsls	r2, r2, #7
 80469e2:	440a      	add	r2, r1
 80469e4:	3284      	adds	r2, #132	; 0x84
 80469e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80469ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80469ec:	68bb      	ldr	r3, [r7, #8]
 80469ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80469f0:	69fa      	ldr	r2, [r7, #28]
 80469f2:	fb02 f303 	mul.w	r3, r2, r3
 80469f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80469f8:	68bb      	ldr	r3, [r7, #8]
 80469fa:	6859      	ldr	r1, [r3, #4]
 80469fc:	68bb      	ldr	r3, [r7, #8]
 80469fe:	681b      	ldr	r3, [r3, #0]
 8046a00:	1acb      	subs	r3, r1, r3
 8046a02:	69f9      	ldr	r1, [r7, #28]
 8046a04:	fb01 f303 	mul.w	r3, r1, r3
 8046a08:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8046a0a:	68f9      	ldr	r1, [r7, #12]
 8046a0c:	6809      	ldr	r1, [r1, #0]
 8046a0e:	4608      	mov	r0, r1
 8046a10:	6879      	ldr	r1, [r7, #4]
 8046a12:	01c9      	lsls	r1, r1, #7
 8046a14:	4401      	add	r1, r0
 8046a16:	3184      	adds	r1, #132	; 0x84
 8046a18:	4313      	orrs	r3, r2
 8046a1a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8046a1c:	68fb      	ldr	r3, [r7, #12]
 8046a1e:	681b      	ldr	r3, [r3, #0]
 8046a20:	461a      	mov	r2, r3
 8046a22:	687b      	ldr	r3, [r7, #4]
 8046a24:	01db      	lsls	r3, r3, #7
 8046a26:	4413      	add	r3, r2
 8046a28:	3384      	adds	r3, #132	; 0x84
 8046a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046a2c:	68fa      	ldr	r2, [r7, #12]
 8046a2e:	6812      	ldr	r2, [r2, #0]
 8046a30:	4611      	mov	r1, r2
 8046a32:	687a      	ldr	r2, [r7, #4]
 8046a34:	01d2      	lsls	r2, r2, #7
 8046a36:	440a      	add	r2, r1
 8046a38:	3284      	adds	r2, #132	; 0x84
 8046a3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8046a3e:	f023 0307 	bic.w	r3, r3, #7
 8046a42:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8046a44:	68fb      	ldr	r3, [r7, #12]
 8046a46:	681b      	ldr	r3, [r3, #0]
 8046a48:	461a      	mov	r2, r3
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	01db      	lsls	r3, r3, #7
 8046a4e:	4413      	add	r3, r2
 8046a50:	3384      	adds	r3, #132	; 0x84
 8046a52:	461a      	mov	r2, r3
 8046a54:	68bb      	ldr	r3, [r7, #8]
 8046a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046a58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8046a5a:	68fb      	ldr	r3, [r7, #12]
 8046a5c:	681b      	ldr	r3, [r3, #0]
 8046a5e:	461a      	mov	r2, r3
 8046a60:	687b      	ldr	r3, [r7, #4]
 8046a62:	01db      	lsls	r3, r3, #7
 8046a64:	4413      	add	r3, r2
 8046a66:	3384      	adds	r3, #132	; 0x84
 8046a68:	681b      	ldr	r3, [r3, #0]
 8046a6a:	68fa      	ldr	r2, [r7, #12]
 8046a6c:	6812      	ldr	r2, [r2, #0]
 8046a6e:	4611      	mov	r1, r2
 8046a70:	687a      	ldr	r2, [r7, #4]
 8046a72:	01d2      	lsls	r2, r2, #7
 8046a74:	440a      	add	r2, r1
 8046a76:	3284      	adds	r2, #132	; 0x84
 8046a78:	f043 0301 	orr.w	r3, r3, #1
 8046a7c:	6013      	str	r3, [r2, #0]
}
 8046a7e:	bf00      	nop
 8046a80:	3724      	adds	r7, #36	; 0x24
 8046a82:	46bd      	mov	sp, r7
 8046a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a88:	4770      	bx	lr
	...

08046a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8046a8c:	b580      	push	{r7, lr}
 8046a8e:	b086      	sub	sp, #24
 8046a90:	af00      	add	r7, sp, #0
 8046a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046a94:	687b      	ldr	r3, [r7, #4]
 8046a96:	2b00      	cmp	r3, #0
 8046a98:	d101      	bne.n	8046a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8046a9a:	2301      	movs	r3, #1
 8046a9c:	e267      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8046a9e:	687b      	ldr	r3, [r7, #4]
 8046aa0:	681b      	ldr	r3, [r3, #0]
 8046aa2:	f003 0301 	and.w	r3, r3, #1
 8046aa6:	2b00      	cmp	r3, #0
 8046aa8:	d075      	beq.n	8046b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046aaa:	4b88      	ldr	r3, [pc, #544]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046aac:	689b      	ldr	r3, [r3, #8]
 8046aae:	f003 030c 	and.w	r3, r3, #12
 8046ab2:	2b04      	cmp	r3, #4
 8046ab4:	d00c      	beq.n	8046ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046ab6:	4b85      	ldr	r3, [pc, #532]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046ab8:	689b      	ldr	r3, [r3, #8]
 8046aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8046abe:	2b08      	cmp	r3, #8
 8046ac0:	d112      	bne.n	8046ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8046ac2:	4b82      	ldr	r3, [pc, #520]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046ac4:	685b      	ldr	r3, [r3, #4]
 8046ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8046ace:	d10b      	bne.n	8046ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046ad0:	4b7e      	ldr	r3, [pc, #504]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046ad2:	681b      	ldr	r3, [r3, #0]
 8046ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046ad8:	2b00      	cmp	r3, #0
 8046ada:	d05b      	beq.n	8046b94 <HAL_RCC_OscConfig+0x108>
 8046adc:	687b      	ldr	r3, [r7, #4]
 8046ade:	685b      	ldr	r3, [r3, #4]
 8046ae0:	2b00      	cmp	r3, #0
 8046ae2:	d157      	bne.n	8046b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8046ae4:	2301      	movs	r3, #1
 8046ae6:	e242      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8046ae8:	687b      	ldr	r3, [r7, #4]
 8046aea:	685b      	ldr	r3, [r3, #4]
 8046aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046af0:	d106      	bne.n	8046b00 <HAL_RCC_OscConfig+0x74>
 8046af2:	4b76      	ldr	r3, [pc, #472]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046af4:	681b      	ldr	r3, [r3, #0]
 8046af6:	4a75      	ldr	r2, [pc, #468]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046afc:	6013      	str	r3, [r2, #0]
 8046afe:	e01d      	b.n	8046b3c <HAL_RCC_OscConfig+0xb0>
 8046b00:	687b      	ldr	r3, [r7, #4]
 8046b02:	685b      	ldr	r3, [r3, #4]
 8046b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8046b08:	d10c      	bne.n	8046b24 <HAL_RCC_OscConfig+0x98>
 8046b0a:	4b70      	ldr	r3, [pc, #448]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b0c:	681b      	ldr	r3, [r3, #0]
 8046b0e:	4a6f      	ldr	r2, [pc, #444]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8046b14:	6013      	str	r3, [r2, #0]
 8046b16:	4b6d      	ldr	r3, [pc, #436]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b18:	681b      	ldr	r3, [r3, #0]
 8046b1a:	4a6c      	ldr	r2, [pc, #432]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046b20:	6013      	str	r3, [r2, #0]
 8046b22:	e00b      	b.n	8046b3c <HAL_RCC_OscConfig+0xb0>
 8046b24:	4b69      	ldr	r3, [pc, #420]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b26:	681b      	ldr	r3, [r3, #0]
 8046b28:	4a68      	ldr	r2, [pc, #416]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046b2e:	6013      	str	r3, [r2, #0]
 8046b30:	4b66      	ldr	r3, [pc, #408]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b32:	681b      	ldr	r3, [r3, #0]
 8046b34:	4a65      	ldr	r2, [pc, #404]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8046b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8046b3c:	687b      	ldr	r3, [r7, #4]
 8046b3e:	685b      	ldr	r3, [r3, #4]
 8046b40:	2b00      	cmp	r3, #0
 8046b42:	d013      	beq.n	8046b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046b44:	f7fc fc56 	bl	80433f4 <HAL_GetTick>
 8046b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046b4a:	e008      	b.n	8046b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046b4c:	f7fc fc52 	bl	80433f4 <HAL_GetTick>
 8046b50:	4602      	mov	r2, r0
 8046b52:	693b      	ldr	r3, [r7, #16]
 8046b54:	1ad3      	subs	r3, r2, r3
 8046b56:	2b64      	cmp	r3, #100	; 0x64
 8046b58:	d901      	bls.n	8046b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8046b5a:	2303      	movs	r3, #3
 8046b5c:	e207      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046b5e:	4b5b      	ldr	r3, [pc, #364]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b60:	681b      	ldr	r3, [r3, #0]
 8046b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046b66:	2b00      	cmp	r3, #0
 8046b68:	d0f0      	beq.n	8046b4c <HAL_RCC_OscConfig+0xc0>
 8046b6a:	e014      	b.n	8046b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046b6c:	f7fc fc42 	bl	80433f4 <HAL_GetTick>
 8046b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046b72:	e008      	b.n	8046b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046b74:	f7fc fc3e 	bl	80433f4 <HAL_GetTick>
 8046b78:	4602      	mov	r2, r0
 8046b7a:	693b      	ldr	r3, [r7, #16]
 8046b7c:	1ad3      	subs	r3, r2, r3
 8046b7e:	2b64      	cmp	r3, #100	; 0x64
 8046b80:	d901      	bls.n	8046b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8046b82:	2303      	movs	r3, #3
 8046b84:	e1f3      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046b86:	4b51      	ldr	r3, [pc, #324]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046b88:	681b      	ldr	r3, [r3, #0]
 8046b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046b8e:	2b00      	cmp	r3, #0
 8046b90:	d1f0      	bne.n	8046b74 <HAL_RCC_OscConfig+0xe8>
 8046b92:	e000      	b.n	8046b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8046b96:	687b      	ldr	r3, [r7, #4]
 8046b98:	681b      	ldr	r3, [r3, #0]
 8046b9a:	f003 0302 	and.w	r3, r3, #2
 8046b9e:	2b00      	cmp	r3, #0
 8046ba0:	d063      	beq.n	8046c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046ba2:	4b4a      	ldr	r3, [pc, #296]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046ba4:	689b      	ldr	r3, [r3, #8]
 8046ba6:	f003 030c 	and.w	r3, r3, #12
 8046baa:	2b00      	cmp	r3, #0
 8046bac:	d00b      	beq.n	8046bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046bae:	4b47      	ldr	r3, [pc, #284]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046bb0:	689b      	ldr	r3, [r3, #8]
 8046bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046bb6:	2b08      	cmp	r3, #8
 8046bb8:	d11c      	bne.n	8046bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046bba:	4b44      	ldr	r3, [pc, #272]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046bbc:	685b      	ldr	r3, [r3, #4]
 8046bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046bc2:	2b00      	cmp	r3, #0
 8046bc4:	d116      	bne.n	8046bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046bc6:	4b41      	ldr	r3, [pc, #260]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046bc8:	681b      	ldr	r3, [r3, #0]
 8046bca:	f003 0302 	and.w	r3, r3, #2
 8046bce:	2b00      	cmp	r3, #0
 8046bd0:	d005      	beq.n	8046bde <HAL_RCC_OscConfig+0x152>
 8046bd2:	687b      	ldr	r3, [r7, #4]
 8046bd4:	68db      	ldr	r3, [r3, #12]
 8046bd6:	2b01      	cmp	r3, #1
 8046bd8:	d001      	beq.n	8046bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8046bda:	2301      	movs	r3, #1
 8046bdc:	e1c7      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046bde:	4b3b      	ldr	r3, [pc, #236]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046be0:	681b      	ldr	r3, [r3, #0]
 8046be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046be6:	687b      	ldr	r3, [r7, #4]
 8046be8:	691b      	ldr	r3, [r3, #16]
 8046bea:	00db      	lsls	r3, r3, #3
 8046bec:	4937      	ldr	r1, [pc, #220]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046bee:	4313      	orrs	r3, r2
 8046bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046bf2:	e03a      	b.n	8046c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046bf4:	687b      	ldr	r3, [r7, #4]
 8046bf6:	68db      	ldr	r3, [r3, #12]
 8046bf8:	2b00      	cmp	r3, #0
 8046bfa:	d020      	beq.n	8046c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8046bfc:	4b34      	ldr	r3, [pc, #208]	; (8046cd0 <HAL_RCC_OscConfig+0x244>)
 8046bfe:	2201      	movs	r2, #1
 8046c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046c02:	f7fc fbf7 	bl	80433f4 <HAL_GetTick>
 8046c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046c08:	e008      	b.n	8046c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046c0a:	f7fc fbf3 	bl	80433f4 <HAL_GetTick>
 8046c0e:	4602      	mov	r2, r0
 8046c10:	693b      	ldr	r3, [r7, #16]
 8046c12:	1ad3      	subs	r3, r2, r3
 8046c14:	2b02      	cmp	r3, #2
 8046c16:	d901      	bls.n	8046c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8046c18:	2303      	movs	r3, #3
 8046c1a:	e1a8      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046c1c:	4b2b      	ldr	r3, [pc, #172]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046c1e:	681b      	ldr	r3, [r3, #0]
 8046c20:	f003 0302 	and.w	r3, r3, #2
 8046c24:	2b00      	cmp	r3, #0
 8046c26:	d0f0      	beq.n	8046c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046c28:	4b28      	ldr	r3, [pc, #160]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046c2a:	681b      	ldr	r3, [r3, #0]
 8046c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046c30:	687b      	ldr	r3, [r7, #4]
 8046c32:	691b      	ldr	r3, [r3, #16]
 8046c34:	00db      	lsls	r3, r3, #3
 8046c36:	4925      	ldr	r1, [pc, #148]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046c38:	4313      	orrs	r3, r2
 8046c3a:	600b      	str	r3, [r1, #0]
 8046c3c:	e015      	b.n	8046c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8046c3e:	4b24      	ldr	r3, [pc, #144]	; (8046cd0 <HAL_RCC_OscConfig+0x244>)
 8046c40:	2200      	movs	r2, #0
 8046c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046c44:	f7fc fbd6 	bl	80433f4 <HAL_GetTick>
 8046c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046c4a:	e008      	b.n	8046c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046c4c:	f7fc fbd2 	bl	80433f4 <HAL_GetTick>
 8046c50:	4602      	mov	r2, r0
 8046c52:	693b      	ldr	r3, [r7, #16]
 8046c54:	1ad3      	subs	r3, r2, r3
 8046c56:	2b02      	cmp	r3, #2
 8046c58:	d901      	bls.n	8046c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8046c5a:	2303      	movs	r3, #3
 8046c5c:	e187      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046c5e:	4b1b      	ldr	r3, [pc, #108]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046c60:	681b      	ldr	r3, [r3, #0]
 8046c62:	f003 0302 	and.w	r3, r3, #2
 8046c66:	2b00      	cmp	r3, #0
 8046c68:	d1f0      	bne.n	8046c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8046c6a:	687b      	ldr	r3, [r7, #4]
 8046c6c:	681b      	ldr	r3, [r3, #0]
 8046c6e:	f003 0308 	and.w	r3, r3, #8
 8046c72:	2b00      	cmp	r3, #0
 8046c74:	d036      	beq.n	8046ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8046c76:	687b      	ldr	r3, [r7, #4]
 8046c78:	695b      	ldr	r3, [r3, #20]
 8046c7a:	2b00      	cmp	r3, #0
 8046c7c:	d016      	beq.n	8046cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8046c7e:	4b15      	ldr	r3, [pc, #84]	; (8046cd4 <HAL_RCC_OscConfig+0x248>)
 8046c80:	2201      	movs	r2, #1
 8046c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046c84:	f7fc fbb6 	bl	80433f4 <HAL_GetTick>
 8046c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046c8a:	e008      	b.n	8046c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046c8c:	f7fc fbb2 	bl	80433f4 <HAL_GetTick>
 8046c90:	4602      	mov	r2, r0
 8046c92:	693b      	ldr	r3, [r7, #16]
 8046c94:	1ad3      	subs	r3, r2, r3
 8046c96:	2b02      	cmp	r3, #2
 8046c98:	d901      	bls.n	8046c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8046c9a:	2303      	movs	r3, #3
 8046c9c:	e167      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046c9e:	4b0b      	ldr	r3, [pc, #44]	; (8046ccc <HAL_RCC_OscConfig+0x240>)
 8046ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046ca2:	f003 0302 	and.w	r3, r3, #2
 8046ca6:	2b00      	cmp	r3, #0
 8046ca8:	d0f0      	beq.n	8046c8c <HAL_RCC_OscConfig+0x200>
 8046caa:	e01b      	b.n	8046ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046cac:	4b09      	ldr	r3, [pc, #36]	; (8046cd4 <HAL_RCC_OscConfig+0x248>)
 8046cae:	2200      	movs	r2, #0
 8046cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046cb2:	f7fc fb9f 	bl	80433f4 <HAL_GetTick>
 8046cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046cb8:	e00e      	b.n	8046cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046cba:	f7fc fb9b 	bl	80433f4 <HAL_GetTick>
 8046cbe:	4602      	mov	r2, r0
 8046cc0:	693b      	ldr	r3, [r7, #16]
 8046cc2:	1ad3      	subs	r3, r2, r3
 8046cc4:	2b02      	cmp	r3, #2
 8046cc6:	d907      	bls.n	8046cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8046cc8:	2303      	movs	r3, #3
 8046cca:	e150      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
 8046ccc:	40023800 	.word	0x40023800
 8046cd0:	42470000 	.word	0x42470000
 8046cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046cd8:	4b88      	ldr	r3, [pc, #544]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046cdc:	f003 0302 	and.w	r3, r3, #2
 8046ce0:	2b00      	cmp	r3, #0
 8046ce2:	d1ea      	bne.n	8046cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046ce4:	687b      	ldr	r3, [r7, #4]
 8046ce6:	681b      	ldr	r3, [r3, #0]
 8046ce8:	f003 0304 	and.w	r3, r3, #4
 8046cec:	2b00      	cmp	r3, #0
 8046cee:	f000 8097 	beq.w	8046e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8046cf2:	2300      	movs	r3, #0
 8046cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8046cf6:	4b81      	ldr	r3, [pc, #516]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046cfe:	2b00      	cmp	r3, #0
 8046d00:	d10f      	bne.n	8046d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8046d02:	2300      	movs	r3, #0
 8046d04:	60bb      	str	r3, [r7, #8]
 8046d06:	4b7d      	ldr	r3, [pc, #500]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046d0a:	4a7c      	ldr	r2, [pc, #496]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046d10:	6413      	str	r3, [r2, #64]	; 0x40
 8046d12:	4b7a      	ldr	r3, [pc, #488]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046d1a:	60bb      	str	r3, [r7, #8]
 8046d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8046d1e:	2301      	movs	r3, #1
 8046d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046d22:	4b77      	ldr	r3, [pc, #476]	; (8046f00 <HAL_RCC_OscConfig+0x474>)
 8046d24:	681b      	ldr	r3, [r3, #0]
 8046d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046d2a:	2b00      	cmp	r3, #0
 8046d2c:	d118      	bne.n	8046d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8046d2e:	4b74      	ldr	r3, [pc, #464]	; (8046f00 <HAL_RCC_OscConfig+0x474>)
 8046d30:	681b      	ldr	r3, [r3, #0]
 8046d32:	4a73      	ldr	r2, [pc, #460]	; (8046f00 <HAL_RCC_OscConfig+0x474>)
 8046d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8046d3a:	f7fc fb5b 	bl	80433f4 <HAL_GetTick>
 8046d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046d40:	e008      	b.n	8046d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8046d42:	f7fc fb57 	bl	80433f4 <HAL_GetTick>
 8046d46:	4602      	mov	r2, r0
 8046d48:	693b      	ldr	r3, [r7, #16]
 8046d4a:	1ad3      	subs	r3, r2, r3
 8046d4c:	2b02      	cmp	r3, #2
 8046d4e:	d901      	bls.n	8046d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8046d50:	2303      	movs	r3, #3
 8046d52:	e10c      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046d54:	4b6a      	ldr	r3, [pc, #424]	; (8046f00 <HAL_RCC_OscConfig+0x474>)
 8046d56:	681b      	ldr	r3, [r3, #0]
 8046d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046d5c:	2b00      	cmp	r3, #0
 8046d5e:	d0f0      	beq.n	8046d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8046d60:	687b      	ldr	r3, [r7, #4]
 8046d62:	689b      	ldr	r3, [r3, #8]
 8046d64:	2b01      	cmp	r3, #1
 8046d66:	d106      	bne.n	8046d76 <HAL_RCC_OscConfig+0x2ea>
 8046d68:	4b64      	ldr	r3, [pc, #400]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046d6c:	4a63      	ldr	r2, [pc, #396]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d6e:	f043 0301 	orr.w	r3, r3, #1
 8046d72:	6713      	str	r3, [r2, #112]	; 0x70
 8046d74:	e01c      	b.n	8046db0 <HAL_RCC_OscConfig+0x324>
 8046d76:	687b      	ldr	r3, [r7, #4]
 8046d78:	689b      	ldr	r3, [r3, #8]
 8046d7a:	2b05      	cmp	r3, #5
 8046d7c:	d10c      	bne.n	8046d98 <HAL_RCC_OscConfig+0x30c>
 8046d7e:	4b5f      	ldr	r3, [pc, #380]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046d82:	4a5e      	ldr	r2, [pc, #376]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d84:	f043 0304 	orr.w	r3, r3, #4
 8046d88:	6713      	str	r3, [r2, #112]	; 0x70
 8046d8a:	4b5c      	ldr	r3, [pc, #368]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046d8e:	4a5b      	ldr	r2, [pc, #364]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d90:	f043 0301 	orr.w	r3, r3, #1
 8046d94:	6713      	str	r3, [r2, #112]	; 0x70
 8046d96:	e00b      	b.n	8046db0 <HAL_RCC_OscConfig+0x324>
 8046d98:	4b58      	ldr	r3, [pc, #352]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046d9c:	4a57      	ldr	r2, [pc, #348]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046d9e:	f023 0301 	bic.w	r3, r3, #1
 8046da2:	6713      	str	r3, [r2, #112]	; 0x70
 8046da4:	4b55      	ldr	r3, [pc, #340]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046da8:	4a54      	ldr	r2, [pc, #336]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046daa:	f023 0304 	bic.w	r3, r3, #4
 8046dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8046db0:	687b      	ldr	r3, [r7, #4]
 8046db2:	689b      	ldr	r3, [r3, #8]
 8046db4:	2b00      	cmp	r3, #0
 8046db6:	d015      	beq.n	8046de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046db8:	f7fc fb1c 	bl	80433f4 <HAL_GetTick>
 8046dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046dbe:	e00a      	b.n	8046dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046dc0:	f7fc fb18 	bl	80433f4 <HAL_GetTick>
 8046dc4:	4602      	mov	r2, r0
 8046dc6:	693b      	ldr	r3, [r7, #16]
 8046dc8:	1ad3      	subs	r3, r2, r3
 8046dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8046dce:	4293      	cmp	r3, r2
 8046dd0:	d901      	bls.n	8046dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8046dd2:	2303      	movs	r3, #3
 8046dd4:	e0cb      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046dd6:	4b49      	ldr	r3, [pc, #292]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046dda:	f003 0302 	and.w	r3, r3, #2
 8046dde:	2b00      	cmp	r3, #0
 8046de0:	d0ee      	beq.n	8046dc0 <HAL_RCC_OscConfig+0x334>
 8046de2:	e014      	b.n	8046e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046de4:	f7fc fb06 	bl	80433f4 <HAL_GetTick>
 8046de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046dea:	e00a      	b.n	8046e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046dec:	f7fc fb02 	bl	80433f4 <HAL_GetTick>
 8046df0:	4602      	mov	r2, r0
 8046df2:	693b      	ldr	r3, [r7, #16]
 8046df4:	1ad3      	subs	r3, r2, r3
 8046df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8046dfa:	4293      	cmp	r3, r2
 8046dfc:	d901      	bls.n	8046e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8046dfe:	2303      	movs	r3, #3
 8046e00:	e0b5      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046e02:	4b3e      	ldr	r3, [pc, #248]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046e06:	f003 0302 	and.w	r3, r3, #2
 8046e0a:	2b00      	cmp	r3, #0
 8046e0c:	d1ee      	bne.n	8046dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8046e0e:	7dfb      	ldrb	r3, [r7, #23]
 8046e10:	2b01      	cmp	r3, #1
 8046e12:	d105      	bne.n	8046e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8046e14:	4b39      	ldr	r3, [pc, #228]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046e18:	4a38      	ldr	r2, [pc, #224]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8046e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	699b      	ldr	r3, [r3, #24]
 8046e24:	2b00      	cmp	r3, #0
 8046e26:	f000 80a1 	beq.w	8046f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8046e2a:	4b34      	ldr	r3, [pc, #208]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e2c:	689b      	ldr	r3, [r3, #8]
 8046e2e:	f003 030c 	and.w	r3, r3, #12
 8046e32:	2b08      	cmp	r3, #8
 8046e34:	d05c      	beq.n	8046ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8046e36:	687b      	ldr	r3, [r7, #4]
 8046e38:	699b      	ldr	r3, [r3, #24]
 8046e3a:	2b02      	cmp	r3, #2
 8046e3c:	d141      	bne.n	8046ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046e3e:	4b31      	ldr	r3, [pc, #196]	; (8046f04 <HAL_RCC_OscConfig+0x478>)
 8046e40:	2200      	movs	r2, #0
 8046e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046e44:	f7fc fad6 	bl	80433f4 <HAL_GetTick>
 8046e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046e4a:	e008      	b.n	8046e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046e4c:	f7fc fad2 	bl	80433f4 <HAL_GetTick>
 8046e50:	4602      	mov	r2, r0
 8046e52:	693b      	ldr	r3, [r7, #16]
 8046e54:	1ad3      	subs	r3, r2, r3
 8046e56:	2b02      	cmp	r3, #2
 8046e58:	d901      	bls.n	8046e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8046e5a:	2303      	movs	r3, #3
 8046e5c:	e087      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046e5e:	4b27      	ldr	r3, [pc, #156]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e60:	681b      	ldr	r3, [r3, #0]
 8046e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046e66:	2b00      	cmp	r3, #0
 8046e68:	d1f0      	bne.n	8046e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8046e6a:	687b      	ldr	r3, [r7, #4]
 8046e6c:	69da      	ldr	r2, [r3, #28]
 8046e6e:	687b      	ldr	r3, [r7, #4]
 8046e70:	6a1b      	ldr	r3, [r3, #32]
 8046e72:	431a      	orrs	r2, r3
 8046e74:	687b      	ldr	r3, [r7, #4]
 8046e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e78:	019b      	lsls	r3, r3, #6
 8046e7a:	431a      	orrs	r2, r3
 8046e7c:	687b      	ldr	r3, [r7, #4]
 8046e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e80:	085b      	lsrs	r3, r3, #1
 8046e82:	3b01      	subs	r3, #1
 8046e84:	041b      	lsls	r3, r3, #16
 8046e86:	431a      	orrs	r2, r3
 8046e88:	687b      	ldr	r3, [r7, #4]
 8046e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046e8c:	061b      	lsls	r3, r3, #24
 8046e8e:	491b      	ldr	r1, [pc, #108]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046e90:	4313      	orrs	r3, r2
 8046e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8046e94:	4b1b      	ldr	r3, [pc, #108]	; (8046f04 <HAL_RCC_OscConfig+0x478>)
 8046e96:	2201      	movs	r2, #1
 8046e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046e9a:	f7fc faab 	bl	80433f4 <HAL_GetTick>
 8046e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046ea0:	e008      	b.n	8046eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046ea2:	f7fc faa7 	bl	80433f4 <HAL_GetTick>
 8046ea6:	4602      	mov	r2, r0
 8046ea8:	693b      	ldr	r3, [r7, #16]
 8046eaa:	1ad3      	subs	r3, r2, r3
 8046eac:	2b02      	cmp	r3, #2
 8046eae:	d901      	bls.n	8046eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8046eb0:	2303      	movs	r3, #3
 8046eb2:	e05c      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046eb4:	4b11      	ldr	r3, [pc, #68]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046eb6:	681b      	ldr	r3, [r3, #0]
 8046eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046ebc:	2b00      	cmp	r3, #0
 8046ebe:	d0f0      	beq.n	8046ea2 <HAL_RCC_OscConfig+0x416>
 8046ec0:	e054      	b.n	8046f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046ec2:	4b10      	ldr	r3, [pc, #64]	; (8046f04 <HAL_RCC_OscConfig+0x478>)
 8046ec4:	2200      	movs	r2, #0
 8046ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046ec8:	f7fc fa94 	bl	80433f4 <HAL_GetTick>
 8046ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046ece:	e008      	b.n	8046ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046ed0:	f7fc fa90 	bl	80433f4 <HAL_GetTick>
 8046ed4:	4602      	mov	r2, r0
 8046ed6:	693b      	ldr	r3, [r7, #16]
 8046ed8:	1ad3      	subs	r3, r2, r3
 8046eda:	2b02      	cmp	r3, #2
 8046edc:	d901      	bls.n	8046ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8046ede:	2303      	movs	r3, #3
 8046ee0:	e045      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046ee2:	4b06      	ldr	r3, [pc, #24]	; (8046efc <HAL_RCC_OscConfig+0x470>)
 8046ee4:	681b      	ldr	r3, [r3, #0]
 8046ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046eea:	2b00      	cmp	r3, #0
 8046eec:	d1f0      	bne.n	8046ed0 <HAL_RCC_OscConfig+0x444>
 8046eee:	e03d      	b.n	8046f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8046ef0:	687b      	ldr	r3, [r7, #4]
 8046ef2:	699b      	ldr	r3, [r3, #24]
 8046ef4:	2b01      	cmp	r3, #1
 8046ef6:	d107      	bne.n	8046f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8046ef8:	2301      	movs	r3, #1
 8046efa:	e038      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
 8046efc:	40023800 	.word	0x40023800
 8046f00:	40007000 	.word	0x40007000
 8046f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8046f08:	4b1b      	ldr	r3, [pc, #108]	; (8046f78 <HAL_RCC_OscConfig+0x4ec>)
 8046f0a:	685b      	ldr	r3, [r3, #4]
 8046f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046f0e:	687b      	ldr	r3, [r7, #4]
 8046f10:	699b      	ldr	r3, [r3, #24]
 8046f12:	2b01      	cmp	r3, #1
 8046f14:	d028      	beq.n	8046f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046f16:	68fb      	ldr	r3, [r7, #12]
 8046f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8046f1c:	687b      	ldr	r3, [r7, #4]
 8046f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046f20:	429a      	cmp	r2, r3
 8046f22:	d121      	bne.n	8046f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046f24:	68fb      	ldr	r3, [r7, #12]
 8046f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8046f2a:	687b      	ldr	r3, [r7, #4]
 8046f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046f2e:	429a      	cmp	r2, r3
 8046f30:	d11a      	bne.n	8046f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046f32:	68fa      	ldr	r2, [r7, #12]
 8046f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8046f38:	4013      	ands	r3, r2
 8046f3a:	687a      	ldr	r2, [r7, #4]
 8046f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8046f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046f40:	4293      	cmp	r3, r2
 8046f42:	d111      	bne.n	8046f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046f44:	68fb      	ldr	r3, [r7, #12]
 8046f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8046f4a:	687b      	ldr	r3, [r7, #4]
 8046f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046f4e:	085b      	lsrs	r3, r3, #1
 8046f50:	3b01      	subs	r3, #1
 8046f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046f54:	429a      	cmp	r2, r3
 8046f56:	d107      	bne.n	8046f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8046f58:	68fb      	ldr	r3, [r7, #12]
 8046f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8046f5e:	687b      	ldr	r3, [r7, #4]
 8046f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046f64:	429a      	cmp	r2, r3
 8046f66:	d001      	beq.n	8046f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8046f68:	2301      	movs	r3, #1
 8046f6a:	e000      	b.n	8046f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8046f6c:	2300      	movs	r3, #0
}
 8046f6e:	4618      	mov	r0, r3
 8046f70:	3718      	adds	r7, #24
 8046f72:	46bd      	mov	sp, r7
 8046f74:	bd80      	pop	{r7, pc}
 8046f76:	bf00      	nop
 8046f78:	40023800 	.word	0x40023800

08046f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8046f7c:	b580      	push	{r7, lr}
 8046f7e:	b084      	sub	sp, #16
 8046f80:	af00      	add	r7, sp, #0
 8046f82:	6078      	str	r0, [r7, #4]
 8046f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8046f86:	687b      	ldr	r3, [r7, #4]
 8046f88:	2b00      	cmp	r3, #0
 8046f8a:	d101      	bne.n	8046f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8046f8c:	2301      	movs	r3, #1
 8046f8e:	e0cc      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8046f90:	4b68      	ldr	r3, [pc, #416]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 8046f92:	681b      	ldr	r3, [r3, #0]
 8046f94:	f003 030f 	and.w	r3, r3, #15
 8046f98:	683a      	ldr	r2, [r7, #0]
 8046f9a:	429a      	cmp	r2, r3
 8046f9c:	d90c      	bls.n	8046fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046f9e:	4b65      	ldr	r3, [pc, #404]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 8046fa0:	683a      	ldr	r2, [r7, #0]
 8046fa2:	b2d2      	uxtb	r2, r2
 8046fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046fa6:	4b63      	ldr	r3, [pc, #396]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 8046fa8:	681b      	ldr	r3, [r3, #0]
 8046faa:	f003 030f 	and.w	r3, r3, #15
 8046fae:	683a      	ldr	r2, [r7, #0]
 8046fb0:	429a      	cmp	r2, r3
 8046fb2:	d001      	beq.n	8046fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8046fb4:	2301      	movs	r3, #1
 8046fb6:	e0b8      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046fb8:	687b      	ldr	r3, [r7, #4]
 8046fba:	681b      	ldr	r3, [r3, #0]
 8046fbc:	f003 0302 	and.w	r3, r3, #2
 8046fc0:	2b00      	cmp	r3, #0
 8046fc2:	d020      	beq.n	8047006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046fc4:	687b      	ldr	r3, [r7, #4]
 8046fc6:	681b      	ldr	r3, [r3, #0]
 8046fc8:	f003 0304 	and.w	r3, r3, #4
 8046fcc:	2b00      	cmp	r3, #0
 8046fce:	d005      	beq.n	8046fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046fd0:	4b59      	ldr	r3, [pc, #356]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8046fd2:	689b      	ldr	r3, [r3, #8]
 8046fd4:	4a58      	ldr	r2, [pc, #352]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8046fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046fdc:	687b      	ldr	r3, [r7, #4]
 8046fde:	681b      	ldr	r3, [r3, #0]
 8046fe0:	f003 0308 	and.w	r3, r3, #8
 8046fe4:	2b00      	cmp	r3, #0
 8046fe6:	d005      	beq.n	8046ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046fe8:	4b53      	ldr	r3, [pc, #332]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8046fea:	689b      	ldr	r3, [r3, #8]
 8046fec:	4a52      	ldr	r2, [pc, #328]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8046fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8046ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046ff4:	4b50      	ldr	r3, [pc, #320]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8046ff6:	689b      	ldr	r3, [r3, #8]
 8046ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046ffc:	687b      	ldr	r3, [r7, #4]
 8046ffe:	689b      	ldr	r3, [r3, #8]
 8047000:	494d      	ldr	r1, [pc, #308]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8047002:	4313      	orrs	r3, r2
 8047004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8047006:	687b      	ldr	r3, [r7, #4]
 8047008:	681b      	ldr	r3, [r3, #0]
 804700a:	f003 0301 	and.w	r3, r3, #1
 804700e:	2b00      	cmp	r3, #0
 8047010:	d044      	beq.n	804709c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8047012:	687b      	ldr	r3, [r7, #4]
 8047014:	685b      	ldr	r3, [r3, #4]
 8047016:	2b01      	cmp	r3, #1
 8047018:	d107      	bne.n	804702a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804701a:	4b47      	ldr	r3, [pc, #284]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804701c:	681b      	ldr	r3, [r3, #0]
 804701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8047022:	2b00      	cmp	r3, #0
 8047024:	d119      	bne.n	804705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047026:	2301      	movs	r3, #1
 8047028:	e07f      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804702a:	687b      	ldr	r3, [r7, #4]
 804702c:	685b      	ldr	r3, [r3, #4]
 804702e:	2b02      	cmp	r3, #2
 8047030:	d003      	beq.n	804703a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8047032:	687b      	ldr	r3, [r7, #4]
 8047034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8047036:	2b03      	cmp	r3, #3
 8047038:	d107      	bne.n	804704a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804703a:	4b3f      	ldr	r3, [pc, #252]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804703c:	681b      	ldr	r3, [r3, #0]
 804703e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047042:	2b00      	cmp	r3, #0
 8047044:	d109      	bne.n	804705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047046:	2301      	movs	r3, #1
 8047048:	e06f      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804704a:	4b3b      	ldr	r3, [pc, #236]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804704c:	681b      	ldr	r3, [r3, #0]
 804704e:	f003 0302 	and.w	r3, r3, #2
 8047052:	2b00      	cmp	r3, #0
 8047054:	d101      	bne.n	804705a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8047056:	2301      	movs	r3, #1
 8047058:	e067      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804705a:	4b37      	ldr	r3, [pc, #220]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804705c:	689b      	ldr	r3, [r3, #8]
 804705e:	f023 0203 	bic.w	r2, r3, #3
 8047062:	687b      	ldr	r3, [r7, #4]
 8047064:	685b      	ldr	r3, [r3, #4]
 8047066:	4934      	ldr	r1, [pc, #208]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 8047068:	4313      	orrs	r3, r2
 804706a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 804706c:	f7fc f9c2 	bl	80433f4 <HAL_GetTick>
 8047070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8047072:	e00a      	b.n	804708a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8047074:	f7fc f9be 	bl	80433f4 <HAL_GetTick>
 8047078:	4602      	mov	r2, r0
 804707a:	68fb      	ldr	r3, [r7, #12]
 804707c:	1ad3      	subs	r3, r2, r3
 804707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8047082:	4293      	cmp	r3, r2
 8047084:	d901      	bls.n	804708a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8047086:	2303      	movs	r3, #3
 8047088:	e04f      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804708a:	4b2b      	ldr	r3, [pc, #172]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804708c:	689b      	ldr	r3, [r3, #8]
 804708e:	f003 020c 	and.w	r2, r3, #12
 8047092:	687b      	ldr	r3, [r7, #4]
 8047094:	685b      	ldr	r3, [r3, #4]
 8047096:	009b      	lsls	r3, r3, #2
 8047098:	429a      	cmp	r2, r3
 804709a:	d1eb      	bne.n	8047074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 804709c:	4b25      	ldr	r3, [pc, #148]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 804709e:	681b      	ldr	r3, [r3, #0]
 80470a0:	f003 030f 	and.w	r3, r3, #15
 80470a4:	683a      	ldr	r2, [r7, #0]
 80470a6:	429a      	cmp	r2, r3
 80470a8:	d20c      	bcs.n	80470c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80470aa:	4b22      	ldr	r3, [pc, #136]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 80470ac:	683a      	ldr	r2, [r7, #0]
 80470ae:	b2d2      	uxtb	r2, r2
 80470b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80470b2:	4b20      	ldr	r3, [pc, #128]	; (8047134 <HAL_RCC_ClockConfig+0x1b8>)
 80470b4:	681b      	ldr	r3, [r3, #0]
 80470b6:	f003 030f 	and.w	r3, r3, #15
 80470ba:	683a      	ldr	r2, [r7, #0]
 80470bc:	429a      	cmp	r2, r3
 80470be:	d001      	beq.n	80470c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80470c0:	2301      	movs	r3, #1
 80470c2:	e032      	b.n	804712a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80470c4:	687b      	ldr	r3, [r7, #4]
 80470c6:	681b      	ldr	r3, [r3, #0]
 80470c8:	f003 0304 	and.w	r3, r3, #4
 80470cc:	2b00      	cmp	r3, #0
 80470ce:	d008      	beq.n	80470e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80470d0:	4b19      	ldr	r3, [pc, #100]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 80470d2:	689b      	ldr	r3, [r3, #8]
 80470d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80470d8:	687b      	ldr	r3, [r7, #4]
 80470da:	68db      	ldr	r3, [r3, #12]
 80470dc:	4916      	ldr	r1, [pc, #88]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 80470de:	4313      	orrs	r3, r2
 80470e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80470e2:	687b      	ldr	r3, [r7, #4]
 80470e4:	681b      	ldr	r3, [r3, #0]
 80470e6:	f003 0308 	and.w	r3, r3, #8
 80470ea:	2b00      	cmp	r3, #0
 80470ec:	d009      	beq.n	8047102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80470ee:	4b12      	ldr	r3, [pc, #72]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 80470f0:	689b      	ldr	r3, [r3, #8]
 80470f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80470f6:	687b      	ldr	r3, [r7, #4]
 80470f8:	691b      	ldr	r3, [r3, #16]
 80470fa:	00db      	lsls	r3, r3, #3
 80470fc:	490e      	ldr	r1, [pc, #56]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 80470fe:	4313      	orrs	r3, r2
 8047100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8047102:	f000 f821 	bl	8047148 <HAL_RCC_GetSysClockFreq>
 8047106:	4602      	mov	r2, r0
 8047108:	4b0b      	ldr	r3, [pc, #44]	; (8047138 <HAL_RCC_ClockConfig+0x1bc>)
 804710a:	689b      	ldr	r3, [r3, #8]
 804710c:	091b      	lsrs	r3, r3, #4
 804710e:	f003 030f 	and.w	r3, r3, #15
 8047112:	490a      	ldr	r1, [pc, #40]	; (804713c <HAL_RCC_ClockConfig+0x1c0>)
 8047114:	5ccb      	ldrb	r3, [r1, r3]
 8047116:	fa22 f303 	lsr.w	r3, r2, r3
 804711a:	4a09      	ldr	r2, [pc, #36]	; (8047140 <HAL_RCC_ClockConfig+0x1c4>)
 804711c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 804711e:	4b09      	ldr	r3, [pc, #36]	; (8047144 <HAL_RCC_ClockConfig+0x1c8>)
 8047120:	681b      	ldr	r3, [r3, #0]
 8047122:	4618      	mov	r0, r3
 8047124:	f7fa fd82 	bl	8041c2c <HAL_InitTick>

  return HAL_OK;
 8047128:	2300      	movs	r3, #0
}
 804712a:	4618      	mov	r0, r3
 804712c:	3710      	adds	r7, #16
 804712e:	46bd      	mov	sp, r7
 8047130:	bd80      	pop	{r7, pc}
 8047132:	bf00      	nop
 8047134:	40023c00 	.word	0x40023c00
 8047138:	40023800 	.word	0x40023800
 804713c:	0804e940 	.word	0x0804e940
 8047140:	20000000 	.word	0x20000000
 8047144:	20000054 	.word	0x20000054

08047148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8047148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804714c:	b094      	sub	sp, #80	; 0x50
 804714e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8047150:	2300      	movs	r3, #0
 8047152:	647b      	str	r3, [r7, #68]	; 0x44
 8047154:	2300      	movs	r3, #0
 8047156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047158:	2300      	movs	r3, #0
 804715a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 804715c:	2300      	movs	r3, #0
 804715e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8047160:	4b79      	ldr	r3, [pc, #484]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 8047162:	689b      	ldr	r3, [r3, #8]
 8047164:	f003 030c 	and.w	r3, r3, #12
 8047168:	2b08      	cmp	r3, #8
 804716a:	d00d      	beq.n	8047188 <HAL_RCC_GetSysClockFreq+0x40>
 804716c:	2b08      	cmp	r3, #8
 804716e:	f200 80e1 	bhi.w	8047334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8047172:	2b00      	cmp	r3, #0
 8047174:	d002      	beq.n	804717c <HAL_RCC_GetSysClockFreq+0x34>
 8047176:	2b04      	cmp	r3, #4
 8047178:	d003      	beq.n	8047182 <HAL_RCC_GetSysClockFreq+0x3a>
 804717a:	e0db      	b.n	8047334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804717c:	4b73      	ldr	r3, [pc, #460]	; (804734c <HAL_RCC_GetSysClockFreq+0x204>)
 804717e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8047180:	e0db      	b.n	804733a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8047182:	4b73      	ldr	r3, [pc, #460]	; (8047350 <HAL_RCC_GetSysClockFreq+0x208>)
 8047184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047186:	e0d8      	b.n	804733a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8047188:	4b6f      	ldr	r3, [pc, #444]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 804718a:	685b      	ldr	r3, [r3, #4]
 804718c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8047190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8047192:	4b6d      	ldr	r3, [pc, #436]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 8047194:	685b      	ldr	r3, [r3, #4]
 8047196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804719a:	2b00      	cmp	r3, #0
 804719c:	d063      	beq.n	8047266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804719e:	4b6a      	ldr	r3, [pc, #424]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 80471a0:	685b      	ldr	r3, [r3, #4]
 80471a2:	099b      	lsrs	r3, r3, #6
 80471a4:	2200      	movs	r2, #0
 80471a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80471a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80471aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80471ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80471b0:	633b      	str	r3, [r7, #48]	; 0x30
 80471b2:	2300      	movs	r3, #0
 80471b4:	637b      	str	r3, [r7, #52]	; 0x34
 80471b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80471ba:	4622      	mov	r2, r4
 80471bc:	462b      	mov	r3, r5
 80471be:	f04f 0000 	mov.w	r0, #0
 80471c2:	f04f 0100 	mov.w	r1, #0
 80471c6:	0159      	lsls	r1, r3, #5
 80471c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80471cc:	0150      	lsls	r0, r2, #5
 80471ce:	4602      	mov	r2, r0
 80471d0:	460b      	mov	r3, r1
 80471d2:	4621      	mov	r1, r4
 80471d4:	1a51      	subs	r1, r2, r1
 80471d6:	6139      	str	r1, [r7, #16]
 80471d8:	4629      	mov	r1, r5
 80471da:	eb63 0301 	sbc.w	r3, r3, r1
 80471de:	617b      	str	r3, [r7, #20]
 80471e0:	f04f 0200 	mov.w	r2, #0
 80471e4:	f04f 0300 	mov.w	r3, #0
 80471e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80471ec:	4659      	mov	r1, fp
 80471ee:	018b      	lsls	r3, r1, #6
 80471f0:	4651      	mov	r1, sl
 80471f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80471f6:	4651      	mov	r1, sl
 80471f8:	018a      	lsls	r2, r1, #6
 80471fa:	4651      	mov	r1, sl
 80471fc:	ebb2 0801 	subs.w	r8, r2, r1
 8047200:	4659      	mov	r1, fp
 8047202:	eb63 0901 	sbc.w	r9, r3, r1
 8047206:	f04f 0200 	mov.w	r2, #0
 804720a:	f04f 0300 	mov.w	r3, #0
 804720e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8047212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8047216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804721a:	4690      	mov	r8, r2
 804721c:	4699      	mov	r9, r3
 804721e:	4623      	mov	r3, r4
 8047220:	eb18 0303 	adds.w	r3, r8, r3
 8047224:	60bb      	str	r3, [r7, #8]
 8047226:	462b      	mov	r3, r5
 8047228:	eb49 0303 	adc.w	r3, r9, r3
 804722c:	60fb      	str	r3, [r7, #12]
 804722e:	f04f 0200 	mov.w	r2, #0
 8047232:	f04f 0300 	mov.w	r3, #0
 8047236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804723a:	4629      	mov	r1, r5
 804723c:	024b      	lsls	r3, r1, #9
 804723e:	4621      	mov	r1, r4
 8047240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8047244:	4621      	mov	r1, r4
 8047246:	024a      	lsls	r2, r1, #9
 8047248:	4610      	mov	r0, r2
 804724a:	4619      	mov	r1, r3
 804724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804724e:	2200      	movs	r2, #0
 8047250:	62bb      	str	r3, [r7, #40]	; 0x28
 8047252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8047254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8047258:	f7f9 f81a 	bl	8040290 <__aeabi_uldivmod>
 804725c:	4602      	mov	r2, r0
 804725e:	460b      	mov	r3, r1
 8047260:	4613      	mov	r3, r2
 8047262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047264:	e058      	b.n	8047318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8047266:	4b38      	ldr	r3, [pc, #224]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 8047268:	685b      	ldr	r3, [r3, #4]
 804726a:	099b      	lsrs	r3, r3, #6
 804726c:	2200      	movs	r2, #0
 804726e:	4618      	mov	r0, r3
 8047270:	4611      	mov	r1, r2
 8047272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8047276:	623b      	str	r3, [r7, #32]
 8047278:	2300      	movs	r3, #0
 804727a:	627b      	str	r3, [r7, #36]	; 0x24
 804727c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8047280:	4642      	mov	r2, r8
 8047282:	464b      	mov	r3, r9
 8047284:	f04f 0000 	mov.w	r0, #0
 8047288:	f04f 0100 	mov.w	r1, #0
 804728c:	0159      	lsls	r1, r3, #5
 804728e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8047292:	0150      	lsls	r0, r2, #5
 8047294:	4602      	mov	r2, r0
 8047296:	460b      	mov	r3, r1
 8047298:	4641      	mov	r1, r8
 804729a:	ebb2 0a01 	subs.w	sl, r2, r1
 804729e:	4649      	mov	r1, r9
 80472a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80472a4:	f04f 0200 	mov.w	r2, #0
 80472a8:	f04f 0300 	mov.w	r3, #0
 80472ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80472b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80472b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80472b8:	ebb2 040a 	subs.w	r4, r2, sl
 80472bc:	eb63 050b 	sbc.w	r5, r3, fp
 80472c0:	f04f 0200 	mov.w	r2, #0
 80472c4:	f04f 0300 	mov.w	r3, #0
 80472c8:	00eb      	lsls	r3, r5, #3
 80472ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80472ce:	00e2      	lsls	r2, r4, #3
 80472d0:	4614      	mov	r4, r2
 80472d2:	461d      	mov	r5, r3
 80472d4:	4643      	mov	r3, r8
 80472d6:	18e3      	adds	r3, r4, r3
 80472d8:	603b      	str	r3, [r7, #0]
 80472da:	464b      	mov	r3, r9
 80472dc:	eb45 0303 	adc.w	r3, r5, r3
 80472e0:	607b      	str	r3, [r7, #4]
 80472e2:	f04f 0200 	mov.w	r2, #0
 80472e6:	f04f 0300 	mov.w	r3, #0
 80472ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80472ee:	4629      	mov	r1, r5
 80472f0:	028b      	lsls	r3, r1, #10
 80472f2:	4621      	mov	r1, r4
 80472f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80472f8:	4621      	mov	r1, r4
 80472fa:	028a      	lsls	r2, r1, #10
 80472fc:	4610      	mov	r0, r2
 80472fe:	4619      	mov	r1, r3
 8047300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047302:	2200      	movs	r2, #0
 8047304:	61bb      	str	r3, [r7, #24]
 8047306:	61fa      	str	r2, [r7, #28]
 8047308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 804730c:	f7f8 ffc0 	bl	8040290 <__aeabi_uldivmod>
 8047310:	4602      	mov	r2, r0
 8047312:	460b      	mov	r3, r1
 8047314:	4613      	mov	r3, r2
 8047316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8047318:	4b0b      	ldr	r3, [pc, #44]	; (8047348 <HAL_RCC_GetSysClockFreq+0x200>)
 804731a:	685b      	ldr	r3, [r3, #4]
 804731c:	0c1b      	lsrs	r3, r3, #16
 804731e:	f003 0303 	and.w	r3, r3, #3
 8047322:	3301      	adds	r3, #1
 8047324:	005b      	lsls	r3, r3, #1
 8047326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8047328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 804732a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8047330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047332:	e002      	b.n	804733a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8047334:	4b05      	ldr	r3, [pc, #20]	; (804734c <HAL_RCC_GetSysClockFreq+0x204>)
 8047336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047338:	bf00      	nop
    }
  }
  return sysclockfreq;
 804733a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 804733c:	4618      	mov	r0, r3
 804733e:	3750      	adds	r7, #80	; 0x50
 8047340:	46bd      	mov	sp, r7
 8047342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8047346:	bf00      	nop
 8047348:	40023800 	.word	0x40023800
 804734c:	00f42400 	.word	0x00f42400
 8047350:	007a1200 	.word	0x007a1200

08047354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8047354:	b480      	push	{r7}
 8047356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8047358:	4b03      	ldr	r3, [pc, #12]	; (8047368 <HAL_RCC_GetHCLKFreq+0x14>)
 804735a:	681b      	ldr	r3, [r3, #0]
}
 804735c:	4618      	mov	r0, r3
 804735e:	46bd      	mov	sp, r7
 8047360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047364:	4770      	bx	lr
 8047366:	bf00      	nop
 8047368:	20000000 	.word	0x20000000

0804736c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804736c:	b580      	push	{r7, lr}
 804736e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8047370:	f7ff fff0 	bl	8047354 <HAL_RCC_GetHCLKFreq>
 8047374:	4602      	mov	r2, r0
 8047376:	4b05      	ldr	r3, [pc, #20]	; (804738c <HAL_RCC_GetPCLK1Freq+0x20>)
 8047378:	689b      	ldr	r3, [r3, #8]
 804737a:	0a9b      	lsrs	r3, r3, #10
 804737c:	f003 0307 	and.w	r3, r3, #7
 8047380:	4903      	ldr	r1, [pc, #12]	; (8047390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8047382:	5ccb      	ldrb	r3, [r1, r3]
 8047384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8047388:	4618      	mov	r0, r3
 804738a:	bd80      	pop	{r7, pc}
 804738c:	40023800 	.word	0x40023800
 8047390:	0804e950 	.word	0x0804e950

08047394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8047394:	b580      	push	{r7, lr}
 8047396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8047398:	f7ff ffdc 	bl	8047354 <HAL_RCC_GetHCLKFreq>
 804739c:	4602      	mov	r2, r0
 804739e:	4b05      	ldr	r3, [pc, #20]	; (80473b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80473a0:	689b      	ldr	r3, [r3, #8]
 80473a2:	0b5b      	lsrs	r3, r3, #13
 80473a4:	f003 0307 	and.w	r3, r3, #7
 80473a8:	4903      	ldr	r1, [pc, #12]	; (80473b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80473aa:	5ccb      	ldrb	r3, [r1, r3]
 80473ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80473b0:	4618      	mov	r0, r3
 80473b2:	bd80      	pop	{r7, pc}
 80473b4:	40023800 	.word	0x40023800
 80473b8:	0804e950 	.word	0x0804e950

080473bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80473bc:	b480      	push	{r7}
 80473be:	b083      	sub	sp, #12
 80473c0:	af00      	add	r7, sp, #0
 80473c2:	6078      	str	r0, [r7, #4]
 80473c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80473c6:	687b      	ldr	r3, [r7, #4]
 80473c8:	220f      	movs	r2, #15
 80473ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80473cc:	4b12      	ldr	r3, [pc, #72]	; (8047418 <HAL_RCC_GetClockConfig+0x5c>)
 80473ce:	689b      	ldr	r3, [r3, #8]
 80473d0:	f003 0203 	and.w	r2, r3, #3
 80473d4:	687b      	ldr	r3, [r7, #4]
 80473d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80473d8:	4b0f      	ldr	r3, [pc, #60]	; (8047418 <HAL_RCC_GetClockConfig+0x5c>)
 80473da:	689b      	ldr	r3, [r3, #8]
 80473dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80473e4:	4b0c      	ldr	r3, [pc, #48]	; (8047418 <HAL_RCC_GetClockConfig+0x5c>)
 80473e6:	689b      	ldr	r3, [r3, #8]
 80473e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80473ec:	687b      	ldr	r3, [r7, #4]
 80473ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80473f0:	4b09      	ldr	r3, [pc, #36]	; (8047418 <HAL_RCC_GetClockConfig+0x5c>)
 80473f2:	689b      	ldr	r3, [r3, #8]
 80473f4:	08db      	lsrs	r3, r3, #3
 80473f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80473fa:	687b      	ldr	r3, [r7, #4]
 80473fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80473fe:	4b07      	ldr	r3, [pc, #28]	; (804741c <HAL_RCC_GetClockConfig+0x60>)
 8047400:	681b      	ldr	r3, [r3, #0]
 8047402:	f003 020f 	and.w	r2, r3, #15
 8047406:	683b      	ldr	r3, [r7, #0]
 8047408:	601a      	str	r2, [r3, #0]
}
 804740a:	bf00      	nop
 804740c:	370c      	adds	r7, #12
 804740e:	46bd      	mov	sp, r7
 8047410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047414:	4770      	bx	lr
 8047416:	bf00      	nop
 8047418:	40023800 	.word	0x40023800
 804741c:	40023c00 	.word	0x40023c00

08047420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8047420:	b580      	push	{r7, lr}
 8047422:	b086      	sub	sp, #24
 8047424:	af00      	add	r7, sp, #0
 8047426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8047428:	2300      	movs	r3, #0
 804742a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 804742c:	2300      	movs	r3, #0
 804742e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047430:	687b      	ldr	r3, [r7, #4]
 8047432:	681b      	ldr	r3, [r3, #0]
 8047434:	f003 0301 	and.w	r3, r3, #1
 8047438:	2b00      	cmp	r3, #0
 804743a:	d10b      	bne.n	8047454 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 804743c:	687b      	ldr	r3, [r7, #4]
 804743e:	681b      	ldr	r3, [r3, #0]
 8047440:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047444:	2b00      	cmp	r3, #0
 8047446:	d105      	bne.n	8047454 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8047448:	687b      	ldr	r3, [r7, #4]
 804744a:	681b      	ldr	r3, [r3, #0]
 804744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8047450:	2b00      	cmp	r3, #0
 8047452:	d075      	beq.n	8047540 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8047454:	4b91      	ldr	r3, [pc, #580]	; (804769c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8047456:	2200      	movs	r2, #0
 8047458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 804745a:	f7fb ffcb 	bl	80433f4 <HAL_GetTick>
 804745e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047460:	e008      	b.n	8047474 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047462:	f7fb ffc7 	bl	80433f4 <HAL_GetTick>
 8047466:	4602      	mov	r2, r0
 8047468:	697b      	ldr	r3, [r7, #20]
 804746a:	1ad3      	subs	r3, r2, r3
 804746c:	2b02      	cmp	r3, #2
 804746e:	d901      	bls.n	8047474 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047470:	2303      	movs	r3, #3
 8047472:	e189      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047474:	4b8a      	ldr	r3, [pc, #552]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047476:	681b      	ldr	r3, [r3, #0]
 8047478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804747c:	2b00      	cmp	r3, #0
 804747e:	d1f0      	bne.n	8047462 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	681b      	ldr	r3, [r3, #0]
 8047484:	f003 0301 	and.w	r3, r3, #1
 8047488:	2b00      	cmp	r3, #0
 804748a:	d009      	beq.n	80474a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 804748c:	687b      	ldr	r3, [r7, #4]
 804748e:	685b      	ldr	r3, [r3, #4]
 8047490:	019a      	lsls	r2, r3, #6
 8047492:	687b      	ldr	r3, [r7, #4]
 8047494:	689b      	ldr	r3, [r3, #8]
 8047496:	071b      	lsls	r3, r3, #28
 8047498:	4981      	ldr	r1, [pc, #516]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804749a:	4313      	orrs	r3, r2
 804749c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80474a0:	687b      	ldr	r3, [r7, #4]
 80474a2:	681b      	ldr	r3, [r3, #0]
 80474a4:	f003 0302 	and.w	r3, r3, #2
 80474a8:	2b00      	cmp	r3, #0
 80474aa:	d01f      	beq.n	80474ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80474ac:	4b7c      	ldr	r3, [pc, #496]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80474b2:	0f1b      	lsrs	r3, r3, #28
 80474b4:	f003 0307 	and.w	r3, r3, #7
 80474b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80474ba:	687b      	ldr	r3, [r7, #4]
 80474bc:	685b      	ldr	r3, [r3, #4]
 80474be:	019a      	lsls	r2, r3, #6
 80474c0:	687b      	ldr	r3, [r7, #4]
 80474c2:	68db      	ldr	r3, [r3, #12]
 80474c4:	061b      	lsls	r3, r3, #24
 80474c6:	431a      	orrs	r2, r3
 80474c8:	693b      	ldr	r3, [r7, #16]
 80474ca:	071b      	lsls	r3, r3, #28
 80474cc:	4974      	ldr	r1, [pc, #464]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474ce:	4313      	orrs	r3, r2
 80474d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80474d4:	4b72      	ldr	r3, [pc, #456]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80474da:	f023 021f 	bic.w	r2, r3, #31
 80474de:	687b      	ldr	r3, [r7, #4]
 80474e0:	69db      	ldr	r3, [r3, #28]
 80474e2:	3b01      	subs	r3, #1
 80474e4:	496e      	ldr	r1, [pc, #440]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474e6:	4313      	orrs	r3, r2
 80474e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80474ec:	687b      	ldr	r3, [r7, #4]
 80474ee:	681b      	ldr	r3, [r3, #0]
 80474f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80474f4:	2b00      	cmp	r3, #0
 80474f6:	d00d      	beq.n	8047514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80474f8:	687b      	ldr	r3, [r7, #4]
 80474fa:	685b      	ldr	r3, [r3, #4]
 80474fc:	019a      	lsls	r2, r3, #6
 80474fe:	687b      	ldr	r3, [r7, #4]
 8047500:	68db      	ldr	r3, [r3, #12]
 8047502:	061b      	lsls	r3, r3, #24
 8047504:	431a      	orrs	r2, r3
 8047506:	687b      	ldr	r3, [r7, #4]
 8047508:	689b      	ldr	r3, [r3, #8]
 804750a:	071b      	lsls	r3, r3, #28
 804750c:	4964      	ldr	r1, [pc, #400]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804750e:	4313      	orrs	r3, r2
 8047510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8047514:	4b61      	ldr	r3, [pc, #388]	; (804769c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8047516:	2201      	movs	r2, #1
 8047518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 804751a:	f7fb ff6b 	bl	80433f4 <HAL_GetTick>
 804751e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047520:	e008      	b.n	8047534 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047522:	f7fb ff67 	bl	80433f4 <HAL_GetTick>
 8047526:	4602      	mov	r2, r0
 8047528:	697b      	ldr	r3, [r7, #20]
 804752a:	1ad3      	subs	r3, r2, r3
 804752c:	2b02      	cmp	r3, #2
 804752e:	d901      	bls.n	8047534 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047530:	2303      	movs	r3, #3
 8047532:	e129      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047534:	4b5a      	ldr	r3, [pc, #360]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047536:	681b      	ldr	r3, [r3, #0]
 8047538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804753c:	2b00      	cmp	r3, #0
 804753e:	d0f0      	beq.n	8047522 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047540:	687b      	ldr	r3, [r7, #4]
 8047542:	681b      	ldr	r3, [r3, #0]
 8047544:	f003 0304 	and.w	r3, r3, #4
 8047548:	2b00      	cmp	r3, #0
 804754a:	d105      	bne.n	8047558 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 804754c:	687b      	ldr	r3, [r7, #4]
 804754e:	681b      	ldr	r3, [r3, #0]
 8047550:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047554:	2b00      	cmp	r3, #0
 8047556:	d079      	beq.n	804764c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8047558:	4b52      	ldr	r3, [pc, #328]	; (80476a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804755a:	2200      	movs	r2, #0
 804755c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 804755e:	f7fb ff49 	bl	80433f4 <HAL_GetTick>
 8047562:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8047564:	e008      	b.n	8047578 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8047566:	f7fb ff45 	bl	80433f4 <HAL_GetTick>
 804756a:	4602      	mov	r2, r0
 804756c:	697b      	ldr	r3, [r7, #20]
 804756e:	1ad3      	subs	r3, r2, r3
 8047570:	2b02      	cmp	r3, #2
 8047572:	d901      	bls.n	8047578 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047574:	2303      	movs	r3, #3
 8047576:	e107      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8047578:	4b49      	ldr	r3, [pc, #292]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804757a:	681b      	ldr	r3, [r3, #0]
 804757c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047584:	d0ef      	beq.n	8047566 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8047586:	687b      	ldr	r3, [r7, #4]
 8047588:	681b      	ldr	r3, [r3, #0]
 804758a:	f003 0304 	and.w	r3, r3, #4
 804758e:	2b00      	cmp	r3, #0
 8047590:	d020      	beq.n	80475d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8047592:	4b43      	ldr	r3, [pc, #268]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047598:	0f1b      	lsrs	r3, r3, #28
 804759a:	f003 0307 	and.w	r3, r3, #7
 804759e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80475a0:	687b      	ldr	r3, [r7, #4]
 80475a2:	691b      	ldr	r3, [r3, #16]
 80475a4:	019a      	lsls	r2, r3, #6
 80475a6:	687b      	ldr	r3, [r7, #4]
 80475a8:	695b      	ldr	r3, [r3, #20]
 80475aa:	061b      	lsls	r3, r3, #24
 80475ac:	431a      	orrs	r2, r3
 80475ae:	693b      	ldr	r3, [r7, #16]
 80475b0:	071b      	lsls	r3, r3, #28
 80475b2:	493b      	ldr	r1, [pc, #236]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80475b4:	4313      	orrs	r3, r2
 80475b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80475ba:	4b39      	ldr	r3, [pc, #228]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80475bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80475c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80475c4:	687b      	ldr	r3, [r7, #4]
 80475c6:	6a1b      	ldr	r3, [r3, #32]
 80475c8:	3b01      	subs	r3, #1
 80475ca:	021b      	lsls	r3, r3, #8
 80475cc:	4934      	ldr	r1, [pc, #208]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80475ce:	4313      	orrs	r3, r2
 80475d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80475d4:	687b      	ldr	r3, [r7, #4]
 80475d6:	681b      	ldr	r3, [r3, #0]
 80475d8:	f003 0308 	and.w	r3, r3, #8
 80475dc:	2b00      	cmp	r3, #0
 80475de:	d01e      	beq.n	804761e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80475e0:	4b2f      	ldr	r3, [pc, #188]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80475e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80475e6:	0e1b      	lsrs	r3, r3, #24
 80475e8:	f003 030f 	and.w	r3, r3, #15
 80475ec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80475ee:	687b      	ldr	r3, [r7, #4]
 80475f0:	691b      	ldr	r3, [r3, #16]
 80475f2:	019a      	lsls	r2, r3, #6
 80475f4:	693b      	ldr	r3, [r7, #16]
 80475f6:	061b      	lsls	r3, r3, #24
 80475f8:	431a      	orrs	r2, r3
 80475fa:	687b      	ldr	r3, [r7, #4]
 80475fc:	699b      	ldr	r3, [r3, #24]
 80475fe:	071b      	lsls	r3, r3, #28
 8047600:	4927      	ldr	r1, [pc, #156]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047602:	4313      	orrs	r3, r2
 8047604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8047608:	4b25      	ldr	r3, [pc, #148]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804760a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804760e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8047612:	687b      	ldr	r3, [r7, #4]
 8047614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047616:	4922      	ldr	r1, [pc, #136]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047618:	4313      	orrs	r3, r2
 804761a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 804761e:	4b21      	ldr	r3, [pc, #132]	; (80476a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8047620:	2201      	movs	r2, #1
 8047622:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047624:	f7fb fee6 	bl	80433f4 <HAL_GetTick>
 8047628:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804762a:	e008      	b.n	804763e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 804762c:	f7fb fee2 	bl	80433f4 <HAL_GetTick>
 8047630:	4602      	mov	r2, r0
 8047632:	697b      	ldr	r3, [r7, #20]
 8047634:	1ad3      	subs	r3, r2, r3
 8047636:	2b02      	cmp	r3, #2
 8047638:	d901      	bls.n	804763e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804763a:	2303      	movs	r3, #3
 804763c:	e0a4      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804763e:	4b18      	ldr	r3, [pc, #96]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047640:	681b      	ldr	r3, [r3, #0]
 8047642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804764a:	d1ef      	bne.n	804762c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 804764c:	687b      	ldr	r3, [r7, #4]
 804764e:	681b      	ldr	r3, [r3, #0]
 8047650:	f003 0320 	and.w	r3, r3, #32
 8047654:	2b00      	cmp	r3, #0
 8047656:	f000 808b 	beq.w	8047770 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 804765a:	2300      	movs	r3, #0
 804765c:	60fb      	str	r3, [r7, #12]
 804765e:	4b10      	ldr	r3, [pc, #64]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047662:	4a0f      	ldr	r2, [pc, #60]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8047668:	6413      	str	r3, [r2, #64]	; 0x40
 804766a:	4b0d      	ldr	r3, [pc, #52]	; (80476a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804766e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8047672:	60fb      	str	r3, [r7, #12]
 8047674:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8047676:	4b0c      	ldr	r3, [pc, #48]	; (80476a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8047678:	681b      	ldr	r3, [r3, #0]
 804767a:	4a0b      	ldr	r2, [pc, #44]	; (80476a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 804767c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047680:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8047682:	f7fb feb7 	bl	80433f4 <HAL_GetTick>
 8047686:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8047688:	e010      	b.n	80476ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 804768a:	f7fb feb3 	bl	80433f4 <HAL_GetTick>
 804768e:	4602      	mov	r2, r0
 8047690:	697b      	ldr	r3, [r7, #20]
 8047692:	1ad3      	subs	r3, r2, r3
 8047694:	2b02      	cmp	r3, #2
 8047696:	d909      	bls.n	80476ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8047698:	2303      	movs	r3, #3
 804769a:	e075      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
 804769c:	42470068 	.word	0x42470068
 80476a0:	40023800 	.word	0x40023800
 80476a4:	42470070 	.word	0x42470070
 80476a8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80476ac:	4b38      	ldr	r3, [pc, #224]	; (8047790 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80476ae:	681b      	ldr	r3, [r3, #0]
 80476b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80476b4:	2b00      	cmp	r3, #0
 80476b6:	d0e8      	beq.n	804768a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80476b8:	4b36      	ldr	r3, [pc, #216]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80476ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80476bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80476c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80476c2:	693b      	ldr	r3, [r7, #16]
 80476c4:	2b00      	cmp	r3, #0
 80476c6:	d02f      	beq.n	8047728 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80476c8:	687b      	ldr	r3, [r7, #4]
 80476ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80476cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80476d0:	693a      	ldr	r2, [r7, #16]
 80476d2:	429a      	cmp	r2, r3
 80476d4:	d028      	beq.n	8047728 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80476d6:	4b2f      	ldr	r3, [pc, #188]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80476d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80476da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80476de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80476e0:	4b2d      	ldr	r3, [pc, #180]	; (8047798 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80476e2:	2201      	movs	r2, #1
 80476e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80476e6:	4b2c      	ldr	r3, [pc, #176]	; (8047798 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80476e8:	2200      	movs	r2, #0
 80476ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80476ec:	4a29      	ldr	r2, [pc, #164]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80476ee:	693b      	ldr	r3, [r7, #16]
 80476f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80476f2:	4b28      	ldr	r3, [pc, #160]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80476f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80476f6:	f003 0301 	and.w	r3, r3, #1
 80476fa:	2b01      	cmp	r3, #1
 80476fc:	d114      	bne.n	8047728 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80476fe:	f7fb fe79 	bl	80433f4 <HAL_GetTick>
 8047702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047704:	e00a      	b.n	804771c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8047706:	f7fb fe75 	bl	80433f4 <HAL_GetTick>
 804770a:	4602      	mov	r2, r0
 804770c:	697b      	ldr	r3, [r7, #20]
 804770e:	1ad3      	subs	r3, r2, r3
 8047710:	f241 3288 	movw	r2, #5000	; 0x1388
 8047714:	4293      	cmp	r3, r2
 8047716:	d901      	bls.n	804771c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8047718:	2303      	movs	r3, #3
 804771a:	e035      	b.n	8047788 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804771c:	4b1d      	ldr	r3, [pc, #116]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047720:	f003 0302 	and.w	r3, r3, #2
 8047724:	2b00      	cmp	r3, #0
 8047726:	d0ee      	beq.n	8047706 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8047728:	687b      	ldr	r3, [r7, #4]
 804772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804772c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8047734:	d10d      	bne.n	8047752 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8047736:	4b17      	ldr	r3, [pc, #92]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047738:	689b      	ldr	r3, [r3, #8]
 804773a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 804773e:	687b      	ldr	r3, [r7, #4]
 8047740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8047746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804774a:	4912      	ldr	r1, [pc, #72]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804774c:	4313      	orrs	r3, r2
 804774e:	608b      	str	r3, [r1, #8]
 8047750:	e005      	b.n	804775e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8047752:	4b10      	ldr	r3, [pc, #64]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047754:	689b      	ldr	r3, [r3, #8]
 8047756:	4a0f      	ldr	r2, [pc, #60]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 804775c:	6093      	str	r3, [r2, #8]
 804775e:	4b0d      	ldr	r3, [pc, #52]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8047762:	687b      	ldr	r3, [r7, #4]
 8047764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804776a:	490a      	ldr	r1, [pc, #40]	; (8047794 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804776c:	4313      	orrs	r3, r2
 804776e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8047770:	687b      	ldr	r3, [r7, #4]
 8047772:	681b      	ldr	r3, [r3, #0]
 8047774:	f003 0310 	and.w	r3, r3, #16
 8047778:	2b00      	cmp	r3, #0
 804777a:	d004      	beq.n	8047786 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804777c:	687b      	ldr	r3, [r7, #4]
 804777e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8047782:	4b06      	ldr	r3, [pc, #24]	; (804779c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8047784:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8047786:	2300      	movs	r3, #0
}
 8047788:	4618      	mov	r0, r3
 804778a:	3718      	adds	r7, #24
 804778c:	46bd      	mov	sp, r7
 804778e:	bd80      	pop	{r7, pc}
 8047790:	40007000 	.word	0x40007000
 8047794:	40023800 	.word	0x40023800
 8047798:	42470e40 	.word	0x42470e40
 804779c:	424711e0 	.word	0x424711e0

080477a0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80477a0:	b580      	push	{r7, lr}
 80477a2:	b082      	sub	sp, #8
 80477a4:	af00      	add	r7, sp, #0
 80477a6:	6078      	str	r0, [r7, #4]
 80477a8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80477aa:	687b      	ldr	r3, [r7, #4]
 80477ac:	2b00      	cmp	r3, #0
 80477ae:	d101      	bne.n	80477b4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80477b0:	2301      	movs	r3, #1
 80477b2:	e025      	b.n	8047800 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80477b4:	687b      	ldr	r3, [r7, #4]
 80477b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80477ba:	b2db      	uxtb	r3, r3
 80477bc:	2b00      	cmp	r3, #0
 80477be:	d106      	bne.n	80477ce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80477c0:	687b      	ldr	r3, [r7, #4]
 80477c2:	2200      	movs	r2, #0
 80477c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80477c8:	6878      	ldr	r0, [r7, #4]
 80477ca:	f7fa fa25 	bl	8041c18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80477ce:	687b      	ldr	r3, [r7, #4]
 80477d0:	2202      	movs	r2, #2
 80477d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80477d6:	687b      	ldr	r3, [r7, #4]
 80477d8:	681a      	ldr	r2, [r3, #0]
 80477da:	687b      	ldr	r3, [r7, #4]
 80477dc:	3304      	adds	r3, #4
 80477de:	4619      	mov	r1, r3
 80477e0:	4610      	mov	r0, r2
 80477e2:	f001 ff33 	bl	804964c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80477e6:	687b      	ldr	r3, [r7, #4]
 80477e8:	6818      	ldr	r0, [r3, #0]
 80477ea:	687b      	ldr	r3, [r7, #4]
 80477ec:	685b      	ldr	r3, [r3, #4]
 80477ee:	461a      	mov	r2, r3
 80477f0:	6839      	ldr	r1, [r7, #0]
 80477f2:	f001 ff88 	bl	8049706 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80477f6:	687b      	ldr	r3, [r7, #4]
 80477f8:	2201      	movs	r2, #1
 80477fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80477fe:	2300      	movs	r3, #0
}
 8047800:	4618      	mov	r0, r3
 8047802:	3708      	adds	r7, #8
 8047804:	46bd      	mov	sp, r7
 8047806:	bd80      	pop	{r7, pc}

08047808 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8047808:	b580      	push	{r7, lr}
 804780a:	b086      	sub	sp, #24
 804780c:	af00      	add	r7, sp, #0
 804780e:	60f8      	str	r0, [r7, #12]
 8047810:	60b9      	str	r1, [r7, #8]
 8047812:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8047814:	68fb      	ldr	r3, [r7, #12]
 8047816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804781a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 804781c:	7dfb      	ldrb	r3, [r7, #23]
 804781e:	2b02      	cmp	r3, #2
 8047820:	d101      	bne.n	8047826 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8047822:	2302      	movs	r3, #2
 8047824:	e021      	b.n	804786a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8047826:	7dfb      	ldrb	r3, [r7, #23]
 8047828:	2b01      	cmp	r3, #1
 804782a:	d002      	beq.n	8047832 <HAL_SDRAM_SendCommand+0x2a>
 804782c:	7dfb      	ldrb	r3, [r7, #23]
 804782e:	2b05      	cmp	r3, #5
 8047830:	d118      	bne.n	8047864 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047832:	68fb      	ldr	r3, [r7, #12]
 8047834:	2202      	movs	r2, #2
 8047836:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 804783a:	68fb      	ldr	r3, [r7, #12]
 804783c:	681b      	ldr	r3, [r3, #0]
 804783e:	687a      	ldr	r2, [r7, #4]
 8047840:	68b9      	ldr	r1, [r7, #8]
 8047842:	4618      	mov	r0, r3
 8047844:	f001 ffc8 	bl	80497d8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047848:	68bb      	ldr	r3, [r7, #8]
 804784a:	681b      	ldr	r3, [r3, #0]
 804784c:	2b02      	cmp	r3, #2
 804784e:	d104      	bne.n	804785a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8047850:	68fb      	ldr	r3, [r7, #12]
 8047852:	2205      	movs	r2, #5
 8047854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047858:	e006      	b.n	8047868 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 804785a:	68fb      	ldr	r3, [r7, #12]
 804785c:	2201      	movs	r2, #1
 804785e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047862:	e001      	b.n	8047868 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8047864:	2301      	movs	r3, #1
 8047866:	e000      	b.n	804786a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8047868:	2300      	movs	r3, #0
}
 804786a:	4618      	mov	r0, r3
 804786c:	3718      	adds	r7, #24
 804786e:	46bd      	mov	sp, r7
 8047870:	bd80      	pop	{r7, pc}

08047872 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8047872:	b580      	push	{r7, lr}
 8047874:	b082      	sub	sp, #8
 8047876:	af00      	add	r7, sp, #0
 8047878:	6078      	str	r0, [r7, #4]
 804787a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 804787c:	687b      	ldr	r3, [r7, #4]
 804787e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047882:	b2db      	uxtb	r3, r3
 8047884:	2b02      	cmp	r3, #2
 8047886:	d101      	bne.n	804788c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8047888:	2302      	movs	r3, #2
 804788a:	e016      	b.n	80478ba <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 804788c:	687b      	ldr	r3, [r7, #4]
 804788e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047892:	b2db      	uxtb	r3, r3
 8047894:	2b01      	cmp	r3, #1
 8047896:	d10f      	bne.n	80478b8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047898:	687b      	ldr	r3, [r7, #4]
 804789a:	2202      	movs	r2, #2
 804789c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80478a0:	687b      	ldr	r3, [r7, #4]
 80478a2:	681b      	ldr	r3, [r3, #0]
 80478a4:	6839      	ldr	r1, [r7, #0]
 80478a6:	4618      	mov	r0, r3
 80478a8:	f001 ffd3 	bl	8049852 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80478ac:	687b      	ldr	r3, [r7, #4]
 80478ae:	2201      	movs	r2, #1
 80478b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80478b4:	2300      	movs	r3, #0
 80478b6:	e000      	b.n	80478ba <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80478b8:	2301      	movs	r3, #1
}
 80478ba:	4618      	mov	r0, r3
 80478bc:	3708      	adds	r7, #8
 80478be:	46bd      	mov	sp, r7
 80478c0:	bd80      	pop	{r7, pc}

080478c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80478c2:	b580      	push	{r7, lr}
 80478c4:	b082      	sub	sp, #8
 80478c6:	af00      	add	r7, sp, #0
 80478c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	2b00      	cmp	r3, #0
 80478ce:	d101      	bne.n	80478d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80478d0:	2301      	movs	r3, #1
 80478d2:	e07b      	b.n	80479cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80478d4:	687b      	ldr	r3, [r7, #4]
 80478d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80478d8:	2b00      	cmp	r3, #0
 80478da:	d108      	bne.n	80478ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80478dc:	687b      	ldr	r3, [r7, #4]
 80478de:	685b      	ldr	r3, [r3, #4]
 80478e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80478e4:	d009      	beq.n	80478fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80478e6:	687b      	ldr	r3, [r7, #4]
 80478e8:	2200      	movs	r2, #0
 80478ea:	61da      	str	r2, [r3, #28]
 80478ec:	e005      	b.n	80478fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80478ee:	687b      	ldr	r3, [r7, #4]
 80478f0:	2200      	movs	r2, #0
 80478f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80478f4:	687b      	ldr	r3, [r7, #4]
 80478f6:	2200      	movs	r2, #0
 80478f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80478fa:	687b      	ldr	r3, [r7, #4]
 80478fc:	2200      	movs	r2, #0
 80478fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8047900:	687b      	ldr	r3, [r7, #4]
 8047902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047906:	b2db      	uxtb	r3, r3
 8047908:	2b00      	cmp	r3, #0
 804790a:	d106      	bne.n	804791a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804790c:	687b      	ldr	r3, [r7, #4]
 804790e:	2200      	movs	r2, #0
 8047910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8047914:	6878      	ldr	r0, [r7, #4]
 8047916:	f7f9 ffc5 	bl	80418a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804791a:	687b      	ldr	r3, [r7, #4]
 804791c:	2202      	movs	r2, #2
 804791e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8047922:	687b      	ldr	r3, [r7, #4]
 8047924:	681b      	ldr	r3, [r3, #0]
 8047926:	681a      	ldr	r2, [r3, #0]
 8047928:	687b      	ldr	r3, [r7, #4]
 804792a:	681b      	ldr	r3, [r3, #0]
 804792c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047930:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8047932:	687b      	ldr	r3, [r7, #4]
 8047934:	685b      	ldr	r3, [r3, #4]
 8047936:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804793a:	687b      	ldr	r3, [r7, #4]
 804793c:	689b      	ldr	r3, [r3, #8]
 804793e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8047942:	431a      	orrs	r2, r3
 8047944:	687b      	ldr	r3, [r7, #4]
 8047946:	68db      	ldr	r3, [r3, #12]
 8047948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804794c:	431a      	orrs	r2, r3
 804794e:	687b      	ldr	r3, [r7, #4]
 8047950:	691b      	ldr	r3, [r3, #16]
 8047952:	f003 0302 	and.w	r3, r3, #2
 8047956:	431a      	orrs	r2, r3
 8047958:	687b      	ldr	r3, [r7, #4]
 804795a:	695b      	ldr	r3, [r3, #20]
 804795c:	f003 0301 	and.w	r3, r3, #1
 8047960:	431a      	orrs	r2, r3
 8047962:	687b      	ldr	r3, [r7, #4]
 8047964:	699b      	ldr	r3, [r3, #24]
 8047966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804796a:	431a      	orrs	r2, r3
 804796c:	687b      	ldr	r3, [r7, #4]
 804796e:	69db      	ldr	r3, [r3, #28]
 8047970:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8047974:	431a      	orrs	r2, r3
 8047976:	687b      	ldr	r3, [r7, #4]
 8047978:	6a1b      	ldr	r3, [r3, #32]
 804797a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804797e:	ea42 0103 	orr.w	r1, r2, r3
 8047982:	687b      	ldr	r3, [r7, #4]
 8047984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047986:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804798a:	687b      	ldr	r3, [r7, #4]
 804798c:	681b      	ldr	r3, [r3, #0]
 804798e:	430a      	orrs	r2, r1
 8047990:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8047992:	687b      	ldr	r3, [r7, #4]
 8047994:	699b      	ldr	r3, [r3, #24]
 8047996:	0c1b      	lsrs	r3, r3, #16
 8047998:	f003 0104 	and.w	r1, r3, #4
 804799c:	687b      	ldr	r3, [r7, #4]
 804799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80479a0:	f003 0210 	and.w	r2, r3, #16
 80479a4:	687b      	ldr	r3, [r7, #4]
 80479a6:	681b      	ldr	r3, [r3, #0]
 80479a8:	430a      	orrs	r2, r1
 80479aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80479ac:	687b      	ldr	r3, [r7, #4]
 80479ae:	681b      	ldr	r3, [r3, #0]
 80479b0:	69da      	ldr	r2, [r3, #28]
 80479b2:	687b      	ldr	r3, [r7, #4]
 80479b4:	681b      	ldr	r3, [r3, #0]
 80479b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80479ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80479bc:	687b      	ldr	r3, [r7, #4]
 80479be:	2200      	movs	r2, #0
 80479c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80479c2:	687b      	ldr	r3, [r7, #4]
 80479c4:	2201      	movs	r2, #1
 80479c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80479ca:	2300      	movs	r3, #0
}
 80479cc:	4618      	mov	r0, r3
 80479ce:	3708      	adds	r7, #8
 80479d0:	46bd      	mov	sp, r7
 80479d2:	bd80      	pop	{r7, pc}

080479d4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80479d4:	b580      	push	{r7, lr}
 80479d6:	b082      	sub	sp, #8
 80479d8:	af00      	add	r7, sp, #0
 80479da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80479dc:	687b      	ldr	r3, [r7, #4]
 80479de:	2b00      	cmp	r3, #0
 80479e0:	d101      	bne.n	80479e6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80479e2:	2301      	movs	r3, #1
 80479e4:	e01a      	b.n	8047a1c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80479e6:	687b      	ldr	r3, [r7, #4]
 80479e8:	2202      	movs	r2, #2
 80479ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80479ee:	687b      	ldr	r3, [r7, #4]
 80479f0:	681b      	ldr	r3, [r3, #0]
 80479f2:	681a      	ldr	r2, [r3, #0]
 80479f4:	687b      	ldr	r3, [r7, #4]
 80479f6:	681b      	ldr	r3, [r3, #0]
 80479f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80479fc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80479fe:	6878      	ldr	r0, [r7, #4]
 8047a00:	f7f9 ff98 	bl	8041934 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8047a04:	687b      	ldr	r3, [r7, #4]
 8047a06:	2200      	movs	r2, #0
 8047a08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8047a0a:	687b      	ldr	r3, [r7, #4]
 8047a0c:	2200      	movs	r2, #0
 8047a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8047a12:	687b      	ldr	r3, [r7, #4]
 8047a14:	2200      	movs	r2, #0
 8047a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8047a1a:	2300      	movs	r3, #0
}
 8047a1c:	4618      	mov	r0, r3
 8047a1e:	3708      	adds	r7, #8
 8047a20:	46bd      	mov	sp, r7
 8047a22:	bd80      	pop	{r7, pc}

08047a24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047a24:	b580      	push	{r7, lr}
 8047a26:	b088      	sub	sp, #32
 8047a28:	af00      	add	r7, sp, #0
 8047a2a:	60f8      	str	r0, [r7, #12]
 8047a2c:	60b9      	str	r1, [r7, #8]
 8047a2e:	603b      	str	r3, [r7, #0]
 8047a30:	4613      	mov	r3, r2
 8047a32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047a34:	2300      	movs	r3, #0
 8047a36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047a38:	68fb      	ldr	r3, [r7, #12]
 8047a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047a3e:	2b01      	cmp	r3, #1
 8047a40:	d101      	bne.n	8047a46 <HAL_SPI_Transmit+0x22>
 8047a42:	2302      	movs	r3, #2
 8047a44:	e126      	b.n	8047c94 <HAL_SPI_Transmit+0x270>
 8047a46:	68fb      	ldr	r3, [r7, #12]
 8047a48:	2201      	movs	r2, #1
 8047a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047a4e:	f7fb fcd1 	bl	80433f4 <HAL_GetTick>
 8047a52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8047a54:	88fb      	ldrh	r3, [r7, #6]
 8047a56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8047a58:	68fb      	ldr	r3, [r7, #12]
 8047a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047a5e:	b2db      	uxtb	r3, r3
 8047a60:	2b01      	cmp	r3, #1
 8047a62:	d002      	beq.n	8047a6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8047a64:	2302      	movs	r3, #2
 8047a66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8047a68:	e10b      	b.n	8047c82 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8047a6a:	68bb      	ldr	r3, [r7, #8]
 8047a6c:	2b00      	cmp	r3, #0
 8047a6e:	d002      	beq.n	8047a76 <HAL_SPI_Transmit+0x52>
 8047a70:	88fb      	ldrh	r3, [r7, #6]
 8047a72:	2b00      	cmp	r3, #0
 8047a74:	d102      	bne.n	8047a7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8047a76:	2301      	movs	r3, #1
 8047a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8047a7a:	e102      	b.n	8047c82 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8047a7c:	68fb      	ldr	r3, [r7, #12]
 8047a7e:	2203      	movs	r2, #3
 8047a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047a84:	68fb      	ldr	r3, [r7, #12]
 8047a86:	2200      	movs	r2, #0
 8047a88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8047a8a:	68fb      	ldr	r3, [r7, #12]
 8047a8c:	68ba      	ldr	r2, [r7, #8]
 8047a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8047a90:	68fb      	ldr	r3, [r7, #12]
 8047a92:	88fa      	ldrh	r2, [r7, #6]
 8047a94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8047a96:	68fb      	ldr	r3, [r7, #12]
 8047a98:	88fa      	ldrh	r2, [r7, #6]
 8047a9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8047a9c:	68fb      	ldr	r3, [r7, #12]
 8047a9e:	2200      	movs	r2, #0
 8047aa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8047aa2:	68fb      	ldr	r3, [r7, #12]
 8047aa4:	2200      	movs	r2, #0
 8047aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8047aa8:	68fb      	ldr	r3, [r7, #12]
 8047aaa:	2200      	movs	r2, #0
 8047aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8047aae:	68fb      	ldr	r3, [r7, #12]
 8047ab0:	2200      	movs	r2, #0
 8047ab2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8047ab4:	68fb      	ldr	r3, [r7, #12]
 8047ab6:	2200      	movs	r2, #0
 8047ab8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047aba:	68fb      	ldr	r3, [r7, #12]
 8047abc:	689b      	ldr	r3, [r3, #8]
 8047abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047ac2:	d10f      	bne.n	8047ae4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047ac4:	68fb      	ldr	r3, [r7, #12]
 8047ac6:	681b      	ldr	r3, [r3, #0]
 8047ac8:	681a      	ldr	r2, [r3, #0]
 8047aca:	68fb      	ldr	r3, [r7, #12]
 8047acc:	681b      	ldr	r3, [r3, #0]
 8047ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047ad2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8047ad4:	68fb      	ldr	r3, [r7, #12]
 8047ad6:	681b      	ldr	r3, [r3, #0]
 8047ad8:	681a      	ldr	r2, [r3, #0]
 8047ada:	68fb      	ldr	r3, [r7, #12]
 8047adc:	681b      	ldr	r3, [r3, #0]
 8047ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8047ae2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047ae4:	68fb      	ldr	r3, [r7, #12]
 8047ae6:	681b      	ldr	r3, [r3, #0]
 8047ae8:	681b      	ldr	r3, [r3, #0]
 8047aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047aee:	2b40      	cmp	r3, #64	; 0x40
 8047af0:	d007      	beq.n	8047b02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047af2:	68fb      	ldr	r3, [r7, #12]
 8047af4:	681b      	ldr	r3, [r3, #0]
 8047af6:	681a      	ldr	r2, [r3, #0]
 8047af8:	68fb      	ldr	r3, [r7, #12]
 8047afa:	681b      	ldr	r3, [r3, #0]
 8047afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047b00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047b02:	68fb      	ldr	r3, [r7, #12]
 8047b04:	68db      	ldr	r3, [r3, #12]
 8047b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047b0a:	d14b      	bne.n	8047ba4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047b0c:	68fb      	ldr	r3, [r7, #12]
 8047b0e:	685b      	ldr	r3, [r3, #4]
 8047b10:	2b00      	cmp	r3, #0
 8047b12:	d002      	beq.n	8047b1a <HAL_SPI_Transmit+0xf6>
 8047b14:	8afb      	ldrh	r3, [r7, #22]
 8047b16:	2b01      	cmp	r3, #1
 8047b18:	d13e      	bne.n	8047b98 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047b1a:	68fb      	ldr	r3, [r7, #12]
 8047b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b1e:	881a      	ldrh	r2, [r3, #0]
 8047b20:	68fb      	ldr	r3, [r7, #12]
 8047b22:	681b      	ldr	r3, [r3, #0]
 8047b24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047b26:	68fb      	ldr	r3, [r7, #12]
 8047b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b2a:	1c9a      	adds	r2, r3, #2
 8047b2c:	68fb      	ldr	r3, [r7, #12]
 8047b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047b30:	68fb      	ldr	r3, [r7, #12]
 8047b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b34:	b29b      	uxth	r3, r3
 8047b36:	3b01      	subs	r3, #1
 8047b38:	b29a      	uxth	r2, r3
 8047b3a:	68fb      	ldr	r3, [r7, #12]
 8047b3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8047b3e:	e02b      	b.n	8047b98 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047b40:	68fb      	ldr	r3, [r7, #12]
 8047b42:	681b      	ldr	r3, [r3, #0]
 8047b44:	689b      	ldr	r3, [r3, #8]
 8047b46:	f003 0302 	and.w	r3, r3, #2
 8047b4a:	2b02      	cmp	r3, #2
 8047b4c:	d112      	bne.n	8047b74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047b4e:	68fb      	ldr	r3, [r7, #12]
 8047b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b52:	881a      	ldrh	r2, [r3, #0]
 8047b54:	68fb      	ldr	r3, [r7, #12]
 8047b56:	681b      	ldr	r3, [r3, #0]
 8047b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8047b5a:	68fb      	ldr	r3, [r7, #12]
 8047b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047b5e:	1c9a      	adds	r2, r3, #2
 8047b60:	68fb      	ldr	r3, [r7, #12]
 8047b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047b64:	68fb      	ldr	r3, [r7, #12]
 8047b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b68:	b29b      	uxth	r3, r3
 8047b6a:	3b01      	subs	r3, #1
 8047b6c:	b29a      	uxth	r2, r3
 8047b6e:	68fb      	ldr	r3, [r7, #12]
 8047b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8047b72:	e011      	b.n	8047b98 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047b74:	f7fb fc3e 	bl	80433f4 <HAL_GetTick>
 8047b78:	4602      	mov	r2, r0
 8047b7a:	69bb      	ldr	r3, [r7, #24]
 8047b7c:	1ad3      	subs	r3, r2, r3
 8047b7e:	683a      	ldr	r2, [r7, #0]
 8047b80:	429a      	cmp	r2, r3
 8047b82:	d803      	bhi.n	8047b8c <HAL_SPI_Transmit+0x168>
 8047b84:	683b      	ldr	r3, [r7, #0]
 8047b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047b8a:	d102      	bne.n	8047b92 <HAL_SPI_Transmit+0x16e>
 8047b8c:	683b      	ldr	r3, [r7, #0]
 8047b8e:	2b00      	cmp	r3, #0
 8047b90:	d102      	bne.n	8047b98 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8047b92:	2303      	movs	r3, #3
 8047b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047b96:	e074      	b.n	8047c82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047b98:	68fb      	ldr	r3, [r7, #12]
 8047b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b9c:	b29b      	uxth	r3, r3
 8047b9e:	2b00      	cmp	r3, #0
 8047ba0:	d1ce      	bne.n	8047b40 <HAL_SPI_Transmit+0x11c>
 8047ba2:	e04c      	b.n	8047c3e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047ba4:	68fb      	ldr	r3, [r7, #12]
 8047ba6:	685b      	ldr	r3, [r3, #4]
 8047ba8:	2b00      	cmp	r3, #0
 8047baa:	d002      	beq.n	8047bb2 <HAL_SPI_Transmit+0x18e>
 8047bac:	8afb      	ldrh	r3, [r7, #22]
 8047bae:	2b01      	cmp	r3, #1
 8047bb0:	d140      	bne.n	8047c34 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047bb2:	68fb      	ldr	r3, [r7, #12]
 8047bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047bb6:	68fb      	ldr	r3, [r7, #12]
 8047bb8:	681b      	ldr	r3, [r3, #0]
 8047bba:	330c      	adds	r3, #12
 8047bbc:	7812      	ldrb	r2, [r2, #0]
 8047bbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047bc0:	68fb      	ldr	r3, [r7, #12]
 8047bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047bc4:	1c5a      	adds	r2, r3, #1
 8047bc6:	68fb      	ldr	r3, [r7, #12]
 8047bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047bca:	68fb      	ldr	r3, [r7, #12]
 8047bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047bce:	b29b      	uxth	r3, r3
 8047bd0:	3b01      	subs	r3, #1
 8047bd2:	b29a      	uxth	r2, r3
 8047bd4:	68fb      	ldr	r3, [r7, #12]
 8047bd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8047bd8:	e02c      	b.n	8047c34 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047bda:	68fb      	ldr	r3, [r7, #12]
 8047bdc:	681b      	ldr	r3, [r3, #0]
 8047bde:	689b      	ldr	r3, [r3, #8]
 8047be0:	f003 0302 	and.w	r3, r3, #2
 8047be4:	2b02      	cmp	r3, #2
 8047be6:	d113      	bne.n	8047c10 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047be8:	68fb      	ldr	r3, [r7, #12]
 8047bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047bec:	68fb      	ldr	r3, [r7, #12]
 8047bee:	681b      	ldr	r3, [r3, #0]
 8047bf0:	330c      	adds	r3, #12
 8047bf2:	7812      	ldrb	r2, [r2, #0]
 8047bf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8047bf6:	68fb      	ldr	r3, [r7, #12]
 8047bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047bfa:	1c5a      	adds	r2, r3, #1
 8047bfc:	68fb      	ldr	r3, [r7, #12]
 8047bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047c00:	68fb      	ldr	r3, [r7, #12]
 8047c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047c04:	b29b      	uxth	r3, r3
 8047c06:	3b01      	subs	r3, #1
 8047c08:	b29a      	uxth	r2, r3
 8047c0a:	68fb      	ldr	r3, [r7, #12]
 8047c0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8047c0e:	e011      	b.n	8047c34 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047c10:	f7fb fbf0 	bl	80433f4 <HAL_GetTick>
 8047c14:	4602      	mov	r2, r0
 8047c16:	69bb      	ldr	r3, [r7, #24]
 8047c18:	1ad3      	subs	r3, r2, r3
 8047c1a:	683a      	ldr	r2, [r7, #0]
 8047c1c:	429a      	cmp	r2, r3
 8047c1e:	d803      	bhi.n	8047c28 <HAL_SPI_Transmit+0x204>
 8047c20:	683b      	ldr	r3, [r7, #0]
 8047c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047c26:	d102      	bne.n	8047c2e <HAL_SPI_Transmit+0x20a>
 8047c28:	683b      	ldr	r3, [r7, #0]
 8047c2a:	2b00      	cmp	r3, #0
 8047c2c:	d102      	bne.n	8047c34 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8047c2e:	2303      	movs	r3, #3
 8047c30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047c32:	e026      	b.n	8047c82 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047c34:	68fb      	ldr	r3, [r7, #12]
 8047c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047c38:	b29b      	uxth	r3, r3
 8047c3a:	2b00      	cmp	r3, #0
 8047c3c:	d1cd      	bne.n	8047bda <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047c3e:	69ba      	ldr	r2, [r7, #24]
 8047c40:	6839      	ldr	r1, [r7, #0]
 8047c42:	68f8      	ldr	r0, [r7, #12]
 8047c44:	f000 fbda 	bl	80483fc <SPI_EndRxTxTransaction>
 8047c48:	4603      	mov	r3, r0
 8047c4a:	2b00      	cmp	r3, #0
 8047c4c:	d002      	beq.n	8047c54 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047c4e:	68fb      	ldr	r3, [r7, #12]
 8047c50:	2220      	movs	r2, #32
 8047c52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047c54:	68fb      	ldr	r3, [r7, #12]
 8047c56:	689b      	ldr	r3, [r3, #8]
 8047c58:	2b00      	cmp	r3, #0
 8047c5a:	d10a      	bne.n	8047c72 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047c5c:	2300      	movs	r3, #0
 8047c5e:	613b      	str	r3, [r7, #16]
 8047c60:	68fb      	ldr	r3, [r7, #12]
 8047c62:	681b      	ldr	r3, [r3, #0]
 8047c64:	68db      	ldr	r3, [r3, #12]
 8047c66:	613b      	str	r3, [r7, #16]
 8047c68:	68fb      	ldr	r3, [r7, #12]
 8047c6a:	681b      	ldr	r3, [r3, #0]
 8047c6c:	689b      	ldr	r3, [r3, #8]
 8047c6e:	613b      	str	r3, [r7, #16]
 8047c70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047c72:	68fb      	ldr	r3, [r7, #12]
 8047c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047c76:	2b00      	cmp	r3, #0
 8047c78:	d002      	beq.n	8047c80 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8047c7a:	2301      	movs	r3, #1
 8047c7c:	77fb      	strb	r3, [r7, #31]
 8047c7e:	e000      	b.n	8047c82 <HAL_SPI_Transmit+0x25e>
  }

error:
 8047c80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047c82:	68fb      	ldr	r3, [r7, #12]
 8047c84:	2201      	movs	r2, #1
 8047c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8047c8a:	68fb      	ldr	r3, [r7, #12]
 8047c8c:	2200      	movs	r2, #0
 8047c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8047c94:	4618      	mov	r0, r3
 8047c96:	3720      	adds	r7, #32
 8047c98:	46bd      	mov	sp, r7
 8047c9a:	bd80      	pop	{r7, pc}

08047c9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047c9c:	b580      	push	{r7, lr}
 8047c9e:	b088      	sub	sp, #32
 8047ca0:	af02      	add	r7, sp, #8
 8047ca2:	60f8      	str	r0, [r7, #12]
 8047ca4:	60b9      	str	r1, [r7, #8]
 8047ca6:	603b      	str	r3, [r7, #0]
 8047ca8:	4613      	mov	r3, r2
 8047caa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047cac:	2300      	movs	r3, #0
 8047cae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8047cb0:	68fb      	ldr	r3, [r7, #12]
 8047cb2:	685b      	ldr	r3, [r3, #4]
 8047cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047cb8:	d112      	bne.n	8047ce0 <HAL_SPI_Receive+0x44>
 8047cba:	68fb      	ldr	r3, [r7, #12]
 8047cbc:	689b      	ldr	r3, [r3, #8]
 8047cbe:	2b00      	cmp	r3, #0
 8047cc0:	d10e      	bne.n	8047ce0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8047cc2:	68fb      	ldr	r3, [r7, #12]
 8047cc4:	2204      	movs	r2, #4
 8047cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8047cca:	88fa      	ldrh	r2, [r7, #6]
 8047ccc:	683b      	ldr	r3, [r7, #0]
 8047cce:	9300      	str	r3, [sp, #0]
 8047cd0:	4613      	mov	r3, r2
 8047cd2:	68ba      	ldr	r2, [r7, #8]
 8047cd4:	68b9      	ldr	r1, [r7, #8]
 8047cd6:	68f8      	ldr	r0, [r7, #12]
 8047cd8:	f000 f8f1 	bl	8047ebe <HAL_SPI_TransmitReceive>
 8047cdc:	4603      	mov	r3, r0
 8047cde:	e0ea      	b.n	8047eb6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047ce0:	68fb      	ldr	r3, [r7, #12]
 8047ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047ce6:	2b01      	cmp	r3, #1
 8047ce8:	d101      	bne.n	8047cee <HAL_SPI_Receive+0x52>
 8047cea:	2302      	movs	r3, #2
 8047cec:	e0e3      	b.n	8047eb6 <HAL_SPI_Receive+0x21a>
 8047cee:	68fb      	ldr	r3, [r7, #12]
 8047cf0:	2201      	movs	r2, #1
 8047cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047cf6:	f7fb fb7d 	bl	80433f4 <HAL_GetTick>
 8047cfa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8047cfc:	68fb      	ldr	r3, [r7, #12]
 8047cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047d02:	b2db      	uxtb	r3, r3
 8047d04:	2b01      	cmp	r3, #1
 8047d06:	d002      	beq.n	8047d0e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8047d08:	2302      	movs	r3, #2
 8047d0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047d0c:	e0ca      	b.n	8047ea4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8047d0e:	68bb      	ldr	r3, [r7, #8]
 8047d10:	2b00      	cmp	r3, #0
 8047d12:	d002      	beq.n	8047d1a <HAL_SPI_Receive+0x7e>
 8047d14:	88fb      	ldrh	r3, [r7, #6]
 8047d16:	2b00      	cmp	r3, #0
 8047d18:	d102      	bne.n	8047d20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8047d1a:	2301      	movs	r3, #1
 8047d1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047d1e:	e0c1      	b.n	8047ea4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8047d20:	68fb      	ldr	r3, [r7, #12]
 8047d22:	2204      	movs	r2, #4
 8047d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047d28:	68fb      	ldr	r3, [r7, #12]
 8047d2a:	2200      	movs	r2, #0
 8047d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8047d2e:	68fb      	ldr	r3, [r7, #12]
 8047d30:	68ba      	ldr	r2, [r7, #8]
 8047d32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8047d34:	68fb      	ldr	r3, [r7, #12]
 8047d36:	88fa      	ldrh	r2, [r7, #6]
 8047d38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8047d3a:	68fb      	ldr	r3, [r7, #12]
 8047d3c:	88fa      	ldrh	r2, [r7, #6]
 8047d3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8047d40:	68fb      	ldr	r3, [r7, #12]
 8047d42:	2200      	movs	r2, #0
 8047d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8047d46:	68fb      	ldr	r3, [r7, #12]
 8047d48:	2200      	movs	r2, #0
 8047d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8047d4c:	68fb      	ldr	r3, [r7, #12]
 8047d4e:	2200      	movs	r2, #0
 8047d50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8047d52:	68fb      	ldr	r3, [r7, #12]
 8047d54:	2200      	movs	r2, #0
 8047d56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047d58:	68fb      	ldr	r3, [r7, #12]
 8047d5a:	2200      	movs	r2, #0
 8047d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047d5e:	68fb      	ldr	r3, [r7, #12]
 8047d60:	689b      	ldr	r3, [r3, #8]
 8047d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047d66:	d10f      	bne.n	8047d88 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047d68:	68fb      	ldr	r3, [r7, #12]
 8047d6a:	681b      	ldr	r3, [r3, #0]
 8047d6c:	681a      	ldr	r2, [r3, #0]
 8047d6e:	68fb      	ldr	r3, [r7, #12]
 8047d70:	681b      	ldr	r3, [r3, #0]
 8047d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8047d78:	68fb      	ldr	r3, [r7, #12]
 8047d7a:	681b      	ldr	r3, [r3, #0]
 8047d7c:	681a      	ldr	r2, [r3, #0]
 8047d7e:	68fb      	ldr	r3, [r7, #12]
 8047d80:	681b      	ldr	r3, [r3, #0]
 8047d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047d86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047d88:	68fb      	ldr	r3, [r7, #12]
 8047d8a:	681b      	ldr	r3, [r3, #0]
 8047d8c:	681b      	ldr	r3, [r3, #0]
 8047d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047d92:	2b40      	cmp	r3, #64	; 0x40
 8047d94:	d007      	beq.n	8047da6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047d96:	68fb      	ldr	r3, [r7, #12]
 8047d98:	681b      	ldr	r3, [r3, #0]
 8047d9a:	681a      	ldr	r2, [r3, #0]
 8047d9c:	68fb      	ldr	r3, [r7, #12]
 8047d9e:	681b      	ldr	r3, [r3, #0]
 8047da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047da4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8047da6:	68fb      	ldr	r3, [r7, #12]
 8047da8:	68db      	ldr	r3, [r3, #12]
 8047daa:	2b00      	cmp	r3, #0
 8047dac:	d162      	bne.n	8047e74 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8047dae:	e02e      	b.n	8047e0e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047db0:	68fb      	ldr	r3, [r7, #12]
 8047db2:	681b      	ldr	r3, [r3, #0]
 8047db4:	689b      	ldr	r3, [r3, #8]
 8047db6:	f003 0301 	and.w	r3, r3, #1
 8047dba:	2b01      	cmp	r3, #1
 8047dbc:	d115      	bne.n	8047dea <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8047dbe:	68fb      	ldr	r3, [r7, #12]
 8047dc0:	681b      	ldr	r3, [r3, #0]
 8047dc2:	f103 020c 	add.w	r2, r3, #12
 8047dc6:	68fb      	ldr	r3, [r7, #12]
 8047dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047dca:	7812      	ldrb	r2, [r2, #0]
 8047dcc:	b2d2      	uxtb	r2, r2
 8047dce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8047dd0:	68fb      	ldr	r3, [r7, #12]
 8047dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047dd4:	1c5a      	adds	r2, r3, #1
 8047dd6:	68fb      	ldr	r3, [r7, #12]
 8047dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047dda:	68fb      	ldr	r3, [r7, #12]
 8047ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047dde:	b29b      	uxth	r3, r3
 8047de0:	3b01      	subs	r3, #1
 8047de2:	b29a      	uxth	r2, r3
 8047de4:	68fb      	ldr	r3, [r7, #12]
 8047de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047de8:	e011      	b.n	8047e0e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047dea:	f7fb fb03 	bl	80433f4 <HAL_GetTick>
 8047dee:	4602      	mov	r2, r0
 8047df0:	693b      	ldr	r3, [r7, #16]
 8047df2:	1ad3      	subs	r3, r2, r3
 8047df4:	683a      	ldr	r2, [r7, #0]
 8047df6:	429a      	cmp	r2, r3
 8047df8:	d803      	bhi.n	8047e02 <HAL_SPI_Receive+0x166>
 8047dfa:	683b      	ldr	r3, [r7, #0]
 8047dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047e00:	d102      	bne.n	8047e08 <HAL_SPI_Receive+0x16c>
 8047e02:	683b      	ldr	r3, [r7, #0]
 8047e04:	2b00      	cmp	r3, #0
 8047e06:	d102      	bne.n	8047e0e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8047e08:	2303      	movs	r3, #3
 8047e0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047e0c:	e04a      	b.n	8047ea4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047e0e:	68fb      	ldr	r3, [r7, #12]
 8047e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047e12:	b29b      	uxth	r3, r3
 8047e14:	2b00      	cmp	r3, #0
 8047e16:	d1cb      	bne.n	8047db0 <HAL_SPI_Receive+0x114>
 8047e18:	e031      	b.n	8047e7e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047e1a:	68fb      	ldr	r3, [r7, #12]
 8047e1c:	681b      	ldr	r3, [r3, #0]
 8047e1e:	689b      	ldr	r3, [r3, #8]
 8047e20:	f003 0301 	and.w	r3, r3, #1
 8047e24:	2b01      	cmp	r3, #1
 8047e26:	d113      	bne.n	8047e50 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8047e28:	68fb      	ldr	r3, [r7, #12]
 8047e2a:	681b      	ldr	r3, [r3, #0]
 8047e2c:	68da      	ldr	r2, [r3, #12]
 8047e2e:	68fb      	ldr	r3, [r7, #12]
 8047e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047e32:	b292      	uxth	r2, r2
 8047e34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047e36:	68fb      	ldr	r3, [r7, #12]
 8047e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047e3a:	1c9a      	adds	r2, r3, #2
 8047e3c:	68fb      	ldr	r3, [r7, #12]
 8047e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047e40:	68fb      	ldr	r3, [r7, #12]
 8047e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047e44:	b29b      	uxth	r3, r3
 8047e46:	3b01      	subs	r3, #1
 8047e48:	b29a      	uxth	r2, r3
 8047e4a:	68fb      	ldr	r3, [r7, #12]
 8047e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047e4e:	e011      	b.n	8047e74 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047e50:	f7fb fad0 	bl	80433f4 <HAL_GetTick>
 8047e54:	4602      	mov	r2, r0
 8047e56:	693b      	ldr	r3, [r7, #16]
 8047e58:	1ad3      	subs	r3, r2, r3
 8047e5a:	683a      	ldr	r2, [r7, #0]
 8047e5c:	429a      	cmp	r2, r3
 8047e5e:	d803      	bhi.n	8047e68 <HAL_SPI_Receive+0x1cc>
 8047e60:	683b      	ldr	r3, [r7, #0]
 8047e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047e66:	d102      	bne.n	8047e6e <HAL_SPI_Receive+0x1d2>
 8047e68:	683b      	ldr	r3, [r7, #0]
 8047e6a:	2b00      	cmp	r3, #0
 8047e6c:	d102      	bne.n	8047e74 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8047e6e:	2303      	movs	r3, #3
 8047e70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047e72:	e017      	b.n	8047ea4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047e74:	68fb      	ldr	r3, [r7, #12]
 8047e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047e78:	b29b      	uxth	r3, r3
 8047e7a:	2b00      	cmp	r3, #0
 8047e7c:	d1cd      	bne.n	8047e1a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047e7e:	693a      	ldr	r2, [r7, #16]
 8047e80:	6839      	ldr	r1, [r7, #0]
 8047e82:	68f8      	ldr	r0, [r7, #12]
 8047e84:	f000 fa54 	bl	8048330 <SPI_EndRxTransaction>
 8047e88:	4603      	mov	r3, r0
 8047e8a:	2b00      	cmp	r3, #0
 8047e8c:	d002      	beq.n	8047e94 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047e8e:	68fb      	ldr	r3, [r7, #12]
 8047e90:	2220      	movs	r2, #32
 8047e92:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047e94:	68fb      	ldr	r3, [r7, #12]
 8047e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047e98:	2b00      	cmp	r3, #0
 8047e9a:	d002      	beq.n	8047ea2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8047e9c:	2301      	movs	r3, #1
 8047e9e:	75fb      	strb	r3, [r7, #23]
 8047ea0:	e000      	b.n	8047ea4 <HAL_SPI_Receive+0x208>
  }

error :
 8047ea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047ea4:	68fb      	ldr	r3, [r7, #12]
 8047ea6:	2201      	movs	r2, #1
 8047ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047eac:	68fb      	ldr	r3, [r7, #12]
 8047eae:	2200      	movs	r2, #0
 8047eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8047eb6:	4618      	mov	r0, r3
 8047eb8:	3718      	adds	r7, #24
 8047eba:	46bd      	mov	sp, r7
 8047ebc:	bd80      	pop	{r7, pc}

08047ebe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8047ebe:	b580      	push	{r7, lr}
 8047ec0:	b08c      	sub	sp, #48	; 0x30
 8047ec2:	af00      	add	r7, sp, #0
 8047ec4:	60f8      	str	r0, [r7, #12]
 8047ec6:	60b9      	str	r1, [r7, #8]
 8047ec8:	607a      	str	r2, [r7, #4]
 8047eca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8047ecc:	2301      	movs	r3, #1
 8047ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8047ed0:	2300      	movs	r3, #0
 8047ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047ed6:	68fb      	ldr	r3, [r7, #12]
 8047ed8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047edc:	2b01      	cmp	r3, #1
 8047ede:	d101      	bne.n	8047ee4 <HAL_SPI_TransmitReceive+0x26>
 8047ee0:	2302      	movs	r3, #2
 8047ee2:	e18a      	b.n	80481fa <HAL_SPI_TransmitReceive+0x33c>
 8047ee4:	68fb      	ldr	r3, [r7, #12]
 8047ee6:	2201      	movs	r2, #1
 8047ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047eec:	f7fb fa82 	bl	80433f4 <HAL_GetTick>
 8047ef0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8047ef2:	68fb      	ldr	r3, [r7, #12]
 8047ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8047efc:	68fb      	ldr	r3, [r7, #12]
 8047efe:	685b      	ldr	r3, [r3, #4]
 8047f00:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8047f02:	887b      	ldrh	r3, [r7, #2]
 8047f04:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8047f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8047f0a:	2b01      	cmp	r3, #1
 8047f0c:	d00f      	beq.n	8047f2e <HAL_SPI_TransmitReceive+0x70>
 8047f0e:	69fb      	ldr	r3, [r7, #28]
 8047f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047f14:	d107      	bne.n	8047f26 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8047f16:	68fb      	ldr	r3, [r7, #12]
 8047f18:	689b      	ldr	r3, [r3, #8]
 8047f1a:	2b00      	cmp	r3, #0
 8047f1c:	d103      	bne.n	8047f26 <HAL_SPI_TransmitReceive+0x68>
 8047f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8047f22:	2b04      	cmp	r3, #4
 8047f24:	d003      	beq.n	8047f2e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8047f26:	2302      	movs	r3, #2
 8047f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047f2c:	e15b      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8047f2e:	68bb      	ldr	r3, [r7, #8]
 8047f30:	2b00      	cmp	r3, #0
 8047f32:	d005      	beq.n	8047f40 <HAL_SPI_TransmitReceive+0x82>
 8047f34:	687b      	ldr	r3, [r7, #4]
 8047f36:	2b00      	cmp	r3, #0
 8047f38:	d002      	beq.n	8047f40 <HAL_SPI_TransmitReceive+0x82>
 8047f3a:	887b      	ldrh	r3, [r7, #2]
 8047f3c:	2b00      	cmp	r3, #0
 8047f3e:	d103      	bne.n	8047f48 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8047f40:	2301      	movs	r3, #1
 8047f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047f46:	e14e      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8047f48:	68fb      	ldr	r3, [r7, #12]
 8047f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047f4e:	b2db      	uxtb	r3, r3
 8047f50:	2b04      	cmp	r3, #4
 8047f52:	d003      	beq.n	8047f5c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8047f54:	68fb      	ldr	r3, [r7, #12]
 8047f56:	2205      	movs	r2, #5
 8047f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047f5c:	68fb      	ldr	r3, [r7, #12]
 8047f5e:	2200      	movs	r2, #0
 8047f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8047f62:	68fb      	ldr	r3, [r7, #12]
 8047f64:	687a      	ldr	r2, [r7, #4]
 8047f66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8047f68:	68fb      	ldr	r3, [r7, #12]
 8047f6a:	887a      	ldrh	r2, [r7, #2]
 8047f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8047f6e:	68fb      	ldr	r3, [r7, #12]
 8047f70:	887a      	ldrh	r2, [r7, #2]
 8047f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8047f74:	68fb      	ldr	r3, [r7, #12]
 8047f76:	68ba      	ldr	r2, [r7, #8]
 8047f78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8047f7a:	68fb      	ldr	r3, [r7, #12]
 8047f7c:	887a      	ldrh	r2, [r7, #2]
 8047f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8047f80:	68fb      	ldr	r3, [r7, #12]
 8047f82:	887a      	ldrh	r2, [r7, #2]
 8047f84:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8047f86:	68fb      	ldr	r3, [r7, #12]
 8047f88:	2200      	movs	r2, #0
 8047f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047f8c:	68fb      	ldr	r3, [r7, #12]
 8047f8e:	2200      	movs	r2, #0
 8047f90:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047f92:	68fb      	ldr	r3, [r7, #12]
 8047f94:	681b      	ldr	r3, [r3, #0]
 8047f96:	681b      	ldr	r3, [r3, #0]
 8047f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047f9c:	2b40      	cmp	r3, #64	; 0x40
 8047f9e:	d007      	beq.n	8047fb0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047fa0:	68fb      	ldr	r3, [r7, #12]
 8047fa2:	681b      	ldr	r3, [r3, #0]
 8047fa4:	681a      	ldr	r2, [r3, #0]
 8047fa6:	68fb      	ldr	r3, [r7, #12]
 8047fa8:	681b      	ldr	r3, [r3, #0]
 8047faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047fb0:	68fb      	ldr	r3, [r7, #12]
 8047fb2:	68db      	ldr	r3, [r3, #12]
 8047fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047fb8:	d178      	bne.n	80480ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047fba:	68fb      	ldr	r3, [r7, #12]
 8047fbc:	685b      	ldr	r3, [r3, #4]
 8047fbe:	2b00      	cmp	r3, #0
 8047fc0:	d002      	beq.n	8047fc8 <HAL_SPI_TransmitReceive+0x10a>
 8047fc2:	8b7b      	ldrh	r3, [r7, #26]
 8047fc4:	2b01      	cmp	r3, #1
 8047fc6:	d166      	bne.n	8048096 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047fc8:	68fb      	ldr	r3, [r7, #12]
 8047fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047fcc:	881a      	ldrh	r2, [r3, #0]
 8047fce:	68fb      	ldr	r3, [r7, #12]
 8047fd0:	681b      	ldr	r3, [r3, #0]
 8047fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047fd4:	68fb      	ldr	r3, [r7, #12]
 8047fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047fd8:	1c9a      	adds	r2, r3, #2
 8047fda:	68fb      	ldr	r3, [r7, #12]
 8047fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047fde:	68fb      	ldr	r3, [r7, #12]
 8047fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047fe2:	b29b      	uxth	r3, r3
 8047fe4:	3b01      	subs	r3, #1
 8047fe6:	b29a      	uxth	r2, r3
 8047fe8:	68fb      	ldr	r3, [r7, #12]
 8047fea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047fec:	e053      	b.n	8048096 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047fee:	68fb      	ldr	r3, [r7, #12]
 8047ff0:	681b      	ldr	r3, [r3, #0]
 8047ff2:	689b      	ldr	r3, [r3, #8]
 8047ff4:	f003 0302 	and.w	r3, r3, #2
 8047ff8:	2b02      	cmp	r3, #2
 8047ffa:	d11b      	bne.n	8048034 <HAL_SPI_TransmitReceive+0x176>
 8047ffc:	68fb      	ldr	r3, [r7, #12]
 8047ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048000:	b29b      	uxth	r3, r3
 8048002:	2b00      	cmp	r3, #0
 8048004:	d016      	beq.n	8048034 <HAL_SPI_TransmitReceive+0x176>
 8048006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048008:	2b01      	cmp	r3, #1
 804800a:	d113      	bne.n	8048034 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804800c:	68fb      	ldr	r3, [r7, #12]
 804800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048010:	881a      	ldrh	r2, [r3, #0]
 8048012:	68fb      	ldr	r3, [r7, #12]
 8048014:	681b      	ldr	r3, [r3, #0]
 8048016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8048018:	68fb      	ldr	r3, [r7, #12]
 804801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804801c:	1c9a      	adds	r2, r3, #2
 804801e:	68fb      	ldr	r3, [r7, #12]
 8048020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048022:	68fb      	ldr	r3, [r7, #12]
 8048024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048026:	b29b      	uxth	r3, r3
 8048028:	3b01      	subs	r3, #1
 804802a:	b29a      	uxth	r2, r3
 804802c:	68fb      	ldr	r3, [r7, #12]
 804802e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8048030:	2300      	movs	r3, #0
 8048032:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8048034:	68fb      	ldr	r3, [r7, #12]
 8048036:	681b      	ldr	r3, [r3, #0]
 8048038:	689b      	ldr	r3, [r3, #8]
 804803a:	f003 0301 	and.w	r3, r3, #1
 804803e:	2b01      	cmp	r3, #1
 8048040:	d119      	bne.n	8048076 <HAL_SPI_TransmitReceive+0x1b8>
 8048042:	68fb      	ldr	r3, [r7, #12]
 8048044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048046:	b29b      	uxth	r3, r3
 8048048:	2b00      	cmp	r3, #0
 804804a:	d014      	beq.n	8048076 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804804c:	68fb      	ldr	r3, [r7, #12]
 804804e:	681b      	ldr	r3, [r3, #0]
 8048050:	68da      	ldr	r2, [r3, #12]
 8048052:	68fb      	ldr	r3, [r7, #12]
 8048054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048056:	b292      	uxth	r2, r2
 8048058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804805a:	68fb      	ldr	r3, [r7, #12]
 804805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804805e:	1c9a      	adds	r2, r3, #2
 8048060:	68fb      	ldr	r3, [r7, #12]
 8048062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8048064:	68fb      	ldr	r3, [r7, #12]
 8048066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048068:	b29b      	uxth	r3, r3
 804806a:	3b01      	subs	r3, #1
 804806c:	b29a      	uxth	r2, r3
 804806e:	68fb      	ldr	r3, [r7, #12]
 8048070:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8048072:	2301      	movs	r3, #1
 8048074:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8048076:	f7fb f9bd 	bl	80433f4 <HAL_GetTick>
 804807a:	4602      	mov	r2, r0
 804807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804807e:	1ad3      	subs	r3, r2, r3
 8048080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8048082:	429a      	cmp	r2, r3
 8048084:	d807      	bhi.n	8048096 <HAL_SPI_TransmitReceive+0x1d8>
 8048086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048088:	f1b3 3fff 	cmp.w	r3, #4294967295
 804808c:	d003      	beq.n	8048096 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 804808e:	2303      	movs	r3, #3
 8048090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8048094:	e0a7      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8048096:	68fb      	ldr	r3, [r7, #12]
 8048098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804809a:	b29b      	uxth	r3, r3
 804809c:	2b00      	cmp	r3, #0
 804809e:	d1a6      	bne.n	8047fee <HAL_SPI_TransmitReceive+0x130>
 80480a0:	68fb      	ldr	r3, [r7, #12]
 80480a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80480a4:	b29b      	uxth	r3, r3
 80480a6:	2b00      	cmp	r3, #0
 80480a8:	d1a1      	bne.n	8047fee <HAL_SPI_TransmitReceive+0x130>
 80480aa:	e07c      	b.n	80481a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80480ac:	68fb      	ldr	r3, [r7, #12]
 80480ae:	685b      	ldr	r3, [r3, #4]
 80480b0:	2b00      	cmp	r3, #0
 80480b2:	d002      	beq.n	80480ba <HAL_SPI_TransmitReceive+0x1fc>
 80480b4:	8b7b      	ldrh	r3, [r7, #26]
 80480b6:	2b01      	cmp	r3, #1
 80480b8:	d16b      	bne.n	8048192 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80480ba:	68fb      	ldr	r3, [r7, #12]
 80480bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80480be:	68fb      	ldr	r3, [r7, #12]
 80480c0:	681b      	ldr	r3, [r3, #0]
 80480c2:	330c      	adds	r3, #12
 80480c4:	7812      	ldrb	r2, [r2, #0]
 80480c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80480c8:	68fb      	ldr	r3, [r7, #12]
 80480ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80480cc:	1c5a      	adds	r2, r3, #1
 80480ce:	68fb      	ldr	r3, [r7, #12]
 80480d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80480d2:	68fb      	ldr	r3, [r7, #12]
 80480d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80480d6:	b29b      	uxth	r3, r3
 80480d8:	3b01      	subs	r3, #1
 80480da:	b29a      	uxth	r2, r3
 80480dc:	68fb      	ldr	r3, [r7, #12]
 80480de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80480e0:	e057      	b.n	8048192 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80480e2:	68fb      	ldr	r3, [r7, #12]
 80480e4:	681b      	ldr	r3, [r3, #0]
 80480e6:	689b      	ldr	r3, [r3, #8]
 80480e8:	f003 0302 	and.w	r3, r3, #2
 80480ec:	2b02      	cmp	r3, #2
 80480ee:	d11c      	bne.n	804812a <HAL_SPI_TransmitReceive+0x26c>
 80480f0:	68fb      	ldr	r3, [r7, #12]
 80480f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80480f4:	b29b      	uxth	r3, r3
 80480f6:	2b00      	cmp	r3, #0
 80480f8:	d017      	beq.n	804812a <HAL_SPI_TransmitReceive+0x26c>
 80480fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80480fc:	2b01      	cmp	r3, #1
 80480fe:	d114      	bne.n	804812a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8048100:	68fb      	ldr	r3, [r7, #12]
 8048102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8048104:	68fb      	ldr	r3, [r7, #12]
 8048106:	681b      	ldr	r3, [r3, #0]
 8048108:	330c      	adds	r3, #12
 804810a:	7812      	ldrb	r2, [r2, #0]
 804810c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 804810e:	68fb      	ldr	r3, [r7, #12]
 8048110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048112:	1c5a      	adds	r2, r3, #1
 8048114:	68fb      	ldr	r3, [r7, #12]
 8048116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8048118:	68fb      	ldr	r3, [r7, #12]
 804811a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804811c:	b29b      	uxth	r3, r3
 804811e:	3b01      	subs	r3, #1
 8048120:	b29a      	uxth	r2, r3
 8048122:	68fb      	ldr	r3, [r7, #12]
 8048124:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8048126:	2300      	movs	r3, #0
 8048128:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804812a:	68fb      	ldr	r3, [r7, #12]
 804812c:	681b      	ldr	r3, [r3, #0]
 804812e:	689b      	ldr	r3, [r3, #8]
 8048130:	f003 0301 	and.w	r3, r3, #1
 8048134:	2b01      	cmp	r3, #1
 8048136:	d119      	bne.n	804816c <HAL_SPI_TransmitReceive+0x2ae>
 8048138:	68fb      	ldr	r3, [r7, #12]
 804813a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804813c:	b29b      	uxth	r3, r3
 804813e:	2b00      	cmp	r3, #0
 8048140:	d014      	beq.n	804816c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8048142:	68fb      	ldr	r3, [r7, #12]
 8048144:	681b      	ldr	r3, [r3, #0]
 8048146:	68da      	ldr	r2, [r3, #12]
 8048148:	68fb      	ldr	r3, [r7, #12]
 804814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804814c:	b2d2      	uxtb	r2, r2
 804814e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8048150:	68fb      	ldr	r3, [r7, #12]
 8048152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048154:	1c5a      	adds	r2, r3, #1
 8048156:	68fb      	ldr	r3, [r7, #12]
 8048158:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804815a:	68fb      	ldr	r3, [r7, #12]
 804815c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804815e:	b29b      	uxth	r3, r3
 8048160:	3b01      	subs	r3, #1
 8048162:	b29a      	uxth	r2, r3
 8048164:	68fb      	ldr	r3, [r7, #12]
 8048166:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8048168:	2301      	movs	r3, #1
 804816a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804816c:	f7fb f942 	bl	80433f4 <HAL_GetTick>
 8048170:	4602      	mov	r2, r0
 8048172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048174:	1ad3      	subs	r3, r2, r3
 8048176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8048178:	429a      	cmp	r2, r3
 804817a:	d803      	bhi.n	8048184 <HAL_SPI_TransmitReceive+0x2c6>
 804817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048182:	d102      	bne.n	804818a <HAL_SPI_TransmitReceive+0x2cc>
 8048184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048186:	2b00      	cmp	r3, #0
 8048188:	d103      	bne.n	8048192 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 804818a:	2303      	movs	r3, #3
 804818c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8048190:	e029      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8048192:	68fb      	ldr	r3, [r7, #12]
 8048194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048196:	b29b      	uxth	r3, r3
 8048198:	2b00      	cmp	r3, #0
 804819a:	d1a2      	bne.n	80480e2 <HAL_SPI_TransmitReceive+0x224>
 804819c:	68fb      	ldr	r3, [r7, #12]
 804819e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80481a0:	b29b      	uxth	r3, r3
 80481a2:	2b00      	cmp	r3, #0
 80481a4:	d19d      	bne.n	80480e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80481a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80481a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80481aa:	68f8      	ldr	r0, [r7, #12]
 80481ac:	f000 f926 	bl	80483fc <SPI_EndRxTxTransaction>
 80481b0:	4603      	mov	r3, r0
 80481b2:	2b00      	cmp	r3, #0
 80481b4:	d006      	beq.n	80481c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80481b6:	2301      	movs	r3, #1
 80481b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80481bc:	68fb      	ldr	r3, [r7, #12]
 80481be:	2220      	movs	r2, #32
 80481c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80481c2:	e010      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80481c4:	68fb      	ldr	r3, [r7, #12]
 80481c6:	689b      	ldr	r3, [r3, #8]
 80481c8:	2b00      	cmp	r3, #0
 80481ca:	d10b      	bne.n	80481e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80481cc:	2300      	movs	r3, #0
 80481ce:	617b      	str	r3, [r7, #20]
 80481d0:	68fb      	ldr	r3, [r7, #12]
 80481d2:	681b      	ldr	r3, [r3, #0]
 80481d4:	68db      	ldr	r3, [r3, #12]
 80481d6:	617b      	str	r3, [r7, #20]
 80481d8:	68fb      	ldr	r3, [r7, #12]
 80481da:	681b      	ldr	r3, [r3, #0]
 80481dc:	689b      	ldr	r3, [r3, #8]
 80481de:	617b      	str	r3, [r7, #20]
 80481e0:	697b      	ldr	r3, [r7, #20]
 80481e2:	e000      	b.n	80481e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80481e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80481e6:	68fb      	ldr	r3, [r7, #12]
 80481e8:	2201      	movs	r2, #1
 80481ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80481ee:	68fb      	ldr	r3, [r7, #12]
 80481f0:	2200      	movs	r2, #0
 80481f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80481f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80481fa:	4618      	mov	r0, r3
 80481fc:	3730      	adds	r7, #48	; 0x30
 80481fe:	46bd      	mov	sp, r7
 8048200:	bd80      	pop	{r7, pc}

08048202 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8048202:	b480      	push	{r7}
 8048204:	b083      	sub	sp, #12
 8048206:	af00      	add	r7, sp, #0
 8048208:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 804820a:	687b      	ldr	r3, [r7, #4]
 804820c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8048210:	b2db      	uxtb	r3, r3
}
 8048212:	4618      	mov	r0, r3
 8048214:	370c      	adds	r7, #12
 8048216:	46bd      	mov	sp, r7
 8048218:	f85d 7b04 	ldr.w	r7, [sp], #4
 804821c:	4770      	bx	lr
	...

08048220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8048220:	b580      	push	{r7, lr}
 8048222:	b088      	sub	sp, #32
 8048224:	af00      	add	r7, sp, #0
 8048226:	60f8      	str	r0, [r7, #12]
 8048228:	60b9      	str	r1, [r7, #8]
 804822a:	603b      	str	r3, [r7, #0]
 804822c:	4613      	mov	r3, r2
 804822e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8048230:	f7fb f8e0 	bl	80433f4 <HAL_GetTick>
 8048234:	4602      	mov	r2, r0
 8048236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048238:	1a9b      	subs	r3, r3, r2
 804823a:	683a      	ldr	r2, [r7, #0]
 804823c:	4413      	add	r3, r2
 804823e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8048240:	f7fb f8d8 	bl	80433f4 <HAL_GetTick>
 8048244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8048246:	4b39      	ldr	r3, [pc, #228]	; (804832c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8048248:	681b      	ldr	r3, [r3, #0]
 804824a:	015b      	lsls	r3, r3, #5
 804824c:	0d1b      	lsrs	r3, r3, #20
 804824e:	69fa      	ldr	r2, [r7, #28]
 8048250:	fb02 f303 	mul.w	r3, r2, r3
 8048254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8048256:	e054      	b.n	8048302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8048258:	683b      	ldr	r3, [r7, #0]
 804825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804825e:	d050      	beq.n	8048302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8048260:	f7fb f8c8 	bl	80433f4 <HAL_GetTick>
 8048264:	4602      	mov	r2, r0
 8048266:	69bb      	ldr	r3, [r7, #24]
 8048268:	1ad3      	subs	r3, r2, r3
 804826a:	69fa      	ldr	r2, [r7, #28]
 804826c:	429a      	cmp	r2, r3
 804826e:	d902      	bls.n	8048276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8048270:	69fb      	ldr	r3, [r7, #28]
 8048272:	2b00      	cmp	r3, #0
 8048274:	d13d      	bne.n	80482f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8048276:	68fb      	ldr	r3, [r7, #12]
 8048278:	681b      	ldr	r3, [r3, #0]
 804827a:	685a      	ldr	r2, [r3, #4]
 804827c:	68fb      	ldr	r3, [r7, #12]
 804827e:	681b      	ldr	r3, [r3, #0]
 8048280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8048284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8048286:	68fb      	ldr	r3, [r7, #12]
 8048288:	685b      	ldr	r3, [r3, #4]
 804828a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804828e:	d111      	bne.n	80482b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8048290:	68fb      	ldr	r3, [r7, #12]
 8048292:	689b      	ldr	r3, [r3, #8]
 8048294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048298:	d004      	beq.n	80482a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804829a:	68fb      	ldr	r3, [r7, #12]
 804829c:	689b      	ldr	r3, [r3, #8]
 804829e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80482a2:	d107      	bne.n	80482b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80482a4:	68fb      	ldr	r3, [r7, #12]
 80482a6:	681b      	ldr	r3, [r3, #0]
 80482a8:	681a      	ldr	r2, [r3, #0]
 80482aa:	68fb      	ldr	r3, [r7, #12]
 80482ac:	681b      	ldr	r3, [r3, #0]
 80482ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80482b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80482b4:	68fb      	ldr	r3, [r7, #12]
 80482b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80482b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80482bc:	d10f      	bne.n	80482de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80482be:	68fb      	ldr	r3, [r7, #12]
 80482c0:	681b      	ldr	r3, [r3, #0]
 80482c2:	681a      	ldr	r2, [r3, #0]
 80482c4:	68fb      	ldr	r3, [r7, #12]
 80482c6:	681b      	ldr	r3, [r3, #0]
 80482c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80482cc:	601a      	str	r2, [r3, #0]
 80482ce:	68fb      	ldr	r3, [r7, #12]
 80482d0:	681b      	ldr	r3, [r3, #0]
 80482d2:	681a      	ldr	r2, [r3, #0]
 80482d4:	68fb      	ldr	r3, [r7, #12]
 80482d6:	681b      	ldr	r3, [r3, #0]
 80482d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80482dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80482de:	68fb      	ldr	r3, [r7, #12]
 80482e0:	2201      	movs	r2, #1
 80482e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80482e6:	68fb      	ldr	r3, [r7, #12]
 80482e8:	2200      	movs	r2, #0
 80482ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80482ee:	2303      	movs	r3, #3
 80482f0:	e017      	b.n	8048322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80482f2:	697b      	ldr	r3, [r7, #20]
 80482f4:	2b00      	cmp	r3, #0
 80482f6:	d101      	bne.n	80482fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80482f8:	2300      	movs	r3, #0
 80482fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80482fc:	697b      	ldr	r3, [r7, #20]
 80482fe:	3b01      	subs	r3, #1
 8048300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8048302:	68fb      	ldr	r3, [r7, #12]
 8048304:	681b      	ldr	r3, [r3, #0]
 8048306:	689a      	ldr	r2, [r3, #8]
 8048308:	68bb      	ldr	r3, [r7, #8]
 804830a:	4013      	ands	r3, r2
 804830c:	68ba      	ldr	r2, [r7, #8]
 804830e:	429a      	cmp	r2, r3
 8048310:	bf0c      	ite	eq
 8048312:	2301      	moveq	r3, #1
 8048314:	2300      	movne	r3, #0
 8048316:	b2db      	uxtb	r3, r3
 8048318:	461a      	mov	r2, r3
 804831a:	79fb      	ldrb	r3, [r7, #7]
 804831c:	429a      	cmp	r2, r3
 804831e:	d19b      	bne.n	8048258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8048320:	2300      	movs	r3, #0
}
 8048322:	4618      	mov	r0, r3
 8048324:	3720      	adds	r7, #32
 8048326:	46bd      	mov	sp, r7
 8048328:	bd80      	pop	{r7, pc}
 804832a:	bf00      	nop
 804832c:	20000000 	.word	0x20000000

08048330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8048330:	b580      	push	{r7, lr}
 8048332:	b086      	sub	sp, #24
 8048334:	af02      	add	r7, sp, #8
 8048336:	60f8      	str	r0, [r7, #12]
 8048338:	60b9      	str	r1, [r7, #8]
 804833a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804833c:	68fb      	ldr	r3, [r7, #12]
 804833e:	685b      	ldr	r3, [r3, #4]
 8048340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048344:	d111      	bne.n	804836a <SPI_EndRxTransaction+0x3a>
 8048346:	68fb      	ldr	r3, [r7, #12]
 8048348:	689b      	ldr	r3, [r3, #8]
 804834a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804834e:	d004      	beq.n	804835a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8048350:	68fb      	ldr	r3, [r7, #12]
 8048352:	689b      	ldr	r3, [r3, #8]
 8048354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8048358:	d107      	bne.n	804836a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 804835a:	68fb      	ldr	r3, [r7, #12]
 804835c:	681b      	ldr	r3, [r3, #0]
 804835e:	681a      	ldr	r2, [r3, #0]
 8048360:	68fb      	ldr	r3, [r7, #12]
 8048362:	681b      	ldr	r3, [r3, #0]
 8048364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048368:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804836a:	68fb      	ldr	r3, [r7, #12]
 804836c:	685b      	ldr	r3, [r3, #4]
 804836e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048372:	d12a      	bne.n	80483ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8048374:	68fb      	ldr	r3, [r7, #12]
 8048376:	689b      	ldr	r3, [r3, #8]
 8048378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804837c:	d012      	beq.n	80483a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804837e:	687b      	ldr	r3, [r7, #4]
 8048380:	9300      	str	r3, [sp, #0]
 8048382:	68bb      	ldr	r3, [r7, #8]
 8048384:	2200      	movs	r2, #0
 8048386:	2180      	movs	r1, #128	; 0x80
 8048388:	68f8      	ldr	r0, [r7, #12]
 804838a:	f7ff ff49 	bl	8048220 <SPI_WaitFlagStateUntilTimeout>
 804838e:	4603      	mov	r3, r0
 8048390:	2b00      	cmp	r3, #0
 8048392:	d02d      	beq.n	80483f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048394:	68fb      	ldr	r3, [r7, #12]
 8048396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048398:	f043 0220 	orr.w	r2, r3, #32
 804839c:	68fb      	ldr	r3, [r7, #12]
 804839e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80483a0:	2303      	movs	r3, #3
 80483a2:	e026      	b.n	80483f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80483a4:	687b      	ldr	r3, [r7, #4]
 80483a6:	9300      	str	r3, [sp, #0]
 80483a8:	68bb      	ldr	r3, [r7, #8]
 80483aa:	2200      	movs	r2, #0
 80483ac:	2101      	movs	r1, #1
 80483ae:	68f8      	ldr	r0, [r7, #12]
 80483b0:	f7ff ff36 	bl	8048220 <SPI_WaitFlagStateUntilTimeout>
 80483b4:	4603      	mov	r3, r0
 80483b6:	2b00      	cmp	r3, #0
 80483b8:	d01a      	beq.n	80483f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80483ba:	68fb      	ldr	r3, [r7, #12]
 80483bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80483be:	f043 0220 	orr.w	r2, r3, #32
 80483c2:	68fb      	ldr	r3, [r7, #12]
 80483c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80483c6:	2303      	movs	r3, #3
 80483c8:	e013      	b.n	80483f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80483ca:	687b      	ldr	r3, [r7, #4]
 80483cc:	9300      	str	r3, [sp, #0]
 80483ce:	68bb      	ldr	r3, [r7, #8]
 80483d0:	2200      	movs	r2, #0
 80483d2:	2101      	movs	r1, #1
 80483d4:	68f8      	ldr	r0, [r7, #12]
 80483d6:	f7ff ff23 	bl	8048220 <SPI_WaitFlagStateUntilTimeout>
 80483da:	4603      	mov	r3, r0
 80483dc:	2b00      	cmp	r3, #0
 80483de:	d007      	beq.n	80483f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80483e0:	68fb      	ldr	r3, [r7, #12]
 80483e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80483e4:	f043 0220 	orr.w	r2, r3, #32
 80483e8:	68fb      	ldr	r3, [r7, #12]
 80483ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80483ec:	2303      	movs	r3, #3
 80483ee:	e000      	b.n	80483f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80483f0:	2300      	movs	r3, #0
}
 80483f2:	4618      	mov	r0, r3
 80483f4:	3710      	adds	r7, #16
 80483f6:	46bd      	mov	sp, r7
 80483f8:	bd80      	pop	{r7, pc}
	...

080483fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80483fc:	b580      	push	{r7, lr}
 80483fe:	b088      	sub	sp, #32
 8048400:	af02      	add	r7, sp, #8
 8048402:	60f8      	str	r0, [r7, #12]
 8048404:	60b9      	str	r1, [r7, #8]
 8048406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8048408:	4b1b      	ldr	r3, [pc, #108]	; (8048478 <SPI_EndRxTxTransaction+0x7c>)
 804840a:	681b      	ldr	r3, [r3, #0]
 804840c:	4a1b      	ldr	r2, [pc, #108]	; (804847c <SPI_EndRxTxTransaction+0x80>)
 804840e:	fba2 2303 	umull	r2, r3, r2, r3
 8048412:	0d5b      	lsrs	r3, r3, #21
 8048414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8048418:	fb02 f303 	mul.w	r3, r2, r3
 804841c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804841e:	68fb      	ldr	r3, [r7, #12]
 8048420:	685b      	ldr	r3, [r3, #4]
 8048422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048426:	d112      	bne.n	804844e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8048428:	687b      	ldr	r3, [r7, #4]
 804842a:	9300      	str	r3, [sp, #0]
 804842c:	68bb      	ldr	r3, [r7, #8]
 804842e:	2200      	movs	r2, #0
 8048430:	2180      	movs	r1, #128	; 0x80
 8048432:	68f8      	ldr	r0, [r7, #12]
 8048434:	f7ff fef4 	bl	8048220 <SPI_WaitFlagStateUntilTimeout>
 8048438:	4603      	mov	r3, r0
 804843a:	2b00      	cmp	r3, #0
 804843c:	d016      	beq.n	804846c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804843e:	68fb      	ldr	r3, [r7, #12]
 8048440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048442:	f043 0220 	orr.w	r2, r3, #32
 8048446:	68fb      	ldr	r3, [r7, #12]
 8048448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 804844a:	2303      	movs	r3, #3
 804844c:	e00f      	b.n	804846e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 804844e:	697b      	ldr	r3, [r7, #20]
 8048450:	2b00      	cmp	r3, #0
 8048452:	d00a      	beq.n	804846a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8048454:	697b      	ldr	r3, [r7, #20]
 8048456:	3b01      	subs	r3, #1
 8048458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804845a:	68fb      	ldr	r3, [r7, #12]
 804845c:	681b      	ldr	r3, [r3, #0]
 804845e:	689b      	ldr	r3, [r3, #8]
 8048460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048464:	2b80      	cmp	r3, #128	; 0x80
 8048466:	d0f2      	beq.n	804844e <SPI_EndRxTxTransaction+0x52>
 8048468:	e000      	b.n	804846c <SPI_EndRxTxTransaction+0x70>
        break;
 804846a:	bf00      	nop
  }

  return HAL_OK;
 804846c:	2300      	movs	r3, #0
}
 804846e:	4618      	mov	r0, r3
 8048470:	3718      	adds	r7, #24
 8048472:	46bd      	mov	sp, r7
 8048474:	bd80      	pop	{r7, pc}
 8048476:	bf00      	nop
 8048478:	20000000 	.word	0x20000000
 804847c:	165e9f81 	.word	0x165e9f81

08048480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8048480:	b580      	push	{r7, lr}
 8048482:	b082      	sub	sp, #8
 8048484:	af00      	add	r7, sp, #0
 8048486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8048488:	687b      	ldr	r3, [r7, #4]
 804848a:	2b00      	cmp	r3, #0
 804848c:	d101      	bne.n	8048492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804848e:	2301      	movs	r3, #1
 8048490:	e041      	b.n	8048516 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8048492:	687b      	ldr	r3, [r7, #4]
 8048494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048498:	b2db      	uxtb	r3, r3
 804849a:	2b00      	cmp	r3, #0
 804849c:	d106      	bne.n	80484ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804849e:	687b      	ldr	r3, [r7, #4]
 80484a0:	2200      	movs	r2, #0
 80484a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80484a6:	6878      	ldr	r0, [r7, #4]
 80484a8:	f7f9 fa62 	bl	8041970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80484ac:	687b      	ldr	r3, [r7, #4]
 80484ae:	2202      	movs	r2, #2
 80484b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80484b4:	687b      	ldr	r3, [r7, #4]
 80484b6:	681a      	ldr	r2, [r3, #0]
 80484b8:	687b      	ldr	r3, [r7, #4]
 80484ba:	3304      	adds	r3, #4
 80484bc:	4619      	mov	r1, r3
 80484be:	4610      	mov	r0, r2
 80484c0:	f000 fa96 	bl	80489f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80484c4:	687b      	ldr	r3, [r7, #4]
 80484c6:	2201      	movs	r2, #1
 80484c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80484cc:	687b      	ldr	r3, [r7, #4]
 80484ce:	2201      	movs	r2, #1
 80484d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80484d4:	687b      	ldr	r3, [r7, #4]
 80484d6:	2201      	movs	r2, #1
 80484d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80484dc:	687b      	ldr	r3, [r7, #4]
 80484de:	2201      	movs	r2, #1
 80484e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80484e4:	687b      	ldr	r3, [r7, #4]
 80484e6:	2201      	movs	r2, #1
 80484e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80484ec:	687b      	ldr	r3, [r7, #4]
 80484ee:	2201      	movs	r2, #1
 80484f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80484f4:	687b      	ldr	r3, [r7, #4]
 80484f6:	2201      	movs	r2, #1
 80484f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80484fc:	687b      	ldr	r3, [r7, #4]
 80484fe:	2201      	movs	r2, #1
 8048500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8048504:	687b      	ldr	r3, [r7, #4]
 8048506:	2201      	movs	r2, #1
 8048508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804850c:	687b      	ldr	r3, [r7, #4]
 804850e:	2201      	movs	r2, #1
 8048510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8048514:	2300      	movs	r3, #0
}
 8048516:	4618      	mov	r0, r3
 8048518:	3708      	adds	r7, #8
 804851a:	46bd      	mov	sp, r7
 804851c:	bd80      	pop	{r7, pc}
	...

08048520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8048520:	b480      	push	{r7}
 8048522:	b085      	sub	sp, #20
 8048524:	af00      	add	r7, sp, #0
 8048526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8048528:	687b      	ldr	r3, [r7, #4]
 804852a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804852e:	b2db      	uxtb	r3, r3
 8048530:	2b01      	cmp	r3, #1
 8048532:	d001      	beq.n	8048538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8048534:	2301      	movs	r3, #1
 8048536:	e04e      	b.n	80485d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048538:	687b      	ldr	r3, [r7, #4]
 804853a:	2202      	movs	r2, #2
 804853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8048540:	687b      	ldr	r3, [r7, #4]
 8048542:	681b      	ldr	r3, [r3, #0]
 8048544:	68da      	ldr	r2, [r3, #12]
 8048546:	687b      	ldr	r3, [r7, #4]
 8048548:	681b      	ldr	r3, [r3, #0]
 804854a:	f042 0201 	orr.w	r2, r2, #1
 804854e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048550:	687b      	ldr	r3, [r7, #4]
 8048552:	681b      	ldr	r3, [r3, #0]
 8048554:	4a23      	ldr	r2, [pc, #140]	; (80485e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8048556:	4293      	cmp	r3, r2
 8048558:	d022      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 804855a:	687b      	ldr	r3, [r7, #4]
 804855c:	681b      	ldr	r3, [r3, #0]
 804855e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048562:	d01d      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 8048564:	687b      	ldr	r3, [r7, #4]
 8048566:	681b      	ldr	r3, [r3, #0]
 8048568:	4a1f      	ldr	r2, [pc, #124]	; (80485e8 <HAL_TIM_Base_Start_IT+0xc8>)
 804856a:	4293      	cmp	r3, r2
 804856c:	d018      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 804856e:	687b      	ldr	r3, [r7, #4]
 8048570:	681b      	ldr	r3, [r3, #0]
 8048572:	4a1e      	ldr	r2, [pc, #120]	; (80485ec <HAL_TIM_Base_Start_IT+0xcc>)
 8048574:	4293      	cmp	r3, r2
 8048576:	d013      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 8048578:	687b      	ldr	r3, [r7, #4]
 804857a:	681b      	ldr	r3, [r3, #0]
 804857c:	4a1c      	ldr	r2, [pc, #112]	; (80485f0 <HAL_TIM_Base_Start_IT+0xd0>)
 804857e:	4293      	cmp	r3, r2
 8048580:	d00e      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 8048582:	687b      	ldr	r3, [r7, #4]
 8048584:	681b      	ldr	r3, [r3, #0]
 8048586:	4a1b      	ldr	r2, [pc, #108]	; (80485f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8048588:	4293      	cmp	r3, r2
 804858a:	d009      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 804858c:	687b      	ldr	r3, [r7, #4]
 804858e:	681b      	ldr	r3, [r3, #0]
 8048590:	4a19      	ldr	r2, [pc, #100]	; (80485f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8048592:	4293      	cmp	r3, r2
 8048594:	d004      	beq.n	80485a0 <HAL_TIM_Base_Start_IT+0x80>
 8048596:	687b      	ldr	r3, [r7, #4]
 8048598:	681b      	ldr	r3, [r3, #0]
 804859a:	4a18      	ldr	r2, [pc, #96]	; (80485fc <HAL_TIM_Base_Start_IT+0xdc>)
 804859c:	4293      	cmp	r3, r2
 804859e:	d111      	bne.n	80485c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80485a0:	687b      	ldr	r3, [r7, #4]
 80485a2:	681b      	ldr	r3, [r3, #0]
 80485a4:	689b      	ldr	r3, [r3, #8]
 80485a6:	f003 0307 	and.w	r3, r3, #7
 80485aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80485ac:	68fb      	ldr	r3, [r7, #12]
 80485ae:	2b06      	cmp	r3, #6
 80485b0:	d010      	beq.n	80485d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80485b2:	687b      	ldr	r3, [r7, #4]
 80485b4:	681b      	ldr	r3, [r3, #0]
 80485b6:	681a      	ldr	r2, [r3, #0]
 80485b8:	687b      	ldr	r3, [r7, #4]
 80485ba:	681b      	ldr	r3, [r3, #0]
 80485bc:	f042 0201 	orr.w	r2, r2, #1
 80485c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80485c2:	e007      	b.n	80485d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80485c4:	687b      	ldr	r3, [r7, #4]
 80485c6:	681b      	ldr	r3, [r3, #0]
 80485c8:	681a      	ldr	r2, [r3, #0]
 80485ca:	687b      	ldr	r3, [r7, #4]
 80485cc:	681b      	ldr	r3, [r3, #0]
 80485ce:	f042 0201 	orr.w	r2, r2, #1
 80485d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80485d4:	2300      	movs	r3, #0
}
 80485d6:	4618      	mov	r0, r3
 80485d8:	3714      	adds	r7, #20
 80485da:	46bd      	mov	sp, r7
 80485dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485e0:	4770      	bx	lr
 80485e2:	bf00      	nop
 80485e4:	40010000 	.word	0x40010000
 80485e8:	40000400 	.word	0x40000400
 80485ec:	40000800 	.word	0x40000800
 80485f0:	40000c00 	.word	0x40000c00
 80485f4:	40010400 	.word	0x40010400
 80485f8:	40014000 	.word	0x40014000
 80485fc:	40001800 	.word	0x40001800

08048600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8048600:	b580      	push	{r7, lr}
 8048602:	b082      	sub	sp, #8
 8048604:	af00      	add	r7, sp, #0
 8048606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8048608:	687b      	ldr	r3, [r7, #4]
 804860a:	681b      	ldr	r3, [r3, #0]
 804860c:	691b      	ldr	r3, [r3, #16]
 804860e:	f003 0302 	and.w	r3, r3, #2
 8048612:	2b02      	cmp	r3, #2
 8048614:	d122      	bne.n	804865c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8048616:	687b      	ldr	r3, [r7, #4]
 8048618:	681b      	ldr	r3, [r3, #0]
 804861a:	68db      	ldr	r3, [r3, #12]
 804861c:	f003 0302 	and.w	r3, r3, #2
 8048620:	2b02      	cmp	r3, #2
 8048622:	d11b      	bne.n	804865c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8048624:	687b      	ldr	r3, [r7, #4]
 8048626:	681b      	ldr	r3, [r3, #0]
 8048628:	f06f 0202 	mvn.w	r2, #2
 804862c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804862e:	687b      	ldr	r3, [r7, #4]
 8048630:	2201      	movs	r2, #1
 8048632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8048634:	687b      	ldr	r3, [r7, #4]
 8048636:	681b      	ldr	r3, [r3, #0]
 8048638:	699b      	ldr	r3, [r3, #24]
 804863a:	f003 0303 	and.w	r3, r3, #3
 804863e:	2b00      	cmp	r3, #0
 8048640:	d003      	beq.n	804864a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8048642:	6878      	ldr	r0, [r7, #4]
 8048644:	f000 f9b5 	bl	80489b2 <HAL_TIM_IC_CaptureCallback>
 8048648:	e005      	b.n	8048656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804864a:	6878      	ldr	r0, [r7, #4]
 804864c:	f000 f9a7 	bl	804899e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048650:	6878      	ldr	r0, [r7, #4]
 8048652:	f000 f9b8 	bl	80489c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048656:	687b      	ldr	r3, [r7, #4]
 8048658:	2200      	movs	r2, #0
 804865a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804865c:	687b      	ldr	r3, [r7, #4]
 804865e:	681b      	ldr	r3, [r3, #0]
 8048660:	691b      	ldr	r3, [r3, #16]
 8048662:	f003 0304 	and.w	r3, r3, #4
 8048666:	2b04      	cmp	r3, #4
 8048668:	d122      	bne.n	80486b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804866a:	687b      	ldr	r3, [r7, #4]
 804866c:	681b      	ldr	r3, [r3, #0]
 804866e:	68db      	ldr	r3, [r3, #12]
 8048670:	f003 0304 	and.w	r3, r3, #4
 8048674:	2b04      	cmp	r3, #4
 8048676:	d11b      	bne.n	80486b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8048678:	687b      	ldr	r3, [r7, #4]
 804867a:	681b      	ldr	r3, [r3, #0]
 804867c:	f06f 0204 	mvn.w	r2, #4
 8048680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8048682:	687b      	ldr	r3, [r7, #4]
 8048684:	2202      	movs	r2, #2
 8048686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8048688:	687b      	ldr	r3, [r7, #4]
 804868a:	681b      	ldr	r3, [r3, #0]
 804868c:	699b      	ldr	r3, [r3, #24]
 804868e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048692:	2b00      	cmp	r3, #0
 8048694:	d003      	beq.n	804869e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048696:	6878      	ldr	r0, [r7, #4]
 8048698:	f000 f98b 	bl	80489b2 <HAL_TIM_IC_CaptureCallback>
 804869c:	e005      	b.n	80486aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804869e:	6878      	ldr	r0, [r7, #4]
 80486a0:	f000 f97d 	bl	804899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80486a4:	6878      	ldr	r0, [r7, #4]
 80486a6:	f000 f98e 	bl	80489c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80486aa:	687b      	ldr	r3, [r7, #4]
 80486ac:	2200      	movs	r2, #0
 80486ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80486b0:	687b      	ldr	r3, [r7, #4]
 80486b2:	681b      	ldr	r3, [r3, #0]
 80486b4:	691b      	ldr	r3, [r3, #16]
 80486b6:	f003 0308 	and.w	r3, r3, #8
 80486ba:	2b08      	cmp	r3, #8
 80486bc:	d122      	bne.n	8048704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80486be:	687b      	ldr	r3, [r7, #4]
 80486c0:	681b      	ldr	r3, [r3, #0]
 80486c2:	68db      	ldr	r3, [r3, #12]
 80486c4:	f003 0308 	and.w	r3, r3, #8
 80486c8:	2b08      	cmp	r3, #8
 80486ca:	d11b      	bne.n	8048704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80486cc:	687b      	ldr	r3, [r7, #4]
 80486ce:	681b      	ldr	r3, [r3, #0]
 80486d0:	f06f 0208 	mvn.w	r2, #8
 80486d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80486d6:	687b      	ldr	r3, [r7, #4]
 80486d8:	2204      	movs	r2, #4
 80486da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80486dc:	687b      	ldr	r3, [r7, #4]
 80486de:	681b      	ldr	r3, [r3, #0]
 80486e0:	69db      	ldr	r3, [r3, #28]
 80486e2:	f003 0303 	and.w	r3, r3, #3
 80486e6:	2b00      	cmp	r3, #0
 80486e8:	d003      	beq.n	80486f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80486ea:	6878      	ldr	r0, [r7, #4]
 80486ec:	f000 f961 	bl	80489b2 <HAL_TIM_IC_CaptureCallback>
 80486f0:	e005      	b.n	80486fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80486f2:	6878      	ldr	r0, [r7, #4]
 80486f4:	f000 f953 	bl	804899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80486f8:	6878      	ldr	r0, [r7, #4]
 80486fa:	f000 f964 	bl	80489c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80486fe:	687b      	ldr	r3, [r7, #4]
 8048700:	2200      	movs	r2, #0
 8048702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8048704:	687b      	ldr	r3, [r7, #4]
 8048706:	681b      	ldr	r3, [r3, #0]
 8048708:	691b      	ldr	r3, [r3, #16]
 804870a:	f003 0310 	and.w	r3, r3, #16
 804870e:	2b10      	cmp	r3, #16
 8048710:	d122      	bne.n	8048758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8048712:	687b      	ldr	r3, [r7, #4]
 8048714:	681b      	ldr	r3, [r3, #0]
 8048716:	68db      	ldr	r3, [r3, #12]
 8048718:	f003 0310 	and.w	r3, r3, #16
 804871c:	2b10      	cmp	r3, #16
 804871e:	d11b      	bne.n	8048758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8048720:	687b      	ldr	r3, [r7, #4]
 8048722:	681b      	ldr	r3, [r3, #0]
 8048724:	f06f 0210 	mvn.w	r2, #16
 8048728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804872a:	687b      	ldr	r3, [r7, #4]
 804872c:	2208      	movs	r2, #8
 804872e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8048730:	687b      	ldr	r3, [r7, #4]
 8048732:	681b      	ldr	r3, [r3, #0]
 8048734:	69db      	ldr	r3, [r3, #28]
 8048736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804873a:	2b00      	cmp	r3, #0
 804873c:	d003      	beq.n	8048746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804873e:	6878      	ldr	r0, [r7, #4]
 8048740:	f000 f937 	bl	80489b2 <HAL_TIM_IC_CaptureCallback>
 8048744:	e005      	b.n	8048752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048746:	6878      	ldr	r0, [r7, #4]
 8048748:	f000 f929 	bl	804899e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804874c:	6878      	ldr	r0, [r7, #4]
 804874e:	f000 f93a 	bl	80489c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048752:	687b      	ldr	r3, [r7, #4]
 8048754:	2200      	movs	r2, #0
 8048756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8048758:	687b      	ldr	r3, [r7, #4]
 804875a:	681b      	ldr	r3, [r3, #0]
 804875c:	691b      	ldr	r3, [r3, #16]
 804875e:	f003 0301 	and.w	r3, r3, #1
 8048762:	2b01      	cmp	r3, #1
 8048764:	d10e      	bne.n	8048784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8048766:	687b      	ldr	r3, [r7, #4]
 8048768:	681b      	ldr	r3, [r3, #0]
 804876a:	68db      	ldr	r3, [r3, #12]
 804876c:	f003 0301 	and.w	r3, r3, #1
 8048770:	2b01      	cmp	r3, #1
 8048772:	d107      	bne.n	8048784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8048774:	687b      	ldr	r3, [r7, #4]
 8048776:	681b      	ldr	r3, [r3, #0]
 8048778:	f06f 0201 	mvn.w	r2, #1
 804877c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 804877e:	6878      	ldr	r0, [r7, #4]
 8048780:	f7f8 fbb6 	bl	8040ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8048784:	687b      	ldr	r3, [r7, #4]
 8048786:	681b      	ldr	r3, [r3, #0]
 8048788:	691b      	ldr	r3, [r3, #16]
 804878a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804878e:	2b80      	cmp	r3, #128	; 0x80
 8048790:	d10e      	bne.n	80487b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8048792:	687b      	ldr	r3, [r7, #4]
 8048794:	681b      	ldr	r3, [r3, #0]
 8048796:	68db      	ldr	r3, [r3, #12]
 8048798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804879c:	2b80      	cmp	r3, #128	; 0x80
 804879e:	d107      	bne.n	80487b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80487a0:	687b      	ldr	r3, [r7, #4]
 80487a2:	681b      	ldr	r3, [r3, #0]
 80487a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80487a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80487aa:	6878      	ldr	r0, [r7, #4]
 80487ac:	f000 fae0 	bl	8048d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80487b0:	687b      	ldr	r3, [r7, #4]
 80487b2:	681b      	ldr	r3, [r3, #0]
 80487b4:	691b      	ldr	r3, [r3, #16]
 80487b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80487ba:	2b40      	cmp	r3, #64	; 0x40
 80487bc:	d10e      	bne.n	80487dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80487be:	687b      	ldr	r3, [r7, #4]
 80487c0:	681b      	ldr	r3, [r3, #0]
 80487c2:	68db      	ldr	r3, [r3, #12]
 80487c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80487c8:	2b40      	cmp	r3, #64	; 0x40
 80487ca:	d107      	bne.n	80487dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80487cc:	687b      	ldr	r3, [r7, #4]
 80487ce:	681b      	ldr	r3, [r3, #0]
 80487d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80487d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80487d6:	6878      	ldr	r0, [r7, #4]
 80487d8:	f000 f8ff 	bl	80489da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80487dc:	687b      	ldr	r3, [r7, #4]
 80487de:	681b      	ldr	r3, [r3, #0]
 80487e0:	691b      	ldr	r3, [r3, #16]
 80487e2:	f003 0320 	and.w	r3, r3, #32
 80487e6:	2b20      	cmp	r3, #32
 80487e8:	d10e      	bne.n	8048808 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80487ea:	687b      	ldr	r3, [r7, #4]
 80487ec:	681b      	ldr	r3, [r3, #0]
 80487ee:	68db      	ldr	r3, [r3, #12]
 80487f0:	f003 0320 	and.w	r3, r3, #32
 80487f4:	2b20      	cmp	r3, #32
 80487f6:	d107      	bne.n	8048808 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80487f8:	687b      	ldr	r3, [r7, #4]
 80487fa:	681b      	ldr	r3, [r3, #0]
 80487fc:	f06f 0220 	mvn.w	r2, #32
 8048800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8048802:	6878      	ldr	r0, [r7, #4]
 8048804:	f000 faaa 	bl	8048d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8048808:	bf00      	nop
 804880a:	3708      	adds	r7, #8
 804880c:	46bd      	mov	sp, r7
 804880e:	bd80      	pop	{r7, pc}

08048810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8048810:	b580      	push	{r7, lr}
 8048812:	b084      	sub	sp, #16
 8048814:	af00      	add	r7, sp, #0
 8048816:	6078      	str	r0, [r7, #4]
 8048818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804881a:	2300      	movs	r3, #0
 804881c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 804881e:	687b      	ldr	r3, [r7, #4]
 8048820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048824:	2b01      	cmp	r3, #1
 8048826:	d101      	bne.n	804882c <HAL_TIM_ConfigClockSource+0x1c>
 8048828:	2302      	movs	r3, #2
 804882a:	e0b4      	b.n	8048996 <HAL_TIM_ConfigClockSource+0x186>
 804882c:	687b      	ldr	r3, [r7, #4]
 804882e:	2201      	movs	r2, #1
 8048830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8048834:	687b      	ldr	r3, [r7, #4]
 8048836:	2202      	movs	r2, #2
 8048838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 804883c:	687b      	ldr	r3, [r7, #4]
 804883e:	681b      	ldr	r3, [r3, #0]
 8048840:	689b      	ldr	r3, [r3, #8]
 8048842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8048844:	68bb      	ldr	r3, [r7, #8]
 8048846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 804884a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804884c:	68bb      	ldr	r3, [r7, #8]
 804884e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8048854:	687b      	ldr	r3, [r7, #4]
 8048856:	681b      	ldr	r3, [r3, #0]
 8048858:	68ba      	ldr	r2, [r7, #8]
 804885a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 804885c:	683b      	ldr	r3, [r7, #0]
 804885e:	681b      	ldr	r3, [r3, #0]
 8048860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048864:	d03e      	beq.n	80488e4 <HAL_TIM_ConfigClockSource+0xd4>
 8048866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804886a:	f200 8087 	bhi.w	804897c <HAL_TIM_ConfigClockSource+0x16c>
 804886e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048872:	f000 8086 	beq.w	8048982 <HAL_TIM_ConfigClockSource+0x172>
 8048876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804887a:	d87f      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 804887c:	2b70      	cmp	r3, #112	; 0x70
 804887e:	d01a      	beq.n	80488b6 <HAL_TIM_ConfigClockSource+0xa6>
 8048880:	2b70      	cmp	r3, #112	; 0x70
 8048882:	d87b      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 8048884:	2b60      	cmp	r3, #96	; 0x60
 8048886:	d050      	beq.n	804892a <HAL_TIM_ConfigClockSource+0x11a>
 8048888:	2b60      	cmp	r3, #96	; 0x60
 804888a:	d877      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 804888c:	2b50      	cmp	r3, #80	; 0x50
 804888e:	d03c      	beq.n	804890a <HAL_TIM_ConfigClockSource+0xfa>
 8048890:	2b50      	cmp	r3, #80	; 0x50
 8048892:	d873      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 8048894:	2b40      	cmp	r3, #64	; 0x40
 8048896:	d058      	beq.n	804894a <HAL_TIM_ConfigClockSource+0x13a>
 8048898:	2b40      	cmp	r3, #64	; 0x40
 804889a:	d86f      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 804889c:	2b30      	cmp	r3, #48	; 0x30
 804889e:	d064      	beq.n	804896a <HAL_TIM_ConfigClockSource+0x15a>
 80488a0:	2b30      	cmp	r3, #48	; 0x30
 80488a2:	d86b      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 80488a4:	2b20      	cmp	r3, #32
 80488a6:	d060      	beq.n	804896a <HAL_TIM_ConfigClockSource+0x15a>
 80488a8:	2b20      	cmp	r3, #32
 80488aa:	d867      	bhi.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
 80488ac:	2b00      	cmp	r3, #0
 80488ae:	d05c      	beq.n	804896a <HAL_TIM_ConfigClockSource+0x15a>
 80488b0:	2b10      	cmp	r3, #16
 80488b2:	d05a      	beq.n	804896a <HAL_TIM_ConfigClockSource+0x15a>
 80488b4:	e062      	b.n	804897c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80488b6:	687b      	ldr	r3, [r7, #4]
 80488b8:	6818      	ldr	r0, [r3, #0]
 80488ba:	683b      	ldr	r3, [r7, #0]
 80488bc:	6899      	ldr	r1, [r3, #8]
 80488be:	683b      	ldr	r3, [r7, #0]
 80488c0:	685a      	ldr	r2, [r3, #4]
 80488c2:	683b      	ldr	r3, [r7, #0]
 80488c4:	68db      	ldr	r3, [r3, #12]
 80488c6:	f000 f9ad 	bl	8048c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80488ca:	687b      	ldr	r3, [r7, #4]
 80488cc:	681b      	ldr	r3, [r3, #0]
 80488ce:	689b      	ldr	r3, [r3, #8]
 80488d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80488d2:	68bb      	ldr	r3, [r7, #8]
 80488d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80488d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80488da:	687b      	ldr	r3, [r7, #4]
 80488dc:	681b      	ldr	r3, [r3, #0]
 80488de:	68ba      	ldr	r2, [r7, #8]
 80488e0:	609a      	str	r2, [r3, #8]
      break;
 80488e2:	e04f      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80488e4:	687b      	ldr	r3, [r7, #4]
 80488e6:	6818      	ldr	r0, [r3, #0]
 80488e8:	683b      	ldr	r3, [r7, #0]
 80488ea:	6899      	ldr	r1, [r3, #8]
 80488ec:	683b      	ldr	r3, [r7, #0]
 80488ee:	685a      	ldr	r2, [r3, #4]
 80488f0:	683b      	ldr	r3, [r7, #0]
 80488f2:	68db      	ldr	r3, [r3, #12]
 80488f4:	f000 f996 	bl	8048c24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80488f8:	687b      	ldr	r3, [r7, #4]
 80488fa:	681b      	ldr	r3, [r3, #0]
 80488fc:	689a      	ldr	r2, [r3, #8]
 80488fe:	687b      	ldr	r3, [r7, #4]
 8048900:	681b      	ldr	r3, [r3, #0]
 8048902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8048906:	609a      	str	r2, [r3, #8]
      break;
 8048908:	e03c      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804890a:	687b      	ldr	r3, [r7, #4]
 804890c:	6818      	ldr	r0, [r3, #0]
 804890e:	683b      	ldr	r3, [r7, #0]
 8048910:	6859      	ldr	r1, [r3, #4]
 8048912:	683b      	ldr	r3, [r7, #0]
 8048914:	68db      	ldr	r3, [r3, #12]
 8048916:	461a      	mov	r2, r3
 8048918:	f000 f90a 	bl	8048b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 804891c:	687b      	ldr	r3, [r7, #4]
 804891e:	681b      	ldr	r3, [r3, #0]
 8048920:	2150      	movs	r1, #80	; 0x50
 8048922:	4618      	mov	r0, r3
 8048924:	f000 f963 	bl	8048bee <TIM_ITRx_SetConfig>
      break;
 8048928:	e02c      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 804892a:	687b      	ldr	r3, [r7, #4]
 804892c:	6818      	ldr	r0, [r3, #0]
 804892e:	683b      	ldr	r3, [r7, #0]
 8048930:	6859      	ldr	r1, [r3, #4]
 8048932:	683b      	ldr	r3, [r7, #0]
 8048934:	68db      	ldr	r3, [r3, #12]
 8048936:	461a      	mov	r2, r3
 8048938:	f000 f929 	bl	8048b8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 804893c:	687b      	ldr	r3, [r7, #4]
 804893e:	681b      	ldr	r3, [r3, #0]
 8048940:	2160      	movs	r1, #96	; 0x60
 8048942:	4618      	mov	r0, r3
 8048944:	f000 f953 	bl	8048bee <TIM_ITRx_SetConfig>
      break;
 8048948:	e01c      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804894a:	687b      	ldr	r3, [r7, #4]
 804894c:	6818      	ldr	r0, [r3, #0]
 804894e:	683b      	ldr	r3, [r7, #0]
 8048950:	6859      	ldr	r1, [r3, #4]
 8048952:	683b      	ldr	r3, [r7, #0]
 8048954:	68db      	ldr	r3, [r3, #12]
 8048956:	461a      	mov	r2, r3
 8048958:	f000 f8ea 	bl	8048b30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 804895c:	687b      	ldr	r3, [r7, #4]
 804895e:	681b      	ldr	r3, [r3, #0]
 8048960:	2140      	movs	r1, #64	; 0x40
 8048962:	4618      	mov	r0, r3
 8048964:	f000 f943 	bl	8048bee <TIM_ITRx_SetConfig>
      break;
 8048968:	e00c      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804896a:	687b      	ldr	r3, [r7, #4]
 804896c:	681a      	ldr	r2, [r3, #0]
 804896e:	683b      	ldr	r3, [r7, #0]
 8048970:	681b      	ldr	r3, [r3, #0]
 8048972:	4619      	mov	r1, r3
 8048974:	4610      	mov	r0, r2
 8048976:	f000 f93a 	bl	8048bee <TIM_ITRx_SetConfig>
      break;
 804897a:	e003      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 804897c:	2301      	movs	r3, #1
 804897e:	73fb      	strb	r3, [r7, #15]
      break;
 8048980:	e000      	b.n	8048984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8048982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8048984:	687b      	ldr	r3, [r7, #4]
 8048986:	2201      	movs	r2, #1
 8048988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804898c:	687b      	ldr	r3, [r7, #4]
 804898e:	2200      	movs	r2, #0
 8048990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8048994:	7bfb      	ldrb	r3, [r7, #15]
}
 8048996:	4618      	mov	r0, r3
 8048998:	3710      	adds	r7, #16
 804899a:	46bd      	mov	sp, r7
 804899c:	bd80      	pop	{r7, pc}

0804899e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804899e:	b480      	push	{r7}
 80489a0:	b083      	sub	sp, #12
 80489a2:	af00      	add	r7, sp, #0
 80489a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80489a6:	bf00      	nop
 80489a8:	370c      	adds	r7, #12
 80489aa:	46bd      	mov	sp, r7
 80489ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489b0:	4770      	bx	lr

080489b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80489b2:	b480      	push	{r7}
 80489b4:	b083      	sub	sp, #12
 80489b6:	af00      	add	r7, sp, #0
 80489b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80489ba:	bf00      	nop
 80489bc:	370c      	adds	r7, #12
 80489be:	46bd      	mov	sp, r7
 80489c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489c4:	4770      	bx	lr

080489c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80489c6:	b480      	push	{r7}
 80489c8:	b083      	sub	sp, #12
 80489ca:	af00      	add	r7, sp, #0
 80489cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80489ce:	bf00      	nop
 80489d0:	370c      	adds	r7, #12
 80489d2:	46bd      	mov	sp, r7
 80489d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489d8:	4770      	bx	lr

080489da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80489da:	b480      	push	{r7}
 80489dc:	b083      	sub	sp, #12
 80489de:	af00      	add	r7, sp, #0
 80489e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80489e2:	bf00      	nop
 80489e4:	370c      	adds	r7, #12
 80489e6:	46bd      	mov	sp, r7
 80489e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489ec:	4770      	bx	lr
	...

080489f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80489f0:	b480      	push	{r7}
 80489f2:	b085      	sub	sp, #20
 80489f4:	af00      	add	r7, sp, #0
 80489f6:	6078      	str	r0, [r7, #4]
 80489f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80489fa:	687b      	ldr	r3, [r7, #4]
 80489fc:	681b      	ldr	r3, [r3, #0]
 80489fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8048a00:	687b      	ldr	r3, [r7, #4]
 8048a02:	4a40      	ldr	r2, [pc, #256]	; (8048b04 <TIM_Base_SetConfig+0x114>)
 8048a04:	4293      	cmp	r3, r2
 8048a06:	d013      	beq.n	8048a30 <TIM_Base_SetConfig+0x40>
 8048a08:	687b      	ldr	r3, [r7, #4]
 8048a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048a0e:	d00f      	beq.n	8048a30 <TIM_Base_SetConfig+0x40>
 8048a10:	687b      	ldr	r3, [r7, #4]
 8048a12:	4a3d      	ldr	r2, [pc, #244]	; (8048b08 <TIM_Base_SetConfig+0x118>)
 8048a14:	4293      	cmp	r3, r2
 8048a16:	d00b      	beq.n	8048a30 <TIM_Base_SetConfig+0x40>
 8048a18:	687b      	ldr	r3, [r7, #4]
 8048a1a:	4a3c      	ldr	r2, [pc, #240]	; (8048b0c <TIM_Base_SetConfig+0x11c>)
 8048a1c:	4293      	cmp	r3, r2
 8048a1e:	d007      	beq.n	8048a30 <TIM_Base_SetConfig+0x40>
 8048a20:	687b      	ldr	r3, [r7, #4]
 8048a22:	4a3b      	ldr	r2, [pc, #236]	; (8048b10 <TIM_Base_SetConfig+0x120>)
 8048a24:	4293      	cmp	r3, r2
 8048a26:	d003      	beq.n	8048a30 <TIM_Base_SetConfig+0x40>
 8048a28:	687b      	ldr	r3, [r7, #4]
 8048a2a:	4a3a      	ldr	r2, [pc, #232]	; (8048b14 <TIM_Base_SetConfig+0x124>)
 8048a2c:	4293      	cmp	r3, r2
 8048a2e:	d108      	bne.n	8048a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8048a30:	68fb      	ldr	r3, [r7, #12]
 8048a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8048a38:	683b      	ldr	r3, [r7, #0]
 8048a3a:	685b      	ldr	r3, [r3, #4]
 8048a3c:	68fa      	ldr	r2, [r7, #12]
 8048a3e:	4313      	orrs	r3, r2
 8048a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8048a42:	687b      	ldr	r3, [r7, #4]
 8048a44:	4a2f      	ldr	r2, [pc, #188]	; (8048b04 <TIM_Base_SetConfig+0x114>)
 8048a46:	4293      	cmp	r3, r2
 8048a48:	d02b      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a4a:	687b      	ldr	r3, [r7, #4]
 8048a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048a50:	d027      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a52:	687b      	ldr	r3, [r7, #4]
 8048a54:	4a2c      	ldr	r2, [pc, #176]	; (8048b08 <TIM_Base_SetConfig+0x118>)
 8048a56:	4293      	cmp	r3, r2
 8048a58:	d023      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a5a:	687b      	ldr	r3, [r7, #4]
 8048a5c:	4a2b      	ldr	r2, [pc, #172]	; (8048b0c <TIM_Base_SetConfig+0x11c>)
 8048a5e:	4293      	cmp	r3, r2
 8048a60:	d01f      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a62:	687b      	ldr	r3, [r7, #4]
 8048a64:	4a2a      	ldr	r2, [pc, #168]	; (8048b10 <TIM_Base_SetConfig+0x120>)
 8048a66:	4293      	cmp	r3, r2
 8048a68:	d01b      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a6a:	687b      	ldr	r3, [r7, #4]
 8048a6c:	4a29      	ldr	r2, [pc, #164]	; (8048b14 <TIM_Base_SetConfig+0x124>)
 8048a6e:	4293      	cmp	r3, r2
 8048a70:	d017      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a72:	687b      	ldr	r3, [r7, #4]
 8048a74:	4a28      	ldr	r2, [pc, #160]	; (8048b18 <TIM_Base_SetConfig+0x128>)
 8048a76:	4293      	cmp	r3, r2
 8048a78:	d013      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a7a:	687b      	ldr	r3, [r7, #4]
 8048a7c:	4a27      	ldr	r2, [pc, #156]	; (8048b1c <TIM_Base_SetConfig+0x12c>)
 8048a7e:	4293      	cmp	r3, r2
 8048a80:	d00f      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a82:	687b      	ldr	r3, [r7, #4]
 8048a84:	4a26      	ldr	r2, [pc, #152]	; (8048b20 <TIM_Base_SetConfig+0x130>)
 8048a86:	4293      	cmp	r3, r2
 8048a88:	d00b      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a8a:	687b      	ldr	r3, [r7, #4]
 8048a8c:	4a25      	ldr	r2, [pc, #148]	; (8048b24 <TIM_Base_SetConfig+0x134>)
 8048a8e:	4293      	cmp	r3, r2
 8048a90:	d007      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a92:	687b      	ldr	r3, [r7, #4]
 8048a94:	4a24      	ldr	r2, [pc, #144]	; (8048b28 <TIM_Base_SetConfig+0x138>)
 8048a96:	4293      	cmp	r3, r2
 8048a98:	d003      	beq.n	8048aa2 <TIM_Base_SetConfig+0xb2>
 8048a9a:	687b      	ldr	r3, [r7, #4]
 8048a9c:	4a23      	ldr	r2, [pc, #140]	; (8048b2c <TIM_Base_SetConfig+0x13c>)
 8048a9e:	4293      	cmp	r3, r2
 8048aa0:	d108      	bne.n	8048ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8048aa2:	68fb      	ldr	r3, [r7, #12]
 8048aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8048aaa:	683b      	ldr	r3, [r7, #0]
 8048aac:	68db      	ldr	r3, [r3, #12]
 8048aae:	68fa      	ldr	r2, [r7, #12]
 8048ab0:	4313      	orrs	r3, r2
 8048ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048ab4:	68fb      	ldr	r3, [r7, #12]
 8048ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8048aba:	683b      	ldr	r3, [r7, #0]
 8048abc:	695b      	ldr	r3, [r3, #20]
 8048abe:	4313      	orrs	r3, r2
 8048ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8048ac2:	687b      	ldr	r3, [r7, #4]
 8048ac4:	68fa      	ldr	r2, [r7, #12]
 8048ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8048ac8:	683b      	ldr	r3, [r7, #0]
 8048aca:	689a      	ldr	r2, [r3, #8]
 8048acc:	687b      	ldr	r3, [r7, #4]
 8048ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8048ad0:	683b      	ldr	r3, [r7, #0]
 8048ad2:	681a      	ldr	r2, [r3, #0]
 8048ad4:	687b      	ldr	r3, [r7, #4]
 8048ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8048ad8:	687b      	ldr	r3, [r7, #4]
 8048ada:	4a0a      	ldr	r2, [pc, #40]	; (8048b04 <TIM_Base_SetConfig+0x114>)
 8048adc:	4293      	cmp	r3, r2
 8048ade:	d003      	beq.n	8048ae8 <TIM_Base_SetConfig+0xf8>
 8048ae0:	687b      	ldr	r3, [r7, #4]
 8048ae2:	4a0c      	ldr	r2, [pc, #48]	; (8048b14 <TIM_Base_SetConfig+0x124>)
 8048ae4:	4293      	cmp	r3, r2
 8048ae6:	d103      	bne.n	8048af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8048ae8:	683b      	ldr	r3, [r7, #0]
 8048aea:	691a      	ldr	r2, [r3, #16]
 8048aec:	687b      	ldr	r3, [r7, #4]
 8048aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8048af0:	687b      	ldr	r3, [r7, #4]
 8048af2:	2201      	movs	r2, #1
 8048af4:	615a      	str	r2, [r3, #20]
}
 8048af6:	bf00      	nop
 8048af8:	3714      	adds	r7, #20
 8048afa:	46bd      	mov	sp, r7
 8048afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b00:	4770      	bx	lr
 8048b02:	bf00      	nop
 8048b04:	40010000 	.word	0x40010000
 8048b08:	40000400 	.word	0x40000400
 8048b0c:	40000800 	.word	0x40000800
 8048b10:	40000c00 	.word	0x40000c00
 8048b14:	40010400 	.word	0x40010400
 8048b18:	40014000 	.word	0x40014000
 8048b1c:	40014400 	.word	0x40014400
 8048b20:	40014800 	.word	0x40014800
 8048b24:	40001800 	.word	0x40001800
 8048b28:	40001c00 	.word	0x40001c00
 8048b2c:	40002000 	.word	0x40002000

08048b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048b30:	b480      	push	{r7}
 8048b32:	b087      	sub	sp, #28
 8048b34:	af00      	add	r7, sp, #0
 8048b36:	60f8      	str	r0, [r7, #12]
 8048b38:	60b9      	str	r1, [r7, #8]
 8048b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8048b3c:	68fb      	ldr	r3, [r7, #12]
 8048b3e:	6a1b      	ldr	r3, [r3, #32]
 8048b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8048b42:	68fb      	ldr	r3, [r7, #12]
 8048b44:	6a1b      	ldr	r3, [r3, #32]
 8048b46:	f023 0201 	bic.w	r2, r3, #1
 8048b4a:	68fb      	ldr	r3, [r7, #12]
 8048b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048b4e:	68fb      	ldr	r3, [r7, #12]
 8048b50:	699b      	ldr	r3, [r3, #24]
 8048b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8048b54:	693b      	ldr	r3, [r7, #16]
 8048b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8048b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8048b5c:	687b      	ldr	r3, [r7, #4]
 8048b5e:	011b      	lsls	r3, r3, #4
 8048b60:	693a      	ldr	r2, [r7, #16]
 8048b62:	4313      	orrs	r3, r2
 8048b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8048b66:	697b      	ldr	r3, [r7, #20]
 8048b68:	f023 030a 	bic.w	r3, r3, #10
 8048b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8048b6e:	697a      	ldr	r2, [r7, #20]
 8048b70:	68bb      	ldr	r3, [r7, #8]
 8048b72:	4313      	orrs	r3, r2
 8048b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8048b76:	68fb      	ldr	r3, [r7, #12]
 8048b78:	693a      	ldr	r2, [r7, #16]
 8048b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048b7c:	68fb      	ldr	r3, [r7, #12]
 8048b7e:	697a      	ldr	r2, [r7, #20]
 8048b80:	621a      	str	r2, [r3, #32]
}
 8048b82:	bf00      	nop
 8048b84:	371c      	adds	r7, #28
 8048b86:	46bd      	mov	sp, r7
 8048b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b8c:	4770      	bx	lr

08048b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048b8e:	b480      	push	{r7}
 8048b90:	b087      	sub	sp, #28
 8048b92:	af00      	add	r7, sp, #0
 8048b94:	60f8      	str	r0, [r7, #12]
 8048b96:	60b9      	str	r1, [r7, #8]
 8048b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8048b9a:	68fb      	ldr	r3, [r7, #12]
 8048b9c:	6a1b      	ldr	r3, [r3, #32]
 8048b9e:	f023 0210 	bic.w	r2, r3, #16
 8048ba2:	68fb      	ldr	r3, [r7, #12]
 8048ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048ba6:	68fb      	ldr	r3, [r7, #12]
 8048ba8:	699b      	ldr	r3, [r3, #24]
 8048baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8048bac:	68fb      	ldr	r3, [r7, #12]
 8048bae:	6a1b      	ldr	r3, [r3, #32]
 8048bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8048bb2:	697b      	ldr	r3, [r7, #20]
 8048bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8048bba:	687b      	ldr	r3, [r7, #4]
 8048bbc:	031b      	lsls	r3, r3, #12
 8048bbe:	697a      	ldr	r2, [r7, #20]
 8048bc0:	4313      	orrs	r3, r2
 8048bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8048bc4:	693b      	ldr	r3, [r7, #16]
 8048bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8048bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8048bcc:	68bb      	ldr	r3, [r7, #8]
 8048bce:	011b      	lsls	r3, r3, #4
 8048bd0:	693a      	ldr	r2, [r7, #16]
 8048bd2:	4313      	orrs	r3, r2
 8048bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8048bd6:	68fb      	ldr	r3, [r7, #12]
 8048bd8:	697a      	ldr	r2, [r7, #20]
 8048bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048bdc:	68fb      	ldr	r3, [r7, #12]
 8048bde:	693a      	ldr	r2, [r7, #16]
 8048be0:	621a      	str	r2, [r3, #32]
}
 8048be2:	bf00      	nop
 8048be4:	371c      	adds	r7, #28
 8048be6:	46bd      	mov	sp, r7
 8048be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bec:	4770      	bx	lr

08048bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8048bee:	b480      	push	{r7}
 8048bf0:	b085      	sub	sp, #20
 8048bf2:	af00      	add	r7, sp, #0
 8048bf4:	6078      	str	r0, [r7, #4]
 8048bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8048bf8:	687b      	ldr	r3, [r7, #4]
 8048bfa:	689b      	ldr	r3, [r3, #8]
 8048bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8048bfe:	68fb      	ldr	r3, [r7, #12]
 8048c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8048c06:	683a      	ldr	r2, [r7, #0]
 8048c08:	68fb      	ldr	r3, [r7, #12]
 8048c0a:	4313      	orrs	r3, r2
 8048c0c:	f043 0307 	orr.w	r3, r3, #7
 8048c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048c12:	687b      	ldr	r3, [r7, #4]
 8048c14:	68fa      	ldr	r2, [r7, #12]
 8048c16:	609a      	str	r2, [r3, #8]
}
 8048c18:	bf00      	nop
 8048c1a:	3714      	adds	r7, #20
 8048c1c:	46bd      	mov	sp, r7
 8048c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c22:	4770      	bx	lr

08048c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8048c24:	b480      	push	{r7}
 8048c26:	b087      	sub	sp, #28
 8048c28:	af00      	add	r7, sp, #0
 8048c2a:	60f8      	str	r0, [r7, #12]
 8048c2c:	60b9      	str	r1, [r7, #8]
 8048c2e:	607a      	str	r2, [r7, #4]
 8048c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8048c32:	68fb      	ldr	r3, [r7, #12]
 8048c34:	689b      	ldr	r3, [r3, #8]
 8048c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048c38:	697b      	ldr	r3, [r7, #20]
 8048c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8048c40:	683b      	ldr	r3, [r7, #0]
 8048c42:	021a      	lsls	r2, r3, #8
 8048c44:	687b      	ldr	r3, [r7, #4]
 8048c46:	431a      	orrs	r2, r3
 8048c48:	68bb      	ldr	r3, [r7, #8]
 8048c4a:	4313      	orrs	r3, r2
 8048c4c:	697a      	ldr	r2, [r7, #20]
 8048c4e:	4313      	orrs	r3, r2
 8048c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048c52:	68fb      	ldr	r3, [r7, #12]
 8048c54:	697a      	ldr	r2, [r7, #20]
 8048c56:	609a      	str	r2, [r3, #8]
}
 8048c58:	bf00      	nop
 8048c5a:	371c      	adds	r7, #28
 8048c5c:	46bd      	mov	sp, r7
 8048c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c62:	4770      	bx	lr

08048c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8048c64:	b480      	push	{r7}
 8048c66:	b085      	sub	sp, #20
 8048c68:	af00      	add	r7, sp, #0
 8048c6a:	6078      	str	r0, [r7, #4]
 8048c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8048c6e:	687b      	ldr	r3, [r7, #4]
 8048c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048c74:	2b01      	cmp	r3, #1
 8048c76:	d101      	bne.n	8048c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8048c78:	2302      	movs	r3, #2
 8048c7a:	e05a      	b.n	8048d32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8048c7c:	687b      	ldr	r3, [r7, #4]
 8048c7e:	2201      	movs	r2, #1
 8048c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048c84:	687b      	ldr	r3, [r7, #4]
 8048c86:	2202      	movs	r2, #2
 8048c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8048c8c:	687b      	ldr	r3, [r7, #4]
 8048c8e:	681b      	ldr	r3, [r3, #0]
 8048c90:	685b      	ldr	r3, [r3, #4]
 8048c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048c94:	687b      	ldr	r3, [r7, #4]
 8048c96:	681b      	ldr	r3, [r3, #0]
 8048c98:	689b      	ldr	r3, [r3, #8]
 8048c9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8048c9c:	68fb      	ldr	r3, [r7, #12]
 8048c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8048ca4:	683b      	ldr	r3, [r7, #0]
 8048ca6:	681b      	ldr	r3, [r3, #0]
 8048ca8:	68fa      	ldr	r2, [r7, #12]
 8048caa:	4313      	orrs	r3, r2
 8048cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8048cae:	687b      	ldr	r3, [r7, #4]
 8048cb0:	681b      	ldr	r3, [r3, #0]
 8048cb2:	68fa      	ldr	r2, [r7, #12]
 8048cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048cb6:	687b      	ldr	r3, [r7, #4]
 8048cb8:	681b      	ldr	r3, [r3, #0]
 8048cba:	4a21      	ldr	r2, [pc, #132]	; (8048d40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8048cbc:	4293      	cmp	r3, r2
 8048cbe:	d022      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cc0:	687b      	ldr	r3, [r7, #4]
 8048cc2:	681b      	ldr	r3, [r3, #0]
 8048cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048cc8:	d01d      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cca:	687b      	ldr	r3, [r7, #4]
 8048ccc:	681b      	ldr	r3, [r3, #0]
 8048cce:	4a1d      	ldr	r2, [pc, #116]	; (8048d44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048cd0:	4293      	cmp	r3, r2
 8048cd2:	d018      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cd4:	687b      	ldr	r3, [r7, #4]
 8048cd6:	681b      	ldr	r3, [r3, #0]
 8048cd8:	4a1b      	ldr	r2, [pc, #108]	; (8048d48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8048cda:	4293      	cmp	r3, r2
 8048cdc:	d013      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cde:	687b      	ldr	r3, [r7, #4]
 8048ce0:	681b      	ldr	r3, [r3, #0]
 8048ce2:	4a1a      	ldr	r2, [pc, #104]	; (8048d4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8048ce4:	4293      	cmp	r3, r2
 8048ce6:	d00e      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048ce8:	687b      	ldr	r3, [r7, #4]
 8048cea:	681b      	ldr	r3, [r3, #0]
 8048cec:	4a18      	ldr	r2, [pc, #96]	; (8048d50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048cee:	4293      	cmp	r3, r2
 8048cf0:	d009      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cf2:	687b      	ldr	r3, [r7, #4]
 8048cf4:	681b      	ldr	r3, [r3, #0]
 8048cf6:	4a17      	ldr	r2, [pc, #92]	; (8048d54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048cf8:	4293      	cmp	r3, r2
 8048cfa:	d004      	beq.n	8048d06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048cfc:	687b      	ldr	r3, [r7, #4]
 8048cfe:	681b      	ldr	r3, [r3, #0]
 8048d00:	4a15      	ldr	r2, [pc, #84]	; (8048d58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8048d02:	4293      	cmp	r3, r2
 8048d04:	d10c      	bne.n	8048d20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8048d06:	68bb      	ldr	r3, [r7, #8]
 8048d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048d0e:	683b      	ldr	r3, [r7, #0]
 8048d10:	685b      	ldr	r3, [r3, #4]
 8048d12:	68ba      	ldr	r2, [r7, #8]
 8048d14:	4313      	orrs	r3, r2
 8048d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8048d18:	687b      	ldr	r3, [r7, #4]
 8048d1a:	681b      	ldr	r3, [r3, #0]
 8048d1c:	68ba      	ldr	r2, [r7, #8]
 8048d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048d20:	687b      	ldr	r3, [r7, #4]
 8048d22:	2201      	movs	r2, #1
 8048d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048d28:	687b      	ldr	r3, [r7, #4]
 8048d2a:	2200      	movs	r2, #0
 8048d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048d30:	2300      	movs	r3, #0
}
 8048d32:	4618      	mov	r0, r3
 8048d34:	3714      	adds	r7, #20
 8048d36:	46bd      	mov	sp, r7
 8048d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d3c:	4770      	bx	lr
 8048d3e:	bf00      	nop
 8048d40:	40010000 	.word	0x40010000
 8048d44:	40000400 	.word	0x40000400
 8048d48:	40000800 	.word	0x40000800
 8048d4c:	40000c00 	.word	0x40000c00
 8048d50:	40010400 	.word	0x40010400
 8048d54:	40014000 	.word	0x40014000
 8048d58:	40001800 	.word	0x40001800

08048d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048d5c:	b480      	push	{r7}
 8048d5e:	b083      	sub	sp, #12
 8048d60:	af00      	add	r7, sp, #0
 8048d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048d64:	bf00      	nop
 8048d66:	370c      	adds	r7, #12
 8048d68:	46bd      	mov	sp, r7
 8048d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d6e:	4770      	bx	lr

08048d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048d70:	b480      	push	{r7}
 8048d72:	b083      	sub	sp, #12
 8048d74:	af00      	add	r7, sp, #0
 8048d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048d78:	bf00      	nop
 8048d7a:	370c      	adds	r7, #12
 8048d7c:	46bd      	mov	sp, r7
 8048d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d82:	4770      	bx	lr

08048d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8048d84:	b580      	push	{r7, lr}
 8048d86:	b082      	sub	sp, #8
 8048d88:	af00      	add	r7, sp, #0
 8048d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8048d8c:	687b      	ldr	r3, [r7, #4]
 8048d8e:	2b00      	cmp	r3, #0
 8048d90:	d101      	bne.n	8048d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8048d92:	2301      	movs	r3, #1
 8048d94:	e03f      	b.n	8048e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8048d96:	687b      	ldr	r3, [r7, #4]
 8048d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048d9c:	b2db      	uxtb	r3, r3
 8048d9e:	2b00      	cmp	r3, #0
 8048da0:	d106      	bne.n	8048db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8048da2:	687b      	ldr	r3, [r7, #4]
 8048da4:	2200      	movs	r2, #0
 8048da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8048daa:	6878      	ldr	r0, [r7, #4]
 8048dac:	f7f8 fe02 	bl	80419b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8048db0:	687b      	ldr	r3, [r7, #4]
 8048db2:	2224      	movs	r2, #36	; 0x24
 8048db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8048db8:	687b      	ldr	r3, [r7, #4]
 8048dba:	681b      	ldr	r3, [r3, #0]
 8048dbc:	68da      	ldr	r2, [r3, #12]
 8048dbe:	687b      	ldr	r3, [r7, #4]
 8048dc0:	681b      	ldr	r3, [r3, #0]
 8048dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8048dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8048dc8:	6878      	ldr	r0, [r7, #4]
 8048dca:	f000 f9cb 	bl	8049164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8048dce:	687b      	ldr	r3, [r7, #4]
 8048dd0:	681b      	ldr	r3, [r3, #0]
 8048dd2:	691a      	ldr	r2, [r3, #16]
 8048dd4:	687b      	ldr	r3, [r7, #4]
 8048dd6:	681b      	ldr	r3, [r3, #0]
 8048dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8048ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8048dde:	687b      	ldr	r3, [r7, #4]
 8048de0:	681b      	ldr	r3, [r3, #0]
 8048de2:	695a      	ldr	r2, [r3, #20]
 8048de4:	687b      	ldr	r3, [r7, #4]
 8048de6:	681b      	ldr	r3, [r3, #0]
 8048de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8048dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8048dee:	687b      	ldr	r3, [r7, #4]
 8048df0:	681b      	ldr	r3, [r3, #0]
 8048df2:	68da      	ldr	r2, [r3, #12]
 8048df4:	687b      	ldr	r3, [r7, #4]
 8048df6:	681b      	ldr	r3, [r3, #0]
 8048df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8048dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048dfe:	687b      	ldr	r3, [r7, #4]
 8048e00:	2200      	movs	r2, #0
 8048e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8048e04:	687b      	ldr	r3, [r7, #4]
 8048e06:	2220      	movs	r2, #32
 8048e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8048e0c:	687b      	ldr	r3, [r7, #4]
 8048e0e:	2220      	movs	r2, #32
 8048e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8048e14:	2300      	movs	r3, #0
}
 8048e16:	4618      	mov	r0, r3
 8048e18:	3708      	adds	r7, #8
 8048e1a:	46bd      	mov	sp, r7
 8048e1c:	bd80      	pop	{r7, pc}

08048e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048e1e:	b580      	push	{r7, lr}
 8048e20:	b08a      	sub	sp, #40	; 0x28
 8048e22:	af02      	add	r7, sp, #8
 8048e24:	60f8      	str	r0, [r7, #12]
 8048e26:	60b9      	str	r1, [r7, #8]
 8048e28:	603b      	str	r3, [r7, #0]
 8048e2a:	4613      	mov	r3, r2
 8048e2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8048e2e:	2300      	movs	r3, #0
 8048e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8048e32:	68fb      	ldr	r3, [r7, #12]
 8048e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048e38:	b2db      	uxtb	r3, r3
 8048e3a:	2b20      	cmp	r3, #32
 8048e3c:	d17c      	bne.n	8048f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8048e3e:	68bb      	ldr	r3, [r7, #8]
 8048e40:	2b00      	cmp	r3, #0
 8048e42:	d002      	beq.n	8048e4a <HAL_UART_Transmit+0x2c>
 8048e44:	88fb      	ldrh	r3, [r7, #6]
 8048e46:	2b00      	cmp	r3, #0
 8048e48:	d101      	bne.n	8048e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8048e4a:	2301      	movs	r3, #1
 8048e4c:	e075      	b.n	8048f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8048e4e:	68fb      	ldr	r3, [r7, #12]
 8048e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048e54:	2b01      	cmp	r3, #1
 8048e56:	d101      	bne.n	8048e5c <HAL_UART_Transmit+0x3e>
 8048e58:	2302      	movs	r3, #2
 8048e5a:	e06e      	b.n	8048f3a <HAL_UART_Transmit+0x11c>
 8048e5c:	68fb      	ldr	r3, [r7, #12]
 8048e5e:	2201      	movs	r2, #1
 8048e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048e64:	68fb      	ldr	r3, [r7, #12]
 8048e66:	2200      	movs	r2, #0
 8048e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8048e6a:	68fb      	ldr	r3, [r7, #12]
 8048e6c:	2221      	movs	r2, #33	; 0x21
 8048e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8048e72:	f7fa fabf 	bl	80433f4 <HAL_GetTick>
 8048e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8048e78:	68fb      	ldr	r3, [r7, #12]
 8048e7a:	88fa      	ldrh	r2, [r7, #6]
 8048e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8048e7e:	68fb      	ldr	r3, [r7, #12]
 8048e80:	88fa      	ldrh	r2, [r7, #6]
 8048e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8048e84:	68fb      	ldr	r3, [r7, #12]
 8048e86:	689b      	ldr	r3, [r3, #8]
 8048e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048e8c:	d108      	bne.n	8048ea0 <HAL_UART_Transmit+0x82>
 8048e8e:	68fb      	ldr	r3, [r7, #12]
 8048e90:	691b      	ldr	r3, [r3, #16]
 8048e92:	2b00      	cmp	r3, #0
 8048e94:	d104      	bne.n	8048ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8048e96:	2300      	movs	r3, #0
 8048e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8048e9a:	68bb      	ldr	r3, [r7, #8]
 8048e9c:	61bb      	str	r3, [r7, #24]
 8048e9e:	e003      	b.n	8048ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8048ea0:	68bb      	ldr	r3, [r7, #8]
 8048ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8048ea4:	2300      	movs	r3, #0
 8048ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8048ea8:	68fb      	ldr	r3, [r7, #12]
 8048eaa:	2200      	movs	r2, #0
 8048eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8048eb0:	e02a      	b.n	8048f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8048eb2:	683b      	ldr	r3, [r7, #0]
 8048eb4:	9300      	str	r3, [sp, #0]
 8048eb6:	697b      	ldr	r3, [r7, #20]
 8048eb8:	2200      	movs	r2, #0
 8048eba:	2180      	movs	r1, #128	; 0x80
 8048ebc:	68f8      	ldr	r0, [r7, #12]
 8048ebe:	f000 f8e2 	bl	8049086 <UART_WaitOnFlagUntilTimeout>
 8048ec2:	4603      	mov	r3, r0
 8048ec4:	2b00      	cmp	r3, #0
 8048ec6:	d001      	beq.n	8048ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8048ec8:	2303      	movs	r3, #3
 8048eca:	e036      	b.n	8048f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8048ecc:	69fb      	ldr	r3, [r7, #28]
 8048ece:	2b00      	cmp	r3, #0
 8048ed0:	d10b      	bne.n	8048eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8048ed2:	69bb      	ldr	r3, [r7, #24]
 8048ed4:	881b      	ldrh	r3, [r3, #0]
 8048ed6:	461a      	mov	r2, r3
 8048ed8:	68fb      	ldr	r3, [r7, #12]
 8048eda:	681b      	ldr	r3, [r3, #0]
 8048edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8048ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8048ee2:	69bb      	ldr	r3, [r7, #24]
 8048ee4:	3302      	adds	r3, #2
 8048ee6:	61bb      	str	r3, [r7, #24]
 8048ee8:	e007      	b.n	8048efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8048eea:	69fb      	ldr	r3, [r7, #28]
 8048eec:	781a      	ldrb	r2, [r3, #0]
 8048eee:	68fb      	ldr	r3, [r7, #12]
 8048ef0:	681b      	ldr	r3, [r3, #0]
 8048ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8048ef4:	69fb      	ldr	r3, [r7, #28]
 8048ef6:	3301      	adds	r3, #1
 8048ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8048efa:	68fb      	ldr	r3, [r7, #12]
 8048efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048efe:	b29b      	uxth	r3, r3
 8048f00:	3b01      	subs	r3, #1
 8048f02:	b29a      	uxth	r2, r3
 8048f04:	68fb      	ldr	r3, [r7, #12]
 8048f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8048f08:	68fb      	ldr	r3, [r7, #12]
 8048f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048f0c:	b29b      	uxth	r3, r3
 8048f0e:	2b00      	cmp	r3, #0
 8048f10:	d1cf      	bne.n	8048eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8048f12:	683b      	ldr	r3, [r7, #0]
 8048f14:	9300      	str	r3, [sp, #0]
 8048f16:	697b      	ldr	r3, [r7, #20]
 8048f18:	2200      	movs	r2, #0
 8048f1a:	2140      	movs	r1, #64	; 0x40
 8048f1c:	68f8      	ldr	r0, [r7, #12]
 8048f1e:	f000 f8b2 	bl	8049086 <UART_WaitOnFlagUntilTimeout>
 8048f22:	4603      	mov	r3, r0
 8048f24:	2b00      	cmp	r3, #0
 8048f26:	d001      	beq.n	8048f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8048f28:	2303      	movs	r3, #3
 8048f2a:	e006      	b.n	8048f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8048f2c:	68fb      	ldr	r3, [r7, #12]
 8048f2e:	2220      	movs	r2, #32
 8048f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8048f34:	2300      	movs	r3, #0
 8048f36:	e000      	b.n	8048f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8048f38:	2302      	movs	r3, #2
  }
}
 8048f3a:	4618      	mov	r0, r3
 8048f3c:	3720      	adds	r7, #32
 8048f3e:	46bd      	mov	sp, r7
 8048f40:	bd80      	pop	{r7, pc}

08048f42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048f42:	b580      	push	{r7, lr}
 8048f44:	b08a      	sub	sp, #40	; 0x28
 8048f46:	af02      	add	r7, sp, #8
 8048f48:	60f8      	str	r0, [r7, #12]
 8048f4a:	60b9      	str	r1, [r7, #8]
 8048f4c:	603b      	str	r3, [r7, #0]
 8048f4e:	4613      	mov	r3, r2
 8048f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8048f52:	2300      	movs	r3, #0
 8048f54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8048f56:	68fb      	ldr	r3, [r7, #12]
 8048f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8048f5c:	b2db      	uxtb	r3, r3
 8048f5e:	2b20      	cmp	r3, #32
 8048f60:	f040 808c 	bne.w	804907c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8048f64:	68bb      	ldr	r3, [r7, #8]
 8048f66:	2b00      	cmp	r3, #0
 8048f68:	d002      	beq.n	8048f70 <HAL_UART_Receive+0x2e>
 8048f6a:	88fb      	ldrh	r3, [r7, #6]
 8048f6c:	2b00      	cmp	r3, #0
 8048f6e:	d101      	bne.n	8048f74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8048f70:	2301      	movs	r3, #1
 8048f72:	e084      	b.n	804907e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8048f74:	68fb      	ldr	r3, [r7, #12]
 8048f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048f7a:	2b01      	cmp	r3, #1
 8048f7c:	d101      	bne.n	8048f82 <HAL_UART_Receive+0x40>
 8048f7e:	2302      	movs	r3, #2
 8048f80:	e07d      	b.n	804907e <HAL_UART_Receive+0x13c>
 8048f82:	68fb      	ldr	r3, [r7, #12]
 8048f84:	2201      	movs	r2, #1
 8048f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048f8a:	68fb      	ldr	r3, [r7, #12]
 8048f8c:	2200      	movs	r2, #0
 8048f8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8048f90:	68fb      	ldr	r3, [r7, #12]
 8048f92:	2222      	movs	r2, #34	; 0x22
 8048f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8048f98:	68fb      	ldr	r3, [r7, #12]
 8048f9a:	2200      	movs	r2, #0
 8048f9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8048f9e:	f7fa fa29 	bl	80433f4 <HAL_GetTick>
 8048fa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8048fa4:	68fb      	ldr	r3, [r7, #12]
 8048fa6:	88fa      	ldrh	r2, [r7, #6]
 8048fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8048faa:	68fb      	ldr	r3, [r7, #12]
 8048fac:	88fa      	ldrh	r2, [r7, #6]
 8048fae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8048fb0:	68fb      	ldr	r3, [r7, #12]
 8048fb2:	689b      	ldr	r3, [r3, #8]
 8048fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048fb8:	d108      	bne.n	8048fcc <HAL_UART_Receive+0x8a>
 8048fba:	68fb      	ldr	r3, [r7, #12]
 8048fbc:	691b      	ldr	r3, [r3, #16]
 8048fbe:	2b00      	cmp	r3, #0
 8048fc0:	d104      	bne.n	8048fcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8048fc2:	2300      	movs	r3, #0
 8048fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8048fc6:	68bb      	ldr	r3, [r7, #8]
 8048fc8:	61bb      	str	r3, [r7, #24]
 8048fca:	e003      	b.n	8048fd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8048fcc:	68bb      	ldr	r3, [r7, #8]
 8048fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8048fd0:	2300      	movs	r3, #0
 8048fd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8048fd4:	68fb      	ldr	r3, [r7, #12]
 8048fd6:	2200      	movs	r2, #0
 8048fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8048fdc:	e043      	b.n	8049066 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8048fde:	683b      	ldr	r3, [r7, #0]
 8048fe0:	9300      	str	r3, [sp, #0]
 8048fe2:	697b      	ldr	r3, [r7, #20]
 8048fe4:	2200      	movs	r2, #0
 8048fe6:	2120      	movs	r1, #32
 8048fe8:	68f8      	ldr	r0, [r7, #12]
 8048fea:	f000 f84c 	bl	8049086 <UART_WaitOnFlagUntilTimeout>
 8048fee:	4603      	mov	r3, r0
 8048ff0:	2b00      	cmp	r3, #0
 8048ff2:	d001      	beq.n	8048ff8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8048ff4:	2303      	movs	r3, #3
 8048ff6:	e042      	b.n	804907e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8048ff8:	69fb      	ldr	r3, [r7, #28]
 8048ffa:	2b00      	cmp	r3, #0
 8048ffc:	d10c      	bne.n	8049018 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8048ffe:	68fb      	ldr	r3, [r7, #12]
 8049000:	681b      	ldr	r3, [r3, #0]
 8049002:	685b      	ldr	r3, [r3, #4]
 8049004:	b29b      	uxth	r3, r3
 8049006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804900a:	b29a      	uxth	r2, r3
 804900c:	69bb      	ldr	r3, [r7, #24]
 804900e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8049010:	69bb      	ldr	r3, [r7, #24]
 8049012:	3302      	adds	r3, #2
 8049014:	61bb      	str	r3, [r7, #24]
 8049016:	e01f      	b.n	8049058 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8049018:	68fb      	ldr	r3, [r7, #12]
 804901a:	689b      	ldr	r3, [r3, #8]
 804901c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8049020:	d007      	beq.n	8049032 <HAL_UART_Receive+0xf0>
 8049022:	68fb      	ldr	r3, [r7, #12]
 8049024:	689b      	ldr	r3, [r3, #8]
 8049026:	2b00      	cmp	r3, #0
 8049028:	d10a      	bne.n	8049040 <HAL_UART_Receive+0xfe>
 804902a:	68fb      	ldr	r3, [r7, #12]
 804902c:	691b      	ldr	r3, [r3, #16]
 804902e:	2b00      	cmp	r3, #0
 8049030:	d106      	bne.n	8049040 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8049032:	68fb      	ldr	r3, [r7, #12]
 8049034:	681b      	ldr	r3, [r3, #0]
 8049036:	685b      	ldr	r3, [r3, #4]
 8049038:	b2da      	uxtb	r2, r3
 804903a:	69fb      	ldr	r3, [r7, #28]
 804903c:	701a      	strb	r2, [r3, #0]
 804903e:	e008      	b.n	8049052 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8049040:	68fb      	ldr	r3, [r7, #12]
 8049042:	681b      	ldr	r3, [r3, #0]
 8049044:	685b      	ldr	r3, [r3, #4]
 8049046:	b2db      	uxtb	r3, r3
 8049048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804904c:	b2da      	uxtb	r2, r3
 804904e:	69fb      	ldr	r3, [r7, #28]
 8049050:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8049052:	69fb      	ldr	r3, [r7, #28]
 8049054:	3301      	adds	r3, #1
 8049056:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8049058:	68fb      	ldr	r3, [r7, #12]
 804905a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 804905c:	b29b      	uxth	r3, r3
 804905e:	3b01      	subs	r3, #1
 8049060:	b29a      	uxth	r2, r3
 8049062:	68fb      	ldr	r3, [r7, #12]
 8049064:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8049066:	68fb      	ldr	r3, [r7, #12]
 8049068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 804906a:	b29b      	uxth	r3, r3
 804906c:	2b00      	cmp	r3, #0
 804906e:	d1b6      	bne.n	8048fde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8049070:	68fb      	ldr	r3, [r7, #12]
 8049072:	2220      	movs	r2, #32
 8049074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8049078:	2300      	movs	r3, #0
 804907a:	e000      	b.n	804907e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 804907c:	2302      	movs	r3, #2
  }
}
 804907e:	4618      	mov	r0, r3
 8049080:	3720      	adds	r7, #32
 8049082:	46bd      	mov	sp, r7
 8049084:	bd80      	pop	{r7, pc}

08049086 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8049086:	b580      	push	{r7, lr}
 8049088:	b090      	sub	sp, #64	; 0x40
 804908a:	af00      	add	r7, sp, #0
 804908c:	60f8      	str	r0, [r7, #12]
 804908e:	60b9      	str	r1, [r7, #8]
 8049090:	603b      	str	r3, [r7, #0]
 8049092:	4613      	mov	r3, r2
 8049094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8049096:	e050      	b.n	804913a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8049098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804909e:	d04c      	beq.n	804913a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80490a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80490a2:	2b00      	cmp	r3, #0
 80490a4:	d007      	beq.n	80490b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80490a6:	f7fa f9a5 	bl	80433f4 <HAL_GetTick>
 80490aa:	4602      	mov	r2, r0
 80490ac:	683b      	ldr	r3, [r7, #0]
 80490ae:	1ad3      	subs	r3, r2, r3
 80490b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80490b2:	429a      	cmp	r2, r3
 80490b4:	d241      	bcs.n	804913a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80490b6:	68fb      	ldr	r3, [r7, #12]
 80490b8:	681b      	ldr	r3, [r3, #0]
 80490ba:	330c      	adds	r3, #12
 80490bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80490be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80490c0:	e853 3f00 	ldrex	r3, [r3]
 80490c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80490c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80490c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80490cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80490ce:	68fb      	ldr	r3, [r7, #12]
 80490d0:	681b      	ldr	r3, [r3, #0]
 80490d2:	330c      	adds	r3, #12
 80490d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80490d6:	637a      	str	r2, [r7, #52]	; 0x34
 80490d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80490da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80490dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80490de:	e841 2300 	strex	r3, r2, [r1]
 80490e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80490e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80490e6:	2b00      	cmp	r3, #0
 80490e8:	d1e5      	bne.n	80490b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80490ea:	68fb      	ldr	r3, [r7, #12]
 80490ec:	681b      	ldr	r3, [r3, #0]
 80490ee:	3314      	adds	r3, #20
 80490f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80490f2:	697b      	ldr	r3, [r7, #20]
 80490f4:	e853 3f00 	ldrex	r3, [r3]
 80490f8:	613b      	str	r3, [r7, #16]
   return(result);
 80490fa:	693b      	ldr	r3, [r7, #16]
 80490fc:	f023 0301 	bic.w	r3, r3, #1
 8049100:	63bb      	str	r3, [r7, #56]	; 0x38
 8049102:	68fb      	ldr	r3, [r7, #12]
 8049104:	681b      	ldr	r3, [r3, #0]
 8049106:	3314      	adds	r3, #20
 8049108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804910a:	623a      	str	r2, [r7, #32]
 804910c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804910e:	69f9      	ldr	r1, [r7, #28]
 8049110:	6a3a      	ldr	r2, [r7, #32]
 8049112:	e841 2300 	strex	r3, r2, [r1]
 8049116:	61bb      	str	r3, [r7, #24]
   return(result);
 8049118:	69bb      	ldr	r3, [r7, #24]
 804911a:	2b00      	cmp	r3, #0
 804911c:	d1e5      	bne.n	80490ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 804911e:	68fb      	ldr	r3, [r7, #12]
 8049120:	2220      	movs	r2, #32
 8049122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8049126:	68fb      	ldr	r3, [r7, #12]
 8049128:	2220      	movs	r2, #32
 804912a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 804912e:	68fb      	ldr	r3, [r7, #12]
 8049130:	2200      	movs	r2, #0
 8049132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8049136:	2303      	movs	r3, #3
 8049138:	e00f      	b.n	804915a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804913a:	68fb      	ldr	r3, [r7, #12]
 804913c:	681b      	ldr	r3, [r3, #0]
 804913e:	681a      	ldr	r2, [r3, #0]
 8049140:	68bb      	ldr	r3, [r7, #8]
 8049142:	4013      	ands	r3, r2
 8049144:	68ba      	ldr	r2, [r7, #8]
 8049146:	429a      	cmp	r2, r3
 8049148:	bf0c      	ite	eq
 804914a:	2301      	moveq	r3, #1
 804914c:	2300      	movne	r3, #0
 804914e:	b2db      	uxtb	r3, r3
 8049150:	461a      	mov	r2, r3
 8049152:	79fb      	ldrb	r3, [r7, #7]
 8049154:	429a      	cmp	r2, r3
 8049156:	d09f      	beq.n	8049098 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8049158:	2300      	movs	r3, #0
}
 804915a:	4618      	mov	r0, r3
 804915c:	3740      	adds	r7, #64	; 0x40
 804915e:	46bd      	mov	sp, r7
 8049160:	bd80      	pop	{r7, pc}
	...

08049164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8049164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8049168:	b0c0      	sub	sp, #256	; 0x100
 804916a:	af00      	add	r7, sp, #0
 804916c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8049170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049174:	681b      	ldr	r3, [r3, #0]
 8049176:	691b      	ldr	r3, [r3, #16]
 8049178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 804917c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049180:	68d9      	ldr	r1, [r3, #12]
 8049182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049186:	681a      	ldr	r2, [r3, #0]
 8049188:	ea40 0301 	orr.w	r3, r0, r1
 804918c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 804918e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049192:	689a      	ldr	r2, [r3, #8]
 8049194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049198:	691b      	ldr	r3, [r3, #16]
 804919a:	431a      	orrs	r2, r3
 804919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491a0:	695b      	ldr	r3, [r3, #20]
 80491a2:	431a      	orrs	r2, r3
 80491a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491a8:	69db      	ldr	r3, [r3, #28]
 80491aa:	4313      	orrs	r3, r2
 80491ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80491b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491b4:	681b      	ldr	r3, [r3, #0]
 80491b6:	68db      	ldr	r3, [r3, #12]
 80491b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80491bc:	f021 010c 	bic.w	r1, r1, #12
 80491c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491c4:	681a      	ldr	r2, [r3, #0]
 80491c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80491ca:	430b      	orrs	r3, r1
 80491cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80491ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491d2:	681b      	ldr	r3, [r3, #0]
 80491d4:	695b      	ldr	r3, [r3, #20]
 80491d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80491da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491de:	6999      	ldr	r1, [r3, #24]
 80491e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491e4:	681a      	ldr	r2, [r3, #0]
 80491e6:	ea40 0301 	orr.w	r3, r0, r1
 80491ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80491ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491f0:	681a      	ldr	r2, [r3, #0]
 80491f2:	4b8f      	ldr	r3, [pc, #572]	; (8049430 <UART_SetConfig+0x2cc>)
 80491f4:	429a      	cmp	r2, r3
 80491f6:	d005      	beq.n	8049204 <UART_SetConfig+0xa0>
 80491f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491fc:	681a      	ldr	r2, [r3, #0]
 80491fe:	4b8d      	ldr	r3, [pc, #564]	; (8049434 <UART_SetConfig+0x2d0>)
 8049200:	429a      	cmp	r2, r3
 8049202:	d104      	bne.n	804920e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8049204:	f7fe f8c6 	bl	8047394 <HAL_RCC_GetPCLK2Freq>
 8049208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 804920c:	e003      	b.n	8049216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 804920e:	f7fe f8ad 	bl	804736c <HAL_RCC_GetPCLK1Freq>
 8049212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8049216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804921a:	69db      	ldr	r3, [r3, #28]
 804921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8049220:	f040 810c 	bne.w	804943c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8049224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049228:	2200      	movs	r2, #0
 804922a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 804922e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8049232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8049236:	4622      	mov	r2, r4
 8049238:	462b      	mov	r3, r5
 804923a:	1891      	adds	r1, r2, r2
 804923c:	65b9      	str	r1, [r7, #88]	; 0x58
 804923e:	415b      	adcs	r3, r3
 8049240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8049242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8049246:	4621      	mov	r1, r4
 8049248:	eb12 0801 	adds.w	r8, r2, r1
 804924c:	4629      	mov	r1, r5
 804924e:	eb43 0901 	adc.w	r9, r3, r1
 8049252:	f04f 0200 	mov.w	r2, #0
 8049256:	f04f 0300 	mov.w	r3, #0
 804925a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804925e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8049262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8049266:	4690      	mov	r8, r2
 8049268:	4699      	mov	r9, r3
 804926a:	4623      	mov	r3, r4
 804926c:	eb18 0303 	adds.w	r3, r8, r3
 8049270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8049274:	462b      	mov	r3, r5
 8049276:	eb49 0303 	adc.w	r3, r9, r3
 804927a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 804927e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049282:	685b      	ldr	r3, [r3, #4]
 8049284:	2200      	movs	r2, #0
 8049286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 804928a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 804928e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8049292:	460b      	mov	r3, r1
 8049294:	18db      	adds	r3, r3, r3
 8049296:	653b      	str	r3, [r7, #80]	; 0x50
 8049298:	4613      	mov	r3, r2
 804929a:	eb42 0303 	adc.w	r3, r2, r3
 804929e:	657b      	str	r3, [r7, #84]	; 0x54
 80492a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80492a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80492a8:	f7f6 fff2 	bl	8040290 <__aeabi_uldivmod>
 80492ac:	4602      	mov	r2, r0
 80492ae:	460b      	mov	r3, r1
 80492b0:	4b61      	ldr	r3, [pc, #388]	; (8049438 <UART_SetConfig+0x2d4>)
 80492b2:	fba3 2302 	umull	r2, r3, r3, r2
 80492b6:	095b      	lsrs	r3, r3, #5
 80492b8:	011c      	lsls	r4, r3, #4
 80492ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80492be:	2200      	movs	r2, #0
 80492c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80492c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80492c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80492cc:	4642      	mov	r2, r8
 80492ce:	464b      	mov	r3, r9
 80492d0:	1891      	adds	r1, r2, r2
 80492d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80492d4:	415b      	adcs	r3, r3
 80492d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80492d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80492dc:	4641      	mov	r1, r8
 80492de:	eb12 0a01 	adds.w	sl, r2, r1
 80492e2:	4649      	mov	r1, r9
 80492e4:	eb43 0b01 	adc.w	fp, r3, r1
 80492e8:	f04f 0200 	mov.w	r2, #0
 80492ec:	f04f 0300 	mov.w	r3, #0
 80492f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80492f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80492f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80492fc:	4692      	mov	sl, r2
 80492fe:	469b      	mov	fp, r3
 8049300:	4643      	mov	r3, r8
 8049302:	eb1a 0303 	adds.w	r3, sl, r3
 8049306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 804930a:	464b      	mov	r3, r9
 804930c:	eb4b 0303 	adc.w	r3, fp, r3
 8049310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8049314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049318:	685b      	ldr	r3, [r3, #4]
 804931a:	2200      	movs	r2, #0
 804931c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8049320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8049324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8049328:	460b      	mov	r3, r1
 804932a:	18db      	adds	r3, r3, r3
 804932c:	643b      	str	r3, [r7, #64]	; 0x40
 804932e:	4613      	mov	r3, r2
 8049330:	eb42 0303 	adc.w	r3, r2, r3
 8049334:	647b      	str	r3, [r7, #68]	; 0x44
 8049336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 804933a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 804933e:	f7f6 ffa7 	bl	8040290 <__aeabi_uldivmod>
 8049342:	4602      	mov	r2, r0
 8049344:	460b      	mov	r3, r1
 8049346:	4611      	mov	r1, r2
 8049348:	4b3b      	ldr	r3, [pc, #236]	; (8049438 <UART_SetConfig+0x2d4>)
 804934a:	fba3 2301 	umull	r2, r3, r3, r1
 804934e:	095b      	lsrs	r3, r3, #5
 8049350:	2264      	movs	r2, #100	; 0x64
 8049352:	fb02 f303 	mul.w	r3, r2, r3
 8049356:	1acb      	subs	r3, r1, r3
 8049358:	00db      	lsls	r3, r3, #3
 804935a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 804935e:	4b36      	ldr	r3, [pc, #216]	; (8049438 <UART_SetConfig+0x2d4>)
 8049360:	fba3 2302 	umull	r2, r3, r3, r2
 8049364:	095b      	lsrs	r3, r3, #5
 8049366:	005b      	lsls	r3, r3, #1
 8049368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 804936c:	441c      	add	r4, r3
 804936e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049372:	2200      	movs	r2, #0
 8049374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8049378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 804937c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8049380:	4642      	mov	r2, r8
 8049382:	464b      	mov	r3, r9
 8049384:	1891      	adds	r1, r2, r2
 8049386:	63b9      	str	r1, [r7, #56]	; 0x38
 8049388:	415b      	adcs	r3, r3
 804938a:	63fb      	str	r3, [r7, #60]	; 0x3c
 804938c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8049390:	4641      	mov	r1, r8
 8049392:	1851      	adds	r1, r2, r1
 8049394:	6339      	str	r1, [r7, #48]	; 0x30
 8049396:	4649      	mov	r1, r9
 8049398:	414b      	adcs	r3, r1
 804939a:	637b      	str	r3, [r7, #52]	; 0x34
 804939c:	f04f 0200 	mov.w	r2, #0
 80493a0:	f04f 0300 	mov.w	r3, #0
 80493a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80493a8:	4659      	mov	r1, fp
 80493aa:	00cb      	lsls	r3, r1, #3
 80493ac:	4651      	mov	r1, sl
 80493ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80493b2:	4651      	mov	r1, sl
 80493b4:	00ca      	lsls	r2, r1, #3
 80493b6:	4610      	mov	r0, r2
 80493b8:	4619      	mov	r1, r3
 80493ba:	4603      	mov	r3, r0
 80493bc:	4642      	mov	r2, r8
 80493be:	189b      	adds	r3, r3, r2
 80493c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80493c4:	464b      	mov	r3, r9
 80493c6:	460a      	mov	r2, r1
 80493c8:	eb42 0303 	adc.w	r3, r2, r3
 80493cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80493d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80493d4:	685b      	ldr	r3, [r3, #4]
 80493d6:	2200      	movs	r2, #0
 80493d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80493dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80493e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80493e4:	460b      	mov	r3, r1
 80493e6:	18db      	adds	r3, r3, r3
 80493e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80493ea:	4613      	mov	r3, r2
 80493ec:	eb42 0303 	adc.w	r3, r2, r3
 80493f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80493f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80493f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80493fa:	f7f6 ff49 	bl	8040290 <__aeabi_uldivmod>
 80493fe:	4602      	mov	r2, r0
 8049400:	460b      	mov	r3, r1
 8049402:	4b0d      	ldr	r3, [pc, #52]	; (8049438 <UART_SetConfig+0x2d4>)
 8049404:	fba3 1302 	umull	r1, r3, r3, r2
 8049408:	095b      	lsrs	r3, r3, #5
 804940a:	2164      	movs	r1, #100	; 0x64
 804940c:	fb01 f303 	mul.w	r3, r1, r3
 8049410:	1ad3      	subs	r3, r2, r3
 8049412:	00db      	lsls	r3, r3, #3
 8049414:	3332      	adds	r3, #50	; 0x32
 8049416:	4a08      	ldr	r2, [pc, #32]	; (8049438 <UART_SetConfig+0x2d4>)
 8049418:	fba2 2303 	umull	r2, r3, r2, r3
 804941c:	095b      	lsrs	r3, r3, #5
 804941e:	f003 0207 	and.w	r2, r3, #7
 8049422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049426:	681b      	ldr	r3, [r3, #0]
 8049428:	4422      	add	r2, r4
 804942a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 804942c:	e105      	b.n	804963a <UART_SetConfig+0x4d6>
 804942e:	bf00      	nop
 8049430:	40011000 	.word	0x40011000
 8049434:	40011400 	.word	0x40011400
 8049438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 804943c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049440:	2200      	movs	r2, #0
 8049442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8049446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 804944a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 804944e:	4642      	mov	r2, r8
 8049450:	464b      	mov	r3, r9
 8049452:	1891      	adds	r1, r2, r2
 8049454:	6239      	str	r1, [r7, #32]
 8049456:	415b      	adcs	r3, r3
 8049458:	627b      	str	r3, [r7, #36]	; 0x24
 804945a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 804945e:	4641      	mov	r1, r8
 8049460:	1854      	adds	r4, r2, r1
 8049462:	4649      	mov	r1, r9
 8049464:	eb43 0501 	adc.w	r5, r3, r1
 8049468:	f04f 0200 	mov.w	r2, #0
 804946c:	f04f 0300 	mov.w	r3, #0
 8049470:	00eb      	lsls	r3, r5, #3
 8049472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8049476:	00e2      	lsls	r2, r4, #3
 8049478:	4614      	mov	r4, r2
 804947a:	461d      	mov	r5, r3
 804947c:	4643      	mov	r3, r8
 804947e:	18e3      	adds	r3, r4, r3
 8049480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8049484:	464b      	mov	r3, r9
 8049486:	eb45 0303 	adc.w	r3, r5, r3
 804948a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 804948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049492:	685b      	ldr	r3, [r3, #4]
 8049494:	2200      	movs	r2, #0
 8049496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 804949a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 804949e:	f04f 0200 	mov.w	r2, #0
 80494a2:	f04f 0300 	mov.w	r3, #0
 80494a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80494aa:	4629      	mov	r1, r5
 80494ac:	008b      	lsls	r3, r1, #2
 80494ae:	4621      	mov	r1, r4
 80494b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80494b4:	4621      	mov	r1, r4
 80494b6:	008a      	lsls	r2, r1, #2
 80494b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80494bc:	f7f6 fee8 	bl	8040290 <__aeabi_uldivmod>
 80494c0:	4602      	mov	r2, r0
 80494c2:	460b      	mov	r3, r1
 80494c4:	4b60      	ldr	r3, [pc, #384]	; (8049648 <UART_SetConfig+0x4e4>)
 80494c6:	fba3 2302 	umull	r2, r3, r3, r2
 80494ca:	095b      	lsrs	r3, r3, #5
 80494cc:	011c      	lsls	r4, r3, #4
 80494ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80494d2:	2200      	movs	r2, #0
 80494d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80494d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80494dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80494e0:	4642      	mov	r2, r8
 80494e2:	464b      	mov	r3, r9
 80494e4:	1891      	adds	r1, r2, r2
 80494e6:	61b9      	str	r1, [r7, #24]
 80494e8:	415b      	adcs	r3, r3
 80494ea:	61fb      	str	r3, [r7, #28]
 80494ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80494f0:	4641      	mov	r1, r8
 80494f2:	1851      	adds	r1, r2, r1
 80494f4:	6139      	str	r1, [r7, #16]
 80494f6:	4649      	mov	r1, r9
 80494f8:	414b      	adcs	r3, r1
 80494fa:	617b      	str	r3, [r7, #20]
 80494fc:	f04f 0200 	mov.w	r2, #0
 8049500:	f04f 0300 	mov.w	r3, #0
 8049504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8049508:	4659      	mov	r1, fp
 804950a:	00cb      	lsls	r3, r1, #3
 804950c:	4651      	mov	r1, sl
 804950e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8049512:	4651      	mov	r1, sl
 8049514:	00ca      	lsls	r2, r1, #3
 8049516:	4610      	mov	r0, r2
 8049518:	4619      	mov	r1, r3
 804951a:	4603      	mov	r3, r0
 804951c:	4642      	mov	r2, r8
 804951e:	189b      	adds	r3, r3, r2
 8049520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8049524:	464b      	mov	r3, r9
 8049526:	460a      	mov	r2, r1
 8049528:	eb42 0303 	adc.w	r3, r2, r3
 804952c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8049530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049534:	685b      	ldr	r3, [r3, #4]
 8049536:	2200      	movs	r2, #0
 8049538:	67bb      	str	r3, [r7, #120]	; 0x78
 804953a:	67fa      	str	r2, [r7, #124]	; 0x7c
 804953c:	f04f 0200 	mov.w	r2, #0
 8049540:	f04f 0300 	mov.w	r3, #0
 8049544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8049548:	4649      	mov	r1, r9
 804954a:	008b      	lsls	r3, r1, #2
 804954c:	4641      	mov	r1, r8
 804954e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049552:	4641      	mov	r1, r8
 8049554:	008a      	lsls	r2, r1, #2
 8049556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 804955a:	f7f6 fe99 	bl	8040290 <__aeabi_uldivmod>
 804955e:	4602      	mov	r2, r0
 8049560:	460b      	mov	r3, r1
 8049562:	4b39      	ldr	r3, [pc, #228]	; (8049648 <UART_SetConfig+0x4e4>)
 8049564:	fba3 1302 	umull	r1, r3, r3, r2
 8049568:	095b      	lsrs	r3, r3, #5
 804956a:	2164      	movs	r1, #100	; 0x64
 804956c:	fb01 f303 	mul.w	r3, r1, r3
 8049570:	1ad3      	subs	r3, r2, r3
 8049572:	011b      	lsls	r3, r3, #4
 8049574:	3332      	adds	r3, #50	; 0x32
 8049576:	4a34      	ldr	r2, [pc, #208]	; (8049648 <UART_SetConfig+0x4e4>)
 8049578:	fba2 2303 	umull	r2, r3, r2, r3
 804957c:	095b      	lsrs	r3, r3, #5
 804957e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8049582:	441c      	add	r4, r3
 8049584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049588:	2200      	movs	r2, #0
 804958a:	673b      	str	r3, [r7, #112]	; 0x70
 804958c:	677a      	str	r2, [r7, #116]	; 0x74
 804958e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8049592:	4642      	mov	r2, r8
 8049594:	464b      	mov	r3, r9
 8049596:	1891      	adds	r1, r2, r2
 8049598:	60b9      	str	r1, [r7, #8]
 804959a:	415b      	adcs	r3, r3
 804959c:	60fb      	str	r3, [r7, #12]
 804959e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80495a2:	4641      	mov	r1, r8
 80495a4:	1851      	adds	r1, r2, r1
 80495a6:	6039      	str	r1, [r7, #0]
 80495a8:	4649      	mov	r1, r9
 80495aa:	414b      	adcs	r3, r1
 80495ac:	607b      	str	r3, [r7, #4]
 80495ae:	f04f 0200 	mov.w	r2, #0
 80495b2:	f04f 0300 	mov.w	r3, #0
 80495b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80495ba:	4659      	mov	r1, fp
 80495bc:	00cb      	lsls	r3, r1, #3
 80495be:	4651      	mov	r1, sl
 80495c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80495c4:	4651      	mov	r1, sl
 80495c6:	00ca      	lsls	r2, r1, #3
 80495c8:	4610      	mov	r0, r2
 80495ca:	4619      	mov	r1, r3
 80495cc:	4603      	mov	r3, r0
 80495ce:	4642      	mov	r2, r8
 80495d0:	189b      	adds	r3, r3, r2
 80495d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80495d4:	464b      	mov	r3, r9
 80495d6:	460a      	mov	r2, r1
 80495d8:	eb42 0303 	adc.w	r3, r2, r3
 80495dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80495de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80495e2:	685b      	ldr	r3, [r3, #4]
 80495e4:	2200      	movs	r2, #0
 80495e6:	663b      	str	r3, [r7, #96]	; 0x60
 80495e8:	667a      	str	r2, [r7, #100]	; 0x64
 80495ea:	f04f 0200 	mov.w	r2, #0
 80495ee:	f04f 0300 	mov.w	r3, #0
 80495f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80495f6:	4649      	mov	r1, r9
 80495f8:	008b      	lsls	r3, r1, #2
 80495fa:	4641      	mov	r1, r8
 80495fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049600:	4641      	mov	r1, r8
 8049602:	008a      	lsls	r2, r1, #2
 8049604:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8049608:	f7f6 fe42 	bl	8040290 <__aeabi_uldivmod>
 804960c:	4602      	mov	r2, r0
 804960e:	460b      	mov	r3, r1
 8049610:	4b0d      	ldr	r3, [pc, #52]	; (8049648 <UART_SetConfig+0x4e4>)
 8049612:	fba3 1302 	umull	r1, r3, r3, r2
 8049616:	095b      	lsrs	r3, r3, #5
 8049618:	2164      	movs	r1, #100	; 0x64
 804961a:	fb01 f303 	mul.w	r3, r1, r3
 804961e:	1ad3      	subs	r3, r2, r3
 8049620:	011b      	lsls	r3, r3, #4
 8049622:	3332      	adds	r3, #50	; 0x32
 8049624:	4a08      	ldr	r2, [pc, #32]	; (8049648 <UART_SetConfig+0x4e4>)
 8049626:	fba2 2303 	umull	r2, r3, r2, r3
 804962a:	095b      	lsrs	r3, r3, #5
 804962c:	f003 020f 	and.w	r2, r3, #15
 8049630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049634:	681b      	ldr	r3, [r3, #0]
 8049636:	4422      	add	r2, r4
 8049638:	609a      	str	r2, [r3, #8]
}
 804963a:	bf00      	nop
 804963c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8049640:	46bd      	mov	sp, r7
 8049642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8049646:	bf00      	nop
 8049648:	51eb851f 	.word	0x51eb851f

0804964c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 804964c:	b480      	push	{r7}
 804964e:	b083      	sub	sp, #12
 8049650:	af00      	add	r7, sp, #0
 8049652:	6078      	str	r0, [r7, #4]
 8049654:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8049656:	683b      	ldr	r3, [r7, #0]
 8049658:	681b      	ldr	r3, [r3, #0]
 804965a:	2b00      	cmp	r3, #0
 804965c:	d123      	bne.n	80496a6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 804965e:	687b      	ldr	r3, [r7, #4]
 8049660:	681b      	ldr	r3, [r3, #0]
 8049662:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8049666:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804966a:	683a      	ldr	r2, [r7, #0]
 804966c:	6851      	ldr	r1, [r2, #4]
 804966e:	683a      	ldr	r2, [r7, #0]
 8049670:	6892      	ldr	r2, [r2, #8]
 8049672:	4311      	orrs	r1, r2
 8049674:	683a      	ldr	r2, [r7, #0]
 8049676:	68d2      	ldr	r2, [r2, #12]
 8049678:	4311      	orrs	r1, r2
 804967a:	683a      	ldr	r2, [r7, #0]
 804967c:	6912      	ldr	r2, [r2, #16]
 804967e:	4311      	orrs	r1, r2
 8049680:	683a      	ldr	r2, [r7, #0]
 8049682:	6952      	ldr	r2, [r2, #20]
 8049684:	4311      	orrs	r1, r2
 8049686:	683a      	ldr	r2, [r7, #0]
 8049688:	6992      	ldr	r2, [r2, #24]
 804968a:	4311      	orrs	r1, r2
 804968c:	683a      	ldr	r2, [r7, #0]
 804968e:	69d2      	ldr	r2, [r2, #28]
 8049690:	4311      	orrs	r1, r2
 8049692:	683a      	ldr	r2, [r7, #0]
 8049694:	6a12      	ldr	r2, [r2, #32]
 8049696:	4311      	orrs	r1, r2
 8049698:	683a      	ldr	r2, [r7, #0]
 804969a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804969c:	430a      	orrs	r2, r1
 804969e:	431a      	orrs	r2, r3
 80496a0:	687b      	ldr	r3, [r7, #4]
 80496a2:	601a      	str	r2, [r3, #0]
 80496a4:	e028      	b.n	80496f8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80496a6:	687b      	ldr	r3, [r7, #4]
 80496a8:	681b      	ldr	r3, [r3, #0]
 80496aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80496ae:	683b      	ldr	r3, [r7, #0]
 80496b0:	69d9      	ldr	r1, [r3, #28]
 80496b2:	683b      	ldr	r3, [r7, #0]
 80496b4:	6a1b      	ldr	r3, [r3, #32]
 80496b6:	4319      	orrs	r1, r3
 80496b8:	683b      	ldr	r3, [r7, #0]
 80496ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80496bc:	430b      	orrs	r3, r1
 80496be:	431a      	orrs	r2, r3
 80496c0:	687b      	ldr	r3, [r7, #4]
 80496c2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80496c4:	687b      	ldr	r3, [r7, #4]
 80496c6:	685b      	ldr	r3, [r3, #4]
 80496c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80496cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80496d0:	683a      	ldr	r2, [r7, #0]
 80496d2:	6851      	ldr	r1, [r2, #4]
 80496d4:	683a      	ldr	r2, [r7, #0]
 80496d6:	6892      	ldr	r2, [r2, #8]
 80496d8:	4311      	orrs	r1, r2
 80496da:	683a      	ldr	r2, [r7, #0]
 80496dc:	68d2      	ldr	r2, [r2, #12]
 80496de:	4311      	orrs	r1, r2
 80496e0:	683a      	ldr	r2, [r7, #0]
 80496e2:	6912      	ldr	r2, [r2, #16]
 80496e4:	4311      	orrs	r1, r2
 80496e6:	683a      	ldr	r2, [r7, #0]
 80496e8:	6952      	ldr	r2, [r2, #20]
 80496ea:	4311      	orrs	r1, r2
 80496ec:	683a      	ldr	r2, [r7, #0]
 80496ee:	6992      	ldr	r2, [r2, #24]
 80496f0:	430a      	orrs	r2, r1
 80496f2:	431a      	orrs	r2, r3
 80496f4:	687b      	ldr	r3, [r7, #4]
 80496f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80496f8:	2300      	movs	r3, #0
}
 80496fa:	4618      	mov	r0, r3
 80496fc:	370c      	adds	r7, #12
 80496fe:	46bd      	mov	sp, r7
 8049700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049704:	4770      	bx	lr

08049706 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8049706:	b480      	push	{r7}
 8049708:	b085      	sub	sp, #20
 804970a:	af00      	add	r7, sp, #0
 804970c:	60f8      	str	r0, [r7, #12]
 804970e:	60b9      	str	r1, [r7, #8]
 8049710:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8049712:	687b      	ldr	r3, [r7, #4]
 8049714:	2b00      	cmp	r3, #0
 8049716:	d128      	bne.n	804976a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8049718:	68fb      	ldr	r3, [r7, #12]
 804971a:	689b      	ldr	r3, [r3, #8]
 804971c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049720:	68bb      	ldr	r3, [r7, #8]
 8049722:	681b      	ldr	r3, [r3, #0]
 8049724:	1e59      	subs	r1, r3, #1
 8049726:	68bb      	ldr	r3, [r7, #8]
 8049728:	685b      	ldr	r3, [r3, #4]
 804972a:	3b01      	subs	r3, #1
 804972c:	011b      	lsls	r3, r3, #4
 804972e:	4319      	orrs	r1, r3
 8049730:	68bb      	ldr	r3, [r7, #8]
 8049732:	689b      	ldr	r3, [r3, #8]
 8049734:	3b01      	subs	r3, #1
 8049736:	021b      	lsls	r3, r3, #8
 8049738:	4319      	orrs	r1, r3
 804973a:	68bb      	ldr	r3, [r7, #8]
 804973c:	68db      	ldr	r3, [r3, #12]
 804973e:	3b01      	subs	r3, #1
 8049740:	031b      	lsls	r3, r3, #12
 8049742:	4319      	orrs	r1, r3
 8049744:	68bb      	ldr	r3, [r7, #8]
 8049746:	691b      	ldr	r3, [r3, #16]
 8049748:	3b01      	subs	r3, #1
 804974a:	041b      	lsls	r3, r3, #16
 804974c:	4319      	orrs	r1, r3
 804974e:	68bb      	ldr	r3, [r7, #8]
 8049750:	695b      	ldr	r3, [r3, #20]
 8049752:	3b01      	subs	r3, #1
 8049754:	051b      	lsls	r3, r3, #20
 8049756:	4319      	orrs	r1, r3
 8049758:	68bb      	ldr	r3, [r7, #8]
 804975a:	699b      	ldr	r3, [r3, #24]
 804975c:	3b01      	subs	r3, #1
 804975e:	061b      	lsls	r3, r3, #24
 8049760:	430b      	orrs	r3, r1
 8049762:	431a      	orrs	r2, r3
 8049764:	68fb      	ldr	r3, [r7, #12]
 8049766:	609a      	str	r2, [r3, #8]
 8049768:	e02f      	b.n	80497ca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 804976a:	68fb      	ldr	r3, [r7, #12]
 804976c:	689b      	ldr	r3, [r3, #8]
 804976e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8049772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8049776:	68ba      	ldr	r2, [r7, #8]
 8049778:	68d2      	ldr	r2, [r2, #12]
 804977a:	3a01      	subs	r2, #1
 804977c:	0311      	lsls	r1, r2, #12
 804977e:	68ba      	ldr	r2, [r7, #8]
 8049780:	6952      	ldr	r2, [r2, #20]
 8049782:	3a01      	subs	r2, #1
 8049784:	0512      	lsls	r2, r2, #20
 8049786:	430a      	orrs	r2, r1
 8049788:	431a      	orrs	r2, r3
 804978a:	68fb      	ldr	r3, [r7, #12]
 804978c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 804978e:	68fb      	ldr	r3, [r7, #12]
 8049790:	68db      	ldr	r3, [r3, #12]
 8049792:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049796:	68bb      	ldr	r3, [r7, #8]
 8049798:	681b      	ldr	r3, [r3, #0]
 804979a:	1e59      	subs	r1, r3, #1
 804979c:	68bb      	ldr	r3, [r7, #8]
 804979e:	685b      	ldr	r3, [r3, #4]
 80497a0:	3b01      	subs	r3, #1
 80497a2:	011b      	lsls	r3, r3, #4
 80497a4:	4319      	orrs	r1, r3
 80497a6:	68bb      	ldr	r3, [r7, #8]
 80497a8:	689b      	ldr	r3, [r3, #8]
 80497aa:	3b01      	subs	r3, #1
 80497ac:	021b      	lsls	r3, r3, #8
 80497ae:	4319      	orrs	r1, r3
 80497b0:	68bb      	ldr	r3, [r7, #8]
 80497b2:	691b      	ldr	r3, [r3, #16]
 80497b4:	3b01      	subs	r3, #1
 80497b6:	041b      	lsls	r3, r3, #16
 80497b8:	4319      	orrs	r1, r3
 80497ba:	68bb      	ldr	r3, [r7, #8]
 80497bc:	699b      	ldr	r3, [r3, #24]
 80497be:	3b01      	subs	r3, #1
 80497c0:	061b      	lsls	r3, r3, #24
 80497c2:	430b      	orrs	r3, r1
 80497c4:	431a      	orrs	r2, r3
 80497c6:	68fb      	ldr	r3, [r7, #12]
 80497c8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80497ca:	2300      	movs	r3, #0
}
 80497cc:	4618      	mov	r0, r3
 80497ce:	3714      	adds	r7, #20
 80497d0:	46bd      	mov	sp, r7
 80497d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80497d6:	4770      	bx	lr

080497d8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80497d8:	b580      	push	{r7, lr}
 80497da:	b086      	sub	sp, #24
 80497dc:	af00      	add	r7, sp, #0
 80497de:	60f8      	str	r0, [r7, #12]
 80497e0:	60b9      	str	r1, [r7, #8]
 80497e2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80497e4:	2300      	movs	r3, #0
 80497e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80497e8:	68fb      	ldr	r3, [r7, #12]
 80497ea:	691b      	ldr	r3, [r3, #16]
 80497ec:	0d9b      	lsrs	r3, r3, #22
 80497ee:	059b      	lsls	r3, r3, #22
 80497f0:	68ba      	ldr	r2, [r7, #8]
 80497f2:	6811      	ldr	r1, [r2, #0]
 80497f4:	68ba      	ldr	r2, [r7, #8]
 80497f6:	6852      	ldr	r2, [r2, #4]
 80497f8:	4311      	orrs	r1, r2
 80497fa:	68ba      	ldr	r2, [r7, #8]
 80497fc:	6892      	ldr	r2, [r2, #8]
 80497fe:	3a01      	subs	r2, #1
 8049800:	0152      	lsls	r2, r2, #5
 8049802:	4311      	orrs	r1, r2
 8049804:	68ba      	ldr	r2, [r7, #8]
 8049806:	68d2      	ldr	r2, [r2, #12]
 8049808:	0252      	lsls	r2, r2, #9
 804980a:	430a      	orrs	r2, r1
 804980c:	431a      	orrs	r2, r3
 804980e:	68fb      	ldr	r3, [r7, #12]
 8049810:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8049812:	f7f9 fdef 	bl	80433f4 <HAL_GetTick>
 8049816:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049818:	e010      	b.n	804983c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804981a:	687b      	ldr	r3, [r7, #4]
 804981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049820:	d00c      	beq.n	804983c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8049822:	687b      	ldr	r3, [r7, #4]
 8049824:	2b00      	cmp	r3, #0
 8049826:	d007      	beq.n	8049838 <FMC_SDRAM_SendCommand+0x60>
 8049828:	f7f9 fde4 	bl	80433f4 <HAL_GetTick>
 804982c:	4602      	mov	r2, r0
 804982e:	697b      	ldr	r3, [r7, #20]
 8049830:	1ad3      	subs	r3, r2, r3
 8049832:	687a      	ldr	r2, [r7, #4]
 8049834:	429a      	cmp	r2, r3
 8049836:	d201      	bcs.n	804983c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8049838:	2303      	movs	r3, #3
 804983a:	e006      	b.n	804984a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 804983c:	68fb      	ldr	r3, [r7, #12]
 804983e:	699b      	ldr	r3, [r3, #24]
 8049840:	f003 0320 	and.w	r3, r3, #32
 8049844:	2b20      	cmp	r3, #32
 8049846:	d0e8      	beq.n	804981a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8049848:	2300      	movs	r3, #0
}
 804984a:	4618      	mov	r0, r3
 804984c:	3718      	adds	r7, #24
 804984e:	46bd      	mov	sp, r7
 8049850:	bd80      	pop	{r7, pc}

08049852 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8049852:	b480      	push	{r7}
 8049854:	b083      	sub	sp, #12
 8049856:	af00      	add	r7, sp, #0
 8049858:	6078      	str	r0, [r7, #4]
 804985a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 804985c:	687b      	ldr	r3, [r7, #4]
 804985e:	695b      	ldr	r3, [r3, #20]
 8049860:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8049864:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8049868:	683a      	ldr	r2, [r7, #0]
 804986a:	0052      	lsls	r2, r2, #1
 804986c:	431a      	orrs	r2, r3
 804986e:	687b      	ldr	r3, [r7, #4]
 8049870:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8049872:	2300      	movs	r3, #0
}
 8049874:	4618      	mov	r0, r3
 8049876:	370c      	adds	r7, #12
 8049878:	46bd      	mov	sp, r7
 804987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804987e:	4770      	bx	lr

08049880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049880:	b084      	sub	sp, #16
 8049882:	b580      	push	{r7, lr}
 8049884:	b084      	sub	sp, #16
 8049886:	af00      	add	r7, sp, #0
 8049888:	6078      	str	r0, [r7, #4]
 804988a:	f107 001c 	add.w	r0, r7, #28
 804988e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8049892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049894:	2b01      	cmp	r3, #1
 8049896:	d122      	bne.n	80498de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8049898:	687b      	ldr	r3, [r7, #4]
 804989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804989c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80498a0:	687b      	ldr	r3, [r7, #4]
 80498a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80498a4:	687b      	ldr	r3, [r7, #4]
 80498a6:	68db      	ldr	r3, [r3, #12]
 80498a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80498ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80498b0:	687a      	ldr	r2, [r7, #4]
 80498b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80498b4:	687b      	ldr	r3, [r7, #4]
 80498b6:	68db      	ldr	r3, [r3, #12]
 80498b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80498bc:	687b      	ldr	r3, [r7, #4]
 80498be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80498c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80498c2:	2b01      	cmp	r3, #1
 80498c4:	d105      	bne.n	80498d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80498c6:	687b      	ldr	r3, [r7, #4]
 80498c8:	68db      	ldr	r3, [r3, #12]
 80498ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80498ce:	687b      	ldr	r3, [r7, #4]
 80498d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80498d2:	6878      	ldr	r0, [r7, #4]
 80498d4:	f000 f9c0 	bl	8049c58 <USB_CoreReset>
 80498d8:	4603      	mov	r3, r0
 80498da:	73fb      	strb	r3, [r7, #15]
 80498dc:	e01a      	b.n	8049914 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80498de:	687b      	ldr	r3, [r7, #4]
 80498e0:	68db      	ldr	r3, [r3, #12]
 80498e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80498e6:	687b      	ldr	r3, [r7, #4]
 80498e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80498ea:	6878      	ldr	r0, [r7, #4]
 80498ec:	f000 f9b4 	bl	8049c58 <USB_CoreReset>
 80498f0:	4603      	mov	r3, r0
 80498f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80498f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80498f6:	2b00      	cmp	r3, #0
 80498f8:	d106      	bne.n	8049908 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80498fa:	687b      	ldr	r3, [r7, #4]
 80498fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80498fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8049902:	687b      	ldr	r3, [r7, #4]
 8049904:	639a      	str	r2, [r3, #56]	; 0x38
 8049906:	e005      	b.n	8049914 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8049908:	687b      	ldr	r3, [r7, #4]
 804990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804990c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8049910:	687b      	ldr	r3, [r7, #4]
 8049912:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8049914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049916:	2b01      	cmp	r3, #1
 8049918:	d10b      	bne.n	8049932 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 804991a:	687b      	ldr	r3, [r7, #4]
 804991c:	689b      	ldr	r3, [r3, #8]
 804991e:	f043 0206 	orr.w	r2, r3, #6
 8049922:	687b      	ldr	r3, [r7, #4]
 8049924:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8049926:	687b      	ldr	r3, [r7, #4]
 8049928:	689b      	ldr	r3, [r3, #8]
 804992a:	f043 0220 	orr.w	r2, r3, #32
 804992e:	687b      	ldr	r3, [r7, #4]
 8049930:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8049932:	7bfb      	ldrb	r3, [r7, #15]
}
 8049934:	4618      	mov	r0, r3
 8049936:	3710      	adds	r7, #16
 8049938:	46bd      	mov	sp, r7
 804993a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 804993e:	b004      	add	sp, #16
 8049940:	4770      	bx	lr

08049942 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049942:	b480      	push	{r7}
 8049944:	b083      	sub	sp, #12
 8049946:	af00      	add	r7, sp, #0
 8049948:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 804994a:	687b      	ldr	r3, [r7, #4]
 804994c:	689b      	ldr	r3, [r3, #8]
 804994e:	f043 0201 	orr.w	r2, r3, #1
 8049952:	687b      	ldr	r3, [r7, #4]
 8049954:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8049956:	2300      	movs	r3, #0
}
 8049958:	4618      	mov	r0, r3
 804995a:	370c      	adds	r7, #12
 804995c:	46bd      	mov	sp, r7
 804995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049962:	4770      	bx	lr

08049964 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049964:	b480      	push	{r7}
 8049966:	b083      	sub	sp, #12
 8049968:	af00      	add	r7, sp, #0
 804996a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 804996c:	687b      	ldr	r3, [r7, #4]
 804996e:	689b      	ldr	r3, [r3, #8]
 8049970:	f023 0201 	bic.w	r2, r3, #1
 8049974:	687b      	ldr	r3, [r7, #4]
 8049976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8049978:	2300      	movs	r3, #0
}
 804997a:	4618      	mov	r0, r3
 804997c:	370c      	adds	r7, #12
 804997e:	46bd      	mov	sp, r7
 8049980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049984:	4770      	bx	lr

08049986 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8049986:	b580      	push	{r7, lr}
 8049988:	b084      	sub	sp, #16
 804998a:	af00      	add	r7, sp, #0
 804998c:	6078      	str	r0, [r7, #4]
 804998e:	460b      	mov	r3, r1
 8049990:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8049992:	2300      	movs	r3, #0
 8049994:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8049996:	687b      	ldr	r3, [r7, #4]
 8049998:	68db      	ldr	r3, [r3, #12]
 804999a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 804999e:	687b      	ldr	r3, [r7, #4]
 80499a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80499a2:	78fb      	ldrb	r3, [r7, #3]
 80499a4:	2b01      	cmp	r3, #1
 80499a6:	d115      	bne.n	80499d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80499a8:	687b      	ldr	r3, [r7, #4]
 80499aa:	68db      	ldr	r3, [r3, #12]
 80499ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80499b0:	687b      	ldr	r3, [r7, #4]
 80499b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80499b4:	2001      	movs	r0, #1
 80499b6:	f7f9 fd29 	bl	804340c <HAL_Delay>
      ms++;
 80499ba:	68fb      	ldr	r3, [r7, #12]
 80499bc:	3301      	adds	r3, #1
 80499be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80499c0:	6878      	ldr	r0, [r7, #4]
 80499c2:	f000 f93a 	bl	8049c3a <USB_GetMode>
 80499c6:	4603      	mov	r3, r0
 80499c8:	2b01      	cmp	r3, #1
 80499ca:	d01e      	beq.n	8049a0a <USB_SetCurrentMode+0x84>
 80499cc:	68fb      	ldr	r3, [r7, #12]
 80499ce:	2b31      	cmp	r3, #49	; 0x31
 80499d0:	d9f0      	bls.n	80499b4 <USB_SetCurrentMode+0x2e>
 80499d2:	e01a      	b.n	8049a0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80499d4:	78fb      	ldrb	r3, [r7, #3]
 80499d6:	2b00      	cmp	r3, #0
 80499d8:	d115      	bne.n	8049a06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80499da:	687b      	ldr	r3, [r7, #4]
 80499dc:	68db      	ldr	r3, [r3, #12]
 80499de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80499e2:	687b      	ldr	r3, [r7, #4]
 80499e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80499e6:	2001      	movs	r0, #1
 80499e8:	f7f9 fd10 	bl	804340c <HAL_Delay>
      ms++;
 80499ec:	68fb      	ldr	r3, [r7, #12]
 80499ee:	3301      	adds	r3, #1
 80499f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80499f2:	6878      	ldr	r0, [r7, #4]
 80499f4:	f000 f921 	bl	8049c3a <USB_GetMode>
 80499f8:	4603      	mov	r3, r0
 80499fa:	2b00      	cmp	r3, #0
 80499fc:	d005      	beq.n	8049a0a <USB_SetCurrentMode+0x84>
 80499fe:	68fb      	ldr	r3, [r7, #12]
 8049a00:	2b31      	cmp	r3, #49	; 0x31
 8049a02:	d9f0      	bls.n	80499e6 <USB_SetCurrentMode+0x60>
 8049a04:	e001      	b.n	8049a0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8049a06:	2301      	movs	r3, #1
 8049a08:	e005      	b.n	8049a16 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8049a0a:	68fb      	ldr	r3, [r7, #12]
 8049a0c:	2b32      	cmp	r3, #50	; 0x32
 8049a0e:	d101      	bne.n	8049a14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8049a10:	2301      	movs	r3, #1
 8049a12:	e000      	b.n	8049a16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8049a14:	2300      	movs	r3, #0
}
 8049a16:	4618      	mov	r0, r3
 8049a18:	3710      	adds	r7, #16
 8049a1a:	46bd      	mov	sp, r7
 8049a1c:	bd80      	pop	{r7, pc}
	...

08049a20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8049a20:	b480      	push	{r7}
 8049a22:	b085      	sub	sp, #20
 8049a24:	af00      	add	r7, sp, #0
 8049a26:	6078      	str	r0, [r7, #4]
 8049a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8049a2a:	2300      	movs	r3, #0
 8049a2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049a2e:	68fb      	ldr	r3, [r7, #12]
 8049a30:	3301      	adds	r3, #1
 8049a32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049a34:	68fb      	ldr	r3, [r7, #12]
 8049a36:	4a13      	ldr	r2, [pc, #76]	; (8049a84 <USB_FlushTxFifo+0x64>)
 8049a38:	4293      	cmp	r3, r2
 8049a3a:	d901      	bls.n	8049a40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8049a3c:	2303      	movs	r3, #3
 8049a3e:	e01b      	b.n	8049a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049a40:	687b      	ldr	r3, [r7, #4]
 8049a42:	691b      	ldr	r3, [r3, #16]
 8049a44:	2b00      	cmp	r3, #0
 8049a46:	daf2      	bge.n	8049a2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8049a48:	2300      	movs	r3, #0
 8049a4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8049a4c:	683b      	ldr	r3, [r7, #0]
 8049a4e:	019b      	lsls	r3, r3, #6
 8049a50:	f043 0220 	orr.w	r2, r3, #32
 8049a54:	687b      	ldr	r3, [r7, #4]
 8049a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049a58:	68fb      	ldr	r3, [r7, #12]
 8049a5a:	3301      	adds	r3, #1
 8049a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049a5e:	68fb      	ldr	r3, [r7, #12]
 8049a60:	4a08      	ldr	r2, [pc, #32]	; (8049a84 <USB_FlushTxFifo+0x64>)
 8049a62:	4293      	cmp	r3, r2
 8049a64:	d901      	bls.n	8049a6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8049a66:	2303      	movs	r3, #3
 8049a68:	e006      	b.n	8049a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8049a6a:	687b      	ldr	r3, [r7, #4]
 8049a6c:	691b      	ldr	r3, [r3, #16]
 8049a6e:	f003 0320 	and.w	r3, r3, #32
 8049a72:	2b20      	cmp	r3, #32
 8049a74:	d0f0      	beq.n	8049a58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8049a76:	2300      	movs	r3, #0
}
 8049a78:	4618      	mov	r0, r3
 8049a7a:	3714      	adds	r7, #20
 8049a7c:	46bd      	mov	sp, r7
 8049a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a82:	4770      	bx	lr
 8049a84:	00030d40 	.word	0x00030d40

08049a88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8049a88:	b480      	push	{r7}
 8049a8a:	b085      	sub	sp, #20
 8049a8c:	af00      	add	r7, sp, #0
 8049a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049a90:	2300      	movs	r3, #0
 8049a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049a94:	68fb      	ldr	r3, [r7, #12]
 8049a96:	3301      	adds	r3, #1
 8049a98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049a9a:	68fb      	ldr	r3, [r7, #12]
 8049a9c:	4a11      	ldr	r2, [pc, #68]	; (8049ae4 <USB_FlushRxFifo+0x5c>)
 8049a9e:	4293      	cmp	r3, r2
 8049aa0:	d901      	bls.n	8049aa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8049aa2:	2303      	movs	r3, #3
 8049aa4:	e018      	b.n	8049ad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049aa6:	687b      	ldr	r3, [r7, #4]
 8049aa8:	691b      	ldr	r3, [r3, #16]
 8049aaa:	2b00      	cmp	r3, #0
 8049aac:	daf2      	bge.n	8049a94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8049aae:	2300      	movs	r3, #0
 8049ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8049ab2:	687b      	ldr	r3, [r7, #4]
 8049ab4:	2210      	movs	r2, #16
 8049ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049ab8:	68fb      	ldr	r3, [r7, #12]
 8049aba:	3301      	adds	r3, #1
 8049abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049abe:	68fb      	ldr	r3, [r7, #12]
 8049ac0:	4a08      	ldr	r2, [pc, #32]	; (8049ae4 <USB_FlushRxFifo+0x5c>)
 8049ac2:	4293      	cmp	r3, r2
 8049ac4:	d901      	bls.n	8049aca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8049ac6:	2303      	movs	r3, #3
 8049ac8:	e006      	b.n	8049ad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8049aca:	687b      	ldr	r3, [r7, #4]
 8049acc:	691b      	ldr	r3, [r3, #16]
 8049ace:	f003 0310 	and.w	r3, r3, #16
 8049ad2:	2b10      	cmp	r3, #16
 8049ad4:	d0f0      	beq.n	8049ab8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8049ad6:	2300      	movs	r3, #0
}
 8049ad8:	4618      	mov	r0, r3
 8049ada:	3714      	adds	r7, #20
 8049adc:	46bd      	mov	sp, r7
 8049ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ae2:	4770      	bx	lr
 8049ae4:	00030d40 	.word	0x00030d40

08049ae8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8049ae8:	b480      	push	{r7}
 8049aea:	b089      	sub	sp, #36	; 0x24
 8049aec:	af00      	add	r7, sp, #0
 8049aee:	60f8      	str	r0, [r7, #12]
 8049af0:	60b9      	str	r1, [r7, #8]
 8049af2:	4611      	mov	r1, r2
 8049af4:	461a      	mov	r2, r3
 8049af6:	460b      	mov	r3, r1
 8049af8:	71fb      	strb	r3, [r7, #7]
 8049afa:	4613      	mov	r3, r2
 8049afc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049afe:	68fb      	ldr	r3, [r7, #12]
 8049b00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8049b02:	68bb      	ldr	r3, [r7, #8]
 8049b04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8049b06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8049b0a:	2b00      	cmp	r3, #0
 8049b0c:	d123      	bne.n	8049b56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8049b0e:	88bb      	ldrh	r3, [r7, #4]
 8049b10:	3303      	adds	r3, #3
 8049b12:	089b      	lsrs	r3, r3, #2
 8049b14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8049b16:	2300      	movs	r3, #0
 8049b18:	61bb      	str	r3, [r7, #24]
 8049b1a:	e018      	b.n	8049b4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8049b1c:	79fb      	ldrb	r3, [r7, #7]
 8049b1e:	031a      	lsls	r2, r3, #12
 8049b20:	697b      	ldr	r3, [r7, #20]
 8049b22:	4413      	add	r3, r2
 8049b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049b28:	461a      	mov	r2, r3
 8049b2a:	69fb      	ldr	r3, [r7, #28]
 8049b2c:	681b      	ldr	r3, [r3, #0]
 8049b2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8049b30:	69fb      	ldr	r3, [r7, #28]
 8049b32:	3301      	adds	r3, #1
 8049b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049b36:	69fb      	ldr	r3, [r7, #28]
 8049b38:	3301      	adds	r3, #1
 8049b3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049b3c:	69fb      	ldr	r3, [r7, #28]
 8049b3e:	3301      	adds	r3, #1
 8049b40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049b42:	69fb      	ldr	r3, [r7, #28]
 8049b44:	3301      	adds	r3, #1
 8049b46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8049b48:	69bb      	ldr	r3, [r7, #24]
 8049b4a:	3301      	adds	r3, #1
 8049b4c:	61bb      	str	r3, [r7, #24]
 8049b4e:	69ba      	ldr	r2, [r7, #24]
 8049b50:	693b      	ldr	r3, [r7, #16]
 8049b52:	429a      	cmp	r2, r3
 8049b54:	d3e2      	bcc.n	8049b1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8049b56:	2300      	movs	r3, #0
}
 8049b58:	4618      	mov	r0, r3
 8049b5a:	3724      	adds	r7, #36	; 0x24
 8049b5c:	46bd      	mov	sp, r7
 8049b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b62:	4770      	bx	lr

08049b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8049b64:	b480      	push	{r7}
 8049b66:	b08b      	sub	sp, #44	; 0x2c
 8049b68:	af00      	add	r7, sp, #0
 8049b6a:	60f8      	str	r0, [r7, #12]
 8049b6c:	60b9      	str	r1, [r7, #8]
 8049b6e:	4613      	mov	r3, r2
 8049b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049b72:	68fb      	ldr	r3, [r7, #12]
 8049b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8049b76:	68bb      	ldr	r3, [r7, #8]
 8049b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8049b7a:	88fb      	ldrh	r3, [r7, #6]
 8049b7c:	089b      	lsrs	r3, r3, #2
 8049b7e:	b29b      	uxth	r3, r3
 8049b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8049b82:	88fb      	ldrh	r3, [r7, #6]
 8049b84:	f003 0303 	and.w	r3, r3, #3
 8049b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8049b8a:	2300      	movs	r3, #0
 8049b8c:	623b      	str	r3, [r7, #32]
 8049b8e:	e014      	b.n	8049bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8049b90:	69bb      	ldr	r3, [r7, #24]
 8049b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049b96:	681a      	ldr	r2, [r3, #0]
 8049b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8049b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049b9e:	3301      	adds	r3, #1
 8049ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049ba4:	3301      	adds	r3, #1
 8049ba6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049baa:	3301      	adds	r3, #1
 8049bac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049bb0:	3301      	adds	r3, #1
 8049bb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8049bb4:	6a3b      	ldr	r3, [r7, #32]
 8049bb6:	3301      	adds	r3, #1
 8049bb8:	623b      	str	r3, [r7, #32]
 8049bba:	6a3a      	ldr	r2, [r7, #32]
 8049bbc:	697b      	ldr	r3, [r7, #20]
 8049bbe:	429a      	cmp	r2, r3
 8049bc0:	d3e6      	bcc.n	8049b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8049bc2:	8bfb      	ldrh	r3, [r7, #30]
 8049bc4:	2b00      	cmp	r3, #0
 8049bc6:	d01e      	beq.n	8049c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8049bc8:	2300      	movs	r3, #0
 8049bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8049bcc:	69bb      	ldr	r3, [r7, #24]
 8049bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049bd2:	461a      	mov	r2, r3
 8049bd4:	f107 0310 	add.w	r3, r7, #16
 8049bd8:	6812      	ldr	r2, [r2, #0]
 8049bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8049bdc:	693a      	ldr	r2, [r7, #16]
 8049bde:	6a3b      	ldr	r3, [r7, #32]
 8049be0:	b2db      	uxtb	r3, r3
 8049be2:	00db      	lsls	r3, r3, #3
 8049be4:	fa22 f303 	lsr.w	r3, r2, r3
 8049be8:	b2da      	uxtb	r2, r3
 8049bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049bec:	701a      	strb	r2, [r3, #0]
      i++;
 8049bee:	6a3b      	ldr	r3, [r7, #32]
 8049bf0:	3301      	adds	r3, #1
 8049bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8049bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049bf6:	3301      	adds	r3, #1
 8049bf8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8049bfa:	8bfb      	ldrh	r3, [r7, #30]
 8049bfc:	3b01      	subs	r3, #1
 8049bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8049c00:	8bfb      	ldrh	r3, [r7, #30]
 8049c02:	2b00      	cmp	r3, #0
 8049c04:	d1ea      	bne.n	8049bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8049c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8049c08:	4618      	mov	r0, r3
 8049c0a:	372c      	adds	r7, #44	; 0x2c
 8049c0c:	46bd      	mov	sp, r7
 8049c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c12:	4770      	bx	lr

08049c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8049c14:	b480      	push	{r7}
 8049c16:	b085      	sub	sp, #20
 8049c18:	af00      	add	r7, sp, #0
 8049c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8049c1c:	687b      	ldr	r3, [r7, #4]
 8049c1e:	695b      	ldr	r3, [r3, #20]
 8049c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8049c22:	687b      	ldr	r3, [r7, #4]
 8049c24:	699b      	ldr	r3, [r3, #24]
 8049c26:	68fa      	ldr	r2, [r7, #12]
 8049c28:	4013      	ands	r3, r2
 8049c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8049c2c:	68fb      	ldr	r3, [r7, #12]
}
 8049c2e:	4618      	mov	r0, r3
 8049c30:	3714      	adds	r7, #20
 8049c32:	46bd      	mov	sp, r7
 8049c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c38:	4770      	bx	lr

08049c3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8049c3a:	b480      	push	{r7}
 8049c3c:	b083      	sub	sp, #12
 8049c3e:	af00      	add	r7, sp, #0
 8049c40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8049c42:	687b      	ldr	r3, [r7, #4]
 8049c44:	695b      	ldr	r3, [r3, #20]
 8049c46:	f003 0301 	and.w	r3, r3, #1
}
 8049c4a:	4618      	mov	r0, r3
 8049c4c:	370c      	adds	r7, #12
 8049c4e:	46bd      	mov	sp, r7
 8049c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c54:	4770      	bx	lr
	...

08049c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8049c58:	b480      	push	{r7}
 8049c5a:	b085      	sub	sp, #20
 8049c5c:	af00      	add	r7, sp, #0
 8049c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049c60:	2300      	movs	r3, #0
 8049c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049c64:	68fb      	ldr	r3, [r7, #12]
 8049c66:	3301      	adds	r3, #1
 8049c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049c6a:	68fb      	ldr	r3, [r7, #12]
 8049c6c:	4a13      	ldr	r2, [pc, #76]	; (8049cbc <USB_CoreReset+0x64>)
 8049c6e:	4293      	cmp	r3, r2
 8049c70:	d901      	bls.n	8049c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8049c72:	2303      	movs	r3, #3
 8049c74:	e01b      	b.n	8049cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049c76:	687b      	ldr	r3, [r7, #4]
 8049c78:	691b      	ldr	r3, [r3, #16]
 8049c7a:	2b00      	cmp	r3, #0
 8049c7c:	daf2      	bge.n	8049c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8049c7e:	2300      	movs	r3, #0
 8049c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8049c82:	687b      	ldr	r3, [r7, #4]
 8049c84:	691b      	ldr	r3, [r3, #16]
 8049c86:	f043 0201 	orr.w	r2, r3, #1
 8049c8a:	687b      	ldr	r3, [r7, #4]
 8049c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049c8e:	68fb      	ldr	r3, [r7, #12]
 8049c90:	3301      	adds	r3, #1
 8049c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049c94:	68fb      	ldr	r3, [r7, #12]
 8049c96:	4a09      	ldr	r2, [pc, #36]	; (8049cbc <USB_CoreReset+0x64>)
 8049c98:	4293      	cmp	r3, r2
 8049c9a:	d901      	bls.n	8049ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8049c9c:	2303      	movs	r3, #3
 8049c9e:	e006      	b.n	8049cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8049ca0:	687b      	ldr	r3, [r7, #4]
 8049ca2:	691b      	ldr	r3, [r3, #16]
 8049ca4:	f003 0301 	and.w	r3, r3, #1
 8049ca8:	2b01      	cmp	r3, #1
 8049caa:	d0f0      	beq.n	8049c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8049cac:	2300      	movs	r3, #0
}
 8049cae:	4618      	mov	r0, r3
 8049cb0:	3714      	adds	r7, #20
 8049cb2:	46bd      	mov	sp, r7
 8049cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049cb8:	4770      	bx	lr
 8049cba:	bf00      	nop
 8049cbc:	00030d40 	.word	0x00030d40

08049cc0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049cc0:	b084      	sub	sp, #16
 8049cc2:	b580      	push	{r7, lr}
 8049cc4:	b086      	sub	sp, #24
 8049cc6:	af00      	add	r7, sp, #0
 8049cc8:	6078      	str	r0, [r7, #4]
 8049cca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8049cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8049cd2:	2300      	movs	r3, #0
 8049cd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049cd6:	687b      	ldr	r3, [r7, #4]
 8049cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8049cda:	68fb      	ldr	r3, [r7, #12]
 8049cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8049ce0:	461a      	mov	r2, r3
 8049ce2:	2300      	movs	r3, #0
 8049ce4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8049ce6:	687b      	ldr	r3, [r7, #4]
 8049ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049cea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8049cee:	687b      	ldr	r3, [r7, #4]
 8049cf0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8049cf2:	687b      	ldr	r3, [r7, #4]
 8049cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049cf6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8049cfa:	687b      	ldr	r3, [r7, #4]
 8049cfc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8049cfe:	687b      	ldr	r3, [r7, #4]
 8049d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049d02:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8049d06:	687b      	ldr	r3, [r7, #4]
 8049d08:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049d0a:	687b      	ldr	r3, [r7, #4]
 8049d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049d12:	2b00      	cmp	r3, #0
 8049d14:	d018      	beq.n	8049d48 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8049d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049d18:	2b01      	cmp	r3, #1
 8049d1a:	d10a      	bne.n	8049d32 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8049d1c:	68fb      	ldr	r3, [r7, #12]
 8049d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d22:	681b      	ldr	r3, [r3, #0]
 8049d24:	68fa      	ldr	r2, [r7, #12]
 8049d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049d2a:	f043 0304 	orr.w	r3, r3, #4
 8049d2e:	6013      	str	r3, [r2, #0]
 8049d30:	e014      	b.n	8049d5c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049d32:	68fb      	ldr	r3, [r7, #12]
 8049d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d38:	681b      	ldr	r3, [r3, #0]
 8049d3a:	68fa      	ldr	r2, [r7, #12]
 8049d3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049d40:	f023 0304 	bic.w	r3, r3, #4
 8049d44:	6013      	str	r3, [r2, #0]
 8049d46:	e009      	b.n	8049d5c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049d48:	68fb      	ldr	r3, [r7, #12]
 8049d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d4e:	681b      	ldr	r3, [r3, #0]
 8049d50:	68fa      	ldr	r2, [r7, #12]
 8049d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049d56:	f023 0304 	bic.w	r3, r3, #4
 8049d5a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8049d5c:	2110      	movs	r1, #16
 8049d5e:	6878      	ldr	r0, [r7, #4]
 8049d60:	f7ff fe5e 	bl	8049a20 <USB_FlushTxFifo>
 8049d64:	4603      	mov	r3, r0
 8049d66:	2b00      	cmp	r3, #0
 8049d68:	d001      	beq.n	8049d6e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8049d6a:	2301      	movs	r3, #1
 8049d6c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8049d6e:	6878      	ldr	r0, [r7, #4]
 8049d70:	f7ff fe8a 	bl	8049a88 <USB_FlushRxFifo>
 8049d74:	4603      	mov	r3, r0
 8049d76:	2b00      	cmp	r3, #0
 8049d78:	d001      	beq.n	8049d7e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8049d7a:	2301      	movs	r3, #1
 8049d7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8049d7e:	2300      	movs	r3, #0
 8049d80:	613b      	str	r3, [r7, #16]
 8049d82:	e015      	b.n	8049db0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8049d84:	693b      	ldr	r3, [r7, #16]
 8049d86:	015a      	lsls	r2, r3, #5
 8049d88:	68fb      	ldr	r3, [r7, #12]
 8049d8a:	4413      	add	r3, r2
 8049d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049d90:	461a      	mov	r2, r3
 8049d92:	f04f 33ff 	mov.w	r3, #4294967295
 8049d96:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8049d98:	693b      	ldr	r3, [r7, #16]
 8049d9a:	015a      	lsls	r2, r3, #5
 8049d9c:	68fb      	ldr	r3, [r7, #12]
 8049d9e:	4413      	add	r3, r2
 8049da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049da4:	461a      	mov	r2, r3
 8049da6:	2300      	movs	r3, #0
 8049da8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8049daa:	693b      	ldr	r3, [r7, #16]
 8049dac:	3301      	adds	r3, #1
 8049dae:	613b      	str	r3, [r7, #16]
 8049db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049db2:	693a      	ldr	r2, [r7, #16]
 8049db4:	429a      	cmp	r2, r3
 8049db6:	d3e5      	bcc.n	8049d84 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8049db8:	687b      	ldr	r3, [r7, #4]
 8049dba:	2200      	movs	r2, #0
 8049dbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8049dbe:	687b      	ldr	r3, [r7, #4]
 8049dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8049dc4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049dc6:	687b      	ldr	r3, [r7, #4]
 8049dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049dce:	2b00      	cmp	r3, #0
 8049dd0:	d00b      	beq.n	8049dea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8049dd2:	687b      	ldr	r3, [r7, #4]
 8049dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8049dd8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8049dda:	687b      	ldr	r3, [r7, #4]
 8049ddc:	4a13      	ldr	r2, [pc, #76]	; (8049e2c <USB_HostInit+0x16c>)
 8049dde:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8049de0:	687b      	ldr	r3, [r7, #4]
 8049de2:	4a13      	ldr	r2, [pc, #76]	; (8049e30 <USB_HostInit+0x170>)
 8049de4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8049de8:	e009      	b.n	8049dfe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8049dea:	687b      	ldr	r3, [r7, #4]
 8049dec:	2280      	movs	r2, #128	; 0x80
 8049dee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8049df0:	687b      	ldr	r3, [r7, #4]
 8049df2:	4a10      	ldr	r2, [pc, #64]	; (8049e34 <USB_HostInit+0x174>)
 8049df4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8049df6:	687b      	ldr	r3, [r7, #4]
 8049df8:	4a0f      	ldr	r2, [pc, #60]	; (8049e38 <USB_HostInit+0x178>)
 8049dfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8049dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049e00:	2b00      	cmp	r3, #0
 8049e02:	d105      	bne.n	8049e10 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8049e04:	687b      	ldr	r3, [r7, #4]
 8049e06:	699b      	ldr	r3, [r3, #24]
 8049e08:	f043 0210 	orr.w	r2, r3, #16
 8049e0c:	687b      	ldr	r3, [r7, #4]
 8049e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8049e10:	687b      	ldr	r3, [r7, #4]
 8049e12:	699a      	ldr	r2, [r3, #24]
 8049e14:	4b09      	ldr	r3, [pc, #36]	; (8049e3c <USB_HostInit+0x17c>)
 8049e16:	4313      	orrs	r3, r2
 8049e18:	687a      	ldr	r2, [r7, #4]
 8049e1a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8049e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8049e1e:	4618      	mov	r0, r3
 8049e20:	3718      	adds	r7, #24
 8049e22:	46bd      	mov	sp, r7
 8049e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8049e28:	b004      	add	sp, #16
 8049e2a:	4770      	bx	lr
 8049e2c:	01000200 	.word	0x01000200
 8049e30:	00e00300 	.word	0x00e00300
 8049e34:	00600080 	.word	0x00600080
 8049e38:	004000e0 	.word	0x004000e0
 8049e3c:	a3200008 	.word	0xa3200008

08049e40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8049e40:	b480      	push	{r7}
 8049e42:	b085      	sub	sp, #20
 8049e44:	af00      	add	r7, sp, #0
 8049e46:	6078      	str	r0, [r7, #4]
 8049e48:	460b      	mov	r3, r1
 8049e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049e4c:	687b      	ldr	r3, [r7, #4]
 8049e4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8049e50:	68fb      	ldr	r3, [r7, #12]
 8049e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e56:	681b      	ldr	r3, [r3, #0]
 8049e58:	68fa      	ldr	r2, [r7, #12]
 8049e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049e5e:	f023 0303 	bic.w	r3, r3, #3
 8049e62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8049e64:	68fb      	ldr	r3, [r7, #12]
 8049e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e6a:	681a      	ldr	r2, [r3, #0]
 8049e6c:	78fb      	ldrb	r3, [r7, #3]
 8049e6e:	f003 0303 	and.w	r3, r3, #3
 8049e72:	68f9      	ldr	r1, [r7, #12]
 8049e74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8049e78:	4313      	orrs	r3, r2
 8049e7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8049e7c:	78fb      	ldrb	r3, [r7, #3]
 8049e7e:	2b01      	cmp	r3, #1
 8049e80:	d107      	bne.n	8049e92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8049e82:	68fb      	ldr	r3, [r7, #12]
 8049e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e88:	461a      	mov	r2, r3
 8049e8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8049e8e:	6053      	str	r3, [r2, #4]
 8049e90:	e009      	b.n	8049ea6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8049e92:	78fb      	ldrb	r3, [r7, #3]
 8049e94:	2b02      	cmp	r3, #2
 8049e96:	d106      	bne.n	8049ea6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8049e98:	68fb      	ldr	r3, [r7, #12]
 8049e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e9e:	461a      	mov	r2, r3
 8049ea0:	f241 7370 	movw	r3, #6000	; 0x1770
 8049ea4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8049ea6:	2300      	movs	r3, #0
}
 8049ea8:	4618      	mov	r0, r3
 8049eaa:	3714      	adds	r7, #20
 8049eac:	46bd      	mov	sp, r7
 8049eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049eb2:	4770      	bx	lr

08049eb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8049eb4:	b580      	push	{r7, lr}
 8049eb6:	b084      	sub	sp, #16
 8049eb8:	af00      	add	r7, sp, #0
 8049eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049ebc:	687b      	ldr	r3, [r7, #4]
 8049ebe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8049ec0:	2300      	movs	r3, #0
 8049ec2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049ec4:	68fb      	ldr	r3, [r7, #12]
 8049ec6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049eca:	681b      	ldr	r3, [r3, #0]
 8049ecc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049ece:	68bb      	ldr	r3, [r7, #8]
 8049ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049ed4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8049ed6:	68bb      	ldr	r3, [r7, #8]
 8049ed8:	68fa      	ldr	r2, [r7, #12]
 8049eda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049ee2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8049ee4:	2064      	movs	r0, #100	; 0x64
 8049ee6:	f7f9 fa91 	bl	804340c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8049eea:	68bb      	ldr	r3, [r7, #8]
 8049eec:	68fa      	ldr	r2, [r7, #12]
 8049eee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049ef6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8049ef8:	200a      	movs	r0, #10
 8049efa:	f7f9 fa87 	bl	804340c <HAL_Delay>

  return HAL_OK;
 8049efe:	2300      	movs	r3, #0
}
 8049f00:	4618      	mov	r0, r3
 8049f02:	3710      	adds	r7, #16
 8049f04:	46bd      	mov	sp, r7
 8049f06:	bd80      	pop	{r7, pc}

08049f08 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8049f08:	b480      	push	{r7}
 8049f0a:	b085      	sub	sp, #20
 8049f0c:	af00      	add	r7, sp, #0
 8049f0e:	6078      	str	r0, [r7, #4]
 8049f10:	460b      	mov	r3, r1
 8049f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049f14:	687b      	ldr	r3, [r7, #4]
 8049f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049f18:	2300      	movs	r3, #0
 8049f1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049f1c:	68fb      	ldr	r3, [r7, #12]
 8049f1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049f22:	681b      	ldr	r3, [r3, #0]
 8049f24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049f26:	68bb      	ldr	r3, [r7, #8]
 8049f28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049f2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8049f2e:	68bb      	ldr	r3, [r7, #8]
 8049f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049f34:	2b00      	cmp	r3, #0
 8049f36:	d109      	bne.n	8049f4c <USB_DriveVbus+0x44>
 8049f38:	78fb      	ldrb	r3, [r7, #3]
 8049f3a:	2b01      	cmp	r3, #1
 8049f3c:	d106      	bne.n	8049f4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8049f3e:	68bb      	ldr	r3, [r7, #8]
 8049f40:	68fa      	ldr	r2, [r7, #12]
 8049f42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049f46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8049f4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8049f4c:	68bb      	ldr	r3, [r7, #8]
 8049f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8049f56:	d109      	bne.n	8049f6c <USB_DriveVbus+0x64>
 8049f58:	78fb      	ldrb	r3, [r7, #3]
 8049f5a:	2b00      	cmp	r3, #0
 8049f5c:	d106      	bne.n	8049f6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8049f5e:	68bb      	ldr	r3, [r7, #8]
 8049f60:	68fa      	ldr	r2, [r7, #12]
 8049f62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8049f6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8049f6c:	2300      	movs	r3, #0
}
 8049f6e:	4618      	mov	r0, r3
 8049f70:	3714      	adds	r7, #20
 8049f72:	46bd      	mov	sp, r7
 8049f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f78:	4770      	bx	lr

08049f7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8049f7a:	b480      	push	{r7}
 8049f7c:	b085      	sub	sp, #20
 8049f7e:	af00      	add	r7, sp, #0
 8049f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049f82:	687b      	ldr	r3, [r7, #4]
 8049f84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049f86:	2300      	movs	r3, #0
 8049f88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049f8a:	68fb      	ldr	r3, [r7, #12]
 8049f8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049f90:	681b      	ldr	r3, [r3, #0]
 8049f92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8049f94:	68bb      	ldr	r3, [r7, #8]
 8049f96:	0c5b      	lsrs	r3, r3, #17
 8049f98:	f003 0303 	and.w	r3, r3, #3
}
 8049f9c:	4618      	mov	r0, r3
 8049f9e:	3714      	adds	r7, #20
 8049fa0:	46bd      	mov	sp, r7
 8049fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049fa6:	4770      	bx	lr

08049fa8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8049fa8:	b480      	push	{r7}
 8049faa:	b085      	sub	sp, #20
 8049fac:	af00      	add	r7, sp, #0
 8049fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049fb0:	687b      	ldr	r3, [r7, #4]
 8049fb2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8049fb4:	68fb      	ldr	r3, [r7, #12]
 8049fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049fba:	689b      	ldr	r3, [r3, #8]
 8049fbc:	b29b      	uxth	r3, r3
}
 8049fbe:	4618      	mov	r0, r3
 8049fc0:	3714      	adds	r7, #20
 8049fc2:	46bd      	mov	sp, r7
 8049fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049fc8:	4770      	bx	lr
	...

08049fcc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8049fcc:	b580      	push	{r7, lr}
 8049fce:	b088      	sub	sp, #32
 8049fd0:	af00      	add	r7, sp, #0
 8049fd2:	6078      	str	r0, [r7, #4]
 8049fd4:	4608      	mov	r0, r1
 8049fd6:	4611      	mov	r1, r2
 8049fd8:	461a      	mov	r2, r3
 8049fda:	4603      	mov	r3, r0
 8049fdc:	70fb      	strb	r3, [r7, #3]
 8049fde:	460b      	mov	r3, r1
 8049fe0:	70bb      	strb	r3, [r7, #2]
 8049fe2:	4613      	mov	r3, r2
 8049fe4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8049fe6:	2300      	movs	r3, #0
 8049fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049fea:	687b      	ldr	r3, [r7, #4]
 8049fec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8049fee:	78fb      	ldrb	r3, [r7, #3]
 8049ff0:	015a      	lsls	r2, r3, #5
 8049ff2:	693b      	ldr	r3, [r7, #16]
 8049ff4:	4413      	add	r3, r2
 8049ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ffa:	461a      	mov	r2, r3
 8049ffc:	f04f 33ff 	mov.w	r3, #4294967295
 804a000:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 804a002:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a006:	2b03      	cmp	r3, #3
 804a008:	d87e      	bhi.n	804a108 <USB_HC_Init+0x13c>
 804a00a:	a201      	add	r2, pc, #4	; (adr r2, 804a010 <USB_HC_Init+0x44>)
 804a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a010:	0804a021 	.word	0x0804a021
 804a014:	0804a0cb 	.word	0x0804a0cb
 804a018:	0804a021 	.word	0x0804a021
 804a01c:	0804a08d 	.word	0x0804a08d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a020:	78fb      	ldrb	r3, [r7, #3]
 804a022:	015a      	lsls	r2, r3, #5
 804a024:	693b      	ldr	r3, [r7, #16]
 804a026:	4413      	add	r3, r2
 804a028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a02c:	461a      	mov	r2, r3
 804a02e:	f240 439d 	movw	r3, #1181	; 0x49d
 804a032:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 804a034:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a038:	2b00      	cmp	r3, #0
 804a03a:	da10      	bge.n	804a05e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804a03c:	78fb      	ldrb	r3, [r7, #3]
 804a03e:	015a      	lsls	r2, r3, #5
 804a040:	693b      	ldr	r3, [r7, #16]
 804a042:	4413      	add	r3, r2
 804a044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a048:	68db      	ldr	r3, [r3, #12]
 804a04a:	78fa      	ldrb	r2, [r7, #3]
 804a04c:	0151      	lsls	r1, r2, #5
 804a04e:	693a      	ldr	r2, [r7, #16]
 804a050:	440a      	add	r2, r1
 804a052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804a05a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 804a05c:	e057      	b.n	804a10e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 804a05e:	687b      	ldr	r3, [r7, #4]
 804a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a066:	2b00      	cmp	r3, #0
 804a068:	d051      	beq.n	804a10e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 804a06a:	78fb      	ldrb	r3, [r7, #3]
 804a06c:	015a      	lsls	r2, r3, #5
 804a06e:	693b      	ldr	r3, [r7, #16]
 804a070:	4413      	add	r3, r2
 804a072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a076:	68db      	ldr	r3, [r3, #12]
 804a078:	78fa      	ldrb	r2, [r7, #3]
 804a07a:	0151      	lsls	r1, r2, #5
 804a07c:	693a      	ldr	r2, [r7, #16]
 804a07e:	440a      	add	r2, r1
 804a080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a084:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 804a088:	60d3      	str	r3, [r2, #12]
      break;
 804a08a:	e040      	b.n	804a10e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a08c:	78fb      	ldrb	r3, [r7, #3]
 804a08e:	015a      	lsls	r2, r3, #5
 804a090:	693b      	ldr	r3, [r7, #16]
 804a092:	4413      	add	r3, r2
 804a094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a098:	461a      	mov	r2, r3
 804a09a:	f240 639d 	movw	r3, #1693	; 0x69d
 804a09e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804a0a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a0a4:	2b00      	cmp	r3, #0
 804a0a6:	da34      	bge.n	804a112 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 804a0a8:	78fb      	ldrb	r3, [r7, #3]
 804a0aa:	015a      	lsls	r2, r3, #5
 804a0ac:	693b      	ldr	r3, [r7, #16]
 804a0ae:	4413      	add	r3, r2
 804a0b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0b4:	68db      	ldr	r3, [r3, #12]
 804a0b6:	78fa      	ldrb	r2, [r7, #3]
 804a0b8:	0151      	lsls	r1, r2, #5
 804a0ba:	693a      	ldr	r2, [r7, #16]
 804a0bc:	440a      	add	r2, r1
 804a0be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a0c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804a0c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 804a0c8:	e023      	b.n	804a112 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804a0ca:	78fb      	ldrb	r3, [r7, #3]
 804a0cc:	015a      	lsls	r2, r3, #5
 804a0ce:	693b      	ldr	r3, [r7, #16]
 804a0d0:	4413      	add	r3, r2
 804a0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0d6:	461a      	mov	r2, r3
 804a0d8:	f240 2325 	movw	r3, #549	; 0x225
 804a0dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804a0de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a0e2:	2b00      	cmp	r3, #0
 804a0e4:	da17      	bge.n	804a116 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 804a0e6:	78fb      	ldrb	r3, [r7, #3]
 804a0e8:	015a      	lsls	r2, r3, #5
 804a0ea:	693b      	ldr	r3, [r7, #16]
 804a0ec:	4413      	add	r3, r2
 804a0ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0f2:	68db      	ldr	r3, [r3, #12]
 804a0f4:	78fa      	ldrb	r2, [r7, #3]
 804a0f6:	0151      	lsls	r1, r2, #5
 804a0f8:	693a      	ldr	r2, [r7, #16]
 804a0fa:	440a      	add	r2, r1
 804a0fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a100:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 804a104:	60d3      	str	r3, [r2, #12]
      }
      break;
 804a106:	e006      	b.n	804a116 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 804a108:	2301      	movs	r3, #1
 804a10a:	77fb      	strb	r3, [r7, #31]
      break;
 804a10c:	e004      	b.n	804a118 <USB_HC_Init+0x14c>
      break;
 804a10e:	bf00      	nop
 804a110:	e002      	b.n	804a118 <USB_HC_Init+0x14c>
      break;
 804a112:	bf00      	nop
 804a114:	e000      	b.n	804a118 <USB_HC_Init+0x14c>
      break;
 804a116:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 804a118:	78fb      	ldrb	r3, [r7, #3]
 804a11a:	015a      	lsls	r2, r3, #5
 804a11c:	693b      	ldr	r3, [r7, #16]
 804a11e:	4413      	add	r3, r2
 804a120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a124:	68db      	ldr	r3, [r3, #12]
 804a126:	78fa      	ldrb	r2, [r7, #3]
 804a128:	0151      	lsls	r1, r2, #5
 804a12a:	693a      	ldr	r2, [r7, #16]
 804a12c:	440a      	add	r2, r1
 804a12e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a132:	f043 0302 	orr.w	r3, r3, #2
 804a136:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 804a138:	693b      	ldr	r3, [r7, #16]
 804a13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a13e:	699a      	ldr	r2, [r3, #24]
 804a140:	78fb      	ldrb	r3, [r7, #3]
 804a142:	f003 030f 	and.w	r3, r3, #15
 804a146:	2101      	movs	r1, #1
 804a148:	fa01 f303 	lsl.w	r3, r1, r3
 804a14c:	6939      	ldr	r1, [r7, #16]
 804a14e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804a152:	4313      	orrs	r3, r2
 804a154:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 804a156:	687b      	ldr	r3, [r7, #4]
 804a158:	699b      	ldr	r3, [r3, #24]
 804a15a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 804a15e:	687b      	ldr	r3, [r7, #4]
 804a160:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 804a162:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a166:	2b00      	cmp	r3, #0
 804a168:	da03      	bge.n	804a172 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 804a16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804a16e:	61bb      	str	r3, [r7, #24]
 804a170:	e001      	b.n	804a176 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 804a172:	2300      	movs	r3, #0
 804a174:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 804a176:	6878      	ldr	r0, [r7, #4]
 804a178:	f7ff feff 	bl	8049f7a <USB_GetHostSpeed>
 804a17c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 804a17e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804a182:	2b02      	cmp	r3, #2
 804a184:	d106      	bne.n	804a194 <USB_HC_Init+0x1c8>
 804a186:	68fb      	ldr	r3, [r7, #12]
 804a188:	2b02      	cmp	r3, #2
 804a18a:	d003      	beq.n	804a194 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 804a18c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 804a190:	617b      	str	r3, [r7, #20]
 804a192:	e001      	b.n	804a198 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 804a194:	2300      	movs	r3, #0
 804a196:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a198:	787b      	ldrb	r3, [r7, #1]
 804a19a:	059b      	lsls	r3, r3, #22
 804a19c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a1a0:	78bb      	ldrb	r3, [r7, #2]
 804a1a2:	02db      	lsls	r3, r3, #11
 804a1a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a1a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a1aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a1ae:	049b      	lsls	r3, r3, #18
 804a1b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a1b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a1b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804a1b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a1bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a1be:	69bb      	ldr	r3, [r7, #24]
 804a1c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a1c2:	78fb      	ldrb	r3, [r7, #3]
 804a1c4:	0159      	lsls	r1, r3, #5
 804a1c6:	693b      	ldr	r3, [r7, #16]
 804a1c8:	440b      	add	r3, r1
 804a1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a1ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a1d0:	697b      	ldr	r3, [r7, #20]
 804a1d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a1d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 804a1d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a1da:	2b03      	cmp	r3, #3
 804a1dc:	d003      	beq.n	804a1e6 <USB_HC_Init+0x21a>
 804a1de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a1e2:	2b01      	cmp	r3, #1
 804a1e4:	d10f      	bne.n	804a206 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 804a1e6:	78fb      	ldrb	r3, [r7, #3]
 804a1e8:	015a      	lsls	r2, r3, #5
 804a1ea:	693b      	ldr	r3, [r7, #16]
 804a1ec:	4413      	add	r3, r2
 804a1ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a1f2:	681b      	ldr	r3, [r3, #0]
 804a1f4:	78fa      	ldrb	r2, [r7, #3]
 804a1f6:	0151      	lsls	r1, r2, #5
 804a1f8:	693a      	ldr	r2, [r7, #16]
 804a1fa:	440a      	add	r2, r1
 804a1fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804a204:	6013      	str	r3, [r2, #0]
  }

  return ret;
 804a206:	7ffb      	ldrb	r3, [r7, #31]
}
 804a208:	4618      	mov	r0, r3
 804a20a:	3720      	adds	r7, #32
 804a20c:	46bd      	mov	sp, r7
 804a20e:	bd80      	pop	{r7, pc}

0804a210 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 804a210:	b580      	push	{r7, lr}
 804a212:	b08c      	sub	sp, #48	; 0x30
 804a214:	af02      	add	r7, sp, #8
 804a216:	60f8      	str	r0, [r7, #12]
 804a218:	60b9      	str	r1, [r7, #8]
 804a21a:	4613      	mov	r3, r2
 804a21c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a21e:	68fb      	ldr	r3, [r7, #12]
 804a220:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 804a222:	68bb      	ldr	r3, [r7, #8]
 804a224:	785b      	ldrb	r3, [r3, #1]
 804a226:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 804a228:	f44f 7380 	mov.w	r3, #256	; 0x100
 804a22c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 804a22e:	68fb      	ldr	r3, [r7, #12]
 804a230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a236:	2b00      	cmp	r3, #0
 804a238:	d02d      	beq.n	804a296 <USB_HC_StartXfer+0x86>
 804a23a:	68bb      	ldr	r3, [r7, #8]
 804a23c:	791b      	ldrb	r3, [r3, #4]
 804a23e:	2b00      	cmp	r3, #0
 804a240:	d129      	bne.n	804a296 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 804a242:	79fb      	ldrb	r3, [r7, #7]
 804a244:	2b01      	cmp	r3, #1
 804a246:	d117      	bne.n	804a278 <USB_HC_StartXfer+0x68>
 804a248:	68bb      	ldr	r3, [r7, #8]
 804a24a:	79db      	ldrb	r3, [r3, #7]
 804a24c:	2b00      	cmp	r3, #0
 804a24e:	d003      	beq.n	804a258 <USB_HC_StartXfer+0x48>
 804a250:	68bb      	ldr	r3, [r7, #8]
 804a252:	79db      	ldrb	r3, [r3, #7]
 804a254:	2b02      	cmp	r3, #2
 804a256:	d10f      	bne.n	804a278 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 804a258:	69fb      	ldr	r3, [r7, #28]
 804a25a:	015a      	lsls	r2, r3, #5
 804a25c:	6a3b      	ldr	r3, [r7, #32]
 804a25e:	4413      	add	r3, r2
 804a260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a264:	68db      	ldr	r3, [r3, #12]
 804a266:	69fa      	ldr	r2, [r7, #28]
 804a268:	0151      	lsls	r1, r2, #5
 804a26a:	6a3a      	ldr	r2, [r7, #32]
 804a26c:	440a      	add	r2, r1
 804a26e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804a276:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 804a278:	79fb      	ldrb	r3, [r7, #7]
 804a27a:	2b00      	cmp	r3, #0
 804a27c:	d10b      	bne.n	804a296 <USB_HC_StartXfer+0x86>
 804a27e:	68bb      	ldr	r3, [r7, #8]
 804a280:	795b      	ldrb	r3, [r3, #5]
 804a282:	2b01      	cmp	r3, #1
 804a284:	d107      	bne.n	804a296 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 804a286:	68bb      	ldr	r3, [r7, #8]
 804a288:	785b      	ldrb	r3, [r3, #1]
 804a28a:	4619      	mov	r1, r3
 804a28c:	68f8      	ldr	r0, [r7, #12]
 804a28e:	f000 fa0f 	bl	804a6b0 <USB_DoPing>
      return HAL_OK;
 804a292:	2300      	movs	r3, #0
 804a294:	e0f8      	b.n	804a488 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 804a296:	68bb      	ldr	r3, [r7, #8]
 804a298:	695b      	ldr	r3, [r3, #20]
 804a29a:	2b00      	cmp	r3, #0
 804a29c:	d018      	beq.n	804a2d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 804a29e:	68bb      	ldr	r3, [r7, #8]
 804a2a0:	695b      	ldr	r3, [r3, #20]
 804a2a2:	68ba      	ldr	r2, [r7, #8]
 804a2a4:	8912      	ldrh	r2, [r2, #8]
 804a2a6:	4413      	add	r3, r2
 804a2a8:	3b01      	subs	r3, #1
 804a2aa:	68ba      	ldr	r2, [r7, #8]
 804a2ac:	8912      	ldrh	r2, [r2, #8]
 804a2ae:	fbb3 f3f2 	udiv	r3, r3, r2
 804a2b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 804a2b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 804a2b6:	8b7b      	ldrh	r3, [r7, #26]
 804a2b8:	429a      	cmp	r2, r3
 804a2ba:	d90b      	bls.n	804a2d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 804a2bc:	8b7b      	ldrh	r3, [r7, #26]
 804a2be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a2c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a2c2:	68ba      	ldr	r2, [r7, #8]
 804a2c4:	8912      	ldrh	r2, [r2, #8]
 804a2c6:	fb03 f202 	mul.w	r2, r3, r2
 804a2ca:	68bb      	ldr	r3, [r7, #8]
 804a2cc:	611a      	str	r2, [r3, #16]
 804a2ce:	e001      	b.n	804a2d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 804a2d0:	2301      	movs	r3, #1
 804a2d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 804a2d4:	68bb      	ldr	r3, [r7, #8]
 804a2d6:	78db      	ldrb	r3, [r3, #3]
 804a2d8:	2b00      	cmp	r3, #0
 804a2da:	d007      	beq.n	804a2ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a2dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a2de:	68ba      	ldr	r2, [r7, #8]
 804a2e0:	8912      	ldrh	r2, [r2, #8]
 804a2e2:	fb03 f202 	mul.w	r2, r3, r2
 804a2e6:	68bb      	ldr	r3, [r7, #8]
 804a2e8:	611a      	str	r2, [r3, #16]
 804a2ea:	e003      	b.n	804a2f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 804a2ec:	68bb      	ldr	r3, [r7, #8]
 804a2ee:	695a      	ldr	r2, [r3, #20]
 804a2f0:	68bb      	ldr	r3, [r7, #8]
 804a2f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a2f4:	68bb      	ldr	r3, [r7, #8]
 804a2f6:	691b      	ldr	r3, [r3, #16]
 804a2f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a2fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a2fe:	04d9      	lsls	r1, r3, #19
 804a300:	4b63      	ldr	r3, [pc, #396]	; (804a490 <USB_HC_StartXfer+0x280>)
 804a302:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a304:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 804a306:	68bb      	ldr	r3, [r7, #8]
 804a308:	7a9b      	ldrb	r3, [r3, #10]
 804a30a:	075b      	lsls	r3, r3, #29
 804a30c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a310:	69f9      	ldr	r1, [r7, #28]
 804a312:	0148      	lsls	r0, r1, #5
 804a314:	6a39      	ldr	r1, [r7, #32]
 804a316:	4401      	add	r1, r0
 804a318:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a31c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a31e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 804a320:	79fb      	ldrb	r3, [r7, #7]
 804a322:	2b00      	cmp	r3, #0
 804a324:	d009      	beq.n	804a33a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 804a326:	68bb      	ldr	r3, [r7, #8]
 804a328:	68d9      	ldr	r1, [r3, #12]
 804a32a:	69fb      	ldr	r3, [r7, #28]
 804a32c:	015a      	lsls	r2, r3, #5
 804a32e:	6a3b      	ldr	r3, [r7, #32]
 804a330:	4413      	add	r3, r2
 804a332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a336:	460a      	mov	r2, r1
 804a338:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 804a33a:	6a3b      	ldr	r3, [r7, #32]
 804a33c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a340:	689b      	ldr	r3, [r3, #8]
 804a342:	f003 0301 	and.w	r3, r3, #1
 804a346:	2b00      	cmp	r3, #0
 804a348:	bf0c      	ite	eq
 804a34a:	2301      	moveq	r3, #1
 804a34c:	2300      	movne	r3, #0
 804a34e:	b2db      	uxtb	r3, r3
 804a350:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 804a352:	69fb      	ldr	r3, [r7, #28]
 804a354:	015a      	lsls	r2, r3, #5
 804a356:	6a3b      	ldr	r3, [r7, #32]
 804a358:	4413      	add	r3, r2
 804a35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a35e:	681b      	ldr	r3, [r3, #0]
 804a360:	69fa      	ldr	r2, [r7, #28]
 804a362:	0151      	lsls	r1, r2, #5
 804a364:	6a3a      	ldr	r2, [r7, #32]
 804a366:	440a      	add	r2, r1
 804a368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a36c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804a370:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 804a372:	69fb      	ldr	r3, [r7, #28]
 804a374:	015a      	lsls	r2, r3, #5
 804a376:	6a3b      	ldr	r3, [r7, #32]
 804a378:	4413      	add	r3, r2
 804a37a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a37e:	681a      	ldr	r2, [r3, #0]
 804a380:	7e7b      	ldrb	r3, [r7, #25]
 804a382:	075b      	lsls	r3, r3, #29
 804a384:	69f9      	ldr	r1, [r7, #28]
 804a386:	0148      	lsls	r0, r1, #5
 804a388:	6a39      	ldr	r1, [r7, #32]
 804a38a:	4401      	add	r1, r0
 804a38c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 804a390:	4313      	orrs	r3, r2
 804a392:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 804a394:	69fb      	ldr	r3, [r7, #28]
 804a396:	015a      	lsls	r2, r3, #5
 804a398:	6a3b      	ldr	r3, [r7, #32]
 804a39a:	4413      	add	r3, r2
 804a39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a3a0:	681b      	ldr	r3, [r3, #0]
 804a3a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804a3a4:	693b      	ldr	r3, [r7, #16]
 804a3a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804a3aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 804a3ac:	68bb      	ldr	r3, [r7, #8]
 804a3ae:	78db      	ldrb	r3, [r3, #3]
 804a3b0:	2b00      	cmp	r3, #0
 804a3b2:	d004      	beq.n	804a3be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 804a3b4:	693b      	ldr	r3, [r7, #16]
 804a3b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804a3ba:	613b      	str	r3, [r7, #16]
 804a3bc:	e003      	b.n	804a3c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 804a3be:	693b      	ldr	r3, [r7, #16]
 804a3c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a3c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804a3c6:	693b      	ldr	r3, [r7, #16]
 804a3c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a3cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 804a3ce:	69fb      	ldr	r3, [r7, #28]
 804a3d0:	015a      	lsls	r2, r3, #5
 804a3d2:	6a3b      	ldr	r3, [r7, #32]
 804a3d4:	4413      	add	r3, r2
 804a3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a3da:	461a      	mov	r2, r3
 804a3dc:	693b      	ldr	r3, [r7, #16]
 804a3de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 804a3e0:	79fb      	ldrb	r3, [r7, #7]
 804a3e2:	2b00      	cmp	r3, #0
 804a3e4:	d001      	beq.n	804a3ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 804a3e6:	2300      	movs	r3, #0
 804a3e8:	e04e      	b.n	804a488 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 804a3ea:	68bb      	ldr	r3, [r7, #8]
 804a3ec:	78db      	ldrb	r3, [r3, #3]
 804a3ee:	2b00      	cmp	r3, #0
 804a3f0:	d149      	bne.n	804a486 <USB_HC_StartXfer+0x276>
 804a3f2:	68bb      	ldr	r3, [r7, #8]
 804a3f4:	695b      	ldr	r3, [r3, #20]
 804a3f6:	2b00      	cmp	r3, #0
 804a3f8:	d045      	beq.n	804a486 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 804a3fa:	68bb      	ldr	r3, [r7, #8]
 804a3fc:	79db      	ldrb	r3, [r3, #7]
 804a3fe:	2b03      	cmp	r3, #3
 804a400:	d830      	bhi.n	804a464 <USB_HC_StartXfer+0x254>
 804a402:	a201      	add	r2, pc, #4	; (adr r2, 804a408 <USB_HC_StartXfer+0x1f8>)
 804a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a408:	0804a419 	.word	0x0804a419
 804a40c:	0804a43d 	.word	0x0804a43d
 804a410:	0804a419 	.word	0x0804a419
 804a414:	0804a43d 	.word	0x0804a43d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804a418:	68bb      	ldr	r3, [r7, #8]
 804a41a:	695b      	ldr	r3, [r3, #20]
 804a41c:	3303      	adds	r3, #3
 804a41e:	089b      	lsrs	r3, r3, #2
 804a420:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 804a422:	8afa      	ldrh	r2, [r7, #22]
 804a424:	68fb      	ldr	r3, [r7, #12]
 804a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a428:	b29b      	uxth	r3, r3
 804a42a:	429a      	cmp	r2, r3
 804a42c:	d91c      	bls.n	804a468 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 804a42e:	68fb      	ldr	r3, [r7, #12]
 804a430:	699b      	ldr	r3, [r3, #24]
 804a432:	f043 0220 	orr.w	r2, r3, #32
 804a436:	68fb      	ldr	r3, [r7, #12]
 804a438:	619a      	str	r2, [r3, #24]
        }
        break;
 804a43a:	e015      	b.n	804a468 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804a43c:	68bb      	ldr	r3, [r7, #8]
 804a43e:	695b      	ldr	r3, [r3, #20]
 804a440:	3303      	adds	r3, #3
 804a442:	089b      	lsrs	r3, r3, #2
 804a444:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 804a446:	8afa      	ldrh	r2, [r7, #22]
 804a448:	6a3b      	ldr	r3, [r7, #32]
 804a44a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a44e:	691b      	ldr	r3, [r3, #16]
 804a450:	b29b      	uxth	r3, r3
 804a452:	429a      	cmp	r2, r3
 804a454:	d90a      	bls.n	804a46c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 804a456:	68fb      	ldr	r3, [r7, #12]
 804a458:	699b      	ldr	r3, [r3, #24]
 804a45a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 804a45e:	68fb      	ldr	r3, [r7, #12]
 804a460:	619a      	str	r2, [r3, #24]
        }
        break;
 804a462:	e003      	b.n	804a46c <USB_HC_StartXfer+0x25c>

      default:
        break;
 804a464:	bf00      	nop
 804a466:	e002      	b.n	804a46e <USB_HC_StartXfer+0x25e>
        break;
 804a468:	bf00      	nop
 804a46a:	e000      	b.n	804a46e <USB_HC_StartXfer+0x25e>
        break;
 804a46c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 804a46e:	68bb      	ldr	r3, [r7, #8]
 804a470:	68d9      	ldr	r1, [r3, #12]
 804a472:	68bb      	ldr	r3, [r7, #8]
 804a474:	785a      	ldrb	r2, [r3, #1]
 804a476:	68bb      	ldr	r3, [r7, #8]
 804a478:	695b      	ldr	r3, [r3, #20]
 804a47a:	b29b      	uxth	r3, r3
 804a47c:	2000      	movs	r0, #0
 804a47e:	9000      	str	r0, [sp, #0]
 804a480:	68f8      	ldr	r0, [r7, #12]
 804a482:	f7ff fb31 	bl	8049ae8 <USB_WritePacket>
  }

  return HAL_OK;
 804a486:	2300      	movs	r3, #0
}
 804a488:	4618      	mov	r0, r3
 804a48a:	3728      	adds	r7, #40	; 0x28
 804a48c:	46bd      	mov	sp, r7
 804a48e:	bd80      	pop	{r7, pc}
 804a490:	1ff80000 	.word	0x1ff80000

0804a494 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 804a494:	b480      	push	{r7}
 804a496:	b085      	sub	sp, #20
 804a498:	af00      	add	r7, sp, #0
 804a49a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a49c:	687b      	ldr	r3, [r7, #4]
 804a49e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 804a4a0:	68fb      	ldr	r3, [r7, #12]
 804a4a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a4a6:	695b      	ldr	r3, [r3, #20]
 804a4a8:	b29b      	uxth	r3, r3
}
 804a4aa:	4618      	mov	r0, r3
 804a4ac:	3714      	adds	r7, #20
 804a4ae:	46bd      	mov	sp, r7
 804a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a4b4:	4770      	bx	lr

0804a4b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 804a4b6:	b480      	push	{r7}
 804a4b8:	b089      	sub	sp, #36	; 0x24
 804a4ba:	af00      	add	r7, sp, #0
 804a4bc:	6078      	str	r0, [r7, #4]
 804a4be:	460b      	mov	r3, r1
 804a4c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a4c2:	687b      	ldr	r3, [r7, #4]
 804a4c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 804a4c6:	78fb      	ldrb	r3, [r7, #3]
 804a4c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 804a4ca:	2300      	movs	r3, #0
 804a4cc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 804a4ce:	69bb      	ldr	r3, [r7, #24]
 804a4d0:	015a      	lsls	r2, r3, #5
 804a4d2:	69fb      	ldr	r3, [r7, #28]
 804a4d4:	4413      	add	r3, r2
 804a4d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4da:	681b      	ldr	r3, [r3, #0]
 804a4dc:	0c9b      	lsrs	r3, r3, #18
 804a4de:	f003 0303 	and.w	r3, r3, #3
 804a4e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 804a4e4:	69bb      	ldr	r3, [r7, #24]
 804a4e6:	015a      	lsls	r2, r3, #5
 804a4e8:	69fb      	ldr	r3, [r7, #28]
 804a4ea:	4413      	add	r3, r2
 804a4ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4f0:	681b      	ldr	r3, [r3, #0]
 804a4f2:	0fdb      	lsrs	r3, r3, #31
 804a4f4:	f003 0301 	and.w	r3, r3, #1
 804a4f8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 804a4fa:	687b      	ldr	r3, [r7, #4]
 804a4fc:	689b      	ldr	r3, [r3, #8]
 804a4fe:	f003 0320 	and.w	r3, r3, #32
 804a502:	2b20      	cmp	r3, #32
 804a504:	d104      	bne.n	804a510 <USB_HC_Halt+0x5a>
 804a506:	693b      	ldr	r3, [r7, #16]
 804a508:	2b00      	cmp	r3, #0
 804a50a:	d101      	bne.n	804a510 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 804a50c:	2300      	movs	r3, #0
 804a50e:	e0c8      	b.n	804a6a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804a510:	697b      	ldr	r3, [r7, #20]
 804a512:	2b00      	cmp	r3, #0
 804a514:	d002      	beq.n	804a51c <USB_HC_Halt+0x66>
 804a516:	697b      	ldr	r3, [r7, #20]
 804a518:	2b02      	cmp	r3, #2
 804a51a:	d163      	bne.n	804a5e4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804a51c:	69bb      	ldr	r3, [r7, #24]
 804a51e:	015a      	lsls	r2, r3, #5
 804a520:	69fb      	ldr	r3, [r7, #28]
 804a522:	4413      	add	r3, r2
 804a524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a528:	681b      	ldr	r3, [r3, #0]
 804a52a:	69ba      	ldr	r2, [r7, #24]
 804a52c:	0151      	lsls	r1, r2, #5
 804a52e:	69fa      	ldr	r2, [r7, #28]
 804a530:	440a      	add	r2, r1
 804a532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a53a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a53c:	687b      	ldr	r3, [r7, #4]
 804a53e:	689b      	ldr	r3, [r3, #8]
 804a540:	f003 0320 	and.w	r3, r3, #32
 804a544:	2b00      	cmp	r3, #0
 804a546:	f040 80ab 	bne.w	804a6a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 804a54a:	687b      	ldr	r3, [r7, #4]
 804a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a54e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a552:	2b00      	cmp	r3, #0
 804a554:	d133      	bne.n	804a5be <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804a556:	69bb      	ldr	r3, [r7, #24]
 804a558:	015a      	lsls	r2, r3, #5
 804a55a:	69fb      	ldr	r3, [r7, #28]
 804a55c:	4413      	add	r3, r2
 804a55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a562:	681b      	ldr	r3, [r3, #0]
 804a564:	69ba      	ldr	r2, [r7, #24]
 804a566:	0151      	lsls	r1, r2, #5
 804a568:	69fa      	ldr	r2, [r7, #28]
 804a56a:	440a      	add	r2, r1
 804a56c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a574:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a576:	69bb      	ldr	r3, [r7, #24]
 804a578:	015a      	lsls	r2, r3, #5
 804a57a:	69fb      	ldr	r3, [r7, #28]
 804a57c:	4413      	add	r3, r2
 804a57e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a582:	681b      	ldr	r3, [r3, #0]
 804a584:	69ba      	ldr	r2, [r7, #24]
 804a586:	0151      	lsls	r1, r2, #5
 804a588:	69fa      	ldr	r2, [r7, #28]
 804a58a:	440a      	add	r2, r1
 804a58c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a594:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 804a596:	68fb      	ldr	r3, [r7, #12]
 804a598:	3301      	adds	r3, #1
 804a59a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 804a59c:	68fb      	ldr	r3, [r7, #12]
 804a59e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a5a2:	d81d      	bhi.n	804a5e0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a5a4:	69bb      	ldr	r3, [r7, #24]
 804a5a6:	015a      	lsls	r2, r3, #5
 804a5a8:	69fb      	ldr	r3, [r7, #28]
 804a5aa:	4413      	add	r3, r2
 804a5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a5b0:	681b      	ldr	r3, [r3, #0]
 804a5b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a5b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a5ba:	d0ec      	beq.n	804a596 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a5bc:	e070      	b.n	804a6a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a5be:	69bb      	ldr	r3, [r7, #24]
 804a5c0:	015a      	lsls	r2, r3, #5
 804a5c2:	69fb      	ldr	r3, [r7, #28]
 804a5c4:	4413      	add	r3, r2
 804a5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a5ca:	681b      	ldr	r3, [r3, #0]
 804a5cc:	69ba      	ldr	r2, [r7, #24]
 804a5ce:	0151      	lsls	r1, r2, #5
 804a5d0:	69fa      	ldr	r2, [r7, #28]
 804a5d2:	440a      	add	r2, r1
 804a5d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a5d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a5dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a5de:	e05f      	b.n	804a6a0 <USB_HC_Halt+0x1ea>
            break;
 804a5e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a5e2:	e05d      	b.n	804a6a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804a5e4:	69bb      	ldr	r3, [r7, #24]
 804a5e6:	015a      	lsls	r2, r3, #5
 804a5e8:	69fb      	ldr	r3, [r7, #28]
 804a5ea:	4413      	add	r3, r2
 804a5ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a5f0:	681b      	ldr	r3, [r3, #0]
 804a5f2:	69ba      	ldr	r2, [r7, #24]
 804a5f4:	0151      	lsls	r1, r2, #5
 804a5f6:	69fa      	ldr	r2, [r7, #28]
 804a5f8:	440a      	add	r2, r1
 804a5fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a5fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a602:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 804a604:	69fb      	ldr	r3, [r7, #28]
 804a606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a60a:	691b      	ldr	r3, [r3, #16]
 804a60c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a610:	2b00      	cmp	r3, #0
 804a612:	d133      	bne.n	804a67c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804a614:	69bb      	ldr	r3, [r7, #24]
 804a616:	015a      	lsls	r2, r3, #5
 804a618:	69fb      	ldr	r3, [r7, #28]
 804a61a:	4413      	add	r3, r2
 804a61c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a620:	681b      	ldr	r3, [r3, #0]
 804a622:	69ba      	ldr	r2, [r7, #24]
 804a624:	0151      	lsls	r1, r2, #5
 804a626:	69fa      	ldr	r2, [r7, #28]
 804a628:	440a      	add	r2, r1
 804a62a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a62e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a632:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a634:	69bb      	ldr	r3, [r7, #24]
 804a636:	015a      	lsls	r2, r3, #5
 804a638:	69fb      	ldr	r3, [r7, #28]
 804a63a:	4413      	add	r3, r2
 804a63c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a640:	681b      	ldr	r3, [r3, #0]
 804a642:	69ba      	ldr	r2, [r7, #24]
 804a644:	0151      	lsls	r1, r2, #5
 804a646:	69fa      	ldr	r2, [r7, #28]
 804a648:	440a      	add	r2, r1
 804a64a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a64e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a652:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 804a654:	68fb      	ldr	r3, [r7, #12]
 804a656:	3301      	adds	r3, #1
 804a658:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 804a65a:	68fb      	ldr	r3, [r7, #12]
 804a65c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a660:	d81d      	bhi.n	804a69e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a662:	69bb      	ldr	r3, [r7, #24]
 804a664:	015a      	lsls	r2, r3, #5
 804a666:	69fb      	ldr	r3, [r7, #28]
 804a668:	4413      	add	r3, r2
 804a66a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a66e:	681b      	ldr	r3, [r3, #0]
 804a670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a678:	d0ec      	beq.n	804a654 <USB_HC_Halt+0x19e>
 804a67a:	e011      	b.n	804a6a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a67c:	69bb      	ldr	r3, [r7, #24]
 804a67e:	015a      	lsls	r2, r3, #5
 804a680:	69fb      	ldr	r3, [r7, #28]
 804a682:	4413      	add	r3, r2
 804a684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a688:	681b      	ldr	r3, [r3, #0]
 804a68a:	69ba      	ldr	r2, [r7, #24]
 804a68c:	0151      	lsls	r1, r2, #5
 804a68e:	69fa      	ldr	r2, [r7, #28]
 804a690:	440a      	add	r2, r1
 804a692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a69a:	6013      	str	r3, [r2, #0]
 804a69c:	e000      	b.n	804a6a0 <USB_HC_Halt+0x1ea>
          break;
 804a69e:	bf00      	nop
    }
  }

  return HAL_OK;
 804a6a0:	2300      	movs	r3, #0
}
 804a6a2:	4618      	mov	r0, r3
 804a6a4:	3724      	adds	r7, #36	; 0x24
 804a6a6:	46bd      	mov	sp, r7
 804a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a6ac:	4770      	bx	lr
	...

0804a6b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 804a6b0:	b480      	push	{r7}
 804a6b2:	b087      	sub	sp, #28
 804a6b4:	af00      	add	r7, sp, #0
 804a6b6:	6078      	str	r0, [r7, #4]
 804a6b8:	460b      	mov	r3, r1
 804a6ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a6bc:	687b      	ldr	r3, [r7, #4]
 804a6be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 804a6c0:	78fb      	ldrb	r3, [r7, #3]
 804a6c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 804a6c4:	2301      	movs	r3, #1
 804a6c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a6c8:	68fb      	ldr	r3, [r7, #12]
 804a6ca:	04da      	lsls	r2, r3, #19
 804a6cc:	4b15      	ldr	r3, [pc, #84]	; (804a724 <USB_DoPing+0x74>)
 804a6ce:	4013      	ands	r3, r2
 804a6d0:	693a      	ldr	r2, [r7, #16]
 804a6d2:	0151      	lsls	r1, r2, #5
 804a6d4:	697a      	ldr	r2, [r7, #20]
 804a6d6:	440a      	add	r2, r1
 804a6d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a6dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a6e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 804a6e2:	693b      	ldr	r3, [r7, #16]
 804a6e4:	015a      	lsls	r2, r3, #5
 804a6e6:	697b      	ldr	r3, [r7, #20]
 804a6e8:	4413      	add	r3, r2
 804a6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a6ee:	681b      	ldr	r3, [r3, #0]
 804a6f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804a6f2:	68bb      	ldr	r3, [r7, #8]
 804a6f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804a6f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804a6fa:	68bb      	ldr	r3, [r7, #8]
 804a6fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a700:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 804a702:	693b      	ldr	r3, [r7, #16]
 804a704:	015a      	lsls	r2, r3, #5
 804a706:	697b      	ldr	r3, [r7, #20]
 804a708:	4413      	add	r3, r2
 804a70a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a70e:	461a      	mov	r2, r3
 804a710:	68bb      	ldr	r3, [r7, #8]
 804a712:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804a714:	2300      	movs	r3, #0
}
 804a716:	4618      	mov	r0, r3
 804a718:	371c      	adds	r7, #28
 804a71a:	46bd      	mov	sp, r7
 804a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a720:	4770      	bx	lr
 804a722:	bf00      	nop
 804a724:	1ff80000 	.word	0x1ff80000

0804a728 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804a728:	b580      	push	{r7, lr}
 804a72a:	b088      	sub	sp, #32
 804a72c:	af00      	add	r7, sp, #0
 804a72e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 804a730:	2300      	movs	r3, #0
 804a732:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a734:	687b      	ldr	r3, [r7, #4]
 804a736:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804a738:	2300      	movs	r3, #0
 804a73a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804a73c:	6878      	ldr	r0, [r7, #4]
 804a73e:	f7ff f911 	bl	8049964 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804a742:	2110      	movs	r1, #16
 804a744:	6878      	ldr	r0, [r7, #4]
 804a746:	f7ff f96b 	bl	8049a20 <USB_FlushTxFifo>
 804a74a:	4603      	mov	r3, r0
 804a74c:	2b00      	cmp	r3, #0
 804a74e:	d001      	beq.n	804a754 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 804a750:	2301      	movs	r3, #1
 804a752:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804a754:	6878      	ldr	r0, [r7, #4]
 804a756:	f7ff f997 	bl	8049a88 <USB_FlushRxFifo>
 804a75a:	4603      	mov	r3, r0
 804a75c:	2b00      	cmp	r3, #0
 804a75e:	d001      	beq.n	804a764 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 804a760:	2301      	movs	r3, #1
 804a762:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 804a764:	2300      	movs	r3, #0
 804a766:	61bb      	str	r3, [r7, #24]
 804a768:	e01f      	b.n	804a7aa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804a76a:	69bb      	ldr	r3, [r7, #24]
 804a76c:	015a      	lsls	r2, r3, #5
 804a76e:	697b      	ldr	r3, [r7, #20]
 804a770:	4413      	add	r3, r2
 804a772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a776:	681b      	ldr	r3, [r3, #0]
 804a778:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804a77a:	693b      	ldr	r3, [r7, #16]
 804a77c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a780:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 804a782:	693b      	ldr	r3, [r7, #16]
 804a784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a788:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a78a:	693b      	ldr	r3, [r7, #16]
 804a78c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a790:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a792:	69bb      	ldr	r3, [r7, #24]
 804a794:	015a      	lsls	r2, r3, #5
 804a796:	697b      	ldr	r3, [r7, #20]
 804a798:	4413      	add	r3, r2
 804a79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a79e:	461a      	mov	r2, r3
 804a7a0:	693b      	ldr	r3, [r7, #16]
 804a7a2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804a7a4:	69bb      	ldr	r3, [r7, #24]
 804a7a6:	3301      	adds	r3, #1
 804a7a8:	61bb      	str	r3, [r7, #24]
 804a7aa:	69bb      	ldr	r3, [r7, #24]
 804a7ac:	2b0f      	cmp	r3, #15
 804a7ae:	d9dc      	bls.n	804a76a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804a7b0:	2300      	movs	r3, #0
 804a7b2:	61bb      	str	r3, [r7, #24]
 804a7b4:	e034      	b.n	804a820 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804a7b6:	69bb      	ldr	r3, [r7, #24]
 804a7b8:	015a      	lsls	r2, r3, #5
 804a7ba:	697b      	ldr	r3, [r7, #20]
 804a7bc:	4413      	add	r3, r2
 804a7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a7c2:	681b      	ldr	r3, [r3, #0]
 804a7c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804a7c6:	693b      	ldr	r3, [r7, #16]
 804a7c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a7cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804a7ce:	693b      	ldr	r3, [r7, #16]
 804a7d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a7d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a7d6:	693b      	ldr	r3, [r7, #16]
 804a7d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a7dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a7de:	69bb      	ldr	r3, [r7, #24]
 804a7e0:	015a      	lsls	r2, r3, #5
 804a7e2:	697b      	ldr	r3, [r7, #20]
 804a7e4:	4413      	add	r3, r2
 804a7e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a7ea:	461a      	mov	r2, r3
 804a7ec:	693b      	ldr	r3, [r7, #16]
 804a7ee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804a7f0:	68fb      	ldr	r3, [r7, #12]
 804a7f2:	3301      	adds	r3, #1
 804a7f4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804a7f6:	68fb      	ldr	r3, [r7, #12]
 804a7f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a7fc:	d80c      	bhi.n	804a818 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a7fe:	69bb      	ldr	r3, [r7, #24]
 804a800:	015a      	lsls	r2, r3, #5
 804a802:	697b      	ldr	r3, [r7, #20]
 804a804:	4413      	add	r3, r2
 804a806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a80a:	681b      	ldr	r3, [r3, #0]
 804a80c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a814:	d0ec      	beq.n	804a7f0 <USB_StopHost+0xc8>
 804a816:	e000      	b.n	804a81a <USB_StopHost+0xf2>
        break;
 804a818:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804a81a:	69bb      	ldr	r3, [r7, #24]
 804a81c:	3301      	adds	r3, #1
 804a81e:	61bb      	str	r3, [r7, #24]
 804a820:	69bb      	ldr	r3, [r7, #24]
 804a822:	2b0f      	cmp	r3, #15
 804a824:	d9c7      	bls.n	804a7b6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804a826:	697b      	ldr	r3, [r7, #20]
 804a828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a82c:	461a      	mov	r2, r3
 804a82e:	f04f 33ff 	mov.w	r3, #4294967295
 804a832:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804a834:	687b      	ldr	r3, [r7, #4]
 804a836:	f04f 32ff 	mov.w	r2, #4294967295
 804a83a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804a83c:	6878      	ldr	r0, [r7, #4]
 804a83e:	f7ff f880 	bl	8049942 <USB_EnableGlobalInt>

  return ret;
 804a842:	7ffb      	ldrb	r3, [r7, #31]
}
 804a844:	4618      	mov	r0, r3
 804a846:	3720      	adds	r7, #32
 804a848:	46bd      	mov	sp, r7
 804a84a:	bd80      	pop	{r7, pc}

0804a84c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804a84c:	b590      	push	{r4, r7, lr}
 804a84e:	b089      	sub	sp, #36	; 0x24
 804a850:	af04      	add	r7, sp, #16
 804a852:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 804a854:	2301      	movs	r3, #1
 804a856:	2202      	movs	r2, #2
 804a858:	2102      	movs	r1, #2
 804a85a:	6878      	ldr	r0, [r7, #4]
 804a85c:	f000 fc66 	bl	804b12c <USBH_FindInterface>
 804a860:	4603      	mov	r3, r0
 804a862:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a864:	7bfb      	ldrb	r3, [r7, #15]
 804a866:	2bff      	cmp	r3, #255	; 0xff
 804a868:	d002      	beq.n	804a870 <USBH_CDC_InterfaceInit+0x24>
 804a86a:	7bfb      	ldrb	r3, [r7, #15]
 804a86c:	2b01      	cmp	r3, #1
 804a86e:	d901      	bls.n	804a874 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a870:	2302      	movs	r3, #2
 804a872:	e13d      	b.n	804aaf0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 804a874:	7bfb      	ldrb	r3, [r7, #15]
 804a876:	4619      	mov	r1, r3
 804a878:	6878      	ldr	r0, [r7, #4]
 804a87a:	f000 fc3b 	bl	804b0f4 <USBH_SelectInterface>
 804a87e:	4603      	mov	r3, r0
 804a880:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804a882:	7bbb      	ldrb	r3, [r7, #14]
 804a884:	2b00      	cmp	r3, #0
 804a886:	d001      	beq.n	804a88c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 804a888:	2302      	movs	r3, #2
 804a88a:	e131      	b.n	804aaf0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 804a88c:	687b      	ldr	r3, [r7, #4]
 804a88e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804a892:	2050      	movs	r0, #80	; 0x50
 804a894:	f002 fb00 	bl	804ce98 <malloc>
 804a898:	4603      	mov	r3, r0
 804a89a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a89c:	687b      	ldr	r3, [r7, #4]
 804a89e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a8a2:	69db      	ldr	r3, [r3, #28]
 804a8a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 804a8a6:	68bb      	ldr	r3, [r7, #8]
 804a8a8:	2b00      	cmp	r3, #0
 804a8aa:	d101      	bne.n	804a8b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 804a8ac:	2302      	movs	r3, #2
 804a8ae:	e11f      	b.n	804aaf0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804a8b0:	2250      	movs	r2, #80	; 0x50
 804a8b2:	2100      	movs	r1, #0
 804a8b4:	68b8      	ldr	r0, [r7, #8]
 804a8b6:	f002 faff 	bl	804ceb8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a8ba:	7bfb      	ldrb	r3, [r7, #15]
 804a8bc:	687a      	ldr	r2, [r7, #4]
 804a8be:	211a      	movs	r1, #26
 804a8c0:	fb01 f303 	mul.w	r3, r1, r3
 804a8c4:	4413      	add	r3, r2
 804a8c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a8ca:	781b      	ldrb	r3, [r3, #0]
 804a8cc:	b25b      	sxtb	r3, r3
 804a8ce:	2b00      	cmp	r3, #0
 804a8d0:	da15      	bge.n	804a8fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a8d2:	7bfb      	ldrb	r3, [r7, #15]
 804a8d4:	687a      	ldr	r2, [r7, #4]
 804a8d6:	211a      	movs	r1, #26
 804a8d8:	fb01 f303 	mul.w	r3, r1, r3
 804a8dc:	4413      	add	r3, r2
 804a8de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a8e2:	781a      	ldrb	r2, [r3, #0]
 804a8e4:	68bb      	ldr	r3, [r7, #8]
 804a8e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a8e8:	7bfb      	ldrb	r3, [r7, #15]
 804a8ea:	687a      	ldr	r2, [r7, #4]
 804a8ec:	211a      	movs	r1, #26
 804a8ee:	fb01 f303 	mul.w	r3, r1, r3
 804a8f2:	4413      	add	r3, r2
 804a8f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a8f8:	881a      	ldrh	r2, [r3, #0]
 804a8fa:	68bb      	ldr	r3, [r7, #8]
 804a8fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804a8fe:	68bb      	ldr	r3, [r7, #8]
 804a900:	785b      	ldrb	r3, [r3, #1]
 804a902:	4619      	mov	r1, r3
 804a904:	6878      	ldr	r0, [r7, #4]
 804a906:	f001 ff2c 	bl	804c762 <USBH_AllocPipe>
 804a90a:	4603      	mov	r3, r0
 804a90c:	461a      	mov	r2, r3
 804a90e:	68bb      	ldr	r3, [r7, #8]
 804a910:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804a912:	68bb      	ldr	r3, [r7, #8]
 804a914:	7819      	ldrb	r1, [r3, #0]
 804a916:	68bb      	ldr	r3, [r7, #8]
 804a918:	7858      	ldrb	r0, [r3, #1]
 804a91a:	687b      	ldr	r3, [r7, #4]
 804a91c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a920:	687b      	ldr	r3, [r7, #4]
 804a922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a926:	68ba      	ldr	r2, [r7, #8]
 804a928:	8952      	ldrh	r2, [r2, #10]
 804a92a:	9202      	str	r2, [sp, #8]
 804a92c:	2203      	movs	r2, #3
 804a92e:	9201      	str	r2, [sp, #4]
 804a930:	9300      	str	r3, [sp, #0]
 804a932:	4623      	mov	r3, r4
 804a934:	4602      	mov	r2, r0
 804a936:	6878      	ldr	r0, [r7, #4]
 804a938:	f001 fee4 	bl	804c704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 804a93c:	68bb      	ldr	r3, [r7, #8]
 804a93e:	781b      	ldrb	r3, [r3, #0]
 804a940:	2200      	movs	r2, #0
 804a942:	4619      	mov	r1, r3
 804a944:	6878      	ldr	r0, [r7, #4]
 804a946:	f002 f9f9 	bl	804cd3c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 804a94a:	2300      	movs	r3, #0
 804a94c:	2200      	movs	r2, #0
 804a94e:	210a      	movs	r1, #10
 804a950:	6878      	ldr	r0, [r7, #4]
 804a952:	f000 fbeb 	bl	804b12c <USBH_FindInterface>
 804a956:	4603      	mov	r3, r0
 804a958:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a95a:	7bfb      	ldrb	r3, [r7, #15]
 804a95c:	2bff      	cmp	r3, #255	; 0xff
 804a95e:	d002      	beq.n	804a966 <USBH_CDC_InterfaceInit+0x11a>
 804a960:	7bfb      	ldrb	r3, [r7, #15]
 804a962:	2b01      	cmp	r3, #1
 804a964:	d901      	bls.n	804a96a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a966:	2302      	movs	r3, #2
 804a968:	e0c2      	b.n	804aaf0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a96a:	7bfb      	ldrb	r3, [r7, #15]
 804a96c:	687a      	ldr	r2, [r7, #4]
 804a96e:	211a      	movs	r1, #26
 804a970:	fb01 f303 	mul.w	r3, r1, r3
 804a974:	4413      	add	r3, r2
 804a976:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a97a:	781b      	ldrb	r3, [r3, #0]
 804a97c:	b25b      	sxtb	r3, r3
 804a97e:	2b00      	cmp	r3, #0
 804a980:	da16      	bge.n	804a9b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a982:	7bfb      	ldrb	r3, [r7, #15]
 804a984:	687a      	ldr	r2, [r7, #4]
 804a986:	211a      	movs	r1, #26
 804a988:	fb01 f303 	mul.w	r3, r1, r3
 804a98c:	4413      	add	r3, r2
 804a98e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a992:	781a      	ldrb	r2, [r3, #0]
 804a994:	68bb      	ldr	r3, [r7, #8]
 804a996:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a998:	7bfb      	ldrb	r3, [r7, #15]
 804a99a:	687a      	ldr	r2, [r7, #4]
 804a99c:	211a      	movs	r1, #26
 804a99e:	fb01 f303 	mul.w	r3, r1, r3
 804a9a2:	4413      	add	r3, r2
 804a9a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a9a8:	881a      	ldrh	r2, [r3, #0]
 804a9aa:	68bb      	ldr	r3, [r7, #8]
 804a9ac:	835a      	strh	r2, [r3, #26]
 804a9ae:	e015      	b.n	804a9dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a9b0:	7bfb      	ldrb	r3, [r7, #15]
 804a9b2:	687a      	ldr	r2, [r7, #4]
 804a9b4:	211a      	movs	r1, #26
 804a9b6:	fb01 f303 	mul.w	r3, r1, r3
 804a9ba:	4413      	add	r3, r2
 804a9bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a9c0:	781a      	ldrb	r2, [r3, #0]
 804a9c2:	68bb      	ldr	r3, [r7, #8]
 804a9c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a9c6:	7bfb      	ldrb	r3, [r7, #15]
 804a9c8:	687a      	ldr	r2, [r7, #4]
 804a9ca:	211a      	movs	r1, #26
 804a9cc:	fb01 f303 	mul.w	r3, r1, r3
 804a9d0:	4413      	add	r3, r2
 804a9d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a9d6:	881a      	ldrh	r2, [r3, #0]
 804a9d8:	68bb      	ldr	r3, [r7, #8]
 804a9da:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804a9dc:	7bfb      	ldrb	r3, [r7, #15]
 804a9de:	687a      	ldr	r2, [r7, #4]
 804a9e0:	211a      	movs	r1, #26
 804a9e2:	fb01 f303 	mul.w	r3, r1, r3
 804a9e6:	4413      	add	r3, r2
 804a9e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a9ec:	781b      	ldrb	r3, [r3, #0]
 804a9ee:	b25b      	sxtb	r3, r3
 804a9f0:	2b00      	cmp	r3, #0
 804a9f2:	da16      	bge.n	804aa22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a9f4:	7bfb      	ldrb	r3, [r7, #15]
 804a9f6:	687a      	ldr	r2, [r7, #4]
 804a9f8:	211a      	movs	r1, #26
 804a9fa:	fb01 f303 	mul.w	r3, r1, r3
 804a9fe:	4413      	add	r3, r2
 804aa00:	f203 3356 	addw	r3, r3, #854	; 0x356
 804aa04:	781a      	ldrb	r2, [r3, #0]
 804aa06:	68bb      	ldr	r3, [r7, #8]
 804aa08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804aa0a:	7bfb      	ldrb	r3, [r7, #15]
 804aa0c:	687a      	ldr	r2, [r7, #4]
 804aa0e:	211a      	movs	r1, #26
 804aa10:	fb01 f303 	mul.w	r3, r1, r3
 804aa14:	4413      	add	r3, r2
 804aa16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804aa1a:	881a      	ldrh	r2, [r3, #0]
 804aa1c:	68bb      	ldr	r3, [r7, #8]
 804aa1e:	835a      	strh	r2, [r3, #26]
 804aa20:	e015      	b.n	804aa4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804aa22:	7bfb      	ldrb	r3, [r7, #15]
 804aa24:	687a      	ldr	r2, [r7, #4]
 804aa26:	211a      	movs	r1, #26
 804aa28:	fb01 f303 	mul.w	r3, r1, r3
 804aa2c:	4413      	add	r3, r2
 804aa2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 804aa32:	781a      	ldrb	r2, [r3, #0]
 804aa34:	68bb      	ldr	r3, [r7, #8]
 804aa36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804aa38:	7bfb      	ldrb	r3, [r7, #15]
 804aa3a:	687a      	ldr	r2, [r7, #4]
 804aa3c:	211a      	movs	r1, #26
 804aa3e:	fb01 f303 	mul.w	r3, r1, r3
 804aa42:	4413      	add	r3, r2
 804aa44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804aa48:	881a      	ldrh	r2, [r3, #0]
 804aa4a:	68bb      	ldr	r3, [r7, #8]
 804aa4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 804aa4e:	68bb      	ldr	r3, [r7, #8]
 804aa50:	7b9b      	ldrb	r3, [r3, #14]
 804aa52:	4619      	mov	r1, r3
 804aa54:	6878      	ldr	r0, [r7, #4]
 804aa56:	f001 fe84 	bl	804c762 <USBH_AllocPipe>
 804aa5a:	4603      	mov	r3, r0
 804aa5c:	461a      	mov	r2, r3
 804aa5e:	68bb      	ldr	r3, [r7, #8]
 804aa60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 804aa62:	68bb      	ldr	r3, [r7, #8]
 804aa64:	7bdb      	ldrb	r3, [r3, #15]
 804aa66:	4619      	mov	r1, r3
 804aa68:	6878      	ldr	r0, [r7, #4]
 804aa6a:	f001 fe7a 	bl	804c762 <USBH_AllocPipe>
 804aa6e:	4603      	mov	r3, r0
 804aa70:	461a      	mov	r2, r3
 804aa72:	68bb      	ldr	r3, [r7, #8]
 804aa74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 804aa76:	68bb      	ldr	r3, [r7, #8]
 804aa78:	7b59      	ldrb	r1, [r3, #13]
 804aa7a:	68bb      	ldr	r3, [r7, #8]
 804aa7c:	7b98      	ldrb	r0, [r3, #14]
 804aa7e:	687b      	ldr	r3, [r7, #4]
 804aa80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804aa84:	687b      	ldr	r3, [r7, #4]
 804aa86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804aa8a:	68ba      	ldr	r2, [r7, #8]
 804aa8c:	8b12      	ldrh	r2, [r2, #24]
 804aa8e:	9202      	str	r2, [sp, #8]
 804aa90:	2202      	movs	r2, #2
 804aa92:	9201      	str	r2, [sp, #4]
 804aa94:	9300      	str	r3, [sp, #0]
 804aa96:	4623      	mov	r3, r4
 804aa98:	4602      	mov	r2, r0
 804aa9a:	6878      	ldr	r0, [r7, #4]
 804aa9c:	f001 fe32 	bl	804c704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804aaa0:	68bb      	ldr	r3, [r7, #8]
 804aaa2:	7b19      	ldrb	r1, [r3, #12]
 804aaa4:	68bb      	ldr	r3, [r7, #8]
 804aaa6:	7bd8      	ldrb	r0, [r3, #15]
 804aaa8:	687b      	ldr	r3, [r7, #4]
 804aaaa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804aaae:	687b      	ldr	r3, [r7, #4]
 804aab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804aab4:	68ba      	ldr	r2, [r7, #8]
 804aab6:	8b52      	ldrh	r2, [r2, #26]
 804aab8:	9202      	str	r2, [sp, #8]
 804aaba:	2202      	movs	r2, #2
 804aabc:	9201      	str	r2, [sp, #4]
 804aabe:	9300      	str	r3, [sp, #0]
 804aac0:	4623      	mov	r3, r4
 804aac2:	4602      	mov	r2, r0
 804aac4:	6878      	ldr	r0, [r7, #4]
 804aac6:	f001 fe1d 	bl	804c704 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 804aaca:	68bb      	ldr	r3, [r7, #8]
 804aacc:	2200      	movs	r2, #0
 804aace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804aad2:	68bb      	ldr	r3, [r7, #8]
 804aad4:	7b5b      	ldrb	r3, [r3, #13]
 804aad6:	2200      	movs	r2, #0
 804aad8:	4619      	mov	r1, r3
 804aada:	6878      	ldr	r0, [r7, #4]
 804aadc:	f002 f92e 	bl	804cd3c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804aae0:	68bb      	ldr	r3, [r7, #8]
 804aae2:	7b1b      	ldrb	r3, [r3, #12]
 804aae4:	2200      	movs	r2, #0
 804aae6:	4619      	mov	r1, r3
 804aae8:	6878      	ldr	r0, [r7, #4]
 804aaea:	f002 f927 	bl	804cd3c <USBH_LL_SetToggle>

  return USBH_OK;
 804aaee:	2300      	movs	r3, #0
}
 804aaf0:	4618      	mov	r0, r3
 804aaf2:	3714      	adds	r7, #20
 804aaf4:	46bd      	mov	sp, r7
 804aaf6:	bd90      	pop	{r4, r7, pc}

0804aaf8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804aaf8:	b580      	push	{r7, lr}
 804aafa:	b084      	sub	sp, #16
 804aafc:	af00      	add	r7, sp, #0
 804aafe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804ab00:	687b      	ldr	r3, [r7, #4]
 804ab02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ab06:	69db      	ldr	r3, [r3, #28]
 804ab08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 804ab0a:	68fb      	ldr	r3, [r7, #12]
 804ab0c:	781b      	ldrb	r3, [r3, #0]
 804ab0e:	2b00      	cmp	r3, #0
 804ab10:	d00e      	beq.n	804ab30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804ab12:	68fb      	ldr	r3, [r7, #12]
 804ab14:	781b      	ldrb	r3, [r3, #0]
 804ab16:	4619      	mov	r1, r3
 804ab18:	6878      	ldr	r0, [r7, #4]
 804ab1a:	f001 fe12 	bl	804c742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804ab1e:	68fb      	ldr	r3, [r7, #12]
 804ab20:	781b      	ldrb	r3, [r3, #0]
 804ab22:	4619      	mov	r1, r3
 804ab24:	6878      	ldr	r0, [r7, #4]
 804ab26:	f001 fe3d 	bl	804c7a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 804ab2a:	68fb      	ldr	r3, [r7, #12]
 804ab2c:	2200      	movs	r2, #0
 804ab2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 804ab30:	68fb      	ldr	r3, [r7, #12]
 804ab32:	7b1b      	ldrb	r3, [r3, #12]
 804ab34:	2b00      	cmp	r3, #0
 804ab36:	d00e      	beq.n	804ab56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 804ab38:	68fb      	ldr	r3, [r7, #12]
 804ab3a:	7b1b      	ldrb	r3, [r3, #12]
 804ab3c:	4619      	mov	r1, r3
 804ab3e:	6878      	ldr	r0, [r7, #4]
 804ab40:	f001 fdff 	bl	804c742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 804ab44:	68fb      	ldr	r3, [r7, #12]
 804ab46:	7b1b      	ldrb	r3, [r3, #12]
 804ab48:	4619      	mov	r1, r3
 804ab4a:	6878      	ldr	r0, [r7, #4]
 804ab4c:	f001 fe2a 	bl	804c7a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 804ab50:	68fb      	ldr	r3, [r7, #12]
 804ab52:	2200      	movs	r2, #0
 804ab54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 804ab56:	68fb      	ldr	r3, [r7, #12]
 804ab58:	7b5b      	ldrb	r3, [r3, #13]
 804ab5a:	2b00      	cmp	r3, #0
 804ab5c:	d00e      	beq.n	804ab7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 804ab5e:	68fb      	ldr	r3, [r7, #12]
 804ab60:	7b5b      	ldrb	r3, [r3, #13]
 804ab62:	4619      	mov	r1, r3
 804ab64:	6878      	ldr	r0, [r7, #4]
 804ab66:	f001 fdec 	bl	804c742 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 804ab6a:	68fb      	ldr	r3, [r7, #12]
 804ab6c:	7b5b      	ldrb	r3, [r3, #13]
 804ab6e:	4619      	mov	r1, r3
 804ab70:	6878      	ldr	r0, [r7, #4]
 804ab72:	f001 fe17 	bl	804c7a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 804ab76:	68fb      	ldr	r3, [r7, #12]
 804ab78:	2200      	movs	r2, #0
 804ab7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804ab7c:	687b      	ldr	r3, [r7, #4]
 804ab7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ab82:	69db      	ldr	r3, [r3, #28]
 804ab84:	2b00      	cmp	r3, #0
 804ab86:	d00b      	beq.n	804aba0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 804ab88:	687b      	ldr	r3, [r7, #4]
 804ab8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ab8e:	69db      	ldr	r3, [r3, #28]
 804ab90:	4618      	mov	r0, r3
 804ab92:	f002 f989 	bl	804cea8 <free>
    phost->pActiveClass->pData = 0U;
 804ab96:	687b      	ldr	r3, [r7, #4]
 804ab98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ab9c:	2200      	movs	r2, #0
 804ab9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804aba0:	2300      	movs	r3, #0
}
 804aba2:	4618      	mov	r0, r3
 804aba4:	3710      	adds	r7, #16
 804aba6:	46bd      	mov	sp, r7
 804aba8:	bd80      	pop	{r7, pc}

0804abaa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804abaa:	b580      	push	{r7, lr}
 804abac:	b084      	sub	sp, #16
 804abae:	af00      	add	r7, sp, #0
 804abb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804abb2:	687b      	ldr	r3, [r7, #4]
 804abb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804abb8:	69db      	ldr	r3, [r3, #28]
 804abba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804abbc:	68fb      	ldr	r3, [r7, #12]
 804abbe:	3340      	adds	r3, #64	; 0x40
 804abc0:	4619      	mov	r1, r3
 804abc2:	6878      	ldr	r0, [r7, #4]
 804abc4:	f000 f8b1 	bl	804ad2a <GetLineCoding>
 804abc8:	4603      	mov	r3, r0
 804abca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804abcc:	7afb      	ldrb	r3, [r7, #11]
 804abce:	2b00      	cmp	r3, #0
 804abd0:	d105      	bne.n	804abde <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804abd2:	687b      	ldr	r3, [r7, #4]
 804abd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804abd8:	2102      	movs	r1, #2
 804abda:	6878      	ldr	r0, [r7, #4]
 804abdc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804abde:	7afb      	ldrb	r3, [r7, #11]
}
 804abe0:	4618      	mov	r0, r3
 804abe2:	3710      	adds	r7, #16
 804abe4:	46bd      	mov	sp, r7
 804abe6:	bd80      	pop	{r7, pc}

0804abe8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804abe8:	b580      	push	{r7, lr}
 804abea:	b084      	sub	sp, #16
 804abec:	af00      	add	r7, sp, #0
 804abee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804abf0:	2301      	movs	r3, #1
 804abf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804abf4:	2300      	movs	r3, #0
 804abf6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804abf8:	687b      	ldr	r3, [r7, #4]
 804abfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804abfe:	69db      	ldr	r3, [r3, #28]
 804ac00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804ac02:	68bb      	ldr	r3, [r7, #8]
 804ac04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804ac08:	2b04      	cmp	r3, #4
 804ac0a:	d877      	bhi.n	804acfc <USBH_CDC_Process+0x114>
 804ac0c:	a201      	add	r2, pc, #4	; (adr r2, 804ac14 <USBH_CDC_Process+0x2c>)
 804ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ac12:	bf00      	nop
 804ac14:	0804ac29 	.word	0x0804ac29
 804ac18:	0804ac2f 	.word	0x0804ac2f
 804ac1c:	0804ac5f 	.word	0x0804ac5f
 804ac20:	0804acd3 	.word	0x0804acd3
 804ac24:	0804ace1 	.word	0x0804ace1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804ac28:	2300      	movs	r3, #0
 804ac2a:	73fb      	strb	r3, [r7, #15]
      break;
 804ac2c:	e06d      	b.n	804ad0a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804ac2e:	68bb      	ldr	r3, [r7, #8]
 804ac30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ac32:	4619      	mov	r1, r3
 804ac34:	6878      	ldr	r0, [r7, #4]
 804ac36:	f000 f897 	bl	804ad68 <SetLineCoding>
 804ac3a:	4603      	mov	r3, r0
 804ac3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804ac3e:	7bbb      	ldrb	r3, [r7, #14]
 804ac40:	2b00      	cmp	r3, #0
 804ac42:	d104      	bne.n	804ac4e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804ac44:	68bb      	ldr	r3, [r7, #8]
 804ac46:	2202      	movs	r2, #2
 804ac48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804ac4c:	e058      	b.n	804ad00 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804ac4e:	7bbb      	ldrb	r3, [r7, #14]
 804ac50:	2b01      	cmp	r3, #1
 804ac52:	d055      	beq.n	804ad00 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804ac54:	68bb      	ldr	r3, [r7, #8]
 804ac56:	2204      	movs	r2, #4
 804ac58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804ac5c:	e050      	b.n	804ad00 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804ac5e:	68bb      	ldr	r3, [r7, #8]
 804ac60:	3340      	adds	r3, #64	; 0x40
 804ac62:	4619      	mov	r1, r3
 804ac64:	6878      	ldr	r0, [r7, #4]
 804ac66:	f000 f860 	bl	804ad2a <GetLineCoding>
 804ac6a:	4603      	mov	r3, r0
 804ac6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804ac6e:	7bbb      	ldrb	r3, [r7, #14]
 804ac70:	2b00      	cmp	r3, #0
 804ac72:	d126      	bne.n	804acc2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804ac74:	68bb      	ldr	r3, [r7, #8]
 804ac76:	2200      	movs	r2, #0
 804ac78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804ac7c:	68bb      	ldr	r3, [r7, #8]
 804ac7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804ac82:	68bb      	ldr	r3, [r7, #8]
 804ac84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ac86:	791b      	ldrb	r3, [r3, #4]
 804ac88:	429a      	cmp	r2, r3
 804ac8a:	d13b      	bne.n	804ad04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804ac8c:	68bb      	ldr	r3, [r7, #8]
 804ac8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804ac92:	68bb      	ldr	r3, [r7, #8]
 804ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ac96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804ac98:	429a      	cmp	r2, r3
 804ac9a:	d133      	bne.n	804ad04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804ac9c:	68bb      	ldr	r3, [r7, #8]
 804ac9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804aca2:	68bb      	ldr	r3, [r7, #8]
 804aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804aca6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804aca8:	429a      	cmp	r2, r3
 804acaa:	d12b      	bne.n	804ad04 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804acac:	68bb      	ldr	r3, [r7, #8]
 804acae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804acb0:	68bb      	ldr	r3, [r7, #8]
 804acb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804acb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804acb6:	429a      	cmp	r2, r3
 804acb8:	d124      	bne.n	804ad04 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804acba:	6878      	ldr	r0, [r7, #4]
 804acbc:	f000 f958 	bl	804af70 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804acc0:	e020      	b.n	804ad04 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804acc2:	7bbb      	ldrb	r3, [r7, #14]
 804acc4:	2b01      	cmp	r3, #1
 804acc6:	d01d      	beq.n	804ad04 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804acc8:	68bb      	ldr	r3, [r7, #8]
 804acca:	2204      	movs	r2, #4
 804accc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804acd0:	e018      	b.n	804ad04 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804acd2:	6878      	ldr	r0, [r7, #4]
 804acd4:	f000 f867 	bl	804ada6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804acd8:	6878      	ldr	r0, [r7, #4]
 804acda:	f000 f8da 	bl	804ae92 <CDC_ProcessReception>
      break;
 804acde:	e014      	b.n	804ad0a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804ace0:	2100      	movs	r1, #0
 804ace2:	6878      	ldr	r0, [r7, #4]
 804ace4:	f000 ffef 	bl	804bcc6 <USBH_ClrFeature>
 804ace8:	4603      	mov	r3, r0
 804acea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804acec:	7bbb      	ldrb	r3, [r7, #14]
 804acee:	2b00      	cmp	r3, #0
 804acf0:	d10a      	bne.n	804ad08 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804acf2:	68bb      	ldr	r3, [r7, #8]
 804acf4:	2200      	movs	r2, #0
 804acf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804acfa:	e005      	b.n	804ad08 <USBH_CDC_Process+0x120>

    default:
      break;
 804acfc:	bf00      	nop
 804acfe:	e004      	b.n	804ad0a <USBH_CDC_Process+0x122>
      break;
 804ad00:	bf00      	nop
 804ad02:	e002      	b.n	804ad0a <USBH_CDC_Process+0x122>
      break;
 804ad04:	bf00      	nop
 804ad06:	e000      	b.n	804ad0a <USBH_CDC_Process+0x122>
      break;
 804ad08:	bf00      	nop

  }

  return status;
 804ad0a:	7bfb      	ldrb	r3, [r7, #15]
}
 804ad0c:	4618      	mov	r0, r3
 804ad0e:	3710      	adds	r7, #16
 804ad10:	46bd      	mov	sp, r7
 804ad12:	bd80      	pop	{r7, pc}

0804ad14 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804ad14:	b480      	push	{r7}
 804ad16:	b083      	sub	sp, #12
 804ad18:	af00      	add	r7, sp, #0
 804ad1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804ad1c:	2300      	movs	r3, #0
}
 804ad1e:	4618      	mov	r0, r3
 804ad20:	370c      	adds	r7, #12
 804ad22:	46bd      	mov	sp, r7
 804ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ad28:	4770      	bx	lr

0804ad2a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804ad2a:	b580      	push	{r7, lr}
 804ad2c:	b082      	sub	sp, #8
 804ad2e:	af00      	add	r7, sp, #0
 804ad30:	6078      	str	r0, [r7, #4]
 804ad32:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804ad34:	687b      	ldr	r3, [r7, #4]
 804ad36:	22a1      	movs	r2, #161	; 0xa1
 804ad38:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804ad3a:	687b      	ldr	r3, [r7, #4]
 804ad3c:	2221      	movs	r2, #33	; 0x21
 804ad3e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804ad40:	687b      	ldr	r3, [r7, #4]
 804ad42:	2200      	movs	r2, #0
 804ad44:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804ad46:	687b      	ldr	r3, [r7, #4]
 804ad48:	2200      	movs	r2, #0
 804ad4a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804ad4c:	687b      	ldr	r3, [r7, #4]
 804ad4e:	2207      	movs	r2, #7
 804ad50:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804ad52:	683b      	ldr	r3, [r7, #0]
 804ad54:	2207      	movs	r2, #7
 804ad56:	4619      	mov	r1, r3
 804ad58:	6878      	ldr	r0, [r7, #4]
 804ad5a:	f001 fa81 	bl	804c260 <USBH_CtlReq>
 804ad5e:	4603      	mov	r3, r0
}
 804ad60:	4618      	mov	r0, r3
 804ad62:	3708      	adds	r7, #8
 804ad64:	46bd      	mov	sp, r7
 804ad66:	bd80      	pop	{r7, pc}

0804ad68 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804ad68:	b580      	push	{r7, lr}
 804ad6a:	b082      	sub	sp, #8
 804ad6c:	af00      	add	r7, sp, #0
 804ad6e:	6078      	str	r0, [r7, #4]
 804ad70:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804ad72:	687b      	ldr	r3, [r7, #4]
 804ad74:	2221      	movs	r2, #33	; 0x21
 804ad76:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804ad78:	687b      	ldr	r3, [r7, #4]
 804ad7a:	2220      	movs	r2, #32
 804ad7c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804ad7e:	687b      	ldr	r3, [r7, #4]
 804ad80:	2200      	movs	r2, #0
 804ad82:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804ad84:	687b      	ldr	r3, [r7, #4]
 804ad86:	2200      	movs	r2, #0
 804ad88:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804ad8a:	687b      	ldr	r3, [r7, #4]
 804ad8c:	2207      	movs	r2, #7
 804ad8e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804ad90:	683b      	ldr	r3, [r7, #0]
 804ad92:	2207      	movs	r2, #7
 804ad94:	4619      	mov	r1, r3
 804ad96:	6878      	ldr	r0, [r7, #4]
 804ad98:	f001 fa62 	bl	804c260 <USBH_CtlReq>
 804ad9c:	4603      	mov	r3, r0
}
 804ad9e:	4618      	mov	r0, r3
 804ada0:	3708      	adds	r7, #8
 804ada2:	46bd      	mov	sp, r7
 804ada4:	bd80      	pop	{r7, pc}

0804ada6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804ada6:	b580      	push	{r7, lr}
 804ada8:	b086      	sub	sp, #24
 804adaa:	af02      	add	r7, sp, #8
 804adac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804adae:	687b      	ldr	r3, [r7, #4]
 804adb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804adb4:	69db      	ldr	r3, [r3, #28]
 804adb6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804adb8:	2300      	movs	r3, #0
 804adba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804adbc:	68fb      	ldr	r3, [r7, #12]
 804adbe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804adc2:	2b01      	cmp	r3, #1
 804adc4:	d002      	beq.n	804adcc <CDC_ProcessTransmission+0x26>
 804adc6:	2b02      	cmp	r3, #2
 804adc8:	d023      	beq.n	804ae12 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804adca:	e05e      	b.n	804ae8a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804adcc:	68fb      	ldr	r3, [r7, #12]
 804adce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804add0:	68fa      	ldr	r2, [r7, #12]
 804add2:	8b12      	ldrh	r2, [r2, #24]
 804add4:	4293      	cmp	r3, r2
 804add6:	d90b      	bls.n	804adf0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804add8:	68fb      	ldr	r3, [r7, #12]
 804adda:	69d9      	ldr	r1, [r3, #28]
 804addc:	68fb      	ldr	r3, [r7, #12]
 804adde:	8b1a      	ldrh	r2, [r3, #24]
 804ade0:	68fb      	ldr	r3, [r7, #12]
 804ade2:	7b5b      	ldrb	r3, [r3, #13]
 804ade4:	2001      	movs	r0, #1
 804ade6:	9000      	str	r0, [sp, #0]
 804ade8:	6878      	ldr	r0, [r7, #4]
 804adea:	f001 fc48 	bl	804c67e <USBH_BulkSendData>
 804adee:	e00b      	b.n	804ae08 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804adf0:	68fb      	ldr	r3, [r7, #12]
 804adf2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804adf4:	68fb      	ldr	r3, [r7, #12]
 804adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804adf8:	b29a      	uxth	r2, r3
 804adfa:	68fb      	ldr	r3, [r7, #12]
 804adfc:	7b5b      	ldrb	r3, [r3, #13]
 804adfe:	2001      	movs	r0, #1
 804ae00:	9000      	str	r0, [sp, #0]
 804ae02:	6878      	ldr	r0, [r7, #4]
 804ae04:	f001 fc3b 	bl	804c67e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804ae08:	68fb      	ldr	r3, [r7, #12]
 804ae0a:	2202      	movs	r2, #2
 804ae0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804ae10:	e03b      	b.n	804ae8a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804ae12:	68fb      	ldr	r3, [r7, #12]
 804ae14:	7b5b      	ldrb	r3, [r3, #13]
 804ae16:	4619      	mov	r1, r3
 804ae18:	6878      	ldr	r0, [r7, #4]
 804ae1a:	f001 ff65 	bl	804cce8 <USBH_LL_GetURBState>
 804ae1e:	4603      	mov	r3, r0
 804ae20:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804ae22:	7afb      	ldrb	r3, [r7, #11]
 804ae24:	2b01      	cmp	r3, #1
 804ae26:	d128      	bne.n	804ae7a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804ae28:	68fb      	ldr	r3, [r7, #12]
 804ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ae2c:	68fa      	ldr	r2, [r7, #12]
 804ae2e:	8b12      	ldrh	r2, [r2, #24]
 804ae30:	4293      	cmp	r3, r2
 804ae32:	d90e      	bls.n	804ae52 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804ae34:	68fb      	ldr	r3, [r7, #12]
 804ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ae38:	68fa      	ldr	r2, [r7, #12]
 804ae3a:	8b12      	ldrh	r2, [r2, #24]
 804ae3c:	1a9a      	subs	r2, r3, r2
 804ae3e:	68fb      	ldr	r3, [r7, #12]
 804ae40:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804ae42:	68fb      	ldr	r3, [r7, #12]
 804ae44:	69db      	ldr	r3, [r3, #28]
 804ae46:	68fa      	ldr	r2, [r7, #12]
 804ae48:	8b12      	ldrh	r2, [r2, #24]
 804ae4a:	441a      	add	r2, r3
 804ae4c:	68fb      	ldr	r3, [r7, #12]
 804ae4e:	61da      	str	r2, [r3, #28]
 804ae50:	e002      	b.n	804ae58 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804ae52:	68fb      	ldr	r3, [r7, #12]
 804ae54:	2200      	movs	r2, #0
 804ae56:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804ae58:	68fb      	ldr	r3, [r7, #12]
 804ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ae5c:	2b00      	cmp	r3, #0
 804ae5e:	d004      	beq.n	804ae6a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804ae60:	68fb      	ldr	r3, [r7, #12]
 804ae62:	2201      	movs	r2, #1
 804ae64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804ae68:	e00e      	b.n	804ae88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804ae6a:	68fb      	ldr	r3, [r7, #12]
 804ae6c:	2200      	movs	r2, #0
 804ae6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804ae72:	6878      	ldr	r0, [r7, #4]
 804ae74:	f000 f868 	bl	804af48 <USBH_CDC_TransmitCallback>
      break;
 804ae78:	e006      	b.n	804ae88 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804ae7a:	7afb      	ldrb	r3, [r7, #11]
 804ae7c:	2b02      	cmp	r3, #2
 804ae7e:	d103      	bne.n	804ae88 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804ae80:	68fb      	ldr	r3, [r7, #12]
 804ae82:	2201      	movs	r2, #1
 804ae84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804ae88:	bf00      	nop
  }
}
 804ae8a:	bf00      	nop
 804ae8c:	3710      	adds	r7, #16
 804ae8e:	46bd      	mov	sp, r7
 804ae90:	bd80      	pop	{r7, pc}

0804ae92 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804ae92:	b580      	push	{r7, lr}
 804ae94:	b086      	sub	sp, #24
 804ae96:	af00      	add	r7, sp, #0
 804ae98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804ae9a:	687b      	ldr	r3, [r7, #4]
 804ae9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aea0:	69db      	ldr	r3, [r3, #28]
 804aea2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804aea4:	2300      	movs	r3, #0
 804aea6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804aea8:	697b      	ldr	r3, [r7, #20]
 804aeaa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804aeae:	2b03      	cmp	r3, #3
 804aeb0:	d002      	beq.n	804aeb8 <CDC_ProcessReception+0x26>
 804aeb2:	2b04      	cmp	r3, #4
 804aeb4:	d00e      	beq.n	804aed4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804aeb6:	e043      	b.n	804af40 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804aeb8:	697b      	ldr	r3, [r7, #20]
 804aeba:	6a19      	ldr	r1, [r3, #32]
 804aebc:	697b      	ldr	r3, [r7, #20]
 804aebe:	8b5a      	ldrh	r2, [r3, #26]
 804aec0:	697b      	ldr	r3, [r7, #20]
 804aec2:	7b1b      	ldrb	r3, [r3, #12]
 804aec4:	6878      	ldr	r0, [r7, #4]
 804aec6:	f001 fbff 	bl	804c6c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804aeca:	697b      	ldr	r3, [r7, #20]
 804aecc:	2204      	movs	r2, #4
 804aece:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804aed2:	e035      	b.n	804af40 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804aed4:	697b      	ldr	r3, [r7, #20]
 804aed6:	7b1b      	ldrb	r3, [r3, #12]
 804aed8:	4619      	mov	r1, r3
 804aeda:	6878      	ldr	r0, [r7, #4]
 804aedc:	f001 ff04 	bl	804cce8 <USBH_LL_GetURBState>
 804aee0:	4603      	mov	r3, r0
 804aee2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804aee4:	7cfb      	ldrb	r3, [r7, #19]
 804aee6:	2b01      	cmp	r3, #1
 804aee8:	d129      	bne.n	804af3e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804aeea:	697b      	ldr	r3, [r7, #20]
 804aeec:	7b1b      	ldrb	r3, [r3, #12]
 804aeee:	4619      	mov	r1, r3
 804aef0:	6878      	ldr	r0, [r7, #4]
 804aef2:	f001 fe67 	bl	804cbc4 <USBH_LL_GetLastXferSize>
 804aef6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804aef8:	697b      	ldr	r3, [r7, #20]
 804aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804aefc:	68fa      	ldr	r2, [r7, #12]
 804aefe:	429a      	cmp	r2, r3
 804af00:	d016      	beq.n	804af30 <CDC_ProcessReception+0x9e>
 804af02:	697b      	ldr	r3, [r7, #20]
 804af04:	8b5b      	ldrh	r3, [r3, #26]
 804af06:	461a      	mov	r2, r3
 804af08:	68fb      	ldr	r3, [r7, #12]
 804af0a:	4293      	cmp	r3, r2
 804af0c:	d910      	bls.n	804af30 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804af0e:	697b      	ldr	r3, [r7, #20]
 804af10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804af12:	68fb      	ldr	r3, [r7, #12]
 804af14:	1ad2      	subs	r2, r2, r3
 804af16:	697b      	ldr	r3, [r7, #20]
 804af18:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804af1a:	697b      	ldr	r3, [r7, #20]
 804af1c:	6a1a      	ldr	r2, [r3, #32]
 804af1e:	68fb      	ldr	r3, [r7, #12]
 804af20:	441a      	add	r2, r3
 804af22:	697b      	ldr	r3, [r7, #20]
 804af24:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804af26:	697b      	ldr	r3, [r7, #20]
 804af28:	2203      	movs	r2, #3
 804af2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804af2e:	e006      	b.n	804af3e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804af30:	697b      	ldr	r3, [r7, #20]
 804af32:	2200      	movs	r2, #0
 804af34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804af38:	6878      	ldr	r0, [r7, #4]
 804af3a:	f000 f80f 	bl	804af5c <USBH_CDC_ReceiveCallback>
      break;
 804af3e:	bf00      	nop
  }
}
 804af40:	bf00      	nop
 804af42:	3718      	adds	r7, #24
 804af44:	46bd      	mov	sp, r7
 804af46:	bd80      	pop	{r7, pc}

0804af48 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804af48:	b480      	push	{r7}
 804af4a:	b083      	sub	sp, #12
 804af4c:	af00      	add	r7, sp, #0
 804af4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804af50:	bf00      	nop
 804af52:	370c      	adds	r7, #12
 804af54:	46bd      	mov	sp, r7
 804af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 804af5a:	4770      	bx	lr

0804af5c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804af5c:	b480      	push	{r7}
 804af5e:	b083      	sub	sp, #12
 804af60:	af00      	add	r7, sp, #0
 804af62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804af64:	bf00      	nop
 804af66:	370c      	adds	r7, #12
 804af68:	46bd      	mov	sp, r7
 804af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804af6e:	4770      	bx	lr

0804af70 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804af70:	b480      	push	{r7}
 804af72:	b083      	sub	sp, #12
 804af74:	af00      	add	r7, sp, #0
 804af76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804af78:	bf00      	nop
 804af7a:	370c      	adds	r7, #12
 804af7c:	46bd      	mov	sp, r7
 804af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804af82:	4770      	bx	lr

0804af84 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804af84:	b580      	push	{r7, lr}
 804af86:	b084      	sub	sp, #16
 804af88:	af00      	add	r7, sp, #0
 804af8a:	60f8      	str	r0, [r7, #12]
 804af8c:	60b9      	str	r1, [r7, #8]
 804af8e:	4613      	mov	r3, r2
 804af90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804af92:	68fb      	ldr	r3, [r7, #12]
 804af94:	2b00      	cmp	r3, #0
 804af96:	d101      	bne.n	804af9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804af98:	2302      	movs	r3, #2
 804af9a:	e029      	b.n	804aff0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804af9c:	68fb      	ldr	r3, [r7, #12]
 804af9e:	79fa      	ldrb	r2, [r7, #7]
 804afa0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804afa4:	68fb      	ldr	r3, [r7, #12]
 804afa6:	2200      	movs	r2, #0
 804afa8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804afac:	68fb      	ldr	r3, [r7, #12]
 804afae:	2200      	movs	r2, #0
 804afb0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804afb4:	68f8      	ldr	r0, [r7, #12]
 804afb6:	f000 f81f 	bl	804aff8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804afba:	68fb      	ldr	r3, [r7, #12]
 804afbc:	2200      	movs	r2, #0
 804afbe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804afc2:	68fb      	ldr	r3, [r7, #12]
 804afc4:	2200      	movs	r2, #0
 804afc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804afca:	68fb      	ldr	r3, [r7, #12]
 804afcc:	2200      	movs	r2, #0
 804afce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804afd2:	68fb      	ldr	r3, [r7, #12]
 804afd4:	2200      	movs	r2, #0
 804afd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804afda:	68bb      	ldr	r3, [r7, #8]
 804afdc:	2b00      	cmp	r3, #0
 804afde:	d003      	beq.n	804afe8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804afe0:	68fb      	ldr	r3, [r7, #12]
 804afe2:	68ba      	ldr	r2, [r7, #8]
 804afe4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804afe8:	68f8      	ldr	r0, [r7, #12]
 804afea:	f001 fd2d 	bl	804ca48 <USBH_LL_Init>

  return USBH_OK;
 804afee:	2300      	movs	r3, #0
}
 804aff0:	4618      	mov	r0, r3
 804aff2:	3710      	adds	r7, #16
 804aff4:	46bd      	mov	sp, r7
 804aff6:	bd80      	pop	{r7, pc}

0804aff8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804aff8:	b480      	push	{r7}
 804affa:	b085      	sub	sp, #20
 804affc:	af00      	add	r7, sp, #0
 804affe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804b000:	2300      	movs	r3, #0
 804b002:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804b004:	2300      	movs	r3, #0
 804b006:	60fb      	str	r3, [r7, #12]
 804b008:	e009      	b.n	804b01e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804b00a:	687a      	ldr	r2, [r7, #4]
 804b00c:	68fb      	ldr	r3, [r7, #12]
 804b00e:	33e0      	adds	r3, #224	; 0xe0
 804b010:	009b      	lsls	r3, r3, #2
 804b012:	4413      	add	r3, r2
 804b014:	2200      	movs	r2, #0
 804b016:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804b018:	68fb      	ldr	r3, [r7, #12]
 804b01a:	3301      	adds	r3, #1
 804b01c:	60fb      	str	r3, [r7, #12]
 804b01e:	68fb      	ldr	r3, [r7, #12]
 804b020:	2b0f      	cmp	r3, #15
 804b022:	d9f2      	bls.n	804b00a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804b024:	2300      	movs	r3, #0
 804b026:	60fb      	str	r3, [r7, #12]
 804b028:	e009      	b.n	804b03e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804b02a:	687a      	ldr	r2, [r7, #4]
 804b02c:	68fb      	ldr	r3, [r7, #12]
 804b02e:	4413      	add	r3, r2
 804b030:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b034:	2200      	movs	r2, #0
 804b036:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804b038:	68fb      	ldr	r3, [r7, #12]
 804b03a:	3301      	adds	r3, #1
 804b03c:	60fb      	str	r3, [r7, #12]
 804b03e:	68fb      	ldr	r3, [r7, #12]
 804b040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804b044:	d3f1      	bcc.n	804b02a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804b046:	687b      	ldr	r3, [r7, #4]
 804b048:	2200      	movs	r2, #0
 804b04a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804b04c:	687b      	ldr	r3, [r7, #4]
 804b04e:	2200      	movs	r2, #0
 804b050:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804b052:	687b      	ldr	r3, [r7, #4]
 804b054:	2201      	movs	r2, #1
 804b056:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804b058:	687b      	ldr	r3, [r7, #4]
 804b05a:	2200      	movs	r2, #0
 804b05c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804b060:	687b      	ldr	r3, [r7, #4]
 804b062:	2201      	movs	r2, #1
 804b064:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804b066:	687b      	ldr	r3, [r7, #4]
 804b068:	2240      	movs	r2, #64	; 0x40
 804b06a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804b06c:	687b      	ldr	r3, [r7, #4]
 804b06e:	2200      	movs	r2, #0
 804b070:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804b072:	687b      	ldr	r3, [r7, #4]
 804b074:	2200      	movs	r2, #0
 804b076:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804b07a:	687b      	ldr	r3, [r7, #4]
 804b07c:	2201      	movs	r2, #1
 804b07e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804b082:	687b      	ldr	r3, [r7, #4]
 804b084:	2200      	movs	r2, #0
 804b086:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804b08a:	687b      	ldr	r3, [r7, #4]
 804b08c:	2200      	movs	r2, #0
 804b08e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804b092:	2300      	movs	r3, #0
}
 804b094:	4618      	mov	r0, r3
 804b096:	3714      	adds	r7, #20
 804b098:	46bd      	mov	sp, r7
 804b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b09e:	4770      	bx	lr

0804b0a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804b0a0:	b480      	push	{r7}
 804b0a2:	b085      	sub	sp, #20
 804b0a4:	af00      	add	r7, sp, #0
 804b0a6:	6078      	str	r0, [r7, #4]
 804b0a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804b0aa:	2300      	movs	r3, #0
 804b0ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804b0ae:	683b      	ldr	r3, [r7, #0]
 804b0b0:	2b00      	cmp	r3, #0
 804b0b2:	d016      	beq.n	804b0e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804b0b4:	687b      	ldr	r3, [r7, #4]
 804b0b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b0ba:	2b00      	cmp	r3, #0
 804b0bc:	d10e      	bne.n	804b0dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804b0be:	687b      	ldr	r3, [r7, #4]
 804b0c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b0c4:	1c59      	adds	r1, r3, #1
 804b0c6:	687a      	ldr	r2, [r7, #4]
 804b0c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804b0cc:	687a      	ldr	r2, [r7, #4]
 804b0ce:	33de      	adds	r3, #222	; 0xde
 804b0d0:	6839      	ldr	r1, [r7, #0]
 804b0d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804b0d6:	2300      	movs	r3, #0
 804b0d8:	73fb      	strb	r3, [r7, #15]
 804b0da:	e004      	b.n	804b0e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804b0dc:	2302      	movs	r3, #2
 804b0de:	73fb      	strb	r3, [r7, #15]
 804b0e0:	e001      	b.n	804b0e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804b0e2:	2302      	movs	r3, #2
 804b0e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 804b0e8:	4618      	mov	r0, r3
 804b0ea:	3714      	adds	r7, #20
 804b0ec:	46bd      	mov	sp, r7
 804b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b0f2:	4770      	bx	lr

0804b0f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804b0f4:	b480      	push	{r7}
 804b0f6:	b085      	sub	sp, #20
 804b0f8:	af00      	add	r7, sp, #0
 804b0fa:	6078      	str	r0, [r7, #4]
 804b0fc:	460b      	mov	r3, r1
 804b0fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804b100:	2300      	movs	r3, #0
 804b102:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804b104:	687b      	ldr	r3, [r7, #4]
 804b106:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804b10a:	78fa      	ldrb	r2, [r7, #3]
 804b10c:	429a      	cmp	r2, r3
 804b10e:	d204      	bcs.n	804b11a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804b110:	687b      	ldr	r3, [r7, #4]
 804b112:	78fa      	ldrb	r2, [r7, #3]
 804b114:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804b118:	e001      	b.n	804b11e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804b11a:	2302      	movs	r3, #2
 804b11c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 804b120:	4618      	mov	r0, r3
 804b122:	3714      	adds	r7, #20
 804b124:	46bd      	mov	sp, r7
 804b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b12a:	4770      	bx	lr

0804b12c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804b12c:	b480      	push	{r7}
 804b12e:	b087      	sub	sp, #28
 804b130:	af00      	add	r7, sp, #0
 804b132:	6078      	str	r0, [r7, #4]
 804b134:	4608      	mov	r0, r1
 804b136:	4611      	mov	r1, r2
 804b138:	461a      	mov	r2, r3
 804b13a:	4603      	mov	r3, r0
 804b13c:	70fb      	strb	r3, [r7, #3]
 804b13e:	460b      	mov	r3, r1
 804b140:	70bb      	strb	r3, [r7, #2]
 804b142:	4613      	mov	r3, r2
 804b144:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804b146:	2300      	movs	r3, #0
 804b148:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b14a:	2300      	movs	r3, #0
 804b14c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804b14e:	687b      	ldr	r3, [r7, #4]
 804b150:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b154:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b156:	e025      	b.n	804b1a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804b158:	7dfb      	ldrb	r3, [r7, #23]
 804b15a:	221a      	movs	r2, #26
 804b15c:	fb02 f303 	mul.w	r3, r2, r3
 804b160:	3308      	adds	r3, #8
 804b162:	68fa      	ldr	r2, [r7, #12]
 804b164:	4413      	add	r3, r2
 804b166:	3302      	adds	r3, #2
 804b168:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b16a:	693b      	ldr	r3, [r7, #16]
 804b16c:	795b      	ldrb	r3, [r3, #5]
 804b16e:	78fa      	ldrb	r2, [r7, #3]
 804b170:	429a      	cmp	r2, r3
 804b172:	d002      	beq.n	804b17a <USBH_FindInterface+0x4e>
 804b174:	78fb      	ldrb	r3, [r7, #3]
 804b176:	2bff      	cmp	r3, #255	; 0xff
 804b178:	d111      	bne.n	804b19e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b17a:	693b      	ldr	r3, [r7, #16]
 804b17c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b17e:	78ba      	ldrb	r2, [r7, #2]
 804b180:	429a      	cmp	r2, r3
 804b182:	d002      	beq.n	804b18a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b184:	78bb      	ldrb	r3, [r7, #2]
 804b186:	2bff      	cmp	r3, #255	; 0xff
 804b188:	d109      	bne.n	804b19e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b18a:	693b      	ldr	r3, [r7, #16]
 804b18c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b18e:	787a      	ldrb	r2, [r7, #1]
 804b190:	429a      	cmp	r2, r3
 804b192:	d002      	beq.n	804b19a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b194:	787b      	ldrb	r3, [r7, #1]
 804b196:	2bff      	cmp	r3, #255	; 0xff
 804b198:	d101      	bne.n	804b19e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804b19a:	7dfb      	ldrb	r3, [r7, #23]
 804b19c:	e006      	b.n	804b1ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 804b19e:	7dfb      	ldrb	r3, [r7, #23]
 804b1a0:	3301      	adds	r3, #1
 804b1a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b1a4:	7dfb      	ldrb	r3, [r7, #23]
 804b1a6:	2b01      	cmp	r3, #1
 804b1a8:	d9d6      	bls.n	804b158 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804b1aa:	23ff      	movs	r3, #255	; 0xff
}
 804b1ac:	4618      	mov	r0, r3
 804b1ae:	371c      	adds	r7, #28
 804b1b0:	46bd      	mov	sp, r7
 804b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b1b6:	4770      	bx	lr

0804b1b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804b1b8:	b580      	push	{r7, lr}
 804b1ba:	b082      	sub	sp, #8
 804b1bc:	af00      	add	r7, sp, #0
 804b1be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804b1c0:	6878      	ldr	r0, [r7, #4]
 804b1c2:	f001 fc87 	bl	804cad4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804b1c6:	2101      	movs	r1, #1
 804b1c8:	6878      	ldr	r0, [r7, #4]
 804b1ca:	f001 fda0 	bl	804cd0e <USBH_LL_DriverVBUS>

  return USBH_OK;
 804b1ce:	2300      	movs	r3, #0
}
 804b1d0:	4618      	mov	r0, r3
 804b1d2:	3708      	adds	r7, #8
 804b1d4:	46bd      	mov	sp, r7
 804b1d6:	bd80      	pop	{r7, pc}

0804b1d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804b1d8:	b580      	push	{r7, lr}
 804b1da:	b088      	sub	sp, #32
 804b1dc:	af04      	add	r7, sp, #16
 804b1de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804b1e0:	2302      	movs	r3, #2
 804b1e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804b1e4:	2300      	movs	r3, #0
 804b1e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804b1e8:	687b      	ldr	r3, [r7, #4]
 804b1ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804b1ee:	b2db      	uxtb	r3, r3
 804b1f0:	2b01      	cmp	r3, #1
 804b1f2:	d102      	bne.n	804b1fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804b1f4:	687b      	ldr	r3, [r7, #4]
 804b1f6:	2203      	movs	r2, #3
 804b1f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804b1fa:	687b      	ldr	r3, [r7, #4]
 804b1fc:	781b      	ldrb	r3, [r3, #0]
 804b1fe:	b2db      	uxtb	r3, r3
 804b200:	2b0b      	cmp	r3, #11
 804b202:	f200 81be 	bhi.w	804b582 <USBH_Process+0x3aa>
 804b206:	a201      	add	r2, pc, #4	; (adr r2, 804b20c <USBH_Process+0x34>)
 804b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b20c:	0804b23d 	.word	0x0804b23d
 804b210:	0804b26f 	.word	0x0804b26f
 804b214:	0804b2d7 	.word	0x0804b2d7
 804b218:	0804b51d 	.word	0x0804b51d
 804b21c:	0804b583 	.word	0x0804b583
 804b220:	0804b37b 	.word	0x0804b37b
 804b224:	0804b4c3 	.word	0x0804b4c3
 804b228:	0804b3b1 	.word	0x0804b3b1
 804b22c:	0804b3d1 	.word	0x0804b3d1
 804b230:	0804b3f1 	.word	0x0804b3f1
 804b234:	0804b435 	.word	0x0804b435
 804b238:	0804b505 	.word	0x0804b505
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804b23c:	687b      	ldr	r3, [r7, #4]
 804b23e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804b242:	b2db      	uxtb	r3, r3
 804b244:	2b00      	cmp	r3, #0
 804b246:	f000 819e 	beq.w	804b586 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804b24a:	687b      	ldr	r3, [r7, #4]
 804b24c:	2201      	movs	r2, #1
 804b24e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804b250:	20c8      	movs	r0, #200	; 0xc8
 804b252:	f001 fda3 	bl	804cd9c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804b256:	6878      	ldr	r0, [r7, #4]
 804b258:	f001 fc99 	bl	804cb8e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804b25c:	687b      	ldr	r3, [r7, #4]
 804b25e:	2200      	movs	r2, #0
 804b260:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804b264:	687b      	ldr	r3, [r7, #4]
 804b266:	2200      	movs	r2, #0
 804b268:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b26c:	e18b      	b.n	804b586 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804b26e:	687b      	ldr	r3, [r7, #4]
 804b270:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804b274:	2b01      	cmp	r3, #1
 804b276:	d107      	bne.n	804b288 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804b278:	687b      	ldr	r3, [r7, #4]
 804b27a:	2200      	movs	r2, #0
 804b27c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804b280:	687b      	ldr	r3, [r7, #4]
 804b282:	2202      	movs	r2, #2
 804b284:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b286:	e18d      	b.n	804b5a4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804b288:	687b      	ldr	r3, [r7, #4]
 804b28a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b28e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804b292:	d914      	bls.n	804b2be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804b294:	687b      	ldr	r3, [r7, #4]
 804b296:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b29a:	3301      	adds	r3, #1
 804b29c:	b2da      	uxtb	r2, r3
 804b29e:	687b      	ldr	r3, [r7, #4]
 804b2a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804b2a4:	687b      	ldr	r3, [r7, #4]
 804b2a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b2aa:	2b03      	cmp	r3, #3
 804b2ac:	d903      	bls.n	804b2b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804b2ae:	687b      	ldr	r3, [r7, #4]
 804b2b0:	220d      	movs	r2, #13
 804b2b2:	701a      	strb	r2, [r3, #0]
      break;
 804b2b4:	e176      	b.n	804b5a4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804b2b6:	687b      	ldr	r3, [r7, #4]
 804b2b8:	2200      	movs	r2, #0
 804b2ba:	701a      	strb	r2, [r3, #0]
      break;
 804b2bc:	e172      	b.n	804b5a4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804b2be:	687b      	ldr	r3, [r7, #4]
 804b2c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b2c4:	f103 020a 	add.w	r2, r3, #10
 804b2c8:	687b      	ldr	r3, [r7, #4]
 804b2ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804b2ce:	200a      	movs	r0, #10
 804b2d0:	f001 fd64 	bl	804cd9c <USBH_Delay>
      break;
 804b2d4:	e166      	b.n	804b5a4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804b2d6:	687b      	ldr	r3, [r7, #4]
 804b2d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b2dc:	2b00      	cmp	r3, #0
 804b2de:	d005      	beq.n	804b2ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804b2e0:	687b      	ldr	r3, [r7, #4]
 804b2e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b2e6:	2104      	movs	r1, #4
 804b2e8:	6878      	ldr	r0, [r7, #4]
 804b2ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804b2ec:	2064      	movs	r0, #100	; 0x64
 804b2ee:	f001 fd55 	bl	804cd9c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804b2f2:	6878      	ldr	r0, [r7, #4]
 804b2f4:	f001 fc24 	bl	804cb40 <USBH_LL_GetSpeed>
 804b2f8:	4603      	mov	r3, r0
 804b2fa:	461a      	mov	r2, r3
 804b2fc:	687b      	ldr	r3, [r7, #4]
 804b2fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804b302:	687b      	ldr	r3, [r7, #4]
 804b304:	2205      	movs	r2, #5
 804b306:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804b308:	2100      	movs	r1, #0
 804b30a:	6878      	ldr	r0, [r7, #4]
 804b30c:	f001 fa29 	bl	804c762 <USBH_AllocPipe>
 804b310:	4603      	mov	r3, r0
 804b312:	461a      	mov	r2, r3
 804b314:	687b      	ldr	r3, [r7, #4]
 804b316:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804b318:	2180      	movs	r1, #128	; 0x80
 804b31a:	6878      	ldr	r0, [r7, #4]
 804b31c:	f001 fa21 	bl	804c762 <USBH_AllocPipe>
 804b320:	4603      	mov	r3, r0
 804b322:	461a      	mov	r2, r3
 804b324:	687b      	ldr	r3, [r7, #4]
 804b326:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804b328:	687b      	ldr	r3, [r7, #4]
 804b32a:	7919      	ldrb	r1, [r3, #4]
 804b32c:	687b      	ldr	r3, [r7, #4]
 804b32e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b332:	687b      	ldr	r3, [r7, #4]
 804b334:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804b338:	687a      	ldr	r2, [r7, #4]
 804b33a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804b33c:	b292      	uxth	r2, r2
 804b33e:	9202      	str	r2, [sp, #8]
 804b340:	2200      	movs	r2, #0
 804b342:	9201      	str	r2, [sp, #4]
 804b344:	9300      	str	r3, [sp, #0]
 804b346:	4603      	mov	r3, r0
 804b348:	2280      	movs	r2, #128	; 0x80
 804b34a:	6878      	ldr	r0, [r7, #4]
 804b34c:	f001 f9da 	bl	804c704 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804b350:	687b      	ldr	r3, [r7, #4]
 804b352:	7959      	ldrb	r1, [r3, #5]
 804b354:	687b      	ldr	r3, [r7, #4]
 804b356:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b35a:	687b      	ldr	r3, [r7, #4]
 804b35c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804b360:	687a      	ldr	r2, [r7, #4]
 804b362:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804b364:	b292      	uxth	r2, r2
 804b366:	9202      	str	r2, [sp, #8]
 804b368:	2200      	movs	r2, #0
 804b36a:	9201      	str	r2, [sp, #4]
 804b36c:	9300      	str	r3, [sp, #0]
 804b36e:	4603      	mov	r3, r0
 804b370:	2200      	movs	r2, #0
 804b372:	6878      	ldr	r0, [r7, #4]
 804b374:	f001 f9c6 	bl	804c704 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b378:	e114      	b.n	804b5a4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804b37a:	6878      	ldr	r0, [r7, #4]
 804b37c:	f000 f918 	bl	804b5b0 <USBH_HandleEnum>
 804b380:	4603      	mov	r3, r0
 804b382:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804b384:	7bbb      	ldrb	r3, [r7, #14]
 804b386:	b2db      	uxtb	r3, r3
 804b388:	2b00      	cmp	r3, #0
 804b38a:	f040 80fe 	bne.w	804b58a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804b38e:	687b      	ldr	r3, [r7, #4]
 804b390:	2200      	movs	r2, #0
 804b392:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804b396:	687b      	ldr	r3, [r7, #4]
 804b398:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804b39c:	2b01      	cmp	r3, #1
 804b39e:	d103      	bne.n	804b3a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804b3a0:	687b      	ldr	r3, [r7, #4]
 804b3a2:	2208      	movs	r2, #8
 804b3a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b3a6:	e0f0      	b.n	804b58a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804b3a8:	687b      	ldr	r3, [r7, #4]
 804b3aa:	2207      	movs	r2, #7
 804b3ac:	701a      	strb	r2, [r3, #0]
      break;
 804b3ae:	e0ec      	b.n	804b58a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804b3b0:	687b      	ldr	r3, [r7, #4]
 804b3b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b3b6:	2b00      	cmp	r3, #0
 804b3b8:	f000 80e9 	beq.w	804b58e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804b3bc:	687b      	ldr	r3, [r7, #4]
 804b3be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b3c2:	2101      	movs	r1, #1
 804b3c4:	6878      	ldr	r0, [r7, #4]
 804b3c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804b3c8:	687b      	ldr	r3, [r7, #4]
 804b3ca:	2208      	movs	r2, #8
 804b3cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804b3ce:	e0de      	b.n	804b58e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804b3d0:	687b      	ldr	r3, [r7, #4]
 804b3d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804b3d6:	b29b      	uxth	r3, r3
 804b3d8:	4619      	mov	r1, r3
 804b3da:	6878      	ldr	r0, [r7, #4]
 804b3dc:	f000 fc2c 	bl	804bc38 <USBH_SetCfg>
 804b3e0:	4603      	mov	r3, r0
 804b3e2:	2b00      	cmp	r3, #0
 804b3e4:	f040 80d5 	bne.w	804b592 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804b3e8:	687b      	ldr	r3, [r7, #4]
 804b3ea:	2209      	movs	r2, #9
 804b3ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b3ee:	e0d0      	b.n	804b592 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804b3f0:	687b      	ldr	r3, [r7, #4]
 804b3f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804b3f6:	f003 0320 	and.w	r3, r3, #32
 804b3fa:	2b00      	cmp	r3, #0
 804b3fc:	d016      	beq.n	804b42c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804b3fe:	2101      	movs	r1, #1
 804b400:	6878      	ldr	r0, [r7, #4]
 804b402:	f000 fc3c 	bl	804bc7e <USBH_SetFeature>
 804b406:	4603      	mov	r3, r0
 804b408:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804b40a:	7bbb      	ldrb	r3, [r7, #14]
 804b40c:	b2db      	uxtb	r3, r3
 804b40e:	2b00      	cmp	r3, #0
 804b410:	d103      	bne.n	804b41a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804b412:	687b      	ldr	r3, [r7, #4]
 804b414:	220a      	movs	r2, #10
 804b416:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b418:	e0bd      	b.n	804b596 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804b41a:	7bbb      	ldrb	r3, [r7, #14]
 804b41c:	b2db      	uxtb	r3, r3
 804b41e:	2b03      	cmp	r3, #3
 804b420:	f040 80b9 	bne.w	804b596 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804b424:	687b      	ldr	r3, [r7, #4]
 804b426:	220a      	movs	r2, #10
 804b428:	701a      	strb	r2, [r3, #0]
      break;
 804b42a:	e0b4      	b.n	804b596 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804b42c:	687b      	ldr	r3, [r7, #4]
 804b42e:	220a      	movs	r2, #10
 804b430:	701a      	strb	r2, [r3, #0]
      break;
 804b432:	e0b0      	b.n	804b596 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804b434:	687b      	ldr	r3, [r7, #4]
 804b436:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b43a:	2b00      	cmp	r3, #0
 804b43c:	f000 80ad 	beq.w	804b59a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804b440:	687b      	ldr	r3, [r7, #4]
 804b442:	2200      	movs	r2, #0
 804b444:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804b448:	2300      	movs	r3, #0
 804b44a:	73fb      	strb	r3, [r7, #15]
 804b44c:	e016      	b.n	804b47c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804b44e:	7bfa      	ldrb	r2, [r7, #15]
 804b450:	687b      	ldr	r3, [r7, #4]
 804b452:	32de      	adds	r2, #222	; 0xde
 804b454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804b458:	791a      	ldrb	r2, [r3, #4]
 804b45a:	687b      	ldr	r3, [r7, #4]
 804b45c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804b460:	429a      	cmp	r2, r3
 804b462:	d108      	bne.n	804b476 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804b464:	7bfa      	ldrb	r2, [r7, #15]
 804b466:	687b      	ldr	r3, [r7, #4]
 804b468:	32de      	adds	r2, #222	; 0xde
 804b46a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804b46e:	687b      	ldr	r3, [r7, #4]
 804b470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804b474:	e005      	b.n	804b482 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804b476:	7bfb      	ldrb	r3, [r7, #15]
 804b478:	3301      	adds	r3, #1
 804b47a:	73fb      	strb	r3, [r7, #15]
 804b47c:	7bfb      	ldrb	r3, [r7, #15]
 804b47e:	2b00      	cmp	r3, #0
 804b480:	d0e5      	beq.n	804b44e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804b482:	687b      	ldr	r3, [r7, #4]
 804b484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b488:	2b00      	cmp	r3, #0
 804b48a:	d016      	beq.n	804b4ba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804b48c:	687b      	ldr	r3, [r7, #4]
 804b48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b492:	689b      	ldr	r3, [r3, #8]
 804b494:	6878      	ldr	r0, [r7, #4]
 804b496:	4798      	blx	r3
 804b498:	4603      	mov	r3, r0
 804b49a:	2b00      	cmp	r3, #0
 804b49c:	d109      	bne.n	804b4b2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804b49e:	687b      	ldr	r3, [r7, #4]
 804b4a0:	2206      	movs	r2, #6
 804b4a2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804b4a4:	687b      	ldr	r3, [r7, #4]
 804b4a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b4aa:	2103      	movs	r1, #3
 804b4ac:	6878      	ldr	r0, [r7, #4]
 804b4ae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b4b0:	e073      	b.n	804b59a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804b4b2:	687b      	ldr	r3, [r7, #4]
 804b4b4:	220d      	movs	r2, #13
 804b4b6:	701a      	strb	r2, [r3, #0]
      break;
 804b4b8:	e06f      	b.n	804b59a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804b4ba:	687b      	ldr	r3, [r7, #4]
 804b4bc:	220d      	movs	r2, #13
 804b4be:	701a      	strb	r2, [r3, #0]
      break;
 804b4c0:	e06b      	b.n	804b59a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804b4c2:	687b      	ldr	r3, [r7, #4]
 804b4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b4c8:	2b00      	cmp	r3, #0
 804b4ca:	d017      	beq.n	804b4fc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804b4cc:	687b      	ldr	r3, [r7, #4]
 804b4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b4d2:	691b      	ldr	r3, [r3, #16]
 804b4d4:	6878      	ldr	r0, [r7, #4]
 804b4d6:	4798      	blx	r3
 804b4d8:	4603      	mov	r3, r0
 804b4da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804b4dc:	7bbb      	ldrb	r3, [r7, #14]
 804b4de:	b2db      	uxtb	r3, r3
 804b4e0:	2b00      	cmp	r3, #0
 804b4e2:	d103      	bne.n	804b4ec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804b4e4:	687b      	ldr	r3, [r7, #4]
 804b4e6:	220b      	movs	r2, #11
 804b4e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b4ea:	e058      	b.n	804b59e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804b4ec:	7bbb      	ldrb	r3, [r7, #14]
 804b4ee:	b2db      	uxtb	r3, r3
 804b4f0:	2b02      	cmp	r3, #2
 804b4f2:	d154      	bne.n	804b59e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804b4f4:	687b      	ldr	r3, [r7, #4]
 804b4f6:	220d      	movs	r2, #13
 804b4f8:	701a      	strb	r2, [r3, #0]
      break;
 804b4fa:	e050      	b.n	804b59e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804b4fc:	687b      	ldr	r3, [r7, #4]
 804b4fe:	220d      	movs	r2, #13
 804b500:	701a      	strb	r2, [r3, #0]
      break;
 804b502:	e04c      	b.n	804b59e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804b504:	687b      	ldr	r3, [r7, #4]
 804b506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b50a:	2b00      	cmp	r3, #0
 804b50c:	d049      	beq.n	804b5a2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804b50e:	687b      	ldr	r3, [r7, #4]
 804b510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b514:	695b      	ldr	r3, [r3, #20]
 804b516:	6878      	ldr	r0, [r7, #4]
 804b518:	4798      	blx	r3
      }
      break;
 804b51a:	e042      	b.n	804b5a2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804b51c:	687b      	ldr	r3, [r7, #4]
 804b51e:	2200      	movs	r2, #0
 804b520:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804b524:	6878      	ldr	r0, [r7, #4]
 804b526:	f7ff fd67 	bl	804aff8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804b52a:	687b      	ldr	r3, [r7, #4]
 804b52c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b530:	2b00      	cmp	r3, #0
 804b532:	d009      	beq.n	804b548 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804b534:	687b      	ldr	r3, [r7, #4]
 804b536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b53a:	68db      	ldr	r3, [r3, #12]
 804b53c:	6878      	ldr	r0, [r7, #4]
 804b53e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804b540:	687b      	ldr	r3, [r7, #4]
 804b542:	2200      	movs	r2, #0
 804b544:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804b548:	687b      	ldr	r3, [r7, #4]
 804b54a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b54e:	2b00      	cmp	r3, #0
 804b550:	d005      	beq.n	804b55e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804b552:	687b      	ldr	r3, [r7, #4]
 804b554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b558:	2105      	movs	r1, #5
 804b55a:	6878      	ldr	r0, [r7, #4]
 804b55c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804b55e:	687b      	ldr	r3, [r7, #4]
 804b560:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804b564:	b2db      	uxtb	r3, r3
 804b566:	2b01      	cmp	r3, #1
 804b568:	d107      	bne.n	804b57a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804b56a:	687b      	ldr	r3, [r7, #4]
 804b56c:	2200      	movs	r2, #0
 804b56e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804b572:	6878      	ldr	r0, [r7, #4]
 804b574:	f7ff fe20 	bl	804b1b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b578:	e014      	b.n	804b5a4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804b57a:	6878      	ldr	r0, [r7, #4]
 804b57c:	f001 faaa 	bl	804cad4 <USBH_LL_Start>
      break;
 804b580:	e010      	b.n	804b5a4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804b582:	bf00      	nop
 804b584:	e00e      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b586:	bf00      	nop
 804b588:	e00c      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b58a:	bf00      	nop
 804b58c:	e00a      	b.n	804b5a4 <USBH_Process+0x3cc>
    break;
 804b58e:	bf00      	nop
 804b590:	e008      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b592:	bf00      	nop
 804b594:	e006      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b596:	bf00      	nop
 804b598:	e004      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b59a:	bf00      	nop
 804b59c:	e002      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b59e:	bf00      	nop
 804b5a0:	e000      	b.n	804b5a4 <USBH_Process+0x3cc>
      break;
 804b5a2:	bf00      	nop
  }
  return USBH_OK;
 804b5a4:	2300      	movs	r3, #0
}
 804b5a6:	4618      	mov	r0, r3
 804b5a8:	3710      	adds	r7, #16
 804b5aa:	46bd      	mov	sp, r7
 804b5ac:	bd80      	pop	{r7, pc}
 804b5ae:	bf00      	nop

0804b5b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804b5b0:	b580      	push	{r7, lr}
 804b5b2:	b088      	sub	sp, #32
 804b5b4:	af04      	add	r7, sp, #16
 804b5b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804b5b8:	2301      	movs	r3, #1
 804b5ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804b5bc:	2301      	movs	r3, #1
 804b5be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804b5c0:	687b      	ldr	r3, [r7, #4]
 804b5c2:	785b      	ldrb	r3, [r3, #1]
 804b5c4:	2b07      	cmp	r3, #7
 804b5c6:	f200 81c1 	bhi.w	804b94c <USBH_HandleEnum+0x39c>
 804b5ca:	a201      	add	r2, pc, #4	; (adr r2, 804b5d0 <USBH_HandleEnum+0x20>)
 804b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b5d0:	0804b5f1 	.word	0x0804b5f1
 804b5d4:	0804b6af 	.word	0x0804b6af
 804b5d8:	0804b719 	.word	0x0804b719
 804b5dc:	0804b7a7 	.word	0x0804b7a7
 804b5e0:	0804b811 	.word	0x0804b811
 804b5e4:	0804b881 	.word	0x0804b881
 804b5e8:	0804b8c7 	.word	0x0804b8c7
 804b5ec:	0804b90d 	.word	0x0804b90d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804b5f0:	2108      	movs	r1, #8
 804b5f2:	6878      	ldr	r0, [r7, #4]
 804b5f4:	f000 fa50 	bl	804ba98 <USBH_Get_DevDesc>
 804b5f8:	4603      	mov	r3, r0
 804b5fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b5fc:	7bbb      	ldrb	r3, [r7, #14]
 804b5fe:	2b00      	cmp	r3, #0
 804b600:	d130      	bne.n	804b664 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804b602:	687b      	ldr	r3, [r7, #4]
 804b604:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804b608:	687b      	ldr	r3, [r7, #4]
 804b60a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804b60c:	687b      	ldr	r3, [r7, #4]
 804b60e:	2201      	movs	r2, #1
 804b610:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804b612:	687b      	ldr	r3, [r7, #4]
 804b614:	7919      	ldrb	r1, [r3, #4]
 804b616:	687b      	ldr	r3, [r7, #4]
 804b618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b61c:	687b      	ldr	r3, [r7, #4]
 804b61e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b622:	687a      	ldr	r2, [r7, #4]
 804b624:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804b626:	b292      	uxth	r2, r2
 804b628:	9202      	str	r2, [sp, #8]
 804b62a:	2200      	movs	r2, #0
 804b62c:	9201      	str	r2, [sp, #4]
 804b62e:	9300      	str	r3, [sp, #0]
 804b630:	4603      	mov	r3, r0
 804b632:	2280      	movs	r2, #128	; 0x80
 804b634:	6878      	ldr	r0, [r7, #4]
 804b636:	f001 f865 	bl	804c704 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b63a:	687b      	ldr	r3, [r7, #4]
 804b63c:	7959      	ldrb	r1, [r3, #5]
 804b63e:	687b      	ldr	r3, [r7, #4]
 804b640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b644:	687b      	ldr	r3, [r7, #4]
 804b646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b64a:	687a      	ldr	r2, [r7, #4]
 804b64c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b64e:	b292      	uxth	r2, r2
 804b650:	9202      	str	r2, [sp, #8]
 804b652:	2200      	movs	r2, #0
 804b654:	9201      	str	r2, [sp, #4]
 804b656:	9300      	str	r3, [sp, #0]
 804b658:	4603      	mov	r3, r0
 804b65a:	2200      	movs	r2, #0
 804b65c:	6878      	ldr	r0, [r7, #4]
 804b65e:	f001 f851 	bl	804c704 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804b662:	e175      	b.n	804b950 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b664:	7bbb      	ldrb	r3, [r7, #14]
 804b666:	2b03      	cmp	r3, #3
 804b668:	f040 8172 	bne.w	804b950 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804b66c:	687b      	ldr	r3, [r7, #4]
 804b66e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b672:	3301      	adds	r3, #1
 804b674:	b2da      	uxtb	r2, r3
 804b676:	687b      	ldr	r3, [r7, #4]
 804b678:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b67c:	687b      	ldr	r3, [r7, #4]
 804b67e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b682:	2b03      	cmp	r3, #3
 804b684:	d903      	bls.n	804b68e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804b686:	687b      	ldr	r3, [r7, #4]
 804b688:	220d      	movs	r2, #13
 804b68a:	701a      	strb	r2, [r3, #0]
      break;
 804b68c:	e160      	b.n	804b950 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b68e:	687b      	ldr	r3, [r7, #4]
 804b690:	795b      	ldrb	r3, [r3, #5]
 804b692:	4619      	mov	r1, r3
 804b694:	6878      	ldr	r0, [r7, #4]
 804b696:	f001 f885 	bl	804c7a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b69a:	687b      	ldr	r3, [r7, #4]
 804b69c:	791b      	ldrb	r3, [r3, #4]
 804b69e:	4619      	mov	r1, r3
 804b6a0:	6878      	ldr	r0, [r7, #4]
 804b6a2:	f001 f87f 	bl	804c7a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804b6a6:	687b      	ldr	r3, [r7, #4]
 804b6a8:	2200      	movs	r2, #0
 804b6aa:	701a      	strb	r2, [r3, #0]
      break;
 804b6ac:	e150      	b.n	804b950 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804b6ae:	2112      	movs	r1, #18
 804b6b0:	6878      	ldr	r0, [r7, #4]
 804b6b2:	f000 f9f1 	bl	804ba98 <USBH_Get_DevDesc>
 804b6b6:	4603      	mov	r3, r0
 804b6b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b6ba:	7bbb      	ldrb	r3, [r7, #14]
 804b6bc:	2b00      	cmp	r3, #0
 804b6be:	d103      	bne.n	804b6c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804b6c0:	687b      	ldr	r3, [r7, #4]
 804b6c2:	2202      	movs	r2, #2
 804b6c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b6c6:	e145      	b.n	804b954 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b6c8:	7bbb      	ldrb	r3, [r7, #14]
 804b6ca:	2b03      	cmp	r3, #3
 804b6cc:	f040 8142 	bne.w	804b954 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804b6d0:	687b      	ldr	r3, [r7, #4]
 804b6d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b6d6:	3301      	adds	r3, #1
 804b6d8:	b2da      	uxtb	r2, r3
 804b6da:	687b      	ldr	r3, [r7, #4]
 804b6dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b6e0:	687b      	ldr	r3, [r7, #4]
 804b6e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b6e6:	2b03      	cmp	r3, #3
 804b6e8:	d903      	bls.n	804b6f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804b6ea:	687b      	ldr	r3, [r7, #4]
 804b6ec:	220d      	movs	r2, #13
 804b6ee:	701a      	strb	r2, [r3, #0]
      break;
 804b6f0:	e130      	b.n	804b954 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b6f2:	687b      	ldr	r3, [r7, #4]
 804b6f4:	795b      	ldrb	r3, [r3, #5]
 804b6f6:	4619      	mov	r1, r3
 804b6f8:	6878      	ldr	r0, [r7, #4]
 804b6fa:	f001 f853 	bl	804c7a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b6fe:	687b      	ldr	r3, [r7, #4]
 804b700:	791b      	ldrb	r3, [r3, #4]
 804b702:	4619      	mov	r1, r3
 804b704:	6878      	ldr	r0, [r7, #4]
 804b706:	f001 f84d 	bl	804c7a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b70a:	687b      	ldr	r3, [r7, #4]
 804b70c:	2200      	movs	r2, #0
 804b70e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b710:	687b      	ldr	r3, [r7, #4]
 804b712:	2200      	movs	r2, #0
 804b714:	701a      	strb	r2, [r3, #0]
      break;
 804b716:	e11d      	b.n	804b954 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804b718:	2101      	movs	r1, #1
 804b71a:	6878      	ldr	r0, [r7, #4]
 804b71c:	f000 fa68 	bl	804bbf0 <USBH_SetAddress>
 804b720:	4603      	mov	r3, r0
 804b722:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b724:	7bbb      	ldrb	r3, [r7, #14]
 804b726:	2b00      	cmp	r3, #0
 804b728:	d132      	bne.n	804b790 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804b72a:	2002      	movs	r0, #2
 804b72c:	f001 fb36 	bl	804cd9c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804b730:	687b      	ldr	r3, [r7, #4]
 804b732:	2201      	movs	r2, #1
 804b734:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804b738:	687b      	ldr	r3, [r7, #4]
 804b73a:	2203      	movs	r2, #3
 804b73c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b73e:	687b      	ldr	r3, [r7, #4]
 804b740:	7919      	ldrb	r1, [r3, #4]
 804b742:	687b      	ldr	r3, [r7, #4]
 804b744:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b748:	687b      	ldr	r3, [r7, #4]
 804b74a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b74e:	687a      	ldr	r2, [r7, #4]
 804b750:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b752:	b292      	uxth	r2, r2
 804b754:	9202      	str	r2, [sp, #8]
 804b756:	2200      	movs	r2, #0
 804b758:	9201      	str	r2, [sp, #4]
 804b75a:	9300      	str	r3, [sp, #0]
 804b75c:	4603      	mov	r3, r0
 804b75e:	2280      	movs	r2, #128	; 0x80
 804b760:	6878      	ldr	r0, [r7, #4]
 804b762:	f000 ffcf 	bl	804c704 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b766:	687b      	ldr	r3, [r7, #4]
 804b768:	7959      	ldrb	r1, [r3, #5]
 804b76a:	687b      	ldr	r3, [r7, #4]
 804b76c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b770:	687b      	ldr	r3, [r7, #4]
 804b772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b776:	687a      	ldr	r2, [r7, #4]
 804b778:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b77a:	b292      	uxth	r2, r2
 804b77c:	9202      	str	r2, [sp, #8]
 804b77e:	2200      	movs	r2, #0
 804b780:	9201      	str	r2, [sp, #4]
 804b782:	9300      	str	r3, [sp, #0]
 804b784:	4603      	mov	r3, r0
 804b786:	2200      	movs	r2, #0
 804b788:	6878      	ldr	r0, [r7, #4]
 804b78a:	f000 ffbb 	bl	804c704 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804b78e:	e0e3      	b.n	804b958 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b790:	7bbb      	ldrb	r3, [r7, #14]
 804b792:	2b03      	cmp	r3, #3
 804b794:	f040 80e0 	bne.w	804b958 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804b798:	687b      	ldr	r3, [r7, #4]
 804b79a:	220d      	movs	r2, #13
 804b79c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804b79e:	687b      	ldr	r3, [r7, #4]
 804b7a0:	2200      	movs	r2, #0
 804b7a2:	705a      	strb	r2, [r3, #1]
      break;
 804b7a4:	e0d8      	b.n	804b958 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804b7a6:	2109      	movs	r1, #9
 804b7a8:	6878      	ldr	r0, [r7, #4]
 804b7aa:	f000 f99d 	bl	804bae8 <USBH_Get_CfgDesc>
 804b7ae:	4603      	mov	r3, r0
 804b7b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b7b2:	7bbb      	ldrb	r3, [r7, #14]
 804b7b4:	2b00      	cmp	r3, #0
 804b7b6:	d103      	bne.n	804b7c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804b7b8:	687b      	ldr	r3, [r7, #4]
 804b7ba:	2204      	movs	r2, #4
 804b7bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b7be:	e0cd      	b.n	804b95c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b7c0:	7bbb      	ldrb	r3, [r7, #14]
 804b7c2:	2b03      	cmp	r3, #3
 804b7c4:	f040 80ca 	bne.w	804b95c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804b7c8:	687b      	ldr	r3, [r7, #4]
 804b7ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b7ce:	3301      	adds	r3, #1
 804b7d0:	b2da      	uxtb	r2, r3
 804b7d2:	687b      	ldr	r3, [r7, #4]
 804b7d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b7d8:	687b      	ldr	r3, [r7, #4]
 804b7da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b7de:	2b03      	cmp	r3, #3
 804b7e0:	d903      	bls.n	804b7ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804b7e2:	687b      	ldr	r3, [r7, #4]
 804b7e4:	220d      	movs	r2, #13
 804b7e6:	701a      	strb	r2, [r3, #0]
      break;
 804b7e8:	e0b8      	b.n	804b95c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b7ea:	687b      	ldr	r3, [r7, #4]
 804b7ec:	795b      	ldrb	r3, [r3, #5]
 804b7ee:	4619      	mov	r1, r3
 804b7f0:	6878      	ldr	r0, [r7, #4]
 804b7f2:	f000 ffd7 	bl	804c7a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b7f6:	687b      	ldr	r3, [r7, #4]
 804b7f8:	791b      	ldrb	r3, [r3, #4]
 804b7fa:	4619      	mov	r1, r3
 804b7fc:	6878      	ldr	r0, [r7, #4]
 804b7fe:	f000 ffd1 	bl	804c7a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b802:	687b      	ldr	r3, [r7, #4]
 804b804:	2200      	movs	r2, #0
 804b806:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b808:	687b      	ldr	r3, [r7, #4]
 804b80a:	2200      	movs	r2, #0
 804b80c:	701a      	strb	r2, [r3, #0]
      break;
 804b80e:	e0a5      	b.n	804b95c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804b810:	687b      	ldr	r3, [r7, #4]
 804b812:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804b816:	4619      	mov	r1, r3
 804b818:	6878      	ldr	r0, [r7, #4]
 804b81a:	f000 f965 	bl	804bae8 <USBH_Get_CfgDesc>
 804b81e:	4603      	mov	r3, r0
 804b820:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b822:	7bbb      	ldrb	r3, [r7, #14]
 804b824:	2b00      	cmp	r3, #0
 804b826:	d103      	bne.n	804b830 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804b828:	687b      	ldr	r3, [r7, #4]
 804b82a:	2205      	movs	r2, #5
 804b82c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b82e:	e097      	b.n	804b960 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b830:	7bbb      	ldrb	r3, [r7, #14]
 804b832:	2b03      	cmp	r3, #3
 804b834:	f040 8094 	bne.w	804b960 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804b838:	687b      	ldr	r3, [r7, #4]
 804b83a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b83e:	3301      	adds	r3, #1
 804b840:	b2da      	uxtb	r2, r3
 804b842:	687b      	ldr	r3, [r7, #4]
 804b844:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b848:	687b      	ldr	r3, [r7, #4]
 804b84a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b84e:	2b03      	cmp	r3, #3
 804b850:	d903      	bls.n	804b85a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804b852:	687b      	ldr	r3, [r7, #4]
 804b854:	220d      	movs	r2, #13
 804b856:	701a      	strb	r2, [r3, #0]
      break;
 804b858:	e082      	b.n	804b960 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b85a:	687b      	ldr	r3, [r7, #4]
 804b85c:	795b      	ldrb	r3, [r3, #5]
 804b85e:	4619      	mov	r1, r3
 804b860:	6878      	ldr	r0, [r7, #4]
 804b862:	f000 ff9f 	bl	804c7a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b866:	687b      	ldr	r3, [r7, #4]
 804b868:	791b      	ldrb	r3, [r3, #4]
 804b86a:	4619      	mov	r1, r3
 804b86c:	6878      	ldr	r0, [r7, #4]
 804b86e:	f000 ff99 	bl	804c7a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b872:	687b      	ldr	r3, [r7, #4]
 804b874:	2200      	movs	r2, #0
 804b876:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b878:	687b      	ldr	r3, [r7, #4]
 804b87a:	2200      	movs	r2, #0
 804b87c:	701a      	strb	r2, [r3, #0]
      break;
 804b87e:	e06f      	b.n	804b960 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804b880:	687b      	ldr	r3, [r7, #4]
 804b882:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804b886:	2b00      	cmp	r3, #0
 804b888:	d019      	beq.n	804b8be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b88a:	687b      	ldr	r3, [r7, #4]
 804b88c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804b890:	687b      	ldr	r3, [r7, #4]
 804b892:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b896:	23ff      	movs	r3, #255	; 0xff
 804b898:	6878      	ldr	r0, [r7, #4]
 804b89a:	f000 f949 	bl	804bb30 <USBH_Get_StringDesc>
 804b89e:	4603      	mov	r3, r0
 804b8a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b8a2:	7bbb      	ldrb	r3, [r7, #14]
 804b8a4:	2b00      	cmp	r3, #0
 804b8a6:	d103      	bne.n	804b8b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b8a8:	687b      	ldr	r3, [r7, #4]
 804b8aa:	2206      	movs	r2, #6
 804b8ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b8ae:	e059      	b.n	804b964 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b8b0:	7bbb      	ldrb	r3, [r7, #14]
 804b8b2:	2b03      	cmp	r3, #3
 804b8b4:	d156      	bne.n	804b964 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b8b6:	687b      	ldr	r3, [r7, #4]
 804b8b8:	2206      	movs	r2, #6
 804b8ba:	705a      	strb	r2, [r3, #1]
      break;
 804b8bc:	e052      	b.n	804b964 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b8be:	687b      	ldr	r3, [r7, #4]
 804b8c0:	2206      	movs	r2, #6
 804b8c2:	705a      	strb	r2, [r3, #1]
      break;
 804b8c4:	e04e      	b.n	804b964 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804b8c6:	687b      	ldr	r3, [r7, #4]
 804b8c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804b8cc:	2b00      	cmp	r3, #0
 804b8ce:	d019      	beq.n	804b904 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b8d0:	687b      	ldr	r3, [r7, #4]
 804b8d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804b8d6:	687b      	ldr	r3, [r7, #4]
 804b8d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b8dc:	23ff      	movs	r3, #255	; 0xff
 804b8de:	6878      	ldr	r0, [r7, #4]
 804b8e0:	f000 f926 	bl	804bb30 <USBH_Get_StringDesc>
 804b8e4:	4603      	mov	r3, r0
 804b8e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b8e8:	7bbb      	ldrb	r3, [r7, #14]
 804b8ea:	2b00      	cmp	r3, #0
 804b8ec:	d103      	bne.n	804b8f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b8ee:	687b      	ldr	r3, [r7, #4]
 804b8f0:	2207      	movs	r2, #7
 804b8f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b8f4:	e038      	b.n	804b968 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b8f6:	7bbb      	ldrb	r3, [r7, #14]
 804b8f8:	2b03      	cmp	r3, #3
 804b8fa:	d135      	bne.n	804b968 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b8fc:	687b      	ldr	r3, [r7, #4]
 804b8fe:	2207      	movs	r2, #7
 804b900:	705a      	strb	r2, [r3, #1]
      break;
 804b902:	e031      	b.n	804b968 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b904:	687b      	ldr	r3, [r7, #4]
 804b906:	2207      	movs	r2, #7
 804b908:	705a      	strb	r2, [r3, #1]
      break;
 804b90a:	e02d      	b.n	804b968 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804b90c:	687b      	ldr	r3, [r7, #4]
 804b90e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804b912:	2b00      	cmp	r3, #0
 804b914:	d017      	beq.n	804b946 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b916:	687b      	ldr	r3, [r7, #4]
 804b918:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804b91c:	687b      	ldr	r3, [r7, #4]
 804b91e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b922:	23ff      	movs	r3, #255	; 0xff
 804b924:	6878      	ldr	r0, [r7, #4]
 804b926:	f000 f903 	bl	804bb30 <USBH_Get_StringDesc>
 804b92a:	4603      	mov	r3, r0
 804b92c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b92e:	7bbb      	ldrb	r3, [r7, #14]
 804b930:	2b00      	cmp	r3, #0
 804b932:	d102      	bne.n	804b93a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804b934:	2300      	movs	r3, #0
 804b936:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804b938:	e018      	b.n	804b96c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b93a:	7bbb      	ldrb	r3, [r7, #14]
 804b93c:	2b03      	cmp	r3, #3
 804b93e:	d115      	bne.n	804b96c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804b940:	2300      	movs	r3, #0
 804b942:	73fb      	strb	r3, [r7, #15]
      break;
 804b944:	e012      	b.n	804b96c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804b946:	2300      	movs	r3, #0
 804b948:	73fb      	strb	r3, [r7, #15]
      break;
 804b94a:	e00f      	b.n	804b96c <USBH_HandleEnum+0x3bc>

    default:
      break;
 804b94c:	bf00      	nop
 804b94e:	e00e      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b950:	bf00      	nop
 804b952:	e00c      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b954:	bf00      	nop
 804b956:	e00a      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b958:	bf00      	nop
 804b95a:	e008      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b95c:	bf00      	nop
 804b95e:	e006      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b960:	bf00      	nop
 804b962:	e004      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b964:	bf00      	nop
 804b966:	e002      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b968:	bf00      	nop
 804b96a:	e000      	b.n	804b96e <USBH_HandleEnum+0x3be>
      break;
 804b96c:	bf00      	nop
  }
  return Status;
 804b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 804b970:	4618      	mov	r0, r3
 804b972:	3710      	adds	r7, #16
 804b974:	46bd      	mov	sp, r7
 804b976:	bd80      	pop	{r7, pc}

0804b978 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804b978:	b480      	push	{r7}
 804b97a:	b083      	sub	sp, #12
 804b97c:	af00      	add	r7, sp, #0
 804b97e:	6078      	str	r0, [r7, #4]
 804b980:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804b982:	687b      	ldr	r3, [r7, #4]
 804b984:	683a      	ldr	r2, [r7, #0]
 804b986:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804b98a:	bf00      	nop
 804b98c:	370c      	adds	r7, #12
 804b98e:	46bd      	mov	sp, r7
 804b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b994:	4770      	bx	lr

0804b996 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804b996:	b580      	push	{r7, lr}
 804b998:	b082      	sub	sp, #8
 804b99a:	af00      	add	r7, sp, #0
 804b99c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804b99e:	687b      	ldr	r3, [r7, #4]
 804b9a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b9a4:	1c5a      	adds	r2, r3, #1
 804b9a6:	687b      	ldr	r3, [r7, #4]
 804b9a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804b9ac:	6878      	ldr	r0, [r7, #4]
 804b9ae:	f000 f804 	bl	804b9ba <USBH_HandleSof>
}
 804b9b2:	bf00      	nop
 804b9b4:	3708      	adds	r7, #8
 804b9b6:	46bd      	mov	sp, r7
 804b9b8:	bd80      	pop	{r7, pc}

0804b9ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804b9ba:	b580      	push	{r7, lr}
 804b9bc:	b082      	sub	sp, #8
 804b9be:	af00      	add	r7, sp, #0
 804b9c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804b9c2:	687b      	ldr	r3, [r7, #4]
 804b9c4:	781b      	ldrb	r3, [r3, #0]
 804b9c6:	b2db      	uxtb	r3, r3
 804b9c8:	2b0b      	cmp	r3, #11
 804b9ca:	d10a      	bne.n	804b9e2 <USBH_HandleSof+0x28>
 804b9cc:	687b      	ldr	r3, [r7, #4]
 804b9ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b9d2:	2b00      	cmp	r3, #0
 804b9d4:	d005      	beq.n	804b9e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804b9d6:	687b      	ldr	r3, [r7, #4]
 804b9d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b9dc:	699b      	ldr	r3, [r3, #24]
 804b9de:	6878      	ldr	r0, [r7, #4]
 804b9e0:	4798      	blx	r3
  }
}
 804b9e2:	bf00      	nop
 804b9e4:	3708      	adds	r7, #8
 804b9e6:	46bd      	mov	sp, r7
 804b9e8:	bd80      	pop	{r7, pc}

0804b9ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804b9ea:	b480      	push	{r7}
 804b9ec:	b083      	sub	sp, #12
 804b9ee:	af00      	add	r7, sp, #0
 804b9f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804b9f2:	687b      	ldr	r3, [r7, #4]
 804b9f4:	2201      	movs	r2, #1
 804b9f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804b9fa:	bf00      	nop
}
 804b9fc:	370c      	adds	r7, #12
 804b9fe:	46bd      	mov	sp, r7
 804ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba04:	4770      	bx	lr

0804ba06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804ba06:	b480      	push	{r7}
 804ba08:	b083      	sub	sp, #12
 804ba0a:	af00      	add	r7, sp, #0
 804ba0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804ba0e:	687b      	ldr	r3, [r7, #4]
 804ba10:	2200      	movs	r2, #0
 804ba12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804ba16:	bf00      	nop
}
 804ba18:	370c      	adds	r7, #12
 804ba1a:	46bd      	mov	sp, r7
 804ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba20:	4770      	bx	lr

0804ba22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804ba22:	b480      	push	{r7}
 804ba24:	b083      	sub	sp, #12
 804ba26:	af00      	add	r7, sp, #0
 804ba28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804ba2a:	687b      	ldr	r3, [r7, #4]
 804ba2c:	2201      	movs	r2, #1
 804ba2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804ba32:	687b      	ldr	r3, [r7, #4]
 804ba34:	2200      	movs	r2, #0
 804ba36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804ba3a:	687b      	ldr	r3, [r7, #4]
 804ba3c:	2200      	movs	r2, #0
 804ba3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804ba42:	2300      	movs	r3, #0
}
 804ba44:	4618      	mov	r0, r3
 804ba46:	370c      	adds	r7, #12
 804ba48:	46bd      	mov	sp, r7
 804ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ba4e:	4770      	bx	lr

0804ba50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804ba50:	b580      	push	{r7, lr}
 804ba52:	b082      	sub	sp, #8
 804ba54:	af00      	add	r7, sp, #0
 804ba56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804ba58:	687b      	ldr	r3, [r7, #4]
 804ba5a:	2201      	movs	r2, #1
 804ba5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804ba60:	687b      	ldr	r3, [r7, #4]
 804ba62:	2200      	movs	r2, #0
 804ba64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804ba68:	687b      	ldr	r3, [r7, #4]
 804ba6a:	2200      	movs	r2, #0
 804ba6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804ba70:	6878      	ldr	r0, [r7, #4]
 804ba72:	f001 f84a 	bl	804cb0a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804ba76:	687b      	ldr	r3, [r7, #4]
 804ba78:	791b      	ldrb	r3, [r3, #4]
 804ba7a:	4619      	mov	r1, r3
 804ba7c:	6878      	ldr	r0, [r7, #4]
 804ba7e:	f000 fe91 	bl	804c7a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804ba82:	687b      	ldr	r3, [r7, #4]
 804ba84:	795b      	ldrb	r3, [r3, #5]
 804ba86:	4619      	mov	r1, r3
 804ba88:	6878      	ldr	r0, [r7, #4]
 804ba8a:	f000 fe8b 	bl	804c7a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804ba8e:	2300      	movs	r3, #0
}
 804ba90:	4618      	mov	r0, r3
 804ba92:	3708      	adds	r7, #8
 804ba94:	46bd      	mov	sp, r7
 804ba96:	bd80      	pop	{r7, pc}

0804ba98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804ba98:	b580      	push	{r7, lr}
 804ba9a:	b086      	sub	sp, #24
 804ba9c:	af02      	add	r7, sp, #8
 804ba9e:	6078      	str	r0, [r7, #4]
 804baa0:	460b      	mov	r3, r1
 804baa2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804baa4:	687b      	ldr	r3, [r7, #4]
 804baa6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804baaa:	78fb      	ldrb	r3, [r7, #3]
 804baac:	b29b      	uxth	r3, r3
 804baae:	9300      	str	r3, [sp, #0]
 804bab0:	4613      	mov	r3, r2
 804bab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 804bab6:	2100      	movs	r1, #0
 804bab8:	6878      	ldr	r0, [r7, #4]
 804baba:	f000 f864 	bl	804bb86 <USBH_GetDescriptor>
 804babe:	4603      	mov	r3, r0
 804bac0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804bac2:	7bfb      	ldrb	r3, [r7, #15]
 804bac4:	2b00      	cmp	r3, #0
 804bac6:	d10a      	bne.n	804bade <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804bac8:	687b      	ldr	r3, [r7, #4]
 804baca:	f203 3026 	addw	r0, r3, #806	; 0x326
 804bace:	687b      	ldr	r3, [r7, #4]
 804bad0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804bad4:	78fa      	ldrb	r2, [r7, #3]
 804bad6:	b292      	uxth	r2, r2
 804bad8:	4619      	mov	r1, r3
 804bada:	f000 f918 	bl	804bd0e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804bade:	7bfb      	ldrb	r3, [r7, #15]
}
 804bae0:	4618      	mov	r0, r3
 804bae2:	3710      	adds	r7, #16
 804bae4:	46bd      	mov	sp, r7
 804bae6:	bd80      	pop	{r7, pc}

0804bae8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804bae8:	b580      	push	{r7, lr}
 804baea:	b086      	sub	sp, #24
 804baec:	af02      	add	r7, sp, #8
 804baee:	6078      	str	r0, [r7, #4]
 804baf0:	460b      	mov	r3, r1
 804baf2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804baf4:	687b      	ldr	r3, [r7, #4]
 804baf6:	331c      	adds	r3, #28
 804baf8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804bafa:	887b      	ldrh	r3, [r7, #2]
 804bafc:	9300      	str	r3, [sp, #0]
 804bafe:	68bb      	ldr	r3, [r7, #8]
 804bb00:	f44f 7200 	mov.w	r2, #512	; 0x200
 804bb04:	2100      	movs	r1, #0
 804bb06:	6878      	ldr	r0, [r7, #4]
 804bb08:	f000 f83d 	bl	804bb86 <USBH_GetDescriptor>
 804bb0c:	4603      	mov	r3, r0
 804bb0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804bb10:	7bfb      	ldrb	r3, [r7, #15]
 804bb12:	2b00      	cmp	r3, #0
 804bb14:	d107      	bne.n	804bb26 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804bb16:	887b      	ldrh	r3, [r7, #2]
 804bb18:	461a      	mov	r2, r3
 804bb1a:	68b9      	ldr	r1, [r7, #8]
 804bb1c:	6878      	ldr	r0, [r7, #4]
 804bb1e:	f000 f987 	bl	804be30 <USBH_ParseCfgDesc>
 804bb22:	4603      	mov	r3, r0
 804bb24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804bb26:	7bfb      	ldrb	r3, [r7, #15]
}
 804bb28:	4618      	mov	r0, r3
 804bb2a:	3710      	adds	r7, #16
 804bb2c:	46bd      	mov	sp, r7
 804bb2e:	bd80      	pop	{r7, pc}

0804bb30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804bb30:	b580      	push	{r7, lr}
 804bb32:	b088      	sub	sp, #32
 804bb34:	af02      	add	r7, sp, #8
 804bb36:	60f8      	str	r0, [r7, #12]
 804bb38:	607a      	str	r2, [r7, #4]
 804bb3a:	461a      	mov	r2, r3
 804bb3c:	460b      	mov	r3, r1
 804bb3e:	72fb      	strb	r3, [r7, #11]
 804bb40:	4613      	mov	r3, r2
 804bb42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804bb44:	7afb      	ldrb	r3, [r7, #11]
 804bb46:	b29b      	uxth	r3, r3
 804bb48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804bb4c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804bb4e:	68fb      	ldr	r3, [r7, #12]
 804bb50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804bb54:	893b      	ldrh	r3, [r7, #8]
 804bb56:	9300      	str	r3, [sp, #0]
 804bb58:	460b      	mov	r3, r1
 804bb5a:	2100      	movs	r1, #0
 804bb5c:	68f8      	ldr	r0, [r7, #12]
 804bb5e:	f000 f812 	bl	804bb86 <USBH_GetDescriptor>
 804bb62:	4603      	mov	r3, r0
 804bb64:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804bb66:	7dfb      	ldrb	r3, [r7, #23]
 804bb68:	2b00      	cmp	r3, #0
 804bb6a:	d107      	bne.n	804bb7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804bb6c:	68fb      	ldr	r3, [r7, #12]
 804bb6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804bb72:	893a      	ldrh	r2, [r7, #8]
 804bb74:	6879      	ldr	r1, [r7, #4]
 804bb76:	4618      	mov	r0, r3
 804bb78:	f000 fb24 	bl	804c1c4 <USBH_ParseStringDesc>
  }

  return status;
 804bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 804bb7e:	4618      	mov	r0, r3
 804bb80:	3718      	adds	r7, #24
 804bb82:	46bd      	mov	sp, r7
 804bb84:	bd80      	pop	{r7, pc}

0804bb86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804bb86:	b580      	push	{r7, lr}
 804bb88:	b084      	sub	sp, #16
 804bb8a:	af00      	add	r7, sp, #0
 804bb8c:	60f8      	str	r0, [r7, #12]
 804bb8e:	607b      	str	r3, [r7, #4]
 804bb90:	460b      	mov	r3, r1
 804bb92:	72fb      	strb	r3, [r7, #11]
 804bb94:	4613      	mov	r3, r2
 804bb96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804bb98:	68fb      	ldr	r3, [r7, #12]
 804bb9a:	789b      	ldrb	r3, [r3, #2]
 804bb9c:	2b01      	cmp	r3, #1
 804bb9e:	d11c      	bne.n	804bbda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804bba0:	7afb      	ldrb	r3, [r7, #11]
 804bba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804bba6:	b2da      	uxtb	r2, r3
 804bba8:	68fb      	ldr	r3, [r7, #12]
 804bbaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804bbac:	68fb      	ldr	r3, [r7, #12]
 804bbae:	2206      	movs	r2, #6
 804bbb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804bbb2:	68fb      	ldr	r3, [r7, #12]
 804bbb4:	893a      	ldrh	r2, [r7, #8]
 804bbb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804bbb8:	893b      	ldrh	r3, [r7, #8]
 804bbba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804bbbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804bbc2:	d104      	bne.n	804bbce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804bbc4:	68fb      	ldr	r3, [r7, #12]
 804bbc6:	f240 4209 	movw	r2, #1033	; 0x409
 804bbca:	829a      	strh	r2, [r3, #20]
 804bbcc:	e002      	b.n	804bbd4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804bbce:	68fb      	ldr	r3, [r7, #12]
 804bbd0:	2200      	movs	r2, #0
 804bbd2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804bbd4:	68fb      	ldr	r3, [r7, #12]
 804bbd6:	8b3a      	ldrh	r2, [r7, #24]
 804bbd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804bbda:	8b3b      	ldrh	r3, [r7, #24]
 804bbdc:	461a      	mov	r2, r3
 804bbde:	6879      	ldr	r1, [r7, #4]
 804bbe0:	68f8      	ldr	r0, [r7, #12]
 804bbe2:	f000 fb3d 	bl	804c260 <USBH_CtlReq>
 804bbe6:	4603      	mov	r3, r0
}
 804bbe8:	4618      	mov	r0, r3
 804bbea:	3710      	adds	r7, #16
 804bbec:	46bd      	mov	sp, r7
 804bbee:	bd80      	pop	{r7, pc}

0804bbf0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804bbf0:	b580      	push	{r7, lr}
 804bbf2:	b082      	sub	sp, #8
 804bbf4:	af00      	add	r7, sp, #0
 804bbf6:	6078      	str	r0, [r7, #4]
 804bbf8:	460b      	mov	r3, r1
 804bbfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bbfc:	687b      	ldr	r3, [r7, #4]
 804bbfe:	789b      	ldrb	r3, [r3, #2]
 804bc00:	2b01      	cmp	r3, #1
 804bc02:	d10f      	bne.n	804bc24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804bc04:	687b      	ldr	r3, [r7, #4]
 804bc06:	2200      	movs	r2, #0
 804bc08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804bc0a:	687b      	ldr	r3, [r7, #4]
 804bc0c:	2205      	movs	r2, #5
 804bc0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804bc10:	78fb      	ldrb	r3, [r7, #3]
 804bc12:	b29a      	uxth	r2, r3
 804bc14:	687b      	ldr	r3, [r7, #4]
 804bc16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bc18:	687b      	ldr	r3, [r7, #4]
 804bc1a:	2200      	movs	r2, #0
 804bc1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bc1e:	687b      	ldr	r3, [r7, #4]
 804bc20:	2200      	movs	r2, #0
 804bc22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bc24:	2200      	movs	r2, #0
 804bc26:	2100      	movs	r1, #0
 804bc28:	6878      	ldr	r0, [r7, #4]
 804bc2a:	f000 fb19 	bl	804c260 <USBH_CtlReq>
 804bc2e:	4603      	mov	r3, r0
}
 804bc30:	4618      	mov	r0, r3
 804bc32:	3708      	adds	r7, #8
 804bc34:	46bd      	mov	sp, r7
 804bc36:	bd80      	pop	{r7, pc}

0804bc38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804bc38:	b580      	push	{r7, lr}
 804bc3a:	b082      	sub	sp, #8
 804bc3c:	af00      	add	r7, sp, #0
 804bc3e:	6078      	str	r0, [r7, #4]
 804bc40:	460b      	mov	r3, r1
 804bc42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804bc44:	687b      	ldr	r3, [r7, #4]
 804bc46:	789b      	ldrb	r3, [r3, #2]
 804bc48:	2b01      	cmp	r3, #1
 804bc4a:	d10e      	bne.n	804bc6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804bc4c:	687b      	ldr	r3, [r7, #4]
 804bc4e:	2200      	movs	r2, #0
 804bc50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804bc52:	687b      	ldr	r3, [r7, #4]
 804bc54:	2209      	movs	r2, #9
 804bc56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804bc58:	687b      	ldr	r3, [r7, #4]
 804bc5a:	887a      	ldrh	r2, [r7, #2]
 804bc5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bc5e:	687b      	ldr	r3, [r7, #4]
 804bc60:	2200      	movs	r2, #0
 804bc62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bc64:	687b      	ldr	r3, [r7, #4]
 804bc66:	2200      	movs	r2, #0
 804bc68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bc6a:	2200      	movs	r2, #0
 804bc6c:	2100      	movs	r1, #0
 804bc6e:	6878      	ldr	r0, [r7, #4]
 804bc70:	f000 faf6 	bl	804c260 <USBH_CtlReq>
 804bc74:	4603      	mov	r3, r0
}
 804bc76:	4618      	mov	r0, r3
 804bc78:	3708      	adds	r7, #8
 804bc7a:	46bd      	mov	sp, r7
 804bc7c:	bd80      	pop	{r7, pc}

0804bc7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804bc7e:	b580      	push	{r7, lr}
 804bc80:	b082      	sub	sp, #8
 804bc82:	af00      	add	r7, sp, #0
 804bc84:	6078      	str	r0, [r7, #4]
 804bc86:	460b      	mov	r3, r1
 804bc88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bc8a:	687b      	ldr	r3, [r7, #4]
 804bc8c:	789b      	ldrb	r3, [r3, #2]
 804bc8e:	2b01      	cmp	r3, #1
 804bc90:	d10f      	bne.n	804bcb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804bc92:	687b      	ldr	r3, [r7, #4]
 804bc94:	2200      	movs	r2, #0
 804bc96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804bc98:	687b      	ldr	r3, [r7, #4]
 804bc9a:	2203      	movs	r2, #3
 804bc9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804bc9e:	78fb      	ldrb	r3, [r7, #3]
 804bca0:	b29a      	uxth	r2, r3
 804bca2:	687b      	ldr	r3, [r7, #4]
 804bca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bca6:	687b      	ldr	r3, [r7, #4]
 804bca8:	2200      	movs	r2, #0
 804bcaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bcac:	687b      	ldr	r3, [r7, #4]
 804bcae:	2200      	movs	r2, #0
 804bcb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bcb2:	2200      	movs	r2, #0
 804bcb4:	2100      	movs	r1, #0
 804bcb6:	6878      	ldr	r0, [r7, #4]
 804bcb8:	f000 fad2 	bl	804c260 <USBH_CtlReq>
 804bcbc:	4603      	mov	r3, r0
}
 804bcbe:	4618      	mov	r0, r3
 804bcc0:	3708      	adds	r7, #8
 804bcc2:	46bd      	mov	sp, r7
 804bcc4:	bd80      	pop	{r7, pc}

0804bcc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804bcc6:	b580      	push	{r7, lr}
 804bcc8:	b082      	sub	sp, #8
 804bcca:	af00      	add	r7, sp, #0
 804bccc:	6078      	str	r0, [r7, #4]
 804bcce:	460b      	mov	r3, r1
 804bcd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bcd2:	687b      	ldr	r3, [r7, #4]
 804bcd4:	789b      	ldrb	r3, [r3, #2]
 804bcd6:	2b01      	cmp	r3, #1
 804bcd8:	d10f      	bne.n	804bcfa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804bcda:	687b      	ldr	r3, [r7, #4]
 804bcdc:	2202      	movs	r2, #2
 804bcde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804bce0:	687b      	ldr	r3, [r7, #4]
 804bce2:	2201      	movs	r2, #1
 804bce4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804bce6:	687b      	ldr	r3, [r7, #4]
 804bce8:	2200      	movs	r2, #0
 804bcea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804bcec:	78fb      	ldrb	r3, [r7, #3]
 804bcee:	b29a      	uxth	r2, r3
 804bcf0:	687b      	ldr	r3, [r7, #4]
 804bcf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bcf4:	687b      	ldr	r3, [r7, #4]
 804bcf6:	2200      	movs	r2, #0
 804bcf8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804bcfa:	2200      	movs	r2, #0
 804bcfc:	2100      	movs	r1, #0
 804bcfe:	6878      	ldr	r0, [r7, #4]
 804bd00:	f000 faae 	bl	804c260 <USBH_CtlReq>
 804bd04:	4603      	mov	r3, r0
}
 804bd06:	4618      	mov	r0, r3
 804bd08:	3708      	adds	r7, #8
 804bd0a:	46bd      	mov	sp, r7
 804bd0c:	bd80      	pop	{r7, pc}

0804bd0e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804bd0e:	b480      	push	{r7}
 804bd10:	b085      	sub	sp, #20
 804bd12:	af00      	add	r7, sp, #0
 804bd14:	60f8      	str	r0, [r7, #12]
 804bd16:	60b9      	str	r1, [r7, #8]
 804bd18:	4613      	mov	r3, r2
 804bd1a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804bd1c:	68bb      	ldr	r3, [r7, #8]
 804bd1e:	781a      	ldrb	r2, [r3, #0]
 804bd20:	68fb      	ldr	r3, [r7, #12]
 804bd22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804bd24:	68bb      	ldr	r3, [r7, #8]
 804bd26:	785a      	ldrb	r2, [r3, #1]
 804bd28:	68fb      	ldr	r3, [r7, #12]
 804bd2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804bd2c:	68bb      	ldr	r3, [r7, #8]
 804bd2e:	3302      	adds	r3, #2
 804bd30:	781b      	ldrb	r3, [r3, #0]
 804bd32:	b29a      	uxth	r2, r3
 804bd34:	68bb      	ldr	r3, [r7, #8]
 804bd36:	3303      	adds	r3, #3
 804bd38:	781b      	ldrb	r3, [r3, #0]
 804bd3a:	b29b      	uxth	r3, r3
 804bd3c:	021b      	lsls	r3, r3, #8
 804bd3e:	b29b      	uxth	r3, r3
 804bd40:	4313      	orrs	r3, r2
 804bd42:	b29a      	uxth	r2, r3
 804bd44:	68fb      	ldr	r3, [r7, #12]
 804bd46:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804bd48:	68bb      	ldr	r3, [r7, #8]
 804bd4a:	791a      	ldrb	r2, [r3, #4]
 804bd4c:	68fb      	ldr	r3, [r7, #12]
 804bd4e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804bd50:	68bb      	ldr	r3, [r7, #8]
 804bd52:	795a      	ldrb	r2, [r3, #5]
 804bd54:	68fb      	ldr	r3, [r7, #12]
 804bd56:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804bd58:	68bb      	ldr	r3, [r7, #8]
 804bd5a:	799a      	ldrb	r2, [r3, #6]
 804bd5c:	68fb      	ldr	r3, [r7, #12]
 804bd5e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804bd60:	68bb      	ldr	r3, [r7, #8]
 804bd62:	79da      	ldrb	r2, [r3, #7]
 804bd64:	68fb      	ldr	r3, [r7, #12]
 804bd66:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804bd68:	68fb      	ldr	r3, [r7, #12]
 804bd6a:	79db      	ldrb	r3, [r3, #7]
 804bd6c:	2b20      	cmp	r3, #32
 804bd6e:	dc11      	bgt.n	804bd94 <USBH_ParseDevDesc+0x86>
 804bd70:	2b08      	cmp	r3, #8
 804bd72:	db16      	blt.n	804bda2 <USBH_ParseDevDesc+0x94>
 804bd74:	3b08      	subs	r3, #8
 804bd76:	2201      	movs	r2, #1
 804bd78:	fa02 f303 	lsl.w	r3, r2, r3
 804bd7c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804bd80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804bd84:	2b00      	cmp	r3, #0
 804bd86:	bf14      	ite	ne
 804bd88:	2301      	movne	r3, #1
 804bd8a:	2300      	moveq	r3, #0
 804bd8c:	b2db      	uxtb	r3, r3
 804bd8e:	2b00      	cmp	r3, #0
 804bd90:	d102      	bne.n	804bd98 <USBH_ParseDevDesc+0x8a>
 804bd92:	e006      	b.n	804bda2 <USBH_ParseDevDesc+0x94>
 804bd94:	2b40      	cmp	r3, #64	; 0x40
 804bd96:	d104      	bne.n	804bda2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804bd98:	68fb      	ldr	r3, [r7, #12]
 804bd9a:	79da      	ldrb	r2, [r3, #7]
 804bd9c:	68fb      	ldr	r3, [r7, #12]
 804bd9e:	71da      	strb	r2, [r3, #7]
      break;
 804bda0:	e003      	b.n	804bdaa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804bda2:	68fb      	ldr	r3, [r7, #12]
 804bda4:	2240      	movs	r2, #64	; 0x40
 804bda6:	71da      	strb	r2, [r3, #7]
      break;
 804bda8:	bf00      	nop
  }

  if (length > 8U)
 804bdaa:	88fb      	ldrh	r3, [r7, #6]
 804bdac:	2b08      	cmp	r3, #8
 804bdae:	d939      	bls.n	804be24 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804bdb0:	68bb      	ldr	r3, [r7, #8]
 804bdb2:	3308      	adds	r3, #8
 804bdb4:	781b      	ldrb	r3, [r3, #0]
 804bdb6:	b29a      	uxth	r2, r3
 804bdb8:	68bb      	ldr	r3, [r7, #8]
 804bdba:	3309      	adds	r3, #9
 804bdbc:	781b      	ldrb	r3, [r3, #0]
 804bdbe:	b29b      	uxth	r3, r3
 804bdc0:	021b      	lsls	r3, r3, #8
 804bdc2:	b29b      	uxth	r3, r3
 804bdc4:	4313      	orrs	r3, r2
 804bdc6:	b29a      	uxth	r2, r3
 804bdc8:	68fb      	ldr	r3, [r7, #12]
 804bdca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804bdcc:	68bb      	ldr	r3, [r7, #8]
 804bdce:	330a      	adds	r3, #10
 804bdd0:	781b      	ldrb	r3, [r3, #0]
 804bdd2:	b29a      	uxth	r2, r3
 804bdd4:	68bb      	ldr	r3, [r7, #8]
 804bdd6:	330b      	adds	r3, #11
 804bdd8:	781b      	ldrb	r3, [r3, #0]
 804bdda:	b29b      	uxth	r3, r3
 804bddc:	021b      	lsls	r3, r3, #8
 804bdde:	b29b      	uxth	r3, r3
 804bde0:	4313      	orrs	r3, r2
 804bde2:	b29a      	uxth	r2, r3
 804bde4:	68fb      	ldr	r3, [r7, #12]
 804bde6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804bde8:	68bb      	ldr	r3, [r7, #8]
 804bdea:	330c      	adds	r3, #12
 804bdec:	781b      	ldrb	r3, [r3, #0]
 804bdee:	b29a      	uxth	r2, r3
 804bdf0:	68bb      	ldr	r3, [r7, #8]
 804bdf2:	330d      	adds	r3, #13
 804bdf4:	781b      	ldrb	r3, [r3, #0]
 804bdf6:	b29b      	uxth	r3, r3
 804bdf8:	021b      	lsls	r3, r3, #8
 804bdfa:	b29b      	uxth	r3, r3
 804bdfc:	4313      	orrs	r3, r2
 804bdfe:	b29a      	uxth	r2, r3
 804be00:	68fb      	ldr	r3, [r7, #12]
 804be02:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804be04:	68bb      	ldr	r3, [r7, #8]
 804be06:	7b9a      	ldrb	r2, [r3, #14]
 804be08:	68fb      	ldr	r3, [r7, #12]
 804be0a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804be0c:	68bb      	ldr	r3, [r7, #8]
 804be0e:	7bda      	ldrb	r2, [r3, #15]
 804be10:	68fb      	ldr	r3, [r7, #12]
 804be12:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804be14:	68bb      	ldr	r3, [r7, #8]
 804be16:	7c1a      	ldrb	r2, [r3, #16]
 804be18:	68fb      	ldr	r3, [r7, #12]
 804be1a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804be1c:	68bb      	ldr	r3, [r7, #8]
 804be1e:	7c5a      	ldrb	r2, [r3, #17]
 804be20:	68fb      	ldr	r3, [r7, #12]
 804be22:	745a      	strb	r2, [r3, #17]
  }
}
 804be24:	bf00      	nop
 804be26:	3714      	adds	r7, #20
 804be28:	46bd      	mov	sp, r7
 804be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804be2e:	4770      	bx	lr

0804be30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804be30:	b580      	push	{r7, lr}
 804be32:	b08c      	sub	sp, #48	; 0x30
 804be34:	af00      	add	r7, sp, #0
 804be36:	60f8      	str	r0, [r7, #12]
 804be38:	60b9      	str	r1, [r7, #8]
 804be3a:	4613      	mov	r3, r2
 804be3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804be3e:	68fb      	ldr	r3, [r7, #12]
 804be40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804be44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804be46:	2300      	movs	r3, #0
 804be48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804be4c:	68bb      	ldr	r3, [r7, #8]
 804be4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804be50:	2300      	movs	r3, #0
 804be52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804be56:	2300      	movs	r3, #0
 804be58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804be5c:	68bb      	ldr	r3, [r7, #8]
 804be5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804be60:	68bb      	ldr	r3, [r7, #8]
 804be62:	781a      	ldrb	r2, [r3, #0]
 804be64:	6a3b      	ldr	r3, [r7, #32]
 804be66:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804be68:	68bb      	ldr	r3, [r7, #8]
 804be6a:	785a      	ldrb	r2, [r3, #1]
 804be6c:	6a3b      	ldr	r3, [r7, #32]
 804be6e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804be70:	68bb      	ldr	r3, [r7, #8]
 804be72:	3302      	adds	r3, #2
 804be74:	781b      	ldrb	r3, [r3, #0]
 804be76:	b29a      	uxth	r2, r3
 804be78:	68bb      	ldr	r3, [r7, #8]
 804be7a:	3303      	adds	r3, #3
 804be7c:	781b      	ldrb	r3, [r3, #0]
 804be7e:	b29b      	uxth	r3, r3
 804be80:	021b      	lsls	r3, r3, #8
 804be82:	b29b      	uxth	r3, r3
 804be84:	4313      	orrs	r3, r2
 804be86:	b29b      	uxth	r3, r3
 804be88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804be8c:	bf28      	it	cs
 804be8e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804be92:	b29a      	uxth	r2, r3
 804be94:	6a3b      	ldr	r3, [r7, #32]
 804be96:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804be98:	68bb      	ldr	r3, [r7, #8]
 804be9a:	791a      	ldrb	r2, [r3, #4]
 804be9c:	6a3b      	ldr	r3, [r7, #32]
 804be9e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804bea0:	68bb      	ldr	r3, [r7, #8]
 804bea2:	795a      	ldrb	r2, [r3, #5]
 804bea4:	6a3b      	ldr	r3, [r7, #32]
 804bea6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804bea8:	68bb      	ldr	r3, [r7, #8]
 804beaa:	799a      	ldrb	r2, [r3, #6]
 804beac:	6a3b      	ldr	r3, [r7, #32]
 804beae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804beb0:	68bb      	ldr	r3, [r7, #8]
 804beb2:	79da      	ldrb	r2, [r3, #7]
 804beb4:	6a3b      	ldr	r3, [r7, #32]
 804beb6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804beb8:	68bb      	ldr	r3, [r7, #8]
 804beba:	7a1a      	ldrb	r2, [r3, #8]
 804bebc:	6a3b      	ldr	r3, [r7, #32]
 804bebe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804bec0:	6a3b      	ldr	r3, [r7, #32]
 804bec2:	781b      	ldrb	r3, [r3, #0]
 804bec4:	2b09      	cmp	r3, #9
 804bec6:	d002      	beq.n	804bece <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804bec8:	6a3b      	ldr	r3, [r7, #32]
 804beca:	2209      	movs	r2, #9
 804becc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804bece:	88fb      	ldrh	r3, [r7, #6]
 804bed0:	2b09      	cmp	r3, #9
 804bed2:	f240 809d 	bls.w	804c010 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804bed6:	2309      	movs	r3, #9
 804bed8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804beda:	2300      	movs	r3, #0
 804bedc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804bede:	e081      	b.n	804bfe4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804bee0:	f107 0316 	add.w	r3, r7, #22
 804bee4:	4619      	mov	r1, r3
 804bee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804bee8:	f000 f99f 	bl	804c22a <USBH_GetNextDesc>
 804beec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bef0:	785b      	ldrb	r3, [r3, #1]
 804bef2:	2b04      	cmp	r3, #4
 804bef4:	d176      	bne.n	804bfe4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804bef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bef8:	781b      	ldrb	r3, [r3, #0]
 804befa:	2b09      	cmp	r3, #9
 804befc:	d002      	beq.n	804bf04 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf00:	2209      	movs	r2, #9
 804bf02:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804bf04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bf08:	221a      	movs	r2, #26
 804bf0a:	fb02 f303 	mul.w	r3, r2, r3
 804bf0e:	3308      	adds	r3, #8
 804bf10:	6a3a      	ldr	r2, [r7, #32]
 804bf12:	4413      	add	r3, r2
 804bf14:	3302      	adds	r3, #2
 804bf16:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804bf18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804bf1a:	69f8      	ldr	r0, [r7, #28]
 804bf1c:	f000 f87e 	bl	804c01c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804bf20:	2300      	movs	r3, #0
 804bf22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804bf26:	2300      	movs	r3, #0
 804bf28:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804bf2a:	e043      	b.n	804bfb4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804bf2c:	f107 0316 	add.w	r3, r7, #22
 804bf30:	4619      	mov	r1, r3
 804bf32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804bf34:	f000 f979 	bl	804c22a <USBH_GetNextDesc>
 804bf38:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf3c:	785b      	ldrb	r3, [r3, #1]
 804bf3e:	2b05      	cmp	r3, #5
 804bf40:	d138      	bne.n	804bfb4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804bf42:	69fb      	ldr	r3, [r7, #28]
 804bf44:	795b      	ldrb	r3, [r3, #5]
 804bf46:	2b01      	cmp	r3, #1
 804bf48:	d10f      	bne.n	804bf6a <USBH_ParseCfgDesc+0x13a>
 804bf4a:	69fb      	ldr	r3, [r7, #28]
 804bf4c:	799b      	ldrb	r3, [r3, #6]
 804bf4e:	2b02      	cmp	r3, #2
 804bf50:	d10b      	bne.n	804bf6a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804bf52:	69fb      	ldr	r3, [r7, #28]
 804bf54:	79db      	ldrb	r3, [r3, #7]
 804bf56:	2b00      	cmp	r3, #0
 804bf58:	d10f      	bne.n	804bf7a <USBH_ParseCfgDesc+0x14a>
 804bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf5c:	781b      	ldrb	r3, [r3, #0]
 804bf5e:	2b09      	cmp	r3, #9
 804bf60:	d00b      	beq.n	804bf7a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf64:	2209      	movs	r2, #9
 804bf66:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804bf68:	e007      	b.n	804bf7a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf6c:	781b      	ldrb	r3, [r3, #0]
 804bf6e:	2b07      	cmp	r3, #7
 804bf70:	d004      	beq.n	804bf7c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bf74:	2207      	movs	r2, #7
 804bf76:	701a      	strb	r2, [r3, #0]
 804bf78:	e000      	b.n	804bf7c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804bf7a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804bf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bf80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804bf84:	3201      	adds	r2, #1
 804bf86:	00d2      	lsls	r2, r2, #3
 804bf88:	211a      	movs	r1, #26
 804bf8a:	fb01 f303 	mul.w	r3, r1, r3
 804bf8e:	4413      	add	r3, r2
 804bf90:	3308      	adds	r3, #8
 804bf92:	6a3a      	ldr	r2, [r7, #32]
 804bf94:	4413      	add	r3, r2
 804bf96:	3304      	adds	r3, #4
 804bf98:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804bf9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804bf9c:	69b9      	ldr	r1, [r7, #24]
 804bf9e:	68f8      	ldr	r0, [r7, #12]
 804bfa0:	f000 f86b 	bl	804c07a <USBH_ParseEPDesc>
 804bfa4:	4603      	mov	r3, r0
 804bfa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804bfaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804bfae:	3301      	adds	r3, #1
 804bfb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804bfb4:	69fb      	ldr	r3, [r7, #28]
 804bfb6:	791b      	ldrb	r3, [r3, #4]
 804bfb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804bfbc:	429a      	cmp	r2, r3
 804bfbe:	d204      	bcs.n	804bfca <USBH_ParseCfgDesc+0x19a>
 804bfc0:	6a3b      	ldr	r3, [r7, #32]
 804bfc2:	885a      	ldrh	r2, [r3, #2]
 804bfc4:	8afb      	ldrh	r3, [r7, #22]
 804bfc6:	429a      	cmp	r2, r3
 804bfc8:	d8b0      	bhi.n	804bf2c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804bfca:	69fb      	ldr	r3, [r7, #28]
 804bfcc:	791b      	ldrb	r3, [r3, #4]
 804bfce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804bfd2:	429a      	cmp	r2, r3
 804bfd4:	d201      	bcs.n	804bfda <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804bfd6:	2303      	movs	r3, #3
 804bfd8:	e01c      	b.n	804c014 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804bfda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bfde:	3301      	adds	r3, #1
 804bfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804bfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bfe8:	2b01      	cmp	r3, #1
 804bfea:	d805      	bhi.n	804bff8 <USBH_ParseCfgDesc+0x1c8>
 804bfec:	6a3b      	ldr	r3, [r7, #32]
 804bfee:	885a      	ldrh	r2, [r3, #2]
 804bff0:	8afb      	ldrh	r3, [r7, #22]
 804bff2:	429a      	cmp	r2, r3
 804bff4:	f63f af74 	bhi.w	804bee0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804bff8:	6a3b      	ldr	r3, [r7, #32]
 804bffa:	791b      	ldrb	r3, [r3, #4]
 804bffc:	2b02      	cmp	r3, #2
 804bffe:	bf28      	it	cs
 804c000:	2302      	movcs	r3, #2
 804c002:	b2db      	uxtb	r3, r3
 804c004:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804c008:	429a      	cmp	r2, r3
 804c00a:	d201      	bcs.n	804c010 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804c00c:	2303      	movs	r3, #3
 804c00e:	e001      	b.n	804c014 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804c010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804c014:	4618      	mov	r0, r3
 804c016:	3730      	adds	r7, #48	; 0x30
 804c018:	46bd      	mov	sp, r7
 804c01a:	bd80      	pop	{r7, pc}

0804c01c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804c01c:	b480      	push	{r7}
 804c01e:	b083      	sub	sp, #12
 804c020:	af00      	add	r7, sp, #0
 804c022:	6078      	str	r0, [r7, #4]
 804c024:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804c026:	683b      	ldr	r3, [r7, #0]
 804c028:	781a      	ldrb	r2, [r3, #0]
 804c02a:	687b      	ldr	r3, [r7, #4]
 804c02c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804c02e:	683b      	ldr	r3, [r7, #0]
 804c030:	785a      	ldrb	r2, [r3, #1]
 804c032:	687b      	ldr	r3, [r7, #4]
 804c034:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804c036:	683b      	ldr	r3, [r7, #0]
 804c038:	789a      	ldrb	r2, [r3, #2]
 804c03a:	687b      	ldr	r3, [r7, #4]
 804c03c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804c03e:	683b      	ldr	r3, [r7, #0]
 804c040:	78da      	ldrb	r2, [r3, #3]
 804c042:	687b      	ldr	r3, [r7, #4]
 804c044:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804c046:	683b      	ldr	r3, [r7, #0]
 804c048:	791a      	ldrb	r2, [r3, #4]
 804c04a:	687b      	ldr	r3, [r7, #4]
 804c04c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804c04e:	683b      	ldr	r3, [r7, #0]
 804c050:	795a      	ldrb	r2, [r3, #5]
 804c052:	687b      	ldr	r3, [r7, #4]
 804c054:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804c056:	683b      	ldr	r3, [r7, #0]
 804c058:	799a      	ldrb	r2, [r3, #6]
 804c05a:	687b      	ldr	r3, [r7, #4]
 804c05c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804c05e:	683b      	ldr	r3, [r7, #0]
 804c060:	79da      	ldrb	r2, [r3, #7]
 804c062:	687b      	ldr	r3, [r7, #4]
 804c064:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804c066:	683b      	ldr	r3, [r7, #0]
 804c068:	7a1a      	ldrb	r2, [r3, #8]
 804c06a:	687b      	ldr	r3, [r7, #4]
 804c06c:	721a      	strb	r2, [r3, #8]
}
 804c06e:	bf00      	nop
 804c070:	370c      	adds	r7, #12
 804c072:	46bd      	mov	sp, r7
 804c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c078:	4770      	bx	lr

0804c07a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804c07a:	b480      	push	{r7}
 804c07c:	b087      	sub	sp, #28
 804c07e:	af00      	add	r7, sp, #0
 804c080:	60f8      	str	r0, [r7, #12]
 804c082:	60b9      	str	r1, [r7, #8]
 804c084:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804c086:	2300      	movs	r3, #0
 804c088:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804c08a:	687b      	ldr	r3, [r7, #4]
 804c08c:	781a      	ldrb	r2, [r3, #0]
 804c08e:	68bb      	ldr	r3, [r7, #8]
 804c090:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804c092:	687b      	ldr	r3, [r7, #4]
 804c094:	785a      	ldrb	r2, [r3, #1]
 804c096:	68bb      	ldr	r3, [r7, #8]
 804c098:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804c09a:	687b      	ldr	r3, [r7, #4]
 804c09c:	789a      	ldrb	r2, [r3, #2]
 804c09e:	68bb      	ldr	r3, [r7, #8]
 804c0a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804c0a2:	687b      	ldr	r3, [r7, #4]
 804c0a4:	78da      	ldrb	r2, [r3, #3]
 804c0a6:	68bb      	ldr	r3, [r7, #8]
 804c0a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804c0aa:	687b      	ldr	r3, [r7, #4]
 804c0ac:	3304      	adds	r3, #4
 804c0ae:	781b      	ldrb	r3, [r3, #0]
 804c0b0:	b29a      	uxth	r2, r3
 804c0b2:	687b      	ldr	r3, [r7, #4]
 804c0b4:	3305      	adds	r3, #5
 804c0b6:	781b      	ldrb	r3, [r3, #0]
 804c0b8:	b29b      	uxth	r3, r3
 804c0ba:	021b      	lsls	r3, r3, #8
 804c0bc:	b29b      	uxth	r3, r3
 804c0be:	4313      	orrs	r3, r2
 804c0c0:	b29a      	uxth	r2, r3
 804c0c2:	68bb      	ldr	r3, [r7, #8]
 804c0c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804c0c6:	687b      	ldr	r3, [r7, #4]
 804c0c8:	799a      	ldrb	r2, [r3, #6]
 804c0ca:	68bb      	ldr	r3, [r7, #8]
 804c0cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804c0ce:	68bb      	ldr	r3, [r7, #8]
 804c0d0:	889b      	ldrh	r3, [r3, #4]
 804c0d2:	2b00      	cmp	r3, #0
 804c0d4:	d102      	bne.n	804c0dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804c0d6:	2303      	movs	r3, #3
 804c0d8:	75fb      	strb	r3, [r7, #23]
 804c0da:	e033      	b.n	804c144 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804c0dc:	68bb      	ldr	r3, [r7, #8]
 804c0de:	889b      	ldrh	r3, [r3, #4]
 804c0e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804c0e4:	f023 0307 	bic.w	r3, r3, #7
 804c0e8:	b29a      	uxth	r2, r3
 804c0ea:	68bb      	ldr	r3, [r7, #8]
 804c0ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804c0ee:	68bb      	ldr	r3, [r7, #8]
 804c0f0:	889b      	ldrh	r3, [r3, #4]
 804c0f2:	b21a      	sxth	r2, r3
 804c0f4:	687b      	ldr	r3, [r7, #4]
 804c0f6:	3304      	adds	r3, #4
 804c0f8:	781b      	ldrb	r3, [r3, #0]
 804c0fa:	b299      	uxth	r1, r3
 804c0fc:	687b      	ldr	r3, [r7, #4]
 804c0fe:	3305      	adds	r3, #5
 804c100:	781b      	ldrb	r3, [r3, #0]
 804c102:	b29b      	uxth	r3, r3
 804c104:	021b      	lsls	r3, r3, #8
 804c106:	b29b      	uxth	r3, r3
 804c108:	430b      	orrs	r3, r1
 804c10a:	b29b      	uxth	r3, r3
 804c10c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804c110:	2b00      	cmp	r3, #0
 804c112:	d110      	bne.n	804c136 <USBH_ParseEPDesc+0xbc>
 804c114:	687b      	ldr	r3, [r7, #4]
 804c116:	3304      	adds	r3, #4
 804c118:	781b      	ldrb	r3, [r3, #0]
 804c11a:	b299      	uxth	r1, r3
 804c11c:	687b      	ldr	r3, [r7, #4]
 804c11e:	3305      	adds	r3, #5
 804c120:	781b      	ldrb	r3, [r3, #0]
 804c122:	b29b      	uxth	r3, r3
 804c124:	021b      	lsls	r3, r3, #8
 804c126:	b29b      	uxth	r3, r3
 804c128:	430b      	orrs	r3, r1
 804c12a:	b29b      	uxth	r3, r3
 804c12c:	b21b      	sxth	r3, r3
 804c12e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804c132:	b21b      	sxth	r3, r3
 804c134:	e001      	b.n	804c13a <USBH_ParseEPDesc+0xc0>
 804c136:	f44f 7300 	mov.w	r3, #512	; 0x200
 804c13a:	4313      	orrs	r3, r2
 804c13c:	b21b      	sxth	r3, r3
 804c13e:	b29a      	uxth	r2, r3
 804c140:	68bb      	ldr	r3, [r7, #8]
 804c142:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804c144:	68fb      	ldr	r3, [r7, #12]
 804c146:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c14a:	2b00      	cmp	r3, #0
 804c14c:	d116      	bne.n	804c17c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c14e:	68bb      	ldr	r3, [r7, #8]
 804c150:	78db      	ldrb	r3, [r3, #3]
 804c152:	f003 0303 	and.w	r3, r3, #3
 804c156:	2b01      	cmp	r3, #1
 804c158:	d005      	beq.n	804c166 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804c15a:	68bb      	ldr	r3, [r7, #8]
 804c15c:	78db      	ldrb	r3, [r3, #3]
 804c15e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c162:	2b03      	cmp	r3, #3
 804c164:	d127      	bne.n	804c1b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c166:	68bb      	ldr	r3, [r7, #8]
 804c168:	799b      	ldrb	r3, [r3, #6]
 804c16a:	2b00      	cmp	r3, #0
 804c16c:	d003      	beq.n	804c176 <USBH_ParseEPDesc+0xfc>
 804c16e:	68bb      	ldr	r3, [r7, #8]
 804c170:	799b      	ldrb	r3, [r3, #6]
 804c172:	2b10      	cmp	r3, #16
 804c174:	d91f      	bls.n	804c1b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c176:	2303      	movs	r3, #3
 804c178:	75fb      	strb	r3, [r7, #23]
 804c17a:	e01c      	b.n	804c1b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804c17c:	68bb      	ldr	r3, [r7, #8]
 804c17e:	78db      	ldrb	r3, [r3, #3]
 804c180:	f003 0303 	and.w	r3, r3, #3
 804c184:	2b01      	cmp	r3, #1
 804c186:	d10a      	bne.n	804c19e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c188:	68bb      	ldr	r3, [r7, #8]
 804c18a:	799b      	ldrb	r3, [r3, #6]
 804c18c:	2b00      	cmp	r3, #0
 804c18e:	d003      	beq.n	804c198 <USBH_ParseEPDesc+0x11e>
 804c190:	68bb      	ldr	r3, [r7, #8]
 804c192:	799b      	ldrb	r3, [r3, #6]
 804c194:	2b10      	cmp	r3, #16
 804c196:	d90e      	bls.n	804c1b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c198:	2303      	movs	r3, #3
 804c19a:	75fb      	strb	r3, [r7, #23]
 804c19c:	e00b      	b.n	804c1b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804c19e:	68bb      	ldr	r3, [r7, #8]
 804c1a0:	78db      	ldrb	r3, [r3, #3]
 804c1a2:	f003 0303 	and.w	r3, r3, #3
 804c1a6:	2b03      	cmp	r3, #3
 804c1a8:	d105      	bne.n	804c1b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804c1aa:	68bb      	ldr	r3, [r7, #8]
 804c1ac:	799b      	ldrb	r3, [r3, #6]
 804c1ae:	2b00      	cmp	r3, #0
 804c1b0:	d101      	bne.n	804c1b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c1b2:	2303      	movs	r3, #3
 804c1b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804c1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 804c1b8:	4618      	mov	r0, r3
 804c1ba:	371c      	adds	r7, #28
 804c1bc:	46bd      	mov	sp, r7
 804c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c1c2:	4770      	bx	lr

0804c1c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804c1c4:	b480      	push	{r7}
 804c1c6:	b087      	sub	sp, #28
 804c1c8:	af00      	add	r7, sp, #0
 804c1ca:	60f8      	str	r0, [r7, #12]
 804c1cc:	60b9      	str	r1, [r7, #8]
 804c1ce:	4613      	mov	r3, r2
 804c1d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804c1d2:	68fb      	ldr	r3, [r7, #12]
 804c1d4:	3301      	adds	r3, #1
 804c1d6:	781b      	ldrb	r3, [r3, #0]
 804c1d8:	2b03      	cmp	r3, #3
 804c1da:	d120      	bne.n	804c21e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804c1dc:	68fb      	ldr	r3, [r7, #12]
 804c1de:	781b      	ldrb	r3, [r3, #0]
 804c1e0:	1e9a      	subs	r2, r3, #2
 804c1e2:	88fb      	ldrh	r3, [r7, #6]
 804c1e4:	4293      	cmp	r3, r2
 804c1e6:	bf28      	it	cs
 804c1e8:	4613      	movcs	r3, r2
 804c1ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804c1ec:	68fb      	ldr	r3, [r7, #12]
 804c1ee:	3302      	adds	r3, #2
 804c1f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804c1f2:	2300      	movs	r3, #0
 804c1f4:	82fb      	strh	r3, [r7, #22]
 804c1f6:	e00b      	b.n	804c210 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804c1f8:	8afb      	ldrh	r3, [r7, #22]
 804c1fa:	68fa      	ldr	r2, [r7, #12]
 804c1fc:	4413      	add	r3, r2
 804c1fe:	781a      	ldrb	r2, [r3, #0]
 804c200:	68bb      	ldr	r3, [r7, #8]
 804c202:	701a      	strb	r2, [r3, #0]
      pdest++;
 804c204:	68bb      	ldr	r3, [r7, #8]
 804c206:	3301      	adds	r3, #1
 804c208:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804c20a:	8afb      	ldrh	r3, [r7, #22]
 804c20c:	3302      	adds	r3, #2
 804c20e:	82fb      	strh	r3, [r7, #22]
 804c210:	8afa      	ldrh	r2, [r7, #22]
 804c212:	8abb      	ldrh	r3, [r7, #20]
 804c214:	429a      	cmp	r2, r3
 804c216:	d3ef      	bcc.n	804c1f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804c218:	68bb      	ldr	r3, [r7, #8]
 804c21a:	2200      	movs	r2, #0
 804c21c:	701a      	strb	r2, [r3, #0]
  }
}
 804c21e:	bf00      	nop
 804c220:	371c      	adds	r7, #28
 804c222:	46bd      	mov	sp, r7
 804c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c228:	4770      	bx	lr

0804c22a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804c22a:	b480      	push	{r7}
 804c22c:	b085      	sub	sp, #20
 804c22e:	af00      	add	r7, sp, #0
 804c230:	6078      	str	r0, [r7, #4]
 804c232:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804c234:	683b      	ldr	r3, [r7, #0]
 804c236:	881a      	ldrh	r2, [r3, #0]
 804c238:	687b      	ldr	r3, [r7, #4]
 804c23a:	781b      	ldrb	r3, [r3, #0]
 804c23c:	b29b      	uxth	r3, r3
 804c23e:	4413      	add	r3, r2
 804c240:	b29a      	uxth	r2, r3
 804c242:	683b      	ldr	r3, [r7, #0]
 804c244:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804c246:	687b      	ldr	r3, [r7, #4]
 804c248:	781b      	ldrb	r3, [r3, #0]
 804c24a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804c24c:	687b      	ldr	r3, [r7, #4]
 804c24e:	4413      	add	r3, r2
 804c250:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804c252:	68fb      	ldr	r3, [r7, #12]
}
 804c254:	4618      	mov	r0, r3
 804c256:	3714      	adds	r7, #20
 804c258:	46bd      	mov	sp, r7
 804c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c25e:	4770      	bx	lr

0804c260 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804c260:	b580      	push	{r7, lr}
 804c262:	b086      	sub	sp, #24
 804c264:	af00      	add	r7, sp, #0
 804c266:	60f8      	str	r0, [r7, #12]
 804c268:	60b9      	str	r1, [r7, #8]
 804c26a:	4613      	mov	r3, r2
 804c26c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804c26e:	2301      	movs	r3, #1
 804c270:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804c272:	68fb      	ldr	r3, [r7, #12]
 804c274:	789b      	ldrb	r3, [r3, #2]
 804c276:	2b01      	cmp	r3, #1
 804c278:	d002      	beq.n	804c280 <USBH_CtlReq+0x20>
 804c27a:	2b02      	cmp	r3, #2
 804c27c:	d00f      	beq.n	804c29e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804c27e:	e027      	b.n	804c2d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804c280:	68fb      	ldr	r3, [r7, #12]
 804c282:	68ba      	ldr	r2, [r7, #8]
 804c284:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804c286:	68fb      	ldr	r3, [r7, #12]
 804c288:	88fa      	ldrh	r2, [r7, #6]
 804c28a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804c28c:	68fb      	ldr	r3, [r7, #12]
 804c28e:	2201      	movs	r2, #1
 804c290:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804c292:	68fb      	ldr	r3, [r7, #12]
 804c294:	2202      	movs	r2, #2
 804c296:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804c298:	2301      	movs	r3, #1
 804c29a:	75fb      	strb	r3, [r7, #23]
      break;
 804c29c:	e018      	b.n	804c2d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804c29e:	68f8      	ldr	r0, [r7, #12]
 804c2a0:	f000 f81c 	bl	804c2dc <USBH_HandleControl>
 804c2a4:	4603      	mov	r3, r0
 804c2a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804c2a8:	7dfb      	ldrb	r3, [r7, #23]
 804c2aa:	2b00      	cmp	r3, #0
 804c2ac:	d002      	beq.n	804c2b4 <USBH_CtlReq+0x54>
 804c2ae:	7dfb      	ldrb	r3, [r7, #23]
 804c2b0:	2b03      	cmp	r3, #3
 804c2b2:	d106      	bne.n	804c2c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804c2b4:	68fb      	ldr	r3, [r7, #12]
 804c2b6:	2201      	movs	r2, #1
 804c2b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804c2ba:	68fb      	ldr	r3, [r7, #12]
 804c2bc:	2200      	movs	r2, #0
 804c2be:	761a      	strb	r2, [r3, #24]
      break;
 804c2c0:	e005      	b.n	804c2ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804c2c2:	7dfb      	ldrb	r3, [r7, #23]
 804c2c4:	2b02      	cmp	r3, #2
 804c2c6:	d102      	bne.n	804c2ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804c2c8:	68fb      	ldr	r3, [r7, #12]
 804c2ca:	2201      	movs	r2, #1
 804c2cc:	709a      	strb	r2, [r3, #2]
      break;
 804c2ce:	bf00      	nop
  }
  return status;
 804c2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 804c2d2:	4618      	mov	r0, r3
 804c2d4:	3718      	adds	r7, #24
 804c2d6:	46bd      	mov	sp, r7
 804c2d8:	bd80      	pop	{r7, pc}
	...

0804c2dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804c2dc:	b580      	push	{r7, lr}
 804c2de:	b086      	sub	sp, #24
 804c2e0:	af02      	add	r7, sp, #8
 804c2e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804c2e4:	2301      	movs	r3, #1
 804c2e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804c2e8:	2300      	movs	r3, #0
 804c2ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804c2ec:	687b      	ldr	r3, [r7, #4]
 804c2ee:	7e1b      	ldrb	r3, [r3, #24]
 804c2f0:	3b01      	subs	r3, #1
 804c2f2:	2b0a      	cmp	r3, #10
 804c2f4:	f200 8156 	bhi.w	804c5a4 <USBH_HandleControl+0x2c8>
 804c2f8:	a201      	add	r2, pc, #4	; (adr r2, 804c300 <USBH_HandleControl+0x24>)
 804c2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c2fe:	bf00      	nop
 804c300:	0804c32d 	.word	0x0804c32d
 804c304:	0804c347 	.word	0x0804c347
 804c308:	0804c3b1 	.word	0x0804c3b1
 804c30c:	0804c3d7 	.word	0x0804c3d7
 804c310:	0804c40f 	.word	0x0804c40f
 804c314:	0804c439 	.word	0x0804c439
 804c318:	0804c48b 	.word	0x0804c48b
 804c31c:	0804c4ad 	.word	0x0804c4ad
 804c320:	0804c4e9 	.word	0x0804c4e9
 804c324:	0804c50f 	.word	0x0804c50f
 804c328:	0804c54d 	.word	0x0804c54d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804c32c:	687b      	ldr	r3, [r7, #4]
 804c32e:	f103 0110 	add.w	r1, r3, #16
 804c332:	687b      	ldr	r3, [r7, #4]
 804c334:	795b      	ldrb	r3, [r3, #5]
 804c336:	461a      	mov	r2, r3
 804c338:	6878      	ldr	r0, [r7, #4]
 804c33a:	f000 f943 	bl	804c5c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804c33e:	687b      	ldr	r3, [r7, #4]
 804c340:	2202      	movs	r2, #2
 804c342:	761a      	strb	r2, [r3, #24]
      break;
 804c344:	e139      	b.n	804c5ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c346:	687b      	ldr	r3, [r7, #4]
 804c348:	795b      	ldrb	r3, [r3, #5]
 804c34a:	4619      	mov	r1, r3
 804c34c:	6878      	ldr	r0, [r7, #4]
 804c34e:	f000 fccb 	bl	804cce8 <USBH_LL_GetURBState>
 804c352:	4603      	mov	r3, r0
 804c354:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804c356:	7bbb      	ldrb	r3, [r7, #14]
 804c358:	2b01      	cmp	r3, #1
 804c35a:	d11e      	bne.n	804c39a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804c35c:	687b      	ldr	r3, [r7, #4]
 804c35e:	7c1b      	ldrb	r3, [r3, #16]
 804c360:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804c364:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804c366:	687b      	ldr	r3, [r7, #4]
 804c368:	8adb      	ldrh	r3, [r3, #22]
 804c36a:	2b00      	cmp	r3, #0
 804c36c:	d00a      	beq.n	804c384 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804c36e:	7b7b      	ldrb	r3, [r7, #13]
 804c370:	2b80      	cmp	r3, #128	; 0x80
 804c372:	d103      	bne.n	804c37c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804c374:	687b      	ldr	r3, [r7, #4]
 804c376:	2203      	movs	r2, #3
 804c378:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c37a:	e115      	b.n	804c5a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804c37c:	687b      	ldr	r3, [r7, #4]
 804c37e:	2205      	movs	r2, #5
 804c380:	761a      	strb	r2, [r3, #24]
      break;
 804c382:	e111      	b.n	804c5a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804c384:	7b7b      	ldrb	r3, [r7, #13]
 804c386:	2b80      	cmp	r3, #128	; 0x80
 804c388:	d103      	bne.n	804c392 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804c38a:	687b      	ldr	r3, [r7, #4]
 804c38c:	2209      	movs	r2, #9
 804c38e:	761a      	strb	r2, [r3, #24]
      break;
 804c390:	e10a      	b.n	804c5a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804c392:	687b      	ldr	r3, [r7, #4]
 804c394:	2207      	movs	r2, #7
 804c396:	761a      	strb	r2, [r3, #24]
      break;
 804c398:	e106      	b.n	804c5a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804c39a:	7bbb      	ldrb	r3, [r7, #14]
 804c39c:	2b04      	cmp	r3, #4
 804c39e:	d003      	beq.n	804c3a8 <USBH_HandleControl+0xcc>
 804c3a0:	7bbb      	ldrb	r3, [r7, #14]
 804c3a2:	2b02      	cmp	r3, #2
 804c3a4:	f040 8100 	bne.w	804c5a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804c3a8:	687b      	ldr	r3, [r7, #4]
 804c3aa:	220b      	movs	r2, #11
 804c3ac:	761a      	strb	r2, [r3, #24]
      break;
 804c3ae:	e0fb      	b.n	804c5a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804c3b0:	687b      	ldr	r3, [r7, #4]
 804c3b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c3b6:	b29a      	uxth	r2, r3
 804c3b8:	687b      	ldr	r3, [r7, #4]
 804c3ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804c3bc:	687b      	ldr	r3, [r7, #4]
 804c3be:	6899      	ldr	r1, [r3, #8]
 804c3c0:	687b      	ldr	r3, [r7, #4]
 804c3c2:	899a      	ldrh	r2, [r3, #12]
 804c3c4:	687b      	ldr	r3, [r7, #4]
 804c3c6:	791b      	ldrb	r3, [r3, #4]
 804c3c8:	6878      	ldr	r0, [r7, #4]
 804c3ca:	f000 f93a 	bl	804c642 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804c3ce:	687b      	ldr	r3, [r7, #4]
 804c3d0:	2204      	movs	r2, #4
 804c3d2:	761a      	strb	r2, [r3, #24]
      break;
 804c3d4:	e0f1      	b.n	804c5ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804c3d6:	687b      	ldr	r3, [r7, #4]
 804c3d8:	791b      	ldrb	r3, [r3, #4]
 804c3da:	4619      	mov	r1, r3
 804c3dc:	6878      	ldr	r0, [r7, #4]
 804c3de:	f000 fc83 	bl	804cce8 <USBH_LL_GetURBState>
 804c3e2:	4603      	mov	r3, r0
 804c3e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804c3e6:	7bbb      	ldrb	r3, [r7, #14]
 804c3e8:	2b01      	cmp	r3, #1
 804c3ea:	d102      	bne.n	804c3f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804c3ec:	687b      	ldr	r3, [r7, #4]
 804c3ee:	2209      	movs	r2, #9
 804c3f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804c3f2:	7bbb      	ldrb	r3, [r7, #14]
 804c3f4:	2b05      	cmp	r3, #5
 804c3f6:	d102      	bne.n	804c3fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804c3f8:	2303      	movs	r3, #3
 804c3fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c3fc:	e0d6      	b.n	804c5ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804c3fe:	7bbb      	ldrb	r3, [r7, #14]
 804c400:	2b04      	cmp	r3, #4
 804c402:	f040 80d3 	bne.w	804c5ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804c406:	687b      	ldr	r3, [r7, #4]
 804c408:	220b      	movs	r2, #11
 804c40a:	761a      	strb	r2, [r3, #24]
      break;
 804c40c:	e0ce      	b.n	804c5ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804c40e:	687b      	ldr	r3, [r7, #4]
 804c410:	6899      	ldr	r1, [r3, #8]
 804c412:	687b      	ldr	r3, [r7, #4]
 804c414:	899a      	ldrh	r2, [r3, #12]
 804c416:	687b      	ldr	r3, [r7, #4]
 804c418:	795b      	ldrb	r3, [r3, #5]
 804c41a:	2001      	movs	r0, #1
 804c41c:	9000      	str	r0, [sp, #0]
 804c41e:	6878      	ldr	r0, [r7, #4]
 804c420:	f000 f8ea 	bl	804c5f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804c424:	687b      	ldr	r3, [r7, #4]
 804c426:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c42a:	b29a      	uxth	r2, r3
 804c42c:	687b      	ldr	r3, [r7, #4]
 804c42e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804c430:	687b      	ldr	r3, [r7, #4]
 804c432:	2206      	movs	r2, #6
 804c434:	761a      	strb	r2, [r3, #24]
      break;
 804c436:	e0c0      	b.n	804c5ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c438:	687b      	ldr	r3, [r7, #4]
 804c43a:	795b      	ldrb	r3, [r3, #5]
 804c43c:	4619      	mov	r1, r3
 804c43e:	6878      	ldr	r0, [r7, #4]
 804c440:	f000 fc52 	bl	804cce8 <USBH_LL_GetURBState>
 804c444:	4603      	mov	r3, r0
 804c446:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804c448:	7bbb      	ldrb	r3, [r7, #14]
 804c44a:	2b01      	cmp	r3, #1
 804c44c:	d103      	bne.n	804c456 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804c44e:	687b      	ldr	r3, [r7, #4]
 804c450:	2207      	movs	r2, #7
 804c452:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c454:	e0ac      	b.n	804c5b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804c456:	7bbb      	ldrb	r3, [r7, #14]
 804c458:	2b05      	cmp	r3, #5
 804c45a:	d105      	bne.n	804c468 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804c45c:	687b      	ldr	r3, [r7, #4]
 804c45e:	220c      	movs	r2, #12
 804c460:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804c462:	2303      	movs	r3, #3
 804c464:	73fb      	strb	r3, [r7, #15]
      break;
 804c466:	e0a3      	b.n	804c5b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804c468:	7bbb      	ldrb	r3, [r7, #14]
 804c46a:	2b02      	cmp	r3, #2
 804c46c:	d103      	bne.n	804c476 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804c46e:	687b      	ldr	r3, [r7, #4]
 804c470:	2205      	movs	r2, #5
 804c472:	761a      	strb	r2, [r3, #24]
      break;
 804c474:	e09c      	b.n	804c5b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804c476:	7bbb      	ldrb	r3, [r7, #14]
 804c478:	2b04      	cmp	r3, #4
 804c47a:	f040 8099 	bne.w	804c5b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804c47e:	687b      	ldr	r3, [r7, #4]
 804c480:	220b      	movs	r2, #11
 804c482:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804c484:	2302      	movs	r3, #2
 804c486:	73fb      	strb	r3, [r7, #15]
      break;
 804c488:	e092      	b.n	804c5b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804c48a:	687b      	ldr	r3, [r7, #4]
 804c48c:	791b      	ldrb	r3, [r3, #4]
 804c48e:	2200      	movs	r2, #0
 804c490:	2100      	movs	r1, #0
 804c492:	6878      	ldr	r0, [r7, #4]
 804c494:	f000 f8d5 	bl	804c642 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804c498:	687b      	ldr	r3, [r7, #4]
 804c49a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c49e:	b29a      	uxth	r2, r3
 804c4a0:	687b      	ldr	r3, [r7, #4]
 804c4a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804c4a4:	687b      	ldr	r3, [r7, #4]
 804c4a6:	2208      	movs	r2, #8
 804c4a8:	761a      	strb	r2, [r3, #24]

      break;
 804c4aa:	e086      	b.n	804c5ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804c4ac:	687b      	ldr	r3, [r7, #4]
 804c4ae:	791b      	ldrb	r3, [r3, #4]
 804c4b0:	4619      	mov	r1, r3
 804c4b2:	6878      	ldr	r0, [r7, #4]
 804c4b4:	f000 fc18 	bl	804cce8 <USBH_LL_GetURBState>
 804c4b8:	4603      	mov	r3, r0
 804c4ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804c4bc:	7bbb      	ldrb	r3, [r7, #14]
 804c4be:	2b01      	cmp	r3, #1
 804c4c0:	d105      	bne.n	804c4ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804c4c2:	687b      	ldr	r3, [r7, #4]
 804c4c4:	220d      	movs	r2, #13
 804c4c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804c4c8:	2300      	movs	r3, #0
 804c4ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c4cc:	e072      	b.n	804c5b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804c4ce:	7bbb      	ldrb	r3, [r7, #14]
 804c4d0:	2b04      	cmp	r3, #4
 804c4d2:	d103      	bne.n	804c4dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804c4d4:	687b      	ldr	r3, [r7, #4]
 804c4d6:	220b      	movs	r2, #11
 804c4d8:	761a      	strb	r2, [r3, #24]
      break;
 804c4da:	e06b      	b.n	804c5b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804c4dc:	7bbb      	ldrb	r3, [r7, #14]
 804c4de:	2b05      	cmp	r3, #5
 804c4e0:	d168      	bne.n	804c5b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804c4e2:	2303      	movs	r3, #3
 804c4e4:	73fb      	strb	r3, [r7, #15]
      break;
 804c4e6:	e065      	b.n	804c5b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804c4e8:	687b      	ldr	r3, [r7, #4]
 804c4ea:	795b      	ldrb	r3, [r3, #5]
 804c4ec:	2201      	movs	r2, #1
 804c4ee:	9200      	str	r2, [sp, #0]
 804c4f0:	2200      	movs	r2, #0
 804c4f2:	2100      	movs	r1, #0
 804c4f4:	6878      	ldr	r0, [r7, #4]
 804c4f6:	f000 f87f 	bl	804c5f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804c4fa:	687b      	ldr	r3, [r7, #4]
 804c4fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c500:	b29a      	uxth	r2, r3
 804c502:	687b      	ldr	r3, [r7, #4]
 804c504:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804c506:	687b      	ldr	r3, [r7, #4]
 804c508:	220a      	movs	r2, #10
 804c50a:	761a      	strb	r2, [r3, #24]
      break;
 804c50c:	e055      	b.n	804c5ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c50e:	687b      	ldr	r3, [r7, #4]
 804c510:	795b      	ldrb	r3, [r3, #5]
 804c512:	4619      	mov	r1, r3
 804c514:	6878      	ldr	r0, [r7, #4]
 804c516:	f000 fbe7 	bl	804cce8 <USBH_LL_GetURBState>
 804c51a:	4603      	mov	r3, r0
 804c51c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804c51e:	7bbb      	ldrb	r3, [r7, #14]
 804c520:	2b01      	cmp	r3, #1
 804c522:	d105      	bne.n	804c530 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804c524:	2300      	movs	r3, #0
 804c526:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804c528:	687b      	ldr	r3, [r7, #4]
 804c52a:	220d      	movs	r2, #13
 804c52c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c52e:	e043      	b.n	804c5b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804c530:	7bbb      	ldrb	r3, [r7, #14]
 804c532:	2b02      	cmp	r3, #2
 804c534:	d103      	bne.n	804c53e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804c536:	687b      	ldr	r3, [r7, #4]
 804c538:	2209      	movs	r2, #9
 804c53a:	761a      	strb	r2, [r3, #24]
      break;
 804c53c:	e03c      	b.n	804c5b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804c53e:	7bbb      	ldrb	r3, [r7, #14]
 804c540:	2b04      	cmp	r3, #4
 804c542:	d139      	bne.n	804c5b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804c544:	687b      	ldr	r3, [r7, #4]
 804c546:	220b      	movs	r2, #11
 804c548:	761a      	strb	r2, [r3, #24]
      break;
 804c54a:	e035      	b.n	804c5b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804c54c:	687b      	ldr	r3, [r7, #4]
 804c54e:	7e5b      	ldrb	r3, [r3, #25]
 804c550:	3301      	adds	r3, #1
 804c552:	b2da      	uxtb	r2, r3
 804c554:	687b      	ldr	r3, [r7, #4]
 804c556:	765a      	strb	r2, [r3, #25]
 804c558:	687b      	ldr	r3, [r7, #4]
 804c55a:	7e5b      	ldrb	r3, [r3, #25]
 804c55c:	2b02      	cmp	r3, #2
 804c55e:	d806      	bhi.n	804c56e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804c560:	687b      	ldr	r3, [r7, #4]
 804c562:	2201      	movs	r2, #1
 804c564:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804c566:	687b      	ldr	r3, [r7, #4]
 804c568:	2201      	movs	r2, #1
 804c56a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804c56c:	e025      	b.n	804c5ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804c56e:	687b      	ldr	r3, [r7, #4]
 804c570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804c574:	2106      	movs	r1, #6
 804c576:	6878      	ldr	r0, [r7, #4]
 804c578:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804c57a:	687b      	ldr	r3, [r7, #4]
 804c57c:	2200      	movs	r2, #0
 804c57e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804c580:	687b      	ldr	r3, [r7, #4]
 804c582:	795b      	ldrb	r3, [r3, #5]
 804c584:	4619      	mov	r1, r3
 804c586:	6878      	ldr	r0, [r7, #4]
 804c588:	f000 f90c 	bl	804c7a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804c58c:	687b      	ldr	r3, [r7, #4]
 804c58e:	791b      	ldrb	r3, [r3, #4]
 804c590:	4619      	mov	r1, r3
 804c592:	6878      	ldr	r0, [r7, #4]
 804c594:	f000 f906 	bl	804c7a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804c598:	687b      	ldr	r3, [r7, #4]
 804c59a:	2200      	movs	r2, #0
 804c59c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804c59e:	2302      	movs	r3, #2
 804c5a0:	73fb      	strb	r3, [r7, #15]
      break;
 804c5a2:	e00a      	b.n	804c5ba <USBH_HandleControl+0x2de>

    default:
      break;
 804c5a4:	bf00      	nop
 804c5a6:	e008      	b.n	804c5ba <USBH_HandleControl+0x2de>
      break;
 804c5a8:	bf00      	nop
 804c5aa:	e006      	b.n	804c5ba <USBH_HandleControl+0x2de>
      break;
 804c5ac:	bf00      	nop
 804c5ae:	e004      	b.n	804c5ba <USBH_HandleControl+0x2de>
      break;
 804c5b0:	bf00      	nop
 804c5b2:	e002      	b.n	804c5ba <USBH_HandleControl+0x2de>
      break;
 804c5b4:	bf00      	nop
 804c5b6:	e000      	b.n	804c5ba <USBH_HandleControl+0x2de>
      break;
 804c5b8:	bf00      	nop
  }

  return status;
 804c5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 804c5bc:	4618      	mov	r0, r3
 804c5be:	3710      	adds	r7, #16
 804c5c0:	46bd      	mov	sp, r7
 804c5c2:	bd80      	pop	{r7, pc}

0804c5c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804c5c4:	b580      	push	{r7, lr}
 804c5c6:	b088      	sub	sp, #32
 804c5c8:	af04      	add	r7, sp, #16
 804c5ca:	60f8      	str	r0, [r7, #12]
 804c5cc:	60b9      	str	r1, [r7, #8]
 804c5ce:	4613      	mov	r3, r2
 804c5d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c5d2:	79f9      	ldrb	r1, [r7, #7]
 804c5d4:	2300      	movs	r3, #0
 804c5d6:	9303      	str	r3, [sp, #12]
 804c5d8:	2308      	movs	r3, #8
 804c5da:	9302      	str	r3, [sp, #8]
 804c5dc:	68bb      	ldr	r3, [r7, #8]
 804c5de:	9301      	str	r3, [sp, #4]
 804c5e0:	2300      	movs	r3, #0
 804c5e2:	9300      	str	r3, [sp, #0]
 804c5e4:	2300      	movs	r3, #0
 804c5e6:	2200      	movs	r2, #0
 804c5e8:	68f8      	ldr	r0, [r7, #12]
 804c5ea:	f000 fb4c 	bl	804cc86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804c5ee:	2300      	movs	r3, #0
}
 804c5f0:	4618      	mov	r0, r3
 804c5f2:	3710      	adds	r7, #16
 804c5f4:	46bd      	mov	sp, r7
 804c5f6:	bd80      	pop	{r7, pc}

0804c5f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804c5f8:	b580      	push	{r7, lr}
 804c5fa:	b088      	sub	sp, #32
 804c5fc:	af04      	add	r7, sp, #16
 804c5fe:	60f8      	str	r0, [r7, #12]
 804c600:	60b9      	str	r1, [r7, #8]
 804c602:	4611      	mov	r1, r2
 804c604:	461a      	mov	r2, r3
 804c606:	460b      	mov	r3, r1
 804c608:	80fb      	strh	r3, [r7, #6]
 804c60a:	4613      	mov	r3, r2
 804c60c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804c60e:	68fb      	ldr	r3, [r7, #12]
 804c610:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c614:	2b00      	cmp	r3, #0
 804c616:	d001      	beq.n	804c61c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804c618:	2300      	movs	r3, #0
 804c61a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c61c:	7979      	ldrb	r1, [r7, #5]
 804c61e:	7e3b      	ldrb	r3, [r7, #24]
 804c620:	9303      	str	r3, [sp, #12]
 804c622:	88fb      	ldrh	r3, [r7, #6]
 804c624:	9302      	str	r3, [sp, #8]
 804c626:	68bb      	ldr	r3, [r7, #8]
 804c628:	9301      	str	r3, [sp, #4]
 804c62a:	2301      	movs	r3, #1
 804c62c:	9300      	str	r3, [sp, #0]
 804c62e:	2300      	movs	r3, #0
 804c630:	2200      	movs	r2, #0
 804c632:	68f8      	ldr	r0, [r7, #12]
 804c634:	f000 fb27 	bl	804cc86 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804c638:	2300      	movs	r3, #0
}
 804c63a:	4618      	mov	r0, r3
 804c63c:	3710      	adds	r7, #16
 804c63e:	46bd      	mov	sp, r7
 804c640:	bd80      	pop	{r7, pc}

0804c642 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804c642:	b580      	push	{r7, lr}
 804c644:	b088      	sub	sp, #32
 804c646:	af04      	add	r7, sp, #16
 804c648:	60f8      	str	r0, [r7, #12]
 804c64a:	60b9      	str	r1, [r7, #8]
 804c64c:	4611      	mov	r1, r2
 804c64e:	461a      	mov	r2, r3
 804c650:	460b      	mov	r3, r1
 804c652:	80fb      	strh	r3, [r7, #6]
 804c654:	4613      	mov	r3, r2
 804c656:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c658:	7979      	ldrb	r1, [r7, #5]
 804c65a:	2300      	movs	r3, #0
 804c65c:	9303      	str	r3, [sp, #12]
 804c65e:	88fb      	ldrh	r3, [r7, #6]
 804c660:	9302      	str	r3, [sp, #8]
 804c662:	68bb      	ldr	r3, [r7, #8]
 804c664:	9301      	str	r3, [sp, #4]
 804c666:	2301      	movs	r3, #1
 804c668:	9300      	str	r3, [sp, #0]
 804c66a:	2300      	movs	r3, #0
 804c66c:	2201      	movs	r2, #1
 804c66e:	68f8      	ldr	r0, [r7, #12]
 804c670:	f000 fb09 	bl	804cc86 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804c674:	2300      	movs	r3, #0

}
 804c676:	4618      	mov	r0, r3
 804c678:	3710      	adds	r7, #16
 804c67a:	46bd      	mov	sp, r7
 804c67c:	bd80      	pop	{r7, pc}

0804c67e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804c67e:	b580      	push	{r7, lr}
 804c680:	b088      	sub	sp, #32
 804c682:	af04      	add	r7, sp, #16
 804c684:	60f8      	str	r0, [r7, #12]
 804c686:	60b9      	str	r1, [r7, #8]
 804c688:	4611      	mov	r1, r2
 804c68a:	461a      	mov	r2, r3
 804c68c:	460b      	mov	r3, r1
 804c68e:	80fb      	strh	r3, [r7, #6]
 804c690:	4613      	mov	r3, r2
 804c692:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804c694:	68fb      	ldr	r3, [r7, #12]
 804c696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c69a:	2b00      	cmp	r3, #0
 804c69c:	d001      	beq.n	804c6a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804c69e:	2300      	movs	r3, #0
 804c6a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c6a2:	7979      	ldrb	r1, [r7, #5]
 804c6a4:	7e3b      	ldrb	r3, [r7, #24]
 804c6a6:	9303      	str	r3, [sp, #12]
 804c6a8:	88fb      	ldrh	r3, [r7, #6]
 804c6aa:	9302      	str	r3, [sp, #8]
 804c6ac:	68bb      	ldr	r3, [r7, #8]
 804c6ae:	9301      	str	r3, [sp, #4]
 804c6b0:	2301      	movs	r3, #1
 804c6b2:	9300      	str	r3, [sp, #0]
 804c6b4:	2302      	movs	r3, #2
 804c6b6:	2200      	movs	r2, #0
 804c6b8:	68f8      	ldr	r0, [r7, #12]
 804c6ba:	f000 fae4 	bl	804cc86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804c6be:	2300      	movs	r3, #0
}
 804c6c0:	4618      	mov	r0, r3
 804c6c2:	3710      	adds	r7, #16
 804c6c4:	46bd      	mov	sp, r7
 804c6c6:	bd80      	pop	{r7, pc}

0804c6c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804c6c8:	b580      	push	{r7, lr}
 804c6ca:	b088      	sub	sp, #32
 804c6cc:	af04      	add	r7, sp, #16
 804c6ce:	60f8      	str	r0, [r7, #12]
 804c6d0:	60b9      	str	r1, [r7, #8]
 804c6d2:	4611      	mov	r1, r2
 804c6d4:	461a      	mov	r2, r3
 804c6d6:	460b      	mov	r3, r1
 804c6d8:	80fb      	strh	r3, [r7, #6]
 804c6da:	4613      	mov	r3, r2
 804c6dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c6de:	7979      	ldrb	r1, [r7, #5]
 804c6e0:	2300      	movs	r3, #0
 804c6e2:	9303      	str	r3, [sp, #12]
 804c6e4:	88fb      	ldrh	r3, [r7, #6]
 804c6e6:	9302      	str	r3, [sp, #8]
 804c6e8:	68bb      	ldr	r3, [r7, #8]
 804c6ea:	9301      	str	r3, [sp, #4]
 804c6ec:	2301      	movs	r3, #1
 804c6ee:	9300      	str	r3, [sp, #0]
 804c6f0:	2302      	movs	r3, #2
 804c6f2:	2201      	movs	r2, #1
 804c6f4:	68f8      	ldr	r0, [r7, #12]
 804c6f6:	f000 fac6 	bl	804cc86 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804c6fa:	2300      	movs	r3, #0
}
 804c6fc:	4618      	mov	r0, r3
 804c6fe:	3710      	adds	r7, #16
 804c700:	46bd      	mov	sp, r7
 804c702:	bd80      	pop	{r7, pc}

0804c704 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804c704:	b580      	push	{r7, lr}
 804c706:	b086      	sub	sp, #24
 804c708:	af04      	add	r7, sp, #16
 804c70a:	6078      	str	r0, [r7, #4]
 804c70c:	4608      	mov	r0, r1
 804c70e:	4611      	mov	r1, r2
 804c710:	461a      	mov	r2, r3
 804c712:	4603      	mov	r3, r0
 804c714:	70fb      	strb	r3, [r7, #3]
 804c716:	460b      	mov	r3, r1
 804c718:	70bb      	strb	r3, [r7, #2]
 804c71a:	4613      	mov	r3, r2
 804c71c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804c71e:	7878      	ldrb	r0, [r7, #1]
 804c720:	78ba      	ldrb	r2, [r7, #2]
 804c722:	78f9      	ldrb	r1, [r7, #3]
 804c724:	8b3b      	ldrh	r3, [r7, #24]
 804c726:	9302      	str	r3, [sp, #8]
 804c728:	7d3b      	ldrb	r3, [r7, #20]
 804c72a:	9301      	str	r3, [sp, #4]
 804c72c:	7c3b      	ldrb	r3, [r7, #16]
 804c72e:	9300      	str	r3, [sp, #0]
 804c730:	4603      	mov	r3, r0
 804c732:	6878      	ldr	r0, [r7, #4]
 804c734:	f000 fa59 	bl	804cbea <USBH_LL_OpenPipe>

  return USBH_OK;
 804c738:	2300      	movs	r3, #0
}
 804c73a:	4618      	mov	r0, r3
 804c73c:	3708      	adds	r7, #8
 804c73e:	46bd      	mov	sp, r7
 804c740:	bd80      	pop	{r7, pc}

0804c742 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804c742:	b580      	push	{r7, lr}
 804c744:	b082      	sub	sp, #8
 804c746:	af00      	add	r7, sp, #0
 804c748:	6078      	str	r0, [r7, #4]
 804c74a:	460b      	mov	r3, r1
 804c74c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804c74e:	78fb      	ldrb	r3, [r7, #3]
 804c750:	4619      	mov	r1, r3
 804c752:	6878      	ldr	r0, [r7, #4]
 804c754:	f000 fa78 	bl	804cc48 <USBH_LL_ClosePipe>

  return USBH_OK;
 804c758:	2300      	movs	r3, #0
}
 804c75a:	4618      	mov	r0, r3
 804c75c:	3708      	adds	r7, #8
 804c75e:	46bd      	mov	sp, r7
 804c760:	bd80      	pop	{r7, pc}

0804c762 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804c762:	b580      	push	{r7, lr}
 804c764:	b084      	sub	sp, #16
 804c766:	af00      	add	r7, sp, #0
 804c768:	6078      	str	r0, [r7, #4]
 804c76a:	460b      	mov	r3, r1
 804c76c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804c76e:	6878      	ldr	r0, [r7, #4]
 804c770:	f000 f836 	bl	804c7e0 <USBH_GetFreePipe>
 804c774:	4603      	mov	r3, r0
 804c776:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804c778:	89fb      	ldrh	r3, [r7, #14]
 804c77a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804c77e:	4293      	cmp	r3, r2
 804c780:	d00a      	beq.n	804c798 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804c782:	78fa      	ldrb	r2, [r7, #3]
 804c784:	89fb      	ldrh	r3, [r7, #14]
 804c786:	f003 030f 	and.w	r3, r3, #15
 804c78a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804c78e:	6879      	ldr	r1, [r7, #4]
 804c790:	33e0      	adds	r3, #224	; 0xe0
 804c792:	009b      	lsls	r3, r3, #2
 804c794:	440b      	add	r3, r1
 804c796:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804c798:	89fb      	ldrh	r3, [r7, #14]
 804c79a:	b2db      	uxtb	r3, r3
}
 804c79c:	4618      	mov	r0, r3
 804c79e:	3710      	adds	r7, #16
 804c7a0:	46bd      	mov	sp, r7
 804c7a2:	bd80      	pop	{r7, pc}

0804c7a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804c7a4:	b480      	push	{r7}
 804c7a6:	b083      	sub	sp, #12
 804c7a8:	af00      	add	r7, sp, #0
 804c7aa:	6078      	str	r0, [r7, #4]
 804c7ac:	460b      	mov	r3, r1
 804c7ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804c7b0:	78fb      	ldrb	r3, [r7, #3]
 804c7b2:	2b0f      	cmp	r3, #15
 804c7b4:	d80d      	bhi.n	804c7d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804c7b6:	78fb      	ldrb	r3, [r7, #3]
 804c7b8:	687a      	ldr	r2, [r7, #4]
 804c7ba:	33e0      	adds	r3, #224	; 0xe0
 804c7bc:	009b      	lsls	r3, r3, #2
 804c7be:	4413      	add	r3, r2
 804c7c0:	685a      	ldr	r2, [r3, #4]
 804c7c2:	78fb      	ldrb	r3, [r7, #3]
 804c7c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804c7c8:	6879      	ldr	r1, [r7, #4]
 804c7ca:	33e0      	adds	r3, #224	; 0xe0
 804c7cc:	009b      	lsls	r3, r3, #2
 804c7ce:	440b      	add	r3, r1
 804c7d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804c7d2:	2300      	movs	r3, #0
}
 804c7d4:	4618      	mov	r0, r3
 804c7d6:	370c      	adds	r7, #12
 804c7d8:	46bd      	mov	sp, r7
 804c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7de:	4770      	bx	lr

0804c7e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804c7e0:	b480      	push	{r7}
 804c7e2:	b085      	sub	sp, #20
 804c7e4:	af00      	add	r7, sp, #0
 804c7e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804c7e8:	2300      	movs	r3, #0
 804c7ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c7ec:	2300      	movs	r3, #0
 804c7ee:	73fb      	strb	r3, [r7, #15]
 804c7f0:	e00f      	b.n	804c812 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804c7f2:	7bfb      	ldrb	r3, [r7, #15]
 804c7f4:	687a      	ldr	r2, [r7, #4]
 804c7f6:	33e0      	adds	r3, #224	; 0xe0
 804c7f8:	009b      	lsls	r3, r3, #2
 804c7fa:	4413      	add	r3, r2
 804c7fc:	685b      	ldr	r3, [r3, #4]
 804c7fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804c802:	2b00      	cmp	r3, #0
 804c804:	d102      	bne.n	804c80c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804c806:	7bfb      	ldrb	r3, [r7, #15]
 804c808:	b29b      	uxth	r3, r3
 804c80a:	e007      	b.n	804c81c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c80c:	7bfb      	ldrb	r3, [r7, #15]
 804c80e:	3301      	adds	r3, #1
 804c810:	73fb      	strb	r3, [r7, #15]
 804c812:	7bfb      	ldrb	r3, [r7, #15]
 804c814:	2b0f      	cmp	r3, #15
 804c816:	d9ec      	bls.n	804c7f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804c818:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804c81c:	4618      	mov	r0, r3
 804c81e:	3714      	adds	r7, #20
 804c820:	46bd      	mov	sp, r7
 804c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c826:	4770      	bx	lr

0804c828 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804c828:	b580      	push	{r7, lr}
 804c82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804c82c:	2200      	movs	r2, #0
 804c82e:	490e      	ldr	r1, [pc, #56]	; (804c868 <MX_USB_HOST_Init+0x40>)
 804c830:	480e      	ldr	r0, [pc, #56]	; (804c86c <MX_USB_HOST_Init+0x44>)
 804c832:	f7fe fba7 	bl	804af84 <USBH_Init>
 804c836:	4603      	mov	r3, r0
 804c838:	2b00      	cmp	r3, #0
 804c83a:	d001      	beq.n	804c840 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804c83c:	f7f4 fb6a 	bl	8040f14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804c840:	490b      	ldr	r1, [pc, #44]	; (804c870 <MX_USB_HOST_Init+0x48>)
 804c842:	480a      	ldr	r0, [pc, #40]	; (804c86c <MX_USB_HOST_Init+0x44>)
 804c844:	f7fe fc2c 	bl	804b0a0 <USBH_RegisterClass>
 804c848:	4603      	mov	r3, r0
 804c84a:	2b00      	cmp	r3, #0
 804c84c:	d001      	beq.n	804c852 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804c84e:	f7f4 fb61 	bl	8040f14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804c852:	4806      	ldr	r0, [pc, #24]	; (804c86c <MX_USB_HOST_Init+0x44>)
 804c854:	f7fe fcb0 	bl	804b1b8 <USBH_Start>
 804c858:	4603      	mov	r3, r0
 804c85a:	2b00      	cmp	r3, #0
 804c85c:	d001      	beq.n	804c862 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804c85e:	f7f4 fb59 	bl	8040f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804c862:	bf00      	nop
 804c864:	bd80      	pop	{r7, pc}
 804c866:	bf00      	nop
 804c868:	0804c889 	.word	0x0804c889
 804c86c:	20000ac4 	.word	0x20000ac4
 804c870:	2000005c 	.word	0x2000005c

0804c874 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804c874:	b580      	push	{r7, lr}
 804c876:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804c878:	4802      	ldr	r0, [pc, #8]	; (804c884 <MX_USB_HOST_Process+0x10>)
 804c87a:	f7fe fcad 	bl	804b1d8 <USBH_Process>
}
 804c87e:	bf00      	nop
 804c880:	bd80      	pop	{r7, pc}
 804c882:	bf00      	nop
 804c884:	20000ac4 	.word	0x20000ac4

0804c888 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804c888:	b480      	push	{r7}
 804c88a:	b083      	sub	sp, #12
 804c88c:	af00      	add	r7, sp, #0
 804c88e:	6078      	str	r0, [r7, #4]
 804c890:	460b      	mov	r3, r1
 804c892:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804c894:	78fb      	ldrb	r3, [r7, #3]
 804c896:	3b01      	subs	r3, #1
 804c898:	2b04      	cmp	r3, #4
 804c89a:	d819      	bhi.n	804c8d0 <USBH_UserProcess+0x48>
 804c89c:	a201      	add	r2, pc, #4	; (adr r2, 804c8a4 <USBH_UserProcess+0x1c>)
 804c89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c8a2:	bf00      	nop
 804c8a4:	0804c8d1 	.word	0x0804c8d1
 804c8a8:	0804c8c1 	.word	0x0804c8c1
 804c8ac:	0804c8d1 	.word	0x0804c8d1
 804c8b0:	0804c8c9 	.word	0x0804c8c9
 804c8b4:	0804c8b9 	.word	0x0804c8b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804c8b8:	4b09      	ldr	r3, [pc, #36]	; (804c8e0 <USBH_UserProcess+0x58>)
 804c8ba:	2203      	movs	r2, #3
 804c8bc:	701a      	strb	r2, [r3, #0]
  break;
 804c8be:	e008      	b.n	804c8d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804c8c0:	4b07      	ldr	r3, [pc, #28]	; (804c8e0 <USBH_UserProcess+0x58>)
 804c8c2:	2202      	movs	r2, #2
 804c8c4:	701a      	strb	r2, [r3, #0]
  break;
 804c8c6:	e004      	b.n	804c8d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804c8c8:	4b05      	ldr	r3, [pc, #20]	; (804c8e0 <USBH_UserProcess+0x58>)
 804c8ca:	2201      	movs	r2, #1
 804c8cc:	701a      	strb	r2, [r3, #0]
  break;
 804c8ce:	e000      	b.n	804c8d2 <USBH_UserProcess+0x4a>

  default:
  break;
 804c8d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804c8d2:	bf00      	nop
 804c8d4:	370c      	adds	r7, #12
 804c8d6:	46bd      	mov	sp, r7
 804c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c8dc:	4770      	bx	lr
 804c8de:	bf00      	nop
 804c8e0:	20000e9c 	.word	0x20000e9c

0804c8e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804c8e4:	b580      	push	{r7, lr}
 804c8e6:	b08a      	sub	sp, #40	; 0x28
 804c8e8:	af00      	add	r7, sp, #0
 804c8ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c8ec:	f107 0314 	add.w	r3, r7, #20
 804c8f0:	2200      	movs	r2, #0
 804c8f2:	601a      	str	r2, [r3, #0]
 804c8f4:	605a      	str	r2, [r3, #4]
 804c8f6:	609a      	str	r2, [r3, #8]
 804c8f8:	60da      	str	r2, [r3, #12]
 804c8fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804c8fc:	687b      	ldr	r3, [r7, #4]
 804c8fe:	681b      	ldr	r3, [r3, #0]
 804c900:	4a24      	ldr	r2, [pc, #144]	; (804c994 <HAL_HCD_MspInit+0xb0>)
 804c902:	4293      	cmp	r3, r2
 804c904:	d141      	bne.n	804c98a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804c906:	2300      	movs	r3, #0
 804c908:	613b      	str	r3, [r7, #16]
 804c90a:	4b23      	ldr	r3, [pc, #140]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c90e:	4a22      	ldr	r2, [pc, #136]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c910:	f043 0302 	orr.w	r3, r3, #2
 804c914:	6313      	str	r3, [r2, #48]	; 0x30
 804c916:	4b20      	ldr	r3, [pc, #128]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c91a:	f003 0302 	and.w	r3, r3, #2
 804c91e:	613b      	str	r3, [r7, #16]
 804c920:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804c922:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804c926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c928:	2302      	movs	r3, #2
 804c92a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c92c:	2300      	movs	r3, #0
 804c92e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804c930:	2300      	movs	r3, #0
 804c932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804c934:	230c      	movs	r3, #12
 804c936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804c938:	f107 0314 	add.w	r3, r7, #20
 804c93c:	4619      	mov	r1, r3
 804c93e:	4817      	ldr	r0, [pc, #92]	; (804c99c <HAL_HCD_MspInit+0xb8>)
 804c940:	f7f7 fbe0 	bl	8044104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804c944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804c948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804c94a:	2300      	movs	r3, #0
 804c94c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c94e:	2300      	movs	r3, #0
 804c950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804c952:	f107 0314 	add.w	r3, r7, #20
 804c956:	4619      	mov	r1, r3
 804c958:	4810      	ldr	r0, [pc, #64]	; (804c99c <HAL_HCD_MspInit+0xb8>)
 804c95a:	f7f7 fbd3 	bl	8044104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804c95e:	2300      	movs	r3, #0
 804c960:	60fb      	str	r3, [r7, #12]
 804c962:	4b0d      	ldr	r3, [pc, #52]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c966:	4a0c      	ldr	r2, [pc, #48]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804c96c:	6313      	str	r3, [r2, #48]	; 0x30
 804c96e:	4b0a      	ldr	r3, [pc, #40]	; (804c998 <HAL_HCD_MspInit+0xb4>)
 804c970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804c976:	60fb      	str	r3, [r7, #12]
 804c978:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804c97a:	2200      	movs	r2, #0
 804c97c:	2100      	movs	r1, #0
 804c97e:	204d      	movs	r0, #77	; 0x4d
 804c980:	f7f6 fe20 	bl	80435c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804c984:	204d      	movs	r0, #77	; 0x4d
 804c986:	f7f6 fe39 	bl	80435fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804c98a:	bf00      	nop
 804c98c:	3728      	adds	r7, #40	; 0x28
 804c98e:	46bd      	mov	sp, r7
 804c990:	bd80      	pop	{r7, pc}
 804c992:	bf00      	nop
 804c994:	40040000 	.word	0x40040000
 804c998:	40023800 	.word	0x40023800
 804c99c:	40020400 	.word	0x40020400

0804c9a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804c9a0:	b580      	push	{r7, lr}
 804c9a2:	b082      	sub	sp, #8
 804c9a4:	af00      	add	r7, sp, #0
 804c9a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804c9a8:	687b      	ldr	r3, [r7, #4]
 804c9aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c9ae:	4618      	mov	r0, r3
 804c9b0:	f7fe fff1 	bl	804b996 <USBH_LL_IncTimer>
}
 804c9b4:	bf00      	nop
 804c9b6:	3708      	adds	r7, #8
 804c9b8:	46bd      	mov	sp, r7
 804c9ba:	bd80      	pop	{r7, pc}

0804c9bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c9bc:	b580      	push	{r7, lr}
 804c9be:	b082      	sub	sp, #8
 804c9c0:	af00      	add	r7, sp, #0
 804c9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804c9c4:	687b      	ldr	r3, [r7, #4]
 804c9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c9ca:	4618      	mov	r0, r3
 804c9cc:	f7ff f829 	bl	804ba22 <USBH_LL_Connect>
}
 804c9d0:	bf00      	nop
 804c9d2:	3708      	adds	r7, #8
 804c9d4:	46bd      	mov	sp, r7
 804c9d6:	bd80      	pop	{r7, pc}

0804c9d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c9d8:	b580      	push	{r7, lr}
 804c9da:	b082      	sub	sp, #8
 804c9dc:	af00      	add	r7, sp, #0
 804c9de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804c9e0:	687b      	ldr	r3, [r7, #4]
 804c9e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c9e6:	4618      	mov	r0, r3
 804c9e8:	f7ff f832 	bl	804ba50 <USBH_LL_Disconnect>
}
 804c9ec:	bf00      	nop
 804c9ee:	3708      	adds	r7, #8
 804c9f0:	46bd      	mov	sp, r7
 804c9f2:	bd80      	pop	{r7, pc}

0804c9f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804c9f4:	b480      	push	{r7}
 804c9f6:	b083      	sub	sp, #12
 804c9f8:	af00      	add	r7, sp, #0
 804c9fa:	6078      	str	r0, [r7, #4]
 804c9fc:	460b      	mov	r3, r1
 804c9fe:	70fb      	strb	r3, [r7, #3]
 804ca00:	4613      	mov	r3, r2
 804ca02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804ca04:	bf00      	nop
 804ca06:	370c      	adds	r7, #12
 804ca08:	46bd      	mov	sp, r7
 804ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ca0e:	4770      	bx	lr

0804ca10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804ca10:	b580      	push	{r7, lr}
 804ca12:	b082      	sub	sp, #8
 804ca14:	af00      	add	r7, sp, #0
 804ca16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804ca18:	687b      	ldr	r3, [r7, #4]
 804ca1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804ca1e:	4618      	mov	r0, r3
 804ca20:	f7fe ffe3 	bl	804b9ea <USBH_LL_PortEnabled>
}
 804ca24:	bf00      	nop
 804ca26:	3708      	adds	r7, #8
 804ca28:	46bd      	mov	sp, r7
 804ca2a:	bd80      	pop	{r7, pc}

0804ca2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804ca2c:	b580      	push	{r7, lr}
 804ca2e:	b082      	sub	sp, #8
 804ca30:	af00      	add	r7, sp, #0
 804ca32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804ca34:	687b      	ldr	r3, [r7, #4]
 804ca36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804ca3a:	4618      	mov	r0, r3
 804ca3c:	f7fe ffe3 	bl	804ba06 <USBH_LL_PortDisabled>
}
 804ca40:	bf00      	nop
 804ca42:	3708      	adds	r7, #8
 804ca44:	46bd      	mov	sp, r7
 804ca46:	bd80      	pop	{r7, pc}

0804ca48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804ca48:	b580      	push	{r7, lr}
 804ca4a:	b082      	sub	sp, #8
 804ca4c:	af00      	add	r7, sp, #0
 804ca4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804ca50:	687b      	ldr	r3, [r7, #4]
 804ca52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804ca56:	2b00      	cmp	r3, #0
 804ca58:	d132      	bne.n	804cac0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804ca5a:	4a1c      	ldr	r2, [pc, #112]	; (804cacc <USBH_LL_Init+0x84>)
 804ca5c:	687b      	ldr	r3, [r7, #4]
 804ca5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804ca62:	687b      	ldr	r3, [r7, #4]
 804ca64:	4a19      	ldr	r2, [pc, #100]	; (804cacc <USBH_LL_Init+0x84>)
 804ca66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804ca6a:	4b18      	ldr	r3, [pc, #96]	; (804cacc <USBH_LL_Init+0x84>)
 804ca6c:	4a18      	ldr	r2, [pc, #96]	; (804cad0 <USBH_LL_Init+0x88>)
 804ca6e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804ca70:	4b16      	ldr	r3, [pc, #88]	; (804cacc <USBH_LL_Init+0x84>)
 804ca72:	220c      	movs	r2, #12
 804ca74:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804ca76:	4b15      	ldr	r3, [pc, #84]	; (804cacc <USBH_LL_Init+0x84>)
 804ca78:	2201      	movs	r2, #1
 804ca7a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804ca7c:	4b13      	ldr	r3, [pc, #76]	; (804cacc <USBH_LL_Init+0x84>)
 804ca7e:	2200      	movs	r2, #0
 804ca80:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804ca82:	4b12      	ldr	r3, [pc, #72]	; (804cacc <USBH_LL_Init+0x84>)
 804ca84:	2202      	movs	r2, #2
 804ca86:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804ca88:	4b10      	ldr	r3, [pc, #64]	; (804cacc <USBH_LL_Init+0x84>)
 804ca8a:	2200      	movs	r2, #0
 804ca8c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804ca8e:	4b0f      	ldr	r3, [pc, #60]	; (804cacc <USBH_LL_Init+0x84>)
 804ca90:	2200      	movs	r2, #0
 804ca92:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804ca94:	4b0d      	ldr	r3, [pc, #52]	; (804cacc <USBH_LL_Init+0x84>)
 804ca96:	2200      	movs	r2, #0
 804ca98:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804ca9a:	4b0c      	ldr	r3, [pc, #48]	; (804cacc <USBH_LL_Init+0x84>)
 804ca9c:	2200      	movs	r2, #0
 804ca9e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804caa0:	480a      	ldr	r0, [pc, #40]	; (804cacc <USBH_LL_Init+0x84>)
 804caa2:	f7f7 fe19 	bl	80446d8 <HAL_HCD_Init>
 804caa6:	4603      	mov	r3, r0
 804caa8:	2b00      	cmp	r3, #0
 804caaa:	d001      	beq.n	804cab0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804caac:	f7f4 fa32 	bl	8040f14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804cab0:	4806      	ldr	r0, [pc, #24]	; (804cacc <USBH_LL_Init+0x84>)
 804cab2:	f7f8 f9fc 	bl	8044eae <HAL_HCD_GetCurrentFrame>
 804cab6:	4603      	mov	r3, r0
 804cab8:	4619      	mov	r1, r3
 804caba:	6878      	ldr	r0, [r7, #4]
 804cabc:	f7fe ff5c 	bl	804b978 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804cac0:	2300      	movs	r3, #0
}
 804cac2:	4618      	mov	r0, r3
 804cac4:	3708      	adds	r7, #8
 804cac6:	46bd      	mov	sp, r7
 804cac8:	bd80      	pop	{r7, pc}
 804caca:	bf00      	nop
 804cacc:	20000ea0 	.word	0x20000ea0
 804cad0:	40040000 	.word	0x40040000

0804cad4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804cad4:	b580      	push	{r7, lr}
 804cad6:	b084      	sub	sp, #16
 804cad8:	af00      	add	r7, sp, #0
 804cada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cadc:	2300      	movs	r3, #0
 804cade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cae0:	2300      	movs	r3, #0
 804cae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804cae4:	687b      	ldr	r3, [r7, #4]
 804cae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804caea:	4618      	mov	r0, r3
 804caec:	f7f8 f969 	bl	8044dc2 <HAL_HCD_Start>
 804caf0:	4603      	mov	r3, r0
 804caf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804caf4:	7bfb      	ldrb	r3, [r7, #15]
 804caf6:	4618      	mov	r0, r3
 804caf8:	f000 f95c 	bl	804cdb4 <USBH_Get_USB_Status>
 804cafc:	4603      	mov	r3, r0
 804cafe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cb00:	7bbb      	ldrb	r3, [r7, #14]
}
 804cb02:	4618      	mov	r0, r3
 804cb04:	3710      	adds	r7, #16
 804cb06:	46bd      	mov	sp, r7
 804cb08:	bd80      	pop	{r7, pc}

0804cb0a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804cb0a:	b580      	push	{r7, lr}
 804cb0c:	b084      	sub	sp, #16
 804cb0e:	af00      	add	r7, sp, #0
 804cb10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cb12:	2300      	movs	r3, #0
 804cb14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cb16:	2300      	movs	r3, #0
 804cb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804cb1a:	687b      	ldr	r3, [r7, #4]
 804cb1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cb20:	4618      	mov	r0, r3
 804cb22:	f7f8 f971 	bl	8044e08 <HAL_HCD_Stop>
 804cb26:	4603      	mov	r3, r0
 804cb28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804cb2a:	7bfb      	ldrb	r3, [r7, #15]
 804cb2c:	4618      	mov	r0, r3
 804cb2e:	f000 f941 	bl	804cdb4 <USBH_Get_USB_Status>
 804cb32:	4603      	mov	r3, r0
 804cb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cb36:	7bbb      	ldrb	r3, [r7, #14]
}
 804cb38:	4618      	mov	r0, r3
 804cb3a:	3710      	adds	r7, #16
 804cb3c:	46bd      	mov	sp, r7
 804cb3e:	bd80      	pop	{r7, pc}

0804cb40 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804cb40:	b580      	push	{r7, lr}
 804cb42:	b084      	sub	sp, #16
 804cb44:	af00      	add	r7, sp, #0
 804cb46:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804cb48:	2301      	movs	r3, #1
 804cb4a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804cb4c:	687b      	ldr	r3, [r7, #4]
 804cb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cb52:	4618      	mov	r0, r3
 804cb54:	f7f8 f9b9 	bl	8044eca <HAL_HCD_GetCurrentSpeed>
 804cb58:	4603      	mov	r3, r0
 804cb5a:	2b02      	cmp	r3, #2
 804cb5c:	d00c      	beq.n	804cb78 <USBH_LL_GetSpeed+0x38>
 804cb5e:	2b02      	cmp	r3, #2
 804cb60:	d80d      	bhi.n	804cb7e <USBH_LL_GetSpeed+0x3e>
 804cb62:	2b00      	cmp	r3, #0
 804cb64:	d002      	beq.n	804cb6c <USBH_LL_GetSpeed+0x2c>
 804cb66:	2b01      	cmp	r3, #1
 804cb68:	d003      	beq.n	804cb72 <USBH_LL_GetSpeed+0x32>
 804cb6a:	e008      	b.n	804cb7e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804cb6c:	2300      	movs	r3, #0
 804cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 804cb70:	e008      	b.n	804cb84 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804cb72:	2301      	movs	r3, #1
 804cb74:	73fb      	strb	r3, [r7, #15]
    break;
 804cb76:	e005      	b.n	804cb84 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804cb78:	2302      	movs	r3, #2
 804cb7a:	73fb      	strb	r3, [r7, #15]
    break;
 804cb7c:	e002      	b.n	804cb84 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804cb7e:	2301      	movs	r3, #1
 804cb80:	73fb      	strb	r3, [r7, #15]
    break;
 804cb82:	bf00      	nop
  }
  return  speed;
 804cb84:	7bfb      	ldrb	r3, [r7, #15]
}
 804cb86:	4618      	mov	r0, r3
 804cb88:	3710      	adds	r7, #16
 804cb8a:	46bd      	mov	sp, r7
 804cb8c:	bd80      	pop	{r7, pc}

0804cb8e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804cb8e:	b580      	push	{r7, lr}
 804cb90:	b084      	sub	sp, #16
 804cb92:	af00      	add	r7, sp, #0
 804cb94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cb96:	2300      	movs	r3, #0
 804cb98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cb9a:	2300      	movs	r3, #0
 804cb9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804cb9e:	687b      	ldr	r3, [r7, #4]
 804cba0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cba4:	4618      	mov	r0, r3
 804cba6:	f7f8 f94c 	bl	8044e42 <HAL_HCD_ResetPort>
 804cbaa:	4603      	mov	r3, r0
 804cbac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804cbae:	7bfb      	ldrb	r3, [r7, #15]
 804cbb0:	4618      	mov	r0, r3
 804cbb2:	f000 f8ff 	bl	804cdb4 <USBH_Get_USB_Status>
 804cbb6:	4603      	mov	r3, r0
 804cbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cbba:	7bbb      	ldrb	r3, [r7, #14]
}
 804cbbc:	4618      	mov	r0, r3
 804cbbe:	3710      	adds	r7, #16
 804cbc0:	46bd      	mov	sp, r7
 804cbc2:	bd80      	pop	{r7, pc}

0804cbc4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804cbc4:	b580      	push	{r7, lr}
 804cbc6:	b082      	sub	sp, #8
 804cbc8:	af00      	add	r7, sp, #0
 804cbca:	6078      	str	r0, [r7, #4]
 804cbcc:	460b      	mov	r3, r1
 804cbce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804cbd0:	687b      	ldr	r3, [r7, #4]
 804cbd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cbd6:	78fa      	ldrb	r2, [r7, #3]
 804cbd8:	4611      	mov	r1, r2
 804cbda:	4618      	mov	r0, r3
 804cbdc:	f7f8 f953 	bl	8044e86 <HAL_HCD_HC_GetXferCount>
 804cbe0:	4603      	mov	r3, r0
}
 804cbe2:	4618      	mov	r0, r3
 804cbe4:	3708      	adds	r7, #8
 804cbe6:	46bd      	mov	sp, r7
 804cbe8:	bd80      	pop	{r7, pc}

0804cbea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804cbea:	b590      	push	{r4, r7, lr}
 804cbec:	b089      	sub	sp, #36	; 0x24
 804cbee:	af04      	add	r7, sp, #16
 804cbf0:	6078      	str	r0, [r7, #4]
 804cbf2:	4608      	mov	r0, r1
 804cbf4:	4611      	mov	r1, r2
 804cbf6:	461a      	mov	r2, r3
 804cbf8:	4603      	mov	r3, r0
 804cbfa:	70fb      	strb	r3, [r7, #3]
 804cbfc:	460b      	mov	r3, r1
 804cbfe:	70bb      	strb	r3, [r7, #2]
 804cc00:	4613      	mov	r3, r2
 804cc02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cc04:	2300      	movs	r3, #0
 804cc06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cc08:	2300      	movs	r3, #0
 804cc0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804cc0c:	687b      	ldr	r3, [r7, #4]
 804cc0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804cc12:	787c      	ldrb	r4, [r7, #1]
 804cc14:	78ba      	ldrb	r2, [r7, #2]
 804cc16:	78f9      	ldrb	r1, [r7, #3]
 804cc18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804cc1a:	9302      	str	r3, [sp, #8]
 804cc1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804cc20:	9301      	str	r3, [sp, #4]
 804cc22:	f897 3020 	ldrb.w	r3, [r7, #32]
 804cc26:	9300      	str	r3, [sp, #0]
 804cc28:	4623      	mov	r3, r4
 804cc2a:	f7f7 fdb7 	bl	804479c <HAL_HCD_HC_Init>
 804cc2e:	4603      	mov	r3, r0
 804cc30:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804cc32:	7bfb      	ldrb	r3, [r7, #15]
 804cc34:	4618      	mov	r0, r3
 804cc36:	f000 f8bd 	bl	804cdb4 <USBH_Get_USB_Status>
 804cc3a:	4603      	mov	r3, r0
 804cc3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cc3e:	7bbb      	ldrb	r3, [r7, #14]
}
 804cc40:	4618      	mov	r0, r3
 804cc42:	3714      	adds	r7, #20
 804cc44:	46bd      	mov	sp, r7
 804cc46:	bd90      	pop	{r4, r7, pc}

0804cc48 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804cc48:	b580      	push	{r7, lr}
 804cc4a:	b084      	sub	sp, #16
 804cc4c:	af00      	add	r7, sp, #0
 804cc4e:	6078      	str	r0, [r7, #4]
 804cc50:	460b      	mov	r3, r1
 804cc52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cc54:	2300      	movs	r3, #0
 804cc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cc58:	2300      	movs	r3, #0
 804cc5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804cc5c:	687b      	ldr	r3, [r7, #4]
 804cc5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cc62:	78fa      	ldrb	r2, [r7, #3]
 804cc64:	4611      	mov	r1, r2
 804cc66:	4618      	mov	r0, r3
 804cc68:	f7f7 fe27 	bl	80448ba <HAL_HCD_HC_Halt>
 804cc6c:	4603      	mov	r3, r0
 804cc6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804cc70:	7bfb      	ldrb	r3, [r7, #15]
 804cc72:	4618      	mov	r0, r3
 804cc74:	f000 f89e 	bl	804cdb4 <USBH_Get_USB_Status>
 804cc78:	4603      	mov	r3, r0
 804cc7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cc7c:	7bbb      	ldrb	r3, [r7, #14]
}
 804cc7e:	4618      	mov	r0, r3
 804cc80:	3710      	adds	r7, #16
 804cc82:	46bd      	mov	sp, r7
 804cc84:	bd80      	pop	{r7, pc}

0804cc86 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804cc86:	b590      	push	{r4, r7, lr}
 804cc88:	b089      	sub	sp, #36	; 0x24
 804cc8a:	af04      	add	r7, sp, #16
 804cc8c:	6078      	str	r0, [r7, #4]
 804cc8e:	4608      	mov	r0, r1
 804cc90:	4611      	mov	r1, r2
 804cc92:	461a      	mov	r2, r3
 804cc94:	4603      	mov	r3, r0
 804cc96:	70fb      	strb	r3, [r7, #3]
 804cc98:	460b      	mov	r3, r1
 804cc9a:	70bb      	strb	r3, [r7, #2]
 804cc9c:	4613      	mov	r3, r2
 804cc9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cca0:	2300      	movs	r3, #0
 804cca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cca4:	2300      	movs	r3, #0
 804cca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804cca8:	687b      	ldr	r3, [r7, #4]
 804ccaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804ccae:	787c      	ldrb	r4, [r7, #1]
 804ccb0:	78ba      	ldrb	r2, [r7, #2]
 804ccb2:	78f9      	ldrb	r1, [r7, #3]
 804ccb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804ccb8:	9303      	str	r3, [sp, #12]
 804ccba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804ccbc:	9302      	str	r3, [sp, #8]
 804ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ccc0:	9301      	str	r3, [sp, #4]
 804ccc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 804ccc6:	9300      	str	r3, [sp, #0]
 804ccc8:	4623      	mov	r3, r4
 804ccca:	f7f7 fe19 	bl	8044900 <HAL_HCD_HC_SubmitRequest>
 804ccce:	4603      	mov	r3, r0
 804ccd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804ccd2:	7bfb      	ldrb	r3, [r7, #15]
 804ccd4:	4618      	mov	r0, r3
 804ccd6:	f000 f86d 	bl	804cdb4 <USBH_Get_USB_Status>
 804ccda:	4603      	mov	r3, r0
 804ccdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804ccde:	7bbb      	ldrb	r3, [r7, #14]
}
 804cce0:	4618      	mov	r0, r3
 804cce2:	3714      	adds	r7, #20
 804cce4:	46bd      	mov	sp, r7
 804cce6:	bd90      	pop	{r4, r7, pc}

0804cce8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804cce8:	b580      	push	{r7, lr}
 804ccea:	b082      	sub	sp, #8
 804ccec:	af00      	add	r7, sp, #0
 804ccee:	6078      	str	r0, [r7, #4]
 804ccf0:	460b      	mov	r3, r1
 804ccf2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804ccf4:	687b      	ldr	r3, [r7, #4]
 804ccf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804ccfa:	78fa      	ldrb	r2, [r7, #3]
 804ccfc:	4611      	mov	r1, r2
 804ccfe:	4618      	mov	r0, r3
 804cd00:	f7f8 f8ad 	bl	8044e5e <HAL_HCD_HC_GetURBState>
 804cd04:	4603      	mov	r3, r0
}
 804cd06:	4618      	mov	r0, r3
 804cd08:	3708      	adds	r7, #8
 804cd0a:	46bd      	mov	sp, r7
 804cd0c:	bd80      	pop	{r7, pc}

0804cd0e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804cd0e:	b580      	push	{r7, lr}
 804cd10:	b082      	sub	sp, #8
 804cd12:	af00      	add	r7, sp, #0
 804cd14:	6078      	str	r0, [r7, #4]
 804cd16:	460b      	mov	r3, r1
 804cd18:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804cd1a:	687b      	ldr	r3, [r7, #4]
 804cd1c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804cd20:	2b00      	cmp	r3, #0
 804cd22:	d103      	bne.n	804cd2c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804cd24:	78fb      	ldrb	r3, [r7, #3]
 804cd26:	4618      	mov	r0, r3
 804cd28:	f000 f870 	bl	804ce0c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804cd2c:	20c8      	movs	r0, #200	; 0xc8
 804cd2e:	f7f6 fb6d 	bl	804340c <HAL_Delay>
  return USBH_OK;
 804cd32:	2300      	movs	r3, #0
}
 804cd34:	4618      	mov	r0, r3
 804cd36:	3708      	adds	r7, #8
 804cd38:	46bd      	mov	sp, r7
 804cd3a:	bd80      	pop	{r7, pc}

0804cd3c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804cd3c:	b480      	push	{r7}
 804cd3e:	b085      	sub	sp, #20
 804cd40:	af00      	add	r7, sp, #0
 804cd42:	6078      	str	r0, [r7, #4]
 804cd44:	460b      	mov	r3, r1
 804cd46:	70fb      	strb	r3, [r7, #3]
 804cd48:	4613      	mov	r3, r2
 804cd4a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804cd4c:	687b      	ldr	r3, [r7, #4]
 804cd4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cd52:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804cd54:	78fb      	ldrb	r3, [r7, #3]
 804cd56:	68fa      	ldr	r2, [r7, #12]
 804cd58:	212c      	movs	r1, #44	; 0x2c
 804cd5a:	fb01 f303 	mul.w	r3, r1, r3
 804cd5e:	4413      	add	r3, r2
 804cd60:	333b      	adds	r3, #59	; 0x3b
 804cd62:	781b      	ldrb	r3, [r3, #0]
 804cd64:	2b00      	cmp	r3, #0
 804cd66:	d009      	beq.n	804cd7c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804cd68:	78fb      	ldrb	r3, [r7, #3]
 804cd6a:	68fa      	ldr	r2, [r7, #12]
 804cd6c:	212c      	movs	r1, #44	; 0x2c
 804cd6e:	fb01 f303 	mul.w	r3, r1, r3
 804cd72:	4413      	add	r3, r2
 804cd74:	3354      	adds	r3, #84	; 0x54
 804cd76:	78ba      	ldrb	r2, [r7, #2]
 804cd78:	701a      	strb	r2, [r3, #0]
 804cd7a:	e008      	b.n	804cd8e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804cd7c:	78fb      	ldrb	r3, [r7, #3]
 804cd7e:	68fa      	ldr	r2, [r7, #12]
 804cd80:	212c      	movs	r1, #44	; 0x2c
 804cd82:	fb01 f303 	mul.w	r3, r1, r3
 804cd86:	4413      	add	r3, r2
 804cd88:	3355      	adds	r3, #85	; 0x55
 804cd8a:	78ba      	ldrb	r2, [r7, #2]
 804cd8c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804cd8e:	2300      	movs	r3, #0
}
 804cd90:	4618      	mov	r0, r3
 804cd92:	3714      	adds	r7, #20
 804cd94:	46bd      	mov	sp, r7
 804cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cd9a:	4770      	bx	lr

0804cd9c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804cd9c:	b580      	push	{r7, lr}
 804cd9e:	b082      	sub	sp, #8
 804cda0:	af00      	add	r7, sp, #0
 804cda2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804cda4:	6878      	ldr	r0, [r7, #4]
 804cda6:	f7f6 fb31 	bl	804340c <HAL_Delay>
}
 804cdaa:	bf00      	nop
 804cdac:	3708      	adds	r7, #8
 804cdae:	46bd      	mov	sp, r7
 804cdb0:	bd80      	pop	{r7, pc}
	...

0804cdb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804cdb4:	b480      	push	{r7}
 804cdb6:	b085      	sub	sp, #20
 804cdb8:	af00      	add	r7, sp, #0
 804cdba:	4603      	mov	r3, r0
 804cdbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cdbe:	2300      	movs	r3, #0
 804cdc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804cdc2:	79fb      	ldrb	r3, [r7, #7]
 804cdc4:	2b03      	cmp	r3, #3
 804cdc6:	d817      	bhi.n	804cdf8 <USBH_Get_USB_Status+0x44>
 804cdc8:	a201      	add	r2, pc, #4	; (adr r2, 804cdd0 <USBH_Get_USB_Status+0x1c>)
 804cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804cdce:	bf00      	nop
 804cdd0:	0804cde1 	.word	0x0804cde1
 804cdd4:	0804cde7 	.word	0x0804cde7
 804cdd8:	0804cded 	.word	0x0804cded
 804cddc:	0804cdf3 	.word	0x0804cdf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804cde0:	2300      	movs	r3, #0
 804cde2:	73fb      	strb	r3, [r7, #15]
    break;
 804cde4:	e00b      	b.n	804cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804cde6:	2302      	movs	r3, #2
 804cde8:	73fb      	strb	r3, [r7, #15]
    break;
 804cdea:	e008      	b.n	804cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804cdec:	2301      	movs	r3, #1
 804cdee:	73fb      	strb	r3, [r7, #15]
    break;
 804cdf0:	e005      	b.n	804cdfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804cdf2:	2302      	movs	r3, #2
 804cdf4:	73fb      	strb	r3, [r7, #15]
    break;
 804cdf6:	e002      	b.n	804cdfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804cdf8:	2302      	movs	r3, #2
 804cdfa:	73fb      	strb	r3, [r7, #15]
    break;
 804cdfc:	bf00      	nop
  }
  return usb_status;
 804cdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 804ce00:	4618      	mov	r0, r3
 804ce02:	3714      	adds	r7, #20
 804ce04:	46bd      	mov	sp, r7
 804ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce0a:	4770      	bx	lr

0804ce0c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804ce0c:	b580      	push	{r7, lr}
 804ce0e:	b084      	sub	sp, #16
 804ce10:	af00      	add	r7, sp, #0
 804ce12:	4603      	mov	r3, r0
 804ce14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804ce16:	79fb      	ldrb	r3, [r7, #7]
 804ce18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804ce1a:	79fb      	ldrb	r3, [r7, #7]
 804ce1c:	2b00      	cmp	r3, #0
 804ce1e:	d102      	bne.n	804ce26 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804ce20:	2301      	movs	r3, #1
 804ce22:	73fb      	strb	r3, [r7, #15]
 804ce24:	e001      	b.n	804ce2a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804ce26:	2300      	movs	r3, #0
 804ce28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804ce2a:	7bfb      	ldrb	r3, [r7, #15]
 804ce2c:	461a      	mov	r2, r3
 804ce2e:	2110      	movs	r1, #16
 804ce30:	4803      	ldr	r0, [pc, #12]	; (804ce40 <MX_DriverVbusHS+0x34>)
 804ce32:	f7f7 fc1f 	bl	8044674 <HAL_GPIO_WritePin>
}
 804ce36:	bf00      	nop
 804ce38:	3710      	adds	r7, #16
 804ce3a:	46bd      	mov	sp, r7
 804ce3c:	bd80      	pop	{r7, pc}
 804ce3e:	bf00      	nop
 804ce40:	40020800 	.word	0x40020800

0804ce44 <__errno>:
 804ce44:	4b01      	ldr	r3, [pc, #4]	; (804ce4c <__errno+0x8>)
 804ce46:	6818      	ldr	r0, [r3, #0]
 804ce48:	4770      	bx	lr
 804ce4a:	bf00      	nop
 804ce4c:	2000007c 	.word	0x2000007c

0804ce50 <__libc_init_array>:
 804ce50:	b570      	push	{r4, r5, r6, lr}
 804ce52:	4d0d      	ldr	r5, [pc, #52]	; (804ce88 <__libc_init_array+0x38>)
 804ce54:	4c0d      	ldr	r4, [pc, #52]	; (804ce8c <__libc_init_array+0x3c>)
 804ce56:	1b64      	subs	r4, r4, r5
 804ce58:	10a4      	asrs	r4, r4, #2
 804ce5a:	2600      	movs	r6, #0
 804ce5c:	42a6      	cmp	r6, r4
 804ce5e:	d109      	bne.n	804ce74 <__libc_init_array+0x24>
 804ce60:	4d0b      	ldr	r5, [pc, #44]	; (804ce90 <__libc_init_array+0x40>)
 804ce62:	4c0c      	ldr	r4, [pc, #48]	; (804ce94 <__libc_init_array+0x44>)
 804ce64:	f001 fa10 	bl	804e288 <_init>
 804ce68:	1b64      	subs	r4, r4, r5
 804ce6a:	10a4      	asrs	r4, r4, #2
 804ce6c:	2600      	movs	r6, #0
 804ce6e:	42a6      	cmp	r6, r4
 804ce70:	d105      	bne.n	804ce7e <__libc_init_array+0x2e>
 804ce72:	bd70      	pop	{r4, r5, r6, pc}
 804ce74:	f855 3b04 	ldr.w	r3, [r5], #4
 804ce78:	4798      	blx	r3
 804ce7a:	3601      	adds	r6, #1
 804ce7c:	e7ee      	b.n	804ce5c <__libc_init_array+0xc>
 804ce7e:	f855 3b04 	ldr.w	r3, [r5], #4
 804ce82:	4798      	blx	r3
 804ce84:	3601      	adds	r6, #1
 804ce86:	e7f2      	b.n	804ce6e <__libc_init_array+0x1e>
 804ce88:	0805092c 	.word	0x0805092c
 804ce8c:	0805092c 	.word	0x0805092c
 804ce90:	0805092c 	.word	0x0805092c
 804ce94:	08050930 	.word	0x08050930

0804ce98 <malloc>:
 804ce98:	4b02      	ldr	r3, [pc, #8]	; (804cea4 <malloc+0xc>)
 804ce9a:	4601      	mov	r1, r0
 804ce9c:	6818      	ldr	r0, [r3, #0]
 804ce9e:	f000 b87f 	b.w	804cfa0 <_malloc_r>
 804cea2:	bf00      	nop
 804cea4:	2000007c 	.word	0x2000007c

0804cea8 <free>:
 804cea8:	4b02      	ldr	r3, [pc, #8]	; (804ceb4 <free+0xc>)
 804ceaa:	4601      	mov	r1, r0
 804ceac:	6818      	ldr	r0, [r3, #0]
 804ceae:	f000 b80b 	b.w	804cec8 <_free_r>
 804ceb2:	bf00      	nop
 804ceb4:	2000007c 	.word	0x2000007c

0804ceb8 <memset>:
 804ceb8:	4402      	add	r2, r0
 804ceba:	4603      	mov	r3, r0
 804cebc:	4293      	cmp	r3, r2
 804cebe:	d100      	bne.n	804cec2 <memset+0xa>
 804cec0:	4770      	bx	lr
 804cec2:	f803 1b01 	strb.w	r1, [r3], #1
 804cec6:	e7f9      	b.n	804cebc <memset+0x4>

0804cec8 <_free_r>:
 804cec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804ceca:	2900      	cmp	r1, #0
 804cecc:	d044      	beq.n	804cf58 <_free_r+0x90>
 804cece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804ced2:	9001      	str	r0, [sp, #4]
 804ced4:	2b00      	cmp	r3, #0
 804ced6:	f1a1 0404 	sub.w	r4, r1, #4
 804ceda:	bfb8      	it	lt
 804cedc:	18e4      	addlt	r4, r4, r3
 804cede:	f000 fc71 	bl	804d7c4 <__malloc_lock>
 804cee2:	4a1e      	ldr	r2, [pc, #120]	; (804cf5c <_free_r+0x94>)
 804cee4:	9801      	ldr	r0, [sp, #4]
 804cee6:	6813      	ldr	r3, [r2, #0]
 804cee8:	b933      	cbnz	r3, 804cef8 <_free_r+0x30>
 804ceea:	6063      	str	r3, [r4, #4]
 804ceec:	6014      	str	r4, [r2, #0]
 804ceee:	b003      	add	sp, #12
 804cef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804cef4:	f000 bc6c 	b.w	804d7d0 <__malloc_unlock>
 804cef8:	42a3      	cmp	r3, r4
 804cefa:	d908      	bls.n	804cf0e <_free_r+0x46>
 804cefc:	6825      	ldr	r5, [r4, #0]
 804cefe:	1961      	adds	r1, r4, r5
 804cf00:	428b      	cmp	r3, r1
 804cf02:	bf01      	itttt	eq
 804cf04:	6819      	ldreq	r1, [r3, #0]
 804cf06:	685b      	ldreq	r3, [r3, #4]
 804cf08:	1949      	addeq	r1, r1, r5
 804cf0a:	6021      	streq	r1, [r4, #0]
 804cf0c:	e7ed      	b.n	804ceea <_free_r+0x22>
 804cf0e:	461a      	mov	r2, r3
 804cf10:	685b      	ldr	r3, [r3, #4]
 804cf12:	b10b      	cbz	r3, 804cf18 <_free_r+0x50>
 804cf14:	42a3      	cmp	r3, r4
 804cf16:	d9fa      	bls.n	804cf0e <_free_r+0x46>
 804cf18:	6811      	ldr	r1, [r2, #0]
 804cf1a:	1855      	adds	r5, r2, r1
 804cf1c:	42a5      	cmp	r5, r4
 804cf1e:	d10b      	bne.n	804cf38 <_free_r+0x70>
 804cf20:	6824      	ldr	r4, [r4, #0]
 804cf22:	4421      	add	r1, r4
 804cf24:	1854      	adds	r4, r2, r1
 804cf26:	42a3      	cmp	r3, r4
 804cf28:	6011      	str	r1, [r2, #0]
 804cf2a:	d1e0      	bne.n	804ceee <_free_r+0x26>
 804cf2c:	681c      	ldr	r4, [r3, #0]
 804cf2e:	685b      	ldr	r3, [r3, #4]
 804cf30:	6053      	str	r3, [r2, #4]
 804cf32:	4421      	add	r1, r4
 804cf34:	6011      	str	r1, [r2, #0]
 804cf36:	e7da      	b.n	804ceee <_free_r+0x26>
 804cf38:	d902      	bls.n	804cf40 <_free_r+0x78>
 804cf3a:	230c      	movs	r3, #12
 804cf3c:	6003      	str	r3, [r0, #0]
 804cf3e:	e7d6      	b.n	804ceee <_free_r+0x26>
 804cf40:	6825      	ldr	r5, [r4, #0]
 804cf42:	1961      	adds	r1, r4, r5
 804cf44:	428b      	cmp	r3, r1
 804cf46:	bf04      	itt	eq
 804cf48:	6819      	ldreq	r1, [r3, #0]
 804cf4a:	685b      	ldreq	r3, [r3, #4]
 804cf4c:	6063      	str	r3, [r4, #4]
 804cf4e:	bf04      	itt	eq
 804cf50:	1949      	addeq	r1, r1, r5
 804cf52:	6021      	streq	r1, [r4, #0]
 804cf54:	6054      	str	r4, [r2, #4]
 804cf56:	e7ca      	b.n	804ceee <_free_r+0x26>
 804cf58:	b003      	add	sp, #12
 804cf5a:	bd30      	pop	{r4, r5, pc}
 804cf5c:	200011a4 	.word	0x200011a4

0804cf60 <sbrk_aligned>:
 804cf60:	b570      	push	{r4, r5, r6, lr}
 804cf62:	4e0e      	ldr	r6, [pc, #56]	; (804cf9c <sbrk_aligned+0x3c>)
 804cf64:	460c      	mov	r4, r1
 804cf66:	6831      	ldr	r1, [r6, #0]
 804cf68:	4605      	mov	r5, r0
 804cf6a:	b911      	cbnz	r1, 804cf72 <sbrk_aligned+0x12>
 804cf6c:	f000 f91a 	bl	804d1a4 <_sbrk_r>
 804cf70:	6030      	str	r0, [r6, #0]
 804cf72:	4621      	mov	r1, r4
 804cf74:	4628      	mov	r0, r5
 804cf76:	f000 f915 	bl	804d1a4 <_sbrk_r>
 804cf7a:	1c43      	adds	r3, r0, #1
 804cf7c:	d00a      	beq.n	804cf94 <sbrk_aligned+0x34>
 804cf7e:	1cc4      	adds	r4, r0, #3
 804cf80:	f024 0403 	bic.w	r4, r4, #3
 804cf84:	42a0      	cmp	r0, r4
 804cf86:	d007      	beq.n	804cf98 <sbrk_aligned+0x38>
 804cf88:	1a21      	subs	r1, r4, r0
 804cf8a:	4628      	mov	r0, r5
 804cf8c:	f000 f90a 	bl	804d1a4 <_sbrk_r>
 804cf90:	3001      	adds	r0, #1
 804cf92:	d101      	bne.n	804cf98 <sbrk_aligned+0x38>
 804cf94:	f04f 34ff 	mov.w	r4, #4294967295
 804cf98:	4620      	mov	r0, r4
 804cf9a:	bd70      	pop	{r4, r5, r6, pc}
 804cf9c:	200011a8 	.word	0x200011a8

0804cfa0 <_malloc_r>:
 804cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cfa4:	1ccd      	adds	r5, r1, #3
 804cfa6:	f025 0503 	bic.w	r5, r5, #3
 804cfaa:	3508      	adds	r5, #8
 804cfac:	2d0c      	cmp	r5, #12
 804cfae:	bf38      	it	cc
 804cfb0:	250c      	movcc	r5, #12
 804cfb2:	2d00      	cmp	r5, #0
 804cfb4:	4607      	mov	r7, r0
 804cfb6:	db01      	blt.n	804cfbc <_malloc_r+0x1c>
 804cfb8:	42a9      	cmp	r1, r5
 804cfba:	d905      	bls.n	804cfc8 <_malloc_r+0x28>
 804cfbc:	230c      	movs	r3, #12
 804cfbe:	603b      	str	r3, [r7, #0]
 804cfc0:	2600      	movs	r6, #0
 804cfc2:	4630      	mov	r0, r6
 804cfc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cfc8:	4e2e      	ldr	r6, [pc, #184]	; (804d084 <_malloc_r+0xe4>)
 804cfca:	f000 fbfb 	bl	804d7c4 <__malloc_lock>
 804cfce:	6833      	ldr	r3, [r6, #0]
 804cfd0:	461c      	mov	r4, r3
 804cfd2:	bb34      	cbnz	r4, 804d022 <_malloc_r+0x82>
 804cfd4:	4629      	mov	r1, r5
 804cfd6:	4638      	mov	r0, r7
 804cfd8:	f7ff ffc2 	bl	804cf60 <sbrk_aligned>
 804cfdc:	1c43      	adds	r3, r0, #1
 804cfde:	4604      	mov	r4, r0
 804cfe0:	d14d      	bne.n	804d07e <_malloc_r+0xde>
 804cfe2:	6834      	ldr	r4, [r6, #0]
 804cfe4:	4626      	mov	r6, r4
 804cfe6:	2e00      	cmp	r6, #0
 804cfe8:	d140      	bne.n	804d06c <_malloc_r+0xcc>
 804cfea:	6823      	ldr	r3, [r4, #0]
 804cfec:	4631      	mov	r1, r6
 804cfee:	4638      	mov	r0, r7
 804cff0:	eb04 0803 	add.w	r8, r4, r3
 804cff4:	f000 f8d6 	bl	804d1a4 <_sbrk_r>
 804cff8:	4580      	cmp	r8, r0
 804cffa:	d13a      	bne.n	804d072 <_malloc_r+0xd2>
 804cffc:	6821      	ldr	r1, [r4, #0]
 804cffe:	3503      	adds	r5, #3
 804d000:	1a6d      	subs	r5, r5, r1
 804d002:	f025 0503 	bic.w	r5, r5, #3
 804d006:	3508      	adds	r5, #8
 804d008:	2d0c      	cmp	r5, #12
 804d00a:	bf38      	it	cc
 804d00c:	250c      	movcc	r5, #12
 804d00e:	4629      	mov	r1, r5
 804d010:	4638      	mov	r0, r7
 804d012:	f7ff ffa5 	bl	804cf60 <sbrk_aligned>
 804d016:	3001      	adds	r0, #1
 804d018:	d02b      	beq.n	804d072 <_malloc_r+0xd2>
 804d01a:	6823      	ldr	r3, [r4, #0]
 804d01c:	442b      	add	r3, r5
 804d01e:	6023      	str	r3, [r4, #0]
 804d020:	e00e      	b.n	804d040 <_malloc_r+0xa0>
 804d022:	6822      	ldr	r2, [r4, #0]
 804d024:	1b52      	subs	r2, r2, r5
 804d026:	d41e      	bmi.n	804d066 <_malloc_r+0xc6>
 804d028:	2a0b      	cmp	r2, #11
 804d02a:	d916      	bls.n	804d05a <_malloc_r+0xba>
 804d02c:	1961      	adds	r1, r4, r5
 804d02e:	42a3      	cmp	r3, r4
 804d030:	6025      	str	r5, [r4, #0]
 804d032:	bf18      	it	ne
 804d034:	6059      	strne	r1, [r3, #4]
 804d036:	6863      	ldr	r3, [r4, #4]
 804d038:	bf08      	it	eq
 804d03a:	6031      	streq	r1, [r6, #0]
 804d03c:	5162      	str	r2, [r4, r5]
 804d03e:	604b      	str	r3, [r1, #4]
 804d040:	4638      	mov	r0, r7
 804d042:	f104 060b 	add.w	r6, r4, #11
 804d046:	f000 fbc3 	bl	804d7d0 <__malloc_unlock>
 804d04a:	f026 0607 	bic.w	r6, r6, #7
 804d04e:	1d23      	adds	r3, r4, #4
 804d050:	1af2      	subs	r2, r6, r3
 804d052:	d0b6      	beq.n	804cfc2 <_malloc_r+0x22>
 804d054:	1b9b      	subs	r3, r3, r6
 804d056:	50a3      	str	r3, [r4, r2]
 804d058:	e7b3      	b.n	804cfc2 <_malloc_r+0x22>
 804d05a:	6862      	ldr	r2, [r4, #4]
 804d05c:	42a3      	cmp	r3, r4
 804d05e:	bf0c      	ite	eq
 804d060:	6032      	streq	r2, [r6, #0]
 804d062:	605a      	strne	r2, [r3, #4]
 804d064:	e7ec      	b.n	804d040 <_malloc_r+0xa0>
 804d066:	4623      	mov	r3, r4
 804d068:	6864      	ldr	r4, [r4, #4]
 804d06a:	e7b2      	b.n	804cfd2 <_malloc_r+0x32>
 804d06c:	4634      	mov	r4, r6
 804d06e:	6876      	ldr	r6, [r6, #4]
 804d070:	e7b9      	b.n	804cfe6 <_malloc_r+0x46>
 804d072:	230c      	movs	r3, #12
 804d074:	603b      	str	r3, [r7, #0]
 804d076:	4638      	mov	r0, r7
 804d078:	f000 fbaa 	bl	804d7d0 <__malloc_unlock>
 804d07c:	e7a1      	b.n	804cfc2 <_malloc_r+0x22>
 804d07e:	6025      	str	r5, [r4, #0]
 804d080:	e7de      	b.n	804d040 <_malloc_r+0xa0>
 804d082:	bf00      	nop
 804d084:	200011a4 	.word	0x200011a4

0804d088 <iprintf>:
 804d088:	b40f      	push	{r0, r1, r2, r3}
 804d08a:	4b0a      	ldr	r3, [pc, #40]	; (804d0b4 <iprintf+0x2c>)
 804d08c:	b513      	push	{r0, r1, r4, lr}
 804d08e:	681c      	ldr	r4, [r3, #0]
 804d090:	b124      	cbz	r4, 804d09c <iprintf+0x14>
 804d092:	69a3      	ldr	r3, [r4, #24]
 804d094:	b913      	cbnz	r3, 804d09c <iprintf+0x14>
 804d096:	4620      	mov	r0, r4
 804d098:	f000 fa8e 	bl	804d5b8 <__sinit>
 804d09c:	ab05      	add	r3, sp, #20
 804d09e:	9a04      	ldr	r2, [sp, #16]
 804d0a0:	68a1      	ldr	r1, [r4, #8]
 804d0a2:	9301      	str	r3, [sp, #4]
 804d0a4:	4620      	mov	r0, r4
 804d0a6:	f000 fd1f 	bl	804dae8 <_vfiprintf_r>
 804d0aa:	b002      	add	sp, #8
 804d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d0b0:	b004      	add	sp, #16
 804d0b2:	4770      	bx	lr
 804d0b4:	2000007c 	.word	0x2000007c

0804d0b8 <_puts_r>:
 804d0b8:	b570      	push	{r4, r5, r6, lr}
 804d0ba:	460e      	mov	r6, r1
 804d0bc:	4605      	mov	r5, r0
 804d0be:	b118      	cbz	r0, 804d0c8 <_puts_r+0x10>
 804d0c0:	6983      	ldr	r3, [r0, #24]
 804d0c2:	b90b      	cbnz	r3, 804d0c8 <_puts_r+0x10>
 804d0c4:	f000 fa78 	bl	804d5b8 <__sinit>
 804d0c8:	69ab      	ldr	r3, [r5, #24]
 804d0ca:	68ac      	ldr	r4, [r5, #8]
 804d0cc:	b913      	cbnz	r3, 804d0d4 <_puts_r+0x1c>
 804d0ce:	4628      	mov	r0, r5
 804d0d0:	f000 fa72 	bl	804d5b8 <__sinit>
 804d0d4:	4b2c      	ldr	r3, [pc, #176]	; (804d188 <_puts_r+0xd0>)
 804d0d6:	429c      	cmp	r4, r3
 804d0d8:	d120      	bne.n	804d11c <_puts_r+0x64>
 804d0da:	686c      	ldr	r4, [r5, #4]
 804d0dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d0de:	07db      	lsls	r3, r3, #31
 804d0e0:	d405      	bmi.n	804d0ee <_puts_r+0x36>
 804d0e2:	89a3      	ldrh	r3, [r4, #12]
 804d0e4:	0598      	lsls	r0, r3, #22
 804d0e6:	d402      	bmi.n	804d0ee <_puts_r+0x36>
 804d0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d0ea:	f000 fb03 	bl	804d6f4 <__retarget_lock_acquire_recursive>
 804d0ee:	89a3      	ldrh	r3, [r4, #12]
 804d0f0:	0719      	lsls	r1, r3, #28
 804d0f2:	d51d      	bpl.n	804d130 <_puts_r+0x78>
 804d0f4:	6923      	ldr	r3, [r4, #16]
 804d0f6:	b1db      	cbz	r3, 804d130 <_puts_r+0x78>
 804d0f8:	3e01      	subs	r6, #1
 804d0fa:	68a3      	ldr	r3, [r4, #8]
 804d0fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804d100:	3b01      	subs	r3, #1
 804d102:	60a3      	str	r3, [r4, #8]
 804d104:	bb39      	cbnz	r1, 804d156 <_puts_r+0x9e>
 804d106:	2b00      	cmp	r3, #0
 804d108:	da38      	bge.n	804d17c <_puts_r+0xc4>
 804d10a:	4622      	mov	r2, r4
 804d10c:	210a      	movs	r1, #10
 804d10e:	4628      	mov	r0, r5
 804d110:	f000 f878 	bl	804d204 <__swbuf_r>
 804d114:	3001      	adds	r0, #1
 804d116:	d011      	beq.n	804d13c <_puts_r+0x84>
 804d118:	250a      	movs	r5, #10
 804d11a:	e011      	b.n	804d140 <_puts_r+0x88>
 804d11c:	4b1b      	ldr	r3, [pc, #108]	; (804d18c <_puts_r+0xd4>)
 804d11e:	429c      	cmp	r4, r3
 804d120:	d101      	bne.n	804d126 <_puts_r+0x6e>
 804d122:	68ac      	ldr	r4, [r5, #8]
 804d124:	e7da      	b.n	804d0dc <_puts_r+0x24>
 804d126:	4b1a      	ldr	r3, [pc, #104]	; (804d190 <_puts_r+0xd8>)
 804d128:	429c      	cmp	r4, r3
 804d12a:	bf08      	it	eq
 804d12c:	68ec      	ldreq	r4, [r5, #12]
 804d12e:	e7d5      	b.n	804d0dc <_puts_r+0x24>
 804d130:	4621      	mov	r1, r4
 804d132:	4628      	mov	r0, r5
 804d134:	f000 f8b8 	bl	804d2a8 <__swsetup_r>
 804d138:	2800      	cmp	r0, #0
 804d13a:	d0dd      	beq.n	804d0f8 <_puts_r+0x40>
 804d13c:	f04f 35ff 	mov.w	r5, #4294967295
 804d140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d142:	07da      	lsls	r2, r3, #31
 804d144:	d405      	bmi.n	804d152 <_puts_r+0x9a>
 804d146:	89a3      	ldrh	r3, [r4, #12]
 804d148:	059b      	lsls	r3, r3, #22
 804d14a:	d402      	bmi.n	804d152 <_puts_r+0x9a>
 804d14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d14e:	f000 fad2 	bl	804d6f6 <__retarget_lock_release_recursive>
 804d152:	4628      	mov	r0, r5
 804d154:	bd70      	pop	{r4, r5, r6, pc}
 804d156:	2b00      	cmp	r3, #0
 804d158:	da04      	bge.n	804d164 <_puts_r+0xac>
 804d15a:	69a2      	ldr	r2, [r4, #24]
 804d15c:	429a      	cmp	r2, r3
 804d15e:	dc06      	bgt.n	804d16e <_puts_r+0xb6>
 804d160:	290a      	cmp	r1, #10
 804d162:	d004      	beq.n	804d16e <_puts_r+0xb6>
 804d164:	6823      	ldr	r3, [r4, #0]
 804d166:	1c5a      	adds	r2, r3, #1
 804d168:	6022      	str	r2, [r4, #0]
 804d16a:	7019      	strb	r1, [r3, #0]
 804d16c:	e7c5      	b.n	804d0fa <_puts_r+0x42>
 804d16e:	4622      	mov	r2, r4
 804d170:	4628      	mov	r0, r5
 804d172:	f000 f847 	bl	804d204 <__swbuf_r>
 804d176:	3001      	adds	r0, #1
 804d178:	d1bf      	bne.n	804d0fa <_puts_r+0x42>
 804d17a:	e7df      	b.n	804d13c <_puts_r+0x84>
 804d17c:	6823      	ldr	r3, [r4, #0]
 804d17e:	250a      	movs	r5, #10
 804d180:	1c5a      	adds	r2, r3, #1
 804d182:	6022      	str	r2, [r4, #0]
 804d184:	701d      	strb	r5, [r3, #0]
 804d186:	e7db      	b.n	804d140 <_puts_r+0x88>
 804d188:	080508b0 	.word	0x080508b0
 804d18c:	080508d0 	.word	0x080508d0
 804d190:	08050890 	.word	0x08050890

0804d194 <puts>:
 804d194:	4b02      	ldr	r3, [pc, #8]	; (804d1a0 <puts+0xc>)
 804d196:	4601      	mov	r1, r0
 804d198:	6818      	ldr	r0, [r3, #0]
 804d19a:	f7ff bf8d 	b.w	804d0b8 <_puts_r>
 804d19e:	bf00      	nop
 804d1a0:	2000007c 	.word	0x2000007c

0804d1a4 <_sbrk_r>:
 804d1a4:	b538      	push	{r3, r4, r5, lr}
 804d1a6:	4d06      	ldr	r5, [pc, #24]	; (804d1c0 <_sbrk_r+0x1c>)
 804d1a8:	2300      	movs	r3, #0
 804d1aa:	4604      	mov	r4, r0
 804d1ac:	4608      	mov	r0, r1
 804d1ae:	602b      	str	r3, [r5, #0]
 804d1b0:	f7f4 fe94 	bl	8041edc <_sbrk>
 804d1b4:	1c43      	adds	r3, r0, #1
 804d1b6:	d102      	bne.n	804d1be <_sbrk_r+0x1a>
 804d1b8:	682b      	ldr	r3, [r5, #0]
 804d1ba:	b103      	cbz	r3, 804d1be <_sbrk_r+0x1a>
 804d1bc:	6023      	str	r3, [r4, #0]
 804d1be:	bd38      	pop	{r3, r4, r5, pc}
 804d1c0:	200011b0 	.word	0x200011b0

0804d1c4 <siprintf>:
 804d1c4:	b40e      	push	{r1, r2, r3}
 804d1c6:	b500      	push	{lr}
 804d1c8:	b09c      	sub	sp, #112	; 0x70
 804d1ca:	ab1d      	add	r3, sp, #116	; 0x74
 804d1cc:	9002      	str	r0, [sp, #8]
 804d1ce:	9006      	str	r0, [sp, #24]
 804d1d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804d1d4:	4809      	ldr	r0, [pc, #36]	; (804d1fc <siprintf+0x38>)
 804d1d6:	9107      	str	r1, [sp, #28]
 804d1d8:	9104      	str	r1, [sp, #16]
 804d1da:	4909      	ldr	r1, [pc, #36]	; (804d200 <siprintf+0x3c>)
 804d1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 804d1e0:	9105      	str	r1, [sp, #20]
 804d1e2:	6800      	ldr	r0, [r0, #0]
 804d1e4:	9301      	str	r3, [sp, #4]
 804d1e6:	a902      	add	r1, sp, #8
 804d1e8:	f000 fb54 	bl	804d894 <_svfiprintf_r>
 804d1ec:	9b02      	ldr	r3, [sp, #8]
 804d1ee:	2200      	movs	r2, #0
 804d1f0:	701a      	strb	r2, [r3, #0]
 804d1f2:	b01c      	add	sp, #112	; 0x70
 804d1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 804d1f8:	b003      	add	sp, #12
 804d1fa:	4770      	bx	lr
 804d1fc:	2000007c 	.word	0x2000007c
 804d200:	ffff0208 	.word	0xffff0208

0804d204 <__swbuf_r>:
 804d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d206:	460e      	mov	r6, r1
 804d208:	4614      	mov	r4, r2
 804d20a:	4605      	mov	r5, r0
 804d20c:	b118      	cbz	r0, 804d216 <__swbuf_r+0x12>
 804d20e:	6983      	ldr	r3, [r0, #24]
 804d210:	b90b      	cbnz	r3, 804d216 <__swbuf_r+0x12>
 804d212:	f000 f9d1 	bl	804d5b8 <__sinit>
 804d216:	4b21      	ldr	r3, [pc, #132]	; (804d29c <__swbuf_r+0x98>)
 804d218:	429c      	cmp	r4, r3
 804d21a:	d12b      	bne.n	804d274 <__swbuf_r+0x70>
 804d21c:	686c      	ldr	r4, [r5, #4]
 804d21e:	69a3      	ldr	r3, [r4, #24]
 804d220:	60a3      	str	r3, [r4, #8]
 804d222:	89a3      	ldrh	r3, [r4, #12]
 804d224:	071a      	lsls	r2, r3, #28
 804d226:	d52f      	bpl.n	804d288 <__swbuf_r+0x84>
 804d228:	6923      	ldr	r3, [r4, #16]
 804d22a:	b36b      	cbz	r3, 804d288 <__swbuf_r+0x84>
 804d22c:	6923      	ldr	r3, [r4, #16]
 804d22e:	6820      	ldr	r0, [r4, #0]
 804d230:	1ac0      	subs	r0, r0, r3
 804d232:	6963      	ldr	r3, [r4, #20]
 804d234:	b2f6      	uxtb	r6, r6
 804d236:	4283      	cmp	r3, r0
 804d238:	4637      	mov	r7, r6
 804d23a:	dc04      	bgt.n	804d246 <__swbuf_r+0x42>
 804d23c:	4621      	mov	r1, r4
 804d23e:	4628      	mov	r0, r5
 804d240:	f000 f926 	bl	804d490 <_fflush_r>
 804d244:	bb30      	cbnz	r0, 804d294 <__swbuf_r+0x90>
 804d246:	68a3      	ldr	r3, [r4, #8]
 804d248:	3b01      	subs	r3, #1
 804d24a:	60a3      	str	r3, [r4, #8]
 804d24c:	6823      	ldr	r3, [r4, #0]
 804d24e:	1c5a      	adds	r2, r3, #1
 804d250:	6022      	str	r2, [r4, #0]
 804d252:	701e      	strb	r6, [r3, #0]
 804d254:	6963      	ldr	r3, [r4, #20]
 804d256:	3001      	adds	r0, #1
 804d258:	4283      	cmp	r3, r0
 804d25a:	d004      	beq.n	804d266 <__swbuf_r+0x62>
 804d25c:	89a3      	ldrh	r3, [r4, #12]
 804d25e:	07db      	lsls	r3, r3, #31
 804d260:	d506      	bpl.n	804d270 <__swbuf_r+0x6c>
 804d262:	2e0a      	cmp	r6, #10
 804d264:	d104      	bne.n	804d270 <__swbuf_r+0x6c>
 804d266:	4621      	mov	r1, r4
 804d268:	4628      	mov	r0, r5
 804d26a:	f000 f911 	bl	804d490 <_fflush_r>
 804d26e:	b988      	cbnz	r0, 804d294 <__swbuf_r+0x90>
 804d270:	4638      	mov	r0, r7
 804d272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d274:	4b0a      	ldr	r3, [pc, #40]	; (804d2a0 <__swbuf_r+0x9c>)
 804d276:	429c      	cmp	r4, r3
 804d278:	d101      	bne.n	804d27e <__swbuf_r+0x7a>
 804d27a:	68ac      	ldr	r4, [r5, #8]
 804d27c:	e7cf      	b.n	804d21e <__swbuf_r+0x1a>
 804d27e:	4b09      	ldr	r3, [pc, #36]	; (804d2a4 <__swbuf_r+0xa0>)
 804d280:	429c      	cmp	r4, r3
 804d282:	bf08      	it	eq
 804d284:	68ec      	ldreq	r4, [r5, #12]
 804d286:	e7ca      	b.n	804d21e <__swbuf_r+0x1a>
 804d288:	4621      	mov	r1, r4
 804d28a:	4628      	mov	r0, r5
 804d28c:	f000 f80c 	bl	804d2a8 <__swsetup_r>
 804d290:	2800      	cmp	r0, #0
 804d292:	d0cb      	beq.n	804d22c <__swbuf_r+0x28>
 804d294:	f04f 37ff 	mov.w	r7, #4294967295
 804d298:	e7ea      	b.n	804d270 <__swbuf_r+0x6c>
 804d29a:	bf00      	nop
 804d29c:	080508b0 	.word	0x080508b0
 804d2a0:	080508d0 	.word	0x080508d0
 804d2a4:	08050890 	.word	0x08050890

0804d2a8 <__swsetup_r>:
 804d2a8:	4b32      	ldr	r3, [pc, #200]	; (804d374 <__swsetup_r+0xcc>)
 804d2aa:	b570      	push	{r4, r5, r6, lr}
 804d2ac:	681d      	ldr	r5, [r3, #0]
 804d2ae:	4606      	mov	r6, r0
 804d2b0:	460c      	mov	r4, r1
 804d2b2:	b125      	cbz	r5, 804d2be <__swsetup_r+0x16>
 804d2b4:	69ab      	ldr	r3, [r5, #24]
 804d2b6:	b913      	cbnz	r3, 804d2be <__swsetup_r+0x16>
 804d2b8:	4628      	mov	r0, r5
 804d2ba:	f000 f97d 	bl	804d5b8 <__sinit>
 804d2be:	4b2e      	ldr	r3, [pc, #184]	; (804d378 <__swsetup_r+0xd0>)
 804d2c0:	429c      	cmp	r4, r3
 804d2c2:	d10f      	bne.n	804d2e4 <__swsetup_r+0x3c>
 804d2c4:	686c      	ldr	r4, [r5, #4]
 804d2c6:	89a3      	ldrh	r3, [r4, #12]
 804d2c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804d2cc:	0719      	lsls	r1, r3, #28
 804d2ce:	d42c      	bmi.n	804d32a <__swsetup_r+0x82>
 804d2d0:	06dd      	lsls	r5, r3, #27
 804d2d2:	d411      	bmi.n	804d2f8 <__swsetup_r+0x50>
 804d2d4:	2309      	movs	r3, #9
 804d2d6:	6033      	str	r3, [r6, #0]
 804d2d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804d2dc:	81a3      	strh	r3, [r4, #12]
 804d2de:	f04f 30ff 	mov.w	r0, #4294967295
 804d2e2:	e03e      	b.n	804d362 <__swsetup_r+0xba>
 804d2e4:	4b25      	ldr	r3, [pc, #148]	; (804d37c <__swsetup_r+0xd4>)
 804d2e6:	429c      	cmp	r4, r3
 804d2e8:	d101      	bne.n	804d2ee <__swsetup_r+0x46>
 804d2ea:	68ac      	ldr	r4, [r5, #8]
 804d2ec:	e7eb      	b.n	804d2c6 <__swsetup_r+0x1e>
 804d2ee:	4b24      	ldr	r3, [pc, #144]	; (804d380 <__swsetup_r+0xd8>)
 804d2f0:	429c      	cmp	r4, r3
 804d2f2:	bf08      	it	eq
 804d2f4:	68ec      	ldreq	r4, [r5, #12]
 804d2f6:	e7e6      	b.n	804d2c6 <__swsetup_r+0x1e>
 804d2f8:	0758      	lsls	r0, r3, #29
 804d2fa:	d512      	bpl.n	804d322 <__swsetup_r+0x7a>
 804d2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804d2fe:	b141      	cbz	r1, 804d312 <__swsetup_r+0x6a>
 804d300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804d304:	4299      	cmp	r1, r3
 804d306:	d002      	beq.n	804d30e <__swsetup_r+0x66>
 804d308:	4630      	mov	r0, r6
 804d30a:	f7ff fddd 	bl	804cec8 <_free_r>
 804d30e:	2300      	movs	r3, #0
 804d310:	6363      	str	r3, [r4, #52]	; 0x34
 804d312:	89a3      	ldrh	r3, [r4, #12]
 804d314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804d318:	81a3      	strh	r3, [r4, #12]
 804d31a:	2300      	movs	r3, #0
 804d31c:	6063      	str	r3, [r4, #4]
 804d31e:	6923      	ldr	r3, [r4, #16]
 804d320:	6023      	str	r3, [r4, #0]
 804d322:	89a3      	ldrh	r3, [r4, #12]
 804d324:	f043 0308 	orr.w	r3, r3, #8
 804d328:	81a3      	strh	r3, [r4, #12]
 804d32a:	6923      	ldr	r3, [r4, #16]
 804d32c:	b94b      	cbnz	r3, 804d342 <__swsetup_r+0x9a>
 804d32e:	89a3      	ldrh	r3, [r4, #12]
 804d330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804d334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804d338:	d003      	beq.n	804d342 <__swsetup_r+0x9a>
 804d33a:	4621      	mov	r1, r4
 804d33c:	4630      	mov	r0, r6
 804d33e:	f000 fa01 	bl	804d744 <__smakebuf_r>
 804d342:	89a0      	ldrh	r0, [r4, #12]
 804d344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804d348:	f010 0301 	ands.w	r3, r0, #1
 804d34c:	d00a      	beq.n	804d364 <__swsetup_r+0xbc>
 804d34e:	2300      	movs	r3, #0
 804d350:	60a3      	str	r3, [r4, #8]
 804d352:	6963      	ldr	r3, [r4, #20]
 804d354:	425b      	negs	r3, r3
 804d356:	61a3      	str	r3, [r4, #24]
 804d358:	6923      	ldr	r3, [r4, #16]
 804d35a:	b943      	cbnz	r3, 804d36e <__swsetup_r+0xc6>
 804d35c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804d360:	d1ba      	bne.n	804d2d8 <__swsetup_r+0x30>
 804d362:	bd70      	pop	{r4, r5, r6, pc}
 804d364:	0781      	lsls	r1, r0, #30
 804d366:	bf58      	it	pl
 804d368:	6963      	ldrpl	r3, [r4, #20]
 804d36a:	60a3      	str	r3, [r4, #8]
 804d36c:	e7f4      	b.n	804d358 <__swsetup_r+0xb0>
 804d36e:	2000      	movs	r0, #0
 804d370:	e7f7      	b.n	804d362 <__swsetup_r+0xba>
 804d372:	bf00      	nop
 804d374:	2000007c 	.word	0x2000007c
 804d378:	080508b0 	.word	0x080508b0
 804d37c:	080508d0 	.word	0x080508d0
 804d380:	08050890 	.word	0x08050890

0804d384 <__sflush_r>:
 804d384:	898a      	ldrh	r2, [r1, #12]
 804d386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d38a:	4605      	mov	r5, r0
 804d38c:	0710      	lsls	r0, r2, #28
 804d38e:	460c      	mov	r4, r1
 804d390:	d458      	bmi.n	804d444 <__sflush_r+0xc0>
 804d392:	684b      	ldr	r3, [r1, #4]
 804d394:	2b00      	cmp	r3, #0
 804d396:	dc05      	bgt.n	804d3a4 <__sflush_r+0x20>
 804d398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804d39a:	2b00      	cmp	r3, #0
 804d39c:	dc02      	bgt.n	804d3a4 <__sflush_r+0x20>
 804d39e:	2000      	movs	r0, #0
 804d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804d3a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804d3a6:	2e00      	cmp	r6, #0
 804d3a8:	d0f9      	beq.n	804d39e <__sflush_r+0x1a>
 804d3aa:	2300      	movs	r3, #0
 804d3ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804d3b0:	682f      	ldr	r7, [r5, #0]
 804d3b2:	602b      	str	r3, [r5, #0]
 804d3b4:	d032      	beq.n	804d41c <__sflush_r+0x98>
 804d3b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804d3b8:	89a3      	ldrh	r3, [r4, #12]
 804d3ba:	075a      	lsls	r2, r3, #29
 804d3bc:	d505      	bpl.n	804d3ca <__sflush_r+0x46>
 804d3be:	6863      	ldr	r3, [r4, #4]
 804d3c0:	1ac0      	subs	r0, r0, r3
 804d3c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804d3c4:	b10b      	cbz	r3, 804d3ca <__sflush_r+0x46>
 804d3c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804d3c8:	1ac0      	subs	r0, r0, r3
 804d3ca:	2300      	movs	r3, #0
 804d3cc:	4602      	mov	r2, r0
 804d3ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804d3d0:	6a21      	ldr	r1, [r4, #32]
 804d3d2:	4628      	mov	r0, r5
 804d3d4:	47b0      	blx	r6
 804d3d6:	1c43      	adds	r3, r0, #1
 804d3d8:	89a3      	ldrh	r3, [r4, #12]
 804d3da:	d106      	bne.n	804d3ea <__sflush_r+0x66>
 804d3dc:	6829      	ldr	r1, [r5, #0]
 804d3de:	291d      	cmp	r1, #29
 804d3e0:	d82c      	bhi.n	804d43c <__sflush_r+0xb8>
 804d3e2:	4a2a      	ldr	r2, [pc, #168]	; (804d48c <__sflush_r+0x108>)
 804d3e4:	40ca      	lsrs	r2, r1
 804d3e6:	07d6      	lsls	r6, r2, #31
 804d3e8:	d528      	bpl.n	804d43c <__sflush_r+0xb8>
 804d3ea:	2200      	movs	r2, #0
 804d3ec:	6062      	str	r2, [r4, #4]
 804d3ee:	04d9      	lsls	r1, r3, #19
 804d3f0:	6922      	ldr	r2, [r4, #16]
 804d3f2:	6022      	str	r2, [r4, #0]
 804d3f4:	d504      	bpl.n	804d400 <__sflush_r+0x7c>
 804d3f6:	1c42      	adds	r2, r0, #1
 804d3f8:	d101      	bne.n	804d3fe <__sflush_r+0x7a>
 804d3fa:	682b      	ldr	r3, [r5, #0]
 804d3fc:	b903      	cbnz	r3, 804d400 <__sflush_r+0x7c>
 804d3fe:	6560      	str	r0, [r4, #84]	; 0x54
 804d400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804d402:	602f      	str	r7, [r5, #0]
 804d404:	2900      	cmp	r1, #0
 804d406:	d0ca      	beq.n	804d39e <__sflush_r+0x1a>
 804d408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804d40c:	4299      	cmp	r1, r3
 804d40e:	d002      	beq.n	804d416 <__sflush_r+0x92>
 804d410:	4628      	mov	r0, r5
 804d412:	f7ff fd59 	bl	804cec8 <_free_r>
 804d416:	2000      	movs	r0, #0
 804d418:	6360      	str	r0, [r4, #52]	; 0x34
 804d41a:	e7c1      	b.n	804d3a0 <__sflush_r+0x1c>
 804d41c:	6a21      	ldr	r1, [r4, #32]
 804d41e:	2301      	movs	r3, #1
 804d420:	4628      	mov	r0, r5
 804d422:	47b0      	blx	r6
 804d424:	1c41      	adds	r1, r0, #1
 804d426:	d1c7      	bne.n	804d3b8 <__sflush_r+0x34>
 804d428:	682b      	ldr	r3, [r5, #0]
 804d42a:	2b00      	cmp	r3, #0
 804d42c:	d0c4      	beq.n	804d3b8 <__sflush_r+0x34>
 804d42e:	2b1d      	cmp	r3, #29
 804d430:	d001      	beq.n	804d436 <__sflush_r+0xb2>
 804d432:	2b16      	cmp	r3, #22
 804d434:	d101      	bne.n	804d43a <__sflush_r+0xb6>
 804d436:	602f      	str	r7, [r5, #0]
 804d438:	e7b1      	b.n	804d39e <__sflush_r+0x1a>
 804d43a:	89a3      	ldrh	r3, [r4, #12]
 804d43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d440:	81a3      	strh	r3, [r4, #12]
 804d442:	e7ad      	b.n	804d3a0 <__sflush_r+0x1c>
 804d444:	690f      	ldr	r7, [r1, #16]
 804d446:	2f00      	cmp	r7, #0
 804d448:	d0a9      	beq.n	804d39e <__sflush_r+0x1a>
 804d44a:	0793      	lsls	r3, r2, #30
 804d44c:	680e      	ldr	r6, [r1, #0]
 804d44e:	bf08      	it	eq
 804d450:	694b      	ldreq	r3, [r1, #20]
 804d452:	600f      	str	r7, [r1, #0]
 804d454:	bf18      	it	ne
 804d456:	2300      	movne	r3, #0
 804d458:	eba6 0807 	sub.w	r8, r6, r7
 804d45c:	608b      	str	r3, [r1, #8]
 804d45e:	f1b8 0f00 	cmp.w	r8, #0
 804d462:	dd9c      	ble.n	804d39e <__sflush_r+0x1a>
 804d464:	6a21      	ldr	r1, [r4, #32]
 804d466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804d468:	4643      	mov	r3, r8
 804d46a:	463a      	mov	r2, r7
 804d46c:	4628      	mov	r0, r5
 804d46e:	47b0      	blx	r6
 804d470:	2800      	cmp	r0, #0
 804d472:	dc06      	bgt.n	804d482 <__sflush_r+0xfe>
 804d474:	89a3      	ldrh	r3, [r4, #12]
 804d476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d47a:	81a3      	strh	r3, [r4, #12]
 804d47c:	f04f 30ff 	mov.w	r0, #4294967295
 804d480:	e78e      	b.n	804d3a0 <__sflush_r+0x1c>
 804d482:	4407      	add	r7, r0
 804d484:	eba8 0800 	sub.w	r8, r8, r0
 804d488:	e7e9      	b.n	804d45e <__sflush_r+0xda>
 804d48a:	bf00      	nop
 804d48c:	20400001 	.word	0x20400001

0804d490 <_fflush_r>:
 804d490:	b538      	push	{r3, r4, r5, lr}
 804d492:	690b      	ldr	r3, [r1, #16]
 804d494:	4605      	mov	r5, r0
 804d496:	460c      	mov	r4, r1
 804d498:	b913      	cbnz	r3, 804d4a0 <_fflush_r+0x10>
 804d49a:	2500      	movs	r5, #0
 804d49c:	4628      	mov	r0, r5
 804d49e:	bd38      	pop	{r3, r4, r5, pc}
 804d4a0:	b118      	cbz	r0, 804d4aa <_fflush_r+0x1a>
 804d4a2:	6983      	ldr	r3, [r0, #24]
 804d4a4:	b90b      	cbnz	r3, 804d4aa <_fflush_r+0x1a>
 804d4a6:	f000 f887 	bl	804d5b8 <__sinit>
 804d4aa:	4b14      	ldr	r3, [pc, #80]	; (804d4fc <_fflush_r+0x6c>)
 804d4ac:	429c      	cmp	r4, r3
 804d4ae:	d11b      	bne.n	804d4e8 <_fflush_r+0x58>
 804d4b0:	686c      	ldr	r4, [r5, #4]
 804d4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d4b6:	2b00      	cmp	r3, #0
 804d4b8:	d0ef      	beq.n	804d49a <_fflush_r+0xa>
 804d4ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804d4bc:	07d0      	lsls	r0, r2, #31
 804d4be:	d404      	bmi.n	804d4ca <_fflush_r+0x3a>
 804d4c0:	0599      	lsls	r1, r3, #22
 804d4c2:	d402      	bmi.n	804d4ca <_fflush_r+0x3a>
 804d4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d4c6:	f000 f915 	bl	804d6f4 <__retarget_lock_acquire_recursive>
 804d4ca:	4628      	mov	r0, r5
 804d4cc:	4621      	mov	r1, r4
 804d4ce:	f7ff ff59 	bl	804d384 <__sflush_r>
 804d4d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d4d4:	07da      	lsls	r2, r3, #31
 804d4d6:	4605      	mov	r5, r0
 804d4d8:	d4e0      	bmi.n	804d49c <_fflush_r+0xc>
 804d4da:	89a3      	ldrh	r3, [r4, #12]
 804d4dc:	059b      	lsls	r3, r3, #22
 804d4de:	d4dd      	bmi.n	804d49c <_fflush_r+0xc>
 804d4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d4e2:	f000 f908 	bl	804d6f6 <__retarget_lock_release_recursive>
 804d4e6:	e7d9      	b.n	804d49c <_fflush_r+0xc>
 804d4e8:	4b05      	ldr	r3, [pc, #20]	; (804d500 <_fflush_r+0x70>)
 804d4ea:	429c      	cmp	r4, r3
 804d4ec:	d101      	bne.n	804d4f2 <_fflush_r+0x62>
 804d4ee:	68ac      	ldr	r4, [r5, #8]
 804d4f0:	e7df      	b.n	804d4b2 <_fflush_r+0x22>
 804d4f2:	4b04      	ldr	r3, [pc, #16]	; (804d504 <_fflush_r+0x74>)
 804d4f4:	429c      	cmp	r4, r3
 804d4f6:	bf08      	it	eq
 804d4f8:	68ec      	ldreq	r4, [r5, #12]
 804d4fa:	e7da      	b.n	804d4b2 <_fflush_r+0x22>
 804d4fc:	080508b0 	.word	0x080508b0
 804d500:	080508d0 	.word	0x080508d0
 804d504:	08050890 	.word	0x08050890

0804d508 <std>:
 804d508:	2300      	movs	r3, #0
 804d50a:	b510      	push	{r4, lr}
 804d50c:	4604      	mov	r4, r0
 804d50e:	e9c0 3300 	strd	r3, r3, [r0]
 804d512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804d516:	6083      	str	r3, [r0, #8]
 804d518:	8181      	strh	r1, [r0, #12]
 804d51a:	6643      	str	r3, [r0, #100]	; 0x64
 804d51c:	81c2      	strh	r2, [r0, #14]
 804d51e:	6183      	str	r3, [r0, #24]
 804d520:	4619      	mov	r1, r3
 804d522:	2208      	movs	r2, #8
 804d524:	305c      	adds	r0, #92	; 0x5c
 804d526:	f7ff fcc7 	bl	804ceb8 <memset>
 804d52a:	4b05      	ldr	r3, [pc, #20]	; (804d540 <std+0x38>)
 804d52c:	6263      	str	r3, [r4, #36]	; 0x24
 804d52e:	4b05      	ldr	r3, [pc, #20]	; (804d544 <std+0x3c>)
 804d530:	62a3      	str	r3, [r4, #40]	; 0x28
 804d532:	4b05      	ldr	r3, [pc, #20]	; (804d548 <std+0x40>)
 804d534:	62e3      	str	r3, [r4, #44]	; 0x2c
 804d536:	4b05      	ldr	r3, [pc, #20]	; (804d54c <std+0x44>)
 804d538:	6224      	str	r4, [r4, #32]
 804d53a:	6323      	str	r3, [r4, #48]	; 0x30
 804d53c:	bd10      	pop	{r4, pc}
 804d53e:	bf00      	nop
 804d540:	0804e071 	.word	0x0804e071
 804d544:	0804e093 	.word	0x0804e093
 804d548:	0804e0cb 	.word	0x0804e0cb
 804d54c:	0804e0ef 	.word	0x0804e0ef

0804d550 <_cleanup_r>:
 804d550:	4901      	ldr	r1, [pc, #4]	; (804d558 <_cleanup_r+0x8>)
 804d552:	f000 b8af 	b.w	804d6b4 <_fwalk_reent>
 804d556:	bf00      	nop
 804d558:	0804d491 	.word	0x0804d491

0804d55c <__sfmoreglue>:
 804d55c:	b570      	push	{r4, r5, r6, lr}
 804d55e:	2268      	movs	r2, #104	; 0x68
 804d560:	1e4d      	subs	r5, r1, #1
 804d562:	4355      	muls	r5, r2
 804d564:	460e      	mov	r6, r1
 804d566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804d56a:	f7ff fd19 	bl	804cfa0 <_malloc_r>
 804d56e:	4604      	mov	r4, r0
 804d570:	b140      	cbz	r0, 804d584 <__sfmoreglue+0x28>
 804d572:	2100      	movs	r1, #0
 804d574:	e9c0 1600 	strd	r1, r6, [r0]
 804d578:	300c      	adds	r0, #12
 804d57a:	60a0      	str	r0, [r4, #8]
 804d57c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804d580:	f7ff fc9a 	bl	804ceb8 <memset>
 804d584:	4620      	mov	r0, r4
 804d586:	bd70      	pop	{r4, r5, r6, pc}

0804d588 <__sfp_lock_acquire>:
 804d588:	4801      	ldr	r0, [pc, #4]	; (804d590 <__sfp_lock_acquire+0x8>)
 804d58a:	f000 b8b3 	b.w	804d6f4 <__retarget_lock_acquire_recursive>
 804d58e:	bf00      	nop
 804d590:	200011ad 	.word	0x200011ad

0804d594 <__sfp_lock_release>:
 804d594:	4801      	ldr	r0, [pc, #4]	; (804d59c <__sfp_lock_release+0x8>)
 804d596:	f000 b8ae 	b.w	804d6f6 <__retarget_lock_release_recursive>
 804d59a:	bf00      	nop
 804d59c:	200011ad 	.word	0x200011ad

0804d5a0 <__sinit_lock_acquire>:
 804d5a0:	4801      	ldr	r0, [pc, #4]	; (804d5a8 <__sinit_lock_acquire+0x8>)
 804d5a2:	f000 b8a7 	b.w	804d6f4 <__retarget_lock_acquire_recursive>
 804d5a6:	bf00      	nop
 804d5a8:	200011ae 	.word	0x200011ae

0804d5ac <__sinit_lock_release>:
 804d5ac:	4801      	ldr	r0, [pc, #4]	; (804d5b4 <__sinit_lock_release+0x8>)
 804d5ae:	f000 b8a2 	b.w	804d6f6 <__retarget_lock_release_recursive>
 804d5b2:	bf00      	nop
 804d5b4:	200011ae 	.word	0x200011ae

0804d5b8 <__sinit>:
 804d5b8:	b510      	push	{r4, lr}
 804d5ba:	4604      	mov	r4, r0
 804d5bc:	f7ff fff0 	bl	804d5a0 <__sinit_lock_acquire>
 804d5c0:	69a3      	ldr	r3, [r4, #24]
 804d5c2:	b11b      	cbz	r3, 804d5cc <__sinit+0x14>
 804d5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d5c8:	f7ff bff0 	b.w	804d5ac <__sinit_lock_release>
 804d5cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804d5d0:	6523      	str	r3, [r4, #80]	; 0x50
 804d5d2:	4b13      	ldr	r3, [pc, #76]	; (804d620 <__sinit+0x68>)
 804d5d4:	4a13      	ldr	r2, [pc, #76]	; (804d624 <__sinit+0x6c>)
 804d5d6:	681b      	ldr	r3, [r3, #0]
 804d5d8:	62a2      	str	r2, [r4, #40]	; 0x28
 804d5da:	42a3      	cmp	r3, r4
 804d5dc:	bf04      	itt	eq
 804d5de:	2301      	moveq	r3, #1
 804d5e0:	61a3      	streq	r3, [r4, #24]
 804d5e2:	4620      	mov	r0, r4
 804d5e4:	f000 f820 	bl	804d628 <__sfp>
 804d5e8:	6060      	str	r0, [r4, #4]
 804d5ea:	4620      	mov	r0, r4
 804d5ec:	f000 f81c 	bl	804d628 <__sfp>
 804d5f0:	60a0      	str	r0, [r4, #8]
 804d5f2:	4620      	mov	r0, r4
 804d5f4:	f000 f818 	bl	804d628 <__sfp>
 804d5f8:	2200      	movs	r2, #0
 804d5fa:	60e0      	str	r0, [r4, #12]
 804d5fc:	2104      	movs	r1, #4
 804d5fe:	6860      	ldr	r0, [r4, #4]
 804d600:	f7ff ff82 	bl	804d508 <std>
 804d604:	68a0      	ldr	r0, [r4, #8]
 804d606:	2201      	movs	r2, #1
 804d608:	2109      	movs	r1, #9
 804d60a:	f7ff ff7d 	bl	804d508 <std>
 804d60e:	68e0      	ldr	r0, [r4, #12]
 804d610:	2202      	movs	r2, #2
 804d612:	2112      	movs	r1, #18
 804d614:	f7ff ff78 	bl	804d508 <std>
 804d618:	2301      	movs	r3, #1
 804d61a:	61a3      	str	r3, [r4, #24]
 804d61c:	e7d2      	b.n	804d5c4 <__sinit+0xc>
 804d61e:	bf00      	nop
 804d620:	0805088c 	.word	0x0805088c
 804d624:	0804d551 	.word	0x0804d551

0804d628 <__sfp>:
 804d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d62a:	4607      	mov	r7, r0
 804d62c:	f7ff ffac 	bl	804d588 <__sfp_lock_acquire>
 804d630:	4b1e      	ldr	r3, [pc, #120]	; (804d6ac <__sfp+0x84>)
 804d632:	681e      	ldr	r6, [r3, #0]
 804d634:	69b3      	ldr	r3, [r6, #24]
 804d636:	b913      	cbnz	r3, 804d63e <__sfp+0x16>
 804d638:	4630      	mov	r0, r6
 804d63a:	f7ff ffbd 	bl	804d5b8 <__sinit>
 804d63e:	3648      	adds	r6, #72	; 0x48
 804d640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804d644:	3b01      	subs	r3, #1
 804d646:	d503      	bpl.n	804d650 <__sfp+0x28>
 804d648:	6833      	ldr	r3, [r6, #0]
 804d64a:	b30b      	cbz	r3, 804d690 <__sfp+0x68>
 804d64c:	6836      	ldr	r6, [r6, #0]
 804d64e:	e7f7      	b.n	804d640 <__sfp+0x18>
 804d650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804d654:	b9d5      	cbnz	r5, 804d68c <__sfp+0x64>
 804d656:	4b16      	ldr	r3, [pc, #88]	; (804d6b0 <__sfp+0x88>)
 804d658:	60e3      	str	r3, [r4, #12]
 804d65a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804d65e:	6665      	str	r5, [r4, #100]	; 0x64
 804d660:	f000 f847 	bl	804d6f2 <__retarget_lock_init_recursive>
 804d664:	f7ff ff96 	bl	804d594 <__sfp_lock_release>
 804d668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804d66c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804d670:	6025      	str	r5, [r4, #0]
 804d672:	61a5      	str	r5, [r4, #24]
 804d674:	2208      	movs	r2, #8
 804d676:	4629      	mov	r1, r5
 804d678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804d67c:	f7ff fc1c 	bl	804ceb8 <memset>
 804d680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804d684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804d688:	4620      	mov	r0, r4
 804d68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d68c:	3468      	adds	r4, #104	; 0x68
 804d68e:	e7d9      	b.n	804d644 <__sfp+0x1c>
 804d690:	2104      	movs	r1, #4
 804d692:	4638      	mov	r0, r7
 804d694:	f7ff ff62 	bl	804d55c <__sfmoreglue>
 804d698:	4604      	mov	r4, r0
 804d69a:	6030      	str	r0, [r6, #0]
 804d69c:	2800      	cmp	r0, #0
 804d69e:	d1d5      	bne.n	804d64c <__sfp+0x24>
 804d6a0:	f7ff ff78 	bl	804d594 <__sfp_lock_release>
 804d6a4:	230c      	movs	r3, #12
 804d6a6:	603b      	str	r3, [r7, #0]
 804d6a8:	e7ee      	b.n	804d688 <__sfp+0x60>
 804d6aa:	bf00      	nop
 804d6ac:	0805088c 	.word	0x0805088c
 804d6b0:	ffff0001 	.word	0xffff0001

0804d6b4 <_fwalk_reent>:
 804d6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804d6b8:	4606      	mov	r6, r0
 804d6ba:	4688      	mov	r8, r1
 804d6bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804d6c0:	2700      	movs	r7, #0
 804d6c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804d6c6:	f1b9 0901 	subs.w	r9, r9, #1
 804d6ca:	d505      	bpl.n	804d6d8 <_fwalk_reent+0x24>
 804d6cc:	6824      	ldr	r4, [r4, #0]
 804d6ce:	2c00      	cmp	r4, #0
 804d6d0:	d1f7      	bne.n	804d6c2 <_fwalk_reent+0xe>
 804d6d2:	4638      	mov	r0, r7
 804d6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804d6d8:	89ab      	ldrh	r3, [r5, #12]
 804d6da:	2b01      	cmp	r3, #1
 804d6dc:	d907      	bls.n	804d6ee <_fwalk_reent+0x3a>
 804d6de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804d6e2:	3301      	adds	r3, #1
 804d6e4:	d003      	beq.n	804d6ee <_fwalk_reent+0x3a>
 804d6e6:	4629      	mov	r1, r5
 804d6e8:	4630      	mov	r0, r6
 804d6ea:	47c0      	blx	r8
 804d6ec:	4307      	orrs	r7, r0
 804d6ee:	3568      	adds	r5, #104	; 0x68
 804d6f0:	e7e9      	b.n	804d6c6 <_fwalk_reent+0x12>

0804d6f2 <__retarget_lock_init_recursive>:
 804d6f2:	4770      	bx	lr

0804d6f4 <__retarget_lock_acquire_recursive>:
 804d6f4:	4770      	bx	lr

0804d6f6 <__retarget_lock_release_recursive>:
 804d6f6:	4770      	bx	lr

0804d6f8 <__swhatbuf_r>:
 804d6f8:	b570      	push	{r4, r5, r6, lr}
 804d6fa:	460e      	mov	r6, r1
 804d6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d700:	2900      	cmp	r1, #0
 804d702:	b096      	sub	sp, #88	; 0x58
 804d704:	4614      	mov	r4, r2
 804d706:	461d      	mov	r5, r3
 804d708:	da08      	bge.n	804d71c <__swhatbuf_r+0x24>
 804d70a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804d70e:	2200      	movs	r2, #0
 804d710:	602a      	str	r2, [r5, #0]
 804d712:	061a      	lsls	r2, r3, #24
 804d714:	d410      	bmi.n	804d738 <__swhatbuf_r+0x40>
 804d716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d71a:	e00e      	b.n	804d73a <__swhatbuf_r+0x42>
 804d71c:	466a      	mov	r2, sp
 804d71e:	f000 fd0d 	bl	804e13c <_fstat_r>
 804d722:	2800      	cmp	r0, #0
 804d724:	dbf1      	blt.n	804d70a <__swhatbuf_r+0x12>
 804d726:	9a01      	ldr	r2, [sp, #4]
 804d728:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804d72c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804d730:	425a      	negs	r2, r3
 804d732:	415a      	adcs	r2, r3
 804d734:	602a      	str	r2, [r5, #0]
 804d736:	e7ee      	b.n	804d716 <__swhatbuf_r+0x1e>
 804d738:	2340      	movs	r3, #64	; 0x40
 804d73a:	2000      	movs	r0, #0
 804d73c:	6023      	str	r3, [r4, #0]
 804d73e:	b016      	add	sp, #88	; 0x58
 804d740:	bd70      	pop	{r4, r5, r6, pc}
	...

0804d744 <__smakebuf_r>:
 804d744:	898b      	ldrh	r3, [r1, #12]
 804d746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d748:	079d      	lsls	r5, r3, #30
 804d74a:	4606      	mov	r6, r0
 804d74c:	460c      	mov	r4, r1
 804d74e:	d507      	bpl.n	804d760 <__smakebuf_r+0x1c>
 804d750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d754:	6023      	str	r3, [r4, #0]
 804d756:	6123      	str	r3, [r4, #16]
 804d758:	2301      	movs	r3, #1
 804d75a:	6163      	str	r3, [r4, #20]
 804d75c:	b002      	add	sp, #8
 804d75e:	bd70      	pop	{r4, r5, r6, pc}
 804d760:	ab01      	add	r3, sp, #4
 804d762:	466a      	mov	r2, sp
 804d764:	f7ff ffc8 	bl	804d6f8 <__swhatbuf_r>
 804d768:	9900      	ldr	r1, [sp, #0]
 804d76a:	4605      	mov	r5, r0
 804d76c:	4630      	mov	r0, r6
 804d76e:	f7ff fc17 	bl	804cfa0 <_malloc_r>
 804d772:	b948      	cbnz	r0, 804d788 <__smakebuf_r+0x44>
 804d774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d778:	059a      	lsls	r2, r3, #22
 804d77a:	d4ef      	bmi.n	804d75c <__smakebuf_r+0x18>
 804d77c:	f023 0303 	bic.w	r3, r3, #3
 804d780:	f043 0302 	orr.w	r3, r3, #2
 804d784:	81a3      	strh	r3, [r4, #12]
 804d786:	e7e3      	b.n	804d750 <__smakebuf_r+0xc>
 804d788:	4b0d      	ldr	r3, [pc, #52]	; (804d7c0 <__smakebuf_r+0x7c>)
 804d78a:	62b3      	str	r3, [r6, #40]	; 0x28
 804d78c:	89a3      	ldrh	r3, [r4, #12]
 804d78e:	6020      	str	r0, [r4, #0]
 804d790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d794:	81a3      	strh	r3, [r4, #12]
 804d796:	9b00      	ldr	r3, [sp, #0]
 804d798:	6163      	str	r3, [r4, #20]
 804d79a:	9b01      	ldr	r3, [sp, #4]
 804d79c:	6120      	str	r0, [r4, #16]
 804d79e:	b15b      	cbz	r3, 804d7b8 <__smakebuf_r+0x74>
 804d7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d7a4:	4630      	mov	r0, r6
 804d7a6:	f000 fcdb 	bl	804e160 <_isatty_r>
 804d7aa:	b128      	cbz	r0, 804d7b8 <__smakebuf_r+0x74>
 804d7ac:	89a3      	ldrh	r3, [r4, #12]
 804d7ae:	f023 0303 	bic.w	r3, r3, #3
 804d7b2:	f043 0301 	orr.w	r3, r3, #1
 804d7b6:	81a3      	strh	r3, [r4, #12]
 804d7b8:	89a0      	ldrh	r0, [r4, #12]
 804d7ba:	4305      	orrs	r5, r0
 804d7bc:	81a5      	strh	r5, [r4, #12]
 804d7be:	e7cd      	b.n	804d75c <__smakebuf_r+0x18>
 804d7c0:	0804d551 	.word	0x0804d551

0804d7c4 <__malloc_lock>:
 804d7c4:	4801      	ldr	r0, [pc, #4]	; (804d7cc <__malloc_lock+0x8>)
 804d7c6:	f7ff bf95 	b.w	804d6f4 <__retarget_lock_acquire_recursive>
 804d7ca:	bf00      	nop
 804d7cc:	200011ac 	.word	0x200011ac

0804d7d0 <__malloc_unlock>:
 804d7d0:	4801      	ldr	r0, [pc, #4]	; (804d7d8 <__malloc_unlock+0x8>)
 804d7d2:	f7ff bf90 	b.w	804d6f6 <__retarget_lock_release_recursive>
 804d7d6:	bf00      	nop
 804d7d8:	200011ac 	.word	0x200011ac

0804d7dc <__ssputs_r>:
 804d7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d7e0:	688e      	ldr	r6, [r1, #8]
 804d7e2:	429e      	cmp	r6, r3
 804d7e4:	4682      	mov	sl, r0
 804d7e6:	460c      	mov	r4, r1
 804d7e8:	4690      	mov	r8, r2
 804d7ea:	461f      	mov	r7, r3
 804d7ec:	d838      	bhi.n	804d860 <__ssputs_r+0x84>
 804d7ee:	898a      	ldrh	r2, [r1, #12]
 804d7f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804d7f4:	d032      	beq.n	804d85c <__ssputs_r+0x80>
 804d7f6:	6825      	ldr	r5, [r4, #0]
 804d7f8:	6909      	ldr	r1, [r1, #16]
 804d7fa:	eba5 0901 	sub.w	r9, r5, r1
 804d7fe:	6965      	ldr	r5, [r4, #20]
 804d800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804d804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804d808:	3301      	adds	r3, #1
 804d80a:	444b      	add	r3, r9
 804d80c:	106d      	asrs	r5, r5, #1
 804d80e:	429d      	cmp	r5, r3
 804d810:	bf38      	it	cc
 804d812:	461d      	movcc	r5, r3
 804d814:	0553      	lsls	r3, r2, #21
 804d816:	d531      	bpl.n	804d87c <__ssputs_r+0xa0>
 804d818:	4629      	mov	r1, r5
 804d81a:	f7ff fbc1 	bl	804cfa0 <_malloc_r>
 804d81e:	4606      	mov	r6, r0
 804d820:	b950      	cbnz	r0, 804d838 <__ssputs_r+0x5c>
 804d822:	230c      	movs	r3, #12
 804d824:	f8ca 3000 	str.w	r3, [sl]
 804d828:	89a3      	ldrh	r3, [r4, #12]
 804d82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d82e:	81a3      	strh	r3, [r4, #12]
 804d830:	f04f 30ff 	mov.w	r0, #4294967295
 804d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d838:	6921      	ldr	r1, [r4, #16]
 804d83a:	464a      	mov	r2, r9
 804d83c:	f000 fcb2 	bl	804e1a4 <memcpy>
 804d840:	89a3      	ldrh	r3, [r4, #12]
 804d842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804d846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d84a:	81a3      	strh	r3, [r4, #12]
 804d84c:	6126      	str	r6, [r4, #16]
 804d84e:	6165      	str	r5, [r4, #20]
 804d850:	444e      	add	r6, r9
 804d852:	eba5 0509 	sub.w	r5, r5, r9
 804d856:	6026      	str	r6, [r4, #0]
 804d858:	60a5      	str	r5, [r4, #8]
 804d85a:	463e      	mov	r6, r7
 804d85c:	42be      	cmp	r6, r7
 804d85e:	d900      	bls.n	804d862 <__ssputs_r+0x86>
 804d860:	463e      	mov	r6, r7
 804d862:	6820      	ldr	r0, [r4, #0]
 804d864:	4632      	mov	r2, r6
 804d866:	4641      	mov	r1, r8
 804d868:	f000 fcaa 	bl	804e1c0 <memmove>
 804d86c:	68a3      	ldr	r3, [r4, #8]
 804d86e:	1b9b      	subs	r3, r3, r6
 804d870:	60a3      	str	r3, [r4, #8]
 804d872:	6823      	ldr	r3, [r4, #0]
 804d874:	4433      	add	r3, r6
 804d876:	6023      	str	r3, [r4, #0]
 804d878:	2000      	movs	r0, #0
 804d87a:	e7db      	b.n	804d834 <__ssputs_r+0x58>
 804d87c:	462a      	mov	r2, r5
 804d87e:	f000 fcb9 	bl	804e1f4 <_realloc_r>
 804d882:	4606      	mov	r6, r0
 804d884:	2800      	cmp	r0, #0
 804d886:	d1e1      	bne.n	804d84c <__ssputs_r+0x70>
 804d888:	6921      	ldr	r1, [r4, #16]
 804d88a:	4650      	mov	r0, sl
 804d88c:	f7ff fb1c 	bl	804cec8 <_free_r>
 804d890:	e7c7      	b.n	804d822 <__ssputs_r+0x46>
	...

0804d894 <_svfiprintf_r>:
 804d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d898:	4698      	mov	r8, r3
 804d89a:	898b      	ldrh	r3, [r1, #12]
 804d89c:	061b      	lsls	r3, r3, #24
 804d89e:	b09d      	sub	sp, #116	; 0x74
 804d8a0:	4607      	mov	r7, r0
 804d8a2:	460d      	mov	r5, r1
 804d8a4:	4614      	mov	r4, r2
 804d8a6:	d50e      	bpl.n	804d8c6 <_svfiprintf_r+0x32>
 804d8a8:	690b      	ldr	r3, [r1, #16]
 804d8aa:	b963      	cbnz	r3, 804d8c6 <_svfiprintf_r+0x32>
 804d8ac:	2140      	movs	r1, #64	; 0x40
 804d8ae:	f7ff fb77 	bl	804cfa0 <_malloc_r>
 804d8b2:	6028      	str	r0, [r5, #0]
 804d8b4:	6128      	str	r0, [r5, #16]
 804d8b6:	b920      	cbnz	r0, 804d8c2 <_svfiprintf_r+0x2e>
 804d8b8:	230c      	movs	r3, #12
 804d8ba:	603b      	str	r3, [r7, #0]
 804d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 804d8c0:	e0d1      	b.n	804da66 <_svfiprintf_r+0x1d2>
 804d8c2:	2340      	movs	r3, #64	; 0x40
 804d8c4:	616b      	str	r3, [r5, #20]
 804d8c6:	2300      	movs	r3, #0
 804d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 804d8ca:	2320      	movs	r3, #32
 804d8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 804d8d4:	2330      	movs	r3, #48	; 0x30
 804d8d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804da80 <_svfiprintf_r+0x1ec>
 804d8da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d8de:	f04f 0901 	mov.w	r9, #1
 804d8e2:	4623      	mov	r3, r4
 804d8e4:	469a      	mov	sl, r3
 804d8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d8ea:	b10a      	cbz	r2, 804d8f0 <_svfiprintf_r+0x5c>
 804d8ec:	2a25      	cmp	r2, #37	; 0x25
 804d8ee:	d1f9      	bne.n	804d8e4 <_svfiprintf_r+0x50>
 804d8f0:	ebba 0b04 	subs.w	fp, sl, r4
 804d8f4:	d00b      	beq.n	804d90e <_svfiprintf_r+0x7a>
 804d8f6:	465b      	mov	r3, fp
 804d8f8:	4622      	mov	r2, r4
 804d8fa:	4629      	mov	r1, r5
 804d8fc:	4638      	mov	r0, r7
 804d8fe:	f7ff ff6d 	bl	804d7dc <__ssputs_r>
 804d902:	3001      	adds	r0, #1
 804d904:	f000 80aa 	beq.w	804da5c <_svfiprintf_r+0x1c8>
 804d908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d90a:	445a      	add	r2, fp
 804d90c:	9209      	str	r2, [sp, #36]	; 0x24
 804d90e:	f89a 3000 	ldrb.w	r3, [sl]
 804d912:	2b00      	cmp	r3, #0
 804d914:	f000 80a2 	beq.w	804da5c <_svfiprintf_r+0x1c8>
 804d918:	2300      	movs	r3, #0
 804d91a:	f04f 32ff 	mov.w	r2, #4294967295
 804d91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d922:	f10a 0a01 	add.w	sl, sl, #1
 804d926:	9304      	str	r3, [sp, #16]
 804d928:	9307      	str	r3, [sp, #28]
 804d92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d92e:	931a      	str	r3, [sp, #104]	; 0x68
 804d930:	4654      	mov	r4, sl
 804d932:	2205      	movs	r2, #5
 804d934:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d938:	4851      	ldr	r0, [pc, #324]	; (804da80 <_svfiprintf_r+0x1ec>)
 804d93a:	f7f2 fc59 	bl	80401f0 <memchr>
 804d93e:	9a04      	ldr	r2, [sp, #16]
 804d940:	b9d8      	cbnz	r0, 804d97a <_svfiprintf_r+0xe6>
 804d942:	06d0      	lsls	r0, r2, #27
 804d944:	bf44      	itt	mi
 804d946:	2320      	movmi	r3, #32
 804d948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d94c:	0711      	lsls	r1, r2, #28
 804d94e:	bf44      	itt	mi
 804d950:	232b      	movmi	r3, #43	; 0x2b
 804d952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d956:	f89a 3000 	ldrb.w	r3, [sl]
 804d95a:	2b2a      	cmp	r3, #42	; 0x2a
 804d95c:	d015      	beq.n	804d98a <_svfiprintf_r+0xf6>
 804d95e:	9a07      	ldr	r2, [sp, #28]
 804d960:	4654      	mov	r4, sl
 804d962:	2000      	movs	r0, #0
 804d964:	f04f 0c0a 	mov.w	ip, #10
 804d968:	4621      	mov	r1, r4
 804d96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d96e:	3b30      	subs	r3, #48	; 0x30
 804d970:	2b09      	cmp	r3, #9
 804d972:	d94e      	bls.n	804da12 <_svfiprintf_r+0x17e>
 804d974:	b1b0      	cbz	r0, 804d9a4 <_svfiprintf_r+0x110>
 804d976:	9207      	str	r2, [sp, #28]
 804d978:	e014      	b.n	804d9a4 <_svfiprintf_r+0x110>
 804d97a:	eba0 0308 	sub.w	r3, r0, r8
 804d97e:	fa09 f303 	lsl.w	r3, r9, r3
 804d982:	4313      	orrs	r3, r2
 804d984:	9304      	str	r3, [sp, #16]
 804d986:	46a2      	mov	sl, r4
 804d988:	e7d2      	b.n	804d930 <_svfiprintf_r+0x9c>
 804d98a:	9b03      	ldr	r3, [sp, #12]
 804d98c:	1d19      	adds	r1, r3, #4
 804d98e:	681b      	ldr	r3, [r3, #0]
 804d990:	9103      	str	r1, [sp, #12]
 804d992:	2b00      	cmp	r3, #0
 804d994:	bfbb      	ittet	lt
 804d996:	425b      	neglt	r3, r3
 804d998:	f042 0202 	orrlt.w	r2, r2, #2
 804d99c:	9307      	strge	r3, [sp, #28]
 804d99e:	9307      	strlt	r3, [sp, #28]
 804d9a0:	bfb8      	it	lt
 804d9a2:	9204      	strlt	r2, [sp, #16]
 804d9a4:	7823      	ldrb	r3, [r4, #0]
 804d9a6:	2b2e      	cmp	r3, #46	; 0x2e
 804d9a8:	d10c      	bne.n	804d9c4 <_svfiprintf_r+0x130>
 804d9aa:	7863      	ldrb	r3, [r4, #1]
 804d9ac:	2b2a      	cmp	r3, #42	; 0x2a
 804d9ae:	d135      	bne.n	804da1c <_svfiprintf_r+0x188>
 804d9b0:	9b03      	ldr	r3, [sp, #12]
 804d9b2:	1d1a      	adds	r2, r3, #4
 804d9b4:	681b      	ldr	r3, [r3, #0]
 804d9b6:	9203      	str	r2, [sp, #12]
 804d9b8:	2b00      	cmp	r3, #0
 804d9ba:	bfb8      	it	lt
 804d9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 804d9c0:	3402      	adds	r4, #2
 804d9c2:	9305      	str	r3, [sp, #20]
 804d9c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804da90 <_svfiprintf_r+0x1fc>
 804d9c8:	7821      	ldrb	r1, [r4, #0]
 804d9ca:	2203      	movs	r2, #3
 804d9cc:	4650      	mov	r0, sl
 804d9ce:	f7f2 fc0f 	bl	80401f0 <memchr>
 804d9d2:	b140      	cbz	r0, 804d9e6 <_svfiprintf_r+0x152>
 804d9d4:	2340      	movs	r3, #64	; 0x40
 804d9d6:	eba0 000a 	sub.w	r0, r0, sl
 804d9da:	fa03 f000 	lsl.w	r0, r3, r0
 804d9de:	9b04      	ldr	r3, [sp, #16]
 804d9e0:	4303      	orrs	r3, r0
 804d9e2:	3401      	adds	r4, #1
 804d9e4:	9304      	str	r3, [sp, #16]
 804d9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d9ea:	4826      	ldr	r0, [pc, #152]	; (804da84 <_svfiprintf_r+0x1f0>)
 804d9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d9f0:	2206      	movs	r2, #6
 804d9f2:	f7f2 fbfd 	bl	80401f0 <memchr>
 804d9f6:	2800      	cmp	r0, #0
 804d9f8:	d038      	beq.n	804da6c <_svfiprintf_r+0x1d8>
 804d9fa:	4b23      	ldr	r3, [pc, #140]	; (804da88 <_svfiprintf_r+0x1f4>)
 804d9fc:	bb1b      	cbnz	r3, 804da46 <_svfiprintf_r+0x1b2>
 804d9fe:	9b03      	ldr	r3, [sp, #12]
 804da00:	3307      	adds	r3, #7
 804da02:	f023 0307 	bic.w	r3, r3, #7
 804da06:	3308      	adds	r3, #8
 804da08:	9303      	str	r3, [sp, #12]
 804da0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804da0c:	4433      	add	r3, r6
 804da0e:	9309      	str	r3, [sp, #36]	; 0x24
 804da10:	e767      	b.n	804d8e2 <_svfiprintf_r+0x4e>
 804da12:	fb0c 3202 	mla	r2, ip, r2, r3
 804da16:	460c      	mov	r4, r1
 804da18:	2001      	movs	r0, #1
 804da1a:	e7a5      	b.n	804d968 <_svfiprintf_r+0xd4>
 804da1c:	2300      	movs	r3, #0
 804da1e:	3401      	adds	r4, #1
 804da20:	9305      	str	r3, [sp, #20]
 804da22:	4619      	mov	r1, r3
 804da24:	f04f 0c0a 	mov.w	ip, #10
 804da28:	4620      	mov	r0, r4
 804da2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 804da2e:	3a30      	subs	r2, #48	; 0x30
 804da30:	2a09      	cmp	r2, #9
 804da32:	d903      	bls.n	804da3c <_svfiprintf_r+0x1a8>
 804da34:	2b00      	cmp	r3, #0
 804da36:	d0c5      	beq.n	804d9c4 <_svfiprintf_r+0x130>
 804da38:	9105      	str	r1, [sp, #20]
 804da3a:	e7c3      	b.n	804d9c4 <_svfiprintf_r+0x130>
 804da3c:	fb0c 2101 	mla	r1, ip, r1, r2
 804da40:	4604      	mov	r4, r0
 804da42:	2301      	movs	r3, #1
 804da44:	e7f0      	b.n	804da28 <_svfiprintf_r+0x194>
 804da46:	ab03      	add	r3, sp, #12
 804da48:	9300      	str	r3, [sp, #0]
 804da4a:	462a      	mov	r2, r5
 804da4c:	4b0f      	ldr	r3, [pc, #60]	; (804da8c <_svfiprintf_r+0x1f8>)
 804da4e:	a904      	add	r1, sp, #16
 804da50:	4638      	mov	r0, r7
 804da52:	f3af 8000 	nop.w
 804da56:	1c42      	adds	r2, r0, #1
 804da58:	4606      	mov	r6, r0
 804da5a:	d1d6      	bne.n	804da0a <_svfiprintf_r+0x176>
 804da5c:	89ab      	ldrh	r3, [r5, #12]
 804da5e:	065b      	lsls	r3, r3, #25
 804da60:	f53f af2c 	bmi.w	804d8bc <_svfiprintf_r+0x28>
 804da64:	9809      	ldr	r0, [sp, #36]	; 0x24
 804da66:	b01d      	add	sp, #116	; 0x74
 804da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804da6c:	ab03      	add	r3, sp, #12
 804da6e:	9300      	str	r3, [sp, #0]
 804da70:	462a      	mov	r2, r5
 804da72:	4b06      	ldr	r3, [pc, #24]	; (804da8c <_svfiprintf_r+0x1f8>)
 804da74:	a904      	add	r1, sp, #16
 804da76:	4638      	mov	r0, r7
 804da78:	f000 f9d4 	bl	804de24 <_printf_i>
 804da7c:	e7eb      	b.n	804da56 <_svfiprintf_r+0x1c2>
 804da7e:	bf00      	nop
 804da80:	080508f0 	.word	0x080508f0
 804da84:	080508fa 	.word	0x080508fa
 804da88:	00000000 	.word	0x00000000
 804da8c:	0804d7dd 	.word	0x0804d7dd
 804da90:	080508f6 	.word	0x080508f6

0804da94 <__sfputc_r>:
 804da94:	6893      	ldr	r3, [r2, #8]
 804da96:	3b01      	subs	r3, #1
 804da98:	2b00      	cmp	r3, #0
 804da9a:	b410      	push	{r4}
 804da9c:	6093      	str	r3, [r2, #8]
 804da9e:	da08      	bge.n	804dab2 <__sfputc_r+0x1e>
 804daa0:	6994      	ldr	r4, [r2, #24]
 804daa2:	42a3      	cmp	r3, r4
 804daa4:	db01      	blt.n	804daaa <__sfputc_r+0x16>
 804daa6:	290a      	cmp	r1, #10
 804daa8:	d103      	bne.n	804dab2 <__sfputc_r+0x1e>
 804daaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 804daae:	f7ff bba9 	b.w	804d204 <__swbuf_r>
 804dab2:	6813      	ldr	r3, [r2, #0]
 804dab4:	1c58      	adds	r0, r3, #1
 804dab6:	6010      	str	r0, [r2, #0]
 804dab8:	7019      	strb	r1, [r3, #0]
 804daba:	4608      	mov	r0, r1
 804dabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 804dac0:	4770      	bx	lr

0804dac2 <__sfputs_r>:
 804dac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804dac4:	4606      	mov	r6, r0
 804dac6:	460f      	mov	r7, r1
 804dac8:	4614      	mov	r4, r2
 804daca:	18d5      	adds	r5, r2, r3
 804dacc:	42ac      	cmp	r4, r5
 804dace:	d101      	bne.n	804dad4 <__sfputs_r+0x12>
 804dad0:	2000      	movs	r0, #0
 804dad2:	e007      	b.n	804dae4 <__sfputs_r+0x22>
 804dad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804dad8:	463a      	mov	r2, r7
 804dada:	4630      	mov	r0, r6
 804dadc:	f7ff ffda 	bl	804da94 <__sfputc_r>
 804dae0:	1c43      	adds	r3, r0, #1
 804dae2:	d1f3      	bne.n	804dacc <__sfputs_r+0xa>
 804dae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804dae8 <_vfiprintf_r>:
 804dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804daec:	460d      	mov	r5, r1
 804daee:	b09d      	sub	sp, #116	; 0x74
 804daf0:	4614      	mov	r4, r2
 804daf2:	4698      	mov	r8, r3
 804daf4:	4606      	mov	r6, r0
 804daf6:	b118      	cbz	r0, 804db00 <_vfiprintf_r+0x18>
 804daf8:	6983      	ldr	r3, [r0, #24]
 804dafa:	b90b      	cbnz	r3, 804db00 <_vfiprintf_r+0x18>
 804dafc:	f7ff fd5c 	bl	804d5b8 <__sinit>
 804db00:	4b89      	ldr	r3, [pc, #548]	; (804dd28 <_vfiprintf_r+0x240>)
 804db02:	429d      	cmp	r5, r3
 804db04:	d11b      	bne.n	804db3e <_vfiprintf_r+0x56>
 804db06:	6875      	ldr	r5, [r6, #4]
 804db08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804db0a:	07d9      	lsls	r1, r3, #31
 804db0c:	d405      	bmi.n	804db1a <_vfiprintf_r+0x32>
 804db0e:	89ab      	ldrh	r3, [r5, #12]
 804db10:	059a      	lsls	r2, r3, #22
 804db12:	d402      	bmi.n	804db1a <_vfiprintf_r+0x32>
 804db14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804db16:	f7ff fded 	bl	804d6f4 <__retarget_lock_acquire_recursive>
 804db1a:	89ab      	ldrh	r3, [r5, #12]
 804db1c:	071b      	lsls	r3, r3, #28
 804db1e:	d501      	bpl.n	804db24 <_vfiprintf_r+0x3c>
 804db20:	692b      	ldr	r3, [r5, #16]
 804db22:	b9eb      	cbnz	r3, 804db60 <_vfiprintf_r+0x78>
 804db24:	4629      	mov	r1, r5
 804db26:	4630      	mov	r0, r6
 804db28:	f7ff fbbe 	bl	804d2a8 <__swsetup_r>
 804db2c:	b1c0      	cbz	r0, 804db60 <_vfiprintf_r+0x78>
 804db2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804db30:	07dc      	lsls	r4, r3, #31
 804db32:	d50e      	bpl.n	804db52 <_vfiprintf_r+0x6a>
 804db34:	f04f 30ff 	mov.w	r0, #4294967295
 804db38:	b01d      	add	sp, #116	; 0x74
 804db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804db3e:	4b7b      	ldr	r3, [pc, #492]	; (804dd2c <_vfiprintf_r+0x244>)
 804db40:	429d      	cmp	r5, r3
 804db42:	d101      	bne.n	804db48 <_vfiprintf_r+0x60>
 804db44:	68b5      	ldr	r5, [r6, #8]
 804db46:	e7df      	b.n	804db08 <_vfiprintf_r+0x20>
 804db48:	4b79      	ldr	r3, [pc, #484]	; (804dd30 <_vfiprintf_r+0x248>)
 804db4a:	429d      	cmp	r5, r3
 804db4c:	bf08      	it	eq
 804db4e:	68f5      	ldreq	r5, [r6, #12]
 804db50:	e7da      	b.n	804db08 <_vfiprintf_r+0x20>
 804db52:	89ab      	ldrh	r3, [r5, #12]
 804db54:	0598      	lsls	r0, r3, #22
 804db56:	d4ed      	bmi.n	804db34 <_vfiprintf_r+0x4c>
 804db58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804db5a:	f7ff fdcc 	bl	804d6f6 <__retarget_lock_release_recursive>
 804db5e:	e7e9      	b.n	804db34 <_vfiprintf_r+0x4c>
 804db60:	2300      	movs	r3, #0
 804db62:	9309      	str	r3, [sp, #36]	; 0x24
 804db64:	2320      	movs	r3, #32
 804db66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804db6a:	f8cd 800c 	str.w	r8, [sp, #12]
 804db6e:	2330      	movs	r3, #48	; 0x30
 804db70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804dd34 <_vfiprintf_r+0x24c>
 804db74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804db78:	f04f 0901 	mov.w	r9, #1
 804db7c:	4623      	mov	r3, r4
 804db7e:	469a      	mov	sl, r3
 804db80:	f813 2b01 	ldrb.w	r2, [r3], #1
 804db84:	b10a      	cbz	r2, 804db8a <_vfiprintf_r+0xa2>
 804db86:	2a25      	cmp	r2, #37	; 0x25
 804db88:	d1f9      	bne.n	804db7e <_vfiprintf_r+0x96>
 804db8a:	ebba 0b04 	subs.w	fp, sl, r4
 804db8e:	d00b      	beq.n	804dba8 <_vfiprintf_r+0xc0>
 804db90:	465b      	mov	r3, fp
 804db92:	4622      	mov	r2, r4
 804db94:	4629      	mov	r1, r5
 804db96:	4630      	mov	r0, r6
 804db98:	f7ff ff93 	bl	804dac2 <__sfputs_r>
 804db9c:	3001      	adds	r0, #1
 804db9e:	f000 80aa 	beq.w	804dcf6 <_vfiprintf_r+0x20e>
 804dba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804dba4:	445a      	add	r2, fp
 804dba6:	9209      	str	r2, [sp, #36]	; 0x24
 804dba8:	f89a 3000 	ldrb.w	r3, [sl]
 804dbac:	2b00      	cmp	r3, #0
 804dbae:	f000 80a2 	beq.w	804dcf6 <_vfiprintf_r+0x20e>
 804dbb2:	2300      	movs	r3, #0
 804dbb4:	f04f 32ff 	mov.w	r2, #4294967295
 804dbb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804dbbc:	f10a 0a01 	add.w	sl, sl, #1
 804dbc0:	9304      	str	r3, [sp, #16]
 804dbc2:	9307      	str	r3, [sp, #28]
 804dbc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804dbc8:	931a      	str	r3, [sp, #104]	; 0x68
 804dbca:	4654      	mov	r4, sl
 804dbcc:	2205      	movs	r2, #5
 804dbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 804dbd2:	4858      	ldr	r0, [pc, #352]	; (804dd34 <_vfiprintf_r+0x24c>)
 804dbd4:	f7f2 fb0c 	bl	80401f0 <memchr>
 804dbd8:	9a04      	ldr	r2, [sp, #16]
 804dbda:	b9d8      	cbnz	r0, 804dc14 <_vfiprintf_r+0x12c>
 804dbdc:	06d1      	lsls	r1, r2, #27
 804dbde:	bf44      	itt	mi
 804dbe0:	2320      	movmi	r3, #32
 804dbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804dbe6:	0713      	lsls	r3, r2, #28
 804dbe8:	bf44      	itt	mi
 804dbea:	232b      	movmi	r3, #43	; 0x2b
 804dbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804dbf0:	f89a 3000 	ldrb.w	r3, [sl]
 804dbf4:	2b2a      	cmp	r3, #42	; 0x2a
 804dbf6:	d015      	beq.n	804dc24 <_vfiprintf_r+0x13c>
 804dbf8:	9a07      	ldr	r2, [sp, #28]
 804dbfa:	4654      	mov	r4, sl
 804dbfc:	2000      	movs	r0, #0
 804dbfe:	f04f 0c0a 	mov.w	ip, #10
 804dc02:	4621      	mov	r1, r4
 804dc04:	f811 3b01 	ldrb.w	r3, [r1], #1
 804dc08:	3b30      	subs	r3, #48	; 0x30
 804dc0a:	2b09      	cmp	r3, #9
 804dc0c:	d94e      	bls.n	804dcac <_vfiprintf_r+0x1c4>
 804dc0e:	b1b0      	cbz	r0, 804dc3e <_vfiprintf_r+0x156>
 804dc10:	9207      	str	r2, [sp, #28]
 804dc12:	e014      	b.n	804dc3e <_vfiprintf_r+0x156>
 804dc14:	eba0 0308 	sub.w	r3, r0, r8
 804dc18:	fa09 f303 	lsl.w	r3, r9, r3
 804dc1c:	4313      	orrs	r3, r2
 804dc1e:	9304      	str	r3, [sp, #16]
 804dc20:	46a2      	mov	sl, r4
 804dc22:	e7d2      	b.n	804dbca <_vfiprintf_r+0xe2>
 804dc24:	9b03      	ldr	r3, [sp, #12]
 804dc26:	1d19      	adds	r1, r3, #4
 804dc28:	681b      	ldr	r3, [r3, #0]
 804dc2a:	9103      	str	r1, [sp, #12]
 804dc2c:	2b00      	cmp	r3, #0
 804dc2e:	bfbb      	ittet	lt
 804dc30:	425b      	neglt	r3, r3
 804dc32:	f042 0202 	orrlt.w	r2, r2, #2
 804dc36:	9307      	strge	r3, [sp, #28]
 804dc38:	9307      	strlt	r3, [sp, #28]
 804dc3a:	bfb8      	it	lt
 804dc3c:	9204      	strlt	r2, [sp, #16]
 804dc3e:	7823      	ldrb	r3, [r4, #0]
 804dc40:	2b2e      	cmp	r3, #46	; 0x2e
 804dc42:	d10c      	bne.n	804dc5e <_vfiprintf_r+0x176>
 804dc44:	7863      	ldrb	r3, [r4, #1]
 804dc46:	2b2a      	cmp	r3, #42	; 0x2a
 804dc48:	d135      	bne.n	804dcb6 <_vfiprintf_r+0x1ce>
 804dc4a:	9b03      	ldr	r3, [sp, #12]
 804dc4c:	1d1a      	adds	r2, r3, #4
 804dc4e:	681b      	ldr	r3, [r3, #0]
 804dc50:	9203      	str	r2, [sp, #12]
 804dc52:	2b00      	cmp	r3, #0
 804dc54:	bfb8      	it	lt
 804dc56:	f04f 33ff 	movlt.w	r3, #4294967295
 804dc5a:	3402      	adds	r4, #2
 804dc5c:	9305      	str	r3, [sp, #20]
 804dc5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804dd44 <_vfiprintf_r+0x25c>
 804dc62:	7821      	ldrb	r1, [r4, #0]
 804dc64:	2203      	movs	r2, #3
 804dc66:	4650      	mov	r0, sl
 804dc68:	f7f2 fac2 	bl	80401f0 <memchr>
 804dc6c:	b140      	cbz	r0, 804dc80 <_vfiprintf_r+0x198>
 804dc6e:	2340      	movs	r3, #64	; 0x40
 804dc70:	eba0 000a 	sub.w	r0, r0, sl
 804dc74:	fa03 f000 	lsl.w	r0, r3, r0
 804dc78:	9b04      	ldr	r3, [sp, #16]
 804dc7a:	4303      	orrs	r3, r0
 804dc7c:	3401      	adds	r4, #1
 804dc7e:	9304      	str	r3, [sp, #16]
 804dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 804dc84:	482c      	ldr	r0, [pc, #176]	; (804dd38 <_vfiprintf_r+0x250>)
 804dc86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804dc8a:	2206      	movs	r2, #6
 804dc8c:	f7f2 fab0 	bl	80401f0 <memchr>
 804dc90:	2800      	cmp	r0, #0
 804dc92:	d03f      	beq.n	804dd14 <_vfiprintf_r+0x22c>
 804dc94:	4b29      	ldr	r3, [pc, #164]	; (804dd3c <_vfiprintf_r+0x254>)
 804dc96:	bb1b      	cbnz	r3, 804dce0 <_vfiprintf_r+0x1f8>
 804dc98:	9b03      	ldr	r3, [sp, #12]
 804dc9a:	3307      	adds	r3, #7
 804dc9c:	f023 0307 	bic.w	r3, r3, #7
 804dca0:	3308      	adds	r3, #8
 804dca2:	9303      	str	r3, [sp, #12]
 804dca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804dca6:	443b      	add	r3, r7
 804dca8:	9309      	str	r3, [sp, #36]	; 0x24
 804dcaa:	e767      	b.n	804db7c <_vfiprintf_r+0x94>
 804dcac:	fb0c 3202 	mla	r2, ip, r2, r3
 804dcb0:	460c      	mov	r4, r1
 804dcb2:	2001      	movs	r0, #1
 804dcb4:	e7a5      	b.n	804dc02 <_vfiprintf_r+0x11a>
 804dcb6:	2300      	movs	r3, #0
 804dcb8:	3401      	adds	r4, #1
 804dcba:	9305      	str	r3, [sp, #20]
 804dcbc:	4619      	mov	r1, r3
 804dcbe:	f04f 0c0a 	mov.w	ip, #10
 804dcc2:	4620      	mov	r0, r4
 804dcc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 804dcc8:	3a30      	subs	r2, #48	; 0x30
 804dcca:	2a09      	cmp	r2, #9
 804dccc:	d903      	bls.n	804dcd6 <_vfiprintf_r+0x1ee>
 804dcce:	2b00      	cmp	r3, #0
 804dcd0:	d0c5      	beq.n	804dc5e <_vfiprintf_r+0x176>
 804dcd2:	9105      	str	r1, [sp, #20]
 804dcd4:	e7c3      	b.n	804dc5e <_vfiprintf_r+0x176>
 804dcd6:	fb0c 2101 	mla	r1, ip, r1, r2
 804dcda:	4604      	mov	r4, r0
 804dcdc:	2301      	movs	r3, #1
 804dcde:	e7f0      	b.n	804dcc2 <_vfiprintf_r+0x1da>
 804dce0:	ab03      	add	r3, sp, #12
 804dce2:	9300      	str	r3, [sp, #0]
 804dce4:	462a      	mov	r2, r5
 804dce6:	4b16      	ldr	r3, [pc, #88]	; (804dd40 <_vfiprintf_r+0x258>)
 804dce8:	a904      	add	r1, sp, #16
 804dcea:	4630      	mov	r0, r6
 804dcec:	f3af 8000 	nop.w
 804dcf0:	4607      	mov	r7, r0
 804dcf2:	1c78      	adds	r0, r7, #1
 804dcf4:	d1d6      	bne.n	804dca4 <_vfiprintf_r+0x1bc>
 804dcf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804dcf8:	07d9      	lsls	r1, r3, #31
 804dcfa:	d405      	bmi.n	804dd08 <_vfiprintf_r+0x220>
 804dcfc:	89ab      	ldrh	r3, [r5, #12]
 804dcfe:	059a      	lsls	r2, r3, #22
 804dd00:	d402      	bmi.n	804dd08 <_vfiprintf_r+0x220>
 804dd02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804dd04:	f7ff fcf7 	bl	804d6f6 <__retarget_lock_release_recursive>
 804dd08:	89ab      	ldrh	r3, [r5, #12]
 804dd0a:	065b      	lsls	r3, r3, #25
 804dd0c:	f53f af12 	bmi.w	804db34 <_vfiprintf_r+0x4c>
 804dd10:	9809      	ldr	r0, [sp, #36]	; 0x24
 804dd12:	e711      	b.n	804db38 <_vfiprintf_r+0x50>
 804dd14:	ab03      	add	r3, sp, #12
 804dd16:	9300      	str	r3, [sp, #0]
 804dd18:	462a      	mov	r2, r5
 804dd1a:	4b09      	ldr	r3, [pc, #36]	; (804dd40 <_vfiprintf_r+0x258>)
 804dd1c:	a904      	add	r1, sp, #16
 804dd1e:	4630      	mov	r0, r6
 804dd20:	f000 f880 	bl	804de24 <_printf_i>
 804dd24:	e7e4      	b.n	804dcf0 <_vfiprintf_r+0x208>
 804dd26:	bf00      	nop
 804dd28:	080508b0 	.word	0x080508b0
 804dd2c:	080508d0 	.word	0x080508d0
 804dd30:	08050890 	.word	0x08050890
 804dd34:	080508f0 	.word	0x080508f0
 804dd38:	080508fa 	.word	0x080508fa
 804dd3c:	00000000 	.word	0x00000000
 804dd40:	0804dac3 	.word	0x0804dac3
 804dd44:	080508f6 	.word	0x080508f6

0804dd48 <_printf_common>:
 804dd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804dd4c:	4616      	mov	r6, r2
 804dd4e:	4699      	mov	r9, r3
 804dd50:	688a      	ldr	r2, [r1, #8]
 804dd52:	690b      	ldr	r3, [r1, #16]
 804dd54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804dd58:	4293      	cmp	r3, r2
 804dd5a:	bfb8      	it	lt
 804dd5c:	4613      	movlt	r3, r2
 804dd5e:	6033      	str	r3, [r6, #0]
 804dd60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804dd64:	4607      	mov	r7, r0
 804dd66:	460c      	mov	r4, r1
 804dd68:	b10a      	cbz	r2, 804dd6e <_printf_common+0x26>
 804dd6a:	3301      	adds	r3, #1
 804dd6c:	6033      	str	r3, [r6, #0]
 804dd6e:	6823      	ldr	r3, [r4, #0]
 804dd70:	0699      	lsls	r1, r3, #26
 804dd72:	bf42      	ittt	mi
 804dd74:	6833      	ldrmi	r3, [r6, #0]
 804dd76:	3302      	addmi	r3, #2
 804dd78:	6033      	strmi	r3, [r6, #0]
 804dd7a:	6825      	ldr	r5, [r4, #0]
 804dd7c:	f015 0506 	ands.w	r5, r5, #6
 804dd80:	d106      	bne.n	804dd90 <_printf_common+0x48>
 804dd82:	f104 0a19 	add.w	sl, r4, #25
 804dd86:	68e3      	ldr	r3, [r4, #12]
 804dd88:	6832      	ldr	r2, [r6, #0]
 804dd8a:	1a9b      	subs	r3, r3, r2
 804dd8c:	42ab      	cmp	r3, r5
 804dd8e:	dc26      	bgt.n	804ddde <_printf_common+0x96>
 804dd90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804dd94:	1e13      	subs	r3, r2, #0
 804dd96:	6822      	ldr	r2, [r4, #0]
 804dd98:	bf18      	it	ne
 804dd9a:	2301      	movne	r3, #1
 804dd9c:	0692      	lsls	r2, r2, #26
 804dd9e:	d42b      	bmi.n	804ddf8 <_printf_common+0xb0>
 804dda0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804dda4:	4649      	mov	r1, r9
 804dda6:	4638      	mov	r0, r7
 804dda8:	47c0      	blx	r8
 804ddaa:	3001      	adds	r0, #1
 804ddac:	d01e      	beq.n	804ddec <_printf_common+0xa4>
 804ddae:	6823      	ldr	r3, [r4, #0]
 804ddb0:	68e5      	ldr	r5, [r4, #12]
 804ddb2:	6832      	ldr	r2, [r6, #0]
 804ddb4:	f003 0306 	and.w	r3, r3, #6
 804ddb8:	2b04      	cmp	r3, #4
 804ddba:	bf08      	it	eq
 804ddbc:	1aad      	subeq	r5, r5, r2
 804ddbe:	68a3      	ldr	r3, [r4, #8]
 804ddc0:	6922      	ldr	r2, [r4, #16]
 804ddc2:	bf0c      	ite	eq
 804ddc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804ddc8:	2500      	movne	r5, #0
 804ddca:	4293      	cmp	r3, r2
 804ddcc:	bfc4      	itt	gt
 804ddce:	1a9b      	subgt	r3, r3, r2
 804ddd0:	18ed      	addgt	r5, r5, r3
 804ddd2:	2600      	movs	r6, #0
 804ddd4:	341a      	adds	r4, #26
 804ddd6:	42b5      	cmp	r5, r6
 804ddd8:	d11a      	bne.n	804de10 <_printf_common+0xc8>
 804ddda:	2000      	movs	r0, #0
 804dddc:	e008      	b.n	804ddf0 <_printf_common+0xa8>
 804ddde:	2301      	movs	r3, #1
 804dde0:	4652      	mov	r2, sl
 804dde2:	4649      	mov	r1, r9
 804dde4:	4638      	mov	r0, r7
 804dde6:	47c0      	blx	r8
 804dde8:	3001      	adds	r0, #1
 804ddea:	d103      	bne.n	804ddf4 <_printf_common+0xac>
 804ddec:	f04f 30ff 	mov.w	r0, #4294967295
 804ddf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804ddf4:	3501      	adds	r5, #1
 804ddf6:	e7c6      	b.n	804dd86 <_printf_common+0x3e>
 804ddf8:	18e1      	adds	r1, r4, r3
 804ddfa:	1c5a      	adds	r2, r3, #1
 804ddfc:	2030      	movs	r0, #48	; 0x30
 804ddfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804de02:	4422      	add	r2, r4
 804de04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804de08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804de0c:	3302      	adds	r3, #2
 804de0e:	e7c7      	b.n	804dda0 <_printf_common+0x58>
 804de10:	2301      	movs	r3, #1
 804de12:	4622      	mov	r2, r4
 804de14:	4649      	mov	r1, r9
 804de16:	4638      	mov	r0, r7
 804de18:	47c0      	blx	r8
 804de1a:	3001      	adds	r0, #1
 804de1c:	d0e6      	beq.n	804ddec <_printf_common+0xa4>
 804de1e:	3601      	adds	r6, #1
 804de20:	e7d9      	b.n	804ddd6 <_printf_common+0x8e>
	...

0804de24 <_printf_i>:
 804de24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804de28:	7e0f      	ldrb	r7, [r1, #24]
 804de2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804de2c:	2f78      	cmp	r7, #120	; 0x78
 804de2e:	4691      	mov	r9, r2
 804de30:	4680      	mov	r8, r0
 804de32:	460c      	mov	r4, r1
 804de34:	469a      	mov	sl, r3
 804de36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804de3a:	d807      	bhi.n	804de4c <_printf_i+0x28>
 804de3c:	2f62      	cmp	r7, #98	; 0x62
 804de3e:	d80a      	bhi.n	804de56 <_printf_i+0x32>
 804de40:	2f00      	cmp	r7, #0
 804de42:	f000 80d8 	beq.w	804dff6 <_printf_i+0x1d2>
 804de46:	2f58      	cmp	r7, #88	; 0x58
 804de48:	f000 80a3 	beq.w	804df92 <_printf_i+0x16e>
 804de4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804de50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804de54:	e03a      	b.n	804decc <_printf_i+0xa8>
 804de56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804de5a:	2b15      	cmp	r3, #21
 804de5c:	d8f6      	bhi.n	804de4c <_printf_i+0x28>
 804de5e:	a101      	add	r1, pc, #4	; (adr r1, 804de64 <_printf_i+0x40>)
 804de60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804de64:	0804debd 	.word	0x0804debd
 804de68:	0804ded1 	.word	0x0804ded1
 804de6c:	0804de4d 	.word	0x0804de4d
 804de70:	0804de4d 	.word	0x0804de4d
 804de74:	0804de4d 	.word	0x0804de4d
 804de78:	0804de4d 	.word	0x0804de4d
 804de7c:	0804ded1 	.word	0x0804ded1
 804de80:	0804de4d 	.word	0x0804de4d
 804de84:	0804de4d 	.word	0x0804de4d
 804de88:	0804de4d 	.word	0x0804de4d
 804de8c:	0804de4d 	.word	0x0804de4d
 804de90:	0804dfdd 	.word	0x0804dfdd
 804de94:	0804df01 	.word	0x0804df01
 804de98:	0804dfbf 	.word	0x0804dfbf
 804de9c:	0804de4d 	.word	0x0804de4d
 804dea0:	0804de4d 	.word	0x0804de4d
 804dea4:	0804dfff 	.word	0x0804dfff
 804dea8:	0804de4d 	.word	0x0804de4d
 804deac:	0804df01 	.word	0x0804df01
 804deb0:	0804de4d 	.word	0x0804de4d
 804deb4:	0804de4d 	.word	0x0804de4d
 804deb8:	0804dfc7 	.word	0x0804dfc7
 804debc:	682b      	ldr	r3, [r5, #0]
 804debe:	1d1a      	adds	r2, r3, #4
 804dec0:	681b      	ldr	r3, [r3, #0]
 804dec2:	602a      	str	r2, [r5, #0]
 804dec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804dec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804decc:	2301      	movs	r3, #1
 804dece:	e0a3      	b.n	804e018 <_printf_i+0x1f4>
 804ded0:	6820      	ldr	r0, [r4, #0]
 804ded2:	6829      	ldr	r1, [r5, #0]
 804ded4:	0606      	lsls	r6, r0, #24
 804ded6:	f101 0304 	add.w	r3, r1, #4
 804deda:	d50a      	bpl.n	804def2 <_printf_i+0xce>
 804dedc:	680e      	ldr	r6, [r1, #0]
 804dede:	602b      	str	r3, [r5, #0]
 804dee0:	2e00      	cmp	r6, #0
 804dee2:	da03      	bge.n	804deec <_printf_i+0xc8>
 804dee4:	232d      	movs	r3, #45	; 0x2d
 804dee6:	4276      	negs	r6, r6
 804dee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804deec:	485e      	ldr	r0, [pc, #376]	; (804e068 <_printf_i+0x244>)
 804deee:	230a      	movs	r3, #10
 804def0:	e019      	b.n	804df26 <_printf_i+0x102>
 804def2:	680e      	ldr	r6, [r1, #0]
 804def4:	602b      	str	r3, [r5, #0]
 804def6:	f010 0f40 	tst.w	r0, #64	; 0x40
 804defa:	bf18      	it	ne
 804defc:	b236      	sxthne	r6, r6
 804defe:	e7ef      	b.n	804dee0 <_printf_i+0xbc>
 804df00:	682b      	ldr	r3, [r5, #0]
 804df02:	6820      	ldr	r0, [r4, #0]
 804df04:	1d19      	adds	r1, r3, #4
 804df06:	6029      	str	r1, [r5, #0]
 804df08:	0601      	lsls	r1, r0, #24
 804df0a:	d501      	bpl.n	804df10 <_printf_i+0xec>
 804df0c:	681e      	ldr	r6, [r3, #0]
 804df0e:	e002      	b.n	804df16 <_printf_i+0xf2>
 804df10:	0646      	lsls	r6, r0, #25
 804df12:	d5fb      	bpl.n	804df0c <_printf_i+0xe8>
 804df14:	881e      	ldrh	r6, [r3, #0]
 804df16:	4854      	ldr	r0, [pc, #336]	; (804e068 <_printf_i+0x244>)
 804df18:	2f6f      	cmp	r7, #111	; 0x6f
 804df1a:	bf0c      	ite	eq
 804df1c:	2308      	moveq	r3, #8
 804df1e:	230a      	movne	r3, #10
 804df20:	2100      	movs	r1, #0
 804df22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804df26:	6865      	ldr	r5, [r4, #4]
 804df28:	60a5      	str	r5, [r4, #8]
 804df2a:	2d00      	cmp	r5, #0
 804df2c:	bfa2      	ittt	ge
 804df2e:	6821      	ldrge	r1, [r4, #0]
 804df30:	f021 0104 	bicge.w	r1, r1, #4
 804df34:	6021      	strge	r1, [r4, #0]
 804df36:	b90e      	cbnz	r6, 804df3c <_printf_i+0x118>
 804df38:	2d00      	cmp	r5, #0
 804df3a:	d04d      	beq.n	804dfd8 <_printf_i+0x1b4>
 804df3c:	4615      	mov	r5, r2
 804df3e:	fbb6 f1f3 	udiv	r1, r6, r3
 804df42:	fb03 6711 	mls	r7, r3, r1, r6
 804df46:	5dc7      	ldrb	r7, [r0, r7]
 804df48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804df4c:	4637      	mov	r7, r6
 804df4e:	42bb      	cmp	r3, r7
 804df50:	460e      	mov	r6, r1
 804df52:	d9f4      	bls.n	804df3e <_printf_i+0x11a>
 804df54:	2b08      	cmp	r3, #8
 804df56:	d10b      	bne.n	804df70 <_printf_i+0x14c>
 804df58:	6823      	ldr	r3, [r4, #0]
 804df5a:	07de      	lsls	r6, r3, #31
 804df5c:	d508      	bpl.n	804df70 <_printf_i+0x14c>
 804df5e:	6923      	ldr	r3, [r4, #16]
 804df60:	6861      	ldr	r1, [r4, #4]
 804df62:	4299      	cmp	r1, r3
 804df64:	bfde      	ittt	le
 804df66:	2330      	movle	r3, #48	; 0x30
 804df68:	f805 3c01 	strble.w	r3, [r5, #-1]
 804df6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 804df70:	1b52      	subs	r2, r2, r5
 804df72:	6122      	str	r2, [r4, #16]
 804df74:	f8cd a000 	str.w	sl, [sp]
 804df78:	464b      	mov	r3, r9
 804df7a:	aa03      	add	r2, sp, #12
 804df7c:	4621      	mov	r1, r4
 804df7e:	4640      	mov	r0, r8
 804df80:	f7ff fee2 	bl	804dd48 <_printf_common>
 804df84:	3001      	adds	r0, #1
 804df86:	d14c      	bne.n	804e022 <_printf_i+0x1fe>
 804df88:	f04f 30ff 	mov.w	r0, #4294967295
 804df8c:	b004      	add	sp, #16
 804df8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804df92:	4835      	ldr	r0, [pc, #212]	; (804e068 <_printf_i+0x244>)
 804df94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804df98:	6829      	ldr	r1, [r5, #0]
 804df9a:	6823      	ldr	r3, [r4, #0]
 804df9c:	f851 6b04 	ldr.w	r6, [r1], #4
 804dfa0:	6029      	str	r1, [r5, #0]
 804dfa2:	061d      	lsls	r5, r3, #24
 804dfa4:	d514      	bpl.n	804dfd0 <_printf_i+0x1ac>
 804dfa6:	07df      	lsls	r7, r3, #31
 804dfa8:	bf44      	itt	mi
 804dfaa:	f043 0320 	orrmi.w	r3, r3, #32
 804dfae:	6023      	strmi	r3, [r4, #0]
 804dfb0:	b91e      	cbnz	r6, 804dfba <_printf_i+0x196>
 804dfb2:	6823      	ldr	r3, [r4, #0]
 804dfb4:	f023 0320 	bic.w	r3, r3, #32
 804dfb8:	6023      	str	r3, [r4, #0]
 804dfba:	2310      	movs	r3, #16
 804dfbc:	e7b0      	b.n	804df20 <_printf_i+0xfc>
 804dfbe:	6823      	ldr	r3, [r4, #0]
 804dfc0:	f043 0320 	orr.w	r3, r3, #32
 804dfc4:	6023      	str	r3, [r4, #0]
 804dfc6:	2378      	movs	r3, #120	; 0x78
 804dfc8:	4828      	ldr	r0, [pc, #160]	; (804e06c <_printf_i+0x248>)
 804dfca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804dfce:	e7e3      	b.n	804df98 <_printf_i+0x174>
 804dfd0:	0659      	lsls	r1, r3, #25
 804dfd2:	bf48      	it	mi
 804dfd4:	b2b6      	uxthmi	r6, r6
 804dfd6:	e7e6      	b.n	804dfa6 <_printf_i+0x182>
 804dfd8:	4615      	mov	r5, r2
 804dfda:	e7bb      	b.n	804df54 <_printf_i+0x130>
 804dfdc:	682b      	ldr	r3, [r5, #0]
 804dfde:	6826      	ldr	r6, [r4, #0]
 804dfe0:	6961      	ldr	r1, [r4, #20]
 804dfe2:	1d18      	adds	r0, r3, #4
 804dfe4:	6028      	str	r0, [r5, #0]
 804dfe6:	0635      	lsls	r5, r6, #24
 804dfe8:	681b      	ldr	r3, [r3, #0]
 804dfea:	d501      	bpl.n	804dff0 <_printf_i+0x1cc>
 804dfec:	6019      	str	r1, [r3, #0]
 804dfee:	e002      	b.n	804dff6 <_printf_i+0x1d2>
 804dff0:	0670      	lsls	r0, r6, #25
 804dff2:	d5fb      	bpl.n	804dfec <_printf_i+0x1c8>
 804dff4:	8019      	strh	r1, [r3, #0]
 804dff6:	2300      	movs	r3, #0
 804dff8:	6123      	str	r3, [r4, #16]
 804dffa:	4615      	mov	r5, r2
 804dffc:	e7ba      	b.n	804df74 <_printf_i+0x150>
 804dffe:	682b      	ldr	r3, [r5, #0]
 804e000:	1d1a      	adds	r2, r3, #4
 804e002:	602a      	str	r2, [r5, #0]
 804e004:	681d      	ldr	r5, [r3, #0]
 804e006:	6862      	ldr	r2, [r4, #4]
 804e008:	2100      	movs	r1, #0
 804e00a:	4628      	mov	r0, r5
 804e00c:	f7f2 f8f0 	bl	80401f0 <memchr>
 804e010:	b108      	cbz	r0, 804e016 <_printf_i+0x1f2>
 804e012:	1b40      	subs	r0, r0, r5
 804e014:	6060      	str	r0, [r4, #4]
 804e016:	6863      	ldr	r3, [r4, #4]
 804e018:	6123      	str	r3, [r4, #16]
 804e01a:	2300      	movs	r3, #0
 804e01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804e020:	e7a8      	b.n	804df74 <_printf_i+0x150>
 804e022:	6923      	ldr	r3, [r4, #16]
 804e024:	462a      	mov	r2, r5
 804e026:	4649      	mov	r1, r9
 804e028:	4640      	mov	r0, r8
 804e02a:	47d0      	blx	sl
 804e02c:	3001      	adds	r0, #1
 804e02e:	d0ab      	beq.n	804df88 <_printf_i+0x164>
 804e030:	6823      	ldr	r3, [r4, #0]
 804e032:	079b      	lsls	r3, r3, #30
 804e034:	d413      	bmi.n	804e05e <_printf_i+0x23a>
 804e036:	68e0      	ldr	r0, [r4, #12]
 804e038:	9b03      	ldr	r3, [sp, #12]
 804e03a:	4298      	cmp	r0, r3
 804e03c:	bfb8      	it	lt
 804e03e:	4618      	movlt	r0, r3
 804e040:	e7a4      	b.n	804df8c <_printf_i+0x168>
 804e042:	2301      	movs	r3, #1
 804e044:	4632      	mov	r2, r6
 804e046:	4649      	mov	r1, r9
 804e048:	4640      	mov	r0, r8
 804e04a:	47d0      	blx	sl
 804e04c:	3001      	adds	r0, #1
 804e04e:	d09b      	beq.n	804df88 <_printf_i+0x164>
 804e050:	3501      	adds	r5, #1
 804e052:	68e3      	ldr	r3, [r4, #12]
 804e054:	9903      	ldr	r1, [sp, #12]
 804e056:	1a5b      	subs	r3, r3, r1
 804e058:	42ab      	cmp	r3, r5
 804e05a:	dcf2      	bgt.n	804e042 <_printf_i+0x21e>
 804e05c:	e7eb      	b.n	804e036 <_printf_i+0x212>
 804e05e:	2500      	movs	r5, #0
 804e060:	f104 0619 	add.w	r6, r4, #25
 804e064:	e7f5      	b.n	804e052 <_printf_i+0x22e>
 804e066:	bf00      	nop
 804e068:	08050901 	.word	0x08050901
 804e06c:	08050912 	.word	0x08050912

0804e070 <__sread>:
 804e070:	b510      	push	{r4, lr}
 804e072:	460c      	mov	r4, r1
 804e074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e078:	f000 f8ec 	bl	804e254 <_read_r>
 804e07c:	2800      	cmp	r0, #0
 804e07e:	bfab      	itete	ge
 804e080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804e082:	89a3      	ldrhlt	r3, [r4, #12]
 804e084:	181b      	addge	r3, r3, r0
 804e086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804e08a:	bfac      	ite	ge
 804e08c:	6563      	strge	r3, [r4, #84]	; 0x54
 804e08e:	81a3      	strhlt	r3, [r4, #12]
 804e090:	bd10      	pop	{r4, pc}

0804e092 <__swrite>:
 804e092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e096:	461f      	mov	r7, r3
 804e098:	898b      	ldrh	r3, [r1, #12]
 804e09a:	05db      	lsls	r3, r3, #23
 804e09c:	4605      	mov	r5, r0
 804e09e:	460c      	mov	r4, r1
 804e0a0:	4616      	mov	r6, r2
 804e0a2:	d505      	bpl.n	804e0b0 <__swrite+0x1e>
 804e0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e0a8:	2302      	movs	r3, #2
 804e0aa:	2200      	movs	r2, #0
 804e0ac:	f000 f868 	bl	804e180 <_lseek_r>
 804e0b0:	89a3      	ldrh	r3, [r4, #12]
 804e0b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804e0b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804e0ba:	81a3      	strh	r3, [r4, #12]
 804e0bc:	4632      	mov	r2, r6
 804e0be:	463b      	mov	r3, r7
 804e0c0:	4628      	mov	r0, r5
 804e0c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e0c6:	f000 b817 	b.w	804e0f8 <_write_r>

0804e0ca <__sseek>:
 804e0ca:	b510      	push	{r4, lr}
 804e0cc:	460c      	mov	r4, r1
 804e0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e0d2:	f000 f855 	bl	804e180 <_lseek_r>
 804e0d6:	1c43      	adds	r3, r0, #1
 804e0d8:	89a3      	ldrh	r3, [r4, #12]
 804e0da:	bf15      	itete	ne
 804e0dc:	6560      	strne	r0, [r4, #84]	; 0x54
 804e0de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804e0e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804e0e6:	81a3      	strheq	r3, [r4, #12]
 804e0e8:	bf18      	it	ne
 804e0ea:	81a3      	strhne	r3, [r4, #12]
 804e0ec:	bd10      	pop	{r4, pc}

0804e0ee <__sclose>:
 804e0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804e0f2:	f000 b813 	b.w	804e11c <_close_r>
	...

0804e0f8 <_write_r>:
 804e0f8:	b538      	push	{r3, r4, r5, lr}
 804e0fa:	4d07      	ldr	r5, [pc, #28]	; (804e118 <_write_r+0x20>)
 804e0fc:	4604      	mov	r4, r0
 804e0fe:	4608      	mov	r0, r1
 804e100:	4611      	mov	r1, r2
 804e102:	2200      	movs	r2, #0
 804e104:	602a      	str	r2, [r5, #0]
 804e106:	461a      	mov	r2, r3
 804e108:	f7f3 fe97 	bl	8041e3a <_write>
 804e10c:	1c43      	adds	r3, r0, #1
 804e10e:	d102      	bne.n	804e116 <_write_r+0x1e>
 804e110:	682b      	ldr	r3, [r5, #0]
 804e112:	b103      	cbz	r3, 804e116 <_write_r+0x1e>
 804e114:	6023      	str	r3, [r4, #0]
 804e116:	bd38      	pop	{r3, r4, r5, pc}
 804e118:	200011b0 	.word	0x200011b0

0804e11c <_close_r>:
 804e11c:	b538      	push	{r3, r4, r5, lr}
 804e11e:	4d06      	ldr	r5, [pc, #24]	; (804e138 <_close_r+0x1c>)
 804e120:	2300      	movs	r3, #0
 804e122:	4604      	mov	r4, r0
 804e124:	4608      	mov	r0, r1
 804e126:	602b      	str	r3, [r5, #0]
 804e128:	f7f3 fea3 	bl	8041e72 <_close>
 804e12c:	1c43      	adds	r3, r0, #1
 804e12e:	d102      	bne.n	804e136 <_close_r+0x1a>
 804e130:	682b      	ldr	r3, [r5, #0]
 804e132:	b103      	cbz	r3, 804e136 <_close_r+0x1a>
 804e134:	6023      	str	r3, [r4, #0]
 804e136:	bd38      	pop	{r3, r4, r5, pc}
 804e138:	200011b0 	.word	0x200011b0

0804e13c <_fstat_r>:
 804e13c:	b538      	push	{r3, r4, r5, lr}
 804e13e:	4d07      	ldr	r5, [pc, #28]	; (804e15c <_fstat_r+0x20>)
 804e140:	2300      	movs	r3, #0
 804e142:	4604      	mov	r4, r0
 804e144:	4608      	mov	r0, r1
 804e146:	4611      	mov	r1, r2
 804e148:	602b      	str	r3, [r5, #0]
 804e14a:	f7f3 fe9e 	bl	8041e8a <_fstat>
 804e14e:	1c43      	adds	r3, r0, #1
 804e150:	d102      	bne.n	804e158 <_fstat_r+0x1c>
 804e152:	682b      	ldr	r3, [r5, #0]
 804e154:	b103      	cbz	r3, 804e158 <_fstat_r+0x1c>
 804e156:	6023      	str	r3, [r4, #0]
 804e158:	bd38      	pop	{r3, r4, r5, pc}
 804e15a:	bf00      	nop
 804e15c:	200011b0 	.word	0x200011b0

0804e160 <_isatty_r>:
 804e160:	b538      	push	{r3, r4, r5, lr}
 804e162:	4d06      	ldr	r5, [pc, #24]	; (804e17c <_isatty_r+0x1c>)
 804e164:	2300      	movs	r3, #0
 804e166:	4604      	mov	r4, r0
 804e168:	4608      	mov	r0, r1
 804e16a:	602b      	str	r3, [r5, #0]
 804e16c:	f7f3 fe9d 	bl	8041eaa <_isatty>
 804e170:	1c43      	adds	r3, r0, #1
 804e172:	d102      	bne.n	804e17a <_isatty_r+0x1a>
 804e174:	682b      	ldr	r3, [r5, #0]
 804e176:	b103      	cbz	r3, 804e17a <_isatty_r+0x1a>
 804e178:	6023      	str	r3, [r4, #0]
 804e17a:	bd38      	pop	{r3, r4, r5, pc}
 804e17c:	200011b0 	.word	0x200011b0

0804e180 <_lseek_r>:
 804e180:	b538      	push	{r3, r4, r5, lr}
 804e182:	4d07      	ldr	r5, [pc, #28]	; (804e1a0 <_lseek_r+0x20>)
 804e184:	4604      	mov	r4, r0
 804e186:	4608      	mov	r0, r1
 804e188:	4611      	mov	r1, r2
 804e18a:	2200      	movs	r2, #0
 804e18c:	602a      	str	r2, [r5, #0]
 804e18e:	461a      	mov	r2, r3
 804e190:	f7f3 fe96 	bl	8041ec0 <_lseek>
 804e194:	1c43      	adds	r3, r0, #1
 804e196:	d102      	bne.n	804e19e <_lseek_r+0x1e>
 804e198:	682b      	ldr	r3, [r5, #0]
 804e19a:	b103      	cbz	r3, 804e19e <_lseek_r+0x1e>
 804e19c:	6023      	str	r3, [r4, #0]
 804e19e:	bd38      	pop	{r3, r4, r5, pc}
 804e1a0:	200011b0 	.word	0x200011b0

0804e1a4 <memcpy>:
 804e1a4:	440a      	add	r2, r1
 804e1a6:	4291      	cmp	r1, r2
 804e1a8:	f100 33ff 	add.w	r3, r0, #4294967295
 804e1ac:	d100      	bne.n	804e1b0 <memcpy+0xc>
 804e1ae:	4770      	bx	lr
 804e1b0:	b510      	push	{r4, lr}
 804e1b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 804e1b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 804e1ba:	4291      	cmp	r1, r2
 804e1bc:	d1f9      	bne.n	804e1b2 <memcpy+0xe>
 804e1be:	bd10      	pop	{r4, pc}

0804e1c0 <memmove>:
 804e1c0:	4288      	cmp	r0, r1
 804e1c2:	b510      	push	{r4, lr}
 804e1c4:	eb01 0402 	add.w	r4, r1, r2
 804e1c8:	d902      	bls.n	804e1d0 <memmove+0x10>
 804e1ca:	4284      	cmp	r4, r0
 804e1cc:	4623      	mov	r3, r4
 804e1ce:	d807      	bhi.n	804e1e0 <memmove+0x20>
 804e1d0:	1e43      	subs	r3, r0, #1
 804e1d2:	42a1      	cmp	r1, r4
 804e1d4:	d008      	beq.n	804e1e8 <memmove+0x28>
 804e1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 804e1da:	f803 2f01 	strb.w	r2, [r3, #1]!
 804e1de:	e7f8      	b.n	804e1d2 <memmove+0x12>
 804e1e0:	4402      	add	r2, r0
 804e1e2:	4601      	mov	r1, r0
 804e1e4:	428a      	cmp	r2, r1
 804e1e6:	d100      	bne.n	804e1ea <memmove+0x2a>
 804e1e8:	bd10      	pop	{r4, pc}
 804e1ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804e1ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804e1f2:	e7f7      	b.n	804e1e4 <memmove+0x24>

0804e1f4 <_realloc_r>:
 804e1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e1f8:	4680      	mov	r8, r0
 804e1fa:	4614      	mov	r4, r2
 804e1fc:	460e      	mov	r6, r1
 804e1fe:	b921      	cbnz	r1, 804e20a <_realloc_r+0x16>
 804e200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e204:	4611      	mov	r1, r2
 804e206:	f7fe becb 	b.w	804cfa0 <_malloc_r>
 804e20a:	b92a      	cbnz	r2, 804e218 <_realloc_r+0x24>
 804e20c:	f7fe fe5c 	bl	804cec8 <_free_r>
 804e210:	4625      	mov	r5, r4
 804e212:	4628      	mov	r0, r5
 804e214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804e218:	f000 f82e 	bl	804e278 <_malloc_usable_size_r>
 804e21c:	4284      	cmp	r4, r0
 804e21e:	4607      	mov	r7, r0
 804e220:	d802      	bhi.n	804e228 <_realloc_r+0x34>
 804e222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804e226:	d812      	bhi.n	804e24e <_realloc_r+0x5a>
 804e228:	4621      	mov	r1, r4
 804e22a:	4640      	mov	r0, r8
 804e22c:	f7fe feb8 	bl	804cfa0 <_malloc_r>
 804e230:	4605      	mov	r5, r0
 804e232:	2800      	cmp	r0, #0
 804e234:	d0ed      	beq.n	804e212 <_realloc_r+0x1e>
 804e236:	42bc      	cmp	r4, r7
 804e238:	4622      	mov	r2, r4
 804e23a:	4631      	mov	r1, r6
 804e23c:	bf28      	it	cs
 804e23e:	463a      	movcs	r2, r7
 804e240:	f7ff ffb0 	bl	804e1a4 <memcpy>
 804e244:	4631      	mov	r1, r6
 804e246:	4640      	mov	r0, r8
 804e248:	f7fe fe3e 	bl	804cec8 <_free_r>
 804e24c:	e7e1      	b.n	804e212 <_realloc_r+0x1e>
 804e24e:	4635      	mov	r5, r6
 804e250:	e7df      	b.n	804e212 <_realloc_r+0x1e>
	...

0804e254 <_read_r>:
 804e254:	b538      	push	{r3, r4, r5, lr}
 804e256:	4d07      	ldr	r5, [pc, #28]	; (804e274 <_read_r+0x20>)
 804e258:	4604      	mov	r4, r0
 804e25a:	4608      	mov	r0, r1
 804e25c:	4611      	mov	r1, r2
 804e25e:	2200      	movs	r2, #0
 804e260:	602a      	str	r2, [r5, #0]
 804e262:	461a      	mov	r2, r3
 804e264:	f7f3 fdcc 	bl	8041e00 <_read>
 804e268:	1c43      	adds	r3, r0, #1
 804e26a:	d102      	bne.n	804e272 <_read_r+0x1e>
 804e26c:	682b      	ldr	r3, [r5, #0]
 804e26e:	b103      	cbz	r3, 804e272 <_read_r+0x1e>
 804e270:	6023      	str	r3, [r4, #0]
 804e272:	bd38      	pop	{r3, r4, r5, pc}
 804e274:	200011b0 	.word	0x200011b0

0804e278 <_malloc_usable_size_r>:
 804e278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804e27c:	1f18      	subs	r0, r3, #4
 804e27e:	2b00      	cmp	r3, #0
 804e280:	bfbc      	itt	lt
 804e282:	580b      	ldrlt	r3, [r1, r0]
 804e284:	18c0      	addlt	r0, r0, r3
 804e286:	4770      	bx	lr

0804e288 <_init>:
 804e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e28a:	bf00      	nop
 804e28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e28e:	bc08      	pop	{r3}
 804e290:	469e      	mov	lr, r3
 804e292:	4770      	bx	lr

0804e294 <_fini>:
 804e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e296:	bf00      	nop
 804e298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e29a:	bc08      	pop	{r3}
 804e29c:	469e      	mov	lr, r3
 804e29e:	4770      	bx	lr
