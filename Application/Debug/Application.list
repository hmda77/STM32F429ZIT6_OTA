
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ac  080401ac  080401ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08049958  08049958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049974  08049974  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08049974  08049974  00019974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804997c  0804997c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804997c  0804997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08049980  08049980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08049984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000009bc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a4c  20000a4c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023a4c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004832  00000000  00000000  00043b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c70  00000000  00000000  00048340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ab0  00000000  00000000  00049fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002922f  00000000  00000000  0004ba60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e9b  00000000  00000000  00074c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebb82  00000000  00000000  00099b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001856ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bc8  00000000  00000000  001856fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401ac <__do_global_dtors_aux>:
 80401ac:	b510      	push	{r4, lr}
 80401ae:	4c05      	ldr	r4, [pc, #20]	; (80401c4 <__do_global_dtors_aux+0x18>)
 80401b0:	7823      	ldrb	r3, [r4, #0]
 80401b2:	b933      	cbnz	r3, 80401c2 <__do_global_dtors_aux+0x16>
 80401b4:	4b04      	ldr	r3, [pc, #16]	; (80401c8 <__do_global_dtors_aux+0x1c>)
 80401b6:	b113      	cbz	r3, 80401be <__do_global_dtors_aux+0x12>
 80401b8:	4804      	ldr	r0, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x20>)
 80401ba:	f3af 8000 	nop.w
 80401be:	2301      	movs	r3, #1
 80401c0:	7023      	strb	r3, [r4, #0]
 80401c2:	bd10      	pop	{r4, pc}
 80401c4:	20000090 	.word	0x20000090
 80401c8:	00000000 	.word	0x00000000
 80401cc:	08049940 	.word	0x08049940

080401d0 <frame_dummy>:
 80401d0:	b508      	push	{r3, lr}
 80401d2:	4b03      	ldr	r3, [pc, #12]	; (80401e0 <frame_dummy+0x10>)
 80401d4:	b11b      	cbz	r3, 80401de <frame_dummy+0xe>
 80401d6:	4903      	ldr	r1, [pc, #12]	; (80401e4 <frame_dummy+0x14>)
 80401d8:	4803      	ldr	r0, [pc, #12]	; (80401e8 <frame_dummy+0x18>)
 80401da:	f3af 8000 	nop.w
 80401de:	bd08      	pop	{r3, pc}
 80401e0:	00000000 	.word	0x00000000
 80401e4:	20000094 	.word	0x20000094
 80401e8:	08049940 	.word	0x08049940

080401ec <__aeabi_uldivmod>:
 80401ec:	b953      	cbnz	r3, 8040204 <__aeabi_uldivmod+0x18>
 80401ee:	b94a      	cbnz	r2, 8040204 <__aeabi_uldivmod+0x18>
 80401f0:	2900      	cmp	r1, #0
 80401f2:	bf08      	it	eq
 80401f4:	2800      	cmpeq	r0, #0
 80401f6:	bf1c      	itt	ne
 80401f8:	f04f 31ff 	movne.w	r1, #4294967295
 80401fc:	f04f 30ff 	movne.w	r0, #4294967295
 8040200:	f000 b974 	b.w	80404ec <__aeabi_idiv0>
 8040204:	f1ad 0c08 	sub.w	ip, sp, #8
 8040208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 804020c:	f000 f806 	bl	804021c <__udivmoddi4>
 8040210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040218:	b004      	add	sp, #16
 804021a:	4770      	bx	lr

0804021c <__udivmoddi4>:
 804021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040220:	9d08      	ldr	r5, [sp, #32]
 8040222:	4604      	mov	r4, r0
 8040224:	468e      	mov	lr, r1
 8040226:	2b00      	cmp	r3, #0
 8040228:	d14d      	bne.n	80402c6 <__udivmoddi4+0xaa>
 804022a:	428a      	cmp	r2, r1
 804022c:	4694      	mov	ip, r2
 804022e:	d969      	bls.n	8040304 <__udivmoddi4+0xe8>
 8040230:	fab2 f282 	clz	r2, r2
 8040234:	b152      	cbz	r2, 804024c <__udivmoddi4+0x30>
 8040236:	fa01 f302 	lsl.w	r3, r1, r2
 804023a:	f1c2 0120 	rsb	r1, r2, #32
 804023e:	fa20 f101 	lsr.w	r1, r0, r1
 8040242:	fa0c fc02 	lsl.w	ip, ip, r2
 8040246:	ea41 0e03 	orr.w	lr, r1, r3
 804024a:	4094      	lsls	r4, r2
 804024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040250:	0c21      	lsrs	r1, r4, #16
 8040252:	fbbe f6f8 	udiv	r6, lr, r8
 8040256:	fa1f f78c 	uxth.w	r7, ip
 804025a:	fb08 e316 	mls	r3, r8, r6, lr
 804025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040262:	fb06 f107 	mul.w	r1, r6, r7
 8040266:	4299      	cmp	r1, r3
 8040268:	d90a      	bls.n	8040280 <__udivmoddi4+0x64>
 804026a:	eb1c 0303 	adds.w	r3, ip, r3
 804026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8040272:	f080 811f 	bcs.w	80404b4 <__udivmoddi4+0x298>
 8040276:	4299      	cmp	r1, r3
 8040278:	f240 811c 	bls.w	80404b4 <__udivmoddi4+0x298>
 804027c:	3e02      	subs	r6, #2
 804027e:	4463      	add	r3, ip
 8040280:	1a5b      	subs	r3, r3, r1
 8040282:	b2a4      	uxth	r4, r4
 8040284:	fbb3 f0f8 	udiv	r0, r3, r8
 8040288:	fb08 3310 	mls	r3, r8, r0, r3
 804028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040290:	fb00 f707 	mul.w	r7, r0, r7
 8040294:	42a7      	cmp	r7, r4
 8040296:	d90a      	bls.n	80402ae <__udivmoddi4+0x92>
 8040298:	eb1c 0404 	adds.w	r4, ip, r4
 804029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80402a0:	f080 810a 	bcs.w	80404b8 <__udivmoddi4+0x29c>
 80402a4:	42a7      	cmp	r7, r4
 80402a6:	f240 8107 	bls.w	80404b8 <__udivmoddi4+0x29c>
 80402aa:	4464      	add	r4, ip
 80402ac:	3802      	subs	r0, #2
 80402ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402b2:	1be4      	subs	r4, r4, r7
 80402b4:	2600      	movs	r6, #0
 80402b6:	b11d      	cbz	r5, 80402c0 <__udivmoddi4+0xa4>
 80402b8:	40d4      	lsrs	r4, r2
 80402ba:	2300      	movs	r3, #0
 80402bc:	e9c5 4300 	strd	r4, r3, [r5]
 80402c0:	4631      	mov	r1, r6
 80402c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402c6:	428b      	cmp	r3, r1
 80402c8:	d909      	bls.n	80402de <__udivmoddi4+0xc2>
 80402ca:	2d00      	cmp	r5, #0
 80402cc:	f000 80ef 	beq.w	80404ae <__udivmoddi4+0x292>
 80402d0:	2600      	movs	r6, #0
 80402d2:	e9c5 0100 	strd	r0, r1, [r5]
 80402d6:	4630      	mov	r0, r6
 80402d8:	4631      	mov	r1, r6
 80402da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402de:	fab3 f683 	clz	r6, r3
 80402e2:	2e00      	cmp	r6, #0
 80402e4:	d14a      	bne.n	804037c <__udivmoddi4+0x160>
 80402e6:	428b      	cmp	r3, r1
 80402e8:	d302      	bcc.n	80402f0 <__udivmoddi4+0xd4>
 80402ea:	4282      	cmp	r2, r0
 80402ec:	f200 80f9 	bhi.w	80404e2 <__udivmoddi4+0x2c6>
 80402f0:	1a84      	subs	r4, r0, r2
 80402f2:	eb61 0303 	sbc.w	r3, r1, r3
 80402f6:	2001      	movs	r0, #1
 80402f8:	469e      	mov	lr, r3
 80402fa:	2d00      	cmp	r5, #0
 80402fc:	d0e0      	beq.n	80402c0 <__udivmoddi4+0xa4>
 80402fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8040302:	e7dd      	b.n	80402c0 <__udivmoddi4+0xa4>
 8040304:	b902      	cbnz	r2, 8040308 <__udivmoddi4+0xec>
 8040306:	deff      	udf	#255	; 0xff
 8040308:	fab2 f282 	clz	r2, r2
 804030c:	2a00      	cmp	r2, #0
 804030e:	f040 8092 	bne.w	8040436 <__udivmoddi4+0x21a>
 8040312:	eba1 010c 	sub.w	r1, r1, ip
 8040316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804031a:	fa1f fe8c 	uxth.w	lr, ip
 804031e:	2601      	movs	r6, #1
 8040320:	0c20      	lsrs	r0, r4, #16
 8040322:	fbb1 f3f7 	udiv	r3, r1, r7
 8040326:	fb07 1113 	mls	r1, r7, r3, r1
 804032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804032e:	fb0e f003 	mul.w	r0, lr, r3
 8040332:	4288      	cmp	r0, r1
 8040334:	d908      	bls.n	8040348 <__udivmoddi4+0x12c>
 8040336:	eb1c 0101 	adds.w	r1, ip, r1
 804033a:	f103 38ff 	add.w	r8, r3, #4294967295
 804033e:	d202      	bcs.n	8040346 <__udivmoddi4+0x12a>
 8040340:	4288      	cmp	r0, r1
 8040342:	f200 80cb 	bhi.w	80404dc <__udivmoddi4+0x2c0>
 8040346:	4643      	mov	r3, r8
 8040348:	1a09      	subs	r1, r1, r0
 804034a:	b2a4      	uxth	r4, r4
 804034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8040350:	fb07 1110 	mls	r1, r7, r0, r1
 8040354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040358:	fb0e fe00 	mul.w	lr, lr, r0
 804035c:	45a6      	cmp	lr, r4
 804035e:	d908      	bls.n	8040372 <__udivmoddi4+0x156>
 8040360:	eb1c 0404 	adds.w	r4, ip, r4
 8040364:	f100 31ff 	add.w	r1, r0, #4294967295
 8040368:	d202      	bcs.n	8040370 <__udivmoddi4+0x154>
 804036a:	45a6      	cmp	lr, r4
 804036c:	f200 80bb 	bhi.w	80404e6 <__udivmoddi4+0x2ca>
 8040370:	4608      	mov	r0, r1
 8040372:	eba4 040e 	sub.w	r4, r4, lr
 8040376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804037a:	e79c      	b.n	80402b6 <__udivmoddi4+0x9a>
 804037c:	f1c6 0720 	rsb	r7, r6, #32
 8040380:	40b3      	lsls	r3, r6
 8040382:	fa22 fc07 	lsr.w	ip, r2, r7
 8040386:	ea4c 0c03 	orr.w	ip, ip, r3
 804038a:	fa20 f407 	lsr.w	r4, r0, r7
 804038e:	fa01 f306 	lsl.w	r3, r1, r6
 8040392:	431c      	orrs	r4, r3
 8040394:	40f9      	lsrs	r1, r7
 8040396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804039a:	fa00 f306 	lsl.w	r3, r0, r6
 804039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80403a2:	0c20      	lsrs	r0, r4, #16
 80403a4:	fa1f fe8c 	uxth.w	lr, ip
 80403a8:	fb09 1118 	mls	r1, r9, r8, r1
 80403ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403b0:	fb08 f00e 	mul.w	r0, r8, lr
 80403b4:	4288      	cmp	r0, r1
 80403b6:	fa02 f206 	lsl.w	r2, r2, r6
 80403ba:	d90b      	bls.n	80403d4 <__udivmoddi4+0x1b8>
 80403bc:	eb1c 0101 	adds.w	r1, ip, r1
 80403c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80403c4:	f080 8088 	bcs.w	80404d8 <__udivmoddi4+0x2bc>
 80403c8:	4288      	cmp	r0, r1
 80403ca:	f240 8085 	bls.w	80404d8 <__udivmoddi4+0x2bc>
 80403ce:	f1a8 0802 	sub.w	r8, r8, #2
 80403d2:	4461      	add	r1, ip
 80403d4:	1a09      	subs	r1, r1, r0
 80403d6:	b2a4      	uxth	r4, r4
 80403d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80403dc:	fb09 1110 	mls	r1, r9, r0, r1
 80403e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80403e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80403e8:	458e      	cmp	lr, r1
 80403ea:	d908      	bls.n	80403fe <__udivmoddi4+0x1e2>
 80403ec:	eb1c 0101 	adds.w	r1, ip, r1
 80403f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80403f4:	d26c      	bcs.n	80404d0 <__udivmoddi4+0x2b4>
 80403f6:	458e      	cmp	lr, r1
 80403f8:	d96a      	bls.n	80404d0 <__udivmoddi4+0x2b4>
 80403fa:	3802      	subs	r0, #2
 80403fc:	4461      	add	r1, ip
 80403fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040402:	fba0 9402 	umull	r9, r4, r0, r2
 8040406:	eba1 010e 	sub.w	r1, r1, lr
 804040a:	42a1      	cmp	r1, r4
 804040c:	46c8      	mov	r8, r9
 804040e:	46a6      	mov	lr, r4
 8040410:	d356      	bcc.n	80404c0 <__udivmoddi4+0x2a4>
 8040412:	d053      	beq.n	80404bc <__udivmoddi4+0x2a0>
 8040414:	b15d      	cbz	r5, 804042e <__udivmoddi4+0x212>
 8040416:	ebb3 0208 	subs.w	r2, r3, r8
 804041a:	eb61 010e 	sbc.w	r1, r1, lr
 804041e:	fa01 f707 	lsl.w	r7, r1, r7
 8040422:	fa22 f306 	lsr.w	r3, r2, r6
 8040426:	40f1      	lsrs	r1, r6
 8040428:	431f      	orrs	r7, r3
 804042a:	e9c5 7100 	strd	r7, r1, [r5]
 804042e:	2600      	movs	r6, #0
 8040430:	4631      	mov	r1, r6
 8040432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040436:	f1c2 0320 	rsb	r3, r2, #32
 804043a:	40d8      	lsrs	r0, r3
 804043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8040440:	fa21 f303 	lsr.w	r3, r1, r3
 8040444:	4091      	lsls	r1, r2
 8040446:	4301      	orrs	r1, r0
 8040448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804044c:	fa1f fe8c 	uxth.w	lr, ip
 8040450:	fbb3 f0f7 	udiv	r0, r3, r7
 8040454:	fb07 3610 	mls	r6, r7, r0, r3
 8040458:	0c0b      	lsrs	r3, r1, #16
 804045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804045e:	fb00 f60e 	mul.w	r6, r0, lr
 8040462:	429e      	cmp	r6, r3
 8040464:	fa04 f402 	lsl.w	r4, r4, r2
 8040468:	d908      	bls.n	804047c <__udivmoddi4+0x260>
 804046a:	eb1c 0303 	adds.w	r3, ip, r3
 804046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8040472:	d22f      	bcs.n	80404d4 <__udivmoddi4+0x2b8>
 8040474:	429e      	cmp	r6, r3
 8040476:	d92d      	bls.n	80404d4 <__udivmoddi4+0x2b8>
 8040478:	3802      	subs	r0, #2
 804047a:	4463      	add	r3, ip
 804047c:	1b9b      	subs	r3, r3, r6
 804047e:	b289      	uxth	r1, r1
 8040480:	fbb3 f6f7 	udiv	r6, r3, r7
 8040484:	fb07 3316 	mls	r3, r7, r6, r3
 8040488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804048c:	fb06 f30e 	mul.w	r3, r6, lr
 8040490:	428b      	cmp	r3, r1
 8040492:	d908      	bls.n	80404a6 <__udivmoddi4+0x28a>
 8040494:	eb1c 0101 	adds.w	r1, ip, r1
 8040498:	f106 38ff 	add.w	r8, r6, #4294967295
 804049c:	d216      	bcs.n	80404cc <__udivmoddi4+0x2b0>
 804049e:	428b      	cmp	r3, r1
 80404a0:	d914      	bls.n	80404cc <__udivmoddi4+0x2b0>
 80404a2:	3e02      	subs	r6, #2
 80404a4:	4461      	add	r1, ip
 80404a6:	1ac9      	subs	r1, r1, r3
 80404a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80404ac:	e738      	b.n	8040320 <__udivmoddi4+0x104>
 80404ae:	462e      	mov	r6, r5
 80404b0:	4628      	mov	r0, r5
 80404b2:	e705      	b.n	80402c0 <__udivmoddi4+0xa4>
 80404b4:	4606      	mov	r6, r0
 80404b6:	e6e3      	b.n	8040280 <__udivmoddi4+0x64>
 80404b8:	4618      	mov	r0, r3
 80404ba:	e6f8      	b.n	80402ae <__udivmoddi4+0x92>
 80404bc:	454b      	cmp	r3, r9
 80404be:	d2a9      	bcs.n	8040414 <__udivmoddi4+0x1f8>
 80404c0:	ebb9 0802 	subs.w	r8, r9, r2
 80404c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80404c8:	3801      	subs	r0, #1
 80404ca:	e7a3      	b.n	8040414 <__udivmoddi4+0x1f8>
 80404cc:	4646      	mov	r6, r8
 80404ce:	e7ea      	b.n	80404a6 <__udivmoddi4+0x28a>
 80404d0:	4620      	mov	r0, r4
 80404d2:	e794      	b.n	80403fe <__udivmoddi4+0x1e2>
 80404d4:	4640      	mov	r0, r8
 80404d6:	e7d1      	b.n	804047c <__udivmoddi4+0x260>
 80404d8:	46d0      	mov	r8, sl
 80404da:	e77b      	b.n	80403d4 <__udivmoddi4+0x1b8>
 80404dc:	3b02      	subs	r3, #2
 80404de:	4461      	add	r1, ip
 80404e0:	e732      	b.n	8040348 <__udivmoddi4+0x12c>
 80404e2:	4630      	mov	r0, r6
 80404e4:	e709      	b.n	80402fa <__udivmoddi4+0xde>
 80404e6:	4464      	add	r4, ip
 80404e8:	3802      	subs	r0, #2
 80404ea:	e742      	b.n	8040372 <__udivmoddi4+0x156>

080404ec <__aeabi_idiv0>:
 80404ec:	4770      	bx	lr
 80404ee:	bf00      	nop

080404f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80404f0:	b580      	push	{r7, lr}
 80404f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80404f4:	f001 f86a 	bl	80415cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80404f8:	f000 f82e 	bl	8040558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80404fc:	f000 fa9e 	bl	8040a3c <MX_GPIO_Init>
  MX_CRC_Init();
 8040500:	f000 f896 	bl	8040630 <MX_CRC_Init>
  MX_DMA2D_Init();
 8040504:	f000 f8a8 	bl	8040658 <MX_DMA2D_Init>
  MX_FMC_Init();
 8040508:	f000 fa48 	bl	804099c <MX_FMC_Init>
  MX_I2C3_Init();
 804050c:	f000 f8d6 	bl	80406bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8040510:	f000 f914 	bl	804073c <MX_LTDC_Init>
  MX_SPI5_Init();
 8040514:	f000 f992 	bl	804083c <MX_SPI5_Init>
  MX_TIM1_Init();
 8040518:	f000 f9c6 	bl	80408a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 804051c:	f000 fa14 	bl	8040948 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8040520:	f008 fdc0 	bl	80490a4 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8040524:	f008 fde4 	bl	80490f0 <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8040528:	2201      	movs	r2, #1
 804052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804052e:	4809      	ldr	r0, [pc, #36]	; (8040554 <main+0x64>)
 8040530:	f001 fd48 	bl	8041fc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8040534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8040538:	f001 f88a 	bl	8041650 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 804053c:	2200      	movs	r2, #0
 804053e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040542:	4804      	ldr	r0, [pc, #16]	; (8040554 <main+0x64>)
 8040544:	f001 fd3e 	bl	8041fc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8040548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804054c:	f001 f880 	bl	8041650 <HAL_Delay>
    MX_USB_HOST_Process();
 8040550:	e7e8      	b.n	8040524 <main+0x34>
 8040552:	bf00      	nop
 8040554:	40021800 	.word	0x40021800

08040558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040558:	b580      	push	{r7, lr}
 804055a:	b094      	sub	sp, #80	; 0x50
 804055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804055e:	f107 0320 	add.w	r3, r7, #32
 8040562:	2230      	movs	r2, #48	; 0x30
 8040564:	2100      	movs	r1, #0
 8040566:	4618      	mov	r0, r3
 8040568:	f009 f8e4 	bl	8049734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804056c:	f107 030c 	add.w	r3, r7, #12
 8040570:	2200      	movs	r2, #0
 8040572:	601a      	str	r2, [r3, #0]
 8040574:	605a      	str	r2, [r3, #4]
 8040576:	609a      	str	r2, [r3, #8]
 8040578:	60da      	str	r2, [r3, #12]
 804057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804057c:	2300      	movs	r3, #0
 804057e:	60bb      	str	r3, [r7, #8]
 8040580:	4b29      	ldr	r3, [pc, #164]	; (8040628 <SystemClock_Config+0xd0>)
 8040582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040584:	4a28      	ldr	r2, [pc, #160]	; (8040628 <SystemClock_Config+0xd0>)
 8040586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804058a:	6413      	str	r3, [r2, #64]	; 0x40
 804058c:	4b26      	ldr	r3, [pc, #152]	; (8040628 <SystemClock_Config+0xd0>)
 804058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040594:	60bb      	str	r3, [r7, #8]
 8040596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040598:	2300      	movs	r3, #0
 804059a:	607b      	str	r3, [r7, #4]
 804059c:	4b23      	ldr	r3, [pc, #140]	; (804062c <SystemClock_Config+0xd4>)
 804059e:	681b      	ldr	r3, [r3, #0]
 80405a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80405a4:	4a21      	ldr	r2, [pc, #132]	; (804062c <SystemClock_Config+0xd4>)
 80405a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80405aa:	6013      	str	r3, [r2, #0]
 80405ac:	4b1f      	ldr	r3, [pc, #124]	; (804062c <SystemClock_Config+0xd4>)
 80405ae:	681b      	ldr	r3, [r3, #0]
 80405b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80405b4:	607b      	str	r3, [r7, #4]
 80405b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80405b8:	2301      	movs	r3, #1
 80405ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80405bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80405c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80405c2:	2302      	movs	r3, #2
 80405c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80405c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80405ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80405cc:	2310      	movs	r3, #16
 80405ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80405d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80405d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80405d6:	2302      	movs	r3, #2
 80405d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80405da:	2307      	movs	r3, #7
 80405dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80405de:	f107 0320 	add.w	r3, r7, #32
 80405e2:	4618      	mov	r0, r3
 80405e4:	f003 fe3a 	bl	804425c <HAL_RCC_OscConfig>
 80405e8:	4603      	mov	r3, r0
 80405ea:	2b00      	cmp	r3, #0
 80405ec:	d001      	beq.n	80405f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80405ee:	f000 fb47 	bl	8040c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80405f2:	230f      	movs	r3, #15
 80405f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80405f6:	2302      	movs	r3, #2
 80405f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80405fa:	2300      	movs	r3, #0
 80405fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80405fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8040604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 804060a:	f107 030c 	add.w	r3, r7, #12
 804060e:	2102      	movs	r1, #2
 8040610:	4618      	mov	r0, r3
 8040612:	f004 f89b 	bl	804474c <HAL_RCC_ClockConfig>
 8040616:	4603      	mov	r3, r0
 8040618:	2b00      	cmp	r3, #0
 804061a:	d001      	beq.n	8040620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 804061c:	f000 fb30 	bl	8040c80 <Error_Handler>
  }
}
 8040620:	bf00      	nop
 8040622:	3750      	adds	r7, #80	; 0x50
 8040624:	46bd      	mov	sp, r7
 8040626:	bd80      	pop	{r7, pc}
 8040628:	40023800 	.word	0x40023800
 804062c:	40007000 	.word	0x40007000

08040630 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040630:	b580      	push	{r7, lr}
 8040632:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040634:	4b06      	ldr	r3, [pc, #24]	; (8040650 <MX_CRC_Init+0x20>)
 8040636:	4a07      	ldr	r2, [pc, #28]	; (8040654 <MX_CRC_Init+0x24>)
 8040638:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 804063a:	4805      	ldr	r0, [pc, #20]	; (8040650 <MX_CRC_Init+0x20>)
 804063c:	f001 f90e 	bl	804185c <HAL_CRC_Init>
 8040640:	4603      	mov	r3, r0
 8040642:	2b00      	cmp	r3, #0
 8040644:	d001      	beq.n	804064a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8040646:	f000 fb1b 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 804064a:	bf00      	nop
 804064c:	bd80      	pop	{r7, pc}
 804064e:	bf00      	nop
 8040650:	200000ac 	.word	0x200000ac
 8040654:	40023000 	.word	0x40023000

08040658 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8040658:	b580      	push	{r7, lr}
 804065a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 804065c:	4b15      	ldr	r3, [pc, #84]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 804065e:	4a16      	ldr	r2, [pc, #88]	; (80406b8 <MX_DMA2D_Init+0x60>)
 8040660:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8040662:	4b14      	ldr	r3, [pc, #80]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 8040664:	2200      	movs	r2, #0
 8040666:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8040668:	4b12      	ldr	r3, [pc, #72]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 804066a:	2200      	movs	r2, #0
 804066c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 804066e:	4b11      	ldr	r3, [pc, #68]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 8040670:	2200      	movs	r2, #0
 8040672:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040674:	4b0f      	ldr	r3, [pc, #60]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 8040676:	2200      	movs	r2, #0
 8040678:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 804067a:	4b0e      	ldr	r3, [pc, #56]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 804067c:	2200      	movs	r2, #0
 804067e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040680:	4b0c      	ldr	r3, [pc, #48]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 8040682:	2200      	movs	r2, #0
 8040684:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8040686:	4b0b      	ldr	r3, [pc, #44]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 8040688:	2200      	movs	r2, #0
 804068a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 804068c:	4809      	ldr	r0, [pc, #36]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 804068e:	f001 f901 	bl	8041894 <HAL_DMA2D_Init>
 8040692:	4603      	mov	r3, r0
 8040694:	2b00      	cmp	r3, #0
 8040696:	d001      	beq.n	804069c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040698:	f000 faf2 	bl	8040c80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 804069c:	2101      	movs	r1, #1
 804069e:	4805      	ldr	r0, [pc, #20]	; (80406b4 <MX_DMA2D_Init+0x5c>)
 80406a0:	f001 fa52 	bl	8041b48 <HAL_DMA2D_ConfigLayer>
 80406a4:	4603      	mov	r3, r0
 80406a6:	2b00      	cmp	r3, #0
 80406a8:	d001      	beq.n	80406ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80406aa:	f000 fae9 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80406ae:	bf00      	nop
 80406b0:	bd80      	pop	{r7, pc}
 80406b2:	bf00      	nop
 80406b4:	200000b4 	.word	0x200000b4
 80406b8:	4002b000 	.word	0x4002b000

080406bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80406bc:	b580      	push	{r7, lr}
 80406be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80406c0:	4b1b      	ldr	r3, [pc, #108]	; (8040730 <MX_I2C3_Init+0x74>)
 80406c2:	4a1c      	ldr	r2, [pc, #112]	; (8040734 <MX_I2C3_Init+0x78>)
 80406c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80406c6:	4b1a      	ldr	r3, [pc, #104]	; (8040730 <MX_I2C3_Init+0x74>)
 80406c8:	4a1b      	ldr	r2, [pc, #108]	; (8040738 <MX_I2C3_Init+0x7c>)
 80406ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80406cc:	4b18      	ldr	r3, [pc, #96]	; (8040730 <MX_I2C3_Init+0x74>)
 80406ce:	2200      	movs	r2, #0
 80406d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80406d2:	4b17      	ldr	r3, [pc, #92]	; (8040730 <MX_I2C3_Init+0x74>)
 80406d4:	2200      	movs	r2, #0
 80406d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80406d8:	4b15      	ldr	r3, [pc, #84]	; (8040730 <MX_I2C3_Init+0x74>)
 80406da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80406de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80406e0:	4b13      	ldr	r3, [pc, #76]	; (8040730 <MX_I2C3_Init+0x74>)
 80406e2:	2200      	movs	r2, #0
 80406e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80406e6:	4b12      	ldr	r3, [pc, #72]	; (8040730 <MX_I2C3_Init+0x74>)
 80406e8:	2200      	movs	r2, #0
 80406ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80406ec:	4b10      	ldr	r3, [pc, #64]	; (8040730 <MX_I2C3_Init+0x74>)
 80406ee:	2200      	movs	r2, #0
 80406f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80406f2:	4b0f      	ldr	r3, [pc, #60]	; (8040730 <MX_I2C3_Init+0x74>)
 80406f4:	2200      	movs	r2, #0
 80406f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80406f8:	480d      	ldr	r0, [pc, #52]	; (8040730 <MX_I2C3_Init+0x74>)
 80406fa:	f003 f887 	bl	804380c <HAL_I2C_Init>
 80406fe:	4603      	mov	r3, r0
 8040700:	2b00      	cmp	r3, #0
 8040702:	d001      	beq.n	8040708 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8040704:	f000 fabc 	bl	8040c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8040708:	2100      	movs	r1, #0
 804070a:	4809      	ldr	r0, [pc, #36]	; (8040730 <MX_I2C3_Init+0x74>)
 804070c:	f003 f9c2 	bl	8043a94 <HAL_I2CEx_ConfigAnalogFilter>
 8040710:	4603      	mov	r3, r0
 8040712:	2b00      	cmp	r3, #0
 8040714:	d001      	beq.n	804071a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8040716:	f000 fab3 	bl	8040c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 804071a:	2100      	movs	r1, #0
 804071c:	4804      	ldr	r0, [pc, #16]	; (8040730 <MX_I2C3_Init+0x74>)
 804071e:	f003 f9f5 	bl	8043b0c <HAL_I2CEx_ConfigDigitalFilter>
 8040722:	4603      	mov	r3, r0
 8040724:	2b00      	cmp	r3, #0
 8040726:	d001      	beq.n	804072c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8040728:	f000 faaa 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 804072c:	bf00      	nop
 804072e:	bd80      	pop	{r7, pc}
 8040730:	200000f4 	.word	0x200000f4
 8040734:	40005c00 	.word	0x40005c00
 8040738:	000186a0 	.word	0x000186a0

0804073c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 804073c:	b580      	push	{r7, lr}
 804073e:	b08e      	sub	sp, #56	; 0x38
 8040740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8040742:	1d3b      	adds	r3, r7, #4
 8040744:	2234      	movs	r2, #52	; 0x34
 8040746:	2100      	movs	r1, #0
 8040748:	4618      	mov	r0, r3
 804074a:	f008 fff3 	bl	8049734 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 804074e:	4b39      	ldr	r3, [pc, #228]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040750:	4a39      	ldr	r2, [pc, #228]	; (8040838 <MX_LTDC_Init+0xfc>)
 8040752:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8040754:	4b37      	ldr	r3, [pc, #220]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040756:	2200      	movs	r2, #0
 8040758:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804075a:	4b36      	ldr	r3, [pc, #216]	; (8040834 <MX_LTDC_Init+0xf8>)
 804075c:	2200      	movs	r2, #0
 804075e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040760:	4b34      	ldr	r3, [pc, #208]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040762:	2200      	movs	r2, #0
 8040764:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8040766:	4b33      	ldr	r3, [pc, #204]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040768:	2200      	movs	r2, #0
 804076a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 804076c:	4b31      	ldr	r3, [pc, #196]	; (8040834 <MX_LTDC_Init+0xf8>)
 804076e:	2209      	movs	r2, #9
 8040770:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8040772:	4b30      	ldr	r3, [pc, #192]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040774:	2201      	movs	r2, #1
 8040776:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8040778:	4b2e      	ldr	r3, [pc, #184]	; (8040834 <MX_LTDC_Init+0xf8>)
 804077a:	221d      	movs	r2, #29
 804077c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 804077e:	4b2d      	ldr	r3, [pc, #180]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040780:	2203      	movs	r2, #3
 8040782:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8040784:	4b2b      	ldr	r3, [pc, #172]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040786:	f240 120d 	movw	r2, #269	; 0x10d
 804078a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 804078c:	4b29      	ldr	r3, [pc, #164]	; (8040834 <MX_LTDC_Init+0xf8>)
 804078e:	f240 1243 	movw	r2, #323	; 0x143
 8040792:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8040794:	4b27      	ldr	r3, [pc, #156]	; (8040834 <MX_LTDC_Init+0xf8>)
 8040796:	f240 1217 	movw	r2, #279	; 0x117
 804079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 804079c:	4b25      	ldr	r3, [pc, #148]	; (8040834 <MX_LTDC_Init+0xf8>)
 804079e:	f240 1247 	movw	r2, #327	; 0x147
 80407a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80407a4:	4b23      	ldr	r3, [pc, #140]	; (8040834 <MX_LTDC_Init+0xf8>)
 80407a6:	2200      	movs	r2, #0
 80407a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80407ac:	4b21      	ldr	r3, [pc, #132]	; (8040834 <MX_LTDC_Init+0xf8>)
 80407ae:	2200      	movs	r2, #0
 80407b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80407b4:	4b1f      	ldr	r3, [pc, #124]	; (8040834 <MX_LTDC_Init+0xf8>)
 80407b6:	2200      	movs	r2, #0
 80407b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80407bc:	481d      	ldr	r0, [pc, #116]	; (8040834 <MX_LTDC_Init+0xf8>)
 80407be:	f003 f9e5 	bl	8043b8c <HAL_LTDC_Init>
 80407c2:	4603      	mov	r3, r0
 80407c4:	2b00      	cmp	r3, #0
 80407c6:	d001      	beq.n	80407cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80407c8:	f000 fa5a 	bl	8040c80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80407cc:	2300      	movs	r3, #0
 80407ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80407d0:	23f0      	movs	r3, #240	; 0xf0
 80407d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80407d4:	2300      	movs	r3, #0
 80407d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80407d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80407dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80407de:	2302      	movs	r3, #2
 80407e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80407e2:	23ff      	movs	r3, #255	; 0xff
 80407e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80407e6:	2300      	movs	r3, #0
 80407e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80407ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80407ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80407f0:	2307      	movs	r3, #7
 80407f2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80407f4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80407f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80407fa:	23f0      	movs	r3, #240	; 0xf0
 80407fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80407fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8040802:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8040804:	2300      	movs	r3, #0
 8040806:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 804080a:	2300      	movs	r3, #0
 804080c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040810:	2300      	movs	r3, #0
 8040812:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8040816:	1d3b      	adds	r3, r7, #4
 8040818:	2200      	movs	r2, #0
 804081a:	4619      	mov	r1, r3
 804081c:	4805      	ldr	r0, [pc, #20]	; (8040834 <MX_LTDC_Init+0xf8>)
 804081e:	f003 fb47 	bl	8043eb0 <HAL_LTDC_ConfigLayer>
 8040822:	4603      	mov	r3, r0
 8040824:	2b00      	cmp	r3, #0
 8040826:	d001      	beq.n	804082c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040828:	f000 fa2a 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 804082c:	bf00      	nop
 804082e:	3738      	adds	r7, #56	; 0x38
 8040830:	46bd      	mov	sp, r7
 8040832:	bd80      	pop	{r7, pc}
 8040834:	20000148 	.word	0x20000148
 8040838:	40016800 	.word	0x40016800

0804083c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 804083c:	b580      	push	{r7, lr}
 804083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040840:	4b17      	ldr	r3, [pc, #92]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040842:	4a18      	ldr	r2, [pc, #96]	; (80408a4 <MX_SPI5_Init+0x68>)
 8040844:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040846:	4b16      	ldr	r3, [pc, #88]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040848:	f44f 7282 	mov.w	r2, #260	; 0x104
 804084c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 804084e:	4b14      	ldr	r3, [pc, #80]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040850:	2200      	movs	r2, #0
 8040852:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040854:	4b12      	ldr	r3, [pc, #72]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040856:	2200      	movs	r2, #0
 8040858:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 804085a:	4b11      	ldr	r3, [pc, #68]	; (80408a0 <MX_SPI5_Init+0x64>)
 804085c:	2200      	movs	r2, #0
 804085e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040860:	4b0f      	ldr	r3, [pc, #60]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040862:	2200      	movs	r2, #0
 8040864:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040866:	4b0e      	ldr	r3, [pc, #56]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040868:	f44f 7200 	mov.w	r2, #512	; 0x200
 804086c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 804086e:	4b0c      	ldr	r3, [pc, #48]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040870:	2218      	movs	r2, #24
 8040872:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040874:	4b0a      	ldr	r3, [pc, #40]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040876:	2200      	movs	r2, #0
 8040878:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 804087a:	4b09      	ldr	r3, [pc, #36]	; (80408a0 <MX_SPI5_Init+0x64>)
 804087c:	2200      	movs	r2, #0
 804087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040880:	4b07      	ldr	r3, [pc, #28]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040882:	2200      	movs	r2, #0
 8040884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040886:	4b06      	ldr	r3, [pc, #24]	; (80408a0 <MX_SPI5_Init+0x64>)
 8040888:	220a      	movs	r2, #10
 804088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 804088c:	4804      	ldr	r0, [pc, #16]	; (80408a0 <MX_SPI5_Init+0x64>)
 804088e:	f004 fba3 	bl	8044fd8 <HAL_SPI_Init>
 8040892:	4603      	mov	r3, r0
 8040894:	2b00      	cmp	r3, #0
 8040896:	d001      	beq.n	804089c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040898:	f000 f9f2 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 804089c:	bf00      	nop
 804089e:	bd80      	pop	{r7, pc}
 80408a0:	200001f0 	.word	0x200001f0
 80408a4:	40015000 	.word	0x40015000

080408a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80408a8:	b580      	push	{r7, lr}
 80408aa:	b086      	sub	sp, #24
 80408ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80408ae:	f107 0308 	add.w	r3, r7, #8
 80408b2:	2200      	movs	r2, #0
 80408b4:	601a      	str	r2, [r3, #0]
 80408b6:	605a      	str	r2, [r3, #4]
 80408b8:	609a      	str	r2, [r3, #8]
 80408ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80408bc:	463b      	mov	r3, r7
 80408be:	2200      	movs	r2, #0
 80408c0:	601a      	str	r2, [r3, #0]
 80408c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80408c4:	4b1e      	ldr	r3, [pc, #120]	; (8040940 <MX_TIM1_Init+0x98>)
 80408c6:	4a1f      	ldr	r2, [pc, #124]	; (8040944 <MX_TIM1_Init+0x9c>)
 80408c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80408ca:	4b1d      	ldr	r3, [pc, #116]	; (8040940 <MX_TIM1_Init+0x98>)
 80408cc:	2200      	movs	r2, #0
 80408ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80408d0:	4b1b      	ldr	r3, [pc, #108]	; (8040940 <MX_TIM1_Init+0x98>)
 80408d2:	2200      	movs	r2, #0
 80408d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80408d6:	4b1a      	ldr	r3, [pc, #104]	; (8040940 <MX_TIM1_Init+0x98>)
 80408d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80408dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80408de:	4b18      	ldr	r3, [pc, #96]	; (8040940 <MX_TIM1_Init+0x98>)
 80408e0:	2200      	movs	r2, #0
 80408e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80408e4:	4b16      	ldr	r3, [pc, #88]	; (8040940 <MX_TIM1_Init+0x98>)
 80408e6:	2200      	movs	r2, #0
 80408e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80408ea:	4b15      	ldr	r3, [pc, #84]	; (8040940 <MX_TIM1_Init+0x98>)
 80408ec:	2200      	movs	r2, #0
 80408ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80408f0:	4813      	ldr	r0, [pc, #76]	; (8040940 <MX_TIM1_Init+0x98>)
 80408f2:	f004 fbfa 	bl	80450ea <HAL_TIM_Base_Init>
 80408f6:	4603      	mov	r3, r0
 80408f8:	2b00      	cmp	r3, #0
 80408fa:	d001      	beq.n	8040900 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80408fc:	f000 f9c0 	bl	8040c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040906:	f107 0308 	add.w	r3, r7, #8
 804090a:	4619      	mov	r1, r3
 804090c:	480c      	ldr	r0, [pc, #48]	; (8040940 <MX_TIM1_Init+0x98>)
 804090e:	f004 fdb3 	bl	8045478 <HAL_TIM_ConfigClockSource>
 8040912:	4603      	mov	r3, r0
 8040914:	2b00      	cmp	r3, #0
 8040916:	d001      	beq.n	804091c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040918:	f000 f9b2 	bl	8040c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 804091c:	2300      	movs	r3, #0
 804091e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040920:	2300      	movs	r3, #0
 8040922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040924:	463b      	mov	r3, r7
 8040926:	4619      	mov	r1, r3
 8040928:	4805      	ldr	r0, [pc, #20]	; (8040940 <MX_TIM1_Init+0x98>)
 804092a:	f004 ffcf 	bl	80458cc <HAL_TIMEx_MasterConfigSynchronization>
 804092e:	4603      	mov	r3, r0
 8040930:	2b00      	cmp	r3, #0
 8040932:	d001      	beq.n	8040938 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040934:	f000 f9a4 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040938:	bf00      	nop
 804093a:	3718      	adds	r7, #24
 804093c:	46bd      	mov	sp, r7
 804093e:	bd80      	pop	{r7, pc}
 8040940:	20000248 	.word	0x20000248
 8040944:	40010000 	.word	0x40010000

08040948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040948:	b580      	push	{r7, lr}
 804094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 804094c:	4b11      	ldr	r3, [pc, #68]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 804094e:	4a12      	ldr	r2, [pc, #72]	; (8040998 <MX_USART1_UART_Init+0x50>)
 8040950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040952:	4b10      	ldr	r3, [pc, #64]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 8040954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804095a:	4b0e      	ldr	r3, [pc, #56]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 804095c:	2200      	movs	r2, #0
 804095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040960:	4b0c      	ldr	r3, [pc, #48]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 8040962:	2200      	movs	r2, #0
 8040964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040966:	4b0b      	ldr	r3, [pc, #44]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 8040968:	2200      	movs	r2, #0
 804096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 804096c:	4b09      	ldr	r3, [pc, #36]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 804096e:	220c      	movs	r2, #12
 8040970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040972:	4b08      	ldr	r3, [pc, #32]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 8040974:	2200      	movs	r2, #0
 8040976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040978:	4b06      	ldr	r3, [pc, #24]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 804097a:	2200      	movs	r2, #0
 804097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 804097e:	4805      	ldr	r0, [pc, #20]	; (8040994 <MX_USART1_UART_Init+0x4c>)
 8040980:	f005 f834 	bl	80459ec <HAL_UART_Init>
 8040984:	4603      	mov	r3, r0
 8040986:	2b00      	cmp	r3, #0
 8040988:	d001      	beq.n	804098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 804098a:	f000 f979 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 804098e:	bf00      	nop
 8040990:	bd80      	pop	{r7, pc}
 8040992:	bf00      	nop
 8040994:	20000290 	.word	0x20000290
 8040998:	40011000 	.word	0x40011000

0804099c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 804099c:	b580      	push	{r7, lr}
 804099e:	b088      	sub	sp, #32
 80409a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80409a2:	1d3b      	adds	r3, r7, #4
 80409a4:	2200      	movs	r2, #0
 80409a6:	601a      	str	r2, [r3, #0]
 80409a8:	605a      	str	r2, [r3, #4]
 80409aa:	609a      	str	r2, [r3, #8]
 80409ac:	60da      	str	r2, [r3, #12]
 80409ae:	611a      	str	r2, [r3, #16]
 80409b0:	615a      	str	r2, [r3, #20]
 80409b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80409b4:	4b1f      	ldr	r3, [pc, #124]	; (8040a34 <MX_FMC_Init+0x98>)
 80409b6:	4a20      	ldr	r2, [pc, #128]	; (8040a38 <MX_FMC_Init+0x9c>)
 80409b8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80409ba:	4b1e      	ldr	r3, [pc, #120]	; (8040a34 <MX_FMC_Init+0x98>)
 80409bc:	2201      	movs	r2, #1
 80409be:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80409c0:	4b1c      	ldr	r3, [pc, #112]	; (8040a34 <MX_FMC_Init+0x98>)
 80409c2:	2200      	movs	r2, #0
 80409c4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80409c6:	4b1b      	ldr	r3, [pc, #108]	; (8040a34 <MX_FMC_Init+0x98>)
 80409c8:	2204      	movs	r2, #4
 80409ca:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80409cc:	4b19      	ldr	r3, [pc, #100]	; (8040a34 <MX_FMC_Init+0x98>)
 80409ce:	2210      	movs	r2, #16
 80409d0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80409d2:	4b18      	ldr	r3, [pc, #96]	; (8040a34 <MX_FMC_Init+0x98>)
 80409d4:	2240      	movs	r2, #64	; 0x40
 80409d6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80409d8:	4b16      	ldr	r3, [pc, #88]	; (8040a34 <MX_FMC_Init+0x98>)
 80409da:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80409de:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80409e0:	4b14      	ldr	r3, [pc, #80]	; (8040a34 <MX_FMC_Init+0x98>)
 80409e2:	2200      	movs	r2, #0
 80409e4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80409e6:	4b13      	ldr	r3, [pc, #76]	; (8040a34 <MX_FMC_Init+0x98>)
 80409e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80409ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80409ee:	4b11      	ldr	r3, [pc, #68]	; (8040a34 <MX_FMC_Init+0x98>)
 80409f0:	2200      	movs	r2, #0
 80409f2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80409f4:	4b0f      	ldr	r3, [pc, #60]	; (8040a34 <MX_FMC_Init+0x98>)
 80409f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80409fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80409fc:	2302      	movs	r3, #2
 80409fe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040a00:	2307      	movs	r3, #7
 8040a02:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040a04:	2304      	movs	r3, #4
 8040a06:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040a08:	2307      	movs	r3, #7
 8040a0a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040a0c:	2303      	movs	r3, #3
 8040a0e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040a10:	2302      	movs	r3, #2
 8040a12:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040a14:	2302      	movs	r3, #2
 8040a16:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040a18:	1d3b      	adds	r3, r7, #4
 8040a1a:	4619      	mov	r1, r3
 8040a1c:	4805      	ldr	r0, [pc, #20]	; (8040a34 <MX_FMC_Init+0x98>)
 8040a1e:	f004 faa7 	bl	8044f70 <HAL_SDRAM_Init>
 8040a22:	4603      	mov	r3, r0
 8040a24:	2b00      	cmp	r3, #0
 8040a26:	d001      	beq.n	8040a2c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040a28:	f000 f92a 	bl	8040c80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040a2c:	bf00      	nop
 8040a2e:	3720      	adds	r7, #32
 8040a30:	46bd      	mov	sp, r7
 8040a32:	bd80      	pop	{r7, pc}
 8040a34:	200002d4 	.word	0x200002d4
 8040a38:	a0000140 	.word	0xa0000140

08040a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040a3c:	b580      	push	{r7, lr}
 8040a3e:	b08e      	sub	sp, #56	; 0x38
 8040a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040a46:	2200      	movs	r2, #0
 8040a48:	601a      	str	r2, [r3, #0]
 8040a4a:	605a      	str	r2, [r3, #4]
 8040a4c:	609a      	str	r2, [r3, #8]
 8040a4e:	60da      	str	r2, [r3, #12]
 8040a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040a52:	2300      	movs	r3, #0
 8040a54:	623b      	str	r3, [r7, #32]
 8040a56:	4b7b      	ldr	r3, [pc, #492]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a5a:	4a7a      	ldr	r2, [pc, #488]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a5c:	f043 0304 	orr.w	r3, r3, #4
 8040a60:	6313      	str	r3, [r2, #48]	; 0x30
 8040a62:	4b78      	ldr	r3, [pc, #480]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a66:	f003 0304 	and.w	r3, r3, #4
 8040a6a:	623b      	str	r3, [r7, #32]
 8040a6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040a6e:	2300      	movs	r3, #0
 8040a70:	61fb      	str	r3, [r7, #28]
 8040a72:	4b74      	ldr	r3, [pc, #464]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a76:	4a73      	ldr	r2, [pc, #460]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a78:	f043 0320 	orr.w	r3, r3, #32
 8040a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8040a7e:	4b71      	ldr	r3, [pc, #452]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a82:	f003 0320 	and.w	r3, r3, #32
 8040a86:	61fb      	str	r3, [r7, #28]
 8040a88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040a8a:	2300      	movs	r3, #0
 8040a8c:	61bb      	str	r3, [r7, #24]
 8040a8e:	4b6d      	ldr	r3, [pc, #436]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a92:	4a6c      	ldr	r2, [pc, #432]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040a98:	6313      	str	r3, [r2, #48]	; 0x30
 8040a9a:	4b6a      	ldr	r3, [pc, #424]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040aa2:	61bb      	str	r3, [r7, #24]
 8040aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040aa6:	2300      	movs	r3, #0
 8040aa8:	617b      	str	r3, [r7, #20]
 8040aaa:	4b66      	ldr	r3, [pc, #408]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040aae:	4a65      	ldr	r2, [pc, #404]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ab0:	f043 0301 	orr.w	r3, r3, #1
 8040ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8040ab6:	4b63      	ldr	r3, [pc, #396]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040aba:	f003 0301 	and.w	r3, r3, #1
 8040abe:	617b      	str	r3, [r7, #20]
 8040ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040ac2:	2300      	movs	r3, #0
 8040ac4:	613b      	str	r3, [r7, #16]
 8040ac6:	4b5f      	ldr	r3, [pc, #380]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040aca:	4a5e      	ldr	r2, [pc, #376]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040acc:	f043 0302 	orr.w	r3, r3, #2
 8040ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8040ad2:	4b5c      	ldr	r3, [pc, #368]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ad6:	f003 0302 	and.w	r3, r3, #2
 8040ada:	613b      	str	r3, [r7, #16]
 8040adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040ade:	2300      	movs	r3, #0
 8040ae0:	60fb      	str	r3, [r7, #12]
 8040ae2:	4b58      	ldr	r3, [pc, #352]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ae6:	4a57      	ldr	r2, [pc, #348]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040aec:	6313      	str	r3, [r2, #48]	; 0x30
 8040aee:	4b55      	ldr	r3, [pc, #340]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040af6:	60fb      	str	r3, [r7, #12]
 8040af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040afa:	2300      	movs	r3, #0
 8040afc:	60bb      	str	r3, [r7, #8]
 8040afe:	4b51      	ldr	r3, [pc, #324]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b02:	4a50      	ldr	r2, [pc, #320]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b04:	f043 0310 	orr.w	r3, r3, #16
 8040b08:	6313      	str	r3, [r2, #48]	; 0x30
 8040b0a:	4b4e      	ldr	r3, [pc, #312]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b0e:	f003 0310 	and.w	r3, r3, #16
 8040b12:	60bb      	str	r3, [r7, #8]
 8040b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040b16:	2300      	movs	r3, #0
 8040b18:	607b      	str	r3, [r7, #4]
 8040b1a:	4b4a      	ldr	r3, [pc, #296]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b1e:	4a49      	ldr	r2, [pc, #292]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b20:	f043 0308 	orr.w	r3, r3, #8
 8040b24:	6313      	str	r3, [r2, #48]	; 0x30
 8040b26:	4b47      	ldr	r3, [pc, #284]	; (8040c44 <MX_GPIO_Init+0x208>)
 8040b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040b2a:	f003 0308 	and.w	r3, r3, #8
 8040b2e:	607b      	str	r3, [r7, #4]
 8040b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040b32:	2200      	movs	r2, #0
 8040b34:	2116      	movs	r1, #22
 8040b36:	4844      	ldr	r0, [pc, #272]	; (8040c48 <MX_GPIO_Init+0x20c>)
 8040b38:	f001 fa44 	bl	8041fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040b3c:	2200      	movs	r2, #0
 8040b3e:	2180      	movs	r1, #128	; 0x80
 8040b40:	4842      	ldr	r0, [pc, #264]	; (8040c4c <MX_GPIO_Init+0x210>)
 8040b42:	f001 fa3f 	bl	8041fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040b46:	2200      	movs	r2, #0
 8040b48:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040b4c:	4840      	ldr	r0, [pc, #256]	; (8040c50 <MX_GPIO_Init+0x214>)
 8040b4e:	f001 fa39 	bl	8041fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040b52:	2200      	movs	r2, #0
 8040b54:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040b58:	483e      	ldr	r0, [pc, #248]	; (8040c54 <MX_GPIO_Init+0x218>)
 8040b5a:	f001 fa33 	bl	8041fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040b5e:	2316      	movs	r3, #22
 8040b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040b62:	2301      	movs	r3, #1
 8040b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b66:	2300      	movs	r3, #0
 8040b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b6a:	2300      	movs	r3, #0
 8040b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040b72:	4619      	mov	r1, r3
 8040b74:	4834      	ldr	r0, [pc, #208]	; (8040c48 <MX_GPIO_Init+0x20c>)
 8040b76:	f001 f879 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040b7a:	f248 0307 	movw	r3, #32775	; 0x8007
 8040b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040b80:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b86:	2300      	movs	r3, #0
 8040b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040b8e:	4619      	mov	r1, r3
 8040b90:	482e      	ldr	r0, [pc, #184]	; (8040c4c <MX_GPIO_Init+0x210>)
 8040b92:	f001 f86b 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040b96:	2380      	movs	r3, #128	; 0x80
 8040b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040b9a:	2301      	movs	r3, #1
 8040b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b9e:	2300      	movs	r3, #0
 8040ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ba2:	2300      	movs	r3, #0
 8040ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040baa:	4619      	mov	r1, r3
 8040bac:	4827      	ldr	r0, [pc, #156]	; (8040c4c <MX_GPIO_Init+0x210>)
 8040bae:	f001 f85d 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040bb2:	2320      	movs	r3, #32
 8040bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040bb6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bbc:	2300      	movs	r3, #0
 8040bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040bc4:	4619      	mov	r1, r3
 8040bc6:	4820      	ldr	r0, [pc, #128]	; (8040c48 <MX_GPIO_Init+0x20c>)
 8040bc8:	f001 f850 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040bcc:	2304      	movs	r3, #4
 8040bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040bd0:	2300      	movs	r3, #0
 8040bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bd4:	2300      	movs	r3, #0
 8040bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040bdc:	4619      	mov	r1, r3
 8040bde:	481e      	ldr	r0, [pc, #120]	; (8040c58 <MX_GPIO_Init+0x21c>)
 8040be0:	f001 f844 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040bea:	2300      	movs	r3, #0
 8040bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bee:	2300      	movs	r3, #0
 8040bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040bf6:	4619      	mov	r1, r3
 8040bf8:	4815      	ldr	r0, [pc, #84]	; (8040c50 <MX_GPIO_Init+0x214>)
 8040bfa:	f001 f837 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040bfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c04:	2301      	movs	r3, #1
 8040c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c08:	2300      	movs	r3, #0
 8040c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c0c:	2300      	movs	r3, #0
 8040c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c14:	4619      	mov	r1, r3
 8040c16:	480e      	ldr	r0, [pc, #56]	; (8040c50 <MX_GPIO_Init+0x214>)
 8040c18:	f001 f828 	bl	8041c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040c1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c22:	2301      	movs	r3, #1
 8040c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c26:	2300      	movs	r3, #0
 8040c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c2a:	2300      	movs	r3, #0
 8040c2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c32:	4619      	mov	r1, r3
 8040c34:	4807      	ldr	r0, [pc, #28]	; (8040c54 <MX_GPIO_Init+0x218>)
 8040c36:	f001 f819 	bl	8041c6c <HAL_GPIO_Init>

}
 8040c3a:	bf00      	nop
 8040c3c:	3738      	adds	r7, #56	; 0x38
 8040c3e:	46bd      	mov	sp, r7
 8040c40:	bd80      	pop	{r7, pc}
 8040c42:	bf00      	nop
 8040c44:	40023800 	.word	0x40023800
 8040c48:	40020800 	.word	0x40020800
 8040c4c:	40020000 	.word	0x40020000
 8040c50:	40020c00 	.word	0x40020c00
 8040c54:	40021800 	.word	0x40021800
 8040c58:	40020400 	.word	0x40020400

08040c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040c5c:	b580      	push	{r7, lr}
 8040c5e:	b082      	sub	sp, #8
 8040c60:	af00      	add	r7, sp, #0
 8040c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040c64:	687b      	ldr	r3, [r7, #4]
 8040c66:	681b      	ldr	r3, [r3, #0]
 8040c68:	4a04      	ldr	r2, [pc, #16]	; (8040c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040c6a:	4293      	cmp	r3, r2
 8040c6c:	d101      	bne.n	8040c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040c6e:	f000 fccf 	bl	8041610 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040c72:	bf00      	nop
 8040c74:	3708      	adds	r7, #8
 8040c76:	46bd      	mov	sp, r7
 8040c78:	bd80      	pop	{r7, pc}
 8040c7a:	bf00      	nop
 8040c7c:	40001000 	.word	0x40001000

08040c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040c80:	b480      	push	{r7}
 8040c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040c84:	b672      	cpsid	i
}
 8040c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040c88:	e7fe      	b.n	8040c88 <Error_Handler+0x8>
	...

08040c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040c8c:	b480      	push	{r7}
 8040c8e:	b083      	sub	sp, #12
 8040c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040c92:	2300      	movs	r3, #0
 8040c94:	607b      	str	r3, [r7, #4]
 8040c96:	4b10      	ldr	r3, [pc, #64]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040c9a:	4a0f      	ldr	r2, [pc, #60]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8040ca2:	4b0d      	ldr	r3, [pc, #52]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040caa:	607b      	str	r3, [r7, #4]
 8040cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040cae:	2300      	movs	r3, #0
 8040cb0:	603b      	str	r3, [r7, #0]
 8040cb2:	4b09      	ldr	r3, [pc, #36]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040cb6:	4a08      	ldr	r2, [pc, #32]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8040cbe:	4b06      	ldr	r3, [pc, #24]	; (8040cd8 <HAL_MspInit+0x4c>)
 8040cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040cc6:	603b      	str	r3, [r7, #0]
 8040cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040cca:	bf00      	nop
 8040ccc:	370c      	adds	r7, #12
 8040cce:	46bd      	mov	sp, r7
 8040cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cd4:	4770      	bx	lr
 8040cd6:	bf00      	nop
 8040cd8:	40023800 	.word	0x40023800

08040cdc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040cdc:	b480      	push	{r7}
 8040cde:	b085      	sub	sp, #20
 8040ce0:	af00      	add	r7, sp, #0
 8040ce2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040ce4:	687b      	ldr	r3, [r7, #4]
 8040ce6:	681b      	ldr	r3, [r3, #0]
 8040ce8:	4a0b      	ldr	r2, [pc, #44]	; (8040d18 <HAL_CRC_MspInit+0x3c>)
 8040cea:	4293      	cmp	r3, r2
 8040cec:	d10d      	bne.n	8040d0a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040cee:	2300      	movs	r3, #0
 8040cf0:	60fb      	str	r3, [r7, #12]
 8040cf2:	4b0a      	ldr	r3, [pc, #40]	; (8040d1c <HAL_CRC_MspInit+0x40>)
 8040cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf6:	4a09      	ldr	r2, [pc, #36]	; (8040d1c <HAL_CRC_MspInit+0x40>)
 8040cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8040cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfe:	4b07      	ldr	r3, [pc, #28]	; (8040d1c <HAL_CRC_MspInit+0x40>)
 8040d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040d06:	60fb      	str	r3, [r7, #12]
 8040d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8040d0a:	bf00      	nop
 8040d0c:	3714      	adds	r7, #20
 8040d0e:	46bd      	mov	sp, r7
 8040d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d14:	4770      	bx	lr
 8040d16:	bf00      	nop
 8040d18:	40023000 	.word	0x40023000
 8040d1c:	40023800 	.word	0x40023800

08040d20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8040d20:	b580      	push	{r7, lr}
 8040d22:	b084      	sub	sp, #16
 8040d24:	af00      	add	r7, sp, #0
 8040d26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8040d28:	687b      	ldr	r3, [r7, #4]
 8040d2a:	681b      	ldr	r3, [r3, #0]
 8040d2c:	4a0e      	ldr	r2, [pc, #56]	; (8040d68 <HAL_DMA2D_MspInit+0x48>)
 8040d2e:	4293      	cmp	r3, r2
 8040d30:	d115      	bne.n	8040d5e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8040d32:	2300      	movs	r3, #0
 8040d34:	60fb      	str	r3, [r7, #12]
 8040d36:	4b0d      	ldr	r3, [pc, #52]	; (8040d6c <HAL_DMA2D_MspInit+0x4c>)
 8040d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d3a:	4a0c      	ldr	r2, [pc, #48]	; (8040d6c <HAL_DMA2D_MspInit+0x4c>)
 8040d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040d40:	6313      	str	r3, [r2, #48]	; 0x30
 8040d42:	4b0a      	ldr	r3, [pc, #40]	; (8040d6c <HAL_DMA2D_MspInit+0x4c>)
 8040d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040d4a:	60fb      	str	r3, [r7, #12]
 8040d4c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8040d4e:	2200      	movs	r2, #0
 8040d50:	2105      	movs	r1, #5
 8040d52:	205a      	movs	r0, #90	; 0x5a
 8040d54:	f000 fd58 	bl	8041808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8040d58:	205a      	movs	r0, #90	; 0x5a
 8040d5a:	f000 fd71 	bl	8041840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8040d5e:	bf00      	nop
 8040d60:	3710      	adds	r7, #16
 8040d62:	46bd      	mov	sp, r7
 8040d64:	bd80      	pop	{r7, pc}
 8040d66:	bf00      	nop
 8040d68:	4002b000 	.word	0x4002b000
 8040d6c:	40023800 	.word	0x40023800

08040d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8040d70:	b580      	push	{r7, lr}
 8040d72:	b08a      	sub	sp, #40	; 0x28
 8040d74:	af00      	add	r7, sp, #0
 8040d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040d78:	f107 0314 	add.w	r3, r7, #20
 8040d7c:	2200      	movs	r2, #0
 8040d7e:	601a      	str	r2, [r3, #0]
 8040d80:	605a      	str	r2, [r3, #4]
 8040d82:	609a      	str	r2, [r3, #8]
 8040d84:	60da      	str	r2, [r3, #12]
 8040d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8040d88:	687b      	ldr	r3, [r7, #4]
 8040d8a:	681b      	ldr	r3, [r3, #0]
 8040d8c:	4a29      	ldr	r2, [pc, #164]	; (8040e34 <HAL_I2C_MspInit+0xc4>)
 8040d8e:	4293      	cmp	r3, r2
 8040d90:	d14b      	bne.n	8040e2a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040d92:	2300      	movs	r3, #0
 8040d94:	613b      	str	r3, [r7, #16]
 8040d96:	4b28      	ldr	r3, [pc, #160]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d9a:	4a27      	ldr	r2, [pc, #156]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040d9c:	f043 0304 	orr.w	r3, r3, #4
 8040da0:	6313      	str	r3, [r2, #48]	; 0x30
 8040da2:	4b25      	ldr	r3, [pc, #148]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040da6:	f003 0304 	and.w	r3, r3, #4
 8040daa:	613b      	str	r3, [r7, #16]
 8040dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040dae:	2300      	movs	r3, #0
 8040db0:	60fb      	str	r3, [r7, #12]
 8040db2:	4b21      	ldr	r3, [pc, #132]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040db6:	4a20      	ldr	r2, [pc, #128]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040db8:	f043 0301 	orr.w	r3, r3, #1
 8040dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8040dbe:	4b1e      	ldr	r3, [pc, #120]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040dc2:	f003 0301 	and.w	r3, r3, #1
 8040dc6:	60fb      	str	r3, [r7, #12]
 8040dc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8040dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040dd0:	2312      	movs	r3, #18
 8040dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040dd4:	2301      	movs	r3, #1
 8040dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040dd8:	2300      	movs	r3, #0
 8040dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8040ddc:	2304      	movs	r3, #4
 8040dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8040de0:	f107 0314 	add.w	r3, r7, #20
 8040de4:	4619      	mov	r1, r3
 8040de6:	4815      	ldr	r0, [pc, #84]	; (8040e3c <HAL_I2C_MspInit+0xcc>)
 8040de8:	f000 ff40 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8040dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040df2:	2312      	movs	r3, #18
 8040df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040df6:	2301      	movs	r3, #1
 8040df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040dfa:	2300      	movs	r3, #0
 8040dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8040dfe:	2304      	movs	r3, #4
 8040e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8040e02:	f107 0314 	add.w	r3, r7, #20
 8040e06:	4619      	mov	r1, r3
 8040e08:	480d      	ldr	r0, [pc, #52]	; (8040e40 <HAL_I2C_MspInit+0xd0>)
 8040e0a:	f000 ff2f 	bl	8041c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8040e0e:	2300      	movs	r3, #0
 8040e10:	60bb      	str	r3, [r7, #8]
 8040e12:	4b09      	ldr	r3, [pc, #36]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e16:	4a08      	ldr	r2, [pc, #32]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8040e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8040e1e:	4b06      	ldr	r3, [pc, #24]	; (8040e38 <HAL_I2C_MspInit+0xc8>)
 8040e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8040e26:	60bb      	str	r3, [r7, #8]
 8040e28:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8040e2a:	bf00      	nop
 8040e2c:	3728      	adds	r7, #40	; 0x28
 8040e2e:	46bd      	mov	sp, r7
 8040e30:	bd80      	pop	{r7, pc}
 8040e32:	bf00      	nop
 8040e34:	40005c00 	.word	0x40005c00
 8040e38:	40023800 	.word	0x40023800
 8040e3c:	40020800 	.word	0x40020800
 8040e40:	40020000 	.word	0x40020000

08040e44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8040e44:	b580      	push	{r7, lr}
 8040e46:	b09a      	sub	sp, #104	; 0x68
 8040e48:	af00      	add	r7, sp, #0
 8040e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040e50:	2200      	movs	r2, #0
 8040e52:	601a      	str	r2, [r3, #0]
 8040e54:	605a      	str	r2, [r3, #4]
 8040e56:	609a      	str	r2, [r3, #8]
 8040e58:	60da      	str	r2, [r3, #12]
 8040e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e60:	2230      	movs	r2, #48	; 0x30
 8040e62:	2100      	movs	r1, #0
 8040e64:	4618      	mov	r0, r3
 8040e66:	f008 fc65 	bl	8049734 <memset>
  if(hltdc->Instance==LTDC)
 8040e6a:	687b      	ldr	r3, [r7, #4]
 8040e6c:	681b      	ldr	r3, [r3, #0]
 8040e6e:	4a85      	ldr	r2, [pc, #532]	; (8041084 <HAL_LTDC_MspInit+0x240>)
 8040e70:	4293      	cmp	r3, r2
 8040e72:	f040 8102 	bne.w	804107a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8040e76:	2308      	movs	r3, #8
 8040e78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8040e7a:	2331      	movs	r3, #49	; 0x31
 8040e7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8040e7e:	2302      	movs	r3, #2
 8040e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8040e82:	2300      	movs	r3, #0
 8040e84:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e8a:	4618      	mov	r0, r3
 8040e8c:	f003 feb0 	bl	8044bf0 <HAL_RCCEx_PeriphCLKConfig>
 8040e90:	4603      	mov	r3, r0
 8040e92:	2b00      	cmp	r3, #0
 8040e94:	d001      	beq.n	8040e9a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8040e96:	f7ff fef3 	bl	8040c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8040e9a:	2300      	movs	r3, #0
 8040e9c:	623b      	str	r3, [r7, #32]
 8040e9e:	4b7a      	ldr	r3, [pc, #488]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040ea2:	4a79      	ldr	r2, [pc, #484]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8040ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8040eaa:	4b77      	ldr	r3, [pc, #476]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8040eb2:	623b      	str	r3, [r7, #32]
 8040eb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8040eb6:	2300      	movs	r3, #0
 8040eb8:	61fb      	str	r3, [r7, #28]
 8040eba:	4b73      	ldr	r3, [pc, #460]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ebe:	4a72      	ldr	r2, [pc, #456]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ec0:	f043 0320 	orr.w	r3, r3, #32
 8040ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8040ec6:	4b70      	ldr	r3, [pc, #448]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040eca:	f003 0320 	and.w	r3, r3, #32
 8040ece:	61fb      	str	r3, [r7, #28]
 8040ed0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040ed2:	2300      	movs	r3, #0
 8040ed4:	61bb      	str	r3, [r7, #24]
 8040ed6:	4b6c      	ldr	r3, [pc, #432]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040eda:	4a6b      	ldr	r2, [pc, #428]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040edc:	f043 0301 	orr.w	r3, r3, #1
 8040ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8040ee2:	4b69      	ldr	r3, [pc, #420]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ee6:	f003 0301 	and.w	r3, r3, #1
 8040eea:	61bb      	str	r3, [r7, #24]
 8040eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040eee:	2300      	movs	r3, #0
 8040ef0:	617b      	str	r3, [r7, #20]
 8040ef2:	4b65      	ldr	r3, [pc, #404]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ef6:	4a64      	ldr	r2, [pc, #400]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040ef8:	f043 0302 	orr.w	r3, r3, #2
 8040efc:	6313      	str	r3, [r2, #48]	; 0x30
 8040efe:	4b62      	ldr	r3, [pc, #392]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f02:	f003 0302 	and.w	r3, r3, #2
 8040f06:	617b      	str	r3, [r7, #20]
 8040f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8040f0a:	2300      	movs	r3, #0
 8040f0c:	613b      	str	r3, [r7, #16]
 8040f0e:	4b5e      	ldr	r3, [pc, #376]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f12:	4a5d      	ldr	r2, [pc, #372]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040f18:	6313      	str	r3, [r2, #48]	; 0x30
 8040f1a:	4b5b      	ldr	r3, [pc, #364]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040f22:	613b      	str	r3, [r7, #16]
 8040f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040f26:	2300      	movs	r3, #0
 8040f28:	60fb      	str	r3, [r7, #12]
 8040f2a:	4b57      	ldr	r3, [pc, #348]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f2e:	4a56      	ldr	r2, [pc, #344]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f30:	f043 0304 	orr.w	r3, r3, #4
 8040f34:	6313      	str	r3, [r2, #48]	; 0x30
 8040f36:	4b54      	ldr	r3, [pc, #336]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f3a:	f003 0304 	and.w	r3, r3, #4
 8040f3e:	60fb      	str	r3, [r7, #12]
 8040f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8040f42:	2300      	movs	r3, #0
 8040f44:	60bb      	str	r3, [r7, #8]
 8040f46:	4b50      	ldr	r3, [pc, #320]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f4a:	4a4f      	ldr	r2, [pc, #316]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f4c:	f043 0308 	orr.w	r3, r3, #8
 8040f50:	6313      	str	r3, [r2, #48]	; 0x30
 8040f52:	4b4d      	ldr	r3, [pc, #308]	; (8041088 <HAL_LTDC_MspInit+0x244>)
 8040f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040f56:	f003 0308 	and.w	r3, r3, #8
 8040f5a:	60bb      	str	r3, [r7, #8]
 8040f5c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8040f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8040f62:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040f64:	2302      	movs	r3, #2
 8040f66:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f68:	2300      	movs	r3, #0
 8040f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f6c:	2300      	movs	r3, #0
 8040f6e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8040f70:	230e      	movs	r3, #14
 8040f72:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8040f74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040f78:	4619      	mov	r1, r3
 8040f7a:	4844      	ldr	r0, [pc, #272]	; (804108c <HAL_LTDC_MspInit+0x248>)
 8040f7c:	f000 fe76 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8040f80:	f641 0358 	movw	r3, #6232	; 0x1858
 8040f84:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040f86:	2302      	movs	r3, #2
 8040f88:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f8a:	2300      	movs	r3, #0
 8040f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f8e:	2300      	movs	r3, #0
 8040f90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8040f92:	230e      	movs	r3, #14
 8040f94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040f9a:	4619      	mov	r1, r3
 8040f9c:	483c      	ldr	r0, [pc, #240]	; (8041090 <HAL_LTDC_MspInit+0x24c>)
 8040f9e:	f000 fe65 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8040fa2:	2303      	movs	r3, #3
 8040fa4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040fa6:	2302      	movs	r3, #2
 8040fa8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040faa:	2300      	movs	r3, #0
 8040fac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040fae:	2300      	movs	r3, #0
 8040fb0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8040fb2:	2309      	movs	r3, #9
 8040fb4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040fb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040fba:	4619      	mov	r1, r3
 8040fbc:	4835      	ldr	r0, [pc, #212]	; (8041094 <HAL_LTDC_MspInit+0x250>)
 8040fbe:	f000 fe55 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8040fc2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8040fc6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040fc8:	2302      	movs	r3, #2
 8040fca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040fcc:	2300      	movs	r3, #0
 8040fce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040fd0:	2300      	movs	r3, #0
 8040fd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8040fd4:	230e      	movs	r3, #14
 8040fd6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040fd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040fdc:	4619      	mov	r1, r3
 8040fde:	482d      	ldr	r0, [pc, #180]	; (8041094 <HAL_LTDC_MspInit+0x250>)
 8040fe0:	f000 fe44 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8040fe4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8040fe8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040fea:	2302      	movs	r3, #2
 8040fec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040fee:	2300      	movs	r3, #0
 8040ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ff2:	2300      	movs	r3, #0
 8040ff4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8040ff6:	230e      	movs	r3, #14
 8040ff8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040ffe:	4619      	mov	r1, r3
 8041000:	4825      	ldr	r0, [pc, #148]	; (8041098 <HAL_LTDC_MspInit+0x254>)
 8041002:	f000 fe33 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8041006:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804100a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804100c:	2302      	movs	r3, #2
 804100e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041010:	2300      	movs	r3, #0
 8041012:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041014:	2300      	movs	r3, #0
 8041016:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041018:	230e      	movs	r3, #14
 804101a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804101c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041020:	4619      	mov	r1, r3
 8041022:	481e      	ldr	r0, [pc, #120]	; (804109c <HAL_LTDC_MspInit+0x258>)
 8041024:	f000 fe22 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8041028:	2348      	movs	r3, #72	; 0x48
 804102a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804102c:	2302      	movs	r3, #2
 804102e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041030:	2300      	movs	r3, #0
 8041032:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041034:	2300      	movs	r3, #0
 8041036:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041038:	230e      	movs	r3, #14
 804103a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804103c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041040:	4619      	mov	r1, r3
 8041042:	4817      	ldr	r0, [pc, #92]	; (80410a0 <HAL_LTDC_MspInit+0x25c>)
 8041044:	f000 fe12 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8041048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804104c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804104e:	2302      	movs	r3, #2
 8041050:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041052:	2300      	movs	r3, #0
 8041054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041056:	2300      	movs	r3, #0
 8041058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 804105a:	2309      	movs	r3, #9
 804105c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804105e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041062:	4619      	mov	r1, r3
 8041064:	480c      	ldr	r0, [pc, #48]	; (8041098 <HAL_LTDC_MspInit+0x254>)
 8041066:	f000 fe01 	bl	8041c6c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 804106a:	2200      	movs	r2, #0
 804106c:	2105      	movs	r1, #5
 804106e:	2058      	movs	r0, #88	; 0x58
 8041070:	f000 fbca 	bl	8041808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8041074:	2058      	movs	r0, #88	; 0x58
 8041076:	f000 fbe3 	bl	8041840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 804107a:	bf00      	nop
 804107c:	3768      	adds	r7, #104	; 0x68
 804107e:	46bd      	mov	sp, r7
 8041080:	bd80      	pop	{r7, pc}
 8041082:	bf00      	nop
 8041084:	40016800 	.word	0x40016800
 8041088:	40023800 	.word	0x40023800
 804108c:	40021400 	.word	0x40021400
 8041090:	40020000 	.word	0x40020000
 8041094:	40020400 	.word	0x40020400
 8041098:	40021800 	.word	0x40021800
 804109c:	40020800 	.word	0x40020800
 80410a0:	40020c00 	.word	0x40020c00

080410a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80410a4:	b580      	push	{r7, lr}
 80410a6:	b08a      	sub	sp, #40	; 0x28
 80410a8:	af00      	add	r7, sp, #0
 80410aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80410ac:	f107 0314 	add.w	r3, r7, #20
 80410b0:	2200      	movs	r2, #0
 80410b2:	601a      	str	r2, [r3, #0]
 80410b4:	605a      	str	r2, [r3, #4]
 80410b6:	609a      	str	r2, [r3, #8]
 80410b8:	60da      	str	r2, [r3, #12]
 80410ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80410bc:	687b      	ldr	r3, [r7, #4]
 80410be:	681b      	ldr	r3, [r3, #0]
 80410c0:	4a19      	ldr	r2, [pc, #100]	; (8041128 <HAL_SPI_MspInit+0x84>)
 80410c2:	4293      	cmp	r3, r2
 80410c4:	d12c      	bne.n	8041120 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80410c6:	2300      	movs	r3, #0
 80410c8:	613b      	str	r3, [r7, #16]
 80410ca:	4b18      	ldr	r3, [pc, #96]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80410ce:	4a17      	ldr	r2, [pc, #92]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80410d4:	6453      	str	r3, [r2, #68]	; 0x44
 80410d6:	4b15      	ldr	r3, [pc, #84]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80410da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80410de:	613b      	str	r3, [r7, #16]
 80410e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80410e2:	2300      	movs	r3, #0
 80410e4:	60fb      	str	r3, [r7, #12]
 80410e6:	4b11      	ldr	r3, [pc, #68]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410ea:	4a10      	ldr	r2, [pc, #64]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410ec:	f043 0320 	orr.w	r3, r3, #32
 80410f0:	6313      	str	r3, [r2, #48]	; 0x30
 80410f2:	4b0e      	ldr	r3, [pc, #56]	; (804112c <HAL_SPI_MspInit+0x88>)
 80410f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410f6:	f003 0320 	and.w	r3, r3, #32
 80410fa:	60fb      	str	r3, [r7, #12]
 80410fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80410fe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041104:	2302      	movs	r3, #2
 8041106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041108:	2300      	movs	r3, #0
 804110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804110c:	2300      	movs	r3, #0
 804110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8041110:	2305      	movs	r3, #5
 8041112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041114:	f107 0314 	add.w	r3, r7, #20
 8041118:	4619      	mov	r1, r3
 804111a:	4805      	ldr	r0, [pc, #20]	; (8041130 <HAL_SPI_MspInit+0x8c>)
 804111c:	f000 fda6 	bl	8041c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8041120:	bf00      	nop
 8041122:	3728      	adds	r7, #40	; 0x28
 8041124:	46bd      	mov	sp, r7
 8041126:	bd80      	pop	{r7, pc}
 8041128:	40015000 	.word	0x40015000
 804112c:	40023800 	.word	0x40023800
 8041130:	40021400 	.word	0x40021400

08041134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041134:	b480      	push	{r7}
 8041136:	b085      	sub	sp, #20
 8041138:	af00      	add	r7, sp, #0
 804113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 804113c:	687b      	ldr	r3, [r7, #4]
 804113e:	681b      	ldr	r3, [r3, #0]
 8041140:	4a0b      	ldr	r2, [pc, #44]	; (8041170 <HAL_TIM_Base_MspInit+0x3c>)
 8041142:	4293      	cmp	r3, r2
 8041144:	d10d      	bne.n	8041162 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041146:	2300      	movs	r3, #0
 8041148:	60fb      	str	r3, [r7, #12]
 804114a:	4b0a      	ldr	r3, [pc, #40]	; (8041174 <HAL_TIM_Base_MspInit+0x40>)
 804114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804114e:	4a09      	ldr	r2, [pc, #36]	; (8041174 <HAL_TIM_Base_MspInit+0x40>)
 8041150:	f043 0301 	orr.w	r3, r3, #1
 8041154:	6453      	str	r3, [r2, #68]	; 0x44
 8041156:	4b07      	ldr	r3, [pc, #28]	; (8041174 <HAL_TIM_Base_MspInit+0x40>)
 8041158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804115a:	f003 0301 	and.w	r3, r3, #1
 804115e:	60fb      	str	r3, [r7, #12]
 8041160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8041162:	bf00      	nop
 8041164:	3714      	adds	r7, #20
 8041166:	46bd      	mov	sp, r7
 8041168:	f85d 7b04 	ldr.w	r7, [sp], #4
 804116c:	4770      	bx	lr
 804116e:	bf00      	nop
 8041170:	40010000 	.word	0x40010000
 8041174:	40023800 	.word	0x40023800

08041178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041178:	b580      	push	{r7, lr}
 804117a:	b08a      	sub	sp, #40	; 0x28
 804117c:	af00      	add	r7, sp, #0
 804117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041180:	f107 0314 	add.w	r3, r7, #20
 8041184:	2200      	movs	r2, #0
 8041186:	601a      	str	r2, [r3, #0]
 8041188:	605a      	str	r2, [r3, #4]
 804118a:	609a      	str	r2, [r3, #8]
 804118c:	60da      	str	r2, [r3, #12]
 804118e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8041190:	687b      	ldr	r3, [r7, #4]
 8041192:	681b      	ldr	r3, [r3, #0]
 8041194:	4a19      	ldr	r2, [pc, #100]	; (80411fc <HAL_UART_MspInit+0x84>)
 8041196:	4293      	cmp	r3, r2
 8041198:	d12c      	bne.n	80411f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 804119a:	2300      	movs	r3, #0
 804119c:	613b      	str	r3, [r7, #16]
 804119e:	4b18      	ldr	r3, [pc, #96]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80411a2:	4a17      	ldr	r2, [pc, #92]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411a4:	f043 0310 	orr.w	r3, r3, #16
 80411a8:	6453      	str	r3, [r2, #68]	; 0x44
 80411aa:	4b15      	ldr	r3, [pc, #84]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80411ae:	f003 0310 	and.w	r3, r3, #16
 80411b2:	613b      	str	r3, [r7, #16]
 80411b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80411b6:	2300      	movs	r3, #0
 80411b8:	60fb      	str	r3, [r7, #12]
 80411ba:	4b11      	ldr	r3, [pc, #68]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411be:	4a10      	ldr	r2, [pc, #64]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411c0:	f043 0301 	orr.w	r3, r3, #1
 80411c4:	6313      	str	r3, [r2, #48]	; 0x30
 80411c6:	4b0e      	ldr	r3, [pc, #56]	; (8041200 <HAL_UART_MspInit+0x88>)
 80411c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80411ca:	f003 0301 	and.w	r3, r3, #1
 80411ce:	60fb      	str	r3, [r7, #12]
 80411d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80411d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80411d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411d8:	2302      	movs	r3, #2
 80411da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411dc:	2300      	movs	r3, #0
 80411de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80411e0:	2303      	movs	r3, #3
 80411e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80411e4:	2307      	movs	r3, #7
 80411e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80411e8:	f107 0314 	add.w	r3, r7, #20
 80411ec:	4619      	mov	r1, r3
 80411ee:	4805      	ldr	r0, [pc, #20]	; (8041204 <HAL_UART_MspInit+0x8c>)
 80411f0:	f000 fd3c 	bl	8041c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80411f4:	bf00      	nop
 80411f6:	3728      	adds	r7, #40	; 0x28
 80411f8:	46bd      	mov	sp, r7
 80411fa:	bd80      	pop	{r7, pc}
 80411fc:	40011000 	.word	0x40011000
 8041200:	40023800 	.word	0x40023800
 8041204:	40020000 	.word	0x40020000

08041208 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8041208:	b580      	push	{r7, lr}
 804120a:	b086      	sub	sp, #24
 804120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 804120e:	1d3b      	adds	r3, r7, #4
 8041210:	2200      	movs	r2, #0
 8041212:	601a      	str	r2, [r3, #0]
 8041214:	605a      	str	r2, [r3, #4]
 8041216:	609a      	str	r2, [r3, #8]
 8041218:	60da      	str	r2, [r3, #12]
 804121a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 804121c:	4b3b      	ldr	r3, [pc, #236]	; (804130c <HAL_FMC_MspInit+0x104>)
 804121e:	681b      	ldr	r3, [r3, #0]
 8041220:	2b00      	cmp	r3, #0
 8041222:	d16f      	bne.n	8041304 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8041224:	4b39      	ldr	r3, [pc, #228]	; (804130c <HAL_FMC_MspInit+0x104>)
 8041226:	2201      	movs	r2, #1
 8041228:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 804122a:	2300      	movs	r3, #0
 804122c:	603b      	str	r3, [r7, #0]
 804122e:	4b38      	ldr	r3, [pc, #224]	; (8041310 <HAL_FMC_MspInit+0x108>)
 8041230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041232:	4a37      	ldr	r2, [pc, #220]	; (8041310 <HAL_FMC_MspInit+0x108>)
 8041234:	f043 0301 	orr.w	r3, r3, #1
 8041238:	6393      	str	r3, [r2, #56]	; 0x38
 804123a:	4b35      	ldr	r3, [pc, #212]	; (8041310 <HAL_FMC_MspInit+0x108>)
 804123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804123e:	f003 0301 	and.w	r3, r3, #1
 8041242:	603b      	str	r3, [r7, #0]
 8041244:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8041246:	f64f 033f 	movw	r3, #63551	; 0xf83f
 804124a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804124c:	2302      	movs	r3, #2
 804124e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041250:	2300      	movs	r3, #0
 8041252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041254:	2303      	movs	r3, #3
 8041256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041258:	230c      	movs	r3, #12
 804125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 804125c:	1d3b      	adds	r3, r7, #4
 804125e:	4619      	mov	r1, r3
 8041260:	482c      	ldr	r0, [pc, #176]	; (8041314 <HAL_FMC_MspInit+0x10c>)
 8041262:	f000 fd03 	bl	8041c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8041266:	2301      	movs	r3, #1
 8041268:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804126a:	2302      	movs	r3, #2
 804126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804126e:	2300      	movs	r3, #0
 8041270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041272:	2303      	movs	r3, #3
 8041274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041276:	230c      	movs	r3, #12
 8041278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 804127a:	1d3b      	adds	r3, r7, #4
 804127c:	4619      	mov	r1, r3
 804127e:	4826      	ldr	r0, [pc, #152]	; (8041318 <HAL_FMC_MspInit+0x110>)
 8041280:	f000 fcf4 	bl	8041c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041284:	f248 1333 	movw	r3, #33075	; 0x8133
 8041288:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804128a:	2302      	movs	r3, #2
 804128c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804128e:	2300      	movs	r3, #0
 8041290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041292:	2303      	movs	r3, #3
 8041294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041296:	230c      	movs	r3, #12
 8041298:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804129a:	1d3b      	adds	r3, r7, #4
 804129c:	4619      	mov	r1, r3
 804129e:	481f      	ldr	r0, [pc, #124]	; (804131c <HAL_FMC_MspInit+0x114>)
 80412a0:	f000 fce4 	bl	8041c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80412a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80412a8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412aa:	2302      	movs	r3, #2
 80412ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412ae:	2300      	movs	r3, #0
 80412b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80412b2:	2303      	movs	r3, #3
 80412b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80412b6:	230c      	movs	r3, #12
 80412b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80412ba:	1d3b      	adds	r3, r7, #4
 80412bc:	4619      	mov	r1, r3
 80412be:	4818      	ldr	r0, [pc, #96]	; (8041320 <HAL_FMC_MspInit+0x118>)
 80412c0:	f000 fcd4 	bl	8041c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80412c4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80412c8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412ca:	2302      	movs	r3, #2
 80412cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412ce:	2300      	movs	r3, #0
 80412d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80412d2:	2303      	movs	r3, #3
 80412d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80412d6:	230c      	movs	r3, #12
 80412d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80412da:	1d3b      	adds	r3, r7, #4
 80412dc:	4619      	mov	r1, r3
 80412de:	4811      	ldr	r0, [pc, #68]	; (8041324 <HAL_FMC_MspInit+0x11c>)
 80412e0:	f000 fcc4 	bl	8041c6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80412e4:	2360      	movs	r3, #96	; 0x60
 80412e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80412e8:	2302      	movs	r3, #2
 80412ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80412ec:	2300      	movs	r3, #0
 80412ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80412f0:	2303      	movs	r3, #3
 80412f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80412f4:	230c      	movs	r3, #12
 80412f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80412f8:	1d3b      	adds	r3, r7, #4
 80412fa:	4619      	mov	r1, r3
 80412fc:	480a      	ldr	r0, [pc, #40]	; (8041328 <HAL_FMC_MspInit+0x120>)
 80412fe:	f000 fcb5 	bl	8041c6c <HAL_GPIO_Init>
 8041302:	e000      	b.n	8041306 <HAL_FMC_MspInit+0xfe>
    return;
 8041304:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8041306:	3718      	adds	r7, #24
 8041308:	46bd      	mov	sp, r7
 804130a:	bd80      	pop	{r7, pc}
 804130c:	20000308 	.word	0x20000308
 8041310:	40023800 	.word	0x40023800
 8041314:	40021400 	.word	0x40021400
 8041318:	40020800 	.word	0x40020800
 804131c:	40021800 	.word	0x40021800
 8041320:	40021000 	.word	0x40021000
 8041324:	40020c00 	.word	0x40020c00
 8041328:	40020400 	.word	0x40020400

0804132c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 804132c:	b580      	push	{r7, lr}
 804132e:	b082      	sub	sp, #8
 8041330:	af00      	add	r7, sp, #0
 8041332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8041334:	f7ff ff68 	bl	8041208 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8041338:	bf00      	nop
 804133a:	3708      	adds	r7, #8
 804133c:	46bd      	mov	sp, r7
 804133e:	bd80      	pop	{r7, pc}

08041340 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041340:	b580      	push	{r7, lr}
 8041342:	b08e      	sub	sp, #56	; 0x38
 8041344:	af00      	add	r7, sp, #0
 8041346:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041348:	2300      	movs	r3, #0
 804134a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 804134c:	2300      	movs	r3, #0
 804134e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041350:	2300      	movs	r3, #0
 8041352:	60fb      	str	r3, [r7, #12]
 8041354:	4b33      	ldr	r3, [pc, #204]	; (8041424 <HAL_InitTick+0xe4>)
 8041356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041358:	4a32      	ldr	r2, [pc, #200]	; (8041424 <HAL_InitTick+0xe4>)
 804135a:	f043 0310 	orr.w	r3, r3, #16
 804135e:	6413      	str	r3, [r2, #64]	; 0x40
 8041360:	4b30      	ldr	r3, [pc, #192]	; (8041424 <HAL_InitTick+0xe4>)
 8041362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041364:	f003 0310 	and.w	r3, r3, #16
 8041368:	60fb      	str	r3, [r7, #12]
 804136a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 804136c:	f107 0210 	add.w	r2, r7, #16
 8041370:	f107 0314 	add.w	r3, r7, #20
 8041374:	4611      	mov	r1, r2
 8041376:	4618      	mov	r0, r3
 8041378:	f003 fc08 	bl	8044b8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 804137c:	6a3b      	ldr	r3, [r7, #32]
 804137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041382:	2b00      	cmp	r3, #0
 8041384:	d103      	bne.n	804138e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041386:	f003 fbd9 	bl	8044b3c <HAL_RCC_GetPCLK1Freq>
 804138a:	6378      	str	r0, [r7, #52]	; 0x34
 804138c:	e004      	b.n	8041398 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 804138e:	f003 fbd5 	bl	8044b3c <HAL_RCC_GetPCLK1Freq>
 8041392:	4603      	mov	r3, r0
 8041394:	005b      	lsls	r3, r3, #1
 8041396:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804139a:	4a23      	ldr	r2, [pc, #140]	; (8041428 <HAL_InitTick+0xe8>)
 804139c:	fba2 2303 	umull	r2, r3, r2, r3
 80413a0:	0c9b      	lsrs	r3, r3, #18
 80413a2:	3b01      	subs	r3, #1
 80413a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80413a6:	4b21      	ldr	r3, [pc, #132]	; (804142c <HAL_InitTick+0xec>)
 80413a8:	4a21      	ldr	r2, [pc, #132]	; (8041430 <HAL_InitTick+0xf0>)
 80413aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80413ac:	4b1f      	ldr	r3, [pc, #124]	; (804142c <HAL_InitTick+0xec>)
 80413ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80413b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80413b4:	4a1d      	ldr	r2, [pc, #116]	; (804142c <HAL_InitTick+0xec>)
 80413b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80413b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80413ba:	4b1c      	ldr	r3, [pc, #112]	; (804142c <HAL_InitTick+0xec>)
 80413bc:	2200      	movs	r2, #0
 80413be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80413c0:	4b1a      	ldr	r3, [pc, #104]	; (804142c <HAL_InitTick+0xec>)
 80413c2:	2200      	movs	r2, #0
 80413c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80413c6:	4b19      	ldr	r3, [pc, #100]	; (804142c <HAL_InitTick+0xec>)
 80413c8:	2200      	movs	r2, #0
 80413ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80413cc:	4817      	ldr	r0, [pc, #92]	; (804142c <HAL_InitTick+0xec>)
 80413ce:	f003 fe8c 	bl	80450ea <HAL_TIM_Base_Init>
 80413d2:	4603      	mov	r3, r0
 80413d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80413d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80413dc:	2b00      	cmp	r3, #0
 80413de:	d11b      	bne.n	8041418 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80413e0:	4812      	ldr	r0, [pc, #72]	; (804142c <HAL_InitTick+0xec>)
 80413e2:	f003 fed1 	bl	8045188 <HAL_TIM_Base_Start_IT>
 80413e6:	4603      	mov	r3, r0
 80413e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80413ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80413f0:	2b00      	cmp	r3, #0
 80413f2:	d111      	bne.n	8041418 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80413f4:	2036      	movs	r0, #54	; 0x36
 80413f6:	f000 fa23 	bl	8041840 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80413fa:	687b      	ldr	r3, [r7, #4]
 80413fc:	2b0f      	cmp	r3, #15
 80413fe:	d808      	bhi.n	8041412 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041400:	2200      	movs	r2, #0
 8041402:	6879      	ldr	r1, [r7, #4]
 8041404:	2036      	movs	r0, #54	; 0x36
 8041406:	f000 f9ff 	bl	8041808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 804140a:	4a0a      	ldr	r2, [pc, #40]	; (8041434 <HAL_InitTick+0xf4>)
 804140c:	687b      	ldr	r3, [r7, #4]
 804140e:	6013      	str	r3, [r2, #0]
 8041410:	e002      	b.n	8041418 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8041412:	2301      	movs	r3, #1
 8041414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 804141c:	4618      	mov	r0, r3
 804141e:	3738      	adds	r7, #56	; 0x38
 8041420:	46bd      	mov	sp, r7
 8041422:	bd80      	pop	{r7, pc}
 8041424:	40023800 	.word	0x40023800
 8041428:	431bde83 	.word	0x431bde83
 804142c:	2000030c 	.word	0x2000030c
 8041430:	40001000 	.word	0x40001000
 8041434:	20000004 	.word	0x20000004

08041438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041438:	b480      	push	{r7}
 804143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 804143c:	e7fe      	b.n	804143c <NMI_Handler+0x4>

0804143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804143e:	b480      	push	{r7}
 8041440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041442:	e7fe      	b.n	8041442 <HardFault_Handler+0x4>

08041444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041444:	b480      	push	{r7}
 8041446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041448:	e7fe      	b.n	8041448 <MemManage_Handler+0x4>

0804144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804144a:	b480      	push	{r7}
 804144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804144e:	e7fe      	b.n	804144e <BusFault_Handler+0x4>

08041450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041450:	b480      	push	{r7}
 8041452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041454:	e7fe      	b.n	8041454 <UsageFault_Handler+0x4>

08041456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041456:	b480      	push	{r7}
 8041458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804145a:	bf00      	nop
 804145c:	46bd      	mov	sp, r7
 804145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041462:	4770      	bx	lr

08041464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041464:	b480      	push	{r7}
 8041466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041468:	bf00      	nop
 804146a:	46bd      	mov	sp, r7
 804146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041470:	4770      	bx	lr

08041472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041472:	b480      	push	{r7}
 8041474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041476:	bf00      	nop
 8041478:	46bd      	mov	sp, r7
 804147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804147e:	4770      	bx	lr

08041480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041480:	b480      	push	{r7}
 8041482:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041484:	bf00      	nop
 8041486:	46bd      	mov	sp, r7
 8041488:	f85d 7b04 	ldr.w	r7, [sp], #4
 804148c:	4770      	bx	lr
	...

08041490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041490:	b580      	push	{r7, lr}
 8041492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041494:	4802      	ldr	r0, [pc, #8]	; (80414a0 <TIM6_DAC_IRQHandler+0x10>)
 8041496:	f003 fee7 	bl	8045268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 804149a:	bf00      	nop
 804149c:	bd80      	pop	{r7, pc}
 804149e:	bf00      	nop
 80414a0:	2000030c 	.word	0x2000030c

080414a4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80414a4:	b580      	push	{r7, lr}
 80414a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80414a8:	4802      	ldr	r0, [pc, #8]	; (80414b4 <OTG_HS_IRQHandler+0x10>)
 80414aa:	f001 f80f 	bl	80424cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80414ae:	bf00      	nop
 80414b0:	bd80      	pop	{r7, pc}
 80414b2:	bf00      	nop
 80414b4:	20000738 	.word	0x20000738

080414b8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80414b8:	b580      	push	{r7, lr}
 80414ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80414bc:	4802      	ldr	r0, [pc, #8]	; (80414c8 <LTDC_IRQHandler+0x10>)
 80414be:	f002 fc35 	bl	8043d2c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80414c2:	bf00      	nop
 80414c4:	bd80      	pop	{r7, pc}
 80414c6:	bf00      	nop
 80414c8:	20000148 	.word	0x20000148

080414cc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80414cc:	b580      	push	{r7, lr}
 80414ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80414d0:	4802      	ldr	r0, [pc, #8]	; (80414dc <DMA2D_IRQHandler+0x10>)
 80414d2:	f000 fa28 	bl	8041926 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80414d6:	bf00      	nop
 80414d8:	bd80      	pop	{r7, pc}
 80414da:	bf00      	nop
 80414dc:	200000b4 	.word	0x200000b4

080414e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80414e0:	b580      	push	{r7, lr}
 80414e2:	b086      	sub	sp, #24
 80414e4:	af00      	add	r7, sp, #0
 80414e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80414e8:	4a14      	ldr	r2, [pc, #80]	; (804153c <_sbrk+0x5c>)
 80414ea:	4b15      	ldr	r3, [pc, #84]	; (8041540 <_sbrk+0x60>)
 80414ec:	1ad3      	subs	r3, r2, r3
 80414ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80414f0:	697b      	ldr	r3, [r7, #20]
 80414f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80414f4:	4b13      	ldr	r3, [pc, #76]	; (8041544 <_sbrk+0x64>)
 80414f6:	681b      	ldr	r3, [r3, #0]
 80414f8:	2b00      	cmp	r3, #0
 80414fa:	d102      	bne.n	8041502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80414fc:	4b11      	ldr	r3, [pc, #68]	; (8041544 <_sbrk+0x64>)
 80414fe:	4a12      	ldr	r2, [pc, #72]	; (8041548 <_sbrk+0x68>)
 8041500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8041502:	4b10      	ldr	r3, [pc, #64]	; (8041544 <_sbrk+0x64>)
 8041504:	681a      	ldr	r2, [r3, #0]
 8041506:	687b      	ldr	r3, [r7, #4]
 8041508:	4413      	add	r3, r2
 804150a:	693a      	ldr	r2, [r7, #16]
 804150c:	429a      	cmp	r2, r3
 804150e:	d207      	bcs.n	8041520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041510:	f008 f8d6 	bl	80496c0 <__errno>
 8041514:	4603      	mov	r3, r0
 8041516:	220c      	movs	r2, #12
 8041518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 804151a:	f04f 33ff 	mov.w	r3, #4294967295
 804151e:	e009      	b.n	8041534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041520:	4b08      	ldr	r3, [pc, #32]	; (8041544 <_sbrk+0x64>)
 8041522:	681b      	ldr	r3, [r3, #0]
 8041524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041526:	4b07      	ldr	r3, [pc, #28]	; (8041544 <_sbrk+0x64>)
 8041528:	681a      	ldr	r2, [r3, #0]
 804152a:	687b      	ldr	r3, [r7, #4]
 804152c:	4413      	add	r3, r2
 804152e:	4a05      	ldr	r2, [pc, #20]	; (8041544 <_sbrk+0x64>)
 8041530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041532:	68fb      	ldr	r3, [r7, #12]
}
 8041534:	4618      	mov	r0, r3
 8041536:	3718      	adds	r7, #24
 8041538:	46bd      	mov	sp, r7
 804153a:	bd80      	pop	{r7, pc}
 804153c:	20030000 	.word	0x20030000
 8041540:	00000400 	.word	0x00000400
 8041544:	20000354 	.word	0x20000354
 8041548:	20000a50 	.word	0x20000a50

0804154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 804154c:	b480      	push	{r7}
 804154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041550:	4b07      	ldr	r3, [pc, #28]	; (8041570 <SystemInit+0x24>)
 8041552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041556:	4a06      	ldr	r2, [pc, #24]	; (8041570 <SystemInit+0x24>)
 8041558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041560:	4b03      	ldr	r3, [pc, #12]	; (8041570 <SystemInit+0x24>)
 8041562:	4a04      	ldr	r2, [pc, #16]	; (8041574 <SystemInit+0x28>)
 8041564:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041566:	bf00      	nop
 8041568:	46bd      	mov	sp, r7
 804156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804156e:	4770      	bx	lr
 8041570:	e000ed00 	.word	0xe000ed00
 8041574:	08040000 	.word	0x08040000

08041578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8041578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80415b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 804157c:	480d      	ldr	r0, [pc, #52]	; (80415b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 804157e:	490e      	ldr	r1, [pc, #56]	; (80415b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041580:	4a0e      	ldr	r2, [pc, #56]	; (80415bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041584:	e002      	b.n	804158c <LoopCopyDataInit>

08041586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804158a:	3304      	adds	r3, #4

0804158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 804158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 804158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041590:	d3f9      	bcc.n	8041586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041592:	4a0b      	ldr	r2, [pc, #44]	; (80415c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041594:	4c0b      	ldr	r4, [pc, #44]	; (80415c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041598:	e001      	b.n	804159e <LoopFillZerobss>

0804159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 804159c:	3204      	adds	r2, #4

0804159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 804159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80415a0:	d3fb      	bcc.n	804159a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80415a2:	f7ff ffd3 	bl	804154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80415a6:	f008 f891 	bl	80496cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80415aa:	f7fe ffa1 	bl	80404f0 <main>
  bx  lr    
 80415ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80415b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80415b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80415b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80415bc:	08049984 	.word	0x08049984
  ldr r2, =_sbss
 80415c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80415c4:	20000a4c 	.word	0x20000a4c

080415c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80415c8:	e7fe      	b.n	80415c8 <ADC_IRQHandler>
	...

080415cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80415cc:	b580      	push	{r7, lr}
 80415ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80415d0:	4b0e      	ldr	r3, [pc, #56]	; (804160c <HAL_Init+0x40>)
 80415d2:	681b      	ldr	r3, [r3, #0]
 80415d4:	4a0d      	ldr	r2, [pc, #52]	; (804160c <HAL_Init+0x40>)
 80415d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80415da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80415dc:	4b0b      	ldr	r3, [pc, #44]	; (804160c <HAL_Init+0x40>)
 80415de:	681b      	ldr	r3, [r3, #0]
 80415e0:	4a0a      	ldr	r2, [pc, #40]	; (804160c <HAL_Init+0x40>)
 80415e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80415e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80415e8:	4b08      	ldr	r3, [pc, #32]	; (804160c <HAL_Init+0x40>)
 80415ea:	681b      	ldr	r3, [r3, #0]
 80415ec:	4a07      	ldr	r2, [pc, #28]	; (804160c <HAL_Init+0x40>)
 80415ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80415f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80415f4:	2003      	movs	r0, #3
 80415f6:	f000 f8fc 	bl	80417f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80415fa:	200f      	movs	r0, #15
 80415fc:	f7ff fea0 	bl	8041340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8041600:	f7ff fb44 	bl	8040c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8041604:	2300      	movs	r3, #0
}
 8041606:	4618      	mov	r0, r3
 8041608:	bd80      	pop	{r7, pc}
 804160a:	bf00      	nop
 804160c:	40023c00 	.word	0x40023c00

08041610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041610:	b480      	push	{r7}
 8041612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8041614:	4b06      	ldr	r3, [pc, #24]	; (8041630 <HAL_IncTick+0x20>)
 8041616:	781b      	ldrb	r3, [r3, #0]
 8041618:	461a      	mov	r2, r3
 804161a:	4b06      	ldr	r3, [pc, #24]	; (8041634 <HAL_IncTick+0x24>)
 804161c:	681b      	ldr	r3, [r3, #0]
 804161e:	4413      	add	r3, r2
 8041620:	4a04      	ldr	r2, [pc, #16]	; (8041634 <HAL_IncTick+0x24>)
 8041622:	6013      	str	r3, [r2, #0]
}
 8041624:	bf00      	nop
 8041626:	46bd      	mov	sp, r7
 8041628:	f85d 7b04 	ldr.w	r7, [sp], #4
 804162c:	4770      	bx	lr
 804162e:	bf00      	nop
 8041630:	20000008 	.word	0x20000008
 8041634:	20000358 	.word	0x20000358

08041638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8041638:	b480      	push	{r7}
 804163a:	af00      	add	r7, sp, #0
  return uwTick;
 804163c:	4b03      	ldr	r3, [pc, #12]	; (804164c <HAL_GetTick+0x14>)
 804163e:	681b      	ldr	r3, [r3, #0]
}
 8041640:	4618      	mov	r0, r3
 8041642:	46bd      	mov	sp, r7
 8041644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041648:	4770      	bx	lr
 804164a:	bf00      	nop
 804164c:	20000358 	.word	0x20000358

08041650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8041650:	b580      	push	{r7, lr}
 8041652:	b084      	sub	sp, #16
 8041654:	af00      	add	r7, sp, #0
 8041656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8041658:	f7ff ffee 	bl	8041638 <HAL_GetTick>
 804165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804165e:	687b      	ldr	r3, [r7, #4]
 8041660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041662:	68fb      	ldr	r3, [r7, #12]
 8041664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041668:	d005      	beq.n	8041676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804166a:	4b0a      	ldr	r3, [pc, #40]	; (8041694 <HAL_Delay+0x44>)
 804166c:	781b      	ldrb	r3, [r3, #0]
 804166e:	461a      	mov	r2, r3
 8041670:	68fb      	ldr	r3, [r7, #12]
 8041672:	4413      	add	r3, r2
 8041674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8041676:	bf00      	nop
 8041678:	f7ff ffde 	bl	8041638 <HAL_GetTick>
 804167c:	4602      	mov	r2, r0
 804167e:	68bb      	ldr	r3, [r7, #8]
 8041680:	1ad3      	subs	r3, r2, r3
 8041682:	68fa      	ldr	r2, [r7, #12]
 8041684:	429a      	cmp	r2, r3
 8041686:	d8f7      	bhi.n	8041678 <HAL_Delay+0x28>
  {
  }
}
 8041688:	bf00      	nop
 804168a:	bf00      	nop
 804168c:	3710      	adds	r7, #16
 804168e:	46bd      	mov	sp, r7
 8041690:	bd80      	pop	{r7, pc}
 8041692:	bf00      	nop
 8041694:	20000008 	.word	0x20000008

08041698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041698:	b480      	push	{r7}
 804169a:	b085      	sub	sp, #20
 804169c:	af00      	add	r7, sp, #0
 804169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80416a0:	687b      	ldr	r3, [r7, #4]
 80416a2:	f003 0307 	and.w	r3, r3, #7
 80416a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80416a8:	4b0c      	ldr	r3, [pc, #48]	; (80416dc <__NVIC_SetPriorityGrouping+0x44>)
 80416aa:	68db      	ldr	r3, [r3, #12]
 80416ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80416ae:	68ba      	ldr	r2, [r7, #8]
 80416b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80416b4:	4013      	ands	r3, r2
 80416b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80416b8:	68fb      	ldr	r3, [r7, #12]
 80416ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80416bc:	68bb      	ldr	r3, [r7, #8]
 80416be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80416c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80416c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80416c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80416ca:	4a04      	ldr	r2, [pc, #16]	; (80416dc <__NVIC_SetPriorityGrouping+0x44>)
 80416cc:	68bb      	ldr	r3, [r7, #8]
 80416ce:	60d3      	str	r3, [r2, #12]
}
 80416d0:	bf00      	nop
 80416d2:	3714      	adds	r7, #20
 80416d4:	46bd      	mov	sp, r7
 80416d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416da:	4770      	bx	lr
 80416dc:	e000ed00 	.word	0xe000ed00

080416e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80416e0:	b480      	push	{r7}
 80416e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80416e4:	4b04      	ldr	r3, [pc, #16]	; (80416f8 <__NVIC_GetPriorityGrouping+0x18>)
 80416e6:	68db      	ldr	r3, [r3, #12]
 80416e8:	0a1b      	lsrs	r3, r3, #8
 80416ea:	f003 0307 	and.w	r3, r3, #7
}
 80416ee:	4618      	mov	r0, r3
 80416f0:	46bd      	mov	sp, r7
 80416f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416f6:	4770      	bx	lr
 80416f8:	e000ed00 	.word	0xe000ed00

080416fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80416fc:	b480      	push	{r7}
 80416fe:	b083      	sub	sp, #12
 8041700:	af00      	add	r7, sp, #0
 8041702:	4603      	mov	r3, r0
 8041704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804170a:	2b00      	cmp	r3, #0
 804170c:	db0b      	blt.n	8041726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804170e:	79fb      	ldrb	r3, [r7, #7]
 8041710:	f003 021f 	and.w	r2, r3, #31
 8041714:	4907      	ldr	r1, [pc, #28]	; (8041734 <__NVIC_EnableIRQ+0x38>)
 8041716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804171a:	095b      	lsrs	r3, r3, #5
 804171c:	2001      	movs	r0, #1
 804171e:	fa00 f202 	lsl.w	r2, r0, r2
 8041722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8041726:	bf00      	nop
 8041728:	370c      	adds	r7, #12
 804172a:	46bd      	mov	sp, r7
 804172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041730:	4770      	bx	lr
 8041732:	bf00      	nop
 8041734:	e000e100 	.word	0xe000e100

08041738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041738:	b480      	push	{r7}
 804173a:	b083      	sub	sp, #12
 804173c:	af00      	add	r7, sp, #0
 804173e:	4603      	mov	r3, r0
 8041740:	6039      	str	r1, [r7, #0]
 8041742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8041744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041748:	2b00      	cmp	r3, #0
 804174a:	db0a      	blt.n	8041762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804174c:	683b      	ldr	r3, [r7, #0]
 804174e:	b2da      	uxtb	r2, r3
 8041750:	490c      	ldr	r1, [pc, #48]	; (8041784 <__NVIC_SetPriority+0x4c>)
 8041752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041756:	0112      	lsls	r2, r2, #4
 8041758:	b2d2      	uxtb	r2, r2
 804175a:	440b      	add	r3, r1
 804175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041760:	e00a      	b.n	8041778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041762:	683b      	ldr	r3, [r7, #0]
 8041764:	b2da      	uxtb	r2, r3
 8041766:	4908      	ldr	r1, [pc, #32]	; (8041788 <__NVIC_SetPriority+0x50>)
 8041768:	79fb      	ldrb	r3, [r7, #7]
 804176a:	f003 030f 	and.w	r3, r3, #15
 804176e:	3b04      	subs	r3, #4
 8041770:	0112      	lsls	r2, r2, #4
 8041772:	b2d2      	uxtb	r2, r2
 8041774:	440b      	add	r3, r1
 8041776:	761a      	strb	r2, [r3, #24]
}
 8041778:	bf00      	nop
 804177a:	370c      	adds	r7, #12
 804177c:	46bd      	mov	sp, r7
 804177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041782:	4770      	bx	lr
 8041784:	e000e100 	.word	0xe000e100
 8041788:	e000ed00 	.word	0xe000ed00

0804178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804178c:	b480      	push	{r7}
 804178e:	b089      	sub	sp, #36	; 0x24
 8041790:	af00      	add	r7, sp, #0
 8041792:	60f8      	str	r0, [r7, #12]
 8041794:	60b9      	str	r1, [r7, #8]
 8041796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041798:	68fb      	ldr	r3, [r7, #12]
 804179a:	f003 0307 	and.w	r3, r3, #7
 804179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80417a0:	69fb      	ldr	r3, [r7, #28]
 80417a2:	f1c3 0307 	rsb	r3, r3, #7
 80417a6:	2b04      	cmp	r3, #4
 80417a8:	bf28      	it	cs
 80417aa:	2304      	movcs	r3, #4
 80417ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80417ae:	69fb      	ldr	r3, [r7, #28]
 80417b0:	3304      	adds	r3, #4
 80417b2:	2b06      	cmp	r3, #6
 80417b4:	d902      	bls.n	80417bc <NVIC_EncodePriority+0x30>
 80417b6:	69fb      	ldr	r3, [r7, #28]
 80417b8:	3b03      	subs	r3, #3
 80417ba:	e000      	b.n	80417be <NVIC_EncodePriority+0x32>
 80417bc:	2300      	movs	r3, #0
 80417be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80417c0:	f04f 32ff 	mov.w	r2, #4294967295
 80417c4:	69bb      	ldr	r3, [r7, #24]
 80417c6:	fa02 f303 	lsl.w	r3, r2, r3
 80417ca:	43da      	mvns	r2, r3
 80417cc:	68bb      	ldr	r3, [r7, #8]
 80417ce:	401a      	ands	r2, r3
 80417d0:	697b      	ldr	r3, [r7, #20]
 80417d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80417d4:	f04f 31ff 	mov.w	r1, #4294967295
 80417d8:	697b      	ldr	r3, [r7, #20]
 80417da:	fa01 f303 	lsl.w	r3, r1, r3
 80417de:	43d9      	mvns	r1, r3
 80417e0:	687b      	ldr	r3, [r7, #4]
 80417e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80417e4:	4313      	orrs	r3, r2
         );
}
 80417e6:	4618      	mov	r0, r3
 80417e8:	3724      	adds	r7, #36	; 0x24
 80417ea:	46bd      	mov	sp, r7
 80417ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417f0:	4770      	bx	lr

080417f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80417f2:	b580      	push	{r7, lr}
 80417f4:	b082      	sub	sp, #8
 80417f6:	af00      	add	r7, sp, #0
 80417f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80417fa:	6878      	ldr	r0, [r7, #4]
 80417fc:	f7ff ff4c 	bl	8041698 <__NVIC_SetPriorityGrouping>
}
 8041800:	bf00      	nop
 8041802:	3708      	adds	r7, #8
 8041804:	46bd      	mov	sp, r7
 8041806:	bd80      	pop	{r7, pc}

08041808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8041808:	b580      	push	{r7, lr}
 804180a:	b086      	sub	sp, #24
 804180c:	af00      	add	r7, sp, #0
 804180e:	4603      	mov	r3, r0
 8041810:	60b9      	str	r1, [r7, #8]
 8041812:	607a      	str	r2, [r7, #4]
 8041814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8041816:	2300      	movs	r3, #0
 8041818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 804181a:	f7ff ff61 	bl	80416e0 <__NVIC_GetPriorityGrouping>
 804181e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041820:	687a      	ldr	r2, [r7, #4]
 8041822:	68b9      	ldr	r1, [r7, #8]
 8041824:	6978      	ldr	r0, [r7, #20]
 8041826:	f7ff ffb1 	bl	804178c <NVIC_EncodePriority>
 804182a:	4602      	mov	r2, r0
 804182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8041830:	4611      	mov	r1, r2
 8041832:	4618      	mov	r0, r3
 8041834:	f7ff ff80 	bl	8041738 <__NVIC_SetPriority>
}
 8041838:	bf00      	nop
 804183a:	3718      	adds	r7, #24
 804183c:	46bd      	mov	sp, r7
 804183e:	bd80      	pop	{r7, pc}

08041840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041840:	b580      	push	{r7, lr}
 8041842:	b082      	sub	sp, #8
 8041844:	af00      	add	r7, sp, #0
 8041846:	4603      	mov	r3, r0
 8041848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 804184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804184e:	4618      	mov	r0, r3
 8041850:	f7ff ff54 	bl	80416fc <__NVIC_EnableIRQ>
}
 8041854:	bf00      	nop
 8041856:	3708      	adds	r7, #8
 8041858:	46bd      	mov	sp, r7
 804185a:	bd80      	pop	{r7, pc}

0804185c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 804185c:	b580      	push	{r7, lr}
 804185e:	b082      	sub	sp, #8
 8041860:	af00      	add	r7, sp, #0
 8041862:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8041864:	687b      	ldr	r3, [r7, #4]
 8041866:	2b00      	cmp	r3, #0
 8041868:	d101      	bne.n	804186e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804186a:	2301      	movs	r3, #1
 804186c:	e00e      	b.n	804188c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 804186e:	687b      	ldr	r3, [r7, #4]
 8041870:	795b      	ldrb	r3, [r3, #5]
 8041872:	b2db      	uxtb	r3, r3
 8041874:	2b00      	cmp	r3, #0
 8041876:	d105      	bne.n	8041884 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8041878:	687b      	ldr	r3, [r7, #4]
 804187a:	2200      	movs	r2, #0
 804187c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 804187e:	6878      	ldr	r0, [r7, #4]
 8041880:	f7ff fa2c 	bl	8040cdc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8041884:	687b      	ldr	r3, [r7, #4]
 8041886:	2201      	movs	r2, #1
 8041888:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 804188a:	2300      	movs	r3, #0
}
 804188c:	4618      	mov	r0, r3
 804188e:	3708      	adds	r7, #8
 8041890:	46bd      	mov	sp, r7
 8041892:	bd80      	pop	{r7, pc}

08041894 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8041894:	b580      	push	{r7, lr}
 8041896:	b082      	sub	sp, #8
 8041898:	af00      	add	r7, sp, #0
 804189a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 804189c:	687b      	ldr	r3, [r7, #4]
 804189e:	2b00      	cmp	r3, #0
 80418a0:	d101      	bne.n	80418a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80418a2:	2301      	movs	r3, #1
 80418a4:	e03b      	b.n	804191e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80418a6:	687b      	ldr	r3, [r7, #4]
 80418a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80418ac:	b2db      	uxtb	r3, r3
 80418ae:	2b00      	cmp	r3, #0
 80418b0:	d106      	bne.n	80418c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80418b2:	687b      	ldr	r3, [r7, #4]
 80418b4:	2200      	movs	r2, #0
 80418b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80418ba:	6878      	ldr	r0, [r7, #4]
 80418bc:	f7ff fa30 	bl	8040d20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80418c0:	687b      	ldr	r3, [r7, #4]
 80418c2:	2202      	movs	r2, #2
 80418c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80418c8:	687b      	ldr	r3, [r7, #4]
 80418ca:	681b      	ldr	r3, [r3, #0]
 80418cc:	681b      	ldr	r3, [r3, #0]
 80418ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80418d2:	687b      	ldr	r3, [r7, #4]
 80418d4:	685a      	ldr	r2, [r3, #4]
 80418d6:	687b      	ldr	r3, [r7, #4]
 80418d8:	681b      	ldr	r3, [r3, #0]
 80418da:	430a      	orrs	r2, r1
 80418dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80418de:	687b      	ldr	r3, [r7, #4]
 80418e0:	681b      	ldr	r3, [r3, #0]
 80418e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80418e4:	f023 0107 	bic.w	r1, r3, #7
 80418e8:	687b      	ldr	r3, [r7, #4]
 80418ea:	689a      	ldr	r2, [r3, #8]
 80418ec:	687b      	ldr	r3, [r7, #4]
 80418ee:	681b      	ldr	r3, [r3, #0]
 80418f0:	430a      	orrs	r2, r1
 80418f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80418f4:	687b      	ldr	r3, [r7, #4]
 80418f6:	681b      	ldr	r3, [r3, #0]
 80418f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80418fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80418fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8041902:	687a      	ldr	r2, [r7, #4]
 8041904:	68d1      	ldr	r1, [r2, #12]
 8041906:	687a      	ldr	r2, [r7, #4]
 8041908:	6812      	ldr	r2, [r2, #0]
 804190a:	430b      	orrs	r3, r1
 804190c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 804190e:	687b      	ldr	r3, [r7, #4]
 8041910:	2200      	movs	r2, #0
 8041912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8041914:	687b      	ldr	r3, [r7, #4]
 8041916:	2201      	movs	r2, #1
 8041918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 804191c:	2300      	movs	r3, #0
}
 804191e:	4618      	mov	r0, r3
 8041920:	3708      	adds	r7, #8
 8041922:	46bd      	mov	sp, r7
 8041924:	bd80      	pop	{r7, pc}

08041926 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8041926:	b580      	push	{r7, lr}
 8041928:	b084      	sub	sp, #16
 804192a:	af00      	add	r7, sp, #0
 804192c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 804192e:	687b      	ldr	r3, [r7, #4]
 8041930:	681b      	ldr	r3, [r3, #0]
 8041932:	685b      	ldr	r3, [r3, #4]
 8041934:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8041936:	687b      	ldr	r3, [r7, #4]
 8041938:	681b      	ldr	r3, [r3, #0]
 804193a:	681b      	ldr	r3, [r3, #0]
 804193c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 804193e:	68fb      	ldr	r3, [r7, #12]
 8041940:	f003 0301 	and.w	r3, r3, #1
 8041944:	2b00      	cmp	r3, #0
 8041946:	d026      	beq.n	8041996 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8041948:	68bb      	ldr	r3, [r7, #8]
 804194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804194e:	2b00      	cmp	r3, #0
 8041950:	d021      	beq.n	8041996 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8041952:	687b      	ldr	r3, [r7, #4]
 8041954:	681b      	ldr	r3, [r3, #0]
 8041956:	681a      	ldr	r2, [r3, #0]
 8041958:	687b      	ldr	r3, [r7, #4]
 804195a:	681b      	ldr	r3, [r3, #0]
 804195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8041960:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8041962:	687b      	ldr	r3, [r7, #4]
 8041964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041966:	f043 0201 	orr.w	r2, r3, #1
 804196a:	687b      	ldr	r3, [r7, #4]
 804196c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 804196e:	687b      	ldr	r3, [r7, #4]
 8041970:	681b      	ldr	r3, [r3, #0]
 8041972:	2201      	movs	r2, #1
 8041974:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	2204      	movs	r2, #4
 804197a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 804197e:	687b      	ldr	r3, [r7, #4]
 8041980:	2200      	movs	r2, #0
 8041982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8041986:	687b      	ldr	r3, [r7, #4]
 8041988:	695b      	ldr	r3, [r3, #20]
 804198a:	2b00      	cmp	r3, #0
 804198c:	d003      	beq.n	8041996 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 804198e:	687b      	ldr	r3, [r7, #4]
 8041990:	695b      	ldr	r3, [r3, #20]
 8041992:	6878      	ldr	r0, [r7, #4]
 8041994:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8041996:	68fb      	ldr	r3, [r7, #12]
 8041998:	f003 0320 	and.w	r3, r3, #32
 804199c:	2b00      	cmp	r3, #0
 804199e:	d026      	beq.n	80419ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80419a0:	68bb      	ldr	r3, [r7, #8]
 80419a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80419a6:	2b00      	cmp	r3, #0
 80419a8:	d021      	beq.n	80419ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80419aa:	687b      	ldr	r3, [r7, #4]
 80419ac:	681b      	ldr	r3, [r3, #0]
 80419ae:	681a      	ldr	r2, [r3, #0]
 80419b0:	687b      	ldr	r3, [r7, #4]
 80419b2:	681b      	ldr	r3, [r3, #0]
 80419b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80419b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80419ba:	687b      	ldr	r3, [r7, #4]
 80419bc:	681b      	ldr	r3, [r3, #0]
 80419be:	2220      	movs	r2, #32
 80419c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80419c2:	687b      	ldr	r3, [r7, #4]
 80419c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80419c6:	f043 0202 	orr.w	r2, r3, #2
 80419ca:	687b      	ldr	r3, [r7, #4]
 80419cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80419ce:	687b      	ldr	r3, [r7, #4]
 80419d0:	2204      	movs	r2, #4
 80419d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80419d6:	687b      	ldr	r3, [r7, #4]
 80419d8:	2200      	movs	r2, #0
 80419da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80419de:	687b      	ldr	r3, [r7, #4]
 80419e0:	695b      	ldr	r3, [r3, #20]
 80419e2:	2b00      	cmp	r3, #0
 80419e4:	d003      	beq.n	80419ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80419e6:	687b      	ldr	r3, [r7, #4]
 80419e8:	695b      	ldr	r3, [r3, #20]
 80419ea:	6878      	ldr	r0, [r7, #4]
 80419ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80419ee:	68fb      	ldr	r3, [r7, #12]
 80419f0:	f003 0308 	and.w	r3, r3, #8
 80419f4:	2b00      	cmp	r3, #0
 80419f6:	d026      	beq.n	8041a46 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80419f8:	68bb      	ldr	r3, [r7, #8]
 80419fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80419fe:	2b00      	cmp	r3, #0
 8041a00:	d021      	beq.n	8041a46 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8041a02:	687b      	ldr	r3, [r7, #4]
 8041a04:	681b      	ldr	r3, [r3, #0]
 8041a06:	681a      	ldr	r2, [r3, #0]
 8041a08:	687b      	ldr	r3, [r7, #4]
 8041a0a:	681b      	ldr	r3, [r3, #0]
 8041a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8041a10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8041a12:	687b      	ldr	r3, [r7, #4]
 8041a14:	681b      	ldr	r3, [r3, #0]
 8041a16:	2208      	movs	r2, #8
 8041a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8041a1a:	687b      	ldr	r3, [r7, #4]
 8041a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041a1e:	f043 0204 	orr.w	r2, r3, #4
 8041a22:	687b      	ldr	r3, [r7, #4]
 8041a24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8041a26:	687b      	ldr	r3, [r7, #4]
 8041a28:	2204      	movs	r2, #4
 8041a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8041a2e:	687b      	ldr	r3, [r7, #4]
 8041a30:	2200      	movs	r2, #0
 8041a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8041a36:	687b      	ldr	r3, [r7, #4]
 8041a38:	695b      	ldr	r3, [r3, #20]
 8041a3a:	2b00      	cmp	r3, #0
 8041a3c:	d003      	beq.n	8041a46 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	695b      	ldr	r3, [r3, #20]
 8041a42:	6878      	ldr	r0, [r7, #4]
 8041a44:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8041a46:	68fb      	ldr	r3, [r7, #12]
 8041a48:	f003 0304 	and.w	r3, r3, #4
 8041a4c:	2b00      	cmp	r3, #0
 8041a4e:	d013      	beq.n	8041a78 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8041a50:	68bb      	ldr	r3, [r7, #8]
 8041a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041a56:	2b00      	cmp	r3, #0
 8041a58:	d00e      	beq.n	8041a78 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8041a5a:	687b      	ldr	r3, [r7, #4]
 8041a5c:	681b      	ldr	r3, [r3, #0]
 8041a5e:	681a      	ldr	r2, [r3, #0]
 8041a60:	687b      	ldr	r3, [r7, #4]
 8041a62:	681b      	ldr	r3, [r3, #0]
 8041a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8041a68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8041a6a:	687b      	ldr	r3, [r7, #4]
 8041a6c:	681b      	ldr	r3, [r3, #0]
 8041a6e:	2204      	movs	r2, #4
 8041a70:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8041a72:	6878      	ldr	r0, [r7, #4]
 8041a74:	f000 f853 	bl	8041b1e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8041a78:	68fb      	ldr	r3, [r7, #12]
 8041a7a:	f003 0302 	and.w	r3, r3, #2
 8041a7e:	2b00      	cmp	r3, #0
 8041a80:	d024      	beq.n	8041acc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8041a82:	68bb      	ldr	r3, [r7, #8]
 8041a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041a88:	2b00      	cmp	r3, #0
 8041a8a:	d01f      	beq.n	8041acc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8041a8c:	687b      	ldr	r3, [r7, #4]
 8041a8e:	681b      	ldr	r3, [r3, #0]
 8041a90:	681a      	ldr	r2, [r3, #0]
 8041a92:	687b      	ldr	r3, [r7, #4]
 8041a94:	681b      	ldr	r3, [r3, #0]
 8041a96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8041a9a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8041a9c:	687b      	ldr	r3, [r7, #4]
 8041a9e:	681b      	ldr	r3, [r3, #0]
 8041aa0:	2202      	movs	r2, #2
 8041aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8041aa4:	687b      	ldr	r3, [r7, #4]
 8041aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8041aac:	687b      	ldr	r3, [r7, #4]
 8041aae:	2201      	movs	r2, #1
 8041ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8041ab4:	687b      	ldr	r3, [r7, #4]
 8041ab6:	2200      	movs	r2, #0
 8041ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8041abc:	687b      	ldr	r3, [r7, #4]
 8041abe:	691b      	ldr	r3, [r3, #16]
 8041ac0:	2b00      	cmp	r3, #0
 8041ac2:	d003      	beq.n	8041acc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8041ac4:	687b      	ldr	r3, [r7, #4]
 8041ac6:	691b      	ldr	r3, [r3, #16]
 8041ac8:	6878      	ldr	r0, [r7, #4]
 8041aca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8041acc:	68fb      	ldr	r3, [r7, #12]
 8041ace:	f003 0310 	and.w	r3, r3, #16
 8041ad2:	2b00      	cmp	r3, #0
 8041ad4:	d01f      	beq.n	8041b16 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8041ad6:	68bb      	ldr	r3, [r7, #8]
 8041ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041adc:	2b00      	cmp	r3, #0
 8041ade:	d01a      	beq.n	8041b16 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	681a      	ldr	r2, [r3, #0]
 8041ae6:	687b      	ldr	r3, [r7, #4]
 8041ae8:	681b      	ldr	r3, [r3, #0]
 8041aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8041aee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8041af0:	687b      	ldr	r3, [r7, #4]
 8041af2:	681b      	ldr	r3, [r3, #0]
 8041af4:	2210      	movs	r2, #16
 8041af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8041af8:	687b      	ldr	r3, [r7, #4]
 8041afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8041afc:	687b      	ldr	r3, [r7, #4]
 8041afe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8041b00:	687b      	ldr	r3, [r7, #4]
 8041b02:	2201      	movs	r2, #1
 8041b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8041b08:	687b      	ldr	r3, [r7, #4]
 8041b0a:	2200      	movs	r2, #0
 8041b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8041b10:	6878      	ldr	r0, [r7, #4]
 8041b12:	f000 f80e 	bl	8041b32 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8041b16:	bf00      	nop
 8041b18:	3710      	adds	r7, #16
 8041b1a:	46bd      	mov	sp, r7
 8041b1c:	bd80      	pop	{r7, pc}

08041b1e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8041b1e:	b480      	push	{r7}
 8041b20:	b083      	sub	sp, #12
 8041b22:	af00      	add	r7, sp, #0
 8041b24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8041b26:	bf00      	nop
 8041b28:	370c      	adds	r7, #12
 8041b2a:	46bd      	mov	sp, r7
 8041b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b30:	4770      	bx	lr

08041b32 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8041b32:	b480      	push	{r7}
 8041b34:	b083      	sub	sp, #12
 8041b36:	af00      	add	r7, sp, #0
 8041b38:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8041b3a:	bf00      	nop
 8041b3c:	370c      	adds	r7, #12
 8041b3e:	46bd      	mov	sp, r7
 8041b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b44:	4770      	bx	lr
	...

08041b48 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8041b48:	b480      	push	{r7}
 8041b4a:	b087      	sub	sp, #28
 8041b4c:	af00      	add	r7, sp, #0
 8041b4e:	6078      	str	r0, [r7, #4]
 8041b50:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8041b52:	687b      	ldr	r3, [r7, #4]
 8041b54:	685b      	ldr	r3, [r3, #4]
 8041b56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8041b5a:	687b      	ldr	r3, [r7, #4]
 8041b5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8041b60:	2b01      	cmp	r3, #1
 8041b62:	d101      	bne.n	8041b68 <HAL_DMA2D_ConfigLayer+0x20>
 8041b64:	2302      	movs	r3, #2
 8041b66:	e079      	b.n	8041c5c <HAL_DMA2D_ConfigLayer+0x114>
 8041b68:	687b      	ldr	r3, [r7, #4]
 8041b6a:	2201      	movs	r2, #1
 8041b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8041b70:	687b      	ldr	r3, [r7, #4]
 8041b72:	2202      	movs	r2, #2
 8041b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8041b78:	683b      	ldr	r3, [r7, #0]
 8041b7a:	011b      	lsls	r3, r3, #4
 8041b7c:	3318      	adds	r3, #24
 8041b7e:	687a      	ldr	r2, [r7, #4]
 8041b80:	4413      	add	r3, r2
 8041b82:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8041b84:	693b      	ldr	r3, [r7, #16]
 8041b86:	685a      	ldr	r2, [r3, #4]
 8041b88:	693b      	ldr	r3, [r7, #16]
 8041b8a:	689b      	ldr	r3, [r3, #8]
 8041b8c:	041b      	lsls	r3, r3, #16
 8041b8e:	4313      	orrs	r3, r2
 8041b90:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8041b92:	4b35      	ldr	r3, [pc, #212]	; (8041c68 <HAL_DMA2D_ConfigLayer+0x120>)
 8041b94:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041b96:	693b      	ldr	r3, [r7, #16]
 8041b98:	685b      	ldr	r3, [r3, #4]
 8041b9a:	2b0a      	cmp	r3, #10
 8041b9c:	d003      	beq.n	8041ba6 <HAL_DMA2D_ConfigLayer+0x5e>
 8041b9e:	693b      	ldr	r3, [r7, #16]
 8041ba0:	685b      	ldr	r3, [r3, #4]
 8041ba2:	2b09      	cmp	r3, #9
 8041ba4:	d107      	bne.n	8041bb6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8041ba6:	693b      	ldr	r3, [r7, #16]
 8041ba8:	68db      	ldr	r3, [r3, #12]
 8041baa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8041bae:	697a      	ldr	r2, [r7, #20]
 8041bb0:	4313      	orrs	r3, r2
 8041bb2:	617b      	str	r3, [r7, #20]
 8041bb4:	e005      	b.n	8041bc2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8041bb6:	693b      	ldr	r3, [r7, #16]
 8041bb8:	68db      	ldr	r3, [r3, #12]
 8041bba:	061b      	lsls	r3, r3, #24
 8041bbc:	697a      	ldr	r2, [r7, #20]
 8041bbe:	4313      	orrs	r3, r2
 8041bc0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8041bc2:	683b      	ldr	r3, [r7, #0]
 8041bc4:	2b00      	cmp	r3, #0
 8041bc6:	d120      	bne.n	8041c0a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8041bc8:	687b      	ldr	r3, [r7, #4]
 8041bca:	681b      	ldr	r3, [r3, #0]
 8041bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8041bce:	68fb      	ldr	r3, [r7, #12]
 8041bd0:	43db      	mvns	r3, r3
 8041bd2:	ea02 0103 	and.w	r1, r2, r3
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	681b      	ldr	r3, [r3, #0]
 8041bda:	697a      	ldr	r2, [r7, #20]
 8041bdc:	430a      	orrs	r2, r1
 8041bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8041be0:	687b      	ldr	r3, [r7, #4]
 8041be2:	681b      	ldr	r3, [r3, #0]
 8041be4:	693a      	ldr	r2, [r7, #16]
 8041be6:	6812      	ldr	r2, [r2, #0]
 8041be8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041bea:	693b      	ldr	r3, [r7, #16]
 8041bec:	685b      	ldr	r3, [r3, #4]
 8041bee:	2b0a      	cmp	r3, #10
 8041bf0:	d003      	beq.n	8041bfa <HAL_DMA2D_ConfigLayer+0xb2>
 8041bf2:	693b      	ldr	r3, [r7, #16]
 8041bf4:	685b      	ldr	r3, [r3, #4]
 8041bf6:	2b09      	cmp	r3, #9
 8041bf8:	d127      	bne.n	8041c4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8041bfa:	693b      	ldr	r3, [r7, #16]
 8041bfc:	68da      	ldr	r2, [r3, #12]
 8041bfe:	687b      	ldr	r3, [r7, #4]
 8041c00:	681b      	ldr	r3, [r3, #0]
 8041c02:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8041c06:	629a      	str	r2, [r3, #40]	; 0x28
 8041c08:	e01f      	b.n	8041c4a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8041c0a:	687b      	ldr	r3, [r7, #4]
 8041c0c:	681b      	ldr	r3, [r3, #0]
 8041c0e:	69da      	ldr	r2, [r3, #28]
 8041c10:	68fb      	ldr	r3, [r7, #12]
 8041c12:	43db      	mvns	r3, r3
 8041c14:	ea02 0103 	and.w	r1, r2, r3
 8041c18:	687b      	ldr	r3, [r7, #4]
 8041c1a:	681b      	ldr	r3, [r3, #0]
 8041c1c:	697a      	ldr	r2, [r7, #20]
 8041c1e:	430a      	orrs	r2, r1
 8041c20:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8041c22:	687b      	ldr	r3, [r7, #4]
 8041c24:	681b      	ldr	r3, [r3, #0]
 8041c26:	693a      	ldr	r2, [r7, #16]
 8041c28:	6812      	ldr	r2, [r2, #0]
 8041c2a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041c2c:	693b      	ldr	r3, [r7, #16]
 8041c2e:	685b      	ldr	r3, [r3, #4]
 8041c30:	2b0a      	cmp	r3, #10
 8041c32:	d003      	beq.n	8041c3c <HAL_DMA2D_ConfigLayer+0xf4>
 8041c34:	693b      	ldr	r3, [r7, #16]
 8041c36:	685b      	ldr	r3, [r3, #4]
 8041c38:	2b09      	cmp	r3, #9
 8041c3a:	d106      	bne.n	8041c4a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8041c3c:	693b      	ldr	r3, [r7, #16]
 8041c3e:	68da      	ldr	r2, [r3, #12]
 8041c40:	687b      	ldr	r3, [r7, #4]
 8041c42:	681b      	ldr	r3, [r3, #0]
 8041c44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8041c48:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8041c4a:	687b      	ldr	r3, [r7, #4]
 8041c4c:	2201      	movs	r2, #1
 8041c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8041c52:	687b      	ldr	r3, [r7, #4]
 8041c54:	2200      	movs	r2, #0
 8041c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8041c5a:	2300      	movs	r3, #0
}
 8041c5c:	4618      	mov	r0, r3
 8041c5e:	371c      	adds	r7, #28
 8041c60:	46bd      	mov	sp, r7
 8041c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c66:	4770      	bx	lr
 8041c68:	ff03000f 	.word	0xff03000f

08041c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041c6c:	b480      	push	{r7}
 8041c6e:	b089      	sub	sp, #36	; 0x24
 8041c70:	af00      	add	r7, sp, #0
 8041c72:	6078      	str	r0, [r7, #4]
 8041c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8041c76:	2300      	movs	r3, #0
 8041c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8041c7a:	2300      	movs	r3, #0
 8041c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8041c7e:	2300      	movs	r3, #0
 8041c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041c82:	2300      	movs	r3, #0
 8041c84:	61fb      	str	r3, [r7, #28]
 8041c86:	e177      	b.n	8041f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8041c88:	2201      	movs	r2, #1
 8041c8a:	69fb      	ldr	r3, [r7, #28]
 8041c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8041c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8041c92:	683b      	ldr	r3, [r7, #0]
 8041c94:	681b      	ldr	r3, [r3, #0]
 8041c96:	697a      	ldr	r2, [r7, #20]
 8041c98:	4013      	ands	r3, r2
 8041c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8041c9c:	693a      	ldr	r2, [r7, #16]
 8041c9e:	697b      	ldr	r3, [r7, #20]
 8041ca0:	429a      	cmp	r2, r3
 8041ca2:	f040 8166 	bne.w	8041f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041ca6:	683b      	ldr	r3, [r7, #0]
 8041ca8:	685b      	ldr	r3, [r3, #4]
 8041caa:	f003 0303 	and.w	r3, r3, #3
 8041cae:	2b01      	cmp	r3, #1
 8041cb0:	d005      	beq.n	8041cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041cb2:	683b      	ldr	r3, [r7, #0]
 8041cb4:	685b      	ldr	r3, [r3, #4]
 8041cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8041cba:	2b02      	cmp	r3, #2
 8041cbc:	d130      	bne.n	8041d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8041cbe:	687b      	ldr	r3, [r7, #4]
 8041cc0:	689b      	ldr	r3, [r3, #8]
 8041cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8041cc4:	69fb      	ldr	r3, [r7, #28]
 8041cc6:	005b      	lsls	r3, r3, #1
 8041cc8:	2203      	movs	r2, #3
 8041cca:	fa02 f303 	lsl.w	r3, r2, r3
 8041cce:	43db      	mvns	r3, r3
 8041cd0:	69ba      	ldr	r2, [r7, #24]
 8041cd2:	4013      	ands	r3, r2
 8041cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041cd6:	683b      	ldr	r3, [r7, #0]
 8041cd8:	68da      	ldr	r2, [r3, #12]
 8041cda:	69fb      	ldr	r3, [r7, #28]
 8041cdc:	005b      	lsls	r3, r3, #1
 8041cde:	fa02 f303 	lsl.w	r3, r2, r3
 8041ce2:	69ba      	ldr	r2, [r7, #24]
 8041ce4:	4313      	orrs	r3, r2
 8041ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041ce8:	687b      	ldr	r3, [r7, #4]
 8041cea:	69ba      	ldr	r2, [r7, #24]
 8041cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041cee:	687b      	ldr	r3, [r7, #4]
 8041cf0:	685b      	ldr	r3, [r3, #4]
 8041cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041cf4:	2201      	movs	r2, #1
 8041cf6:	69fb      	ldr	r3, [r7, #28]
 8041cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8041cfc:	43db      	mvns	r3, r3
 8041cfe:	69ba      	ldr	r2, [r7, #24]
 8041d00:	4013      	ands	r3, r2
 8041d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041d04:	683b      	ldr	r3, [r7, #0]
 8041d06:	685b      	ldr	r3, [r3, #4]
 8041d08:	091b      	lsrs	r3, r3, #4
 8041d0a:	f003 0201 	and.w	r2, r3, #1
 8041d0e:	69fb      	ldr	r3, [r7, #28]
 8041d10:	fa02 f303 	lsl.w	r3, r2, r3
 8041d14:	69ba      	ldr	r2, [r7, #24]
 8041d16:	4313      	orrs	r3, r2
 8041d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041d1a:	687b      	ldr	r3, [r7, #4]
 8041d1c:	69ba      	ldr	r2, [r7, #24]
 8041d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041d20:	683b      	ldr	r3, [r7, #0]
 8041d22:	685b      	ldr	r3, [r3, #4]
 8041d24:	f003 0303 	and.w	r3, r3, #3
 8041d28:	2b03      	cmp	r3, #3
 8041d2a:	d017      	beq.n	8041d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8041d2c:	687b      	ldr	r3, [r7, #4]
 8041d2e:	68db      	ldr	r3, [r3, #12]
 8041d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8041d32:	69fb      	ldr	r3, [r7, #28]
 8041d34:	005b      	lsls	r3, r3, #1
 8041d36:	2203      	movs	r2, #3
 8041d38:	fa02 f303 	lsl.w	r3, r2, r3
 8041d3c:	43db      	mvns	r3, r3
 8041d3e:	69ba      	ldr	r2, [r7, #24]
 8041d40:	4013      	ands	r3, r2
 8041d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041d44:	683b      	ldr	r3, [r7, #0]
 8041d46:	689a      	ldr	r2, [r3, #8]
 8041d48:	69fb      	ldr	r3, [r7, #28]
 8041d4a:	005b      	lsls	r3, r3, #1
 8041d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8041d50:	69ba      	ldr	r2, [r7, #24]
 8041d52:	4313      	orrs	r3, r2
 8041d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8041d56:	687b      	ldr	r3, [r7, #4]
 8041d58:	69ba      	ldr	r2, [r7, #24]
 8041d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041d5c:	683b      	ldr	r3, [r7, #0]
 8041d5e:	685b      	ldr	r3, [r3, #4]
 8041d60:	f003 0303 	and.w	r3, r3, #3
 8041d64:	2b02      	cmp	r3, #2
 8041d66:	d123      	bne.n	8041db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041d68:	69fb      	ldr	r3, [r7, #28]
 8041d6a:	08da      	lsrs	r2, r3, #3
 8041d6c:	687b      	ldr	r3, [r7, #4]
 8041d6e:	3208      	adds	r2, #8
 8041d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8041d76:	69fb      	ldr	r3, [r7, #28]
 8041d78:	f003 0307 	and.w	r3, r3, #7
 8041d7c:	009b      	lsls	r3, r3, #2
 8041d7e:	220f      	movs	r2, #15
 8041d80:	fa02 f303 	lsl.w	r3, r2, r3
 8041d84:	43db      	mvns	r3, r3
 8041d86:	69ba      	ldr	r2, [r7, #24]
 8041d88:	4013      	ands	r3, r2
 8041d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8041d8c:	683b      	ldr	r3, [r7, #0]
 8041d8e:	691a      	ldr	r2, [r3, #16]
 8041d90:	69fb      	ldr	r3, [r7, #28]
 8041d92:	f003 0307 	and.w	r3, r3, #7
 8041d96:	009b      	lsls	r3, r3, #2
 8041d98:	fa02 f303 	lsl.w	r3, r2, r3
 8041d9c:	69ba      	ldr	r2, [r7, #24]
 8041d9e:	4313      	orrs	r3, r2
 8041da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8041da2:	69fb      	ldr	r3, [r7, #28]
 8041da4:	08da      	lsrs	r2, r3, #3
 8041da6:	687b      	ldr	r3, [r7, #4]
 8041da8:	3208      	adds	r2, #8
 8041daa:	69b9      	ldr	r1, [r7, #24]
 8041dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041db0:	687b      	ldr	r3, [r7, #4]
 8041db2:	681b      	ldr	r3, [r3, #0]
 8041db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8041db6:	69fb      	ldr	r3, [r7, #28]
 8041db8:	005b      	lsls	r3, r3, #1
 8041dba:	2203      	movs	r2, #3
 8041dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8041dc0:	43db      	mvns	r3, r3
 8041dc2:	69ba      	ldr	r2, [r7, #24]
 8041dc4:	4013      	ands	r3, r2
 8041dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8041dc8:	683b      	ldr	r3, [r7, #0]
 8041dca:	685b      	ldr	r3, [r3, #4]
 8041dcc:	f003 0203 	and.w	r2, r3, #3
 8041dd0:	69fb      	ldr	r3, [r7, #28]
 8041dd2:	005b      	lsls	r3, r3, #1
 8041dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8041dd8:	69ba      	ldr	r2, [r7, #24]
 8041dda:	4313      	orrs	r3, r2
 8041ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041dde:	687b      	ldr	r3, [r7, #4]
 8041de0:	69ba      	ldr	r2, [r7, #24]
 8041de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041de4:	683b      	ldr	r3, [r7, #0]
 8041de6:	685b      	ldr	r3, [r3, #4]
 8041de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8041dec:	2b00      	cmp	r3, #0
 8041dee:	f000 80c0 	beq.w	8041f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041df2:	2300      	movs	r3, #0
 8041df4:	60fb      	str	r3, [r7, #12]
 8041df6:	4b66      	ldr	r3, [pc, #408]	; (8041f90 <HAL_GPIO_Init+0x324>)
 8041df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041dfa:	4a65      	ldr	r2, [pc, #404]	; (8041f90 <HAL_GPIO_Init+0x324>)
 8041dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041e00:	6453      	str	r3, [r2, #68]	; 0x44
 8041e02:	4b63      	ldr	r3, [pc, #396]	; (8041f90 <HAL_GPIO_Init+0x324>)
 8041e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041e0a:	60fb      	str	r3, [r7, #12]
 8041e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041e0e:	4a61      	ldr	r2, [pc, #388]	; (8041f94 <HAL_GPIO_Init+0x328>)
 8041e10:	69fb      	ldr	r3, [r7, #28]
 8041e12:	089b      	lsrs	r3, r3, #2
 8041e14:	3302      	adds	r3, #2
 8041e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041e1c:	69fb      	ldr	r3, [r7, #28]
 8041e1e:	f003 0303 	and.w	r3, r3, #3
 8041e22:	009b      	lsls	r3, r3, #2
 8041e24:	220f      	movs	r2, #15
 8041e26:	fa02 f303 	lsl.w	r3, r2, r3
 8041e2a:	43db      	mvns	r3, r3
 8041e2c:	69ba      	ldr	r2, [r7, #24]
 8041e2e:	4013      	ands	r3, r2
 8041e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8041e32:	687b      	ldr	r3, [r7, #4]
 8041e34:	4a58      	ldr	r2, [pc, #352]	; (8041f98 <HAL_GPIO_Init+0x32c>)
 8041e36:	4293      	cmp	r3, r2
 8041e38:	d037      	beq.n	8041eaa <HAL_GPIO_Init+0x23e>
 8041e3a:	687b      	ldr	r3, [r7, #4]
 8041e3c:	4a57      	ldr	r2, [pc, #348]	; (8041f9c <HAL_GPIO_Init+0x330>)
 8041e3e:	4293      	cmp	r3, r2
 8041e40:	d031      	beq.n	8041ea6 <HAL_GPIO_Init+0x23a>
 8041e42:	687b      	ldr	r3, [r7, #4]
 8041e44:	4a56      	ldr	r2, [pc, #344]	; (8041fa0 <HAL_GPIO_Init+0x334>)
 8041e46:	4293      	cmp	r3, r2
 8041e48:	d02b      	beq.n	8041ea2 <HAL_GPIO_Init+0x236>
 8041e4a:	687b      	ldr	r3, [r7, #4]
 8041e4c:	4a55      	ldr	r2, [pc, #340]	; (8041fa4 <HAL_GPIO_Init+0x338>)
 8041e4e:	4293      	cmp	r3, r2
 8041e50:	d025      	beq.n	8041e9e <HAL_GPIO_Init+0x232>
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	4a54      	ldr	r2, [pc, #336]	; (8041fa8 <HAL_GPIO_Init+0x33c>)
 8041e56:	4293      	cmp	r3, r2
 8041e58:	d01f      	beq.n	8041e9a <HAL_GPIO_Init+0x22e>
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	4a53      	ldr	r2, [pc, #332]	; (8041fac <HAL_GPIO_Init+0x340>)
 8041e5e:	4293      	cmp	r3, r2
 8041e60:	d019      	beq.n	8041e96 <HAL_GPIO_Init+0x22a>
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	4a52      	ldr	r2, [pc, #328]	; (8041fb0 <HAL_GPIO_Init+0x344>)
 8041e66:	4293      	cmp	r3, r2
 8041e68:	d013      	beq.n	8041e92 <HAL_GPIO_Init+0x226>
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	4a51      	ldr	r2, [pc, #324]	; (8041fb4 <HAL_GPIO_Init+0x348>)
 8041e6e:	4293      	cmp	r3, r2
 8041e70:	d00d      	beq.n	8041e8e <HAL_GPIO_Init+0x222>
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	4a50      	ldr	r2, [pc, #320]	; (8041fb8 <HAL_GPIO_Init+0x34c>)
 8041e76:	4293      	cmp	r3, r2
 8041e78:	d007      	beq.n	8041e8a <HAL_GPIO_Init+0x21e>
 8041e7a:	687b      	ldr	r3, [r7, #4]
 8041e7c:	4a4f      	ldr	r2, [pc, #316]	; (8041fbc <HAL_GPIO_Init+0x350>)
 8041e7e:	4293      	cmp	r3, r2
 8041e80:	d101      	bne.n	8041e86 <HAL_GPIO_Init+0x21a>
 8041e82:	2309      	movs	r3, #9
 8041e84:	e012      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e86:	230a      	movs	r3, #10
 8041e88:	e010      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e8a:	2308      	movs	r3, #8
 8041e8c:	e00e      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e8e:	2307      	movs	r3, #7
 8041e90:	e00c      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e92:	2306      	movs	r3, #6
 8041e94:	e00a      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e96:	2305      	movs	r3, #5
 8041e98:	e008      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e9a:	2304      	movs	r3, #4
 8041e9c:	e006      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041e9e:	2303      	movs	r3, #3
 8041ea0:	e004      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041ea2:	2302      	movs	r3, #2
 8041ea4:	e002      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041ea6:	2301      	movs	r3, #1
 8041ea8:	e000      	b.n	8041eac <HAL_GPIO_Init+0x240>
 8041eaa:	2300      	movs	r3, #0
 8041eac:	69fa      	ldr	r2, [r7, #28]
 8041eae:	f002 0203 	and.w	r2, r2, #3
 8041eb2:	0092      	lsls	r2, r2, #2
 8041eb4:	4093      	lsls	r3, r2
 8041eb6:	69ba      	ldr	r2, [r7, #24]
 8041eb8:	4313      	orrs	r3, r2
 8041eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8041ebc:	4935      	ldr	r1, [pc, #212]	; (8041f94 <HAL_GPIO_Init+0x328>)
 8041ebe:	69fb      	ldr	r3, [r7, #28]
 8041ec0:	089b      	lsrs	r3, r3, #2
 8041ec2:	3302      	adds	r3, #2
 8041ec4:	69ba      	ldr	r2, [r7, #24]
 8041ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041eca:	4b3d      	ldr	r3, [pc, #244]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041ecc:	689b      	ldr	r3, [r3, #8]
 8041ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041ed0:	693b      	ldr	r3, [r7, #16]
 8041ed2:	43db      	mvns	r3, r3
 8041ed4:	69ba      	ldr	r2, [r7, #24]
 8041ed6:	4013      	ands	r3, r2
 8041ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8041eda:	683b      	ldr	r3, [r7, #0]
 8041edc:	685b      	ldr	r3, [r3, #4]
 8041ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041ee2:	2b00      	cmp	r3, #0
 8041ee4:	d003      	beq.n	8041eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8041ee6:	69ba      	ldr	r2, [r7, #24]
 8041ee8:	693b      	ldr	r3, [r7, #16]
 8041eea:	4313      	orrs	r3, r2
 8041eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041eee:	4a34      	ldr	r2, [pc, #208]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041ef0:	69bb      	ldr	r3, [r7, #24]
 8041ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041ef4:	4b32      	ldr	r3, [pc, #200]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041ef6:	68db      	ldr	r3, [r3, #12]
 8041ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041efa:	693b      	ldr	r3, [r7, #16]
 8041efc:	43db      	mvns	r3, r3
 8041efe:	69ba      	ldr	r2, [r7, #24]
 8041f00:	4013      	ands	r3, r2
 8041f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041f04:	683b      	ldr	r3, [r7, #0]
 8041f06:	685b      	ldr	r3, [r3, #4]
 8041f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041f0c:	2b00      	cmp	r3, #0
 8041f0e:	d003      	beq.n	8041f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041f10:	69ba      	ldr	r2, [r7, #24]
 8041f12:	693b      	ldr	r3, [r7, #16]
 8041f14:	4313      	orrs	r3, r2
 8041f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041f18:	4a29      	ldr	r2, [pc, #164]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041f1a:	69bb      	ldr	r3, [r7, #24]
 8041f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8041f1e:	4b28      	ldr	r3, [pc, #160]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041f20:	685b      	ldr	r3, [r3, #4]
 8041f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041f24:	693b      	ldr	r3, [r7, #16]
 8041f26:	43db      	mvns	r3, r3
 8041f28:	69ba      	ldr	r2, [r7, #24]
 8041f2a:	4013      	ands	r3, r2
 8041f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041f2e:	683b      	ldr	r3, [r7, #0]
 8041f30:	685b      	ldr	r3, [r3, #4]
 8041f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041f36:	2b00      	cmp	r3, #0
 8041f38:	d003      	beq.n	8041f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8041f3a:	69ba      	ldr	r2, [r7, #24]
 8041f3c:	693b      	ldr	r3, [r7, #16]
 8041f3e:	4313      	orrs	r3, r2
 8041f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041f42:	4a1f      	ldr	r2, [pc, #124]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041f44:	69bb      	ldr	r3, [r7, #24]
 8041f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041f48:	4b1d      	ldr	r3, [pc, #116]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041f4a:	681b      	ldr	r3, [r3, #0]
 8041f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041f4e:	693b      	ldr	r3, [r7, #16]
 8041f50:	43db      	mvns	r3, r3
 8041f52:	69ba      	ldr	r2, [r7, #24]
 8041f54:	4013      	ands	r3, r2
 8041f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8041f58:	683b      	ldr	r3, [r7, #0]
 8041f5a:	685b      	ldr	r3, [r3, #4]
 8041f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d003      	beq.n	8041f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041f64:	69ba      	ldr	r2, [r7, #24]
 8041f66:	693b      	ldr	r3, [r7, #16]
 8041f68:	4313      	orrs	r3, r2
 8041f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041f6c:	4a14      	ldr	r2, [pc, #80]	; (8041fc0 <HAL_GPIO_Init+0x354>)
 8041f6e:	69bb      	ldr	r3, [r7, #24]
 8041f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041f72:	69fb      	ldr	r3, [r7, #28]
 8041f74:	3301      	adds	r3, #1
 8041f76:	61fb      	str	r3, [r7, #28]
 8041f78:	69fb      	ldr	r3, [r7, #28]
 8041f7a:	2b0f      	cmp	r3, #15
 8041f7c:	f67f ae84 	bls.w	8041c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8041f80:	bf00      	nop
 8041f82:	bf00      	nop
 8041f84:	3724      	adds	r7, #36	; 0x24
 8041f86:	46bd      	mov	sp, r7
 8041f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f8c:	4770      	bx	lr
 8041f8e:	bf00      	nop
 8041f90:	40023800 	.word	0x40023800
 8041f94:	40013800 	.word	0x40013800
 8041f98:	40020000 	.word	0x40020000
 8041f9c:	40020400 	.word	0x40020400
 8041fa0:	40020800 	.word	0x40020800
 8041fa4:	40020c00 	.word	0x40020c00
 8041fa8:	40021000 	.word	0x40021000
 8041fac:	40021400 	.word	0x40021400
 8041fb0:	40021800 	.word	0x40021800
 8041fb4:	40021c00 	.word	0x40021c00
 8041fb8:	40022000 	.word	0x40022000
 8041fbc:	40022400 	.word	0x40022400
 8041fc0:	40013c00 	.word	0x40013c00

08041fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041fc4:	b480      	push	{r7}
 8041fc6:	b083      	sub	sp, #12
 8041fc8:	af00      	add	r7, sp, #0
 8041fca:	6078      	str	r0, [r7, #4]
 8041fcc:	460b      	mov	r3, r1
 8041fce:	807b      	strh	r3, [r7, #2]
 8041fd0:	4613      	mov	r3, r2
 8041fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041fd4:	787b      	ldrb	r3, [r7, #1]
 8041fd6:	2b00      	cmp	r3, #0
 8041fd8:	d003      	beq.n	8041fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041fda:	887a      	ldrh	r2, [r7, #2]
 8041fdc:	687b      	ldr	r3, [r7, #4]
 8041fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8041fe0:	e003      	b.n	8041fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8041fe2:	887b      	ldrh	r3, [r7, #2]
 8041fe4:	041a      	lsls	r2, r3, #16
 8041fe6:	687b      	ldr	r3, [r7, #4]
 8041fe8:	619a      	str	r2, [r3, #24]
}
 8041fea:	bf00      	nop
 8041fec:	370c      	adds	r7, #12
 8041fee:	46bd      	mov	sp, r7
 8041ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ff4:	4770      	bx	lr

08041ff6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8041ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8041ff8:	b08f      	sub	sp, #60	; 0x3c
 8041ffa:	af0a      	add	r7, sp, #40	; 0x28
 8041ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8041ffe:	687b      	ldr	r3, [r7, #4]
 8042000:	2b00      	cmp	r3, #0
 8042002:	d101      	bne.n	8042008 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8042004:	2301      	movs	r3, #1
 8042006:	e054      	b.n	80420b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	681b      	ldr	r3, [r3, #0]
 804200c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 804200e:	687b      	ldr	r3, [r7, #4]
 8042010:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8042014:	b2db      	uxtb	r3, r3
 8042016:	2b00      	cmp	r3, #0
 8042018:	d106      	bne.n	8042028 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	2200      	movs	r2, #0
 804201e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8042022:	6878      	ldr	r0, [r7, #4]
 8042024:	f007 f89c 	bl	8049160 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8042028:	687b      	ldr	r3, [r7, #4]
 804202a:	2203      	movs	r2, #3
 804202c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8042030:	68fb      	ldr	r3, [r7, #12]
 8042032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042038:	2b00      	cmp	r3, #0
 804203a:	d102      	bne.n	8042042 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 804203c:	687b      	ldr	r3, [r7, #4]
 804203e:	2200      	movs	r2, #0
 8042040:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8042042:	687b      	ldr	r3, [r7, #4]
 8042044:	681b      	ldr	r3, [r3, #0]
 8042046:	4618      	mov	r0, r3
 8042048:	f004 f8ca 	bl	80461e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 804204c:	687b      	ldr	r3, [r7, #4]
 804204e:	681b      	ldr	r3, [r3, #0]
 8042050:	603b      	str	r3, [r7, #0]
 8042052:	687e      	ldr	r6, [r7, #4]
 8042054:	466d      	mov	r5, sp
 8042056:	f106 0410 	add.w	r4, r6, #16
 804205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8042060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8042062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8042066:	e885 0003 	stmia.w	r5, {r0, r1}
 804206a:	1d33      	adds	r3, r6, #4
 804206c:	cb0e      	ldmia	r3, {r1, r2, r3}
 804206e:	6838      	ldr	r0, [r7, #0]
 8042070:	f004 f844 	bl	80460fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8042074:	687b      	ldr	r3, [r7, #4]
 8042076:	681b      	ldr	r3, [r3, #0]
 8042078:	2101      	movs	r1, #1
 804207a:	4618      	mov	r0, r3
 804207c:	f004 f8c1 	bl	8046202 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8042080:	687b      	ldr	r3, [r7, #4]
 8042082:	681b      	ldr	r3, [r3, #0]
 8042084:	603b      	str	r3, [r7, #0]
 8042086:	687e      	ldr	r6, [r7, #4]
 8042088:	466d      	mov	r5, sp
 804208a:	f106 0410 	add.w	r4, r6, #16
 804208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8042090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8042092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8042094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8042096:	e894 0003 	ldmia.w	r4, {r0, r1}
 804209a:	e885 0003 	stmia.w	r5, {r0, r1}
 804209e:	1d33      	adds	r3, r6, #4
 80420a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80420a2:	6838      	ldr	r0, [r7, #0]
 80420a4:	f004 fa4a 	bl	804653c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80420a8:	687b      	ldr	r3, [r7, #4]
 80420aa:	2201      	movs	r2, #1
 80420ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80420b0:	2300      	movs	r3, #0
}
 80420b2:	4618      	mov	r0, r3
 80420b4:	3714      	adds	r7, #20
 80420b6:	46bd      	mov	sp, r7
 80420b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080420ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80420ba:	b590      	push	{r4, r7, lr}
 80420bc:	b089      	sub	sp, #36	; 0x24
 80420be:	af04      	add	r7, sp, #16
 80420c0:	6078      	str	r0, [r7, #4]
 80420c2:	4608      	mov	r0, r1
 80420c4:	4611      	mov	r1, r2
 80420c6:	461a      	mov	r2, r3
 80420c8:	4603      	mov	r3, r0
 80420ca:	70fb      	strb	r3, [r7, #3]
 80420cc:	460b      	mov	r3, r1
 80420ce:	70bb      	strb	r3, [r7, #2]
 80420d0:	4613      	mov	r3, r2
 80420d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80420d4:	687b      	ldr	r3, [r7, #4]
 80420d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80420da:	2b01      	cmp	r3, #1
 80420dc:	d101      	bne.n	80420e2 <HAL_HCD_HC_Init+0x28>
 80420de:	2302      	movs	r3, #2
 80420e0:	e076      	b.n	80421d0 <HAL_HCD_HC_Init+0x116>
 80420e2:	687b      	ldr	r3, [r7, #4]
 80420e4:	2201      	movs	r2, #1
 80420e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80420ea:	78fb      	ldrb	r3, [r7, #3]
 80420ec:	687a      	ldr	r2, [r7, #4]
 80420ee:	212c      	movs	r1, #44	; 0x2c
 80420f0:	fb01 f303 	mul.w	r3, r1, r3
 80420f4:	4413      	add	r3, r2
 80420f6:	333d      	adds	r3, #61	; 0x3d
 80420f8:	2200      	movs	r2, #0
 80420fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80420fc:	78fb      	ldrb	r3, [r7, #3]
 80420fe:	687a      	ldr	r2, [r7, #4]
 8042100:	212c      	movs	r1, #44	; 0x2c
 8042102:	fb01 f303 	mul.w	r3, r1, r3
 8042106:	4413      	add	r3, r2
 8042108:	3338      	adds	r3, #56	; 0x38
 804210a:	787a      	ldrb	r2, [r7, #1]
 804210c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 804210e:	78fb      	ldrb	r3, [r7, #3]
 8042110:	687a      	ldr	r2, [r7, #4]
 8042112:	212c      	movs	r1, #44	; 0x2c
 8042114:	fb01 f303 	mul.w	r3, r1, r3
 8042118:	4413      	add	r3, r2
 804211a:	3340      	adds	r3, #64	; 0x40
 804211c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 804211e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8042120:	78fb      	ldrb	r3, [r7, #3]
 8042122:	687a      	ldr	r2, [r7, #4]
 8042124:	212c      	movs	r1, #44	; 0x2c
 8042126:	fb01 f303 	mul.w	r3, r1, r3
 804212a:	4413      	add	r3, r2
 804212c:	3339      	adds	r3, #57	; 0x39
 804212e:	78fa      	ldrb	r2, [r7, #3]
 8042130:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8042132:	78fb      	ldrb	r3, [r7, #3]
 8042134:	687a      	ldr	r2, [r7, #4]
 8042136:	212c      	movs	r1, #44	; 0x2c
 8042138:	fb01 f303 	mul.w	r3, r1, r3
 804213c:	4413      	add	r3, r2
 804213e:	333f      	adds	r3, #63	; 0x3f
 8042140:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8042144:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8042146:	78fb      	ldrb	r3, [r7, #3]
 8042148:	78ba      	ldrb	r2, [r7, #2]
 804214a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804214e:	b2d0      	uxtb	r0, r2
 8042150:	687a      	ldr	r2, [r7, #4]
 8042152:	212c      	movs	r1, #44	; 0x2c
 8042154:	fb01 f303 	mul.w	r3, r1, r3
 8042158:	4413      	add	r3, r2
 804215a:	333a      	adds	r3, #58	; 0x3a
 804215c:	4602      	mov	r2, r0
 804215e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8042160:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8042164:	2b00      	cmp	r3, #0
 8042166:	da09      	bge.n	804217c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8042168:	78fb      	ldrb	r3, [r7, #3]
 804216a:	687a      	ldr	r2, [r7, #4]
 804216c:	212c      	movs	r1, #44	; 0x2c
 804216e:	fb01 f303 	mul.w	r3, r1, r3
 8042172:	4413      	add	r3, r2
 8042174:	333b      	adds	r3, #59	; 0x3b
 8042176:	2201      	movs	r2, #1
 8042178:	701a      	strb	r2, [r3, #0]
 804217a:	e008      	b.n	804218e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 804217c:	78fb      	ldrb	r3, [r7, #3]
 804217e:	687a      	ldr	r2, [r7, #4]
 8042180:	212c      	movs	r1, #44	; 0x2c
 8042182:	fb01 f303 	mul.w	r3, r1, r3
 8042186:	4413      	add	r3, r2
 8042188:	333b      	adds	r3, #59	; 0x3b
 804218a:	2200      	movs	r2, #0
 804218c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 804218e:	78fb      	ldrb	r3, [r7, #3]
 8042190:	687a      	ldr	r2, [r7, #4]
 8042192:	212c      	movs	r1, #44	; 0x2c
 8042194:	fb01 f303 	mul.w	r3, r1, r3
 8042198:	4413      	add	r3, r2
 804219a:	333c      	adds	r3, #60	; 0x3c
 804219c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80421a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80421a2:	687b      	ldr	r3, [r7, #4]
 80421a4:	6818      	ldr	r0, [r3, #0]
 80421a6:	787c      	ldrb	r4, [r7, #1]
 80421a8:	78ba      	ldrb	r2, [r7, #2]
 80421aa:	78f9      	ldrb	r1, [r7, #3]
 80421ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80421ae:	9302      	str	r3, [sp, #8]
 80421b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80421b4:	9301      	str	r3, [sp, #4]
 80421b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80421ba:	9300      	str	r3, [sp, #0]
 80421bc:	4623      	mov	r3, r4
 80421be:	f004 fb43 	bl	8046848 <USB_HC_Init>
 80421c2:	4603      	mov	r3, r0
 80421c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80421c6:	687b      	ldr	r3, [r7, #4]
 80421c8:	2200      	movs	r2, #0
 80421ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80421ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80421d0:	4618      	mov	r0, r3
 80421d2:	3714      	adds	r7, #20
 80421d4:	46bd      	mov	sp, r7
 80421d6:	bd90      	pop	{r4, r7, pc}

080421d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80421d8:	b580      	push	{r7, lr}
 80421da:	b084      	sub	sp, #16
 80421dc:	af00      	add	r7, sp, #0
 80421de:	6078      	str	r0, [r7, #4]
 80421e0:	460b      	mov	r3, r1
 80421e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80421e4:	2300      	movs	r3, #0
 80421e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80421e8:	687b      	ldr	r3, [r7, #4]
 80421ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80421ee:	2b01      	cmp	r3, #1
 80421f0:	d101      	bne.n	80421f6 <HAL_HCD_HC_Halt+0x1e>
 80421f2:	2302      	movs	r3, #2
 80421f4:	e00f      	b.n	8042216 <HAL_HCD_HC_Halt+0x3e>
 80421f6:	687b      	ldr	r3, [r7, #4]
 80421f8:	2201      	movs	r2, #1
 80421fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80421fe:	687b      	ldr	r3, [r7, #4]
 8042200:	681b      	ldr	r3, [r3, #0]
 8042202:	78fa      	ldrb	r2, [r7, #3]
 8042204:	4611      	mov	r1, r2
 8042206:	4618      	mov	r0, r3
 8042208:	f004 fd93 	bl	8046d32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 804220c:	687b      	ldr	r3, [r7, #4]
 804220e:	2200      	movs	r2, #0
 8042210:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8042214:	7bfb      	ldrb	r3, [r7, #15]
}
 8042216:	4618      	mov	r0, r3
 8042218:	3710      	adds	r7, #16
 804221a:	46bd      	mov	sp, r7
 804221c:	bd80      	pop	{r7, pc}
	...

08042220 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8042220:	b580      	push	{r7, lr}
 8042222:	b082      	sub	sp, #8
 8042224:	af00      	add	r7, sp, #0
 8042226:	6078      	str	r0, [r7, #4]
 8042228:	4608      	mov	r0, r1
 804222a:	4611      	mov	r1, r2
 804222c:	461a      	mov	r2, r3
 804222e:	4603      	mov	r3, r0
 8042230:	70fb      	strb	r3, [r7, #3]
 8042232:	460b      	mov	r3, r1
 8042234:	70bb      	strb	r3, [r7, #2]
 8042236:	4613      	mov	r3, r2
 8042238:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 804223a:	78fb      	ldrb	r3, [r7, #3]
 804223c:	687a      	ldr	r2, [r7, #4]
 804223e:	212c      	movs	r1, #44	; 0x2c
 8042240:	fb01 f303 	mul.w	r3, r1, r3
 8042244:	4413      	add	r3, r2
 8042246:	333b      	adds	r3, #59	; 0x3b
 8042248:	78ba      	ldrb	r2, [r7, #2]
 804224a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 804224c:	78fb      	ldrb	r3, [r7, #3]
 804224e:	687a      	ldr	r2, [r7, #4]
 8042250:	212c      	movs	r1, #44	; 0x2c
 8042252:	fb01 f303 	mul.w	r3, r1, r3
 8042256:	4413      	add	r3, r2
 8042258:	333f      	adds	r3, #63	; 0x3f
 804225a:	787a      	ldrb	r2, [r7, #1]
 804225c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 804225e:	7c3b      	ldrb	r3, [r7, #16]
 8042260:	2b00      	cmp	r3, #0
 8042262:	d112      	bne.n	804228a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8042264:	78fb      	ldrb	r3, [r7, #3]
 8042266:	687a      	ldr	r2, [r7, #4]
 8042268:	212c      	movs	r1, #44	; 0x2c
 804226a:	fb01 f303 	mul.w	r3, r1, r3
 804226e:	4413      	add	r3, r2
 8042270:	3342      	adds	r3, #66	; 0x42
 8042272:	2203      	movs	r2, #3
 8042274:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8042276:	78fb      	ldrb	r3, [r7, #3]
 8042278:	687a      	ldr	r2, [r7, #4]
 804227a:	212c      	movs	r1, #44	; 0x2c
 804227c:	fb01 f303 	mul.w	r3, r1, r3
 8042280:	4413      	add	r3, r2
 8042282:	333d      	adds	r3, #61	; 0x3d
 8042284:	7f3a      	ldrb	r2, [r7, #28]
 8042286:	701a      	strb	r2, [r3, #0]
 8042288:	e008      	b.n	804229c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804228a:	78fb      	ldrb	r3, [r7, #3]
 804228c:	687a      	ldr	r2, [r7, #4]
 804228e:	212c      	movs	r1, #44	; 0x2c
 8042290:	fb01 f303 	mul.w	r3, r1, r3
 8042294:	4413      	add	r3, r2
 8042296:	3342      	adds	r3, #66	; 0x42
 8042298:	2202      	movs	r2, #2
 804229a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 804229c:	787b      	ldrb	r3, [r7, #1]
 804229e:	2b03      	cmp	r3, #3
 80422a0:	f200 80c6 	bhi.w	8042430 <HAL_HCD_HC_SubmitRequest+0x210>
 80422a4:	a201      	add	r2, pc, #4	; (adr r2, 80422ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80422a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80422aa:	bf00      	nop
 80422ac:	080422bd 	.word	0x080422bd
 80422b0:	0804241d 	.word	0x0804241d
 80422b4:	08042321 	.word	0x08042321
 80422b8:	0804239f 	.word	0x0804239f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80422bc:	7c3b      	ldrb	r3, [r7, #16]
 80422be:	2b01      	cmp	r3, #1
 80422c0:	f040 80b8 	bne.w	8042434 <HAL_HCD_HC_SubmitRequest+0x214>
 80422c4:	78bb      	ldrb	r3, [r7, #2]
 80422c6:	2b00      	cmp	r3, #0
 80422c8:	f040 80b4 	bne.w	8042434 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80422cc:	8b3b      	ldrh	r3, [r7, #24]
 80422ce:	2b00      	cmp	r3, #0
 80422d0:	d108      	bne.n	80422e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80422d2:	78fb      	ldrb	r3, [r7, #3]
 80422d4:	687a      	ldr	r2, [r7, #4]
 80422d6:	212c      	movs	r1, #44	; 0x2c
 80422d8:	fb01 f303 	mul.w	r3, r1, r3
 80422dc:	4413      	add	r3, r2
 80422de:	3355      	adds	r3, #85	; 0x55
 80422e0:	2201      	movs	r2, #1
 80422e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80422e4:	78fb      	ldrb	r3, [r7, #3]
 80422e6:	687a      	ldr	r2, [r7, #4]
 80422e8:	212c      	movs	r1, #44	; 0x2c
 80422ea:	fb01 f303 	mul.w	r3, r1, r3
 80422ee:	4413      	add	r3, r2
 80422f0:	3355      	adds	r3, #85	; 0x55
 80422f2:	781b      	ldrb	r3, [r3, #0]
 80422f4:	2b00      	cmp	r3, #0
 80422f6:	d109      	bne.n	804230c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80422f8:	78fb      	ldrb	r3, [r7, #3]
 80422fa:	687a      	ldr	r2, [r7, #4]
 80422fc:	212c      	movs	r1, #44	; 0x2c
 80422fe:	fb01 f303 	mul.w	r3, r1, r3
 8042302:	4413      	add	r3, r2
 8042304:	3342      	adds	r3, #66	; 0x42
 8042306:	2200      	movs	r2, #0
 8042308:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804230a:	e093      	b.n	8042434 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804230c:	78fb      	ldrb	r3, [r7, #3]
 804230e:	687a      	ldr	r2, [r7, #4]
 8042310:	212c      	movs	r1, #44	; 0x2c
 8042312:	fb01 f303 	mul.w	r3, r1, r3
 8042316:	4413      	add	r3, r2
 8042318:	3342      	adds	r3, #66	; 0x42
 804231a:	2202      	movs	r2, #2
 804231c:	701a      	strb	r2, [r3, #0]
      break;
 804231e:	e089      	b.n	8042434 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8042320:	78bb      	ldrb	r3, [r7, #2]
 8042322:	2b00      	cmp	r3, #0
 8042324:	d11d      	bne.n	8042362 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8042326:	78fb      	ldrb	r3, [r7, #3]
 8042328:	687a      	ldr	r2, [r7, #4]
 804232a:	212c      	movs	r1, #44	; 0x2c
 804232c:	fb01 f303 	mul.w	r3, r1, r3
 8042330:	4413      	add	r3, r2
 8042332:	3355      	adds	r3, #85	; 0x55
 8042334:	781b      	ldrb	r3, [r3, #0]
 8042336:	2b00      	cmp	r3, #0
 8042338:	d109      	bne.n	804234e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804233a:	78fb      	ldrb	r3, [r7, #3]
 804233c:	687a      	ldr	r2, [r7, #4]
 804233e:	212c      	movs	r1, #44	; 0x2c
 8042340:	fb01 f303 	mul.w	r3, r1, r3
 8042344:	4413      	add	r3, r2
 8042346:	3342      	adds	r3, #66	; 0x42
 8042348:	2200      	movs	r2, #0
 804234a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 804234c:	e073      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804234e:	78fb      	ldrb	r3, [r7, #3]
 8042350:	687a      	ldr	r2, [r7, #4]
 8042352:	212c      	movs	r1, #44	; 0x2c
 8042354:	fb01 f303 	mul.w	r3, r1, r3
 8042358:	4413      	add	r3, r2
 804235a:	3342      	adds	r3, #66	; 0x42
 804235c:	2202      	movs	r2, #2
 804235e:	701a      	strb	r2, [r3, #0]
      break;
 8042360:	e069      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8042362:	78fb      	ldrb	r3, [r7, #3]
 8042364:	687a      	ldr	r2, [r7, #4]
 8042366:	212c      	movs	r1, #44	; 0x2c
 8042368:	fb01 f303 	mul.w	r3, r1, r3
 804236c:	4413      	add	r3, r2
 804236e:	3354      	adds	r3, #84	; 0x54
 8042370:	781b      	ldrb	r3, [r3, #0]
 8042372:	2b00      	cmp	r3, #0
 8042374:	d109      	bne.n	804238a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8042376:	78fb      	ldrb	r3, [r7, #3]
 8042378:	687a      	ldr	r2, [r7, #4]
 804237a:	212c      	movs	r1, #44	; 0x2c
 804237c:	fb01 f303 	mul.w	r3, r1, r3
 8042380:	4413      	add	r3, r2
 8042382:	3342      	adds	r3, #66	; 0x42
 8042384:	2200      	movs	r2, #0
 8042386:	701a      	strb	r2, [r3, #0]
      break;
 8042388:	e055      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804238a:	78fb      	ldrb	r3, [r7, #3]
 804238c:	687a      	ldr	r2, [r7, #4]
 804238e:	212c      	movs	r1, #44	; 0x2c
 8042390:	fb01 f303 	mul.w	r3, r1, r3
 8042394:	4413      	add	r3, r2
 8042396:	3342      	adds	r3, #66	; 0x42
 8042398:	2202      	movs	r2, #2
 804239a:	701a      	strb	r2, [r3, #0]
      break;
 804239c:	e04b      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 804239e:	78bb      	ldrb	r3, [r7, #2]
 80423a0:	2b00      	cmp	r3, #0
 80423a2:	d11d      	bne.n	80423e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80423a4:	78fb      	ldrb	r3, [r7, #3]
 80423a6:	687a      	ldr	r2, [r7, #4]
 80423a8:	212c      	movs	r1, #44	; 0x2c
 80423aa:	fb01 f303 	mul.w	r3, r1, r3
 80423ae:	4413      	add	r3, r2
 80423b0:	3355      	adds	r3, #85	; 0x55
 80423b2:	781b      	ldrb	r3, [r3, #0]
 80423b4:	2b00      	cmp	r3, #0
 80423b6:	d109      	bne.n	80423cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80423b8:	78fb      	ldrb	r3, [r7, #3]
 80423ba:	687a      	ldr	r2, [r7, #4]
 80423bc:	212c      	movs	r1, #44	; 0x2c
 80423be:	fb01 f303 	mul.w	r3, r1, r3
 80423c2:	4413      	add	r3, r2
 80423c4:	3342      	adds	r3, #66	; 0x42
 80423c6:	2200      	movs	r2, #0
 80423c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80423ca:	e034      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80423cc:	78fb      	ldrb	r3, [r7, #3]
 80423ce:	687a      	ldr	r2, [r7, #4]
 80423d0:	212c      	movs	r1, #44	; 0x2c
 80423d2:	fb01 f303 	mul.w	r3, r1, r3
 80423d6:	4413      	add	r3, r2
 80423d8:	3342      	adds	r3, #66	; 0x42
 80423da:	2202      	movs	r2, #2
 80423dc:	701a      	strb	r2, [r3, #0]
      break;
 80423de:	e02a      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80423e0:	78fb      	ldrb	r3, [r7, #3]
 80423e2:	687a      	ldr	r2, [r7, #4]
 80423e4:	212c      	movs	r1, #44	; 0x2c
 80423e6:	fb01 f303 	mul.w	r3, r1, r3
 80423ea:	4413      	add	r3, r2
 80423ec:	3354      	adds	r3, #84	; 0x54
 80423ee:	781b      	ldrb	r3, [r3, #0]
 80423f0:	2b00      	cmp	r3, #0
 80423f2:	d109      	bne.n	8042408 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80423f4:	78fb      	ldrb	r3, [r7, #3]
 80423f6:	687a      	ldr	r2, [r7, #4]
 80423f8:	212c      	movs	r1, #44	; 0x2c
 80423fa:	fb01 f303 	mul.w	r3, r1, r3
 80423fe:	4413      	add	r3, r2
 8042400:	3342      	adds	r3, #66	; 0x42
 8042402:	2200      	movs	r2, #0
 8042404:	701a      	strb	r2, [r3, #0]
      break;
 8042406:	e016      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8042408:	78fb      	ldrb	r3, [r7, #3]
 804240a:	687a      	ldr	r2, [r7, #4]
 804240c:	212c      	movs	r1, #44	; 0x2c
 804240e:	fb01 f303 	mul.w	r3, r1, r3
 8042412:	4413      	add	r3, r2
 8042414:	3342      	adds	r3, #66	; 0x42
 8042416:	2202      	movs	r2, #2
 8042418:	701a      	strb	r2, [r3, #0]
      break;
 804241a:	e00c      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804241c:	78fb      	ldrb	r3, [r7, #3]
 804241e:	687a      	ldr	r2, [r7, #4]
 8042420:	212c      	movs	r1, #44	; 0x2c
 8042422:	fb01 f303 	mul.w	r3, r1, r3
 8042426:	4413      	add	r3, r2
 8042428:	3342      	adds	r3, #66	; 0x42
 804242a:	2200      	movs	r2, #0
 804242c:	701a      	strb	r2, [r3, #0]
      break;
 804242e:	e002      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8042430:	bf00      	nop
 8042432:	e000      	b.n	8042436 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8042434:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8042436:	78fb      	ldrb	r3, [r7, #3]
 8042438:	687a      	ldr	r2, [r7, #4]
 804243a:	212c      	movs	r1, #44	; 0x2c
 804243c:	fb01 f303 	mul.w	r3, r1, r3
 8042440:	4413      	add	r3, r2
 8042442:	3344      	adds	r3, #68	; 0x44
 8042444:	697a      	ldr	r2, [r7, #20]
 8042446:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8042448:	78fb      	ldrb	r3, [r7, #3]
 804244a:	8b3a      	ldrh	r2, [r7, #24]
 804244c:	6879      	ldr	r1, [r7, #4]
 804244e:	202c      	movs	r0, #44	; 0x2c
 8042450:	fb00 f303 	mul.w	r3, r0, r3
 8042454:	440b      	add	r3, r1
 8042456:	334c      	adds	r3, #76	; 0x4c
 8042458:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 804245a:	78fb      	ldrb	r3, [r7, #3]
 804245c:	687a      	ldr	r2, [r7, #4]
 804245e:	212c      	movs	r1, #44	; 0x2c
 8042460:	fb01 f303 	mul.w	r3, r1, r3
 8042464:	4413      	add	r3, r2
 8042466:	3360      	adds	r3, #96	; 0x60
 8042468:	2200      	movs	r2, #0
 804246a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 804246c:	78fb      	ldrb	r3, [r7, #3]
 804246e:	687a      	ldr	r2, [r7, #4]
 8042470:	212c      	movs	r1, #44	; 0x2c
 8042472:	fb01 f303 	mul.w	r3, r1, r3
 8042476:	4413      	add	r3, r2
 8042478:	3350      	adds	r3, #80	; 0x50
 804247a:	2200      	movs	r2, #0
 804247c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 804247e:	78fb      	ldrb	r3, [r7, #3]
 8042480:	687a      	ldr	r2, [r7, #4]
 8042482:	212c      	movs	r1, #44	; 0x2c
 8042484:	fb01 f303 	mul.w	r3, r1, r3
 8042488:	4413      	add	r3, r2
 804248a:	3339      	adds	r3, #57	; 0x39
 804248c:	78fa      	ldrb	r2, [r7, #3]
 804248e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8042490:	78fb      	ldrb	r3, [r7, #3]
 8042492:	687a      	ldr	r2, [r7, #4]
 8042494:	212c      	movs	r1, #44	; 0x2c
 8042496:	fb01 f303 	mul.w	r3, r1, r3
 804249a:	4413      	add	r3, r2
 804249c:	3361      	adds	r3, #97	; 0x61
 804249e:	2200      	movs	r2, #0
 80424a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80424a2:	687b      	ldr	r3, [r7, #4]
 80424a4:	6818      	ldr	r0, [r3, #0]
 80424a6:	78fb      	ldrb	r3, [r7, #3]
 80424a8:	222c      	movs	r2, #44	; 0x2c
 80424aa:	fb02 f303 	mul.w	r3, r2, r3
 80424ae:	3338      	adds	r3, #56	; 0x38
 80424b0:	687a      	ldr	r2, [r7, #4]
 80424b2:	18d1      	adds	r1, r2, r3
 80424b4:	687b      	ldr	r3, [r7, #4]
 80424b6:	691b      	ldr	r3, [r3, #16]
 80424b8:	b2db      	uxtb	r3, r3
 80424ba:	461a      	mov	r2, r3
 80424bc:	f004 fae6 	bl	8046a8c <USB_HC_StartXfer>
 80424c0:	4603      	mov	r3, r0
}
 80424c2:	4618      	mov	r0, r3
 80424c4:	3708      	adds	r7, #8
 80424c6:	46bd      	mov	sp, r7
 80424c8:	bd80      	pop	{r7, pc}
 80424ca:	bf00      	nop

080424cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80424cc:	b580      	push	{r7, lr}
 80424ce:	b086      	sub	sp, #24
 80424d0:	af00      	add	r7, sp, #0
 80424d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80424d4:	687b      	ldr	r3, [r7, #4]
 80424d6:	681b      	ldr	r3, [r3, #0]
 80424d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80424da:	693b      	ldr	r3, [r7, #16]
 80424dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80424de:	687b      	ldr	r3, [r7, #4]
 80424e0:	681b      	ldr	r3, [r3, #0]
 80424e2:	4618      	mov	r0, r3
 80424e4:	f003 ffe7 	bl	80464b6 <USB_GetMode>
 80424e8:	4603      	mov	r3, r0
 80424ea:	2b01      	cmp	r3, #1
 80424ec:	f040 80f6 	bne.w	80426dc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	681b      	ldr	r3, [r3, #0]
 80424f4:	4618      	mov	r0, r3
 80424f6:	f003 ffcb 	bl	8046490 <USB_ReadInterrupts>
 80424fa:	4603      	mov	r3, r0
 80424fc:	2b00      	cmp	r3, #0
 80424fe:	f000 80ec 	beq.w	80426da <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	4618      	mov	r0, r3
 8042508:	f003 ffc2 	bl	8046490 <USB_ReadInterrupts>
 804250c:	4603      	mov	r3, r0
 804250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042516:	d104      	bne.n	8042522 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8042518:	687b      	ldr	r3, [r7, #4]
 804251a:	681b      	ldr	r3, [r3, #0]
 804251c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8042520:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8042522:	687b      	ldr	r3, [r7, #4]
 8042524:	681b      	ldr	r3, [r3, #0]
 8042526:	4618      	mov	r0, r3
 8042528:	f003 ffb2 	bl	8046490 <USB_ReadInterrupts>
 804252c:	4603      	mov	r3, r0
 804252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042536:	d104      	bne.n	8042542 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8042538:	687b      	ldr	r3, [r7, #4]
 804253a:	681b      	ldr	r3, [r3, #0]
 804253c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8042540:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8042542:	687b      	ldr	r3, [r7, #4]
 8042544:	681b      	ldr	r3, [r3, #0]
 8042546:	4618      	mov	r0, r3
 8042548:	f003 ffa2 	bl	8046490 <USB_ReadInterrupts>
 804254c:	4603      	mov	r3, r0
 804254e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042556:	d104      	bne.n	8042562 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8042558:	687b      	ldr	r3, [r7, #4]
 804255a:	681b      	ldr	r3, [r3, #0]
 804255c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8042560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8042562:	687b      	ldr	r3, [r7, #4]
 8042564:	681b      	ldr	r3, [r3, #0]
 8042566:	4618      	mov	r0, r3
 8042568:	f003 ff92 	bl	8046490 <USB_ReadInterrupts>
 804256c:	4603      	mov	r3, r0
 804256e:	f003 0302 	and.w	r3, r3, #2
 8042572:	2b02      	cmp	r3, #2
 8042574:	d103      	bne.n	804257e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8042576:	687b      	ldr	r3, [r7, #4]
 8042578:	681b      	ldr	r3, [r3, #0]
 804257a:	2202      	movs	r2, #2
 804257c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 804257e:	687b      	ldr	r3, [r7, #4]
 8042580:	681b      	ldr	r3, [r3, #0]
 8042582:	4618      	mov	r0, r3
 8042584:	f003 ff84 	bl	8046490 <USB_ReadInterrupts>
 8042588:	4603      	mov	r3, r0
 804258a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804258e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042592:	d11c      	bne.n	80425ce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8042594:	687b      	ldr	r3, [r7, #4]
 8042596:	681b      	ldr	r3, [r3, #0]
 8042598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 804259c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 804259e:	68fb      	ldr	r3, [r7, #12]
 80425a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80425a4:	681b      	ldr	r3, [r3, #0]
 80425a6:	f003 0301 	and.w	r3, r3, #1
 80425aa:	2b00      	cmp	r3, #0
 80425ac:	d10f      	bne.n	80425ce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80425ae:	2110      	movs	r1, #16
 80425b0:	6938      	ldr	r0, [r7, #16]
 80425b2:	f003 fe73 	bl	804629c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80425b6:	6938      	ldr	r0, [r7, #16]
 80425b8:	f003 fea4 	bl	8046304 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80425bc:	687b      	ldr	r3, [r7, #4]
 80425be:	681b      	ldr	r3, [r3, #0]
 80425c0:	2101      	movs	r1, #1
 80425c2:	4618      	mov	r0, r3
 80425c4:	f004 f87a 	bl	80466bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80425c8:	6878      	ldr	r0, [r7, #4]
 80425ca:	f006 fe43 	bl	8049254 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80425ce:	687b      	ldr	r3, [r7, #4]
 80425d0:	681b      	ldr	r3, [r3, #0]
 80425d2:	4618      	mov	r0, r3
 80425d4:	f003 ff5c 	bl	8046490 <USB_ReadInterrupts>
 80425d8:	4603      	mov	r3, r0
 80425da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80425de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80425e2:	d102      	bne.n	80425ea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80425e4:	6878      	ldr	r0, [r7, #4]
 80425e6:	f001 f89e 	bl	8043726 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80425ea:	687b      	ldr	r3, [r7, #4]
 80425ec:	681b      	ldr	r3, [r3, #0]
 80425ee:	4618      	mov	r0, r3
 80425f0:	f003 ff4e 	bl	8046490 <USB_ReadInterrupts>
 80425f4:	4603      	mov	r3, r0
 80425f6:	f003 0308 	and.w	r3, r3, #8
 80425fa:	2b08      	cmp	r3, #8
 80425fc:	d106      	bne.n	804260c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80425fe:	6878      	ldr	r0, [r7, #4]
 8042600:	f006 fe0c 	bl	804921c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8042604:	687b      	ldr	r3, [r7, #4]
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	2208      	movs	r2, #8
 804260a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 804260c:	687b      	ldr	r3, [r7, #4]
 804260e:	681b      	ldr	r3, [r3, #0]
 8042610:	4618      	mov	r0, r3
 8042612:	f003 ff3d 	bl	8046490 <USB_ReadInterrupts>
 8042616:	4603      	mov	r3, r0
 8042618:	f003 0310 	and.w	r3, r3, #16
 804261c:	2b10      	cmp	r3, #16
 804261e:	d101      	bne.n	8042624 <HAL_HCD_IRQHandler+0x158>
 8042620:	2301      	movs	r3, #1
 8042622:	e000      	b.n	8042626 <HAL_HCD_IRQHandler+0x15a>
 8042624:	2300      	movs	r3, #0
 8042626:	2b00      	cmp	r3, #0
 8042628:	d012      	beq.n	8042650 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 804262a:	687b      	ldr	r3, [r7, #4]
 804262c:	681b      	ldr	r3, [r3, #0]
 804262e:	699a      	ldr	r2, [r3, #24]
 8042630:	687b      	ldr	r3, [r7, #4]
 8042632:	681b      	ldr	r3, [r3, #0]
 8042634:	f022 0210 	bic.w	r2, r2, #16
 8042638:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 804263a:	6878      	ldr	r0, [r7, #4]
 804263c:	f000 ffa1 	bl	8043582 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8042640:	687b      	ldr	r3, [r7, #4]
 8042642:	681b      	ldr	r3, [r3, #0]
 8042644:	699a      	ldr	r2, [r3, #24]
 8042646:	687b      	ldr	r3, [r7, #4]
 8042648:	681b      	ldr	r3, [r3, #0]
 804264a:	f042 0210 	orr.w	r2, r2, #16
 804264e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8042650:	687b      	ldr	r3, [r7, #4]
 8042652:	681b      	ldr	r3, [r3, #0]
 8042654:	4618      	mov	r0, r3
 8042656:	f003 ff1b 	bl	8046490 <USB_ReadInterrupts>
 804265a:	4603      	mov	r3, r0
 804265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042664:	d13a      	bne.n	80426dc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8042666:	687b      	ldr	r3, [r7, #4]
 8042668:	681b      	ldr	r3, [r3, #0]
 804266a:	4618      	mov	r0, r3
 804266c:	f004 fb50 	bl	8046d10 <USB_HC_ReadInterrupt>
 8042670:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8042672:	2300      	movs	r3, #0
 8042674:	617b      	str	r3, [r7, #20]
 8042676:	e025      	b.n	80426c4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8042678:	697b      	ldr	r3, [r7, #20]
 804267a:	f003 030f 	and.w	r3, r3, #15
 804267e:	68ba      	ldr	r2, [r7, #8]
 8042680:	fa22 f303 	lsr.w	r3, r2, r3
 8042684:	f003 0301 	and.w	r3, r3, #1
 8042688:	2b00      	cmp	r3, #0
 804268a:	d018      	beq.n	80426be <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 804268c:	697b      	ldr	r3, [r7, #20]
 804268e:	015a      	lsls	r2, r3, #5
 8042690:	68fb      	ldr	r3, [r7, #12]
 8042692:	4413      	add	r3, r2
 8042694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042698:	681b      	ldr	r3, [r3, #0]
 804269a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804269e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80426a2:	d106      	bne.n	80426b2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80426a4:	697b      	ldr	r3, [r7, #20]
 80426a6:	b2db      	uxtb	r3, r3
 80426a8:	4619      	mov	r1, r3
 80426aa:	6878      	ldr	r0, [r7, #4]
 80426ac:	f000 f8ab 	bl	8042806 <HCD_HC_IN_IRQHandler>
 80426b0:	e005      	b.n	80426be <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80426b2:	697b      	ldr	r3, [r7, #20]
 80426b4:	b2db      	uxtb	r3, r3
 80426b6:	4619      	mov	r1, r3
 80426b8:	6878      	ldr	r0, [r7, #4]
 80426ba:	f000 fbf9 	bl	8042eb0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80426be:	697b      	ldr	r3, [r7, #20]
 80426c0:	3301      	adds	r3, #1
 80426c2:	617b      	str	r3, [r7, #20]
 80426c4:	687b      	ldr	r3, [r7, #4]
 80426c6:	689b      	ldr	r3, [r3, #8]
 80426c8:	697a      	ldr	r2, [r7, #20]
 80426ca:	429a      	cmp	r2, r3
 80426cc:	d3d4      	bcc.n	8042678 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80426ce:	687b      	ldr	r3, [r7, #4]
 80426d0:	681b      	ldr	r3, [r3, #0]
 80426d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80426d6:	615a      	str	r2, [r3, #20]
 80426d8:	e000      	b.n	80426dc <HAL_HCD_IRQHandler+0x210>
      return;
 80426da:	bf00      	nop
    }
  }
}
 80426dc:	3718      	adds	r7, #24
 80426de:	46bd      	mov	sp, r7
 80426e0:	bd80      	pop	{r7, pc}

080426e2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80426e2:	b580      	push	{r7, lr}
 80426e4:	b082      	sub	sp, #8
 80426e6:	af00      	add	r7, sp, #0
 80426e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80426ea:	687b      	ldr	r3, [r7, #4]
 80426ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80426f0:	2b01      	cmp	r3, #1
 80426f2:	d101      	bne.n	80426f8 <HAL_HCD_Start+0x16>
 80426f4:	2302      	movs	r3, #2
 80426f6:	e013      	b.n	8042720 <HAL_HCD_Start+0x3e>
 80426f8:	687b      	ldr	r3, [r7, #4]
 80426fa:	2201      	movs	r2, #1
 80426fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	681b      	ldr	r3, [r3, #0]
 8042704:	2101      	movs	r1, #1
 8042706:	4618      	mov	r0, r3
 8042708:	f004 f83c 	bl	8046784 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 804270c:	687b      	ldr	r3, [r7, #4]
 804270e:	681b      	ldr	r3, [r3, #0]
 8042710:	4618      	mov	r0, r3
 8042712:	f003 fd54 	bl	80461be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8042716:	687b      	ldr	r3, [r7, #4]
 8042718:	2200      	movs	r2, #0
 804271a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 804271e:	2300      	movs	r3, #0
}
 8042720:	4618      	mov	r0, r3
 8042722:	3708      	adds	r7, #8
 8042724:	46bd      	mov	sp, r7
 8042726:	bd80      	pop	{r7, pc}

08042728 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8042728:	b580      	push	{r7, lr}
 804272a:	b082      	sub	sp, #8
 804272c:	af00      	add	r7, sp, #0
 804272e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8042730:	687b      	ldr	r3, [r7, #4]
 8042732:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8042736:	2b01      	cmp	r3, #1
 8042738:	d101      	bne.n	804273e <HAL_HCD_Stop+0x16>
 804273a:	2302      	movs	r3, #2
 804273c:	e00d      	b.n	804275a <HAL_HCD_Stop+0x32>
 804273e:	687b      	ldr	r3, [r7, #4]
 8042740:	2201      	movs	r2, #1
 8042742:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8042746:	687b      	ldr	r3, [r7, #4]
 8042748:	681b      	ldr	r3, [r3, #0]
 804274a:	4618      	mov	r0, r3
 804274c:	f004 fc2a 	bl	8046fa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8042750:	687b      	ldr	r3, [r7, #4]
 8042752:	2200      	movs	r2, #0
 8042754:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8042758:	2300      	movs	r3, #0
}
 804275a:	4618      	mov	r0, r3
 804275c:	3708      	adds	r7, #8
 804275e:	46bd      	mov	sp, r7
 8042760:	bd80      	pop	{r7, pc}

08042762 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8042762:	b580      	push	{r7, lr}
 8042764:	b082      	sub	sp, #8
 8042766:	af00      	add	r7, sp, #0
 8042768:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 804276a:	687b      	ldr	r3, [r7, #4]
 804276c:	681b      	ldr	r3, [r3, #0]
 804276e:	4618      	mov	r0, r3
 8042770:	f003 ffde 	bl	8046730 <USB_ResetPort>
 8042774:	4603      	mov	r3, r0
}
 8042776:	4618      	mov	r0, r3
 8042778:	3708      	adds	r7, #8
 804277a:	46bd      	mov	sp, r7
 804277c:	bd80      	pop	{r7, pc}

0804277e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 804277e:	b480      	push	{r7}
 8042780:	b083      	sub	sp, #12
 8042782:	af00      	add	r7, sp, #0
 8042784:	6078      	str	r0, [r7, #4]
 8042786:	460b      	mov	r3, r1
 8042788:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 804278a:	78fb      	ldrb	r3, [r7, #3]
 804278c:	687a      	ldr	r2, [r7, #4]
 804278e:	212c      	movs	r1, #44	; 0x2c
 8042790:	fb01 f303 	mul.w	r3, r1, r3
 8042794:	4413      	add	r3, r2
 8042796:	3360      	adds	r3, #96	; 0x60
 8042798:	781b      	ldrb	r3, [r3, #0]
}
 804279a:	4618      	mov	r0, r3
 804279c:	370c      	adds	r7, #12
 804279e:	46bd      	mov	sp, r7
 80427a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427a4:	4770      	bx	lr

080427a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80427a6:	b480      	push	{r7}
 80427a8:	b083      	sub	sp, #12
 80427aa:	af00      	add	r7, sp, #0
 80427ac:	6078      	str	r0, [r7, #4]
 80427ae:	460b      	mov	r3, r1
 80427b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80427b2:	78fb      	ldrb	r3, [r7, #3]
 80427b4:	687a      	ldr	r2, [r7, #4]
 80427b6:	212c      	movs	r1, #44	; 0x2c
 80427b8:	fb01 f303 	mul.w	r3, r1, r3
 80427bc:	4413      	add	r3, r2
 80427be:	3350      	adds	r3, #80	; 0x50
 80427c0:	681b      	ldr	r3, [r3, #0]
}
 80427c2:	4618      	mov	r0, r3
 80427c4:	370c      	adds	r7, #12
 80427c6:	46bd      	mov	sp, r7
 80427c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427cc:	4770      	bx	lr

080427ce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80427ce:	b580      	push	{r7, lr}
 80427d0:	b082      	sub	sp, #8
 80427d2:	af00      	add	r7, sp, #0
 80427d4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80427d6:	687b      	ldr	r3, [r7, #4]
 80427d8:	681b      	ldr	r3, [r3, #0]
 80427da:	4618      	mov	r0, r3
 80427dc:	f004 f822 	bl	8046824 <USB_GetCurrentFrame>
 80427e0:	4603      	mov	r3, r0
}
 80427e2:	4618      	mov	r0, r3
 80427e4:	3708      	adds	r7, #8
 80427e6:	46bd      	mov	sp, r7
 80427e8:	bd80      	pop	{r7, pc}

080427ea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80427ea:	b580      	push	{r7, lr}
 80427ec:	b082      	sub	sp, #8
 80427ee:	af00      	add	r7, sp, #0
 80427f0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80427f2:	687b      	ldr	r3, [r7, #4]
 80427f4:	681b      	ldr	r3, [r3, #0]
 80427f6:	4618      	mov	r0, r3
 80427f8:	f003 fffd 	bl	80467f6 <USB_GetHostSpeed>
 80427fc:	4603      	mov	r3, r0
}
 80427fe:	4618      	mov	r0, r3
 8042800:	3708      	adds	r7, #8
 8042802:	46bd      	mov	sp, r7
 8042804:	bd80      	pop	{r7, pc}

08042806 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8042806:	b580      	push	{r7, lr}
 8042808:	b086      	sub	sp, #24
 804280a:	af00      	add	r7, sp, #0
 804280c:	6078      	str	r0, [r7, #4]
 804280e:	460b      	mov	r3, r1
 8042810:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8042812:	687b      	ldr	r3, [r7, #4]
 8042814:	681b      	ldr	r3, [r3, #0]
 8042816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042818:	697b      	ldr	r3, [r7, #20]
 804281a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 804281c:	78fb      	ldrb	r3, [r7, #3]
 804281e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8042820:	68fb      	ldr	r3, [r7, #12]
 8042822:	015a      	lsls	r2, r3, #5
 8042824:	693b      	ldr	r3, [r7, #16]
 8042826:	4413      	add	r3, r2
 8042828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804282c:	689b      	ldr	r3, [r3, #8]
 804282e:	f003 0304 	and.w	r3, r3, #4
 8042832:	2b04      	cmp	r3, #4
 8042834:	d11a      	bne.n	804286c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8042836:	68fb      	ldr	r3, [r7, #12]
 8042838:	015a      	lsls	r2, r3, #5
 804283a:	693b      	ldr	r3, [r7, #16]
 804283c:	4413      	add	r3, r2
 804283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042842:	461a      	mov	r2, r3
 8042844:	2304      	movs	r3, #4
 8042846:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8042848:	687a      	ldr	r2, [r7, #4]
 804284a:	68fb      	ldr	r3, [r7, #12]
 804284c:	212c      	movs	r1, #44	; 0x2c
 804284e:	fb01 f303 	mul.w	r3, r1, r3
 8042852:	4413      	add	r3, r2
 8042854:	3361      	adds	r3, #97	; 0x61
 8042856:	2206      	movs	r2, #6
 8042858:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	681b      	ldr	r3, [r3, #0]
 804285e:	68fa      	ldr	r2, [r7, #12]
 8042860:	b2d2      	uxtb	r2, r2
 8042862:	4611      	mov	r1, r2
 8042864:	4618      	mov	r0, r3
 8042866:	f004 fa64 	bl	8046d32 <USB_HC_Halt>
 804286a:	e0af      	b.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 804286c:	68fb      	ldr	r3, [r7, #12]
 804286e:	015a      	lsls	r2, r3, #5
 8042870:	693b      	ldr	r3, [r7, #16]
 8042872:	4413      	add	r3, r2
 8042874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042878:	689b      	ldr	r3, [r3, #8]
 804287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042882:	d11b      	bne.n	80428bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8042884:	68fb      	ldr	r3, [r7, #12]
 8042886:	015a      	lsls	r2, r3, #5
 8042888:	693b      	ldr	r3, [r7, #16]
 804288a:	4413      	add	r3, r2
 804288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042890:	461a      	mov	r2, r3
 8042892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8042896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8042898:	687a      	ldr	r2, [r7, #4]
 804289a:	68fb      	ldr	r3, [r7, #12]
 804289c:	212c      	movs	r1, #44	; 0x2c
 804289e:	fb01 f303 	mul.w	r3, r1, r3
 80428a2:	4413      	add	r3, r2
 80428a4:	3361      	adds	r3, #97	; 0x61
 80428a6:	2207      	movs	r2, #7
 80428a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	681b      	ldr	r3, [r3, #0]
 80428ae:	68fa      	ldr	r2, [r7, #12]
 80428b0:	b2d2      	uxtb	r2, r2
 80428b2:	4611      	mov	r1, r2
 80428b4:	4618      	mov	r0, r3
 80428b6:	f004 fa3c 	bl	8046d32 <USB_HC_Halt>
 80428ba:	e087      	b.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80428bc:	68fb      	ldr	r3, [r7, #12]
 80428be:	015a      	lsls	r2, r3, #5
 80428c0:	693b      	ldr	r3, [r7, #16]
 80428c2:	4413      	add	r3, r2
 80428c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80428c8:	689b      	ldr	r3, [r3, #8]
 80428ca:	f003 0320 	and.w	r3, r3, #32
 80428ce:	2b20      	cmp	r3, #32
 80428d0:	d109      	bne.n	80428e6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80428d2:	68fb      	ldr	r3, [r7, #12]
 80428d4:	015a      	lsls	r2, r3, #5
 80428d6:	693b      	ldr	r3, [r7, #16]
 80428d8:	4413      	add	r3, r2
 80428da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80428de:	461a      	mov	r2, r3
 80428e0:	2320      	movs	r3, #32
 80428e2:	6093      	str	r3, [r2, #8]
 80428e4:	e072      	b.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80428e6:	68fb      	ldr	r3, [r7, #12]
 80428e8:	015a      	lsls	r2, r3, #5
 80428ea:	693b      	ldr	r3, [r7, #16]
 80428ec:	4413      	add	r3, r2
 80428ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80428f2:	689b      	ldr	r3, [r3, #8]
 80428f4:	f003 0308 	and.w	r3, r3, #8
 80428f8:	2b08      	cmp	r3, #8
 80428fa:	d11a      	bne.n	8042932 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80428fc:	68fb      	ldr	r3, [r7, #12]
 80428fe:	015a      	lsls	r2, r3, #5
 8042900:	693b      	ldr	r3, [r7, #16]
 8042902:	4413      	add	r3, r2
 8042904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042908:	461a      	mov	r2, r3
 804290a:	2308      	movs	r3, #8
 804290c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 804290e:	687a      	ldr	r2, [r7, #4]
 8042910:	68fb      	ldr	r3, [r7, #12]
 8042912:	212c      	movs	r1, #44	; 0x2c
 8042914:	fb01 f303 	mul.w	r3, r1, r3
 8042918:	4413      	add	r3, r2
 804291a:	3361      	adds	r3, #97	; 0x61
 804291c:	2205      	movs	r2, #5
 804291e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042920:	687b      	ldr	r3, [r7, #4]
 8042922:	681b      	ldr	r3, [r3, #0]
 8042924:	68fa      	ldr	r2, [r7, #12]
 8042926:	b2d2      	uxtb	r2, r2
 8042928:	4611      	mov	r1, r2
 804292a:	4618      	mov	r0, r3
 804292c:	f004 fa01 	bl	8046d32 <USB_HC_Halt>
 8042930:	e04c      	b.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8042932:	68fb      	ldr	r3, [r7, #12]
 8042934:	015a      	lsls	r2, r3, #5
 8042936:	693b      	ldr	r3, [r7, #16]
 8042938:	4413      	add	r3, r2
 804293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804293e:	689b      	ldr	r3, [r3, #8]
 8042940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042948:	d11b      	bne.n	8042982 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 804294a:	68fb      	ldr	r3, [r7, #12]
 804294c:	015a      	lsls	r2, r3, #5
 804294e:	693b      	ldr	r3, [r7, #16]
 8042950:	4413      	add	r3, r2
 8042952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042956:	461a      	mov	r2, r3
 8042958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804295c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 804295e:	687a      	ldr	r2, [r7, #4]
 8042960:	68fb      	ldr	r3, [r7, #12]
 8042962:	212c      	movs	r1, #44	; 0x2c
 8042964:	fb01 f303 	mul.w	r3, r1, r3
 8042968:	4413      	add	r3, r2
 804296a:	3361      	adds	r3, #97	; 0x61
 804296c:	2208      	movs	r2, #8
 804296e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042970:	687b      	ldr	r3, [r7, #4]
 8042972:	681b      	ldr	r3, [r3, #0]
 8042974:	68fa      	ldr	r2, [r7, #12]
 8042976:	b2d2      	uxtb	r2, r2
 8042978:	4611      	mov	r1, r2
 804297a:	4618      	mov	r0, r3
 804297c:	f004 f9d9 	bl	8046d32 <USB_HC_Halt>
 8042980:	e024      	b.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8042982:	68fb      	ldr	r3, [r7, #12]
 8042984:	015a      	lsls	r2, r3, #5
 8042986:	693b      	ldr	r3, [r7, #16]
 8042988:	4413      	add	r3, r2
 804298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804298e:	689b      	ldr	r3, [r3, #8]
 8042990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042994:	2b80      	cmp	r3, #128	; 0x80
 8042996:	d119      	bne.n	80429cc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8042998:	68fb      	ldr	r3, [r7, #12]
 804299a:	015a      	lsls	r2, r3, #5
 804299c:	693b      	ldr	r3, [r7, #16]
 804299e:	4413      	add	r3, r2
 80429a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80429a4:	461a      	mov	r2, r3
 80429a6:	2380      	movs	r3, #128	; 0x80
 80429a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80429aa:	687a      	ldr	r2, [r7, #4]
 80429ac:	68fb      	ldr	r3, [r7, #12]
 80429ae:	212c      	movs	r1, #44	; 0x2c
 80429b0:	fb01 f303 	mul.w	r3, r1, r3
 80429b4:	4413      	add	r3, r2
 80429b6:	3361      	adds	r3, #97	; 0x61
 80429b8:	2206      	movs	r2, #6
 80429ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80429bc:	687b      	ldr	r3, [r7, #4]
 80429be:	681b      	ldr	r3, [r3, #0]
 80429c0:	68fa      	ldr	r2, [r7, #12]
 80429c2:	b2d2      	uxtb	r2, r2
 80429c4:	4611      	mov	r1, r2
 80429c6:	4618      	mov	r0, r3
 80429c8:	f004 f9b3 	bl	8046d32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80429cc:	68fb      	ldr	r3, [r7, #12]
 80429ce:	015a      	lsls	r2, r3, #5
 80429d0:	693b      	ldr	r3, [r7, #16]
 80429d2:	4413      	add	r3, r2
 80429d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80429d8:	689b      	ldr	r3, [r3, #8]
 80429da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80429de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80429e2:	d112      	bne.n	8042a0a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80429e4:	687b      	ldr	r3, [r7, #4]
 80429e6:	681b      	ldr	r3, [r3, #0]
 80429e8:	68fa      	ldr	r2, [r7, #12]
 80429ea:	b2d2      	uxtb	r2, r2
 80429ec:	4611      	mov	r1, r2
 80429ee:	4618      	mov	r0, r3
 80429f0:	f004 f99f 	bl	8046d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80429f4:	68fb      	ldr	r3, [r7, #12]
 80429f6:	015a      	lsls	r2, r3, #5
 80429f8:	693b      	ldr	r3, [r7, #16]
 80429fa:	4413      	add	r3, r2
 80429fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042a00:	461a      	mov	r2, r3
 8042a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8042a06:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8042a08:	e24e      	b.n	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8042a0a:	68fb      	ldr	r3, [r7, #12]
 8042a0c:	015a      	lsls	r2, r3, #5
 8042a0e:	693b      	ldr	r3, [r7, #16]
 8042a10:	4413      	add	r3, r2
 8042a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042a16:	689b      	ldr	r3, [r3, #8]
 8042a18:	f003 0301 	and.w	r3, r3, #1
 8042a1c:	2b01      	cmp	r3, #1
 8042a1e:	f040 80df 	bne.w	8042be0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	691b      	ldr	r3, [r3, #16]
 8042a26:	2b00      	cmp	r3, #0
 8042a28:	d019      	beq.n	8042a5e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8042a2a:	687a      	ldr	r2, [r7, #4]
 8042a2c:	68fb      	ldr	r3, [r7, #12]
 8042a2e:	212c      	movs	r1, #44	; 0x2c
 8042a30:	fb01 f303 	mul.w	r3, r1, r3
 8042a34:	4413      	add	r3, r2
 8042a36:	3348      	adds	r3, #72	; 0x48
 8042a38:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8042a3a:	68fb      	ldr	r3, [r7, #12]
 8042a3c:	0159      	lsls	r1, r3, #5
 8042a3e:	693b      	ldr	r3, [r7, #16]
 8042a40:	440b      	add	r3, r1
 8042a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042a46:	691b      	ldr	r3, [r3, #16]
 8042a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8042a4c:	1ad2      	subs	r2, r2, r3
 8042a4e:	6879      	ldr	r1, [r7, #4]
 8042a50:	68fb      	ldr	r3, [r7, #12]
 8042a52:	202c      	movs	r0, #44	; 0x2c
 8042a54:	fb00 f303 	mul.w	r3, r0, r3
 8042a58:	440b      	add	r3, r1
 8042a5a:	3350      	adds	r3, #80	; 0x50
 8042a5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8042a5e:	687a      	ldr	r2, [r7, #4]
 8042a60:	68fb      	ldr	r3, [r7, #12]
 8042a62:	212c      	movs	r1, #44	; 0x2c
 8042a64:	fb01 f303 	mul.w	r3, r1, r3
 8042a68:	4413      	add	r3, r2
 8042a6a:	3361      	adds	r3, #97	; 0x61
 8042a6c:	2201      	movs	r2, #1
 8042a6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8042a70:	687a      	ldr	r2, [r7, #4]
 8042a72:	68fb      	ldr	r3, [r7, #12]
 8042a74:	212c      	movs	r1, #44	; 0x2c
 8042a76:	fb01 f303 	mul.w	r3, r1, r3
 8042a7a:	4413      	add	r3, r2
 8042a7c:	335c      	adds	r3, #92	; 0x5c
 8042a7e:	2200      	movs	r2, #0
 8042a80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8042a82:	68fb      	ldr	r3, [r7, #12]
 8042a84:	015a      	lsls	r2, r3, #5
 8042a86:	693b      	ldr	r3, [r7, #16]
 8042a88:	4413      	add	r3, r2
 8042a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042a8e:	461a      	mov	r2, r3
 8042a90:	2301      	movs	r3, #1
 8042a92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8042a94:	687a      	ldr	r2, [r7, #4]
 8042a96:	68fb      	ldr	r3, [r7, #12]
 8042a98:	212c      	movs	r1, #44	; 0x2c
 8042a9a:	fb01 f303 	mul.w	r3, r1, r3
 8042a9e:	4413      	add	r3, r2
 8042aa0:	333f      	adds	r3, #63	; 0x3f
 8042aa2:	781b      	ldrb	r3, [r3, #0]
 8042aa4:	2b00      	cmp	r3, #0
 8042aa6:	d009      	beq.n	8042abc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8042aa8:	687a      	ldr	r2, [r7, #4]
 8042aaa:	68fb      	ldr	r3, [r7, #12]
 8042aac:	212c      	movs	r1, #44	; 0x2c
 8042aae:	fb01 f303 	mul.w	r3, r1, r3
 8042ab2:	4413      	add	r3, r2
 8042ab4:	333f      	adds	r3, #63	; 0x3f
 8042ab6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8042ab8:	2b02      	cmp	r3, #2
 8042aba:	d111      	bne.n	8042ae0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042abc:	687b      	ldr	r3, [r7, #4]
 8042abe:	681b      	ldr	r3, [r3, #0]
 8042ac0:	68fa      	ldr	r2, [r7, #12]
 8042ac2:	b2d2      	uxtb	r2, r2
 8042ac4:	4611      	mov	r1, r2
 8042ac6:	4618      	mov	r0, r3
 8042ac8:	f004 f933 	bl	8046d32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8042acc:	68fb      	ldr	r3, [r7, #12]
 8042ace:	015a      	lsls	r2, r3, #5
 8042ad0:	693b      	ldr	r3, [r7, #16]
 8042ad2:	4413      	add	r3, r2
 8042ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042ad8:	461a      	mov	r2, r3
 8042ada:	2310      	movs	r3, #16
 8042adc:	6093      	str	r3, [r2, #8]
 8042ade:	e03a      	b.n	8042b56 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8042ae0:	687a      	ldr	r2, [r7, #4]
 8042ae2:	68fb      	ldr	r3, [r7, #12]
 8042ae4:	212c      	movs	r1, #44	; 0x2c
 8042ae6:	fb01 f303 	mul.w	r3, r1, r3
 8042aea:	4413      	add	r3, r2
 8042aec:	333f      	adds	r3, #63	; 0x3f
 8042aee:	781b      	ldrb	r3, [r3, #0]
 8042af0:	2b03      	cmp	r3, #3
 8042af2:	d009      	beq.n	8042b08 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8042af4:	687a      	ldr	r2, [r7, #4]
 8042af6:	68fb      	ldr	r3, [r7, #12]
 8042af8:	212c      	movs	r1, #44	; 0x2c
 8042afa:	fb01 f303 	mul.w	r3, r1, r3
 8042afe:	4413      	add	r3, r2
 8042b00:	333f      	adds	r3, #63	; 0x3f
 8042b02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8042b04:	2b01      	cmp	r3, #1
 8042b06:	d126      	bne.n	8042b56 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8042b08:	68fb      	ldr	r3, [r7, #12]
 8042b0a:	015a      	lsls	r2, r3, #5
 8042b0c:	693b      	ldr	r3, [r7, #16]
 8042b0e:	4413      	add	r3, r2
 8042b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042b14:	681b      	ldr	r3, [r3, #0]
 8042b16:	68fa      	ldr	r2, [r7, #12]
 8042b18:	0151      	lsls	r1, r2, #5
 8042b1a:	693a      	ldr	r2, [r7, #16]
 8042b1c:	440a      	add	r2, r1
 8042b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8042b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8042b26:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8042b28:	687a      	ldr	r2, [r7, #4]
 8042b2a:	68fb      	ldr	r3, [r7, #12]
 8042b2c:	212c      	movs	r1, #44	; 0x2c
 8042b2e:	fb01 f303 	mul.w	r3, r1, r3
 8042b32:	4413      	add	r3, r2
 8042b34:	3360      	adds	r3, #96	; 0x60
 8042b36:	2201      	movs	r2, #1
 8042b38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8042b3a:	68fb      	ldr	r3, [r7, #12]
 8042b3c:	b2d9      	uxtb	r1, r3
 8042b3e:	687a      	ldr	r2, [r7, #4]
 8042b40:	68fb      	ldr	r3, [r7, #12]
 8042b42:	202c      	movs	r0, #44	; 0x2c
 8042b44:	fb00 f303 	mul.w	r3, r0, r3
 8042b48:	4413      	add	r3, r2
 8042b4a:	3360      	adds	r3, #96	; 0x60
 8042b4c:	781b      	ldrb	r3, [r3, #0]
 8042b4e:	461a      	mov	r2, r3
 8042b50:	6878      	ldr	r0, [r7, #4]
 8042b52:	f006 fb8d 	bl	8049270 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8042b56:	687b      	ldr	r3, [r7, #4]
 8042b58:	691b      	ldr	r3, [r3, #16]
 8042b5a:	2b01      	cmp	r3, #1
 8042b5c:	d12b      	bne.n	8042bb6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8042b5e:	687a      	ldr	r2, [r7, #4]
 8042b60:	68fb      	ldr	r3, [r7, #12]
 8042b62:	212c      	movs	r1, #44	; 0x2c
 8042b64:	fb01 f303 	mul.w	r3, r1, r3
 8042b68:	4413      	add	r3, r2
 8042b6a:	3348      	adds	r3, #72	; 0x48
 8042b6c:	681b      	ldr	r3, [r3, #0]
 8042b6e:	6879      	ldr	r1, [r7, #4]
 8042b70:	68fa      	ldr	r2, [r7, #12]
 8042b72:	202c      	movs	r0, #44	; 0x2c
 8042b74:	fb00 f202 	mul.w	r2, r0, r2
 8042b78:	440a      	add	r2, r1
 8042b7a:	3240      	adds	r2, #64	; 0x40
 8042b7c:	8812      	ldrh	r2, [r2, #0]
 8042b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8042b82:	f003 0301 	and.w	r3, r3, #1
 8042b86:	2b00      	cmp	r3, #0
 8042b88:	f000 818e 	beq.w	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8042b8c:	687a      	ldr	r2, [r7, #4]
 8042b8e:	68fb      	ldr	r3, [r7, #12]
 8042b90:	212c      	movs	r1, #44	; 0x2c
 8042b92:	fb01 f303 	mul.w	r3, r1, r3
 8042b96:	4413      	add	r3, r2
 8042b98:	3354      	adds	r3, #84	; 0x54
 8042b9a:	781b      	ldrb	r3, [r3, #0]
 8042b9c:	f083 0301 	eor.w	r3, r3, #1
 8042ba0:	b2d8      	uxtb	r0, r3
 8042ba2:	687a      	ldr	r2, [r7, #4]
 8042ba4:	68fb      	ldr	r3, [r7, #12]
 8042ba6:	212c      	movs	r1, #44	; 0x2c
 8042ba8:	fb01 f303 	mul.w	r3, r1, r3
 8042bac:	4413      	add	r3, r2
 8042bae:	3354      	adds	r3, #84	; 0x54
 8042bb0:	4602      	mov	r2, r0
 8042bb2:	701a      	strb	r2, [r3, #0]
}
 8042bb4:	e178      	b.n	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8042bb6:	687a      	ldr	r2, [r7, #4]
 8042bb8:	68fb      	ldr	r3, [r7, #12]
 8042bba:	212c      	movs	r1, #44	; 0x2c
 8042bbc:	fb01 f303 	mul.w	r3, r1, r3
 8042bc0:	4413      	add	r3, r2
 8042bc2:	3354      	adds	r3, #84	; 0x54
 8042bc4:	781b      	ldrb	r3, [r3, #0]
 8042bc6:	f083 0301 	eor.w	r3, r3, #1
 8042bca:	b2d8      	uxtb	r0, r3
 8042bcc:	687a      	ldr	r2, [r7, #4]
 8042bce:	68fb      	ldr	r3, [r7, #12]
 8042bd0:	212c      	movs	r1, #44	; 0x2c
 8042bd2:	fb01 f303 	mul.w	r3, r1, r3
 8042bd6:	4413      	add	r3, r2
 8042bd8:	3354      	adds	r3, #84	; 0x54
 8042bda:	4602      	mov	r2, r0
 8042bdc:	701a      	strb	r2, [r3, #0]
}
 8042bde:	e163      	b.n	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8042be0:	68fb      	ldr	r3, [r7, #12]
 8042be2:	015a      	lsls	r2, r3, #5
 8042be4:	693b      	ldr	r3, [r7, #16]
 8042be6:	4413      	add	r3, r2
 8042be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042bec:	689b      	ldr	r3, [r3, #8]
 8042bee:	f003 0302 	and.w	r3, r3, #2
 8042bf2:	2b02      	cmp	r3, #2
 8042bf4:	f040 80f6 	bne.w	8042de4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8042bf8:	687a      	ldr	r2, [r7, #4]
 8042bfa:	68fb      	ldr	r3, [r7, #12]
 8042bfc:	212c      	movs	r1, #44	; 0x2c
 8042bfe:	fb01 f303 	mul.w	r3, r1, r3
 8042c02:	4413      	add	r3, r2
 8042c04:	3361      	adds	r3, #97	; 0x61
 8042c06:	781b      	ldrb	r3, [r3, #0]
 8042c08:	2b01      	cmp	r3, #1
 8042c0a:	d109      	bne.n	8042c20 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8042c0c:	687a      	ldr	r2, [r7, #4]
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	212c      	movs	r1, #44	; 0x2c
 8042c12:	fb01 f303 	mul.w	r3, r1, r3
 8042c16:	4413      	add	r3, r2
 8042c18:	3360      	adds	r3, #96	; 0x60
 8042c1a:	2201      	movs	r2, #1
 8042c1c:	701a      	strb	r2, [r3, #0]
 8042c1e:	e0c9      	b.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8042c20:	687a      	ldr	r2, [r7, #4]
 8042c22:	68fb      	ldr	r3, [r7, #12]
 8042c24:	212c      	movs	r1, #44	; 0x2c
 8042c26:	fb01 f303 	mul.w	r3, r1, r3
 8042c2a:	4413      	add	r3, r2
 8042c2c:	3361      	adds	r3, #97	; 0x61
 8042c2e:	781b      	ldrb	r3, [r3, #0]
 8042c30:	2b05      	cmp	r3, #5
 8042c32:	d109      	bne.n	8042c48 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8042c34:	687a      	ldr	r2, [r7, #4]
 8042c36:	68fb      	ldr	r3, [r7, #12]
 8042c38:	212c      	movs	r1, #44	; 0x2c
 8042c3a:	fb01 f303 	mul.w	r3, r1, r3
 8042c3e:	4413      	add	r3, r2
 8042c40:	3360      	adds	r3, #96	; 0x60
 8042c42:	2205      	movs	r2, #5
 8042c44:	701a      	strb	r2, [r3, #0]
 8042c46:	e0b5      	b.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8042c48:	687a      	ldr	r2, [r7, #4]
 8042c4a:	68fb      	ldr	r3, [r7, #12]
 8042c4c:	212c      	movs	r1, #44	; 0x2c
 8042c4e:	fb01 f303 	mul.w	r3, r1, r3
 8042c52:	4413      	add	r3, r2
 8042c54:	3361      	adds	r3, #97	; 0x61
 8042c56:	781b      	ldrb	r3, [r3, #0]
 8042c58:	2b06      	cmp	r3, #6
 8042c5a:	d009      	beq.n	8042c70 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8042c5c:	687a      	ldr	r2, [r7, #4]
 8042c5e:	68fb      	ldr	r3, [r7, #12]
 8042c60:	212c      	movs	r1, #44	; 0x2c
 8042c62:	fb01 f303 	mul.w	r3, r1, r3
 8042c66:	4413      	add	r3, r2
 8042c68:	3361      	adds	r3, #97	; 0x61
 8042c6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8042c6c:	2b08      	cmp	r3, #8
 8042c6e:	d150      	bne.n	8042d12 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8042c70:	687a      	ldr	r2, [r7, #4]
 8042c72:	68fb      	ldr	r3, [r7, #12]
 8042c74:	212c      	movs	r1, #44	; 0x2c
 8042c76:	fb01 f303 	mul.w	r3, r1, r3
 8042c7a:	4413      	add	r3, r2
 8042c7c:	335c      	adds	r3, #92	; 0x5c
 8042c7e:	681b      	ldr	r3, [r3, #0]
 8042c80:	1c5a      	adds	r2, r3, #1
 8042c82:	6879      	ldr	r1, [r7, #4]
 8042c84:	68fb      	ldr	r3, [r7, #12]
 8042c86:	202c      	movs	r0, #44	; 0x2c
 8042c88:	fb00 f303 	mul.w	r3, r0, r3
 8042c8c:	440b      	add	r3, r1
 8042c8e:	335c      	adds	r3, #92	; 0x5c
 8042c90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8042c92:	687a      	ldr	r2, [r7, #4]
 8042c94:	68fb      	ldr	r3, [r7, #12]
 8042c96:	212c      	movs	r1, #44	; 0x2c
 8042c98:	fb01 f303 	mul.w	r3, r1, r3
 8042c9c:	4413      	add	r3, r2
 8042c9e:	335c      	adds	r3, #92	; 0x5c
 8042ca0:	681b      	ldr	r3, [r3, #0]
 8042ca2:	2b02      	cmp	r3, #2
 8042ca4:	d912      	bls.n	8042ccc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8042ca6:	687a      	ldr	r2, [r7, #4]
 8042ca8:	68fb      	ldr	r3, [r7, #12]
 8042caa:	212c      	movs	r1, #44	; 0x2c
 8042cac:	fb01 f303 	mul.w	r3, r1, r3
 8042cb0:	4413      	add	r3, r2
 8042cb2:	335c      	adds	r3, #92	; 0x5c
 8042cb4:	2200      	movs	r2, #0
 8042cb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8042cb8:	687a      	ldr	r2, [r7, #4]
 8042cba:	68fb      	ldr	r3, [r7, #12]
 8042cbc:	212c      	movs	r1, #44	; 0x2c
 8042cbe:	fb01 f303 	mul.w	r3, r1, r3
 8042cc2:	4413      	add	r3, r2
 8042cc4:	3360      	adds	r3, #96	; 0x60
 8042cc6:	2204      	movs	r2, #4
 8042cc8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8042cca:	e073      	b.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8042ccc:	687a      	ldr	r2, [r7, #4]
 8042cce:	68fb      	ldr	r3, [r7, #12]
 8042cd0:	212c      	movs	r1, #44	; 0x2c
 8042cd2:	fb01 f303 	mul.w	r3, r1, r3
 8042cd6:	4413      	add	r3, r2
 8042cd8:	3360      	adds	r3, #96	; 0x60
 8042cda:	2202      	movs	r2, #2
 8042cdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8042cde:	68fb      	ldr	r3, [r7, #12]
 8042ce0:	015a      	lsls	r2, r3, #5
 8042ce2:	693b      	ldr	r3, [r7, #16]
 8042ce4:	4413      	add	r3, r2
 8042ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042cea:	681b      	ldr	r3, [r3, #0]
 8042cec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8042cee:	68bb      	ldr	r3, [r7, #8]
 8042cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8042cf4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8042cf6:	68bb      	ldr	r3, [r7, #8]
 8042cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8042cfc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8042cfe:	68fb      	ldr	r3, [r7, #12]
 8042d00:	015a      	lsls	r2, r3, #5
 8042d02:	693b      	ldr	r3, [r7, #16]
 8042d04:	4413      	add	r3, r2
 8042d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042d0a:	461a      	mov	r2, r3
 8042d0c:	68bb      	ldr	r3, [r7, #8]
 8042d0e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8042d10:	e050      	b.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8042d12:	687a      	ldr	r2, [r7, #4]
 8042d14:	68fb      	ldr	r3, [r7, #12]
 8042d16:	212c      	movs	r1, #44	; 0x2c
 8042d18:	fb01 f303 	mul.w	r3, r1, r3
 8042d1c:	4413      	add	r3, r2
 8042d1e:	3361      	adds	r3, #97	; 0x61
 8042d20:	781b      	ldrb	r3, [r3, #0]
 8042d22:	2b03      	cmp	r3, #3
 8042d24:	d122      	bne.n	8042d6c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8042d26:	687a      	ldr	r2, [r7, #4]
 8042d28:	68fb      	ldr	r3, [r7, #12]
 8042d2a:	212c      	movs	r1, #44	; 0x2c
 8042d2c:	fb01 f303 	mul.w	r3, r1, r3
 8042d30:	4413      	add	r3, r2
 8042d32:	3360      	adds	r3, #96	; 0x60
 8042d34:	2202      	movs	r2, #2
 8042d36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8042d38:	68fb      	ldr	r3, [r7, #12]
 8042d3a:	015a      	lsls	r2, r3, #5
 8042d3c:	693b      	ldr	r3, [r7, #16]
 8042d3e:	4413      	add	r3, r2
 8042d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042d44:	681b      	ldr	r3, [r3, #0]
 8042d46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8042d48:	68bb      	ldr	r3, [r7, #8]
 8042d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8042d4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8042d50:	68bb      	ldr	r3, [r7, #8]
 8042d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8042d56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8042d58:	68fb      	ldr	r3, [r7, #12]
 8042d5a:	015a      	lsls	r2, r3, #5
 8042d5c:	693b      	ldr	r3, [r7, #16]
 8042d5e:	4413      	add	r3, r2
 8042d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042d64:	461a      	mov	r2, r3
 8042d66:	68bb      	ldr	r3, [r7, #8]
 8042d68:	6013      	str	r3, [r2, #0]
 8042d6a:	e023      	b.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8042d6c:	687a      	ldr	r2, [r7, #4]
 8042d6e:	68fb      	ldr	r3, [r7, #12]
 8042d70:	212c      	movs	r1, #44	; 0x2c
 8042d72:	fb01 f303 	mul.w	r3, r1, r3
 8042d76:	4413      	add	r3, r2
 8042d78:	3361      	adds	r3, #97	; 0x61
 8042d7a:	781b      	ldrb	r3, [r3, #0]
 8042d7c:	2b07      	cmp	r3, #7
 8042d7e:	d119      	bne.n	8042db4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8042d80:	687a      	ldr	r2, [r7, #4]
 8042d82:	68fb      	ldr	r3, [r7, #12]
 8042d84:	212c      	movs	r1, #44	; 0x2c
 8042d86:	fb01 f303 	mul.w	r3, r1, r3
 8042d8a:	4413      	add	r3, r2
 8042d8c:	335c      	adds	r3, #92	; 0x5c
 8042d8e:	681b      	ldr	r3, [r3, #0]
 8042d90:	1c5a      	adds	r2, r3, #1
 8042d92:	6879      	ldr	r1, [r7, #4]
 8042d94:	68fb      	ldr	r3, [r7, #12]
 8042d96:	202c      	movs	r0, #44	; 0x2c
 8042d98:	fb00 f303 	mul.w	r3, r0, r3
 8042d9c:	440b      	add	r3, r1
 8042d9e:	335c      	adds	r3, #92	; 0x5c
 8042da0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8042da2:	687a      	ldr	r2, [r7, #4]
 8042da4:	68fb      	ldr	r3, [r7, #12]
 8042da6:	212c      	movs	r1, #44	; 0x2c
 8042da8:	fb01 f303 	mul.w	r3, r1, r3
 8042dac:	4413      	add	r3, r2
 8042dae:	3360      	adds	r3, #96	; 0x60
 8042db0:	2204      	movs	r2, #4
 8042db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8042db4:	68fb      	ldr	r3, [r7, #12]
 8042db6:	015a      	lsls	r2, r3, #5
 8042db8:	693b      	ldr	r3, [r7, #16]
 8042dba:	4413      	add	r3, r2
 8042dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042dc0:	461a      	mov	r2, r3
 8042dc2:	2302      	movs	r3, #2
 8042dc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8042dc6:	68fb      	ldr	r3, [r7, #12]
 8042dc8:	b2d9      	uxtb	r1, r3
 8042dca:	687a      	ldr	r2, [r7, #4]
 8042dcc:	68fb      	ldr	r3, [r7, #12]
 8042dce:	202c      	movs	r0, #44	; 0x2c
 8042dd0:	fb00 f303 	mul.w	r3, r0, r3
 8042dd4:	4413      	add	r3, r2
 8042dd6:	3360      	adds	r3, #96	; 0x60
 8042dd8:	781b      	ldrb	r3, [r3, #0]
 8042dda:	461a      	mov	r2, r3
 8042ddc:	6878      	ldr	r0, [r7, #4]
 8042dde:	f006 fa47 	bl	8049270 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8042de2:	e061      	b.n	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8042de4:	68fb      	ldr	r3, [r7, #12]
 8042de6:	015a      	lsls	r2, r3, #5
 8042de8:	693b      	ldr	r3, [r7, #16]
 8042dea:	4413      	add	r3, r2
 8042dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042df0:	689b      	ldr	r3, [r3, #8]
 8042df2:	f003 0310 	and.w	r3, r3, #16
 8042df6:	2b10      	cmp	r3, #16
 8042df8:	d156      	bne.n	8042ea8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8042dfa:	687a      	ldr	r2, [r7, #4]
 8042dfc:	68fb      	ldr	r3, [r7, #12]
 8042dfe:	212c      	movs	r1, #44	; 0x2c
 8042e00:	fb01 f303 	mul.w	r3, r1, r3
 8042e04:	4413      	add	r3, r2
 8042e06:	333f      	adds	r3, #63	; 0x3f
 8042e08:	781b      	ldrb	r3, [r3, #0]
 8042e0a:	2b03      	cmp	r3, #3
 8042e0c:	d111      	bne.n	8042e32 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8042e0e:	687a      	ldr	r2, [r7, #4]
 8042e10:	68fb      	ldr	r3, [r7, #12]
 8042e12:	212c      	movs	r1, #44	; 0x2c
 8042e14:	fb01 f303 	mul.w	r3, r1, r3
 8042e18:	4413      	add	r3, r2
 8042e1a:	335c      	adds	r3, #92	; 0x5c
 8042e1c:	2200      	movs	r2, #0
 8042e1e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042e20:	687b      	ldr	r3, [r7, #4]
 8042e22:	681b      	ldr	r3, [r3, #0]
 8042e24:	68fa      	ldr	r2, [r7, #12]
 8042e26:	b2d2      	uxtb	r2, r2
 8042e28:	4611      	mov	r1, r2
 8042e2a:	4618      	mov	r0, r3
 8042e2c:	f003 ff81 	bl	8046d32 <USB_HC_Halt>
 8042e30:	e031      	b.n	8042e96 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8042e32:	687a      	ldr	r2, [r7, #4]
 8042e34:	68fb      	ldr	r3, [r7, #12]
 8042e36:	212c      	movs	r1, #44	; 0x2c
 8042e38:	fb01 f303 	mul.w	r3, r1, r3
 8042e3c:	4413      	add	r3, r2
 8042e3e:	333f      	adds	r3, #63	; 0x3f
 8042e40:	781b      	ldrb	r3, [r3, #0]
 8042e42:	2b00      	cmp	r3, #0
 8042e44:	d009      	beq.n	8042e5a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8042e46:	687a      	ldr	r2, [r7, #4]
 8042e48:	68fb      	ldr	r3, [r7, #12]
 8042e4a:	212c      	movs	r1, #44	; 0x2c
 8042e4c:	fb01 f303 	mul.w	r3, r1, r3
 8042e50:	4413      	add	r3, r2
 8042e52:	333f      	adds	r3, #63	; 0x3f
 8042e54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8042e56:	2b02      	cmp	r3, #2
 8042e58:	d11d      	bne.n	8042e96 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8042e5a:	687a      	ldr	r2, [r7, #4]
 8042e5c:	68fb      	ldr	r3, [r7, #12]
 8042e5e:	212c      	movs	r1, #44	; 0x2c
 8042e60:	fb01 f303 	mul.w	r3, r1, r3
 8042e64:	4413      	add	r3, r2
 8042e66:	335c      	adds	r3, #92	; 0x5c
 8042e68:	2200      	movs	r2, #0
 8042e6a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8042e6c:	687b      	ldr	r3, [r7, #4]
 8042e6e:	691b      	ldr	r3, [r3, #16]
 8042e70:	2b00      	cmp	r3, #0
 8042e72:	d110      	bne.n	8042e96 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8042e74:	687a      	ldr	r2, [r7, #4]
 8042e76:	68fb      	ldr	r3, [r7, #12]
 8042e78:	212c      	movs	r1, #44	; 0x2c
 8042e7a:	fb01 f303 	mul.w	r3, r1, r3
 8042e7e:	4413      	add	r3, r2
 8042e80:	3361      	adds	r3, #97	; 0x61
 8042e82:	2203      	movs	r2, #3
 8042e84:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042e86:	687b      	ldr	r3, [r7, #4]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	68fa      	ldr	r2, [r7, #12]
 8042e8c:	b2d2      	uxtb	r2, r2
 8042e8e:	4611      	mov	r1, r2
 8042e90:	4618      	mov	r0, r3
 8042e92:	f003 ff4e 	bl	8046d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8042e96:	68fb      	ldr	r3, [r7, #12]
 8042e98:	015a      	lsls	r2, r3, #5
 8042e9a:	693b      	ldr	r3, [r7, #16]
 8042e9c:	4413      	add	r3, r2
 8042e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042ea2:	461a      	mov	r2, r3
 8042ea4:	2310      	movs	r3, #16
 8042ea6:	6093      	str	r3, [r2, #8]
}
 8042ea8:	bf00      	nop
 8042eaa:	3718      	adds	r7, #24
 8042eac:	46bd      	mov	sp, r7
 8042eae:	bd80      	pop	{r7, pc}

08042eb0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8042eb0:	b580      	push	{r7, lr}
 8042eb2:	b088      	sub	sp, #32
 8042eb4:	af00      	add	r7, sp, #0
 8042eb6:	6078      	str	r0, [r7, #4]
 8042eb8:	460b      	mov	r3, r1
 8042eba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8042ebc:	687b      	ldr	r3, [r7, #4]
 8042ebe:	681b      	ldr	r3, [r3, #0]
 8042ec0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042ec2:	69fb      	ldr	r3, [r7, #28]
 8042ec4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8042ec6:	78fb      	ldrb	r3, [r7, #3]
 8042ec8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8042eca:	697b      	ldr	r3, [r7, #20]
 8042ecc:	015a      	lsls	r2, r3, #5
 8042ece:	69bb      	ldr	r3, [r7, #24]
 8042ed0:	4413      	add	r3, r2
 8042ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042ed6:	689b      	ldr	r3, [r3, #8]
 8042ed8:	f003 0304 	and.w	r3, r3, #4
 8042edc:	2b04      	cmp	r3, #4
 8042ede:	d11a      	bne.n	8042f16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8042ee0:	697b      	ldr	r3, [r7, #20]
 8042ee2:	015a      	lsls	r2, r3, #5
 8042ee4:	69bb      	ldr	r3, [r7, #24]
 8042ee6:	4413      	add	r3, r2
 8042ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042eec:	461a      	mov	r2, r3
 8042eee:	2304      	movs	r3, #4
 8042ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8042ef2:	687a      	ldr	r2, [r7, #4]
 8042ef4:	697b      	ldr	r3, [r7, #20]
 8042ef6:	212c      	movs	r1, #44	; 0x2c
 8042ef8:	fb01 f303 	mul.w	r3, r1, r3
 8042efc:	4413      	add	r3, r2
 8042efe:	3361      	adds	r3, #97	; 0x61
 8042f00:	2206      	movs	r2, #6
 8042f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	681b      	ldr	r3, [r3, #0]
 8042f08:	697a      	ldr	r2, [r7, #20]
 8042f0a:	b2d2      	uxtb	r2, r2
 8042f0c:	4611      	mov	r1, r2
 8042f0e:	4618      	mov	r0, r3
 8042f10:	f003 ff0f 	bl	8046d32 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8042f14:	e331      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8042f16:	697b      	ldr	r3, [r7, #20]
 8042f18:	015a      	lsls	r2, r3, #5
 8042f1a:	69bb      	ldr	r3, [r7, #24]
 8042f1c:	4413      	add	r3, r2
 8042f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042f22:	689b      	ldr	r3, [r3, #8]
 8042f24:	f003 0320 	and.w	r3, r3, #32
 8042f28:	2b20      	cmp	r3, #32
 8042f2a:	d12e      	bne.n	8042f8a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8042f2c:	697b      	ldr	r3, [r7, #20]
 8042f2e:	015a      	lsls	r2, r3, #5
 8042f30:	69bb      	ldr	r3, [r7, #24]
 8042f32:	4413      	add	r3, r2
 8042f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042f38:	461a      	mov	r2, r3
 8042f3a:	2320      	movs	r3, #32
 8042f3c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8042f3e:	687a      	ldr	r2, [r7, #4]
 8042f40:	697b      	ldr	r3, [r7, #20]
 8042f42:	212c      	movs	r1, #44	; 0x2c
 8042f44:	fb01 f303 	mul.w	r3, r1, r3
 8042f48:	4413      	add	r3, r2
 8042f4a:	333d      	adds	r3, #61	; 0x3d
 8042f4c:	781b      	ldrb	r3, [r3, #0]
 8042f4e:	2b01      	cmp	r3, #1
 8042f50:	f040 8313 	bne.w	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8042f54:	687a      	ldr	r2, [r7, #4]
 8042f56:	697b      	ldr	r3, [r7, #20]
 8042f58:	212c      	movs	r1, #44	; 0x2c
 8042f5a:	fb01 f303 	mul.w	r3, r1, r3
 8042f5e:	4413      	add	r3, r2
 8042f60:	333d      	adds	r3, #61	; 0x3d
 8042f62:	2200      	movs	r2, #0
 8042f64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8042f66:	687a      	ldr	r2, [r7, #4]
 8042f68:	697b      	ldr	r3, [r7, #20]
 8042f6a:	212c      	movs	r1, #44	; 0x2c
 8042f6c:	fb01 f303 	mul.w	r3, r1, r3
 8042f70:	4413      	add	r3, r2
 8042f72:	3360      	adds	r3, #96	; 0x60
 8042f74:	2202      	movs	r2, #2
 8042f76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042f78:	687b      	ldr	r3, [r7, #4]
 8042f7a:	681b      	ldr	r3, [r3, #0]
 8042f7c:	697a      	ldr	r2, [r7, #20]
 8042f7e:	b2d2      	uxtb	r2, r2
 8042f80:	4611      	mov	r1, r2
 8042f82:	4618      	mov	r0, r3
 8042f84:	f003 fed5 	bl	8046d32 <USB_HC_Halt>
}
 8042f88:	e2f7      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8042f8a:	697b      	ldr	r3, [r7, #20]
 8042f8c:	015a      	lsls	r2, r3, #5
 8042f8e:	69bb      	ldr	r3, [r7, #24]
 8042f90:	4413      	add	r3, r2
 8042f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042f96:	689b      	ldr	r3, [r3, #8]
 8042f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042fa0:	d112      	bne.n	8042fc8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8042fa2:	697b      	ldr	r3, [r7, #20]
 8042fa4:	015a      	lsls	r2, r3, #5
 8042fa6:	69bb      	ldr	r3, [r7, #24]
 8042fa8:	4413      	add	r3, r2
 8042faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042fae:	461a      	mov	r2, r3
 8042fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8042fb4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8042fb6:	687b      	ldr	r3, [r7, #4]
 8042fb8:	681b      	ldr	r3, [r3, #0]
 8042fba:	697a      	ldr	r2, [r7, #20]
 8042fbc:	b2d2      	uxtb	r2, r2
 8042fbe:	4611      	mov	r1, r2
 8042fc0:	4618      	mov	r0, r3
 8042fc2:	f003 feb6 	bl	8046d32 <USB_HC_Halt>
}
 8042fc6:	e2d8      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8042fc8:	697b      	ldr	r3, [r7, #20]
 8042fca:	015a      	lsls	r2, r3, #5
 8042fcc:	69bb      	ldr	r3, [r7, #24]
 8042fce:	4413      	add	r3, r2
 8042fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042fd4:	689b      	ldr	r3, [r3, #8]
 8042fd6:	f003 0301 	and.w	r3, r3, #1
 8042fda:	2b01      	cmp	r3, #1
 8042fdc:	d140      	bne.n	8043060 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8042fde:	687a      	ldr	r2, [r7, #4]
 8042fe0:	697b      	ldr	r3, [r7, #20]
 8042fe2:	212c      	movs	r1, #44	; 0x2c
 8042fe4:	fb01 f303 	mul.w	r3, r1, r3
 8042fe8:	4413      	add	r3, r2
 8042fea:	335c      	adds	r3, #92	; 0x5c
 8042fec:	2200      	movs	r2, #0
 8042fee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8042ff0:	697b      	ldr	r3, [r7, #20]
 8042ff2:	015a      	lsls	r2, r3, #5
 8042ff4:	69bb      	ldr	r3, [r7, #24]
 8042ff6:	4413      	add	r3, r2
 8042ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8042ffc:	689b      	ldr	r3, [r3, #8]
 8042ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043002:	2b40      	cmp	r3, #64	; 0x40
 8043004:	d111      	bne.n	804302a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8043006:	687a      	ldr	r2, [r7, #4]
 8043008:	697b      	ldr	r3, [r7, #20]
 804300a:	212c      	movs	r1, #44	; 0x2c
 804300c:	fb01 f303 	mul.w	r3, r1, r3
 8043010:	4413      	add	r3, r2
 8043012:	333d      	adds	r3, #61	; 0x3d
 8043014:	2201      	movs	r2, #1
 8043016:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8043018:	697b      	ldr	r3, [r7, #20]
 804301a:	015a      	lsls	r2, r3, #5
 804301c:	69bb      	ldr	r3, [r7, #24]
 804301e:	4413      	add	r3, r2
 8043020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043024:	461a      	mov	r2, r3
 8043026:	2340      	movs	r3, #64	; 0x40
 8043028:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 804302a:	697b      	ldr	r3, [r7, #20]
 804302c:	015a      	lsls	r2, r3, #5
 804302e:	69bb      	ldr	r3, [r7, #24]
 8043030:	4413      	add	r3, r2
 8043032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043036:	461a      	mov	r2, r3
 8043038:	2301      	movs	r3, #1
 804303a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 804303c:	687a      	ldr	r2, [r7, #4]
 804303e:	697b      	ldr	r3, [r7, #20]
 8043040:	212c      	movs	r1, #44	; 0x2c
 8043042:	fb01 f303 	mul.w	r3, r1, r3
 8043046:	4413      	add	r3, r2
 8043048:	3361      	adds	r3, #97	; 0x61
 804304a:	2201      	movs	r2, #1
 804304c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	681b      	ldr	r3, [r3, #0]
 8043052:	697a      	ldr	r2, [r7, #20]
 8043054:	b2d2      	uxtb	r2, r2
 8043056:	4611      	mov	r1, r2
 8043058:	4618      	mov	r0, r3
 804305a:	f003 fe6a 	bl	8046d32 <USB_HC_Halt>
}
 804305e:	e28c      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8043060:	697b      	ldr	r3, [r7, #20]
 8043062:	015a      	lsls	r2, r3, #5
 8043064:	69bb      	ldr	r3, [r7, #24]
 8043066:	4413      	add	r3, r2
 8043068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804306c:	689b      	ldr	r3, [r3, #8]
 804306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043072:	2b40      	cmp	r3, #64	; 0x40
 8043074:	d12c      	bne.n	80430d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8043076:	687a      	ldr	r2, [r7, #4]
 8043078:	697b      	ldr	r3, [r7, #20]
 804307a:	212c      	movs	r1, #44	; 0x2c
 804307c:	fb01 f303 	mul.w	r3, r1, r3
 8043080:	4413      	add	r3, r2
 8043082:	3361      	adds	r3, #97	; 0x61
 8043084:	2204      	movs	r2, #4
 8043086:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8043088:	687a      	ldr	r2, [r7, #4]
 804308a:	697b      	ldr	r3, [r7, #20]
 804308c:	212c      	movs	r1, #44	; 0x2c
 804308e:	fb01 f303 	mul.w	r3, r1, r3
 8043092:	4413      	add	r3, r2
 8043094:	333d      	adds	r3, #61	; 0x3d
 8043096:	2201      	movs	r2, #1
 8043098:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 804309a:	687a      	ldr	r2, [r7, #4]
 804309c:	697b      	ldr	r3, [r7, #20]
 804309e:	212c      	movs	r1, #44	; 0x2c
 80430a0:	fb01 f303 	mul.w	r3, r1, r3
 80430a4:	4413      	add	r3, r2
 80430a6:	335c      	adds	r3, #92	; 0x5c
 80430a8:	2200      	movs	r2, #0
 80430aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	681b      	ldr	r3, [r3, #0]
 80430b0:	697a      	ldr	r2, [r7, #20]
 80430b2:	b2d2      	uxtb	r2, r2
 80430b4:	4611      	mov	r1, r2
 80430b6:	4618      	mov	r0, r3
 80430b8:	f003 fe3b 	bl	8046d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80430bc:	697b      	ldr	r3, [r7, #20]
 80430be:	015a      	lsls	r2, r3, #5
 80430c0:	69bb      	ldr	r3, [r7, #24]
 80430c2:	4413      	add	r3, r2
 80430c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80430c8:	461a      	mov	r2, r3
 80430ca:	2340      	movs	r3, #64	; 0x40
 80430cc:	6093      	str	r3, [r2, #8]
}
 80430ce:	e254      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80430d0:	697b      	ldr	r3, [r7, #20]
 80430d2:	015a      	lsls	r2, r3, #5
 80430d4:	69bb      	ldr	r3, [r7, #24]
 80430d6:	4413      	add	r3, r2
 80430d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80430dc:	689b      	ldr	r3, [r3, #8]
 80430de:	f003 0308 	and.w	r3, r3, #8
 80430e2:	2b08      	cmp	r3, #8
 80430e4:	d11a      	bne.n	804311c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80430e6:	697b      	ldr	r3, [r7, #20]
 80430e8:	015a      	lsls	r2, r3, #5
 80430ea:	69bb      	ldr	r3, [r7, #24]
 80430ec:	4413      	add	r3, r2
 80430ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80430f2:	461a      	mov	r2, r3
 80430f4:	2308      	movs	r3, #8
 80430f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80430f8:	687a      	ldr	r2, [r7, #4]
 80430fa:	697b      	ldr	r3, [r7, #20]
 80430fc:	212c      	movs	r1, #44	; 0x2c
 80430fe:	fb01 f303 	mul.w	r3, r1, r3
 8043102:	4413      	add	r3, r2
 8043104:	3361      	adds	r3, #97	; 0x61
 8043106:	2205      	movs	r2, #5
 8043108:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804310a:	687b      	ldr	r3, [r7, #4]
 804310c:	681b      	ldr	r3, [r3, #0]
 804310e:	697a      	ldr	r2, [r7, #20]
 8043110:	b2d2      	uxtb	r2, r2
 8043112:	4611      	mov	r1, r2
 8043114:	4618      	mov	r0, r3
 8043116:	f003 fe0c 	bl	8046d32 <USB_HC_Halt>
}
 804311a:	e22e      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 804311c:	697b      	ldr	r3, [r7, #20]
 804311e:	015a      	lsls	r2, r3, #5
 8043120:	69bb      	ldr	r3, [r7, #24]
 8043122:	4413      	add	r3, r2
 8043124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043128:	689b      	ldr	r3, [r3, #8]
 804312a:	f003 0310 	and.w	r3, r3, #16
 804312e:	2b10      	cmp	r3, #16
 8043130:	d140      	bne.n	80431b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8043132:	687a      	ldr	r2, [r7, #4]
 8043134:	697b      	ldr	r3, [r7, #20]
 8043136:	212c      	movs	r1, #44	; 0x2c
 8043138:	fb01 f303 	mul.w	r3, r1, r3
 804313c:	4413      	add	r3, r2
 804313e:	335c      	adds	r3, #92	; 0x5c
 8043140:	2200      	movs	r2, #0
 8043142:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8043144:	687a      	ldr	r2, [r7, #4]
 8043146:	697b      	ldr	r3, [r7, #20]
 8043148:	212c      	movs	r1, #44	; 0x2c
 804314a:	fb01 f303 	mul.w	r3, r1, r3
 804314e:	4413      	add	r3, r2
 8043150:	3361      	adds	r3, #97	; 0x61
 8043152:	2203      	movs	r2, #3
 8043154:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8043156:	687a      	ldr	r2, [r7, #4]
 8043158:	697b      	ldr	r3, [r7, #20]
 804315a:	212c      	movs	r1, #44	; 0x2c
 804315c:	fb01 f303 	mul.w	r3, r1, r3
 8043160:	4413      	add	r3, r2
 8043162:	333d      	adds	r3, #61	; 0x3d
 8043164:	781b      	ldrb	r3, [r3, #0]
 8043166:	2b00      	cmp	r3, #0
 8043168:	d112      	bne.n	8043190 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 804316a:	687a      	ldr	r2, [r7, #4]
 804316c:	697b      	ldr	r3, [r7, #20]
 804316e:	212c      	movs	r1, #44	; 0x2c
 8043170:	fb01 f303 	mul.w	r3, r1, r3
 8043174:	4413      	add	r3, r2
 8043176:	333c      	adds	r3, #60	; 0x3c
 8043178:	781b      	ldrb	r3, [r3, #0]
 804317a:	2b00      	cmp	r3, #0
 804317c:	d108      	bne.n	8043190 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 804317e:	687a      	ldr	r2, [r7, #4]
 8043180:	697b      	ldr	r3, [r7, #20]
 8043182:	212c      	movs	r1, #44	; 0x2c
 8043184:	fb01 f303 	mul.w	r3, r1, r3
 8043188:	4413      	add	r3, r2
 804318a:	333d      	adds	r3, #61	; 0x3d
 804318c:	2201      	movs	r2, #1
 804318e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	681b      	ldr	r3, [r3, #0]
 8043194:	697a      	ldr	r2, [r7, #20]
 8043196:	b2d2      	uxtb	r2, r2
 8043198:	4611      	mov	r1, r2
 804319a:	4618      	mov	r0, r3
 804319c:	f003 fdc9 	bl	8046d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80431a0:	697b      	ldr	r3, [r7, #20]
 80431a2:	015a      	lsls	r2, r3, #5
 80431a4:	69bb      	ldr	r3, [r7, #24]
 80431a6:	4413      	add	r3, r2
 80431a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80431ac:	461a      	mov	r2, r3
 80431ae:	2310      	movs	r3, #16
 80431b0:	6093      	str	r3, [r2, #8]
}
 80431b2:	e1e2      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80431b4:	697b      	ldr	r3, [r7, #20]
 80431b6:	015a      	lsls	r2, r3, #5
 80431b8:	69bb      	ldr	r3, [r7, #24]
 80431ba:	4413      	add	r3, r2
 80431bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80431c0:	689b      	ldr	r3, [r3, #8]
 80431c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80431c6:	2b80      	cmp	r3, #128	; 0x80
 80431c8:	d164      	bne.n	8043294 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80431ca:	687b      	ldr	r3, [r7, #4]
 80431cc:	691b      	ldr	r3, [r3, #16]
 80431ce:	2b00      	cmp	r3, #0
 80431d0:	d111      	bne.n	80431f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80431d2:	687a      	ldr	r2, [r7, #4]
 80431d4:	697b      	ldr	r3, [r7, #20]
 80431d6:	212c      	movs	r1, #44	; 0x2c
 80431d8:	fb01 f303 	mul.w	r3, r1, r3
 80431dc:	4413      	add	r3, r2
 80431de:	3361      	adds	r3, #97	; 0x61
 80431e0:	2206      	movs	r2, #6
 80431e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80431e4:	687b      	ldr	r3, [r7, #4]
 80431e6:	681b      	ldr	r3, [r3, #0]
 80431e8:	697a      	ldr	r2, [r7, #20]
 80431ea:	b2d2      	uxtb	r2, r2
 80431ec:	4611      	mov	r1, r2
 80431ee:	4618      	mov	r0, r3
 80431f0:	f003 fd9f 	bl	8046d32 <USB_HC_Halt>
 80431f4:	e044      	b.n	8043280 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80431f6:	687a      	ldr	r2, [r7, #4]
 80431f8:	697b      	ldr	r3, [r7, #20]
 80431fa:	212c      	movs	r1, #44	; 0x2c
 80431fc:	fb01 f303 	mul.w	r3, r1, r3
 8043200:	4413      	add	r3, r2
 8043202:	335c      	adds	r3, #92	; 0x5c
 8043204:	681b      	ldr	r3, [r3, #0]
 8043206:	1c5a      	adds	r2, r3, #1
 8043208:	6879      	ldr	r1, [r7, #4]
 804320a:	697b      	ldr	r3, [r7, #20]
 804320c:	202c      	movs	r0, #44	; 0x2c
 804320e:	fb00 f303 	mul.w	r3, r0, r3
 8043212:	440b      	add	r3, r1
 8043214:	335c      	adds	r3, #92	; 0x5c
 8043216:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8043218:	687a      	ldr	r2, [r7, #4]
 804321a:	697b      	ldr	r3, [r7, #20]
 804321c:	212c      	movs	r1, #44	; 0x2c
 804321e:	fb01 f303 	mul.w	r3, r1, r3
 8043222:	4413      	add	r3, r2
 8043224:	335c      	adds	r3, #92	; 0x5c
 8043226:	681b      	ldr	r3, [r3, #0]
 8043228:	2b02      	cmp	r3, #2
 804322a:	d920      	bls.n	804326e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804322c:	687a      	ldr	r2, [r7, #4]
 804322e:	697b      	ldr	r3, [r7, #20]
 8043230:	212c      	movs	r1, #44	; 0x2c
 8043232:	fb01 f303 	mul.w	r3, r1, r3
 8043236:	4413      	add	r3, r2
 8043238:	335c      	adds	r3, #92	; 0x5c
 804323a:	2200      	movs	r2, #0
 804323c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804323e:	687a      	ldr	r2, [r7, #4]
 8043240:	697b      	ldr	r3, [r7, #20]
 8043242:	212c      	movs	r1, #44	; 0x2c
 8043244:	fb01 f303 	mul.w	r3, r1, r3
 8043248:	4413      	add	r3, r2
 804324a:	3360      	adds	r3, #96	; 0x60
 804324c:	2204      	movs	r2, #4
 804324e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8043250:	697b      	ldr	r3, [r7, #20]
 8043252:	b2d9      	uxtb	r1, r3
 8043254:	687a      	ldr	r2, [r7, #4]
 8043256:	697b      	ldr	r3, [r7, #20]
 8043258:	202c      	movs	r0, #44	; 0x2c
 804325a:	fb00 f303 	mul.w	r3, r0, r3
 804325e:	4413      	add	r3, r2
 8043260:	3360      	adds	r3, #96	; 0x60
 8043262:	781b      	ldrb	r3, [r3, #0]
 8043264:	461a      	mov	r2, r3
 8043266:	6878      	ldr	r0, [r7, #4]
 8043268:	f006 f802 	bl	8049270 <HAL_HCD_HC_NotifyURBChange_Callback>
 804326c:	e008      	b.n	8043280 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804326e:	687a      	ldr	r2, [r7, #4]
 8043270:	697b      	ldr	r3, [r7, #20]
 8043272:	212c      	movs	r1, #44	; 0x2c
 8043274:	fb01 f303 	mul.w	r3, r1, r3
 8043278:	4413      	add	r3, r2
 804327a:	3360      	adds	r3, #96	; 0x60
 804327c:	2202      	movs	r2, #2
 804327e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8043280:	697b      	ldr	r3, [r7, #20]
 8043282:	015a      	lsls	r2, r3, #5
 8043284:	69bb      	ldr	r3, [r7, #24]
 8043286:	4413      	add	r3, r2
 8043288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804328c:	461a      	mov	r2, r3
 804328e:	2380      	movs	r3, #128	; 0x80
 8043290:	6093      	str	r3, [r2, #8]
}
 8043292:	e172      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8043294:	697b      	ldr	r3, [r7, #20]
 8043296:	015a      	lsls	r2, r3, #5
 8043298:	69bb      	ldr	r3, [r7, #24]
 804329a:	4413      	add	r3, r2
 804329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80432a0:	689b      	ldr	r3, [r3, #8]
 80432a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80432a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80432aa:	d11b      	bne.n	80432e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80432ac:	687a      	ldr	r2, [r7, #4]
 80432ae:	697b      	ldr	r3, [r7, #20]
 80432b0:	212c      	movs	r1, #44	; 0x2c
 80432b2:	fb01 f303 	mul.w	r3, r1, r3
 80432b6:	4413      	add	r3, r2
 80432b8:	3361      	adds	r3, #97	; 0x61
 80432ba:	2208      	movs	r2, #8
 80432bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80432be:	687b      	ldr	r3, [r7, #4]
 80432c0:	681b      	ldr	r3, [r3, #0]
 80432c2:	697a      	ldr	r2, [r7, #20]
 80432c4:	b2d2      	uxtb	r2, r2
 80432c6:	4611      	mov	r1, r2
 80432c8:	4618      	mov	r0, r3
 80432ca:	f003 fd32 	bl	8046d32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80432ce:	697b      	ldr	r3, [r7, #20]
 80432d0:	015a      	lsls	r2, r3, #5
 80432d2:	69bb      	ldr	r3, [r7, #24]
 80432d4:	4413      	add	r3, r2
 80432d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80432da:	461a      	mov	r2, r3
 80432dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80432e0:	6093      	str	r3, [r2, #8]
}
 80432e2:	e14a      	b.n	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80432e4:	697b      	ldr	r3, [r7, #20]
 80432e6:	015a      	lsls	r2, r3, #5
 80432e8:	69bb      	ldr	r3, [r7, #24]
 80432ea:	4413      	add	r3, r2
 80432ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80432f0:	689b      	ldr	r3, [r3, #8]
 80432f2:	f003 0302 	and.w	r3, r3, #2
 80432f6:	2b02      	cmp	r3, #2
 80432f8:	f040 813f 	bne.w	804357a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80432fc:	687a      	ldr	r2, [r7, #4]
 80432fe:	697b      	ldr	r3, [r7, #20]
 8043300:	212c      	movs	r1, #44	; 0x2c
 8043302:	fb01 f303 	mul.w	r3, r1, r3
 8043306:	4413      	add	r3, r2
 8043308:	3361      	adds	r3, #97	; 0x61
 804330a:	781b      	ldrb	r3, [r3, #0]
 804330c:	2b01      	cmp	r3, #1
 804330e:	d17d      	bne.n	804340c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8043310:	687a      	ldr	r2, [r7, #4]
 8043312:	697b      	ldr	r3, [r7, #20]
 8043314:	212c      	movs	r1, #44	; 0x2c
 8043316:	fb01 f303 	mul.w	r3, r1, r3
 804331a:	4413      	add	r3, r2
 804331c:	3360      	adds	r3, #96	; 0x60
 804331e:	2201      	movs	r2, #1
 8043320:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8043322:	687a      	ldr	r2, [r7, #4]
 8043324:	697b      	ldr	r3, [r7, #20]
 8043326:	212c      	movs	r1, #44	; 0x2c
 8043328:	fb01 f303 	mul.w	r3, r1, r3
 804332c:	4413      	add	r3, r2
 804332e:	333f      	adds	r3, #63	; 0x3f
 8043330:	781b      	ldrb	r3, [r3, #0]
 8043332:	2b02      	cmp	r3, #2
 8043334:	d00a      	beq.n	804334c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8043336:	687a      	ldr	r2, [r7, #4]
 8043338:	697b      	ldr	r3, [r7, #20]
 804333a:	212c      	movs	r1, #44	; 0x2c
 804333c:	fb01 f303 	mul.w	r3, r1, r3
 8043340:	4413      	add	r3, r2
 8043342:	333f      	adds	r3, #63	; 0x3f
 8043344:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8043346:	2b03      	cmp	r3, #3
 8043348:	f040 8100 	bne.w	804354c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 804334c:	687b      	ldr	r3, [r7, #4]
 804334e:	691b      	ldr	r3, [r3, #16]
 8043350:	2b00      	cmp	r3, #0
 8043352:	d113      	bne.n	804337c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8043354:	687a      	ldr	r2, [r7, #4]
 8043356:	697b      	ldr	r3, [r7, #20]
 8043358:	212c      	movs	r1, #44	; 0x2c
 804335a:	fb01 f303 	mul.w	r3, r1, r3
 804335e:	4413      	add	r3, r2
 8043360:	3355      	adds	r3, #85	; 0x55
 8043362:	781b      	ldrb	r3, [r3, #0]
 8043364:	f083 0301 	eor.w	r3, r3, #1
 8043368:	b2d8      	uxtb	r0, r3
 804336a:	687a      	ldr	r2, [r7, #4]
 804336c:	697b      	ldr	r3, [r7, #20]
 804336e:	212c      	movs	r1, #44	; 0x2c
 8043370:	fb01 f303 	mul.w	r3, r1, r3
 8043374:	4413      	add	r3, r2
 8043376:	3355      	adds	r3, #85	; 0x55
 8043378:	4602      	mov	r2, r0
 804337a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 804337c:	687b      	ldr	r3, [r7, #4]
 804337e:	691b      	ldr	r3, [r3, #16]
 8043380:	2b01      	cmp	r3, #1
 8043382:	f040 80e3 	bne.w	804354c <HCD_HC_OUT_IRQHandler+0x69c>
 8043386:	687a      	ldr	r2, [r7, #4]
 8043388:	697b      	ldr	r3, [r7, #20]
 804338a:	212c      	movs	r1, #44	; 0x2c
 804338c:	fb01 f303 	mul.w	r3, r1, r3
 8043390:	4413      	add	r3, r2
 8043392:	334c      	adds	r3, #76	; 0x4c
 8043394:	681b      	ldr	r3, [r3, #0]
 8043396:	2b00      	cmp	r3, #0
 8043398:	f000 80d8 	beq.w	804354c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 804339c:	687a      	ldr	r2, [r7, #4]
 804339e:	697b      	ldr	r3, [r7, #20]
 80433a0:	212c      	movs	r1, #44	; 0x2c
 80433a2:	fb01 f303 	mul.w	r3, r1, r3
 80433a6:	4413      	add	r3, r2
 80433a8:	334c      	adds	r3, #76	; 0x4c
 80433aa:	681b      	ldr	r3, [r3, #0]
 80433ac:	6879      	ldr	r1, [r7, #4]
 80433ae:	697a      	ldr	r2, [r7, #20]
 80433b0:	202c      	movs	r0, #44	; 0x2c
 80433b2:	fb00 f202 	mul.w	r2, r0, r2
 80433b6:	440a      	add	r2, r1
 80433b8:	3240      	adds	r2, #64	; 0x40
 80433ba:	8812      	ldrh	r2, [r2, #0]
 80433bc:	4413      	add	r3, r2
 80433be:	3b01      	subs	r3, #1
 80433c0:	6879      	ldr	r1, [r7, #4]
 80433c2:	697a      	ldr	r2, [r7, #20]
 80433c4:	202c      	movs	r0, #44	; 0x2c
 80433c6:	fb00 f202 	mul.w	r2, r0, r2
 80433ca:	440a      	add	r2, r1
 80433cc:	3240      	adds	r2, #64	; 0x40
 80433ce:	8812      	ldrh	r2, [r2, #0]
 80433d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80433d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80433d6:	68fb      	ldr	r3, [r7, #12]
 80433d8:	f003 0301 	and.w	r3, r3, #1
 80433dc:	2b00      	cmp	r3, #0
 80433de:	f000 80b5 	beq.w	804354c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80433e2:	687a      	ldr	r2, [r7, #4]
 80433e4:	697b      	ldr	r3, [r7, #20]
 80433e6:	212c      	movs	r1, #44	; 0x2c
 80433e8:	fb01 f303 	mul.w	r3, r1, r3
 80433ec:	4413      	add	r3, r2
 80433ee:	3355      	adds	r3, #85	; 0x55
 80433f0:	781b      	ldrb	r3, [r3, #0]
 80433f2:	f083 0301 	eor.w	r3, r3, #1
 80433f6:	b2d8      	uxtb	r0, r3
 80433f8:	687a      	ldr	r2, [r7, #4]
 80433fa:	697b      	ldr	r3, [r7, #20]
 80433fc:	212c      	movs	r1, #44	; 0x2c
 80433fe:	fb01 f303 	mul.w	r3, r1, r3
 8043402:	4413      	add	r3, r2
 8043404:	3355      	adds	r3, #85	; 0x55
 8043406:	4602      	mov	r2, r0
 8043408:	701a      	strb	r2, [r3, #0]
 804340a:	e09f      	b.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 804340c:	687a      	ldr	r2, [r7, #4]
 804340e:	697b      	ldr	r3, [r7, #20]
 8043410:	212c      	movs	r1, #44	; 0x2c
 8043412:	fb01 f303 	mul.w	r3, r1, r3
 8043416:	4413      	add	r3, r2
 8043418:	3361      	adds	r3, #97	; 0x61
 804341a:	781b      	ldrb	r3, [r3, #0]
 804341c:	2b03      	cmp	r3, #3
 804341e:	d109      	bne.n	8043434 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8043420:	687a      	ldr	r2, [r7, #4]
 8043422:	697b      	ldr	r3, [r7, #20]
 8043424:	212c      	movs	r1, #44	; 0x2c
 8043426:	fb01 f303 	mul.w	r3, r1, r3
 804342a:	4413      	add	r3, r2
 804342c:	3360      	adds	r3, #96	; 0x60
 804342e:	2202      	movs	r2, #2
 8043430:	701a      	strb	r2, [r3, #0]
 8043432:	e08b      	b.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8043434:	687a      	ldr	r2, [r7, #4]
 8043436:	697b      	ldr	r3, [r7, #20]
 8043438:	212c      	movs	r1, #44	; 0x2c
 804343a:	fb01 f303 	mul.w	r3, r1, r3
 804343e:	4413      	add	r3, r2
 8043440:	3361      	adds	r3, #97	; 0x61
 8043442:	781b      	ldrb	r3, [r3, #0]
 8043444:	2b04      	cmp	r3, #4
 8043446:	d109      	bne.n	804345c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8043448:	687a      	ldr	r2, [r7, #4]
 804344a:	697b      	ldr	r3, [r7, #20]
 804344c:	212c      	movs	r1, #44	; 0x2c
 804344e:	fb01 f303 	mul.w	r3, r1, r3
 8043452:	4413      	add	r3, r2
 8043454:	3360      	adds	r3, #96	; 0x60
 8043456:	2202      	movs	r2, #2
 8043458:	701a      	strb	r2, [r3, #0]
 804345a:	e077      	b.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 804345c:	687a      	ldr	r2, [r7, #4]
 804345e:	697b      	ldr	r3, [r7, #20]
 8043460:	212c      	movs	r1, #44	; 0x2c
 8043462:	fb01 f303 	mul.w	r3, r1, r3
 8043466:	4413      	add	r3, r2
 8043468:	3361      	adds	r3, #97	; 0x61
 804346a:	781b      	ldrb	r3, [r3, #0]
 804346c:	2b05      	cmp	r3, #5
 804346e:	d109      	bne.n	8043484 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8043470:	687a      	ldr	r2, [r7, #4]
 8043472:	697b      	ldr	r3, [r7, #20]
 8043474:	212c      	movs	r1, #44	; 0x2c
 8043476:	fb01 f303 	mul.w	r3, r1, r3
 804347a:	4413      	add	r3, r2
 804347c:	3360      	adds	r3, #96	; 0x60
 804347e:	2205      	movs	r2, #5
 8043480:	701a      	strb	r2, [r3, #0]
 8043482:	e063      	b.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8043484:	687a      	ldr	r2, [r7, #4]
 8043486:	697b      	ldr	r3, [r7, #20]
 8043488:	212c      	movs	r1, #44	; 0x2c
 804348a:	fb01 f303 	mul.w	r3, r1, r3
 804348e:	4413      	add	r3, r2
 8043490:	3361      	adds	r3, #97	; 0x61
 8043492:	781b      	ldrb	r3, [r3, #0]
 8043494:	2b06      	cmp	r3, #6
 8043496:	d009      	beq.n	80434ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8043498:	687a      	ldr	r2, [r7, #4]
 804349a:	697b      	ldr	r3, [r7, #20]
 804349c:	212c      	movs	r1, #44	; 0x2c
 804349e:	fb01 f303 	mul.w	r3, r1, r3
 80434a2:	4413      	add	r3, r2
 80434a4:	3361      	adds	r3, #97	; 0x61
 80434a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80434a8:	2b08      	cmp	r3, #8
 80434aa:	d14f      	bne.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80434ac:	687a      	ldr	r2, [r7, #4]
 80434ae:	697b      	ldr	r3, [r7, #20]
 80434b0:	212c      	movs	r1, #44	; 0x2c
 80434b2:	fb01 f303 	mul.w	r3, r1, r3
 80434b6:	4413      	add	r3, r2
 80434b8:	335c      	adds	r3, #92	; 0x5c
 80434ba:	681b      	ldr	r3, [r3, #0]
 80434bc:	1c5a      	adds	r2, r3, #1
 80434be:	6879      	ldr	r1, [r7, #4]
 80434c0:	697b      	ldr	r3, [r7, #20]
 80434c2:	202c      	movs	r0, #44	; 0x2c
 80434c4:	fb00 f303 	mul.w	r3, r0, r3
 80434c8:	440b      	add	r3, r1
 80434ca:	335c      	adds	r3, #92	; 0x5c
 80434cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80434ce:	687a      	ldr	r2, [r7, #4]
 80434d0:	697b      	ldr	r3, [r7, #20]
 80434d2:	212c      	movs	r1, #44	; 0x2c
 80434d4:	fb01 f303 	mul.w	r3, r1, r3
 80434d8:	4413      	add	r3, r2
 80434da:	335c      	adds	r3, #92	; 0x5c
 80434dc:	681b      	ldr	r3, [r3, #0]
 80434de:	2b02      	cmp	r3, #2
 80434e0:	d912      	bls.n	8043508 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80434e2:	687a      	ldr	r2, [r7, #4]
 80434e4:	697b      	ldr	r3, [r7, #20]
 80434e6:	212c      	movs	r1, #44	; 0x2c
 80434e8:	fb01 f303 	mul.w	r3, r1, r3
 80434ec:	4413      	add	r3, r2
 80434ee:	335c      	adds	r3, #92	; 0x5c
 80434f0:	2200      	movs	r2, #0
 80434f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80434f4:	687a      	ldr	r2, [r7, #4]
 80434f6:	697b      	ldr	r3, [r7, #20]
 80434f8:	212c      	movs	r1, #44	; 0x2c
 80434fa:	fb01 f303 	mul.w	r3, r1, r3
 80434fe:	4413      	add	r3, r2
 8043500:	3360      	adds	r3, #96	; 0x60
 8043502:	2204      	movs	r2, #4
 8043504:	701a      	strb	r2, [r3, #0]
 8043506:	e021      	b.n	804354c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8043508:	687a      	ldr	r2, [r7, #4]
 804350a:	697b      	ldr	r3, [r7, #20]
 804350c:	212c      	movs	r1, #44	; 0x2c
 804350e:	fb01 f303 	mul.w	r3, r1, r3
 8043512:	4413      	add	r3, r2
 8043514:	3360      	adds	r3, #96	; 0x60
 8043516:	2202      	movs	r2, #2
 8043518:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 804351a:	697b      	ldr	r3, [r7, #20]
 804351c:	015a      	lsls	r2, r3, #5
 804351e:	69bb      	ldr	r3, [r7, #24]
 8043520:	4413      	add	r3, r2
 8043522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043526:	681b      	ldr	r3, [r3, #0]
 8043528:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804352a:	693b      	ldr	r3, [r7, #16]
 804352c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8043530:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8043532:	693b      	ldr	r3, [r7, #16]
 8043534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8043538:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 804353a:	697b      	ldr	r3, [r7, #20]
 804353c:	015a      	lsls	r2, r3, #5
 804353e:	69bb      	ldr	r3, [r7, #24]
 8043540:	4413      	add	r3, r2
 8043542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043546:	461a      	mov	r2, r3
 8043548:	693b      	ldr	r3, [r7, #16]
 804354a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 804354c:	697b      	ldr	r3, [r7, #20]
 804354e:	015a      	lsls	r2, r3, #5
 8043550:	69bb      	ldr	r3, [r7, #24]
 8043552:	4413      	add	r3, r2
 8043554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043558:	461a      	mov	r2, r3
 804355a:	2302      	movs	r3, #2
 804355c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804355e:	697b      	ldr	r3, [r7, #20]
 8043560:	b2d9      	uxtb	r1, r3
 8043562:	687a      	ldr	r2, [r7, #4]
 8043564:	697b      	ldr	r3, [r7, #20]
 8043566:	202c      	movs	r0, #44	; 0x2c
 8043568:	fb00 f303 	mul.w	r3, r0, r3
 804356c:	4413      	add	r3, r2
 804356e:	3360      	adds	r3, #96	; 0x60
 8043570:	781b      	ldrb	r3, [r3, #0]
 8043572:	461a      	mov	r2, r3
 8043574:	6878      	ldr	r0, [r7, #4]
 8043576:	f005 fe7b 	bl	8049270 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 804357a:	bf00      	nop
 804357c:	3720      	adds	r7, #32
 804357e:	46bd      	mov	sp, r7
 8043580:	bd80      	pop	{r7, pc}

08043582 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8043582:	b580      	push	{r7, lr}
 8043584:	b08a      	sub	sp, #40	; 0x28
 8043586:	af00      	add	r7, sp, #0
 8043588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804358a:	687b      	ldr	r3, [r7, #4]
 804358c:	681b      	ldr	r3, [r3, #0]
 804358e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043592:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8043594:	687b      	ldr	r3, [r7, #4]
 8043596:	681b      	ldr	r3, [r3, #0]
 8043598:	6a1b      	ldr	r3, [r3, #32]
 804359a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 804359c:	69fb      	ldr	r3, [r7, #28]
 804359e:	f003 030f 	and.w	r3, r3, #15
 80435a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80435a4:	69fb      	ldr	r3, [r7, #28]
 80435a6:	0c5b      	lsrs	r3, r3, #17
 80435a8:	f003 030f 	and.w	r3, r3, #15
 80435ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80435ae:	69fb      	ldr	r3, [r7, #28]
 80435b0:	091b      	lsrs	r3, r3, #4
 80435b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80435b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80435b8:	697b      	ldr	r3, [r7, #20]
 80435ba:	2b02      	cmp	r3, #2
 80435bc:	d004      	beq.n	80435c8 <HCD_RXQLVL_IRQHandler+0x46>
 80435be:	697b      	ldr	r3, [r7, #20]
 80435c0:	2b05      	cmp	r3, #5
 80435c2:	f000 80a9 	beq.w	8043718 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80435c6:	e0aa      	b.n	804371e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80435c8:	693b      	ldr	r3, [r7, #16]
 80435ca:	2b00      	cmp	r3, #0
 80435cc:	f000 80a6 	beq.w	804371c <HCD_RXQLVL_IRQHandler+0x19a>
 80435d0:	687a      	ldr	r2, [r7, #4]
 80435d2:	69bb      	ldr	r3, [r7, #24]
 80435d4:	212c      	movs	r1, #44	; 0x2c
 80435d6:	fb01 f303 	mul.w	r3, r1, r3
 80435da:	4413      	add	r3, r2
 80435dc:	3344      	adds	r3, #68	; 0x44
 80435de:	681b      	ldr	r3, [r3, #0]
 80435e0:	2b00      	cmp	r3, #0
 80435e2:	f000 809b 	beq.w	804371c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80435e6:	687a      	ldr	r2, [r7, #4]
 80435e8:	69bb      	ldr	r3, [r7, #24]
 80435ea:	212c      	movs	r1, #44	; 0x2c
 80435ec:	fb01 f303 	mul.w	r3, r1, r3
 80435f0:	4413      	add	r3, r2
 80435f2:	3350      	adds	r3, #80	; 0x50
 80435f4:	681a      	ldr	r2, [r3, #0]
 80435f6:	693b      	ldr	r3, [r7, #16]
 80435f8:	441a      	add	r2, r3
 80435fa:	6879      	ldr	r1, [r7, #4]
 80435fc:	69bb      	ldr	r3, [r7, #24]
 80435fe:	202c      	movs	r0, #44	; 0x2c
 8043600:	fb00 f303 	mul.w	r3, r0, r3
 8043604:	440b      	add	r3, r1
 8043606:	334c      	adds	r3, #76	; 0x4c
 8043608:	681b      	ldr	r3, [r3, #0]
 804360a:	429a      	cmp	r2, r3
 804360c:	d87a      	bhi.n	8043704 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 804360e:	687b      	ldr	r3, [r7, #4]
 8043610:	6818      	ldr	r0, [r3, #0]
 8043612:	687a      	ldr	r2, [r7, #4]
 8043614:	69bb      	ldr	r3, [r7, #24]
 8043616:	212c      	movs	r1, #44	; 0x2c
 8043618:	fb01 f303 	mul.w	r3, r1, r3
 804361c:	4413      	add	r3, r2
 804361e:	3344      	adds	r3, #68	; 0x44
 8043620:	681b      	ldr	r3, [r3, #0]
 8043622:	693a      	ldr	r2, [r7, #16]
 8043624:	b292      	uxth	r2, r2
 8043626:	4619      	mov	r1, r3
 8043628:	f002 feda 	bl	80463e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 804362c:	687a      	ldr	r2, [r7, #4]
 804362e:	69bb      	ldr	r3, [r7, #24]
 8043630:	212c      	movs	r1, #44	; 0x2c
 8043632:	fb01 f303 	mul.w	r3, r1, r3
 8043636:	4413      	add	r3, r2
 8043638:	3344      	adds	r3, #68	; 0x44
 804363a:	681a      	ldr	r2, [r3, #0]
 804363c:	693b      	ldr	r3, [r7, #16]
 804363e:	441a      	add	r2, r3
 8043640:	6879      	ldr	r1, [r7, #4]
 8043642:	69bb      	ldr	r3, [r7, #24]
 8043644:	202c      	movs	r0, #44	; 0x2c
 8043646:	fb00 f303 	mul.w	r3, r0, r3
 804364a:	440b      	add	r3, r1
 804364c:	3344      	adds	r3, #68	; 0x44
 804364e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8043650:	687a      	ldr	r2, [r7, #4]
 8043652:	69bb      	ldr	r3, [r7, #24]
 8043654:	212c      	movs	r1, #44	; 0x2c
 8043656:	fb01 f303 	mul.w	r3, r1, r3
 804365a:	4413      	add	r3, r2
 804365c:	3350      	adds	r3, #80	; 0x50
 804365e:	681a      	ldr	r2, [r3, #0]
 8043660:	693b      	ldr	r3, [r7, #16]
 8043662:	441a      	add	r2, r3
 8043664:	6879      	ldr	r1, [r7, #4]
 8043666:	69bb      	ldr	r3, [r7, #24]
 8043668:	202c      	movs	r0, #44	; 0x2c
 804366a:	fb00 f303 	mul.w	r3, r0, r3
 804366e:	440b      	add	r3, r1
 8043670:	3350      	adds	r3, #80	; 0x50
 8043672:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8043674:	69bb      	ldr	r3, [r7, #24]
 8043676:	015a      	lsls	r2, r3, #5
 8043678:	6a3b      	ldr	r3, [r7, #32]
 804367a:	4413      	add	r3, r2
 804367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8043680:	691b      	ldr	r3, [r3, #16]
 8043682:	0cdb      	lsrs	r3, r3, #19
 8043684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8043688:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 804368a:	687a      	ldr	r2, [r7, #4]
 804368c:	69bb      	ldr	r3, [r7, #24]
 804368e:	212c      	movs	r1, #44	; 0x2c
 8043690:	fb01 f303 	mul.w	r3, r1, r3
 8043694:	4413      	add	r3, r2
 8043696:	3340      	adds	r3, #64	; 0x40
 8043698:	881b      	ldrh	r3, [r3, #0]
 804369a:	461a      	mov	r2, r3
 804369c:	693b      	ldr	r3, [r7, #16]
 804369e:	4293      	cmp	r3, r2
 80436a0:	d13c      	bne.n	804371c <HCD_RXQLVL_IRQHandler+0x19a>
 80436a2:	68fb      	ldr	r3, [r7, #12]
 80436a4:	2b00      	cmp	r3, #0
 80436a6:	d039      	beq.n	804371c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80436a8:	69bb      	ldr	r3, [r7, #24]
 80436aa:	015a      	lsls	r2, r3, #5
 80436ac:	6a3b      	ldr	r3, [r7, #32]
 80436ae:	4413      	add	r3, r2
 80436b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80436b4:	681b      	ldr	r3, [r3, #0]
 80436b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80436b8:	68bb      	ldr	r3, [r7, #8]
 80436ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80436be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80436c0:	68bb      	ldr	r3, [r7, #8]
 80436c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80436c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80436c8:	69bb      	ldr	r3, [r7, #24]
 80436ca:	015a      	lsls	r2, r3, #5
 80436cc:	6a3b      	ldr	r3, [r7, #32]
 80436ce:	4413      	add	r3, r2
 80436d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80436d4:	461a      	mov	r2, r3
 80436d6:	68bb      	ldr	r3, [r7, #8]
 80436d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80436da:	687a      	ldr	r2, [r7, #4]
 80436dc:	69bb      	ldr	r3, [r7, #24]
 80436de:	212c      	movs	r1, #44	; 0x2c
 80436e0:	fb01 f303 	mul.w	r3, r1, r3
 80436e4:	4413      	add	r3, r2
 80436e6:	3354      	adds	r3, #84	; 0x54
 80436e8:	781b      	ldrb	r3, [r3, #0]
 80436ea:	f083 0301 	eor.w	r3, r3, #1
 80436ee:	b2d8      	uxtb	r0, r3
 80436f0:	687a      	ldr	r2, [r7, #4]
 80436f2:	69bb      	ldr	r3, [r7, #24]
 80436f4:	212c      	movs	r1, #44	; 0x2c
 80436f6:	fb01 f303 	mul.w	r3, r1, r3
 80436fa:	4413      	add	r3, r2
 80436fc:	3354      	adds	r3, #84	; 0x54
 80436fe:	4602      	mov	r2, r0
 8043700:	701a      	strb	r2, [r3, #0]
      break;
 8043702:	e00b      	b.n	804371c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8043704:	687a      	ldr	r2, [r7, #4]
 8043706:	69bb      	ldr	r3, [r7, #24]
 8043708:	212c      	movs	r1, #44	; 0x2c
 804370a:	fb01 f303 	mul.w	r3, r1, r3
 804370e:	4413      	add	r3, r2
 8043710:	3360      	adds	r3, #96	; 0x60
 8043712:	2204      	movs	r2, #4
 8043714:	701a      	strb	r2, [r3, #0]
      break;
 8043716:	e001      	b.n	804371c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8043718:	bf00      	nop
 804371a:	e000      	b.n	804371e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 804371c:	bf00      	nop
  }
}
 804371e:	bf00      	nop
 8043720:	3728      	adds	r7, #40	; 0x28
 8043722:	46bd      	mov	sp, r7
 8043724:	bd80      	pop	{r7, pc}

08043726 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8043726:	b580      	push	{r7, lr}
 8043728:	b086      	sub	sp, #24
 804372a:	af00      	add	r7, sp, #0
 804372c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 804372e:	687b      	ldr	r3, [r7, #4]
 8043730:	681b      	ldr	r3, [r3, #0]
 8043732:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8043734:	697b      	ldr	r3, [r7, #20]
 8043736:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8043738:	693b      	ldr	r3, [r7, #16]
 804373a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804373e:	681b      	ldr	r3, [r3, #0]
 8043740:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8043742:	693b      	ldr	r3, [r7, #16]
 8043744:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8043748:	681b      	ldr	r3, [r3, #0]
 804374a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 804374c:	68bb      	ldr	r3, [r7, #8]
 804374e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8043752:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8043754:	68fb      	ldr	r3, [r7, #12]
 8043756:	f003 0302 	and.w	r3, r3, #2
 804375a:	2b02      	cmp	r3, #2
 804375c:	d10b      	bne.n	8043776 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 804375e:	68fb      	ldr	r3, [r7, #12]
 8043760:	f003 0301 	and.w	r3, r3, #1
 8043764:	2b01      	cmp	r3, #1
 8043766:	d102      	bne.n	804376e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8043768:	6878      	ldr	r0, [r7, #4]
 804376a:	f005 fd65 	bl	8049238 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 804376e:	68bb      	ldr	r3, [r7, #8]
 8043770:	f043 0302 	orr.w	r3, r3, #2
 8043774:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8043776:	68fb      	ldr	r3, [r7, #12]
 8043778:	f003 0308 	and.w	r3, r3, #8
 804377c:	2b08      	cmp	r3, #8
 804377e:	d132      	bne.n	80437e6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8043780:	68bb      	ldr	r3, [r7, #8]
 8043782:	f043 0308 	orr.w	r3, r3, #8
 8043786:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8043788:	68fb      	ldr	r3, [r7, #12]
 804378a:	f003 0304 	and.w	r3, r3, #4
 804378e:	2b04      	cmp	r3, #4
 8043790:	d126      	bne.n	80437e0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8043792:	687b      	ldr	r3, [r7, #4]
 8043794:	699b      	ldr	r3, [r3, #24]
 8043796:	2b02      	cmp	r3, #2
 8043798:	d113      	bne.n	80437c2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 804379a:	68fb      	ldr	r3, [r7, #12]
 804379c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80437a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80437a4:	d106      	bne.n	80437b4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80437a6:	687b      	ldr	r3, [r7, #4]
 80437a8:	681b      	ldr	r3, [r3, #0]
 80437aa:	2102      	movs	r1, #2
 80437ac:	4618      	mov	r0, r3
 80437ae:	f002 ff85 	bl	80466bc <USB_InitFSLSPClkSel>
 80437b2:	e011      	b.n	80437d8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80437b4:	687b      	ldr	r3, [r7, #4]
 80437b6:	681b      	ldr	r3, [r3, #0]
 80437b8:	2101      	movs	r1, #1
 80437ba:	4618      	mov	r0, r3
 80437bc:	f002 ff7e 	bl	80466bc <USB_InitFSLSPClkSel>
 80437c0:	e00a      	b.n	80437d8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80437c2:	687b      	ldr	r3, [r7, #4]
 80437c4:	68db      	ldr	r3, [r3, #12]
 80437c6:	2b01      	cmp	r3, #1
 80437c8:	d106      	bne.n	80437d8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80437ca:	693b      	ldr	r3, [r7, #16]
 80437cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80437d0:	461a      	mov	r2, r3
 80437d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80437d6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80437d8:	6878      	ldr	r0, [r7, #4]
 80437da:	f005 fd57 	bl	804928c <HAL_HCD_PortEnabled_Callback>
 80437de:	e002      	b.n	80437e6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80437e0:	6878      	ldr	r0, [r7, #4]
 80437e2:	f005 fd61 	bl	80492a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80437e6:	68fb      	ldr	r3, [r7, #12]
 80437e8:	f003 0320 	and.w	r3, r3, #32
 80437ec:	2b20      	cmp	r3, #32
 80437ee:	d103      	bne.n	80437f8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80437f0:	68bb      	ldr	r3, [r7, #8]
 80437f2:	f043 0320 	orr.w	r3, r3, #32
 80437f6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80437f8:	693b      	ldr	r3, [r7, #16]
 80437fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80437fe:	461a      	mov	r2, r3
 8043800:	68bb      	ldr	r3, [r7, #8]
 8043802:	6013      	str	r3, [r2, #0]
}
 8043804:	bf00      	nop
 8043806:	3718      	adds	r7, #24
 8043808:	46bd      	mov	sp, r7
 804380a:	bd80      	pop	{r7, pc}

0804380c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 804380c:	b580      	push	{r7, lr}
 804380e:	b084      	sub	sp, #16
 8043810:	af00      	add	r7, sp, #0
 8043812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8043814:	687b      	ldr	r3, [r7, #4]
 8043816:	2b00      	cmp	r3, #0
 8043818:	d101      	bne.n	804381e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804381a:	2301      	movs	r3, #1
 804381c:	e12b      	b.n	8043a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 804381e:	687b      	ldr	r3, [r7, #4]
 8043820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043824:	b2db      	uxtb	r3, r3
 8043826:	2b00      	cmp	r3, #0
 8043828:	d106      	bne.n	8043838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804382a:	687b      	ldr	r3, [r7, #4]
 804382c:	2200      	movs	r2, #0
 804382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8043832:	6878      	ldr	r0, [r7, #4]
 8043834:	f7fd fa9c 	bl	8040d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8043838:	687b      	ldr	r3, [r7, #4]
 804383a:	2224      	movs	r2, #36	; 0x24
 804383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8043840:	687b      	ldr	r3, [r7, #4]
 8043842:	681b      	ldr	r3, [r3, #0]
 8043844:	681a      	ldr	r2, [r3, #0]
 8043846:	687b      	ldr	r3, [r7, #4]
 8043848:	681b      	ldr	r3, [r3, #0]
 804384a:	f022 0201 	bic.w	r2, r2, #1
 804384e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	681b      	ldr	r3, [r3, #0]
 8043854:	681a      	ldr	r2, [r3, #0]
 8043856:	687b      	ldr	r3, [r7, #4]
 8043858:	681b      	ldr	r3, [r3, #0]
 804385a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804385e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	681b      	ldr	r3, [r3, #0]
 8043864:	681a      	ldr	r2, [r3, #0]
 8043866:	687b      	ldr	r3, [r7, #4]
 8043868:	681b      	ldr	r3, [r3, #0]
 804386a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804386e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8043870:	f001 f964 	bl	8044b3c <HAL_RCC_GetPCLK1Freq>
 8043874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8043876:	687b      	ldr	r3, [r7, #4]
 8043878:	685b      	ldr	r3, [r3, #4]
 804387a:	4a81      	ldr	r2, [pc, #516]	; (8043a80 <HAL_I2C_Init+0x274>)
 804387c:	4293      	cmp	r3, r2
 804387e:	d807      	bhi.n	8043890 <HAL_I2C_Init+0x84>
 8043880:	68fb      	ldr	r3, [r7, #12]
 8043882:	4a80      	ldr	r2, [pc, #512]	; (8043a84 <HAL_I2C_Init+0x278>)
 8043884:	4293      	cmp	r3, r2
 8043886:	bf94      	ite	ls
 8043888:	2301      	movls	r3, #1
 804388a:	2300      	movhi	r3, #0
 804388c:	b2db      	uxtb	r3, r3
 804388e:	e006      	b.n	804389e <HAL_I2C_Init+0x92>
 8043890:	68fb      	ldr	r3, [r7, #12]
 8043892:	4a7d      	ldr	r2, [pc, #500]	; (8043a88 <HAL_I2C_Init+0x27c>)
 8043894:	4293      	cmp	r3, r2
 8043896:	bf94      	ite	ls
 8043898:	2301      	movls	r3, #1
 804389a:	2300      	movhi	r3, #0
 804389c:	b2db      	uxtb	r3, r3
 804389e:	2b00      	cmp	r3, #0
 80438a0:	d001      	beq.n	80438a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80438a2:	2301      	movs	r3, #1
 80438a4:	e0e7      	b.n	8043a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80438a6:	68fb      	ldr	r3, [r7, #12]
 80438a8:	4a78      	ldr	r2, [pc, #480]	; (8043a8c <HAL_I2C_Init+0x280>)
 80438aa:	fba2 2303 	umull	r2, r3, r2, r3
 80438ae:	0c9b      	lsrs	r3, r3, #18
 80438b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80438b2:	687b      	ldr	r3, [r7, #4]
 80438b4:	681b      	ldr	r3, [r3, #0]
 80438b6:	685b      	ldr	r3, [r3, #4]
 80438b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	681b      	ldr	r3, [r3, #0]
 80438c0:	68ba      	ldr	r2, [r7, #8]
 80438c2:	430a      	orrs	r2, r1
 80438c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80438c6:	687b      	ldr	r3, [r7, #4]
 80438c8:	681b      	ldr	r3, [r3, #0]
 80438ca:	6a1b      	ldr	r3, [r3, #32]
 80438cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80438d0:	687b      	ldr	r3, [r7, #4]
 80438d2:	685b      	ldr	r3, [r3, #4]
 80438d4:	4a6a      	ldr	r2, [pc, #424]	; (8043a80 <HAL_I2C_Init+0x274>)
 80438d6:	4293      	cmp	r3, r2
 80438d8:	d802      	bhi.n	80438e0 <HAL_I2C_Init+0xd4>
 80438da:	68bb      	ldr	r3, [r7, #8]
 80438dc:	3301      	adds	r3, #1
 80438de:	e009      	b.n	80438f4 <HAL_I2C_Init+0xe8>
 80438e0:	68bb      	ldr	r3, [r7, #8]
 80438e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80438e6:	fb02 f303 	mul.w	r3, r2, r3
 80438ea:	4a69      	ldr	r2, [pc, #420]	; (8043a90 <HAL_I2C_Init+0x284>)
 80438ec:	fba2 2303 	umull	r2, r3, r2, r3
 80438f0:	099b      	lsrs	r3, r3, #6
 80438f2:	3301      	adds	r3, #1
 80438f4:	687a      	ldr	r2, [r7, #4]
 80438f6:	6812      	ldr	r2, [r2, #0]
 80438f8:	430b      	orrs	r3, r1
 80438fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80438fc:	687b      	ldr	r3, [r7, #4]
 80438fe:	681b      	ldr	r3, [r3, #0]
 8043900:	69db      	ldr	r3, [r3, #28]
 8043902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8043906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 804390a:	687b      	ldr	r3, [r7, #4]
 804390c:	685b      	ldr	r3, [r3, #4]
 804390e:	495c      	ldr	r1, [pc, #368]	; (8043a80 <HAL_I2C_Init+0x274>)
 8043910:	428b      	cmp	r3, r1
 8043912:	d819      	bhi.n	8043948 <HAL_I2C_Init+0x13c>
 8043914:	68fb      	ldr	r3, [r7, #12]
 8043916:	1e59      	subs	r1, r3, #1
 8043918:	687b      	ldr	r3, [r7, #4]
 804391a:	685b      	ldr	r3, [r3, #4]
 804391c:	005b      	lsls	r3, r3, #1
 804391e:	fbb1 f3f3 	udiv	r3, r1, r3
 8043922:	1c59      	adds	r1, r3, #1
 8043924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8043928:	400b      	ands	r3, r1
 804392a:	2b00      	cmp	r3, #0
 804392c:	d00a      	beq.n	8043944 <HAL_I2C_Init+0x138>
 804392e:	68fb      	ldr	r3, [r7, #12]
 8043930:	1e59      	subs	r1, r3, #1
 8043932:	687b      	ldr	r3, [r7, #4]
 8043934:	685b      	ldr	r3, [r3, #4]
 8043936:	005b      	lsls	r3, r3, #1
 8043938:	fbb1 f3f3 	udiv	r3, r1, r3
 804393c:	3301      	adds	r3, #1
 804393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043942:	e051      	b.n	80439e8 <HAL_I2C_Init+0x1dc>
 8043944:	2304      	movs	r3, #4
 8043946:	e04f      	b.n	80439e8 <HAL_I2C_Init+0x1dc>
 8043948:	687b      	ldr	r3, [r7, #4]
 804394a:	689b      	ldr	r3, [r3, #8]
 804394c:	2b00      	cmp	r3, #0
 804394e:	d111      	bne.n	8043974 <HAL_I2C_Init+0x168>
 8043950:	68fb      	ldr	r3, [r7, #12]
 8043952:	1e58      	subs	r0, r3, #1
 8043954:	687b      	ldr	r3, [r7, #4]
 8043956:	6859      	ldr	r1, [r3, #4]
 8043958:	460b      	mov	r3, r1
 804395a:	005b      	lsls	r3, r3, #1
 804395c:	440b      	add	r3, r1
 804395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8043962:	3301      	adds	r3, #1
 8043964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043968:	2b00      	cmp	r3, #0
 804396a:	bf0c      	ite	eq
 804396c:	2301      	moveq	r3, #1
 804396e:	2300      	movne	r3, #0
 8043970:	b2db      	uxtb	r3, r3
 8043972:	e012      	b.n	804399a <HAL_I2C_Init+0x18e>
 8043974:	68fb      	ldr	r3, [r7, #12]
 8043976:	1e58      	subs	r0, r3, #1
 8043978:	687b      	ldr	r3, [r7, #4]
 804397a:	6859      	ldr	r1, [r3, #4]
 804397c:	460b      	mov	r3, r1
 804397e:	009b      	lsls	r3, r3, #2
 8043980:	440b      	add	r3, r1
 8043982:	0099      	lsls	r1, r3, #2
 8043984:	440b      	add	r3, r1
 8043986:	fbb0 f3f3 	udiv	r3, r0, r3
 804398a:	3301      	adds	r3, #1
 804398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043990:	2b00      	cmp	r3, #0
 8043992:	bf0c      	ite	eq
 8043994:	2301      	moveq	r3, #1
 8043996:	2300      	movne	r3, #0
 8043998:	b2db      	uxtb	r3, r3
 804399a:	2b00      	cmp	r3, #0
 804399c:	d001      	beq.n	80439a2 <HAL_I2C_Init+0x196>
 804399e:	2301      	movs	r3, #1
 80439a0:	e022      	b.n	80439e8 <HAL_I2C_Init+0x1dc>
 80439a2:	687b      	ldr	r3, [r7, #4]
 80439a4:	689b      	ldr	r3, [r3, #8]
 80439a6:	2b00      	cmp	r3, #0
 80439a8:	d10e      	bne.n	80439c8 <HAL_I2C_Init+0x1bc>
 80439aa:	68fb      	ldr	r3, [r7, #12]
 80439ac:	1e58      	subs	r0, r3, #1
 80439ae:	687b      	ldr	r3, [r7, #4]
 80439b0:	6859      	ldr	r1, [r3, #4]
 80439b2:	460b      	mov	r3, r1
 80439b4:	005b      	lsls	r3, r3, #1
 80439b6:	440b      	add	r3, r1
 80439b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80439bc:	3301      	adds	r3, #1
 80439be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80439c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80439c6:	e00f      	b.n	80439e8 <HAL_I2C_Init+0x1dc>
 80439c8:	68fb      	ldr	r3, [r7, #12]
 80439ca:	1e58      	subs	r0, r3, #1
 80439cc:	687b      	ldr	r3, [r7, #4]
 80439ce:	6859      	ldr	r1, [r3, #4]
 80439d0:	460b      	mov	r3, r1
 80439d2:	009b      	lsls	r3, r3, #2
 80439d4:	440b      	add	r3, r1
 80439d6:	0099      	lsls	r1, r3, #2
 80439d8:	440b      	add	r3, r1
 80439da:	fbb0 f3f3 	udiv	r3, r0, r3
 80439de:	3301      	adds	r3, #1
 80439e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80439e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80439e8:	6879      	ldr	r1, [r7, #4]
 80439ea:	6809      	ldr	r1, [r1, #0]
 80439ec:	4313      	orrs	r3, r2
 80439ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80439f0:	687b      	ldr	r3, [r7, #4]
 80439f2:	681b      	ldr	r3, [r3, #0]
 80439f4:	681b      	ldr	r3, [r3, #0]
 80439f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	69da      	ldr	r2, [r3, #28]
 80439fe:	687b      	ldr	r3, [r7, #4]
 8043a00:	6a1b      	ldr	r3, [r3, #32]
 8043a02:	431a      	orrs	r2, r3
 8043a04:	687b      	ldr	r3, [r7, #4]
 8043a06:	681b      	ldr	r3, [r3, #0]
 8043a08:	430a      	orrs	r2, r1
 8043a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8043a0c:	687b      	ldr	r3, [r7, #4]
 8043a0e:	681b      	ldr	r3, [r3, #0]
 8043a10:	689b      	ldr	r3, [r3, #8]
 8043a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8043a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8043a1a:	687a      	ldr	r2, [r7, #4]
 8043a1c:	6911      	ldr	r1, [r2, #16]
 8043a1e:	687a      	ldr	r2, [r7, #4]
 8043a20:	68d2      	ldr	r2, [r2, #12]
 8043a22:	4311      	orrs	r1, r2
 8043a24:	687a      	ldr	r2, [r7, #4]
 8043a26:	6812      	ldr	r2, [r2, #0]
 8043a28:	430b      	orrs	r3, r1
 8043a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8043a2c:	687b      	ldr	r3, [r7, #4]
 8043a2e:	681b      	ldr	r3, [r3, #0]
 8043a30:	68db      	ldr	r3, [r3, #12]
 8043a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8043a36:	687b      	ldr	r3, [r7, #4]
 8043a38:	695a      	ldr	r2, [r3, #20]
 8043a3a:	687b      	ldr	r3, [r7, #4]
 8043a3c:	699b      	ldr	r3, [r3, #24]
 8043a3e:	431a      	orrs	r2, r3
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	681b      	ldr	r3, [r3, #0]
 8043a44:	430a      	orrs	r2, r1
 8043a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8043a48:	687b      	ldr	r3, [r7, #4]
 8043a4a:	681b      	ldr	r3, [r3, #0]
 8043a4c:	681a      	ldr	r2, [r3, #0]
 8043a4e:	687b      	ldr	r3, [r7, #4]
 8043a50:	681b      	ldr	r3, [r3, #0]
 8043a52:	f042 0201 	orr.w	r2, r2, #1
 8043a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8043a58:	687b      	ldr	r3, [r7, #4]
 8043a5a:	2200      	movs	r2, #0
 8043a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8043a5e:	687b      	ldr	r3, [r7, #4]
 8043a60:	2220      	movs	r2, #32
 8043a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8043a66:	687b      	ldr	r3, [r7, #4]
 8043a68:	2200      	movs	r2, #0
 8043a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8043a6c:	687b      	ldr	r3, [r7, #4]
 8043a6e:	2200      	movs	r2, #0
 8043a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8043a74:	2300      	movs	r3, #0
}
 8043a76:	4618      	mov	r0, r3
 8043a78:	3710      	adds	r7, #16
 8043a7a:	46bd      	mov	sp, r7
 8043a7c:	bd80      	pop	{r7, pc}
 8043a7e:	bf00      	nop
 8043a80:	000186a0 	.word	0x000186a0
 8043a84:	001e847f 	.word	0x001e847f
 8043a88:	003d08ff 	.word	0x003d08ff
 8043a8c:	431bde83 	.word	0x431bde83
 8043a90:	10624dd3 	.word	0x10624dd3

08043a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8043a94:	b480      	push	{r7}
 8043a96:	b083      	sub	sp, #12
 8043a98:	af00      	add	r7, sp, #0
 8043a9a:	6078      	str	r0, [r7, #4]
 8043a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8043a9e:	687b      	ldr	r3, [r7, #4]
 8043aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043aa4:	b2db      	uxtb	r3, r3
 8043aa6:	2b20      	cmp	r3, #32
 8043aa8:	d129      	bne.n	8043afe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8043aaa:	687b      	ldr	r3, [r7, #4]
 8043aac:	2224      	movs	r2, #36	; 0x24
 8043aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8043ab2:	687b      	ldr	r3, [r7, #4]
 8043ab4:	681b      	ldr	r3, [r3, #0]
 8043ab6:	681a      	ldr	r2, [r3, #0]
 8043ab8:	687b      	ldr	r3, [r7, #4]
 8043aba:	681b      	ldr	r3, [r3, #0]
 8043abc:	f022 0201 	bic.w	r2, r2, #1
 8043ac0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8043ac2:	687b      	ldr	r3, [r7, #4]
 8043ac4:	681b      	ldr	r3, [r3, #0]
 8043ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043ac8:	687b      	ldr	r3, [r7, #4]
 8043aca:	681b      	ldr	r3, [r3, #0]
 8043acc:	f022 0210 	bic.w	r2, r2, #16
 8043ad0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8043ad2:	687b      	ldr	r3, [r7, #4]
 8043ad4:	681b      	ldr	r3, [r3, #0]
 8043ad6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8043ad8:	687b      	ldr	r3, [r7, #4]
 8043ada:	681b      	ldr	r3, [r3, #0]
 8043adc:	683a      	ldr	r2, [r7, #0]
 8043ade:	430a      	orrs	r2, r1
 8043ae0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8043ae2:	687b      	ldr	r3, [r7, #4]
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	681a      	ldr	r2, [r3, #0]
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	681b      	ldr	r3, [r3, #0]
 8043aec:	f042 0201 	orr.w	r2, r2, #1
 8043af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8043af2:	687b      	ldr	r3, [r7, #4]
 8043af4:	2220      	movs	r2, #32
 8043af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8043afa:	2300      	movs	r3, #0
 8043afc:	e000      	b.n	8043b00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8043afe:	2302      	movs	r3, #2
  }
}
 8043b00:	4618      	mov	r0, r3
 8043b02:	370c      	adds	r7, #12
 8043b04:	46bd      	mov	sp, r7
 8043b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b0a:	4770      	bx	lr

08043b0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8043b0c:	b480      	push	{r7}
 8043b0e:	b085      	sub	sp, #20
 8043b10:	af00      	add	r7, sp, #0
 8043b12:	6078      	str	r0, [r7, #4]
 8043b14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8043b16:	2300      	movs	r3, #0
 8043b18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8043b1a:	687b      	ldr	r3, [r7, #4]
 8043b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8043b20:	b2db      	uxtb	r3, r3
 8043b22:	2b20      	cmp	r3, #32
 8043b24:	d12a      	bne.n	8043b7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	2224      	movs	r2, #36	; 0x24
 8043b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8043b2e:	687b      	ldr	r3, [r7, #4]
 8043b30:	681b      	ldr	r3, [r3, #0]
 8043b32:	681a      	ldr	r2, [r3, #0]
 8043b34:	687b      	ldr	r3, [r7, #4]
 8043b36:	681b      	ldr	r3, [r3, #0]
 8043b38:	f022 0201 	bic.w	r2, r2, #1
 8043b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8043b3e:	687b      	ldr	r3, [r7, #4]
 8043b40:	681b      	ldr	r3, [r3, #0]
 8043b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043b44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8043b46:	89fb      	ldrh	r3, [r7, #14]
 8043b48:	f023 030f 	bic.w	r3, r3, #15
 8043b4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8043b4e:	683b      	ldr	r3, [r7, #0]
 8043b50:	b29a      	uxth	r2, r3
 8043b52:	89fb      	ldrh	r3, [r7, #14]
 8043b54:	4313      	orrs	r3, r2
 8043b56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8043b58:	687b      	ldr	r3, [r7, #4]
 8043b5a:	681b      	ldr	r3, [r3, #0]
 8043b5c:	89fa      	ldrh	r2, [r7, #14]
 8043b5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8043b60:	687b      	ldr	r3, [r7, #4]
 8043b62:	681b      	ldr	r3, [r3, #0]
 8043b64:	681a      	ldr	r2, [r3, #0]
 8043b66:	687b      	ldr	r3, [r7, #4]
 8043b68:	681b      	ldr	r3, [r3, #0]
 8043b6a:	f042 0201 	orr.w	r2, r2, #1
 8043b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8043b70:	687b      	ldr	r3, [r7, #4]
 8043b72:	2220      	movs	r2, #32
 8043b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8043b78:	2300      	movs	r3, #0
 8043b7a:	e000      	b.n	8043b7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8043b7c:	2302      	movs	r3, #2
  }
}
 8043b7e:	4618      	mov	r0, r3
 8043b80:	3714      	adds	r7, #20
 8043b82:	46bd      	mov	sp, r7
 8043b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b88:	4770      	bx	lr
	...

08043b8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8043b8c:	b580      	push	{r7, lr}
 8043b8e:	b084      	sub	sp, #16
 8043b90:	af00      	add	r7, sp, #0
 8043b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8043b94:	687b      	ldr	r3, [r7, #4]
 8043b96:	2b00      	cmp	r3, #0
 8043b98:	d101      	bne.n	8043b9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8043b9a:	2301      	movs	r3, #1
 8043b9c:	e0bf      	b.n	8043d1e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8043b9e:	687b      	ldr	r3, [r7, #4]
 8043ba0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8043ba4:	b2db      	uxtb	r3, r3
 8043ba6:	2b00      	cmp	r3, #0
 8043ba8:	d106      	bne.n	8043bb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8043baa:	687b      	ldr	r3, [r7, #4]
 8043bac:	2200      	movs	r2, #0
 8043bae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8043bb2:	6878      	ldr	r0, [r7, #4]
 8043bb4:	f7fd f946 	bl	8040e44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8043bb8:	687b      	ldr	r3, [r7, #4]
 8043bba:	2202      	movs	r2, #2
 8043bbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8043bc0:	687b      	ldr	r3, [r7, #4]
 8043bc2:	681b      	ldr	r3, [r3, #0]
 8043bc4:	699a      	ldr	r2, [r3, #24]
 8043bc6:	687b      	ldr	r3, [r7, #4]
 8043bc8:	681b      	ldr	r3, [r3, #0]
 8043bca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8043bce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8043bd0:	687b      	ldr	r3, [r7, #4]
 8043bd2:	681b      	ldr	r3, [r3, #0]
 8043bd4:	6999      	ldr	r1, [r3, #24]
 8043bd6:	687b      	ldr	r3, [r7, #4]
 8043bd8:	685a      	ldr	r2, [r3, #4]
 8043bda:	687b      	ldr	r3, [r7, #4]
 8043bdc:	689b      	ldr	r3, [r3, #8]
 8043bde:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8043be0:	687b      	ldr	r3, [r7, #4]
 8043be2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8043be4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8043be6:	687b      	ldr	r3, [r7, #4]
 8043be8:	691b      	ldr	r3, [r3, #16]
 8043bea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8043bec:	687b      	ldr	r3, [r7, #4]
 8043bee:	681b      	ldr	r3, [r3, #0]
 8043bf0:	430a      	orrs	r2, r1
 8043bf2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8043bf4:	687b      	ldr	r3, [r7, #4]
 8043bf6:	681b      	ldr	r3, [r3, #0]
 8043bf8:	6899      	ldr	r1, [r3, #8]
 8043bfa:	687b      	ldr	r3, [r7, #4]
 8043bfc:	681a      	ldr	r2, [r3, #0]
 8043bfe:	4b4a      	ldr	r3, [pc, #296]	; (8043d28 <HAL_LTDC_Init+0x19c>)
 8043c00:	400b      	ands	r3, r1
 8043c02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8043c04:	687b      	ldr	r3, [r7, #4]
 8043c06:	695b      	ldr	r3, [r3, #20]
 8043c08:	041b      	lsls	r3, r3, #16
 8043c0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	681b      	ldr	r3, [r3, #0]
 8043c10:	6899      	ldr	r1, [r3, #8]
 8043c12:	687b      	ldr	r3, [r7, #4]
 8043c14:	699a      	ldr	r2, [r3, #24]
 8043c16:	68fb      	ldr	r3, [r7, #12]
 8043c18:	431a      	orrs	r2, r3
 8043c1a:	687b      	ldr	r3, [r7, #4]
 8043c1c:	681b      	ldr	r3, [r3, #0]
 8043c1e:	430a      	orrs	r2, r1
 8043c20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8043c22:	687b      	ldr	r3, [r7, #4]
 8043c24:	681b      	ldr	r3, [r3, #0]
 8043c26:	68d9      	ldr	r1, [r3, #12]
 8043c28:	687b      	ldr	r3, [r7, #4]
 8043c2a:	681a      	ldr	r2, [r3, #0]
 8043c2c:	4b3e      	ldr	r3, [pc, #248]	; (8043d28 <HAL_LTDC_Init+0x19c>)
 8043c2e:	400b      	ands	r3, r1
 8043c30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8043c32:	687b      	ldr	r3, [r7, #4]
 8043c34:	69db      	ldr	r3, [r3, #28]
 8043c36:	041b      	lsls	r3, r3, #16
 8043c38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8043c3a:	687b      	ldr	r3, [r7, #4]
 8043c3c:	681b      	ldr	r3, [r3, #0]
 8043c3e:	68d9      	ldr	r1, [r3, #12]
 8043c40:	687b      	ldr	r3, [r7, #4]
 8043c42:	6a1a      	ldr	r2, [r3, #32]
 8043c44:	68fb      	ldr	r3, [r7, #12]
 8043c46:	431a      	orrs	r2, r3
 8043c48:	687b      	ldr	r3, [r7, #4]
 8043c4a:	681b      	ldr	r3, [r3, #0]
 8043c4c:	430a      	orrs	r2, r1
 8043c4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8043c50:	687b      	ldr	r3, [r7, #4]
 8043c52:	681b      	ldr	r3, [r3, #0]
 8043c54:	6919      	ldr	r1, [r3, #16]
 8043c56:	687b      	ldr	r3, [r7, #4]
 8043c58:	681a      	ldr	r2, [r3, #0]
 8043c5a:	4b33      	ldr	r3, [pc, #204]	; (8043d28 <HAL_LTDC_Init+0x19c>)
 8043c5c:	400b      	ands	r3, r1
 8043c5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8043c60:	687b      	ldr	r3, [r7, #4]
 8043c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043c64:	041b      	lsls	r3, r3, #16
 8043c66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8043c68:	687b      	ldr	r3, [r7, #4]
 8043c6a:	681b      	ldr	r3, [r3, #0]
 8043c6c:	6919      	ldr	r1, [r3, #16]
 8043c6e:	687b      	ldr	r3, [r7, #4]
 8043c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8043c72:	68fb      	ldr	r3, [r7, #12]
 8043c74:	431a      	orrs	r2, r3
 8043c76:	687b      	ldr	r3, [r7, #4]
 8043c78:	681b      	ldr	r3, [r3, #0]
 8043c7a:	430a      	orrs	r2, r1
 8043c7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8043c7e:	687b      	ldr	r3, [r7, #4]
 8043c80:	681b      	ldr	r3, [r3, #0]
 8043c82:	6959      	ldr	r1, [r3, #20]
 8043c84:	687b      	ldr	r3, [r7, #4]
 8043c86:	681a      	ldr	r2, [r3, #0]
 8043c88:	4b27      	ldr	r3, [pc, #156]	; (8043d28 <HAL_LTDC_Init+0x19c>)
 8043c8a:	400b      	ands	r3, r1
 8043c8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8043c8e:	687b      	ldr	r3, [r7, #4]
 8043c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043c92:	041b      	lsls	r3, r3, #16
 8043c94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8043c96:	687b      	ldr	r3, [r7, #4]
 8043c98:	681b      	ldr	r3, [r3, #0]
 8043c9a:	6959      	ldr	r1, [r3, #20]
 8043c9c:	687b      	ldr	r3, [r7, #4]
 8043c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8043ca0:	68fb      	ldr	r3, [r7, #12]
 8043ca2:	431a      	orrs	r2, r3
 8043ca4:	687b      	ldr	r3, [r7, #4]
 8043ca6:	681b      	ldr	r3, [r3, #0]
 8043ca8:	430a      	orrs	r2, r1
 8043caa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8043cac:	687b      	ldr	r3, [r7, #4]
 8043cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8043cb2:	021b      	lsls	r3, r3, #8
 8043cb4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8043cb6:	687b      	ldr	r3, [r7, #4]
 8043cb8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8043cbc:	041b      	lsls	r3, r3, #16
 8043cbe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8043cc0:	687b      	ldr	r3, [r7, #4]
 8043cc2:	681b      	ldr	r3, [r3, #0]
 8043cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043cc6:	687b      	ldr	r3, [r7, #4]
 8043cc8:	681b      	ldr	r3, [r3, #0]
 8043cca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8043cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8043cd0:	687b      	ldr	r3, [r7, #4]
 8043cd2:	681b      	ldr	r3, [r3, #0]
 8043cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8043cd6:	68ba      	ldr	r2, [r7, #8]
 8043cd8:	68fb      	ldr	r3, [r7, #12]
 8043cda:	4313      	orrs	r3, r2
 8043cdc:	687a      	ldr	r2, [r7, #4]
 8043cde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8043ce2:	431a      	orrs	r2, r3
 8043ce4:	687b      	ldr	r3, [r7, #4]
 8043ce6:	681b      	ldr	r3, [r3, #0]
 8043ce8:	430a      	orrs	r2, r1
 8043cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8043cec:	687b      	ldr	r3, [r7, #4]
 8043cee:	681b      	ldr	r3, [r3, #0]
 8043cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043cf2:	687b      	ldr	r3, [r7, #4]
 8043cf4:	681b      	ldr	r3, [r3, #0]
 8043cf6:	f042 0206 	orr.w	r2, r2, #6
 8043cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8043cfc:	687b      	ldr	r3, [r7, #4]
 8043cfe:	681b      	ldr	r3, [r3, #0]
 8043d00:	699a      	ldr	r2, [r3, #24]
 8043d02:	687b      	ldr	r3, [r7, #4]
 8043d04:	681b      	ldr	r3, [r3, #0]
 8043d06:	f042 0201 	orr.w	r2, r2, #1
 8043d0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8043d0c:	687b      	ldr	r3, [r7, #4]
 8043d0e:	2200      	movs	r2, #0
 8043d10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8043d14:	687b      	ldr	r3, [r7, #4]
 8043d16:	2201      	movs	r2, #1
 8043d18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8043d1c:	2300      	movs	r3, #0
}
 8043d1e:	4618      	mov	r0, r3
 8043d20:	3710      	adds	r7, #16
 8043d22:	46bd      	mov	sp, r7
 8043d24:	bd80      	pop	{r7, pc}
 8043d26:	bf00      	nop
 8043d28:	f000f800 	.word	0xf000f800

08043d2c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8043d2c:	b580      	push	{r7, lr}
 8043d2e:	b084      	sub	sp, #16
 8043d30:	af00      	add	r7, sp, #0
 8043d32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8043d34:	687b      	ldr	r3, [r7, #4]
 8043d36:	681b      	ldr	r3, [r3, #0]
 8043d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8043d3c:	687b      	ldr	r3, [r7, #4]
 8043d3e:	681b      	ldr	r3, [r3, #0]
 8043d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043d42:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8043d44:	68fb      	ldr	r3, [r7, #12]
 8043d46:	f003 0304 	and.w	r3, r3, #4
 8043d4a:	2b00      	cmp	r3, #0
 8043d4c:	d023      	beq.n	8043d96 <HAL_LTDC_IRQHandler+0x6a>
 8043d4e:	68bb      	ldr	r3, [r7, #8]
 8043d50:	f003 0304 	and.w	r3, r3, #4
 8043d54:	2b00      	cmp	r3, #0
 8043d56:	d01e      	beq.n	8043d96 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8043d58:	687b      	ldr	r3, [r7, #4]
 8043d5a:	681b      	ldr	r3, [r3, #0]
 8043d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043d5e:	687b      	ldr	r3, [r7, #4]
 8043d60:	681b      	ldr	r3, [r3, #0]
 8043d62:	f022 0204 	bic.w	r2, r2, #4
 8043d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8043d68:	687b      	ldr	r3, [r7, #4]
 8043d6a:	681b      	ldr	r3, [r3, #0]
 8043d6c:	2204      	movs	r2, #4
 8043d6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8043d70:	687b      	ldr	r3, [r7, #4]
 8043d72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8043d76:	f043 0201 	orr.w	r2, r3, #1
 8043d7a:	687b      	ldr	r3, [r7, #4]
 8043d7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8043d80:	687b      	ldr	r3, [r7, #4]
 8043d82:	2204      	movs	r2, #4
 8043d84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8043d88:	687b      	ldr	r3, [r7, #4]
 8043d8a:	2200      	movs	r2, #0
 8043d8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8043d90:	6878      	ldr	r0, [r7, #4]
 8043d92:	f000 f86f 	bl	8043e74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8043d96:	68fb      	ldr	r3, [r7, #12]
 8043d98:	f003 0302 	and.w	r3, r3, #2
 8043d9c:	2b00      	cmp	r3, #0
 8043d9e:	d023      	beq.n	8043de8 <HAL_LTDC_IRQHandler+0xbc>
 8043da0:	68bb      	ldr	r3, [r7, #8]
 8043da2:	f003 0302 	and.w	r3, r3, #2
 8043da6:	2b00      	cmp	r3, #0
 8043da8:	d01e      	beq.n	8043de8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8043daa:	687b      	ldr	r3, [r7, #4]
 8043dac:	681b      	ldr	r3, [r3, #0]
 8043dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043db0:	687b      	ldr	r3, [r7, #4]
 8043db2:	681b      	ldr	r3, [r3, #0]
 8043db4:	f022 0202 	bic.w	r2, r2, #2
 8043db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8043dba:	687b      	ldr	r3, [r7, #4]
 8043dbc:	681b      	ldr	r3, [r3, #0]
 8043dbe:	2202      	movs	r2, #2
 8043dc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8043dc2:	687b      	ldr	r3, [r7, #4]
 8043dc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8043dc8:	f043 0202 	orr.w	r2, r3, #2
 8043dcc:	687b      	ldr	r3, [r7, #4]
 8043dce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8043dd2:	687b      	ldr	r3, [r7, #4]
 8043dd4:	2204      	movs	r2, #4
 8043dd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8043dda:	687b      	ldr	r3, [r7, #4]
 8043ddc:	2200      	movs	r2, #0
 8043dde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8043de2:	6878      	ldr	r0, [r7, #4]
 8043de4:	f000 f846 	bl	8043e74 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8043de8:	68fb      	ldr	r3, [r7, #12]
 8043dea:	f003 0301 	and.w	r3, r3, #1
 8043dee:	2b00      	cmp	r3, #0
 8043df0:	d01b      	beq.n	8043e2a <HAL_LTDC_IRQHandler+0xfe>
 8043df2:	68bb      	ldr	r3, [r7, #8]
 8043df4:	f003 0301 	and.w	r3, r3, #1
 8043df8:	2b00      	cmp	r3, #0
 8043dfa:	d016      	beq.n	8043e2a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8043dfc:	687b      	ldr	r3, [r7, #4]
 8043dfe:	681b      	ldr	r3, [r3, #0]
 8043e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043e02:	687b      	ldr	r3, [r7, #4]
 8043e04:	681b      	ldr	r3, [r3, #0]
 8043e06:	f022 0201 	bic.w	r2, r2, #1
 8043e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8043e0c:	687b      	ldr	r3, [r7, #4]
 8043e0e:	681b      	ldr	r3, [r3, #0]
 8043e10:	2201      	movs	r2, #1
 8043e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8043e14:	687b      	ldr	r3, [r7, #4]
 8043e16:	2201      	movs	r2, #1
 8043e18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8043e1c:	687b      	ldr	r3, [r7, #4]
 8043e1e:	2200      	movs	r2, #0
 8043e20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8043e24:	6878      	ldr	r0, [r7, #4]
 8043e26:	f000 f82f 	bl	8043e88 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8043e2a:	68fb      	ldr	r3, [r7, #12]
 8043e2c:	f003 0308 	and.w	r3, r3, #8
 8043e30:	2b00      	cmp	r3, #0
 8043e32:	d01b      	beq.n	8043e6c <HAL_LTDC_IRQHandler+0x140>
 8043e34:	68bb      	ldr	r3, [r7, #8]
 8043e36:	f003 0308 	and.w	r3, r3, #8
 8043e3a:	2b00      	cmp	r3, #0
 8043e3c:	d016      	beq.n	8043e6c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8043e3e:	687b      	ldr	r3, [r7, #4]
 8043e40:	681b      	ldr	r3, [r3, #0]
 8043e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043e44:	687b      	ldr	r3, [r7, #4]
 8043e46:	681b      	ldr	r3, [r3, #0]
 8043e48:	f022 0208 	bic.w	r2, r2, #8
 8043e4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8043e4e:	687b      	ldr	r3, [r7, #4]
 8043e50:	681b      	ldr	r3, [r3, #0]
 8043e52:	2208      	movs	r2, #8
 8043e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8043e56:	687b      	ldr	r3, [r7, #4]
 8043e58:	2201      	movs	r2, #1
 8043e5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8043e5e:	687b      	ldr	r3, [r7, #4]
 8043e60:	2200      	movs	r2, #0
 8043e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8043e66:	6878      	ldr	r0, [r7, #4]
 8043e68:	f000 f818 	bl	8043e9c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8043e6c:	bf00      	nop
 8043e6e:	3710      	adds	r7, #16
 8043e70:	46bd      	mov	sp, r7
 8043e72:	bd80      	pop	{r7, pc}

08043e74 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8043e74:	b480      	push	{r7}
 8043e76:	b083      	sub	sp, #12
 8043e78:	af00      	add	r7, sp, #0
 8043e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8043e7c:	bf00      	nop
 8043e7e:	370c      	adds	r7, #12
 8043e80:	46bd      	mov	sp, r7
 8043e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e86:	4770      	bx	lr

08043e88 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8043e88:	b480      	push	{r7}
 8043e8a:	b083      	sub	sp, #12
 8043e8c:	af00      	add	r7, sp, #0
 8043e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8043e90:	bf00      	nop
 8043e92:	370c      	adds	r7, #12
 8043e94:	46bd      	mov	sp, r7
 8043e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e9a:	4770      	bx	lr

08043e9c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8043e9c:	b480      	push	{r7}
 8043e9e:	b083      	sub	sp, #12
 8043ea0:	af00      	add	r7, sp, #0
 8043ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8043ea4:	bf00      	nop
 8043ea6:	370c      	adds	r7, #12
 8043ea8:	46bd      	mov	sp, r7
 8043eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eae:	4770      	bx	lr

08043eb0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8043eb0:	b5b0      	push	{r4, r5, r7, lr}
 8043eb2:	b084      	sub	sp, #16
 8043eb4:	af00      	add	r7, sp, #0
 8043eb6:	60f8      	str	r0, [r7, #12]
 8043eb8:	60b9      	str	r1, [r7, #8]
 8043eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8043ebc:	68fb      	ldr	r3, [r7, #12]
 8043ebe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8043ec2:	2b01      	cmp	r3, #1
 8043ec4:	d101      	bne.n	8043eca <HAL_LTDC_ConfigLayer+0x1a>
 8043ec6:	2302      	movs	r3, #2
 8043ec8:	e02c      	b.n	8043f24 <HAL_LTDC_ConfigLayer+0x74>
 8043eca:	68fb      	ldr	r3, [r7, #12]
 8043ecc:	2201      	movs	r2, #1
 8043ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8043ed2:	68fb      	ldr	r3, [r7, #12]
 8043ed4:	2202      	movs	r2, #2
 8043ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8043eda:	68fa      	ldr	r2, [r7, #12]
 8043edc:	687b      	ldr	r3, [r7, #4]
 8043ede:	2134      	movs	r1, #52	; 0x34
 8043ee0:	fb01 f303 	mul.w	r3, r1, r3
 8043ee4:	4413      	add	r3, r2
 8043ee6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8043eea:	68bb      	ldr	r3, [r7, #8]
 8043eec:	4614      	mov	r4, r2
 8043eee:	461d      	mov	r5, r3
 8043ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8043ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8043ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8043ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8043ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8043efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8043efc:	682b      	ldr	r3, [r5, #0]
 8043efe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8043f00:	687a      	ldr	r2, [r7, #4]
 8043f02:	68b9      	ldr	r1, [r7, #8]
 8043f04:	68f8      	ldr	r0, [r7, #12]
 8043f06:	f000 f811 	bl	8043f2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8043f0a:	68fb      	ldr	r3, [r7, #12]
 8043f0c:	681b      	ldr	r3, [r3, #0]
 8043f0e:	2201      	movs	r2, #1
 8043f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8043f12:	68fb      	ldr	r3, [r7, #12]
 8043f14:	2201      	movs	r2, #1
 8043f16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8043f1a:	68fb      	ldr	r3, [r7, #12]
 8043f1c:	2200      	movs	r2, #0
 8043f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8043f22:	2300      	movs	r3, #0
}
 8043f24:	4618      	mov	r0, r3
 8043f26:	3710      	adds	r7, #16
 8043f28:	46bd      	mov	sp, r7
 8043f2a:	bdb0      	pop	{r4, r5, r7, pc}

08043f2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8043f2c:	b480      	push	{r7}
 8043f2e:	b089      	sub	sp, #36	; 0x24
 8043f30:	af00      	add	r7, sp, #0
 8043f32:	60f8      	str	r0, [r7, #12]
 8043f34:	60b9      	str	r1, [r7, #8]
 8043f36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8043f38:	68bb      	ldr	r3, [r7, #8]
 8043f3a:	685a      	ldr	r2, [r3, #4]
 8043f3c:	68fb      	ldr	r3, [r7, #12]
 8043f3e:	681b      	ldr	r3, [r3, #0]
 8043f40:	68db      	ldr	r3, [r3, #12]
 8043f42:	0c1b      	lsrs	r3, r3, #16
 8043f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043f48:	4413      	add	r3, r2
 8043f4a:	041b      	lsls	r3, r3, #16
 8043f4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8043f4e:	68fb      	ldr	r3, [r7, #12]
 8043f50:	681b      	ldr	r3, [r3, #0]
 8043f52:	461a      	mov	r2, r3
 8043f54:	687b      	ldr	r3, [r7, #4]
 8043f56:	01db      	lsls	r3, r3, #7
 8043f58:	4413      	add	r3, r2
 8043f5a:	3384      	adds	r3, #132	; 0x84
 8043f5c:	685b      	ldr	r3, [r3, #4]
 8043f5e:	68fa      	ldr	r2, [r7, #12]
 8043f60:	6812      	ldr	r2, [r2, #0]
 8043f62:	4611      	mov	r1, r2
 8043f64:	687a      	ldr	r2, [r7, #4]
 8043f66:	01d2      	lsls	r2, r2, #7
 8043f68:	440a      	add	r2, r1
 8043f6a:	3284      	adds	r2, #132	; 0x84
 8043f6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8043f70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8043f72:	68bb      	ldr	r3, [r7, #8]
 8043f74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8043f76:	68fb      	ldr	r3, [r7, #12]
 8043f78:	681b      	ldr	r3, [r3, #0]
 8043f7a:	68db      	ldr	r3, [r3, #12]
 8043f7c:	0c1b      	lsrs	r3, r3, #16
 8043f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8043f82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8043f84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8043f86:	68fb      	ldr	r3, [r7, #12]
 8043f88:	681b      	ldr	r3, [r3, #0]
 8043f8a:	4619      	mov	r1, r3
 8043f8c:	687b      	ldr	r3, [r7, #4]
 8043f8e:	01db      	lsls	r3, r3, #7
 8043f90:	440b      	add	r3, r1
 8043f92:	3384      	adds	r3, #132	; 0x84
 8043f94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8043f96:	69fb      	ldr	r3, [r7, #28]
 8043f98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8043f9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8043f9c:	68bb      	ldr	r3, [r7, #8]
 8043f9e:	68da      	ldr	r2, [r3, #12]
 8043fa0:	68fb      	ldr	r3, [r7, #12]
 8043fa2:	681b      	ldr	r3, [r3, #0]
 8043fa4:	68db      	ldr	r3, [r3, #12]
 8043fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8043faa:	4413      	add	r3, r2
 8043fac:	041b      	lsls	r3, r3, #16
 8043fae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8043fb0:	68fb      	ldr	r3, [r7, #12]
 8043fb2:	681b      	ldr	r3, [r3, #0]
 8043fb4:	461a      	mov	r2, r3
 8043fb6:	687b      	ldr	r3, [r7, #4]
 8043fb8:	01db      	lsls	r3, r3, #7
 8043fba:	4413      	add	r3, r2
 8043fbc:	3384      	adds	r3, #132	; 0x84
 8043fbe:	689b      	ldr	r3, [r3, #8]
 8043fc0:	68fa      	ldr	r2, [r7, #12]
 8043fc2:	6812      	ldr	r2, [r2, #0]
 8043fc4:	4611      	mov	r1, r2
 8043fc6:	687a      	ldr	r2, [r7, #4]
 8043fc8:	01d2      	lsls	r2, r2, #7
 8043fca:	440a      	add	r2, r1
 8043fcc:	3284      	adds	r2, #132	; 0x84
 8043fce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8043fd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8043fd4:	68bb      	ldr	r3, [r7, #8]
 8043fd6:	689a      	ldr	r2, [r3, #8]
 8043fd8:	68fb      	ldr	r3, [r7, #12]
 8043fda:	681b      	ldr	r3, [r3, #0]
 8043fdc:	68db      	ldr	r3, [r3, #12]
 8043fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8043fe2:	4413      	add	r3, r2
 8043fe4:	1c5a      	adds	r2, r3, #1
 8043fe6:	68fb      	ldr	r3, [r7, #12]
 8043fe8:	681b      	ldr	r3, [r3, #0]
 8043fea:	4619      	mov	r1, r3
 8043fec:	687b      	ldr	r3, [r7, #4]
 8043fee:	01db      	lsls	r3, r3, #7
 8043ff0:	440b      	add	r3, r1
 8043ff2:	3384      	adds	r3, #132	; 0x84
 8043ff4:	4619      	mov	r1, r3
 8043ff6:	69fb      	ldr	r3, [r7, #28]
 8043ff8:	4313      	orrs	r3, r2
 8043ffa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8043ffc:	68fb      	ldr	r3, [r7, #12]
 8043ffe:	681b      	ldr	r3, [r3, #0]
 8044000:	461a      	mov	r2, r3
 8044002:	687b      	ldr	r3, [r7, #4]
 8044004:	01db      	lsls	r3, r3, #7
 8044006:	4413      	add	r3, r2
 8044008:	3384      	adds	r3, #132	; 0x84
 804400a:	691b      	ldr	r3, [r3, #16]
 804400c:	68fa      	ldr	r2, [r7, #12]
 804400e:	6812      	ldr	r2, [r2, #0]
 8044010:	4611      	mov	r1, r2
 8044012:	687a      	ldr	r2, [r7, #4]
 8044014:	01d2      	lsls	r2, r2, #7
 8044016:	440a      	add	r2, r1
 8044018:	3284      	adds	r2, #132	; 0x84
 804401a:	f023 0307 	bic.w	r3, r3, #7
 804401e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8044020:	68fb      	ldr	r3, [r7, #12]
 8044022:	681b      	ldr	r3, [r3, #0]
 8044024:	461a      	mov	r2, r3
 8044026:	687b      	ldr	r3, [r7, #4]
 8044028:	01db      	lsls	r3, r3, #7
 804402a:	4413      	add	r3, r2
 804402c:	3384      	adds	r3, #132	; 0x84
 804402e:	461a      	mov	r2, r3
 8044030:	68bb      	ldr	r3, [r7, #8]
 8044032:	691b      	ldr	r3, [r3, #16]
 8044034:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8044036:	68bb      	ldr	r3, [r7, #8]
 8044038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 804403c:	021b      	lsls	r3, r3, #8
 804403e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8044040:	68bb      	ldr	r3, [r7, #8]
 8044042:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8044046:	041b      	lsls	r3, r3, #16
 8044048:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 804404a:	68bb      	ldr	r3, [r7, #8]
 804404c:	699b      	ldr	r3, [r3, #24]
 804404e:	061b      	lsls	r3, r3, #24
 8044050:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8044052:	68fb      	ldr	r3, [r7, #12]
 8044054:	681b      	ldr	r3, [r3, #0]
 8044056:	461a      	mov	r2, r3
 8044058:	687b      	ldr	r3, [r7, #4]
 804405a:	01db      	lsls	r3, r3, #7
 804405c:	4413      	add	r3, r2
 804405e:	3384      	adds	r3, #132	; 0x84
 8044060:	699b      	ldr	r3, [r3, #24]
 8044062:	68fb      	ldr	r3, [r7, #12]
 8044064:	681b      	ldr	r3, [r3, #0]
 8044066:	461a      	mov	r2, r3
 8044068:	687b      	ldr	r3, [r7, #4]
 804406a:	01db      	lsls	r3, r3, #7
 804406c:	4413      	add	r3, r2
 804406e:	3384      	adds	r3, #132	; 0x84
 8044070:	461a      	mov	r2, r3
 8044072:	2300      	movs	r3, #0
 8044074:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8044076:	68bb      	ldr	r3, [r7, #8]
 8044078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804407c:	461a      	mov	r2, r3
 804407e:	69fb      	ldr	r3, [r7, #28]
 8044080:	431a      	orrs	r2, r3
 8044082:	69bb      	ldr	r3, [r7, #24]
 8044084:	431a      	orrs	r2, r3
 8044086:	68fb      	ldr	r3, [r7, #12]
 8044088:	681b      	ldr	r3, [r3, #0]
 804408a:	4619      	mov	r1, r3
 804408c:	687b      	ldr	r3, [r7, #4]
 804408e:	01db      	lsls	r3, r3, #7
 8044090:	440b      	add	r3, r1
 8044092:	3384      	adds	r3, #132	; 0x84
 8044094:	4619      	mov	r1, r3
 8044096:	697b      	ldr	r3, [r7, #20]
 8044098:	4313      	orrs	r3, r2
 804409a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 804409c:	68fb      	ldr	r3, [r7, #12]
 804409e:	681b      	ldr	r3, [r3, #0]
 80440a0:	461a      	mov	r2, r3
 80440a2:	687b      	ldr	r3, [r7, #4]
 80440a4:	01db      	lsls	r3, r3, #7
 80440a6:	4413      	add	r3, r2
 80440a8:	3384      	adds	r3, #132	; 0x84
 80440aa:	695b      	ldr	r3, [r3, #20]
 80440ac:	68fa      	ldr	r2, [r7, #12]
 80440ae:	6812      	ldr	r2, [r2, #0]
 80440b0:	4611      	mov	r1, r2
 80440b2:	687a      	ldr	r2, [r7, #4]
 80440b4:	01d2      	lsls	r2, r2, #7
 80440b6:	440a      	add	r2, r1
 80440b8:	3284      	adds	r2, #132	; 0x84
 80440ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80440be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80440c0:	68fb      	ldr	r3, [r7, #12]
 80440c2:	681b      	ldr	r3, [r3, #0]
 80440c4:	461a      	mov	r2, r3
 80440c6:	687b      	ldr	r3, [r7, #4]
 80440c8:	01db      	lsls	r3, r3, #7
 80440ca:	4413      	add	r3, r2
 80440cc:	3384      	adds	r3, #132	; 0x84
 80440ce:	461a      	mov	r2, r3
 80440d0:	68bb      	ldr	r3, [r7, #8]
 80440d2:	695b      	ldr	r3, [r3, #20]
 80440d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80440d6:	68fb      	ldr	r3, [r7, #12]
 80440d8:	681b      	ldr	r3, [r3, #0]
 80440da:	461a      	mov	r2, r3
 80440dc:	687b      	ldr	r3, [r7, #4]
 80440de:	01db      	lsls	r3, r3, #7
 80440e0:	4413      	add	r3, r2
 80440e2:	3384      	adds	r3, #132	; 0x84
 80440e4:	69db      	ldr	r3, [r3, #28]
 80440e6:	68fa      	ldr	r2, [r7, #12]
 80440e8:	6812      	ldr	r2, [r2, #0]
 80440ea:	4611      	mov	r1, r2
 80440ec:	687a      	ldr	r2, [r7, #4]
 80440ee:	01d2      	lsls	r2, r2, #7
 80440f0:	440a      	add	r2, r1
 80440f2:	3284      	adds	r2, #132	; 0x84
 80440f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80440f8:	f023 0307 	bic.w	r3, r3, #7
 80440fc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80440fe:	68bb      	ldr	r3, [r7, #8]
 8044100:	69da      	ldr	r2, [r3, #28]
 8044102:	68bb      	ldr	r3, [r7, #8]
 8044104:	6a1b      	ldr	r3, [r3, #32]
 8044106:	68f9      	ldr	r1, [r7, #12]
 8044108:	6809      	ldr	r1, [r1, #0]
 804410a:	4608      	mov	r0, r1
 804410c:	6879      	ldr	r1, [r7, #4]
 804410e:	01c9      	lsls	r1, r1, #7
 8044110:	4401      	add	r1, r0
 8044112:	3184      	adds	r1, #132	; 0x84
 8044114:	4313      	orrs	r3, r2
 8044116:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8044118:	68fb      	ldr	r3, [r7, #12]
 804411a:	681b      	ldr	r3, [r3, #0]
 804411c:	461a      	mov	r2, r3
 804411e:	687b      	ldr	r3, [r7, #4]
 8044120:	01db      	lsls	r3, r3, #7
 8044122:	4413      	add	r3, r2
 8044124:	3384      	adds	r3, #132	; 0x84
 8044126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044128:	68fb      	ldr	r3, [r7, #12]
 804412a:	681b      	ldr	r3, [r3, #0]
 804412c:	461a      	mov	r2, r3
 804412e:	687b      	ldr	r3, [r7, #4]
 8044130:	01db      	lsls	r3, r3, #7
 8044132:	4413      	add	r3, r2
 8044134:	3384      	adds	r3, #132	; 0x84
 8044136:	461a      	mov	r2, r3
 8044138:	2300      	movs	r3, #0
 804413a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 804413c:	68fb      	ldr	r3, [r7, #12]
 804413e:	681b      	ldr	r3, [r3, #0]
 8044140:	461a      	mov	r2, r3
 8044142:	687b      	ldr	r3, [r7, #4]
 8044144:	01db      	lsls	r3, r3, #7
 8044146:	4413      	add	r3, r2
 8044148:	3384      	adds	r3, #132	; 0x84
 804414a:	461a      	mov	r2, r3
 804414c:	68bb      	ldr	r3, [r7, #8]
 804414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044150:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8044152:	68bb      	ldr	r3, [r7, #8]
 8044154:	691b      	ldr	r3, [r3, #16]
 8044156:	2b00      	cmp	r3, #0
 8044158:	d102      	bne.n	8044160 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 804415a:	2304      	movs	r3, #4
 804415c:	61fb      	str	r3, [r7, #28]
 804415e:	e01b      	b.n	8044198 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8044160:	68bb      	ldr	r3, [r7, #8]
 8044162:	691b      	ldr	r3, [r3, #16]
 8044164:	2b01      	cmp	r3, #1
 8044166:	d102      	bne.n	804416e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8044168:	2303      	movs	r3, #3
 804416a:	61fb      	str	r3, [r7, #28]
 804416c:	e014      	b.n	8044198 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804416e:	68bb      	ldr	r3, [r7, #8]
 8044170:	691b      	ldr	r3, [r3, #16]
 8044172:	2b04      	cmp	r3, #4
 8044174:	d00b      	beq.n	804418e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8044176:	68bb      	ldr	r3, [r7, #8]
 8044178:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804417a:	2b02      	cmp	r3, #2
 804417c:	d007      	beq.n	804418e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 804417e:	68bb      	ldr	r3, [r7, #8]
 8044180:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8044182:	2b03      	cmp	r3, #3
 8044184:	d003      	beq.n	804418e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8044186:	68bb      	ldr	r3, [r7, #8]
 8044188:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 804418a:	2b07      	cmp	r3, #7
 804418c:	d102      	bne.n	8044194 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 804418e:	2302      	movs	r3, #2
 8044190:	61fb      	str	r3, [r7, #28]
 8044192:	e001      	b.n	8044198 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8044194:	2301      	movs	r3, #1
 8044196:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8044198:	68fb      	ldr	r3, [r7, #12]
 804419a:	681b      	ldr	r3, [r3, #0]
 804419c:	461a      	mov	r2, r3
 804419e:	687b      	ldr	r3, [r7, #4]
 80441a0:	01db      	lsls	r3, r3, #7
 80441a2:	4413      	add	r3, r2
 80441a4:	3384      	adds	r3, #132	; 0x84
 80441a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441a8:	68fa      	ldr	r2, [r7, #12]
 80441aa:	6812      	ldr	r2, [r2, #0]
 80441ac:	4611      	mov	r1, r2
 80441ae:	687a      	ldr	r2, [r7, #4]
 80441b0:	01d2      	lsls	r2, r2, #7
 80441b2:	440a      	add	r2, r1
 80441b4:	3284      	adds	r2, #132	; 0x84
 80441b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80441ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80441bc:	68bb      	ldr	r3, [r7, #8]
 80441be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80441c0:	69fa      	ldr	r2, [r7, #28]
 80441c2:	fb02 f303 	mul.w	r3, r2, r3
 80441c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80441c8:	68bb      	ldr	r3, [r7, #8]
 80441ca:	6859      	ldr	r1, [r3, #4]
 80441cc:	68bb      	ldr	r3, [r7, #8]
 80441ce:	681b      	ldr	r3, [r3, #0]
 80441d0:	1acb      	subs	r3, r1, r3
 80441d2:	69f9      	ldr	r1, [r7, #28]
 80441d4:	fb01 f303 	mul.w	r3, r1, r3
 80441d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80441da:	68f9      	ldr	r1, [r7, #12]
 80441dc:	6809      	ldr	r1, [r1, #0]
 80441de:	4608      	mov	r0, r1
 80441e0:	6879      	ldr	r1, [r7, #4]
 80441e2:	01c9      	lsls	r1, r1, #7
 80441e4:	4401      	add	r1, r0
 80441e6:	3184      	adds	r1, #132	; 0x84
 80441e8:	4313      	orrs	r3, r2
 80441ea:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80441ec:	68fb      	ldr	r3, [r7, #12]
 80441ee:	681b      	ldr	r3, [r3, #0]
 80441f0:	461a      	mov	r2, r3
 80441f2:	687b      	ldr	r3, [r7, #4]
 80441f4:	01db      	lsls	r3, r3, #7
 80441f6:	4413      	add	r3, r2
 80441f8:	3384      	adds	r3, #132	; 0x84
 80441fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80441fc:	68fa      	ldr	r2, [r7, #12]
 80441fe:	6812      	ldr	r2, [r2, #0]
 8044200:	4611      	mov	r1, r2
 8044202:	687a      	ldr	r2, [r7, #4]
 8044204:	01d2      	lsls	r2, r2, #7
 8044206:	440a      	add	r2, r1
 8044208:	3284      	adds	r2, #132	; 0x84
 804420a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804420e:	f023 0307 	bic.w	r3, r3, #7
 8044212:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8044214:	68fb      	ldr	r3, [r7, #12]
 8044216:	681b      	ldr	r3, [r3, #0]
 8044218:	461a      	mov	r2, r3
 804421a:	687b      	ldr	r3, [r7, #4]
 804421c:	01db      	lsls	r3, r3, #7
 804421e:	4413      	add	r3, r2
 8044220:	3384      	adds	r3, #132	; 0x84
 8044222:	461a      	mov	r2, r3
 8044224:	68bb      	ldr	r3, [r7, #8]
 8044226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044228:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 804422a:	68fb      	ldr	r3, [r7, #12]
 804422c:	681b      	ldr	r3, [r3, #0]
 804422e:	461a      	mov	r2, r3
 8044230:	687b      	ldr	r3, [r7, #4]
 8044232:	01db      	lsls	r3, r3, #7
 8044234:	4413      	add	r3, r2
 8044236:	3384      	adds	r3, #132	; 0x84
 8044238:	681b      	ldr	r3, [r3, #0]
 804423a:	68fa      	ldr	r2, [r7, #12]
 804423c:	6812      	ldr	r2, [r2, #0]
 804423e:	4611      	mov	r1, r2
 8044240:	687a      	ldr	r2, [r7, #4]
 8044242:	01d2      	lsls	r2, r2, #7
 8044244:	440a      	add	r2, r1
 8044246:	3284      	adds	r2, #132	; 0x84
 8044248:	f043 0301 	orr.w	r3, r3, #1
 804424c:	6013      	str	r3, [r2, #0]
}
 804424e:	bf00      	nop
 8044250:	3724      	adds	r7, #36	; 0x24
 8044252:	46bd      	mov	sp, r7
 8044254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044258:	4770      	bx	lr
	...

0804425c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 804425c:	b580      	push	{r7, lr}
 804425e:	b086      	sub	sp, #24
 8044260:	af00      	add	r7, sp, #0
 8044262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8044264:	687b      	ldr	r3, [r7, #4]
 8044266:	2b00      	cmp	r3, #0
 8044268:	d101      	bne.n	804426e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804426a:	2301      	movs	r3, #1
 804426c:	e267      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804426e:	687b      	ldr	r3, [r7, #4]
 8044270:	681b      	ldr	r3, [r3, #0]
 8044272:	f003 0301 	and.w	r3, r3, #1
 8044276:	2b00      	cmp	r3, #0
 8044278:	d075      	beq.n	8044366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804427a:	4b88      	ldr	r3, [pc, #544]	; (804449c <HAL_RCC_OscConfig+0x240>)
 804427c:	689b      	ldr	r3, [r3, #8]
 804427e:	f003 030c 	and.w	r3, r3, #12
 8044282:	2b04      	cmp	r3, #4
 8044284:	d00c      	beq.n	80442a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044286:	4b85      	ldr	r3, [pc, #532]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044288:	689b      	ldr	r3, [r3, #8]
 804428a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804428e:	2b08      	cmp	r3, #8
 8044290:	d112      	bne.n	80442b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044292:	4b82      	ldr	r3, [pc, #520]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044294:	685b      	ldr	r3, [r3, #4]
 8044296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804429e:	d10b      	bne.n	80442b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80442a0:	4b7e      	ldr	r3, [pc, #504]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442a2:	681b      	ldr	r3, [r3, #0]
 80442a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80442a8:	2b00      	cmp	r3, #0
 80442aa:	d05b      	beq.n	8044364 <HAL_RCC_OscConfig+0x108>
 80442ac:	687b      	ldr	r3, [r7, #4]
 80442ae:	685b      	ldr	r3, [r3, #4]
 80442b0:	2b00      	cmp	r3, #0
 80442b2:	d157      	bne.n	8044364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80442b4:	2301      	movs	r3, #1
 80442b6:	e242      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80442b8:	687b      	ldr	r3, [r7, #4]
 80442ba:	685b      	ldr	r3, [r3, #4]
 80442bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80442c0:	d106      	bne.n	80442d0 <HAL_RCC_OscConfig+0x74>
 80442c2:	4b76      	ldr	r3, [pc, #472]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442c4:	681b      	ldr	r3, [r3, #0]
 80442c6:	4a75      	ldr	r2, [pc, #468]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80442cc:	6013      	str	r3, [r2, #0]
 80442ce:	e01d      	b.n	804430c <HAL_RCC_OscConfig+0xb0>
 80442d0:	687b      	ldr	r3, [r7, #4]
 80442d2:	685b      	ldr	r3, [r3, #4]
 80442d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80442d8:	d10c      	bne.n	80442f4 <HAL_RCC_OscConfig+0x98>
 80442da:	4b70      	ldr	r3, [pc, #448]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442dc:	681b      	ldr	r3, [r3, #0]
 80442de:	4a6f      	ldr	r2, [pc, #444]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80442e4:	6013      	str	r3, [r2, #0]
 80442e6:	4b6d      	ldr	r3, [pc, #436]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442e8:	681b      	ldr	r3, [r3, #0]
 80442ea:	4a6c      	ldr	r2, [pc, #432]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80442f0:	6013      	str	r3, [r2, #0]
 80442f2:	e00b      	b.n	804430c <HAL_RCC_OscConfig+0xb0>
 80442f4:	4b69      	ldr	r3, [pc, #420]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442f6:	681b      	ldr	r3, [r3, #0]
 80442f8:	4a68      	ldr	r2, [pc, #416]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80442fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80442fe:	6013      	str	r3, [r2, #0]
 8044300:	4b66      	ldr	r3, [pc, #408]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044302:	681b      	ldr	r3, [r3, #0]
 8044304:	4a65      	ldr	r2, [pc, #404]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 804430c:	687b      	ldr	r3, [r7, #4]
 804430e:	685b      	ldr	r3, [r3, #4]
 8044310:	2b00      	cmp	r3, #0
 8044312:	d013      	beq.n	804433c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044314:	f7fd f990 	bl	8041638 <HAL_GetTick>
 8044318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804431a:	e008      	b.n	804432e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 804431c:	f7fd f98c 	bl	8041638 <HAL_GetTick>
 8044320:	4602      	mov	r2, r0
 8044322:	693b      	ldr	r3, [r7, #16]
 8044324:	1ad3      	subs	r3, r2, r3
 8044326:	2b64      	cmp	r3, #100	; 0x64
 8044328:	d901      	bls.n	804432e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 804432a:	2303      	movs	r3, #3
 804432c:	e207      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804432e:	4b5b      	ldr	r3, [pc, #364]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044330:	681b      	ldr	r3, [r3, #0]
 8044332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044336:	2b00      	cmp	r3, #0
 8044338:	d0f0      	beq.n	804431c <HAL_RCC_OscConfig+0xc0>
 804433a:	e014      	b.n	8044366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804433c:	f7fd f97c 	bl	8041638 <HAL_GetTick>
 8044340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044342:	e008      	b.n	8044356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8044344:	f7fd f978 	bl	8041638 <HAL_GetTick>
 8044348:	4602      	mov	r2, r0
 804434a:	693b      	ldr	r3, [r7, #16]
 804434c:	1ad3      	subs	r3, r2, r3
 804434e:	2b64      	cmp	r3, #100	; 0x64
 8044350:	d901      	bls.n	8044356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8044352:	2303      	movs	r3, #3
 8044354:	e1f3      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044356:	4b51      	ldr	r3, [pc, #324]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044358:	681b      	ldr	r3, [r3, #0]
 804435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804435e:	2b00      	cmp	r3, #0
 8044360:	d1f0      	bne.n	8044344 <HAL_RCC_OscConfig+0xe8>
 8044362:	e000      	b.n	8044366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8044364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8044366:	687b      	ldr	r3, [r7, #4]
 8044368:	681b      	ldr	r3, [r3, #0]
 804436a:	f003 0302 	and.w	r3, r3, #2
 804436e:	2b00      	cmp	r3, #0
 8044370:	d063      	beq.n	804443a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8044372:	4b4a      	ldr	r3, [pc, #296]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044374:	689b      	ldr	r3, [r3, #8]
 8044376:	f003 030c 	and.w	r3, r3, #12
 804437a:	2b00      	cmp	r3, #0
 804437c:	d00b      	beq.n	8044396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804437e:	4b47      	ldr	r3, [pc, #284]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044380:	689b      	ldr	r3, [r3, #8]
 8044382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8044386:	2b08      	cmp	r3, #8
 8044388:	d11c      	bne.n	80443c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804438a:	4b44      	ldr	r3, [pc, #272]	; (804449c <HAL_RCC_OscConfig+0x240>)
 804438c:	685b      	ldr	r3, [r3, #4]
 804438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8044392:	2b00      	cmp	r3, #0
 8044394:	d116      	bne.n	80443c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8044396:	4b41      	ldr	r3, [pc, #260]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044398:	681b      	ldr	r3, [r3, #0]
 804439a:	f003 0302 	and.w	r3, r3, #2
 804439e:	2b00      	cmp	r3, #0
 80443a0:	d005      	beq.n	80443ae <HAL_RCC_OscConfig+0x152>
 80443a2:	687b      	ldr	r3, [r7, #4]
 80443a4:	68db      	ldr	r3, [r3, #12]
 80443a6:	2b01      	cmp	r3, #1
 80443a8:	d001      	beq.n	80443ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80443aa:	2301      	movs	r3, #1
 80443ac:	e1c7      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80443ae:	4b3b      	ldr	r3, [pc, #236]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80443b0:	681b      	ldr	r3, [r3, #0]
 80443b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80443b6:	687b      	ldr	r3, [r7, #4]
 80443b8:	691b      	ldr	r3, [r3, #16]
 80443ba:	00db      	lsls	r3, r3, #3
 80443bc:	4937      	ldr	r1, [pc, #220]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80443be:	4313      	orrs	r3, r2
 80443c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80443c2:	e03a      	b.n	804443a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80443c4:	687b      	ldr	r3, [r7, #4]
 80443c6:	68db      	ldr	r3, [r3, #12]
 80443c8:	2b00      	cmp	r3, #0
 80443ca:	d020      	beq.n	804440e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80443cc:	4b34      	ldr	r3, [pc, #208]	; (80444a0 <HAL_RCC_OscConfig+0x244>)
 80443ce:	2201      	movs	r2, #1
 80443d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80443d2:	f7fd f931 	bl	8041638 <HAL_GetTick>
 80443d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80443d8:	e008      	b.n	80443ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80443da:	f7fd f92d 	bl	8041638 <HAL_GetTick>
 80443de:	4602      	mov	r2, r0
 80443e0:	693b      	ldr	r3, [r7, #16]
 80443e2:	1ad3      	subs	r3, r2, r3
 80443e4:	2b02      	cmp	r3, #2
 80443e6:	d901      	bls.n	80443ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80443e8:	2303      	movs	r3, #3
 80443ea:	e1a8      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80443ec:	4b2b      	ldr	r3, [pc, #172]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80443ee:	681b      	ldr	r3, [r3, #0]
 80443f0:	f003 0302 	and.w	r3, r3, #2
 80443f4:	2b00      	cmp	r3, #0
 80443f6:	d0f0      	beq.n	80443da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80443f8:	4b28      	ldr	r3, [pc, #160]	; (804449c <HAL_RCC_OscConfig+0x240>)
 80443fa:	681b      	ldr	r3, [r3, #0]
 80443fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8044400:	687b      	ldr	r3, [r7, #4]
 8044402:	691b      	ldr	r3, [r3, #16]
 8044404:	00db      	lsls	r3, r3, #3
 8044406:	4925      	ldr	r1, [pc, #148]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044408:	4313      	orrs	r3, r2
 804440a:	600b      	str	r3, [r1, #0]
 804440c:	e015      	b.n	804443a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804440e:	4b24      	ldr	r3, [pc, #144]	; (80444a0 <HAL_RCC_OscConfig+0x244>)
 8044410:	2200      	movs	r2, #0
 8044412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044414:	f7fd f910 	bl	8041638 <HAL_GetTick>
 8044418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804441a:	e008      	b.n	804442e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 804441c:	f7fd f90c 	bl	8041638 <HAL_GetTick>
 8044420:	4602      	mov	r2, r0
 8044422:	693b      	ldr	r3, [r7, #16]
 8044424:	1ad3      	subs	r3, r2, r3
 8044426:	2b02      	cmp	r3, #2
 8044428:	d901      	bls.n	804442e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 804442a:	2303      	movs	r3, #3
 804442c:	e187      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804442e:	4b1b      	ldr	r3, [pc, #108]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044430:	681b      	ldr	r3, [r3, #0]
 8044432:	f003 0302 	and.w	r3, r3, #2
 8044436:	2b00      	cmp	r3, #0
 8044438:	d1f0      	bne.n	804441c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804443a:	687b      	ldr	r3, [r7, #4]
 804443c:	681b      	ldr	r3, [r3, #0]
 804443e:	f003 0308 	and.w	r3, r3, #8
 8044442:	2b00      	cmp	r3, #0
 8044444:	d036      	beq.n	80444b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8044446:	687b      	ldr	r3, [r7, #4]
 8044448:	695b      	ldr	r3, [r3, #20]
 804444a:	2b00      	cmp	r3, #0
 804444c:	d016      	beq.n	804447c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804444e:	4b15      	ldr	r3, [pc, #84]	; (80444a4 <HAL_RCC_OscConfig+0x248>)
 8044450:	2201      	movs	r2, #1
 8044452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044454:	f7fd f8f0 	bl	8041638 <HAL_GetTick>
 8044458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804445a:	e008      	b.n	804446e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804445c:	f7fd f8ec 	bl	8041638 <HAL_GetTick>
 8044460:	4602      	mov	r2, r0
 8044462:	693b      	ldr	r3, [r7, #16]
 8044464:	1ad3      	subs	r3, r2, r3
 8044466:	2b02      	cmp	r3, #2
 8044468:	d901      	bls.n	804446e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 804446a:	2303      	movs	r3, #3
 804446c:	e167      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804446e:	4b0b      	ldr	r3, [pc, #44]	; (804449c <HAL_RCC_OscConfig+0x240>)
 8044470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044472:	f003 0302 	and.w	r3, r3, #2
 8044476:	2b00      	cmp	r3, #0
 8044478:	d0f0      	beq.n	804445c <HAL_RCC_OscConfig+0x200>
 804447a:	e01b      	b.n	80444b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804447c:	4b09      	ldr	r3, [pc, #36]	; (80444a4 <HAL_RCC_OscConfig+0x248>)
 804447e:	2200      	movs	r2, #0
 8044480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8044482:	f7fd f8d9 	bl	8041638 <HAL_GetTick>
 8044486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8044488:	e00e      	b.n	80444a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 804448a:	f7fd f8d5 	bl	8041638 <HAL_GetTick>
 804448e:	4602      	mov	r2, r0
 8044490:	693b      	ldr	r3, [r7, #16]
 8044492:	1ad3      	subs	r3, r2, r3
 8044494:	2b02      	cmp	r3, #2
 8044496:	d907      	bls.n	80444a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8044498:	2303      	movs	r3, #3
 804449a:	e150      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
 804449c:	40023800 	.word	0x40023800
 80444a0:	42470000 	.word	0x42470000
 80444a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80444a8:	4b88      	ldr	r3, [pc, #544]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80444aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80444ac:	f003 0302 	and.w	r3, r3, #2
 80444b0:	2b00      	cmp	r3, #0
 80444b2:	d1ea      	bne.n	804448a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80444b4:	687b      	ldr	r3, [r7, #4]
 80444b6:	681b      	ldr	r3, [r3, #0]
 80444b8:	f003 0304 	and.w	r3, r3, #4
 80444bc:	2b00      	cmp	r3, #0
 80444be:	f000 8097 	beq.w	80445f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80444c2:	2300      	movs	r3, #0
 80444c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80444c6:	4b81      	ldr	r3, [pc, #516]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80444c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80444ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80444ce:	2b00      	cmp	r3, #0
 80444d0:	d10f      	bne.n	80444f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80444d2:	2300      	movs	r3, #0
 80444d4:	60bb      	str	r3, [r7, #8]
 80444d6:	4b7d      	ldr	r3, [pc, #500]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80444d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80444da:	4a7c      	ldr	r2, [pc, #496]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80444dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80444e0:	6413      	str	r3, [r2, #64]	; 0x40
 80444e2:	4b7a      	ldr	r3, [pc, #488]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80444e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80444e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80444ea:	60bb      	str	r3, [r7, #8]
 80444ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80444ee:	2301      	movs	r3, #1
 80444f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80444f2:	4b77      	ldr	r3, [pc, #476]	; (80446d0 <HAL_RCC_OscConfig+0x474>)
 80444f4:	681b      	ldr	r3, [r3, #0]
 80444f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80444fa:	2b00      	cmp	r3, #0
 80444fc:	d118      	bne.n	8044530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80444fe:	4b74      	ldr	r3, [pc, #464]	; (80446d0 <HAL_RCC_OscConfig+0x474>)
 8044500:	681b      	ldr	r3, [r3, #0]
 8044502:	4a73      	ldr	r2, [pc, #460]	; (80446d0 <HAL_RCC_OscConfig+0x474>)
 8044504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 804450a:	f7fd f895 	bl	8041638 <HAL_GetTick>
 804450e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044510:	e008      	b.n	8044524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044512:	f7fd f891 	bl	8041638 <HAL_GetTick>
 8044516:	4602      	mov	r2, r0
 8044518:	693b      	ldr	r3, [r7, #16]
 804451a:	1ad3      	subs	r3, r2, r3
 804451c:	2b02      	cmp	r3, #2
 804451e:	d901      	bls.n	8044524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8044520:	2303      	movs	r3, #3
 8044522:	e10c      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044524:	4b6a      	ldr	r3, [pc, #424]	; (80446d0 <HAL_RCC_OscConfig+0x474>)
 8044526:	681b      	ldr	r3, [r3, #0]
 8044528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804452c:	2b00      	cmp	r3, #0
 804452e:	d0f0      	beq.n	8044512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044530:	687b      	ldr	r3, [r7, #4]
 8044532:	689b      	ldr	r3, [r3, #8]
 8044534:	2b01      	cmp	r3, #1
 8044536:	d106      	bne.n	8044546 <HAL_RCC_OscConfig+0x2ea>
 8044538:	4b64      	ldr	r3, [pc, #400]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804453c:	4a63      	ldr	r2, [pc, #396]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804453e:	f043 0301 	orr.w	r3, r3, #1
 8044542:	6713      	str	r3, [r2, #112]	; 0x70
 8044544:	e01c      	b.n	8044580 <HAL_RCC_OscConfig+0x324>
 8044546:	687b      	ldr	r3, [r7, #4]
 8044548:	689b      	ldr	r3, [r3, #8]
 804454a:	2b05      	cmp	r3, #5
 804454c:	d10c      	bne.n	8044568 <HAL_RCC_OscConfig+0x30c>
 804454e:	4b5f      	ldr	r3, [pc, #380]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044552:	4a5e      	ldr	r2, [pc, #376]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044554:	f043 0304 	orr.w	r3, r3, #4
 8044558:	6713      	str	r3, [r2, #112]	; 0x70
 804455a:	4b5c      	ldr	r3, [pc, #368]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804455c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804455e:	4a5b      	ldr	r2, [pc, #364]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044560:	f043 0301 	orr.w	r3, r3, #1
 8044564:	6713      	str	r3, [r2, #112]	; 0x70
 8044566:	e00b      	b.n	8044580 <HAL_RCC_OscConfig+0x324>
 8044568:	4b58      	ldr	r3, [pc, #352]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804456c:	4a57      	ldr	r2, [pc, #348]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804456e:	f023 0301 	bic.w	r3, r3, #1
 8044572:	6713      	str	r3, [r2, #112]	; 0x70
 8044574:	4b55      	ldr	r3, [pc, #340]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044578:	4a54      	ldr	r2, [pc, #336]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 804457a:	f023 0304 	bic.w	r3, r3, #4
 804457e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8044580:	687b      	ldr	r3, [r7, #4]
 8044582:	689b      	ldr	r3, [r3, #8]
 8044584:	2b00      	cmp	r3, #0
 8044586:	d015      	beq.n	80445b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044588:	f7fd f856 	bl	8041638 <HAL_GetTick>
 804458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804458e:	e00a      	b.n	80445a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044590:	f7fd f852 	bl	8041638 <HAL_GetTick>
 8044594:	4602      	mov	r2, r0
 8044596:	693b      	ldr	r3, [r7, #16]
 8044598:	1ad3      	subs	r3, r2, r3
 804459a:	f241 3288 	movw	r2, #5000	; 0x1388
 804459e:	4293      	cmp	r3, r2
 80445a0:	d901      	bls.n	80445a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80445a2:	2303      	movs	r3, #3
 80445a4:	e0cb      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80445a6:	4b49      	ldr	r3, [pc, #292]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80445a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80445aa:	f003 0302 	and.w	r3, r3, #2
 80445ae:	2b00      	cmp	r3, #0
 80445b0:	d0ee      	beq.n	8044590 <HAL_RCC_OscConfig+0x334>
 80445b2:	e014      	b.n	80445de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80445b4:	f7fd f840 	bl	8041638 <HAL_GetTick>
 80445b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80445ba:	e00a      	b.n	80445d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80445bc:	f7fd f83c 	bl	8041638 <HAL_GetTick>
 80445c0:	4602      	mov	r2, r0
 80445c2:	693b      	ldr	r3, [r7, #16]
 80445c4:	1ad3      	subs	r3, r2, r3
 80445c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80445ca:	4293      	cmp	r3, r2
 80445cc:	d901      	bls.n	80445d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80445ce:	2303      	movs	r3, #3
 80445d0:	e0b5      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80445d2:	4b3e      	ldr	r3, [pc, #248]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80445d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80445d6:	f003 0302 	and.w	r3, r3, #2
 80445da:	2b00      	cmp	r3, #0
 80445dc:	d1ee      	bne.n	80445bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80445de:	7dfb      	ldrb	r3, [r7, #23]
 80445e0:	2b01      	cmp	r3, #1
 80445e2:	d105      	bne.n	80445f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80445e4:	4b39      	ldr	r3, [pc, #228]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80445e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80445e8:	4a38      	ldr	r2, [pc, #224]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80445ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80445ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80445f0:	687b      	ldr	r3, [r7, #4]
 80445f2:	699b      	ldr	r3, [r3, #24]
 80445f4:	2b00      	cmp	r3, #0
 80445f6:	f000 80a1 	beq.w	804473c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80445fa:	4b34      	ldr	r3, [pc, #208]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80445fc:	689b      	ldr	r3, [r3, #8]
 80445fe:	f003 030c 	and.w	r3, r3, #12
 8044602:	2b08      	cmp	r3, #8
 8044604:	d05c      	beq.n	80446c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8044606:	687b      	ldr	r3, [r7, #4]
 8044608:	699b      	ldr	r3, [r3, #24]
 804460a:	2b02      	cmp	r3, #2
 804460c:	d141      	bne.n	8044692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804460e:	4b31      	ldr	r3, [pc, #196]	; (80446d4 <HAL_RCC_OscConfig+0x478>)
 8044610:	2200      	movs	r2, #0
 8044612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044614:	f7fd f810 	bl	8041638 <HAL_GetTick>
 8044618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804461a:	e008      	b.n	804462e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 804461c:	f7fd f80c 	bl	8041638 <HAL_GetTick>
 8044620:	4602      	mov	r2, r0
 8044622:	693b      	ldr	r3, [r7, #16]
 8044624:	1ad3      	subs	r3, r2, r3
 8044626:	2b02      	cmp	r3, #2
 8044628:	d901      	bls.n	804462e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 804462a:	2303      	movs	r3, #3
 804462c:	e087      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804462e:	4b27      	ldr	r3, [pc, #156]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044630:	681b      	ldr	r3, [r3, #0]
 8044632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044636:	2b00      	cmp	r3, #0
 8044638:	d1f0      	bne.n	804461c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 804463a:	687b      	ldr	r3, [r7, #4]
 804463c:	69da      	ldr	r2, [r3, #28]
 804463e:	687b      	ldr	r3, [r7, #4]
 8044640:	6a1b      	ldr	r3, [r3, #32]
 8044642:	431a      	orrs	r2, r3
 8044644:	687b      	ldr	r3, [r7, #4]
 8044646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044648:	019b      	lsls	r3, r3, #6
 804464a:	431a      	orrs	r2, r3
 804464c:	687b      	ldr	r3, [r7, #4]
 804464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044650:	085b      	lsrs	r3, r3, #1
 8044652:	3b01      	subs	r3, #1
 8044654:	041b      	lsls	r3, r3, #16
 8044656:	431a      	orrs	r2, r3
 8044658:	687b      	ldr	r3, [r7, #4]
 804465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804465c:	061b      	lsls	r3, r3, #24
 804465e:	491b      	ldr	r1, [pc, #108]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044660:	4313      	orrs	r3, r2
 8044662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8044664:	4b1b      	ldr	r3, [pc, #108]	; (80446d4 <HAL_RCC_OscConfig+0x478>)
 8044666:	2201      	movs	r2, #1
 8044668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804466a:	f7fc ffe5 	bl	8041638 <HAL_GetTick>
 804466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044670:	e008      	b.n	8044684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8044672:	f7fc ffe1 	bl	8041638 <HAL_GetTick>
 8044676:	4602      	mov	r2, r0
 8044678:	693b      	ldr	r3, [r7, #16]
 804467a:	1ad3      	subs	r3, r2, r3
 804467c:	2b02      	cmp	r3, #2
 804467e:	d901      	bls.n	8044684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8044680:	2303      	movs	r3, #3
 8044682:	e05c      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044684:	4b11      	ldr	r3, [pc, #68]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 8044686:	681b      	ldr	r3, [r3, #0]
 8044688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804468c:	2b00      	cmp	r3, #0
 804468e:	d0f0      	beq.n	8044672 <HAL_RCC_OscConfig+0x416>
 8044690:	e054      	b.n	804473c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8044692:	4b10      	ldr	r3, [pc, #64]	; (80446d4 <HAL_RCC_OscConfig+0x478>)
 8044694:	2200      	movs	r2, #0
 8044696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044698:	f7fc ffce 	bl	8041638 <HAL_GetTick>
 804469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804469e:	e008      	b.n	80446b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80446a0:	f7fc ffca 	bl	8041638 <HAL_GetTick>
 80446a4:	4602      	mov	r2, r0
 80446a6:	693b      	ldr	r3, [r7, #16]
 80446a8:	1ad3      	subs	r3, r2, r3
 80446aa:	2b02      	cmp	r3, #2
 80446ac:	d901      	bls.n	80446b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80446ae:	2303      	movs	r3, #3
 80446b0:	e045      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80446b2:	4b06      	ldr	r3, [pc, #24]	; (80446cc <HAL_RCC_OscConfig+0x470>)
 80446b4:	681b      	ldr	r3, [r3, #0]
 80446b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80446ba:	2b00      	cmp	r3, #0
 80446bc:	d1f0      	bne.n	80446a0 <HAL_RCC_OscConfig+0x444>
 80446be:	e03d      	b.n	804473c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80446c0:	687b      	ldr	r3, [r7, #4]
 80446c2:	699b      	ldr	r3, [r3, #24]
 80446c4:	2b01      	cmp	r3, #1
 80446c6:	d107      	bne.n	80446d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80446c8:	2301      	movs	r3, #1
 80446ca:	e038      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
 80446cc:	40023800 	.word	0x40023800
 80446d0:	40007000 	.word	0x40007000
 80446d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80446d8:	4b1b      	ldr	r3, [pc, #108]	; (8044748 <HAL_RCC_OscConfig+0x4ec>)
 80446da:	685b      	ldr	r3, [r3, #4]
 80446dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80446de:	687b      	ldr	r3, [r7, #4]
 80446e0:	699b      	ldr	r3, [r3, #24]
 80446e2:	2b01      	cmp	r3, #1
 80446e4:	d028      	beq.n	8044738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80446e6:	68fb      	ldr	r3, [r7, #12]
 80446e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80446ec:	687b      	ldr	r3, [r7, #4]
 80446ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80446f0:	429a      	cmp	r2, r3
 80446f2:	d121      	bne.n	8044738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80446f4:	68fb      	ldr	r3, [r7, #12]
 80446f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80446fa:	687b      	ldr	r3, [r7, #4]
 80446fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80446fe:	429a      	cmp	r2, r3
 8044700:	d11a      	bne.n	8044738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8044702:	68fa      	ldr	r2, [r7, #12]
 8044704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8044708:	4013      	ands	r3, r2
 804470a:	687a      	ldr	r2, [r7, #4]
 804470c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 804470e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8044710:	4293      	cmp	r3, r2
 8044712:	d111      	bne.n	8044738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8044714:	68fb      	ldr	r3, [r7, #12]
 8044716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804471a:	687b      	ldr	r3, [r7, #4]
 804471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804471e:	085b      	lsrs	r3, r3, #1
 8044720:	3b01      	subs	r3, #1
 8044722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8044724:	429a      	cmp	r2, r3
 8044726:	d107      	bne.n	8044738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8044728:	68fb      	ldr	r3, [r7, #12]
 804472a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 804472e:	687b      	ldr	r3, [r7, #4]
 8044730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8044734:	429a      	cmp	r2, r3
 8044736:	d001      	beq.n	804473c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8044738:	2301      	movs	r3, #1
 804473a:	e000      	b.n	804473e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 804473c:	2300      	movs	r3, #0
}
 804473e:	4618      	mov	r0, r3
 8044740:	3718      	adds	r7, #24
 8044742:	46bd      	mov	sp, r7
 8044744:	bd80      	pop	{r7, pc}
 8044746:	bf00      	nop
 8044748:	40023800 	.word	0x40023800

0804474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 804474c:	b580      	push	{r7, lr}
 804474e:	b084      	sub	sp, #16
 8044750:	af00      	add	r7, sp, #0
 8044752:	6078      	str	r0, [r7, #4]
 8044754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8044756:	687b      	ldr	r3, [r7, #4]
 8044758:	2b00      	cmp	r3, #0
 804475a:	d101      	bne.n	8044760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 804475c:	2301      	movs	r3, #1
 804475e:	e0cc      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8044760:	4b68      	ldr	r3, [pc, #416]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 8044762:	681b      	ldr	r3, [r3, #0]
 8044764:	f003 030f 	and.w	r3, r3, #15
 8044768:	683a      	ldr	r2, [r7, #0]
 804476a:	429a      	cmp	r2, r3
 804476c:	d90c      	bls.n	8044788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804476e:	4b65      	ldr	r3, [pc, #404]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 8044770:	683a      	ldr	r2, [r7, #0]
 8044772:	b2d2      	uxtb	r2, r2
 8044774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8044776:	4b63      	ldr	r3, [pc, #396]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 8044778:	681b      	ldr	r3, [r3, #0]
 804477a:	f003 030f 	and.w	r3, r3, #15
 804477e:	683a      	ldr	r2, [r7, #0]
 8044780:	429a      	cmp	r2, r3
 8044782:	d001      	beq.n	8044788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8044784:	2301      	movs	r3, #1
 8044786:	e0b8      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8044788:	687b      	ldr	r3, [r7, #4]
 804478a:	681b      	ldr	r3, [r3, #0]
 804478c:	f003 0302 	and.w	r3, r3, #2
 8044790:	2b00      	cmp	r3, #0
 8044792:	d020      	beq.n	80447d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8044794:	687b      	ldr	r3, [r7, #4]
 8044796:	681b      	ldr	r3, [r3, #0]
 8044798:	f003 0304 	and.w	r3, r3, #4
 804479c:	2b00      	cmp	r3, #0
 804479e:	d005      	beq.n	80447ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80447a0:	4b59      	ldr	r3, [pc, #356]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447a2:	689b      	ldr	r3, [r3, #8]
 80447a4:	4a58      	ldr	r2, [pc, #352]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80447aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80447ac:	687b      	ldr	r3, [r7, #4]
 80447ae:	681b      	ldr	r3, [r3, #0]
 80447b0:	f003 0308 	and.w	r3, r3, #8
 80447b4:	2b00      	cmp	r3, #0
 80447b6:	d005      	beq.n	80447c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80447b8:	4b53      	ldr	r3, [pc, #332]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447ba:	689b      	ldr	r3, [r3, #8]
 80447bc:	4a52      	ldr	r2, [pc, #328]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80447c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80447c4:	4b50      	ldr	r3, [pc, #320]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447c6:	689b      	ldr	r3, [r3, #8]
 80447c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80447cc:	687b      	ldr	r3, [r7, #4]
 80447ce:	689b      	ldr	r3, [r3, #8]
 80447d0:	494d      	ldr	r1, [pc, #308]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447d2:	4313      	orrs	r3, r2
 80447d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80447d6:	687b      	ldr	r3, [r7, #4]
 80447d8:	681b      	ldr	r3, [r3, #0]
 80447da:	f003 0301 	and.w	r3, r3, #1
 80447de:	2b00      	cmp	r3, #0
 80447e0:	d044      	beq.n	804486c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80447e2:	687b      	ldr	r3, [r7, #4]
 80447e4:	685b      	ldr	r3, [r3, #4]
 80447e6:	2b01      	cmp	r3, #1
 80447e8:	d107      	bne.n	80447fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80447ea:	4b47      	ldr	r3, [pc, #284]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80447ec:	681b      	ldr	r3, [r3, #0]
 80447ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80447f2:	2b00      	cmp	r3, #0
 80447f4:	d119      	bne.n	804482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80447f6:	2301      	movs	r3, #1
 80447f8:	e07f      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80447fa:	687b      	ldr	r3, [r7, #4]
 80447fc:	685b      	ldr	r3, [r3, #4]
 80447fe:	2b02      	cmp	r3, #2
 8044800:	d003      	beq.n	804480a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8044802:	687b      	ldr	r3, [r7, #4]
 8044804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8044806:	2b03      	cmp	r3, #3
 8044808:	d107      	bne.n	804481a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804480a:	4b3f      	ldr	r3, [pc, #252]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 804480c:	681b      	ldr	r3, [r3, #0]
 804480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044812:	2b00      	cmp	r3, #0
 8044814:	d109      	bne.n	804482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8044816:	2301      	movs	r3, #1
 8044818:	e06f      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804481a:	4b3b      	ldr	r3, [pc, #236]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 804481c:	681b      	ldr	r3, [r3, #0]
 804481e:	f003 0302 	and.w	r3, r3, #2
 8044822:	2b00      	cmp	r3, #0
 8044824:	d101      	bne.n	804482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8044826:	2301      	movs	r3, #1
 8044828:	e067      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804482a:	4b37      	ldr	r3, [pc, #220]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 804482c:	689b      	ldr	r3, [r3, #8]
 804482e:	f023 0203 	bic.w	r2, r3, #3
 8044832:	687b      	ldr	r3, [r7, #4]
 8044834:	685b      	ldr	r3, [r3, #4]
 8044836:	4934      	ldr	r1, [pc, #208]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 8044838:	4313      	orrs	r3, r2
 804483a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 804483c:	f7fc fefc 	bl	8041638 <HAL_GetTick>
 8044840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044842:	e00a      	b.n	804485a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044844:	f7fc fef8 	bl	8041638 <HAL_GetTick>
 8044848:	4602      	mov	r2, r0
 804484a:	68fb      	ldr	r3, [r7, #12]
 804484c:	1ad3      	subs	r3, r2, r3
 804484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8044852:	4293      	cmp	r3, r2
 8044854:	d901      	bls.n	804485a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8044856:	2303      	movs	r3, #3
 8044858:	e04f      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804485a:	4b2b      	ldr	r3, [pc, #172]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 804485c:	689b      	ldr	r3, [r3, #8]
 804485e:	f003 020c 	and.w	r2, r3, #12
 8044862:	687b      	ldr	r3, [r7, #4]
 8044864:	685b      	ldr	r3, [r3, #4]
 8044866:	009b      	lsls	r3, r3, #2
 8044868:	429a      	cmp	r2, r3
 804486a:	d1eb      	bne.n	8044844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 804486c:	4b25      	ldr	r3, [pc, #148]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 804486e:	681b      	ldr	r3, [r3, #0]
 8044870:	f003 030f 	and.w	r3, r3, #15
 8044874:	683a      	ldr	r2, [r7, #0]
 8044876:	429a      	cmp	r2, r3
 8044878:	d20c      	bcs.n	8044894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804487a:	4b22      	ldr	r3, [pc, #136]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 804487c:	683a      	ldr	r2, [r7, #0]
 804487e:	b2d2      	uxtb	r2, r2
 8044880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8044882:	4b20      	ldr	r3, [pc, #128]	; (8044904 <HAL_RCC_ClockConfig+0x1b8>)
 8044884:	681b      	ldr	r3, [r3, #0]
 8044886:	f003 030f 	and.w	r3, r3, #15
 804488a:	683a      	ldr	r2, [r7, #0]
 804488c:	429a      	cmp	r2, r3
 804488e:	d001      	beq.n	8044894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8044890:	2301      	movs	r3, #1
 8044892:	e032      	b.n	80448fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8044894:	687b      	ldr	r3, [r7, #4]
 8044896:	681b      	ldr	r3, [r3, #0]
 8044898:	f003 0304 	and.w	r3, r3, #4
 804489c:	2b00      	cmp	r3, #0
 804489e:	d008      	beq.n	80448b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80448a0:	4b19      	ldr	r3, [pc, #100]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80448a2:	689b      	ldr	r3, [r3, #8]
 80448a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80448a8:	687b      	ldr	r3, [r7, #4]
 80448aa:	68db      	ldr	r3, [r3, #12]
 80448ac:	4916      	ldr	r1, [pc, #88]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80448ae:	4313      	orrs	r3, r2
 80448b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80448b2:	687b      	ldr	r3, [r7, #4]
 80448b4:	681b      	ldr	r3, [r3, #0]
 80448b6:	f003 0308 	and.w	r3, r3, #8
 80448ba:	2b00      	cmp	r3, #0
 80448bc:	d009      	beq.n	80448d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80448be:	4b12      	ldr	r3, [pc, #72]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80448c0:	689b      	ldr	r3, [r3, #8]
 80448c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80448c6:	687b      	ldr	r3, [r7, #4]
 80448c8:	691b      	ldr	r3, [r3, #16]
 80448ca:	00db      	lsls	r3, r3, #3
 80448cc:	490e      	ldr	r1, [pc, #56]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80448ce:	4313      	orrs	r3, r2
 80448d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80448d2:	f000 f821 	bl	8044918 <HAL_RCC_GetSysClockFreq>
 80448d6:	4602      	mov	r2, r0
 80448d8:	4b0b      	ldr	r3, [pc, #44]	; (8044908 <HAL_RCC_ClockConfig+0x1bc>)
 80448da:	689b      	ldr	r3, [r3, #8]
 80448dc:	091b      	lsrs	r3, r3, #4
 80448de:	f003 030f 	and.w	r3, r3, #15
 80448e2:	490a      	ldr	r1, [pc, #40]	; (804490c <HAL_RCC_ClockConfig+0x1c0>)
 80448e4:	5ccb      	ldrb	r3, [r1, r3]
 80448e6:	fa22 f303 	lsr.w	r3, r2, r3
 80448ea:	4a09      	ldr	r2, [pc, #36]	; (8044910 <HAL_RCC_ClockConfig+0x1c4>)
 80448ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80448ee:	4b09      	ldr	r3, [pc, #36]	; (8044914 <HAL_RCC_ClockConfig+0x1c8>)
 80448f0:	681b      	ldr	r3, [r3, #0]
 80448f2:	4618      	mov	r0, r3
 80448f4:	f7fc fd24 	bl	8041340 <HAL_InitTick>

  return HAL_OK;
 80448f8:	2300      	movs	r3, #0
}
 80448fa:	4618      	mov	r0, r3
 80448fc:	3710      	adds	r7, #16
 80448fe:	46bd      	mov	sp, r7
 8044900:	bd80      	pop	{r7, pc}
 8044902:	bf00      	nop
 8044904:	40023c00 	.word	0x40023c00
 8044908:	40023800 	.word	0x40023800
 804490c:	0804995c 	.word	0x0804995c
 8044910:	20000000 	.word	0x20000000
 8044914:	20000004 	.word	0x20000004

08044918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8044918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804491c:	b094      	sub	sp, #80	; 0x50
 804491e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8044920:	2300      	movs	r3, #0
 8044922:	647b      	str	r3, [r7, #68]	; 0x44
 8044924:	2300      	movs	r3, #0
 8044926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8044928:	2300      	movs	r3, #0
 804492a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 804492c:	2300      	movs	r3, #0
 804492e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8044930:	4b79      	ldr	r3, [pc, #484]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8044932:	689b      	ldr	r3, [r3, #8]
 8044934:	f003 030c 	and.w	r3, r3, #12
 8044938:	2b08      	cmp	r3, #8
 804493a:	d00d      	beq.n	8044958 <HAL_RCC_GetSysClockFreq+0x40>
 804493c:	2b08      	cmp	r3, #8
 804493e:	f200 80e1 	bhi.w	8044b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8044942:	2b00      	cmp	r3, #0
 8044944:	d002      	beq.n	804494c <HAL_RCC_GetSysClockFreq+0x34>
 8044946:	2b04      	cmp	r3, #4
 8044948:	d003      	beq.n	8044952 <HAL_RCC_GetSysClockFreq+0x3a>
 804494a:	e0db      	b.n	8044b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 804494c:	4b73      	ldr	r3, [pc, #460]	; (8044b1c <HAL_RCC_GetSysClockFreq+0x204>)
 804494e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8044950:	e0db      	b.n	8044b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8044952:	4b73      	ldr	r3, [pc, #460]	; (8044b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8044954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8044956:	e0d8      	b.n	8044b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8044958:	4b6f      	ldr	r3, [pc, #444]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 804495a:	685b      	ldr	r3, [r3, #4]
 804495c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8044960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8044962:	4b6d      	ldr	r3, [pc, #436]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8044964:	685b      	ldr	r3, [r3, #4]
 8044966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804496a:	2b00      	cmp	r3, #0
 804496c:	d063      	beq.n	8044a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804496e:	4b6a      	ldr	r3, [pc, #424]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8044970:	685b      	ldr	r3, [r3, #4]
 8044972:	099b      	lsrs	r3, r3, #6
 8044974:	2200      	movs	r2, #0
 8044976:	63bb      	str	r3, [r7, #56]	; 0x38
 8044978:	63fa      	str	r2, [r7, #60]	; 0x3c
 804497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8044980:	633b      	str	r3, [r7, #48]	; 0x30
 8044982:	2300      	movs	r3, #0
 8044984:	637b      	str	r3, [r7, #52]	; 0x34
 8044986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 804498a:	4622      	mov	r2, r4
 804498c:	462b      	mov	r3, r5
 804498e:	f04f 0000 	mov.w	r0, #0
 8044992:	f04f 0100 	mov.w	r1, #0
 8044996:	0159      	lsls	r1, r3, #5
 8044998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 804499c:	0150      	lsls	r0, r2, #5
 804499e:	4602      	mov	r2, r0
 80449a0:	460b      	mov	r3, r1
 80449a2:	4621      	mov	r1, r4
 80449a4:	1a51      	subs	r1, r2, r1
 80449a6:	6139      	str	r1, [r7, #16]
 80449a8:	4629      	mov	r1, r5
 80449aa:	eb63 0301 	sbc.w	r3, r3, r1
 80449ae:	617b      	str	r3, [r7, #20]
 80449b0:	f04f 0200 	mov.w	r2, #0
 80449b4:	f04f 0300 	mov.w	r3, #0
 80449b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80449bc:	4659      	mov	r1, fp
 80449be:	018b      	lsls	r3, r1, #6
 80449c0:	4651      	mov	r1, sl
 80449c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80449c6:	4651      	mov	r1, sl
 80449c8:	018a      	lsls	r2, r1, #6
 80449ca:	4651      	mov	r1, sl
 80449cc:	ebb2 0801 	subs.w	r8, r2, r1
 80449d0:	4659      	mov	r1, fp
 80449d2:	eb63 0901 	sbc.w	r9, r3, r1
 80449d6:	f04f 0200 	mov.w	r2, #0
 80449da:	f04f 0300 	mov.w	r3, #0
 80449de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80449e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80449e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80449ea:	4690      	mov	r8, r2
 80449ec:	4699      	mov	r9, r3
 80449ee:	4623      	mov	r3, r4
 80449f0:	eb18 0303 	adds.w	r3, r8, r3
 80449f4:	60bb      	str	r3, [r7, #8]
 80449f6:	462b      	mov	r3, r5
 80449f8:	eb49 0303 	adc.w	r3, r9, r3
 80449fc:	60fb      	str	r3, [r7, #12]
 80449fe:	f04f 0200 	mov.w	r2, #0
 8044a02:	f04f 0300 	mov.w	r3, #0
 8044a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8044a0a:	4629      	mov	r1, r5
 8044a0c:	024b      	lsls	r3, r1, #9
 8044a0e:	4621      	mov	r1, r4
 8044a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8044a14:	4621      	mov	r1, r4
 8044a16:	024a      	lsls	r2, r1, #9
 8044a18:	4610      	mov	r0, r2
 8044a1a:	4619      	mov	r1, r3
 8044a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044a1e:	2200      	movs	r2, #0
 8044a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8044a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8044a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8044a28:	f7fb fbe0 	bl	80401ec <__aeabi_uldivmod>
 8044a2c:	4602      	mov	r2, r0
 8044a2e:	460b      	mov	r3, r1
 8044a30:	4613      	mov	r3, r2
 8044a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8044a34:	e058      	b.n	8044ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044a36:	4b38      	ldr	r3, [pc, #224]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8044a38:	685b      	ldr	r3, [r3, #4]
 8044a3a:	099b      	lsrs	r3, r3, #6
 8044a3c:	2200      	movs	r2, #0
 8044a3e:	4618      	mov	r0, r3
 8044a40:	4611      	mov	r1, r2
 8044a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8044a46:	623b      	str	r3, [r7, #32]
 8044a48:	2300      	movs	r3, #0
 8044a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8044a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8044a50:	4642      	mov	r2, r8
 8044a52:	464b      	mov	r3, r9
 8044a54:	f04f 0000 	mov.w	r0, #0
 8044a58:	f04f 0100 	mov.w	r1, #0
 8044a5c:	0159      	lsls	r1, r3, #5
 8044a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8044a62:	0150      	lsls	r0, r2, #5
 8044a64:	4602      	mov	r2, r0
 8044a66:	460b      	mov	r3, r1
 8044a68:	4641      	mov	r1, r8
 8044a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8044a6e:	4649      	mov	r1, r9
 8044a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8044a74:	f04f 0200 	mov.w	r2, #0
 8044a78:	f04f 0300 	mov.w	r3, #0
 8044a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8044a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8044a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8044a88:	ebb2 040a 	subs.w	r4, r2, sl
 8044a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8044a90:	f04f 0200 	mov.w	r2, #0
 8044a94:	f04f 0300 	mov.w	r3, #0
 8044a98:	00eb      	lsls	r3, r5, #3
 8044a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8044a9e:	00e2      	lsls	r2, r4, #3
 8044aa0:	4614      	mov	r4, r2
 8044aa2:	461d      	mov	r5, r3
 8044aa4:	4643      	mov	r3, r8
 8044aa6:	18e3      	adds	r3, r4, r3
 8044aa8:	603b      	str	r3, [r7, #0]
 8044aaa:	464b      	mov	r3, r9
 8044aac:	eb45 0303 	adc.w	r3, r5, r3
 8044ab0:	607b      	str	r3, [r7, #4]
 8044ab2:	f04f 0200 	mov.w	r2, #0
 8044ab6:	f04f 0300 	mov.w	r3, #0
 8044aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8044abe:	4629      	mov	r1, r5
 8044ac0:	028b      	lsls	r3, r1, #10
 8044ac2:	4621      	mov	r1, r4
 8044ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8044ac8:	4621      	mov	r1, r4
 8044aca:	028a      	lsls	r2, r1, #10
 8044acc:	4610      	mov	r0, r2
 8044ace:	4619      	mov	r1, r3
 8044ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8044ad2:	2200      	movs	r2, #0
 8044ad4:	61bb      	str	r3, [r7, #24]
 8044ad6:	61fa      	str	r2, [r7, #28]
 8044ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8044adc:	f7fb fb86 	bl	80401ec <__aeabi_uldivmod>
 8044ae0:	4602      	mov	r2, r0
 8044ae2:	460b      	mov	r3, r1
 8044ae4:	4613      	mov	r3, r2
 8044ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8044ae8:	4b0b      	ldr	r3, [pc, #44]	; (8044b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8044aea:	685b      	ldr	r3, [r3, #4]
 8044aec:	0c1b      	lsrs	r3, r3, #16
 8044aee:	f003 0303 	and.w	r3, r3, #3
 8044af2:	3301      	adds	r3, #1
 8044af4:	005b      	lsls	r3, r3, #1
 8044af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8044af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8044afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8044afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8044b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8044b02:	e002      	b.n	8044b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8044b04:	4b05      	ldr	r3, [pc, #20]	; (8044b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8044b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8044b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8044b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8044b0c:	4618      	mov	r0, r3
 8044b0e:	3750      	adds	r7, #80	; 0x50
 8044b10:	46bd      	mov	sp, r7
 8044b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8044b16:	bf00      	nop
 8044b18:	40023800 	.word	0x40023800
 8044b1c:	00f42400 	.word	0x00f42400
 8044b20:	007a1200 	.word	0x007a1200

08044b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8044b24:	b480      	push	{r7}
 8044b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8044b28:	4b03      	ldr	r3, [pc, #12]	; (8044b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8044b2a:	681b      	ldr	r3, [r3, #0]
}
 8044b2c:	4618      	mov	r0, r3
 8044b2e:	46bd      	mov	sp, r7
 8044b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b34:	4770      	bx	lr
 8044b36:	bf00      	nop
 8044b38:	20000000 	.word	0x20000000

08044b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8044b3c:	b580      	push	{r7, lr}
 8044b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8044b40:	f7ff fff0 	bl	8044b24 <HAL_RCC_GetHCLKFreq>
 8044b44:	4602      	mov	r2, r0
 8044b46:	4b05      	ldr	r3, [pc, #20]	; (8044b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8044b48:	689b      	ldr	r3, [r3, #8]
 8044b4a:	0a9b      	lsrs	r3, r3, #10
 8044b4c:	f003 0307 	and.w	r3, r3, #7
 8044b50:	4903      	ldr	r1, [pc, #12]	; (8044b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8044b52:	5ccb      	ldrb	r3, [r1, r3]
 8044b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044b58:	4618      	mov	r0, r3
 8044b5a:	bd80      	pop	{r7, pc}
 8044b5c:	40023800 	.word	0x40023800
 8044b60:	0804996c 	.word	0x0804996c

08044b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8044b64:	b580      	push	{r7, lr}
 8044b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8044b68:	f7ff ffdc 	bl	8044b24 <HAL_RCC_GetHCLKFreq>
 8044b6c:	4602      	mov	r2, r0
 8044b6e:	4b05      	ldr	r3, [pc, #20]	; (8044b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8044b70:	689b      	ldr	r3, [r3, #8]
 8044b72:	0b5b      	lsrs	r3, r3, #13
 8044b74:	f003 0307 	and.w	r3, r3, #7
 8044b78:	4903      	ldr	r1, [pc, #12]	; (8044b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8044b7a:	5ccb      	ldrb	r3, [r1, r3]
 8044b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044b80:	4618      	mov	r0, r3
 8044b82:	bd80      	pop	{r7, pc}
 8044b84:	40023800 	.word	0x40023800
 8044b88:	0804996c 	.word	0x0804996c

08044b8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8044b8c:	b480      	push	{r7}
 8044b8e:	b083      	sub	sp, #12
 8044b90:	af00      	add	r7, sp, #0
 8044b92:	6078      	str	r0, [r7, #4]
 8044b94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8044b96:	687b      	ldr	r3, [r7, #4]
 8044b98:	220f      	movs	r2, #15
 8044b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8044b9c:	4b12      	ldr	r3, [pc, #72]	; (8044be8 <HAL_RCC_GetClockConfig+0x5c>)
 8044b9e:	689b      	ldr	r3, [r3, #8]
 8044ba0:	f003 0203 	and.w	r2, r3, #3
 8044ba4:	687b      	ldr	r3, [r7, #4]
 8044ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8044ba8:	4b0f      	ldr	r3, [pc, #60]	; (8044be8 <HAL_RCC_GetClockConfig+0x5c>)
 8044baa:	689b      	ldr	r3, [r3, #8]
 8044bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8044bb0:	687b      	ldr	r3, [r7, #4]
 8044bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8044bb4:	4b0c      	ldr	r3, [pc, #48]	; (8044be8 <HAL_RCC_GetClockConfig+0x5c>)
 8044bb6:	689b      	ldr	r3, [r3, #8]
 8044bb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8044bbc:	687b      	ldr	r3, [r7, #4]
 8044bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8044bc0:	4b09      	ldr	r3, [pc, #36]	; (8044be8 <HAL_RCC_GetClockConfig+0x5c>)
 8044bc2:	689b      	ldr	r3, [r3, #8]
 8044bc4:	08db      	lsrs	r3, r3, #3
 8044bc6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8044bca:	687b      	ldr	r3, [r7, #4]
 8044bcc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8044bce:	4b07      	ldr	r3, [pc, #28]	; (8044bec <HAL_RCC_GetClockConfig+0x60>)
 8044bd0:	681b      	ldr	r3, [r3, #0]
 8044bd2:	f003 020f 	and.w	r2, r3, #15
 8044bd6:	683b      	ldr	r3, [r7, #0]
 8044bd8:	601a      	str	r2, [r3, #0]
}
 8044bda:	bf00      	nop
 8044bdc:	370c      	adds	r7, #12
 8044bde:	46bd      	mov	sp, r7
 8044be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044be4:	4770      	bx	lr
 8044be6:	bf00      	nop
 8044be8:	40023800 	.word	0x40023800
 8044bec:	40023c00 	.word	0x40023c00

08044bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8044bf0:	b580      	push	{r7, lr}
 8044bf2:	b086      	sub	sp, #24
 8044bf4:	af00      	add	r7, sp, #0
 8044bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8044bf8:	2300      	movs	r3, #0
 8044bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8044bfc:	2300      	movs	r3, #0
 8044bfe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044c00:	687b      	ldr	r3, [r7, #4]
 8044c02:	681b      	ldr	r3, [r3, #0]
 8044c04:	f003 0301 	and.w	r3, r3, #1
 8044c08:	2b00      	cmp	r3, #0
 8044c0a:	d10b      	bne.n	8044c24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8044c0c:	687b      	ldr	r3, [r7, #4]
 8044c0e:	681b      	ldr	r3, [r3, #0]
 8044c10:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8044c14:	2b00      	cmp	r3, #0
 8044c16:	d105      	bne.n	8044c24 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8044c18:	687b      	ldr	r3, [r7, #4]
 8044c1a:	681b      	ldr	r3, [r3, #0]
 8044c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8044c20:	2b00      	cmp	r3, #0
 8044c22:	d075      	beq.n	8044d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8044c24:	4b91      	ldr	r3, [pc, #580]	; (8044e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8044c26:	2200      	movs	r2, #0
 8044c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044c2a:	f7fc fd05 	bl	8041638 <HAL_GetTick>
 8044c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044c30:	e008      	b.n	8044c44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044c32:	f7fc fd01 	bl	8041638 <HAL_GetTick>
 8044c36:	4602      	mov	r2, r0
 8044c38:	697b      	ldr	r3, [r7, #20]
 8044c3a:	1ad3      	subs	r3, r2, r3
 8044c3c:	2b02      	cmp	r3, #2
 8044c3e:	d901      	bls.n	8044c44 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044c40:	2303      	movs	r3, #3
 8044c42:	e189      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8044c44:	4b8a      	ldr	r3, [pc, #552]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044c46:	681b      	ldr	r3, [r3, #0]
 8044c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044c4c:	2b00      	cmp	r3, #0
 8044c4e:	d1f0      	bne.n	8044c32 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8044c50:	687b      	ldr	r3, [r7, #4]
 8044c52:	681b      	ldr	r3, [r3, #0]
 8044c54:	f003 0301 	and.w	r3, r3, #1
 8044c58:	2b00      	cmp	r3, #0
 8044c5a:	d009      	beq.n	8044c70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8044c5c:	687b      	ldr	r3, [r7, #4]
 8044c5e:	685b      	ldr	r3, [r3, #4]
 8044c60:	019a      	lsls	r2, r3, #6
 8044c62:	687b      	ldr	r3, [r7, #4]
 8044c64:	689b      	ldr	r3, [r3, #8]
 8044c66:	071b      	lsls	r3, r3, #28
 8044c68:	4981      	ldr	r1, [pc, #516]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044c6a:	4313      	orrs	r3, r2
 8044c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8044c70:	687b      	ldr	r3, [r7, #4]
 8044c72:	681b      	ldr	r3, [r3, #0]
 8044c74:	f003 0302 	and.w	r3, r3, #2
 8044c78:	2b00      	cmp	r3, #0
 8044c7a:	d01f      	beq.n	8044cbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8044c7c:	4b7c      	ldr	r3, [pc, #496]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044c82:	0f1b      	lsrs	r3, r3, #28
 8044c84:	f003 0307 	and.w	r3, r3, #7
 8044c88:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8044c8a:	687b      	ldr	r3, [r7, #4]
 8044c8c:	685b      	ldr	r3, [r3, #4]
 8044c8e:	019a      	lsls	r2, r3, #6
 8044c90:	687b      	ldr	r3, [r7, #4]
 8044c92:	68db      	ldr	r3, [r3, #12]
 8044c94:	061b      	lsls	r3, r3, #24
 8044c96:	431a      	orrs	r2, r3
 8044c98:	693b      	ldr	r3, [r7, #16]
 8044c9a:	071b      	lsls	r3, r3, #28
 8044c9c:	4974      	ldr	r1, [pc, #464]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044c9e:	4313      	orrs	r3, r2
 8044ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8044ca4:	4b72      	ldr	r3, [pc, #456]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044caa:	f023 021f 	bic.w	r2, r3, #31
 8044cae:	687b      	ldr	r3, [r7, #4]
 8044cb0:	69db      	ldr	r3, [r3, #28]
 8044cb2:	3b01      	subs	r3, #1
 8044cb4:	496e      	ldr	r1, [pc, #440]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044cb6:	4313      	orrs	r3, r2
 8044cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8044cbc:	687b      	ldr	r3, [r7, #4]
 8044cbe:	681b      	ldr	r3, [r3, #0]
 8044cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044cc4:	2b00      	cmp	r3, #0
 8044cc6:	d00d      	beq.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8044cc8:	687b      	ldr	r3, [r7, #4]
 8044cca:	685b      	ldr	r3, [r3, #4]
 8044ccc:	019a      	lsls	r2, r3, #6
 8044cce:	687b      	ldr	r3, [r7, #4]
 8044cd0:	68db      	ldr	r3, [r3, #12]
 8044cd2:	061b      	lsls	r3, r3, #24
 8044cd4:	431a      	orrs	r2, r3
 8044cd6:	687b      	ldr	r3, [r7, #4]
 8044cd8:	689b      	ldr	r3, [r3, #8]
 8044cda:	071b      	lsls	r3, r3, #28
 8044cdc:	4964      	ldr	r1, [pc, #400]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044cde:	4313      	orrs	r3, r2
 8044ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8044ce4:	4b61      	ldr	r3, [pc, #388]	; (8044e6c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8044ce6:	2201      	movs	r2, #1
 8044ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044cea:	f7fc fca5 	bl	8041638 <HAL_GetTick>
 8044cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044cf0:	e008      	b.n	8044d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8044cf2:	f7fc fca1 	bl	8041638 <HAL_GetTick>
 8044cf6:	4602      	mov	r2, r0
 8044cf8:	697b      	ldr	r3, [r7, #20]
 8044cfa:	1ad3      	subs	r3, r2, r3
 8044cfc:	2b02      	cmp	r3, #2
 8044cfe:	d901      	bls.n	8044d04 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044d00:	2303      	movs	r3, #3
 8044d02:	e129      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8044d04:	4b5a      	ldr	r3, [pc, #360]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d06:	681b      	ldr	r3, [r3, #0]
 8044d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044d0c:	2b00      	cmp	r3, #0
 8044d0e:	d0f0      	beq.n	8044cf2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8044d10:	687b      	ldr	r3, [r7, #4]
 8044d12:	681b      	ldr	r3, [r3, #0]
 8044d14:	f003 0304 	and.w	r3, r3, #4
 8044d18:	2b00      	cmp	r3, #0
 8044d1a:	d105      	bne.n	8044d28 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8044d1c:	687b      	ldr	r3, [r7, #4]
 8044d1e:	681b      	ldr	r3, [r3, #0]
 8044d20:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8044d24:	2b00      	cmp	r3, #0
 8044d26:	d079      	beq.n	8044e1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8044d28:	4b52      	ldr	r3, [pc, #328]	; (8044e74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8044d2a:	2200      	movs	r2, #0
 8044d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044d2e:	f7fc fc83 	bl	8041638 <HAL_GetTick>
 8044d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8044d34:	e008      	b.n	8044d48 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8044d36:	f7fc fc7f 	bl	8041638 <HAL_GetTick>
 8044d3a:	4602      	mov	r2, r0
 8044d3c:	697b      	ldr	r3, [r7, #20]
 8044d3e:	1ad3      	subs	r3, r2, r3
 8044d40:	2b02      	cmp	r3, #2
 8044d42:	d901      	bls.n	8044d48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044d44:	2303      	movs	r3, #3
 8044d46:	e107      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8044d48:	4b49      	ldr	r3, [pc, #292]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d4a:	681b      	ldr	r3, [r3, #0]
 8044d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044d54:	d0ef      	beq.n	8044d36 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8044d56:	687b      	ldr	r3, [r7, #4]
 8044d58:	681b      	ldr	r3, [r3, #0]
 8044d5a:	f003 0304 	and.w	r3, r3, #4
 8044d5e:	2b00      	cmp	r3, #0
 8044d60:	d020      	beq.n	8044da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8044d62:	4b43      	ldr	r3, [pc, #268]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044d68:	0f1b      	lsrs	r3, r3, #28
 8044d6a:	f003 0307 	and.w	r3, r3, #7
 8044d6e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8044d70:	687b      	ldr	r3, [r7, #4]
 8044d72:	691b      	ldr	r3, [r3, #16]
 8044d74:	019a      	lsls	r2, r3, #6
 8044d76:	687b      	ldr	r3, [r7, #4]
 8044d78:	695b      	ldr	r3, [r3, #20]
 8044d7a:	061b      	lsls	r3, r3, #24
 8044d7c:	431a      	orrs	r2, r3
 8044d7e:	693b      	ldr	r3, [r7, #16]
 8044d80:	071b      	lsls	r3, r3, #28
 8044d82:	493b      	ldr	r1, [pc, #236]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d84:	4313      	orrs	r3, r2
 8044d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8044d8a:	4b39      	ldr	r3, [pc, #228]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044d90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8044d94:	687b      	ldr	r3, [r7, #4]
 8044d96:	6a1b      	ldr	r3, [r3, #32]
 8044d98:	3b01      	subs	r3, #1
 8044d9a:	021b      	lsls	r3, r3, #8
 8044d9c:	4934      	ldr	r1, [pc, #208]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044d9e:	4313      	orrs	r3, r2
 8044da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8044da4:	687b      	ldr	r3, [r7, #4]
 8044da6:	681b      	ldr	r3, [r3, #0]
 8044da8:	f003 0308 	and.w	r3, r3, #8
 8044dac:	2b00      	cmp	r3, #0
 8044dae:	d01e      	beq.n	8044dee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8044db0:	4b2f      	ldr	r3, [pc, #188]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044db6:	0e1b      	lsrs	r3, r3, #24
 8044db8:	f003 030f 	and.w	r3, r3, #15
 8044dbc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8044dbe:	687b      	ldr	r3, [r7, #4]
 8044dc0:	691b      	ldr	r3, [r3, #16]
 8044dc2:	019a      	lsls	r2, r3, #6
 8044dc4:	693b      	ldr	r3, [r7, #16]
 8044dc6:	061b      	lsls	r3, r3, #24
 8044dc8:	431a      	orrs	r2, r3
 8044dca:	687b      	ldr	r3, [r7, #4]
 8044dcc:	699b      	ldr	r3, [r3, #24]
 8044dce:	071b      	lsls	r3, r3, #28
 8044dd0:	4927      	ldr	r1, [pc, #156]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044dd2:	4313      	orrs	r3, r2
 8044dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8044dd8:	4b25      	ldr	r3, [pc, #148]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8044de2:	687b      	ldr	r3, [r7, #4]
 8044de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044de6:	4922      	ldr	r1, [pc, #136]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044de8:	4313      	orrs	r3, r2
 8044dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8044dee:	4b21      	ldr	r3, [pc, #132]	; (8044e74 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8044df0:	2201      	movs	r2, #1
 8044df2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8044df4:	f7fc fc20 	bl	8041638 <HAL_GetTick>
 8044df8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8044dfa:	e008      	b.n	8044e0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8044dfc:	f7fc fc1c 	bl	8041638 <HAL_GetTick>
 8044e00:	4602      	mov	r2, r0
 8044e02:	697b      	ldr	r3, [r7, #20]
 8044e04:	1ad3      	subs	r3, r2, r3
 8044e06:	2b02      	cmp	r3, #2
 8044e08:	d901      	bls.n	8044e0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8044e0a:	2303      	movs	r3, #3
 8044e0c:	e0a4      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8044e0e:	4b18      	ldr	r3, [pc, #96]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044e10:	681b      	ldr	r3, [r3, #0]
 8044e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044e1a:	d1ef      	bne.n	8044dfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8044e1c:	687b      	ldr	r3, [r7, #4]
 8044e1e:	681b      	ldr	r3, [r3, #0]
 8044e20:	f003 0320 	and.w	r3, r3, #32
 8044e24:	2b00      	cmp	r3, #0
 8044e26:	f000 808b 	beq.w	8044f40 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8044e2a:	2300      	movs	r3, #0
 8044e2c:	60fb      	str	r3, [r7, #12]
 8044e2e:	4b10      	ldr	r3, [pc, #64]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044e32:	4a0f      	ldr	r2, [pc, #60]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044e38:	6413      	str	r3, [r2, #64]	; 0x40
 8044e3a:	4b0d      	ldr	r3, [pc, #52]	; (8044e70 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044e42:	60fb      	str	r3, [r7, #12]
 8044e44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8044e46:	4b0c      	ldr	r3, [pc, #48]	; (8044e78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8044e48:	681b      	ldr	r3, [r3, #0]
 8044e4a:	4a0b      	ldr	r2, [pc, #44]	; (8044e78 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8044e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8044e52:	f7fc fbf1 	bl	8041638 <HAL_GetTick>
 8044e56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8044e58:	e010      	b.n	8044e7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8044e5a:	f7fc fbed 	bl	8041638 <HAL_GetTick>
 8044e5e:	4602      	mov	r2, r0
 8044e60:	697b      	ldr	r3, [r7, #20]
 8044e62:	1ad3      	subs	r3, r2, r3
 8044e64:	2b02      	cmp	r3, #2
 8044e66:	d909      	bls.n	8044e7c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8044e68:	2303      	movs	r3, #3
 8044e6a:	e075      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8044e6c:	42470068 	.word	0x42470068
 8044e70:	40023800 	.word	0x40023800
 8044e74:	42470070 	.word	0x42470070
 8044e78:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8044e7c:	4b38      	ldr	r3, [pc, #224]	; (8044f60 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8044e7e:	681b      	ldr	r3, [r3, #0]
 8044e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044e84:	2b00      	cmp	r3, #0
 8044e86:	d0e8      	beq.n	8044e5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8044e88:	4b36      	ldr	r3, [pc, #216]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044e90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8044e92:	693b      	ldr	r3, [r7, #16]
 8044e94:	2b00      	cmp	r3, #0
 8044e96:	d02f      	beq.n	8044ef8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8044e98:	687b      	ldr	r3, [r7, #4]
 8044e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044ea0:	693a      	ldr	r2, [r7, #16]
 8044ea2:	429a      	cmp	r2, r3
 8044ea4:	d028      	beq.n	8044ef8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8044ea6:	4b2f      	ldr	r3, [pc, #188]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044eae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8044eb0:	4b2d      	ldr	r3, [pc, #180]	; (8044f68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8044eb2:	2201      	movs	r2, #1
 8044eb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8044eb6:	4b2c      	ldr	r3, [pc, #176]	; (8044f68 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8044eb8:	2200      	movs	r2, #0
 8044eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8044ebc:	4a29      	ldr	r2, [pc, #164]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044ebe:	693b      	ldr	r3, [r7, #16]
 8044ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8044ec2:	4b28      	ldr	r3, [pc, #160]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044ec6:	f003 0301 	and.w	r3, r3, #1
 8044eca:	2b01      	cmp	r3, #1
 8044ecc:	d114      	bne.n	8044ef8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8044ece:	f7fc fbb3 	bl	8041638 <HAL_GetTick>
 8044ed2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044ed4:	e00a      	b.n	8044eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044ed6:	f7fc fbaf 	bl	8041638 <HAL_GetTick>
 8044eda:	4602      	mov	r2, r0
 8044edc:	697b      	ldr	r3, [r7, #20]
 8044ede:	1ad3      	subs	r3, r2, r3
 8044ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8044ee4:	4293      	cmp	r3, r2
 8044ee6:	d901      	bls.n	8044eec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8044ee8:	2303      	movs	r3, #3
 8044eea:	e035      	b.n	8044f58 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044eec:	4b1d      	ldr	r3, [pc, #116]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044ef0:	f003 0302 	and.w	r3, r3, #2
 8044ef4:	2b00      	cmp	r3, #0
 8044ef6:	d0ee      	beq.n	8044ed6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8044ef8:	687b      	ldr	r3, [r7, #4]
 8044efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044f04:	d10d      	bne.n	8044f22 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8044f06:	4b17      	ldr	r3, [pc, #92]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f08:	689b      	ldr	r3, [r3, #8]
 8044f0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8044f0e:	687b      	ldr	r3, [r7, #4]
 8044f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044f12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8044f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044f1a:	4912      	ldr	r1, [pc, #72]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f1c:	4313      	orrs	r3, r2
 8044f1e:	608b      	str	r3, [r1, #8]
 8044f20:	e005      	b.n	8044f2e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8044f22:	4b10      	ldr	r3, [pc, #64]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f24:	689b      	ldr	r3, [r3, #8]
 8044f26:	4a0f      	ldr	r2, [pc, #60]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8044f2c:	6093      	str	r3, [r2, #8]
 8044f2e:	4b0d      	ldr	r3, [pc, #52]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8044f32:	687b      	ldr	r3, [r7, #4]
 8044f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044f3a:	490a      	ldr	r1, [pc, #40]	; (8044f64 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8044f3c:	4313      	orrs	r3, r2
 8044f3e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8044f40:	687b      	ldr	r3, [r7, #4]
 8044f42:	681b      	ldr	r3, [r3, #0]
 8044f44:	f003 0310 	and.w	r3, r3, #16
 8044f48:	2b00      	cmp	r3, #0
 8044f4a:	d004      	beq.n	8044f56 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8044f4c:	687b      	ldr	r3, [r7, #4]
 8044f4e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8044f52:	4b06      	ldr	r3, [pc, #24]	; (8044f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8044f54:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8044f56:	2300      	movs	r3, #0
}
 8044f58:	4618      	mov	r0, r3
 8044f5a:	3718      	adds	r7, #24
 8044f5c:	46bd      	mov	sp, r7
 8044f5e:	bd80      	pop	{r7, pc}
 8044f60:	40007000 	.word	0x40007000
 8044f64:	40023800 	.word	0x40023800
 8044f68:	42470e40 	.word	0x42470e40
 8044f6c:	424711e0 	.word	0x424711e0

08044f70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8044f70:	b580      	push	{r7, lr}
 8044f72:	b082      	sub	sp, #8
 8044f74:	af00      	add	r7, sp, #0
 8044f76:	6078      	str	r0, [r7, #4]
 8044f78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8044f7a:	687b      	ldr	r3, [r7, #4]
 8044f7c:	2b00      	cmp	r3, #0
 8044f7e:	d101      	bne.n	8044f84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8044f80:	2301      	movs	r3, #1
 8044f82:	e025      	b.n	8044fd0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8044f84:	687b      	ldr	r3, [r7, #4]
 8044f86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8044f8a:	b2db      	uxtb	r3, r3
 8044f8c:	2b00      	cmp	r3, #0
 8044f8e:	d106      	bne.n	8044f9e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8044f90:	687b      	ldr	r3, [r7, #4]
 8044f92:	2200      	movs	r2, #0
 8044f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8044f98:	6878      	ldr	r0, [r7, #4]
 8044f9a:	f7fc f9c7 	bl	804132c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8044f9e:	687b      	ldr	r3, [r7, #4]
 8044fa0:	2202      	movs	r2, #2
 8044fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8044fa6:	687b      	ldr	r3, [r7, #4]
 8044fa8:	681a      	ldr	r2, [r3, #0]
 8044faa:	687b      	ldr	r3, [r7, #4]
 8044fac:	3304      	adds	r3, #4
 8044fae:	4619      	mov	r1, r3
 8044fb0:	4610      	mov	r0, r2
 8044fb2:	f000 ffdd 	bl	8045f70 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8044fb6:	687b      	ldr	r3, [r7, #4]
 8044fb8:	6818      	ldr	r0, [r3, #0]
 8044fba:	687b      	ldr	r3, [r7, #4]
 8044fbc:	685b      	ldr	r3, [r3, #4]
 8044fbe:	461a      	mov	r2, r3
 8044fc0:	6839      	ldr	r1, [r7, #0]
 8044fc2:	f001 f832 	bl	804602a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8044fc6:	687b      	ldr	r3, [r7, #4]
 8044fc8:	2201      	movs	r2, #1
 8044fca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8044fce:	2300      	movs	r3, #0
}
 8044fd0:	4618      	mov	r0, r3
 8044fd2:	3708      	adds	r7, #8
 8044fd4:	46bd      	mov	sp, r7
 8044fd6:	bd80      	pop	{r7, pc}

08044fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8044fd8:	b580      	push	{r7, lr}
 8044fda:	b082      	sub	sp, #8
 8044fdc:	af00      	add	r7, sp, #0
 8044fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8044fe0:	687b      	ldr	r3, [r7, #4]
 8044fe2:	2b00      	cmp	r3, #0
 8044fe4:	d101      	bne.n	8044fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8044fe6:	2301      	movs	r3, #1
 8044fe8:	e07b      	b.n	80450e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8044fea:	687b      	ldr	r3, [r7, #4]
 8044fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044fee:	2b00      	cmp	r3, #0
 8044ff0:	d108      	bne.n	8045004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8044ff2:	687b      	ldr	r3, [r7, #4]
 8044ff4:	685b      	ldr	r3, [r3, #4]
 8044ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8044ffa:	d009      	beq.n	8045010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8044ffc:	687b      	ldr	r3, [r7, #4]
 8044ffe:	2200      	movs	r2, #0
 8045000:	61da      	str	r2, [r3, #28]
 8045002:	e005      	b.n	8045010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8045004:	687b      	ldr	r3, [r7, #4]
 8045006:	2200      	movs	r2, #0
 8045008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804500a:	687b      	ldr	r3, [r7, #4]
 804500c:	2200      	movs	r2, #0
 804500e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8045010:	687b      	ldr	r3, [r7, #4]
 8045012:	2200      	movs	r2, #0
 8045014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8045016:	687b      	ldr	r3, [r7, #4]
 8045018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 804501c:	b2db      	uxtb	r3, r3
 804501e:	2b00      	cmp	r3, #0
 8045020:	d106      	bne.n	8045030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8045022:	687b      	ldr	r3, [r7, #4]
 8045024:	2200      	movs	r2, #0
 8045026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 804502a:	6878      	ldr	r0, [r7, #4]
 804502c:	f7fc f83a 	bl	80410a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8045030:	687b      	ldr	r3, [r7, #4]
 8045032:	2202      	movs	r2, #2
 8045034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8045038:	687b      	ldr	r3, [r7, #4]
 804503a:	681b      	ldr	r3, [r3, #0]
 804503c:	681a      	ldr	r2, [r3, #0]
 804503e:	687b      	ldr	r3, [r7, #4]
 8045040:	681b      	ldr	r3, [r3, #0]
 8045042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8045048:	687b      	ldr	r3, [r7, #4]
 804504a:	685b      	ldr	r3, [r3, #4]
 804504c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8045050:	687b      	ldr	r3, [r7, #4]
 8045052:	689b      	ldr	r3, [r3, #8]
 8045054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8045058:	431a      	orrs	r2, r3
 804505a:	687b      	ldr	r3, [r7, #4]
 804505c:	68db      	ldr	r3, [r3, #12]
 804505e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8045062:	431a      	orrs	r2, r3
 8045064:	687b      	ldr	r3, [r7, #4]
 8045066:	691b      	ldr	r3, [r3, #16]
 8045068:	f003 0302 	and.w	r3, r3, #2
 804506c:	431a      	orrs	r2, r3
 804506e:	687b      	ldr	r3, [r7, #4]
 8045070:	695b      	ldr	r3, [r3, #20]
 8045072:	f003 0301 	and.w	r3, r3, #1
 8045076:	431a      	orrs	r2, r3
 8045078:	687b      	ldr	r3, [r7, #4]
 804507a:	699b      	ldr	r3, [r3, #24]
 804507c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045080:	431a      	orrs	r2, r3
 8045082:	687b      	ldr	r3, [r7, #4]
 8045084:	69db      	ldr	r3, [r3, #28]
 8045086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804508a:	431a      	orrs	r2, r3
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	6a1b      	ldr	r3, [r3, #32]
 8045090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045094:	ea42 0103 	orr.w	r1, r2, r3
 8045098:	687b      	ldr	r3, [r7, #4]
 804509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804509c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80450a0:	687b      	ldr	r3, [r7, #4]
 80450a2:	681b      	ldr	r3, [r3, #0]
 80450a4:	430a      	orrs	r2, r1
 80450a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80450a8:	687b      	ldr	r3, [r7, #4]
 80450aa:	699b      	ldr	r3, [r3, #24]
 80450ac:	0c1b      	lsrs	r3, r3, #16
 80450ae:	f003 0104 	and.w	r1, r3, #4
 80450b2:	687b      	ldr	r3, [r7, #4]
 80450b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80450b6:	f003 0210 	and.w	r2, r3, #16
 80450ba:	687b      	ldr	r3, [r7, #4]
 80450bc:	681b      	ldr	r3, [r3, #0]
 80450be:	430a      	orrs	r2, r1
 80450c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80450c2:	687b      	ldr	r3, [r7, #4]
 80450c4:	681b      	ldr	r3, [r3, #0]
 80450c6:	69da      	ldr	r2, [r3, #28]
 80450c8:	687b      	ldr	r3, [r7, #4]
 80450ca:	681b      	ldr	r3, [r3, #0]
 80450cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80450d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80450d2:	687b      	ldr	r3, [r7, #4]
 80450d4:	2200      	movs	r2, #0
 80450d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80450d8:	687b      	ldr	r3, [r7, #4]
 80450da:	2201      	movs	r2, #1
 80450dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80450e0:	2300      	movs	r3, #0
}
 80450e2:	4618      	mov	r0, r3
 80450e4:	3708      	adds	r7, #8
 80450e6:	46bd      	mov	sp, r7
 80450e8:	bd80      	pop	{r7, pc}

080450ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80450ea:	b580      	push	{r7, lr}
 80450ec:	b082      	sub	sp, #8
 80450ee:	af00      	add	r7, sp, #0
 80450f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80450f2:	687b      	ldr	r3, [r7, #4]
 80450f4:	2b00      	cmp	r3, #0
 80450f6:	d101      	bne.n	80450fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80450f8:	2301      	movs	r3, #1
 80450fa:	e041      	b.n	8045180 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80450fc:	687b      	ldr	r3, [r7, #4]
 80450fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045102:	b2db      	uxtb	r3, r3
 8045104:	2b00      	cmp	r3, #0
 8045106:	d106      	bne.n	8045116 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	2200      	movs	r2, #0
 804510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8045110:	6878      	ldr	r0, [r7, #4]
 8045112:	f7fc f80f 	bl	8041134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8045116:	687b      	ldr	r3, [r7, #4]
 8045118:	2202      	movs	r2, #2
 804511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804511e:	687b      	ldr	r3, [r7, #4]
 8045120:	681a      	ldr	r2, [r3, #0]
 8045122:	687b      	ldr	r3, [r7, #4]
 8045124:	3304      	adds	r3, #4
 8045126:	4619      	mov	r1, r3
 8045128:	4610      	mov	r0, r2
 804512a:	f000 fa95 	bl	8045658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804512e:	687b      	ldr	r3, [r7, #4]
 8045130:	2201      	movs	r2, #1
 8045132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8045136:	687b      	ldr	r3, [r7, #4]
 8045138:	2201      	movs	r2, #1
 804513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804513e:	687b      	ldr	r3, [r7, #4]
 8045140:	2201      	movs	r2, #1
 8045142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8045146:	687b      	ldr	r3, [r7, #4]
 8045148:	2201      	movs	r2, #1
 804514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804514e:	687b      	ldr	r3, [r7, #4]
 8045150:	2201      	movs	r2, #1
 8045152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8045156:	687b      	ldr	r3, [r7, #4]
 8045158:	2201      	movs	r2, #1
 804515a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804515e:	687b      	ldr	r3, [r7, #4]
 8045160:	2201      	movs	r2, #1
 8045162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8045166:	687b      	ldr	r3, [r7, #4]
 8045168:	2201      	movs	r2, #1
 804516a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804516e:	687b      	ldr	r3, [r7, #4]
 8045170:	2201      	movs	r2, #1
 8045172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8045176:	687b      	ldr	r3, [r7, #4]
 8045178:	2201      	movs	r2, #1
 804517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804517e:	2300      	movs	r3, #0
}
 8045180:	4618      	mov	r0, r3
 8045182:	3708      	adds	r7, #8
 8045184:	46bd      	mov	sp, r7
 8045186:	bd80      	pop	{r7, pc}

08045188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8045188:	b480      	push	{r7}
 804518a:	b085      	sub	sp, #20
 804518c:	af00      	add	r7, sp, #0
 804518e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8045190:	687b      	ldr	r3, [r7, #4]
 8045192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045196:	b2db      	uxtb	r3, r3
 8045198:	2b01      	cmp	r3, #1
 804519a:	d001      	beq.n	80451a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 804519c:	2301      	movs	r3, #1
 804519e:	e04e      	b.n	804523e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80451a0:	687b      	ldr	r3, [r7, #4]
 80451a2:	2202      	movs	r2, #2
 80451a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80451a8:	687b      	ldr	r3, [r7, #4]
 80451aa:	681b      	ldr	r3, [r3, #0]
 80451ac:	68da      	ldr	r2, [r3, #12]
 80451ae:	687b      	ldr	r3, [r7, #4]
 80451b0:	681b      	ldr	r3, [r3, #0]
 80451b2:	f042 0201 	orr.w	r2, r2, #1
 80451b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80451b8:	687b      	ldr	r3, [r7, #4]
 80451ba:	681b      	ldr	r3, [r3, #0]
 80451bc:	4a23      	ldr	r2, [pc, #140]	; (804524c <HAL_TIM_Base_Start_IT+0xc4>)
 80451be:	4293      	cmp	r3, r2
 80451c0:	d022      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451c2:	687b      	ldr	r3, [r7, #4]
 80451c4:	681b      	ldr	r3, [r3, #0]
 80451c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80451ca:	d01d      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451cc:	687b      	ldr	r3, [r7, #4]
 80451ce:	681b      	ldr	r3, [r3, #0]
 80451d0:	4a1f      	ldr	r2, [pc, #124]	; (8045250 <HAL_TIM_Base_Start_IT+0xc8>)
 80451d2:	4293      	cmp	r3, r2
 80451d4:	d018      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451d6:	687b      	ldr	r3, [r7, #4]
 80451d8:	681b      	ldr	r3, [r3, #0]
 80451da:	4a1e      	ldr	r2, [pc, #120]	; (8045254 <HAL_TIM_Base_Start_IT+0xcc>)
 80451dc:	4293      	cmp	r3, r2
 80451de:	d013      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451e0:	687b      	ldr	r3, [r7, #4]
 80451e2:	681b      	ldr	r3, [r3, #0]
 80451e4:	4a1c      	ldr	r2, [pc, #112]	; (8045258 <HAL_TIM_Base_Start_IT+0xd0>)
 80451e6:	4293      	cmp	r3, r2
 80451e8:	d00e      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451ea:	687b      	ldr	r3, [r7, #4]
 80451ec:	681b      	ldr	r3, [r3, #0]
 80451ee:	4a1b      	ldr	r2, [pc, #108]	; (804525c <HAL_TIM_Base_Start_IT+0xd4>)
 80451f0:	4293      	cmp	r3, r2
 80451f2:	d009      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451f4:	687b      	ldr	r3, [r7, #4]
 80451f6:	681b      	ldr	r3, [r3, #0]
 80451f8:	4a19      	ldr	r2, [pc, #100]	; (8045260 <HAL_TIM_Base_Start_IT+0xd8>)
 80451fa:	4293      	cmp	r3, r2
 80451fc:	d004      	beq.n	8045208 <HAL_TIM_Base_Start_IT+0x80>
 80451fe:	687b      	ldr	r3, [r7, #4]
 8045200:	681b      	ldr	r3, [r3, #0]
 8045202:	4a18      	ldr	r2, [pc, #96]	; (8045264 <HAL_TIM_Base_Start_IT+0xdc>)
 8045204:	4293      	cmp	r3, r2
 8045206:	d111      	bne.n	804522c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8045208:	687b      	ldr	r3, [r7, #4]
 804520a:	681b      	ldr	r3, [r3, #0]
 804520c:	689b      	ldr	r3, [r3, #8]
 804520e:	f003 0307 	and.w	r3, r3, #7
 8045212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8045214:	68fb      	ldr	r3, [r7, #12]
 8045216:	2b06      	cmp	r3, #6
 8045218:	d010      	beq.n	804523c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 804521a:	687b      	ldr	r3, [r7, #4]
 804521c:	681b      	ldr	r3, [r3, #0]
 804521e:	681a      	ldr	r2, [r3, #0]
 8045220:	687b      	ldr	r3, [r7, #4]
 8045222:	681b      	ldr	r3, [r3, #0]
 8045224:	f042 0201 	orr.w	r2, r2, #1
 8045228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804522a:	e007      	b.n	804523c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804522c:	687b      	ldr	r3, [r7, #4]
 804522e:	681b      	ldr	r3, [r3, #0]
 8045230:	681a      	ldr	r2, [r3, #0]
 8045232:	687b      	ldr	r3, [r7, #4]
 8045234:	681b      	ldr	r3, [r3, #0]
 8045236:	f042 0201 	orr.w	r2, r2, #1
 804523a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 804523c:	2300      	movs	r3, #0
}
 804523e:	4618      	mov	r0, r3
 8045240:	3714      	adds	r7, #20
 8045242:	46bd      	mov	sp, r7
 8045244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045248:	4770      	bx	lr
 804524a:	bf00      	nop
 804524c:	40010000 	.word	0x40010000
 8045250:	40000400 	.word	0x40000400
 8045254:	40000800 	.word	0x40000800
 8045258:	40000c00 	.word	0x40000c00
 804525c:	40010400 	.word	0x40010400
 8045260:	40014000 	.word	0x40014000
 8045264:	40001800 	.word	0x40001800

08045268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8045268:	b580      	push	{r7, lr}
 804526a:	b082      	sub	sp, #8
 804526c:	af00      	add	r7, sp, #0
 804526e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045270:	687b      	ldr	r3, [r7, #4]
 8045272:	681b      	ldr	r3, [r3, #0]
 8045274:	691b      	ldr	r3, [r3, #16]
 8045276:	f003 0302 	and.w	r3, r3, #2
 804527a:	2b02      	cmp	r3, #2
 804527c:	d122      	bne.n	80452c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804527e:	687b      	ldr	r3, [r7, #4]
 8045280:	681b      	ldr	r3, [r3, #0]
 8045282:	68db      	ldr	r3, [r3, #12]
 8045284:	f003 0302 	and.w	r3, r3, #2
 8045288:	2b02      	cmp	r3, #2
 804528a:	d11b      	bne.n	80452c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 804528c:	687b      	ldr	r3, [r7, #4]
 804528e:	681b      	ldr	r3, [r3, #0]
 8045290:	f06f 0202 	mvn.w	r2, #2
 8045294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045296:	687b      	ldr	r3, [r7, #4]
 8045298:	2201      	movs	r2, #1
 804529a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804529c:	687b      	ldr	r3, [r7, #4]
 804529e:	681b      	ldr	r3, [r3, #0]
 80452a0:	699b      	ldr	r3, [r3, #24]
 80452a2:	f003 0303 	and.w	r3, r3, #3
 80452a6:	2b00      	cmp	r3, #0
 80452a8:	d003      	beq.n	80452b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80452aa:	6878      	ldr	r0, [r7, #4]
 80452ac:	f000 f9b5 	bl	804561a <HAL_TIM_IC_CaptureCallback>
 80452b0:	e005      	b.n	80452be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80452b2:	6878      	ldr	r0, [r7, #4]
 80452b4:	f000 f9a7 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80452b8:	6878      	ldr	r0, [r7, #4]
 80452ba:	f000 f9b8 	bl	804562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80452be:	687b      	ldr	r3, [r7, #4]
 80452c0:	2200      	movs	r2, #0
 80452c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80452c4:	687b      	ldr	r3, [r7, #4]
 80452c6:	681b      	ldr	r3, [r3, #0]
 80452c8:	691b      	ldr	r3, [r3, #16]
 80452ca:	f003 0304 	and.w	r3, r3, #4
 80452ce:	2b04      	cmp	r3, #4
 80452d0:	d122      	bne.n	8045318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80452d2:	687b      	ldr	r3, [r7, #4]
 80452d4:	681b      	ldr	r3, [r3, #0]
 80452d6:	68db      	ldr	r3, [r3, #12]
 80452d8:	f003 0304 	and.w	r3, r3, #4
 80452dc:	2b04      	cmp	r3, #4
 80452de:	d11b      	bne.n	8045318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80452e0:	687b      	ldr	r3, [r7, #4]
 80452e2:	681b      	ldr	r3, [r3, #0]
 80452e4:	f06f 0204 	mvn.w	r2, #4
 80452e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80452ea:	687b      	ldr	r3, [r7, #4]
 80452ec:	2202      	movs	r2, #2
 80452ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80452f0:	687b      	ldr	r3, [r7, #4]
 80452f2:	681b      	ldr	r3, [r3, #0]
 80452f4:	699b      	ldr	r3, [r3, #24]
 80452f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80452fa:	2b00      	cmp	r3, #0
 80452fc:	d003      	beq.n	8045306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80452fe:	6878      	ldr	r0, [r7, #4]
 8045300:	f000 f98b 	bl	804561a <HAL_TIM_IC_CaptureCallback>
 8045304:	e005      	b.n	8045312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045306:	6878      	ldr	r0, [r7, #4]
 8045308:	f000 f97d 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804530c:	6878      	ldr	r0, [r7, #4]
 804530e:	f000 f98e 	bl	804562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045312:	687b      	ldr	r3, [r7, #4]
 8045314:	2200      	movs	r2, #0
 8045316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8045318:	687b      	ldr	r3, [r7, #4]
 804531a:	681b      	ldr	r3, [r3, #0]
 804531c:	691b      	ldr	r3, [r3, #16]
 804531e:	f003 0308 	and.w	r3, r3, #8
 8045322:	2b08      	cmp	r3, #8
 8045324:	d122      	bne.n	804536c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8045326:	687b      	ldr	r3, [r7, #4]
 8045328:	681b      	ldr	r3, [r3, #0]
 804532a:	68db      	ldr	r3, [r3, #12]
 804532c:	f003 0308 	and.w	r3, r3, #8
 8045330:	2b08      	cmp	r3, #8
 8045332:	d11b      	bne.n	804536c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8045334:	687b      	ldr	r3, [r7, #4]
 8045336:	681b      	ldr	r3, [r3, #0]
 8045338:	f06f 0208 	mvn.w	r2, #8
 804533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804533e:	687b      	ldr	r3, [r7, #4]
 8045340:	2204      	movs	r2, #4
 8045342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045344:	687b      	ldr	r3, [r7, #4]
 8045346:	681b      	ldr	r3, [r3, #0]
 8045348:	69db      	ldr	r3, [r3, #28]
 804534a:	f003 0303 	and.w	r3, r3, #3
 804534e:	2b00      	cmp	r3, #0
 8045350:	d003      	beq.n	804535a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045352:	6878      	ldr	r0, [r7, #4]
 8045354:	f000 f961 	bl	804561a <HAL_TIM_IC_CaptureCallback>
 8045358:	e005      	b.n	8045366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804535a:	6878      	ldr	r0, [r7, #4]
 804535c:	f000 f953 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045360:	6878      	ldr	r0, [r7, #4]
 8045362:	f000 f964 	bl	804562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045366:	687b      	ldr	r3, [r7, #4]
 8045368:	2200      	movs	r2, #0
 804536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 804536c:	687b      	ldr	r3, [r7, #4]
 804536e:	681b      	ldr	r3, [r3, #0]
 8045370:	691b      	ldr	r3, [r3, #16]
 8045372:	f003 0310 	and.w	r3, r3, #16
 8045376:	2b10      	cmp	r3, #16
 8045378:	d122      	bne.n	80453c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804537a:	687b      	ldr	r3, [r7, #4]
 804537c:	681b      	ldr	r3, [r3, #0]
 804537e:	68db      	ldr	r3, [r3, #12]
 8045380:	f003 0310 	and.w	r3, r3, #16
 8045384:	2b10      	cmp	r3, #16
 8045386:	d11b      	bne.n	80453c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8045388:	687b      	ldr	r3, [r7, #4]
 804538a:	681b      	ldr	r3, [r3, #0]
 804538c:	f06f 0210 	mvn.w	r2, #16
 8045390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8045392:	687b      	ldr	r3, [r7, #4]
 8045394:	2208      	movs	r2, #8
 8045396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045398:	687b      	ldr	r3, [r7, #4]
 804539a:	681b      	ldr	r3, [r3, #0]
 804539c:	69db      	ldr	r3, [r3, #28]
 804539e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80453a2:	2b00      	cmp	r3, #0
 80453a4:	d003      	beq.n	80453ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80453a6:	6878      	ldr	r0, [r7, #4]
 80453a8:	f000 f937 	bl	804561a <HAL_TIM_IC_CaptureCallback>
 80453ac:	e005      	b.n	80453ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80453ae:	6878      	ldr	r0, [r7, #4]
 80453b0:	f000 f929 	bl	8045606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80453b4:	6878      	ldr	r0, [r7, #4]
 80453b6:	f000 f93a 	bl	804562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80453ba:	687b      	ldr	r3, [r7, #4]
 80453bc:	2200      	movs	r2, #0
 80453be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80453c0:	687b      	ldr	r3, [r7, #4]
 80453c2:	681b      	ldr	r3, [r3, #0]
 80453c4:	691b      	ldr	r3, [r3, #16]
 80453c6:	f003 0301 	and.w	r3, r3, #1
 80453ca:	2b01      	cmp	r3, #1
 80453cc:	d10e      	bne.n	80453ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80453ce:	687b      	ldr	r3, [r7, #4]
 80453d0:	681b      	ldr	r3, [r3, #0]
 80453d2:	68db      	ldr	r3, [r3, #12]
 80453d4:	f003 0301 	and.w	r3, r3, #1
 80453d8:	2b01      	cmp	r3, #1
 80453da:	d107      	bne.n	80453ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80453dc:	687b      	ldr	r3, [r7, #4]
 80453de:	681b      	ldr	r3, [r3, #0]
 80453e0:	f06f 0201 	mvn.w	r2, #1
 80453e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80453e6:	6878      	ldr	r0, [r7, #4]
 80453e8:	f7fb fc38 	bl	8040c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80453ec:	687b      	ldr	r3, [r7, #4]
 80453ee:	681b      	ldr	r3, [r3, #0]
 80453f0:	691b      	ldr	r3, [r3, #16]
 80453f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80453f6:	2b80      	cmp	r3, #128	; 0x80
 80453f8:	d10e      	bne.n	8045418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80453fa:	687b      	ldr	r3, [r7, #4]
 80453fc:	681b      	ldr	r3, [r3, #0]
 80453fe:	68db      	ldr	r3, [r3, #12]
 8045400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045404:	2b80      	cmp	r3, #128	; 0x80
 8045406:	d107      	bne.n	8045418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8045408:	687b      	ldr	r3, [r7, #4]
 804540a:	681b      	ldr	r3, [r3, #0]
 804540c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8045410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8045412:	6878      	ldr	r0, [r7, #4]
 8045414:	f000 fae0 	bl	80459d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8045418:	687b      	ldr	r3, [r7, #4]
 804541a:	681b      	ldr	r3, [r3, #0]
 804541c:	691b      	ldr	r3, [r3, #16]
 804541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045422:	2b40      	cmp	r3, #64	; 0x40
 8045424:	d10e      	bne.n	8045444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8045426:	687b      	ldr	r3, [r7, #4]
 8045428:	681b      	ldr	r3, [r3, #0]
 804542a:	68db      	ldr	r3, [r3, #12]
 804542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045430:	2b40      	cmp	r3, #64	; 0x40
 8045432:	d107      	bne.n	8045444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8045434:	687b      	ldr	r3, [r7, #4]
 8045436:	681b      	ldr	r3, [r3, #0]
 8045438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 804543e:	6878      	ldr	r0, [r7, #4]
 8045440:	f000 f8ff 	bl	8045642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8045444:	687b      	ldr	r3, [r7, #4]
 8045446:	681b      	ldr	r3, [r3, #0]
 8045448:	691b      	ldr	r3, [r3, #16]
 804544a:	f003 0320 	and.w	r3, r3, #32
 804544e:	2b20      	cmp	r3, #32
 8045450:	d10e      	bne.n	8045470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8045452:	687b      	ldr	r3, [r7, #4]
 8045454:	681b      	ldr	r3, [r3, #0]
 8045456:	68db      	ldr	r3, [r3, #12]
 8045458:	f003 0320 	and.w	r3, r3, #32
 804545c:	2b20      	cmp	r3, #32
 804545e:	d107      	bne.n	8045470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045460:	687b      	ldr	r3, [r7, #4]
 8045462:	681b      	ldr	r3, [r3, #0]
 8045464:	f06f 0220 	mvn.w	r2, #32
 8045468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 804546a:	6878      	ldr	r0, [r7, #4]
 804546c:	f000 faaa 	bl	80459c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8045470:	bf00      	nop
 8045472:	3708      	adds	r7, #8
 8045474:	46bd      	mov	sp, r7
 8045476:	bd80      	pop	{r7, pc}

08045478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8045478:	b580      	push	{r7, lr}
 804547a:	b084      	sub	sp, #16
 804547c:	af00      	add	r7, sp, #0
 804547e:	6078      	str	r0, [r7, #4]
 8045480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8045482:	2300      	movs	r3, #0
 8045484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8045486:	687b      	ldr	r3, [r7, #4]
 8045488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804548c:	2b01      	cmp	r3, #1
 804548e:	d101      	bne.n	8045494 <HAL_TIM_ConfigClockSource+0x1c>
 8045490:	2302      	movs	r3, #2
 8045492:	e0b4      	b.n	80455fe <HAL_TIM_ConfigClockSource+0x186>
 8045494:	687b      	ldr	r3, [r7, #4]
 8045496:	2201      	movs	r2, #1
 8045498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 804549c:	687b      	ldr	r3, [r7, #4]
 804549e:	2202      	movs	r2, #2
 80454a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80454a4:	687b      	ldr	r3, [r7, #4]
 80454a6:	681b      	ldr	r3, [r3, #0]
 80454a8:	689b      	ldr	r3, [r3, #8]
 80454aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80454ac:	68bb      	ldr	r3, [r7, #8]
 80454ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80454b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80454b4:	68bb      	ldr	r3, [r7, #8]
 80454b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80454ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80454bc:	687b      	ldr	r3, [r7, #4]
 80454be:	681b      	ldr	r3, [r3, #0]
 80454c0:	68ba      	ldr	r2, [r7, #8]
 80454c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80454c4:	683b      	ldr	r3, [r7, #0]
 80454c6:	681b      	ldr	r3, [r3, #0]
 80454c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80454cc:	d03e      	beq.n	804554c <HAL_TIM_ConfigClockSource+0xd4>
 80454ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80454d2:	f200 8087 	bhi.w	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 80454d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80454da:	f000 8086 	beq.w	80455ea <HAL_TIM_ConfigClockSource+0x172>
 80454de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80454e2:	d87f      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 80454e4:	2b70      	cmp	r3, #112	; 0x70
 80454e6:	d01a      	beq.n	804551e <HAL_TIM_ConfigClockSource+0xa6>
 80454e8:	2b70      	cmp	r3, #112	; 0x70
 80454ea:	d87b      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 80454ec:	2b60      	cmp	r3, #96	; 0x60
 80454ee:	d050      	beq.n	8045592 <HAL_TIM_ConfigClockSource+0x11a>
 80454f0:	2b60      	cmp	r3, #96	; 0x60
 80454f2:	d877      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 80454f4:	2b50      	cmp	r3, #80	; 0x50
 80454f6:	d03c      	beq.n	8045572 <HAL_TIM_ConfigClockSource+0xfa>
 80454f8:	2b50      	cmp	r3, #80	; 0x50
 80454fa:	d873      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 80454fc:	2b40      	cmp	r3, #64	; 0x40
 80454fe:	d058      	beq.n	80455b2 <HAL_TIM_ConfigClockSource+0x13a>
 8045500:	2b40      	cmp	r3, #64	; 0x40
 8045502:	d86f      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 8045504:	2b30      	cmp	r3, #48	; 0x30
 8045506:	d064      	beq.n	80455d2 <HAL_TIM_ConfigClockSource+0x15a>
 8045508:	2b30      	cmp	r3, #48	; 0x30
 804550a:	d86b      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 804550c:	2b20      	cmp	r3, #32
 804550e:	d060      	beq.n	80455d2 <HAL_TIM_ConfigClockSource+0x15a>
 8045510:	2b20      	cmp	r3, #32
 8045512:	d867      	bhi.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
 8045514:	2b00      	cmp	r3, #0
 8045516:	d05c      	beq.n	80455d2 <HAL_TIM_ConfigClockSource+0x15a>
 8045518:	2b10      	cmp	r3, #16
 804551a:	d05a      	beq.n	80455d2 <HAL_TIM_ConfigClockSource+0x15a>
 804551c:	e062      	b.n	80455e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804551e:	687b      	ldr	r3, [r7, #4]
 8045520:	6818      	ldr	r0, [r3, #0]
 8045522:	683b      	ldr	r3, [r7, #0]
 8045524:	6899      	ldr	r1, [r3, #8]
 8045526:	683b      	ldr	r3, [r7, #0]
 8045528:	685a      	ldr	r2, [r3, #4]
 804552a:	683b      	ldr	r3, [r7, #0]
 804552c:	68db      	ldr	r3, [r3, #12]
 804552e:	f000 f9ad 	bl	804588c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8045532:	687b      	ldr	r3, [r7, #4]
 8045534:	681b      	ldr	r3, [r3, #0]
 8045536:	689b      	ldr	r3, [r3, #8]
 8045538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 804553a:	68bb      	ldr	r3, [r7, #8]
 804553c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8045540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8045542:	687b      	ldr	r3, [r7, #4]
 8045544:	681b      	ldr	r3, [r3, #0]
 8045546:	68ba      	ldr	r2, [r7, #8]
 8045548:	609a      	str	r2, [r3, #8]
      break;
 804554a:	e04f      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804554c:	687b      	ldr	r3, [r7, #4]
 804554e:	6818      	ldr	r0, [r3, #0]
 8045550:	683b      	ldr	r3, [r7, #0]
 8045552:	6899      	ldr	r1, [r3, #8]
 8045554:	683b      	ldr	r3, [r7, #0]
 8045556:	685a      	ldr	r2, [r3, #4]
 8045558:	683b      	ldr	r3, [r7, #0]
 804555a:	68db      	ldr	r3, [r3, #12]
 804555c:	f000 f996 	bl	804588c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8045560:	687b      	ldr	r3, [r7, #4]
 8045562:	681b      	ldr	r3, [r3, #0]
 8045564:	689a      	ldr	r2, [r3, #8]
 8045566:	687b      	ldr	r3, [r7, #4]
 8045568:	681b      	ldr	r3, [r3, #0]
 804556a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 804556e:	609a      	str	r2, [r3, #8]
      break;
 8045570:	e03c      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8045572:	687b      	ldr	r3, [r7, #4]
 8045574:	6818      	ldr	r0, [r3, #0]
 8045576:	683b      	ldr	r3, [r7, #0]
 8045578:	6859      	ldr	r1, [r3, #4]
 804557a:	683b      	ldr	r3, [r7, #0]
 804557c:	68db      	ldr	r3, [r3, #12]
 804557e:	461a      	mov	r2, r3
 8045580:	f000 f90a 	bl	8045798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8045584:	687b      	ldr	r3, [r7, #4]
 8045586:	681b      	ldr	r3, [r3, #0]
 8045588:	2150      	movs	r1, #80	; 0x50
 804558a:	4618      	mov	r0, r3
 804558c:	f000 f963 	bl	8045856 <TIM_ITRx_SetConfig>
      break;
 8045590:	e02c      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8045592:	687b      	ldr	r3, [r7, #4]
 8045594:	6818      	ldr	r0, [r3, #0]
 8045596:	683b      	ldr	r3, [r7, #0]
 8045598:	6859      	ldr	r1, [r3, #4]
 804559a:	683b      	ldr	r3, [r7, #0]
 804559c:	68db      	ldr	r3, [r3, #12]
 804559e:	461a      	mov	r2, r3
 80455a0:	f000 f929 	bl	80457f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80455a4:	687b      	ldr	r3, [r7, #4]
 80455a6:	681b      	ldr	r3, [r3, #0]
 80455a8:	2160      	movs	r1, #96	; 0x60
 80455aa:	4618      	mov	r0, r3
 80455ac:	f000 f953 	bl	8045856 <TIM_ITRx_SetConfig>
      break;
 80455b0:	e01c      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80455b2:	687b      	ldr	r3, [r7, #4]
 80455b4:	6818      	ldr	r0, [r3, #0]
 80455b6:	683b      	ldr	r3, [r7, #0]
 80455b8:	6859      	ldr	r1, [r3, #4]
 80455ba:	683b      	ldr	r3, [r7, #0]
 80455bc:	68db      	ldr	r3, [r3, #12]
 80455be:	461a      	mov	r2, r3
 80455c0:	f000 f8ea 	bl	8045798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80455c4:	687b      	ldr	r3, [r7, #4]
 80455c6:	681b      	ldr	r3, [r3, #0]
 80455c8:	2140      	movs	r1, #64	; 0x40
 80455ca:	4618      	mov	r0, r3
 80455cc:	f000 f943 	bl	8045856 <TIM_ITRx_SetConfig>
      break;
 80455d0:	e00c      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80455d2:	687b      	ldr	r3, [r7, #4]
 80455d4:	681a      	ldr	r2, [r3, #0]
 80455d6:	683b      	ldr	r3, [r7, #0]
 80455d8:	681b      	ldr	r3, [r3, #0]
 80455da:	4619      	mov	r1, r3
 80455dc:	4610      	mov	r0, r2
 80455de:	f000 f93a 	bl	8045856 <TIM_ITRx_SetConfig>
      break;
 80455e2:	e003      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80455e4:	2301      	movs	r3, #1
 80455e6:	73fb      	strb	r3, [r7, #15]
      break;
 80455e8:	e000      	b.n	80455ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80455ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80455ec:	687b      	ldr	r3, [r7, #4]
 80455ee:	2201      	movs	r2, #1
 80455f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80455f4:	687b      	ldr	r3, [r7, #4]
 80455f6:	2200      	movs	r2, #0
 80455f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80455fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80455fe:	4618      	mov	r0, r3
 8045600:	3710      	adds	r7, #16
 8045602:	46bd      	mov	sp, r7
 8045604:	bd80      	pop	{r7, pc}

08045606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8045606:	b480      	push	{r7}
 8045608:	b083      	sub	sp, #12
 804560a:	af00      	add	r7, sp, #0
 804560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804560e:	bf00      	nop
 8045610:	370c      	adds	r7, #12
 8045612:	46bd      	mov	sp, r7
 8045614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045618:	4770      	bx	lr

0804561a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804561a:	b480      	push	{r7}
 804561c:	b083      	sub	sp, #12
 804561e:	af00      	add	r7, sp, #0
 8045620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8045622:	bf00      	nop
 8045624:	370c      	adds	r7, #12
 8045626:	46bd      	mov	sp, r7
 8045628:	f85d 7b04 	ldr.w	r7, [sp], #4
 804562c:	4770      	bx	lr

0804562e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804562e:	b480      	push	{r7}
 8045630:	b083      	sub	sp, #12
 8045632:	af00      	add	r7, sp, #0
 8045634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8045636:	bf00      	nop
 8045638:	370c      	adds	r7, #12
 804563a:	46bd      	mov	sp, r7
 804563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045640:	4770      	bx	lr

08045642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8045642:	b480      	push	{r7}
 8045644:	b083      	sub	sp, #12
 8045646:	af00      	add	r7, sp, #0
 8045648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804564a:	bf00      	nop
 804564c:	370c      	adds	r7, #12
 804564e:	46bd      	mov	sp, r7
 8045650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045654:	4770      	bx	lr
	...

08045658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8045658:	b480      	push	{r7}
 804565a:	b085      	sub	sp, #20
 804565c:	af00      	add	r7, sp, #0
 804565e:	6078      	str	r0, [r7, #4]
 8045660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8045662:	687b      	ldr	r3, [r7, #4]
 8045664:	681b      	ldr	r3, [r3, #0]
 8045666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045668:	687b      	ldr	r3, [r7, #4]
 804566a:	4a40      	ldr	r2, [pc, #256]	; (804576c <TIM_Base_SetConfig+0x114>)
 804566c:	4293      	cmp	r3, r2
 804566e:	d013      	beq.n	8045698 <TIM_Base_SetConfig+0x40>
 8045670:	687b      	ldr	r3, [r7, #4]
 8045672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045676:	d00f      	beq.n	8045698 <TIM_Base_SetConfig+0x40>
 8045678:	687b      	ldr	r3, [r7, #4]
 804567a:	4a3d      	ldr	r2, [pc, #244]	; (8045770 <TIM_Base_SetConfig+0x118>)
 804567c:	4293      	cmp	r3, r2
 804567e:	d00b      	beq.n	8045698 <TIM_Base_SetConfig+0x40>
 8045680:	687b      	ldr	r3, [r7, #4]
 8045682:	4a3c      	ldr	r2, [pc, #240]	; (8045774 <TIM_Base_SetConfig+0x11c>)
 8045684:	4293      	cmp	r3, r2
 8045686:	d007      	beq.n	8045698 <TIM_Base_SetConfig+0x40>
 8045688:	687b      	ldr	r3, [r7, #4]
 804568a:	4a3b      	ldr	r2, [pc, #236]	; (8045778 <TIM_Base_SetConfig+0x120>)
 804568c:	4293      	cmp	r3, r2
 804568e:	d003      	beq.n	8045698 <TIM_Base_SetConfig+0x40>
 8045690:	687b      	ldr	r3, [r7, #4]
 8045692:	4a3a      	ldr	r2, [pc, #232]	; (804577c <TIM_Base_SetConfig+0x124>)
 8045694:	4293      	cmp	r3, r2
 8045696:	d108      	bne.n	80456aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8045698:	68fb      	ldr	r3, [r7, #12]
 804569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80456a0:	683b      	ldr	r3, [r7, #0]
 80456a2:	685b      	ldr	r3, [r3, #4]
 80456a4:	68fa      	ldr	r2, [r7, #12]
 80456a6:	4313      	orrs	r3, r2
 80456a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80456aa:	687b      	ldr	r3, [r7, #4]
 80456ac:	4a2f      	ldr	r2, [pc, #188]	; (804576c <TIM_Base_SetConfig+0x114>)
 80456ae:	4293      	cmp	r3, r2
 80456b0:	d02b      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456b2:	687b      	ldr	r3, [r7, #4]
 80456b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80456b8:	d027      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456ba:	687b      	ldr	r3, [r7, #4]
 80456bc:	4a2c      	ldr	r2, [pc, #176]	; (8045770 <TIM_Base_SetConfig+0x118>)
 80456be:	4293      	cmp	r3, r2
 80456c0:	d023      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456c2:	687b      	ldr	r3, [r7, #4]
 80456c4:	4a2b      	ldr	r2, [pc, #172]	; (8045774 <TIM_Base_SetConfig+0x11c>)
 80456c6:	4293      	cmp	r3, r2
 80456c8:	d01f      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456ca:	687b      	ldr	r3, [r7, #4]
 80456cc:	4a2a      	ldr	r2, [pc, #168]	; (8045778 <TIM_Base_SetConfig+0x120>)
 80456ce:	4293      	cmp	r3, r2
 80456d0:	d01b      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456d2:	687b      	ldr	r3, [r7, #4]
 80456d4:	4a29      	ldr	r2, [pc, #164]	; (804577c <TIM_Base_SetConfig+0x124>)
 80456d6:	4293      	cmp	r3, r2
 80456d8:	d017      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456da:	687b      	ldr	r3, [r7, #4]
 80456dc:	4a28      	ldr	r2, [pc, #160]	; (8045780 <TIM_Base_SetConfig+0x128>)
 80456de:	4293      	cmp	r3, r2
 80456e0:	d013      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456e2:	687b      	ldr	r3, [r7, #4]
 80456e4:	4a27      	ldr	r2, [pc, #156]	; (8045784 <TIM_Base_SetConfig+0x12c>)
 80456e6:	4293      	cmp	r3, r2
 80456e8:	d00f      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456ea:	687b      	ldr	r3, [r7, #4]
 80456ec:	4a26      	ldr	r2, [pc, #152]	; (8045788 <TIM_Base_SetConfig+0x130>)
 80456ee:	4293      	cmp	r3, r2
 80456f0:	d00b      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456f2:	687b      	ldr	r3, [r7, #4]
 80456f4:	4a25      	ldr	r2, [pc, #148]	; (804578c <TIM_Base_SetConfig+0x134>)
 80456f6:	4293      	cmp	r3, r2
 80456f8:	d007      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 80456fa:	687b      	ldr	r3, [r7, #4]
 80456fc:	4a24      	ldr	r2, [pc, #144]	; (8045790 <TIM_Base_SetConfig+0x138>)
 80456fe:	4293      	cmp	r3, r2
 8045700:	d003      	beq.n	804570a <TIM_Base_SetConfig+0xb2>
 8045702:	687b      	ldr	r3, [r7, #4]
 8045704:	4a23      	ldr	r2, [pc, #140]	; (8045794 <TIM_Base_SetConfig+0x13c>)
 8045706:	4293      	cmp	r3, r2
 8045708:	d108      	bne.n	804571c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804570a:	68fb      	ldr	r3, [r7, #12]
 804570c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8045712:	683b      	ldr	r3, [r7, #0]
 8045714:	68db      	ldr	r3, [r3, #12]
 8045716:	68fa      	ldr	r2, [r7, #12]
 8045718:	4313      	orrs	r3, r2
 804571a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804571c:	68fb      	ldr	r3, [r7, #12]
 804571e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8045722:	683b      	ldr	r3, [r7, #0]
 8045724:	695b      	ldr	r3, [r3, #20]
 8045726:	4313      	orrs	r3, r2
 8045728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804572a:	687b      	ldr	r3, [r7, #4]
 804572c:	68fa      	ldr	r2, [r7, #12]
 804572e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8045730:	683b      	ldr	r3, [r7, #0]
 8045732:	689a      	ldr	r2, [r3, #8]
 8045734:	687b      	ldr	r3, [r7, #4]
 8045736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8045738:	683b      	ldr	r3, [r7, #0]
 804573a:	681a      	ldr	r2, [r3, #0]
 804573c:	687b      	ldr	r3, [r7, #4]
 804573e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045740:	687b      	ldr	r3, [r7, #4]
 8045742:	4a0a      	ldr	r2, [pc, #40]	; (804576c <TIM_Base_SetConfig+0x114>)
 8045744:	4293      	cmp	r3, r2
 8045746:	d003      	beq.n	8045750 <TIM_Base_SetConfig+0xf8>
 8045748:	687b      	ldr	r3, [r7, #4]
 804574a:	4a0c      	ldr	r2, [pc, #48]	; (804577c <TIM_Base_SetConfig+0x124>)
 804574c:	4293      	cmp	r3, r2
 804574e:	d103      	bne.n	8045758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045750:	683b      	ldr	r3, [r7, #0]
 8045752:	691a      	ldr	r2, [r3, #16]
 8045754:	687b      	ldr	r3, [r7, #4]
 8045756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045758:	687b      	ldr	r3, [r7, #4]
 804575a:	2201      	movs	r2, #1
 804575c:	615a      	str	r2, [r3, #20]
}
 804575e:	bf00      	nop
 8045760:	3714      	adds	r7, #20
 8045762:	46bd      	mov	sp, r7
 8045764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045768:	4770      	bx	lr
 804576a:	bf00      	nop
 804576c:	40010000 	.word	0x40010000
 8045770:	40000400 	.word	0x40000400
 8045774:	40000800 	.word	0x40000800
 8045778:	40000c00 	.word	0x40000c00
 804577c:	40010400 	.word	0x40010400
 8045780:	40014000 	.word	0x40014000
 8045784:	40014400 	.word	0x40014400
 8045788:	40014800 	.word	0x40014800
 804578c:	40001800 	.word	0x40001800
 8045790:	40001c00 	.word	0x40001c00
 8045794:	40002000 	.word	0x40002000

08045798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8045798:	b480      	push	{r7}
 804579a:	b087      	sub	sp, #28
 804579c:	af00      	add	r7, sp, #0
 804579e:	60f8      	str	r0, [r7, #12]
 80457a0:	60b9      	str	r1, [r7, #8]
 80457a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80457a4:	68fb      	ldr	r3, [r7, #12]
 80457a6:	6a1b      	ldr	r3, [r3, #32]
 80457a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80457aa:	68fb      	ldr	r3, [r7, #12]
 80457ac:	6a1b      	ldr	r3, [r3, #32]
 80457ae:	f023 0201 	bic.w	r2, r3, #1
 80457b2:	68fb      	ldr	r3, [r7, #12]
 80457b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80457b6:	68fb      	ldr	r3, [r7, #12]
 80457b8:	699b      	ldr	r3, [r3, #24]
 80457ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80457bc:	693b      	ldr	r3, [r7, #16]
 80457be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80457c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80457c4:	687b      	ldr	r3, [r7, #4]
 80457c6:	011b      	lsls	r3, r3, #4
 80457c8:	693a      	ldr	r2, [r7, #16]
 80457ca:	4313      	orrs	r3, r2
 80457cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80457ce:	697b      	ldr	r3, [r7, #20]
 80457d0:	f023 030a 	bic.w	r3, r3, #10
 80457d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80457d6:	697a      	ldr	r2, [r7, #20]
 80457d8:	68bb      	ldr	r3, [r7, #8]
 80457da:	4313      	orrs	r3, r2
 80457dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80457de:	68fb      	ldr	r3, [r7, #12]
 80457e0:	693a      	ldr	r2, [r7, #16]
 80457e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80457e4:	68fb      	ldr	r3, [r7, #12]
 80457e6:	697a      	ldr	r2, [r7, #20]
 80457e8:	621a      	str	r2, [r3, #32]
}
 80457ea:	bf00      	nop
 80457ec:	371c      	adds	r7, #28
 80457ee:	46bd      	mov	sp, r7
 80457f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80457f4:	4770      	bx	lr

080457f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80457f6:	b480      	push	{r7}
 80457f8:	b087      	sub	sp, #28
 80457fa:	af00      	add	r7, sp, #0
 80457fc:	60f8      	str	r0, [r7, #12]
 80457fe:	60b9      	str	r1, [r7, #8]
 8045800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8045802:	68fb      	ldr	r3, [r7, #12]
 8045804:	6a1b      	ldr	r3, [r3, #32]
 8045806:	f023 0210 	bic.w	r2, r3, #16
 804580a:	68fb      	ldr	r3, [r7, #12]
 804580c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804580e:	68fb      	ldr	r3, [r7, #12]
 8045810:	699b      	ldr	r3, [r3, #24]
 8045812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8045814:	68fb      	ldr	r3, [r7, #12]
 8045816:	6a1b      	ldr	r3, [r3, #32]
 8045818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 804581a:	697b      	ldr	r3, [r7, #20]
 804581c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8045820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8045822:	687b      	ldr	r3, [r7, #4]
 8045824:	031b      	lsls	r3, r3, #12
 8045826:	697a      	ldr	r2, [r7, #20]
 8045828:	4313      	orrs	r3, r2
 804582a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 804582c:	693b      	ldr	r3, [r7, #16]
 804582e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8045832:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8045834:	68bb      	ldr	r3, [r7, #8]
 8045836:	011b      	lsls	r3, r3, #4
 8045838:	693a      	ldr	r2, [r7, #16]
 804583a:	4313      	orrs	r3, r2
 804583c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 804583e:	68fb      	ldr	r3, [r7, #12]
 8045840:	697a      	ldr	r2, [r7, #20]
 8045842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8045844:	68fb      	ldr	r3, [r7, #12]
 8045846:	693a      	ldr	r2, [r7, #16]
 8045848:	621a      	str	r2, [r3, #32]
}
 804584a:	bf00      	nop
 804584c:	371c      	adds	r7, #28
 804584e:	46bd      	mov	sp, r7
 8045850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045854:	4770      	bx	lr

08045856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8045856:	b480      	push	{r7}
 8045858:	b085      	sub	sp, #20
 804585a:	af00      	add	r7, sp, #0
 804585c:	6078      	str	r0, [r7, #4]
 804585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8045860:	687b      	ldr	r3, [r7, #4]
 8045862:	689b      	ldr	r3, [r3, #8]
 8045864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8045866:	68fb      	ldr	r3, [r7, #12]
 8045868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804586c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 804586e:	683a      	ldr	r2, [r7, #0]
 8045870:	68fb      	ldr	r3, [r7, #12]
 8045872:	4313      	orrs	r3, r2
 8045874:	f043 0307 	orr.w	r3, r3, #7
 8045878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804587a:	687b      	ldr	r3, [r7, #4]
 804587c:	68fa      	ldr	r2, [r7, #12]
 804587e:	609a      	str	r2, [r3, #8]
}
 8045880:	bf00      	nop
 8045882:	3714      	adds	r7, #20
 8045884:	46bd      	mov	sp, r7
 8045886:	f85d 7b04 	ldr.w	r7, [sp], #4
 804588a:	4770      	bx	lr

0804588c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 804588c:	b480      	push	{r7}
 804588e:	b087      	sub	sp, #28
 8045890:	af00      	add	r7, sp, #0
 8045892:	60f8      	str	r0, [r7, #12]
 8045894:	60b9      	str	r1, [r7, #8]
 8045896:	607a      	str	r2, [r7, #4]
 8045898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804589a:	68fb      	ldr	r3, [r7, #12]
 804589c:	689b      	ldr	r3, [r3, #8]
 804589e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80458a0:	697b      	ldr	r3, [r7, #20]
 80458a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80458a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80458a8:	683b      	ldr	r3, [r7, #0]
 80458aa:	021a      	lsls	r2, r3, #8
 80458ac:	687b      	ldr	r3, [r7, #4]
 80458ae:	431a      	orrs	r2, r3
 80458b0:	68bb      	ldr	r3, [r7, #8]
 80458b2:	4313      	orrs	r3, r2
 80458b4:	697a      	ldr	r2, [r7, #20]
 80458b6:	4313      	orrs	r3, r2
 80458b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80458ba:	68fb      	ldr	r3, [r7, #12]
 80458bc:	697a      	ldr	r2, [r7, #20]
 80458be:	609a      	str	r2, [r3, #8]
}
 80458c0:	bf00      	nop
 80458c2:	371c      	adds	r7, #28
 80458c4:	46bd      	mov	sp, r7
 80458c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458ca:	4770      	bx	lr

080458cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80458cc:	b480      	push	{r7}
 80458ce:	b085      	sub	sp, #20
 80458d0:	af00      	add	r7, sp, #0
 80458d2:	6078      	str	r0, [r7, #4]
 80458d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80458d6:	687b      	ldr	r3, [r7, #4]
 80458d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80458dc:	2b01      	cmp	r3, #1
 80458de:	d101      	bne.n	80458e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80458e0:	2302      	movs	r3, #2
 80458e2:	e05a      	b.n	804599a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80458e4:	687b      	ldr	r3, [r7, #4]
 80458e6:	2201      	movs	r2, #1
 80458e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80458ec:	687b      	ldr	r3, [r7, #4]
 80458ee:	2202      	movs	r2, #2
 80458f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80458f4:	687b      	ldr	r3, [r7, #4]
 80458f6:	681b      	ldr	r3, [r3, #0]
 80458f8:	685b      	ldr	r3, [r3, #4]
 80458fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80458fc:	687b      	ldr	r3, [r7, #4]
 80458fe:	681b      	ldr	r3, [r3, #0]
 8045900:	689b      	ldr	r3, [r3, #8]
 8045902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8045904:	68fb      	ldr	r3, [r7, #12]
 8045906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804590a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804590c:	683b      	ldr	r3, [r7, #0]
 804590e:	681b      	ldr	r3, [r3, #0]
 8045910:	68fa      	ldr	r2, [r7, #12]
 8045912:	4313      	orrs	r3, r2
 8045914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8045916:	687b      	ldr	r3, [r7, #4]
 8045918:	681b      	ldr	r3, [r3, #0]
 804591a:	68fa      	ldr	r2, [r7, #12]
 804591c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804591e:	687b      	ldr	r3, [r7, #4]
 8045920:	681b      	ldr	r3, [r3, #0]
 8045922:	4a21      	ldr	r2, [pc, #132]	; (80459a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8045924:	4293      	cmp	r3, r2
 8045926:	d022      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8045928:	687b      	ldr	r3, [r7, #4]
 804592a:	681b      	ldr	r3, [r3, #0]
 804592c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045930:	d01d      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8045932:	687b      	ldr	r3, [r7, #4]
 8045934:	681b      	ldr	r3, [r3, #0]
 8045936:	4a1d      	ldr	r2, [pc, #116]	; (80459ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8045938:	4293      	cmp	r3, r2
 804593a:	d018      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804593c:	687b      	ldr	r3, [r7, #4]
 804593e:	681b      	ldr	r3, [r3, #0]
 8045940:	4a1b      	ldr	r2, [pc, #108]	; (80459b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8045942:	4293      	cmp	r3, r2
 8045944:	d013      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8045946:	687b      	ldr	r3, [r7, #4]
 8045948:	681b      	ldr	r3, [r3, #0]
 804594a:	4a1a      	ldr	r2, [pc, #104]	; (80459b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 804594c:	4293      	cmp	r3, r2
 804594e:	d00e      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8045950:	687b      	ldr	r3, [r7, #4]
 8045952:	681b      	ldr	r3, [r3, #0]
 8045954:	4a18      	ldr	r2, [pc, #96]	; (80459b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8045956:	4293      	cmp	r3, r2
 8045958:	d009      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804595a:	687b      	ldr	r3, [r7, #4]
 804595c:	681b      	ldr	r3, [r3, #0]
 804595e:	4a17      	ldr	r2, [pc, #92]	; (80459bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8045960:	4293      	cmp	r3, r2
 8045962:	d004      	beq.n	804596e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8045964:	687b      	ldr	r3, [r7, #4]
 8045966:	681b      	ldr	r3, [r3, #0]
 8045968:	4a15      	ldr	r2, [pc, #84]	; (80459c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 804596a:	4293      	cmp	r3, r2
 804596c:	d10c      	bne.n	8045988 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804596e:	68bb      	ldr	r3, [r7, #8]
 8045970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8045974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045976:	683b      	ldr	r3, [r7, #0]
 8045978:	685b      	ldr	r3, [r3, #4]
 804597a:	68ba      	ldr	r2, [r7, #8]
 804597c:	4313      	orrs	r3, r2
 804597e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8045980:	687b      	ldr	r3, [r7, #4]
 8045982:	681b      	ldr	r3, [r3, #0]
 8045984:	68ba      	ldr	r2, [r7, #8]
 8045986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8045988:	687b      	ldr	r3, [r7, #4]
 804598a:	2201      	movs	r2, #1
 804598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8045990:	687b      	ldr	r3, [r7, #4]
 8045992:	2200      	movs	r2, #0
 8045994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8045998:	2300      	movs	r3, #0
}
 804599a:	4618      	mov	r0, r3
 804599c:	3714      	adds	r7, #20
 804599e:	46bd      	mov	sp, r7
 80459a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459a4:	4770      	bx	lr
 80459a6:	bf00      	nop
 80459a8:	40010000 	.word	0x40010000
 80459ac:	40000400 	.word	0x40000400
 80459b0:	40000800 	.word	0x40000800
 80459b4:	40000c00 	.word	0x40000c00
 80459b8:	40010400 	.word	0x40010400
 80459bc:	40014000 	.word	0x40014000
 80459c0:	40001800 	.word	0x40001800

080459c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80459c4:	b480      	push	{r7}
 80459c6:	b083      	sub	sp, #12
 80459c8:	af00      	add	r7, sp, #0
 80459ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80459cc:	bf00      	nop
 80459ce:	370c      	adds	r7, #12
 80459d0:	46bd      	mov	sp, r7
 80459d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459d6:	4770      	bx	lr

080459d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80459d8:	b480      	push	{r7}
 80459da:	b083      	sub	sp, #12
 80459dc:	af00      	add	r7, sp, #0
 80459de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80459e0:	bf00      	nop
 80459e2:	370c      	adds	r7, #12
 80459e4:	46bd      	mov	sp, r7
 80459e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459ea:	4770      	bx	lr

080459ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80459ec:	b580      	push	{r7, lr}
 80459ee:	b082      	sub	sp, #8
 80459f0:	af00      	add	r7, sp, #0
 80459f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80459f4:	687b      	ldr	r3, [r7, #4]
 80459f6:	2b00      	cmp	r3, #0
 80459f8:	d101      	bne.n	80459fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80459fa:	2301      	movs	r3, #1
 80459fc:	e03f      	b.n	8045a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80459fe:	687b      	ldr	r3, [r7, #4]
 8045a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045a04:	b2db      	uxtb	r3, r3
 8045a06:	2b00      	cmp	r3, #0
 8045a08:	d106      	bne.n	8045a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045a0a:	687b      	ldr	r3, [r7, #4]
 8045a0c:	2200      	movs	r2, #0
 8045a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8045a12:	6878      	ldr	r0, [r7, #4]
 8045a14:	f7fb fbb0 	bl	8041178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045a18:	687b      	ldr	r3, [r7, #4]
 8045a1a:	2224      	movs	r2, #36	; 0x24
 8045a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8045a20:	687b      	ldr	r3, [r7, #4]
 8045a22:	681b      	ldr	r3, [r3, #0]
 8045a24:	68da      	ldr	r2, [r3, #12]
 8045a26:	687b      	ldr	r3, [r7, #4]
 8045a28:	681b      	ldr	r3, [r3, #0]
 8045a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8045a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8045a30:	6878      	ldr	r0, [r7, #4]
 8045a32:	f000 f829 	bl	8045a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045a36:	687b      	ldr	r3, [r7, #4]
 8045a38:	681b      	ldr	r3, [r3, #0]
 8045a3a:	691a      	ldr	r2, [r3, #16]
 8045a3c:	687b      	ldr	r3, [r7, #4]
 8045a3e:	681b      	ldr	r3, [r3, #0]
 8045a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8045a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045a46:	687b      	ldr	r3, [r7, #4]
 8045a48:	681b      	ldr	r3, [r3, #0]
 8045a4a:	695a      	ldr	r2, [r3, #20]
 8045a4c:	687b      	ldr	r3, [r7, #4]
 8045a4e:	681b      	ldr	r3, [r3, #0]
 8045a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8045a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8045a56:	687b      	ldr	r3, [r7, #4]
 8045a58:	681b      	ldr	r3, [r3, #0]
 8045a5a:	68da      	ldr	r2, [r3, #12]
 8045a5c:	687b      	ldr	r3, [r7, #4]
 8045a5e:	681b      	ldr	r3, [r3, #0]
 8045a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8045a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045a66:	687b      	ldr	r3, [r7, #4]
 8045a68:	2200      	movs	r2, #0
 8045a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8045a6c:	687b      	ldr	r3, [r7, #4]
 8045a6e:	2220      	movs	r2, #32
 8045a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8045a74:	687b      	ldr	r3, [r7, #4]
 8045a76:	2220      	movs	r2, #32
 8045a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045a7c:	2300      	movs	r3, #0
}
 8045a7e:	4618      	mov	r0, r3
 8045a80:	3708      	adds	r7, #8
 8045a82:	46bd      	mov	sp, r7
 8045a84:	bd80      	pop	{r7, pc}
	...

08045a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045a8c:	b0c0      	sub	sp, #256	; 0x100
 8045a8e:	af00      	add	r7, sp, #0
 8045a90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045a98:	681b      	ldr	r3, [r3, #0]
 8045a9a:	691b      	ldr	r3, [r3, #16]
 8045a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8045aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045aa4:	68d9      	ldr	r1, [r3, #12]
 8045aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045aaa:	681a      	ldr	r2, [r3, #0]
 8045aac:	ea40 0301 	orr.w	r3, r0, r1
 8045ab0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8045ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045ab6:	689a      	ldr	r2, [r3, #8]
 8045ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045abc:	691b      	ldr	r3, [r3, #16]
 8045abe:	431a      	orrs	r2, r3
 8045ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045ac4:	695b      	ldr	r3, [r3, #20]
 8045ac6:	431a      	orrs	r2, r3
 8045ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045acc:	69db      	ldr	r3, [r3, #28]
 8045ace:	4313      	orrs	r3, r2
 8045ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8045ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045ad8:	681b      	ldr	r3, [r3, #0]
 8045ada:	68db      	ldr	r3, [r3, #12]
 8045adc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8045ae0:	f021 010c 	bic.w	r1, r1, #12
 8045ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045ae8:	681a      	ldr	r2, [r3, #0]
 8045aea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8045aee:	430b      	orrs	r3, r1
 8045af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8045af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045af6:	681b      	ldr	r3, [r3, #0]
 8045af8:	695b      	ldr	r3, [r3, #20]
 8045afa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8045afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045b02:	6999      	ldr	r1, [r3, #24]
 8045b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045b08:	681a      	ldr	r2, [r3, #0]
 8045b0a:	ea40 0301 	orr.w	r3, r0, r1
 8045b0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8045b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045b14:	681a      	ldr	r2, [r3, #0]
 8045b16:	4b8f      	ldr	r3, [pc, #572]	; (8045d54 <UART_SetConfig+0x2cc>)
 8045b18:	429a      	cmp	r2, r3
 8045b1a:	d005      	beq.n	8045b28 <UART_SetConfig+0xa0>
 8045b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045b20:	681a      	ldr	r2, [r3, #0]
 8045b22:	4b8d      	ldr	r3, [pc, #564]	; (8045d58 <UART_SetConfig+0x2d0>)
 8045b24:	429a      	cmp	r2, r3
 8045b26:	d104      	bne.n	8045b32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8045b28:	f7ff f81c 	bl	8044b64 <HAL_RCC_GetPCLK2Freq>
 8045b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8045b30:	e003      	b.n	8045b3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8045b32:	f7ff f803 	bl	8044b3c <HAL_RCC_GetPCLK1Freq>
 8045b36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8045b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045b3e:	69db      	ldr	r3, [r3, #28]
 8045b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8045b44:	f040 810c 	bne.w	8045d60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8045b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045b4c:	2200      	movs	r2, #0
 8045b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8045b52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8045b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8045b5a:	4622      	mov	r2, r4
 8045b5c:	462b      	mov	r3, r5
 8045b5e:	1891      	adds	r1, r2, r2
 8045b60:	65b9      	str	r1, [r7, #88]	; 0x58
 8045b62:	415b      	adcs	r3, r3
 8045b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8045b66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8045b6a:	4621      	mov	r1, r4
 8045b6c:	eb12 0801 	adds.w	r8, r2, r1
 8045b70:	4629      	mov	r1, r5
 8045b72:	eb43 0901 	adc.w	r9, r3, r1
 8045b76:	f04f 0200 	mov.w	r2, #0
 8045b7a:	f04f 0300 	mov.w	r3, #0
 8045b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8045b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8045b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8045b8a:	4690      	mov	r8, r2
 8045b8c:	4699      	mov	r9, r3
 8045b8e:	4623      	mov	r3, r4
 8045b90:	eb18 0303 	adds.w	r3, r8, r3
 8045b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8045b98:	462b      	mov	r3, r5
 8045b9a:	eb49 0303 	adc.w	r3, r9, r3
 8045b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8045ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045ba6:	685b      	ldr	r3, [r3, #4]
 8045ba8:	2200      	movs	r2, #0
 8045baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8045bae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8045bb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8045bb6:	460b      	mov	r3, r1
 8045bb8:	18db      	adds	r3, r3, r3
 8045bba:	653b      	str	r3, [r7, #80]	; 0x50
 8045bbc:	4613      	mov	r3, r2
 8045bbe:	eb42 0303 	adc.w	r3, r2, r3
 8045bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8045bc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8045bc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8045bcc:	f7fa fb0e 	bl	80401ec <__aeabi_uldivmod>
 8045bd0:	4602      	mov	r2, r0
 8045bd2:	460b      	mov	r3, r1
 8045bd4:	4b61      	ldr	r3, [pc, #388]	; (8045d5c <UART_SetConfig+0x2d4>)
 8045bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8045bda:	095b      	lsrs	r3, r3, #5
 8045bdc:	011c      	lsls	r4, r3, #4
 8045bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045be2:	2200      	movs	r2, #0
 8045be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8045be8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8045bec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8045bf0:	4642      	mov	r2, r8
 8045bf2:	464b      	mov	r3, r9
 8045bf4:	1891      	adds	r1, r2, r2
 8045bf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8045bf8:	415b      	adcs	r3, r3
 8045bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8045bfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8045c00:	4641      	mov	r1, r8
 8045c02:	eb12 0a01 	adds.w	sl, r2, r1
 8045c06:	4649      	mov	r1, r9
 8045c08:	eb43 0b01 	adc.w	fp, r3, r1
 8045c0c:	f04f 0200 	mov.w	r2, #0
 8045c10:	f04f 0300 	mov.w	r3, #0
 8045c14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8045c18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8045c1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8045c20:	4692      	mov	sl, r2
 8045c22:	469b      	mov	fp, r3
 8045c24:	4643      	mov	r3, r8
 8045c26:	eb1a 0303 	adds.w	r3, sl, r3
 8045c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8045c2e:	464b      	mov	r3, r9
 8045c30:	eb4b 0303 	adc.w	r3, fp, r3
 8045c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8045c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045c3c:	685b      	ldr	r3, [r3, #4]
 8045c3e:	2200      	movs	r2, #0
 8045c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8045c44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8045c48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8045c4c:	460b      	mov	r3, r1
 8045c4e:	18db      	adds	r3, r3, r3
 8045c50:	643b      	str	r3, [r7, #64]	; 0x40
 8045c52:	4613      	mov	r3, r2
 8045c54:	eb42 0303 	adc.w	r3, r2, r3
 8045c58:	647b      	str	r3, [r7, #68]	; 0x44
 8045c5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8045c5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8045c62:	f7fa fac3 	bl	80401ec <__aeabi_uldivmod>
 8045c66:	4602      	mov	r2, r0
 8045c68:	460b      	mov	r3, r1
 8045c6a:	4611      	mov	r1, r2
 8045c6c:	4b3b      	ldr	r3, [pc, #236]	; (8045d5c <UART_SetConfig+0x2d4>)
 8045c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8045c72:	095b      	lsrs	r3, r3, #5
 8045c74:	2264      	movs	r2, #100	; 0x64
 8045c76:	fb02 f303 	mul.w	r3, r2, r3
 8045c7a:	1acb      	subs	r3, r1, r3
 8045c7c:	00db      	lsls	r3, r3, #3
 8045c7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8045c82:	4b36      	ldr	r3, [pc, #216]	; (8045d5c <UART_SetConfig+0x2d4>)
 8045c84:	fba3 2302 	umull	r2, r3, r3, r2
 8045c88:	095b      	lsrs	r3, r3, #5
 8045c8a:	005b      	lsls	r3, r3, #1
 8045c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8045c90:	441c      	add	r4, r3
 8045c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045c96:	2200      	movs	r2, #0
 8045c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8045c9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8045ca0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8045ca4:	4642      	mov	r2, r8
 8045ca6:	464b      	mov	r3, r9
 8045ca8:	1891      	adds	r1, r2, r2
 8045caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8045cac:	415b      	adcs	r3, r3
 8045cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8045cb4:	4641      	mov	r1, r8
 8045cb6:	1851      	adds	r1, r2, r1
 8045cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8045cba:	4649      	mov	r1, r9
 8045cbc:	414b      	adcs	r3, r1
 8045cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8045cc0:	f04f 0200 	mov.w	r2, #0
 8045cc4:	f04f 0300 	mov.w	r3, #0
 8045cc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8045ccc:	4659      	mov	r1, fp
 8045cce:	00cb      	lsls	r3, r1, #3
 8045cd0:	4651      	mov	r1, sl
 8045cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045cd6:	4651      	mov	r1, sl
 8045cd8:	00ca      	lsls	r2, r1, #3
 8045cda:	4610      	mov	r0, r2
 8045cdc:	4619      	mov	r1, r3
 8045cde:	4603      	mov	r3, r0
 8045ce0:	4642      	mov	r2, r8
 8045ce2:	189b      	adds	r3, r3, r2
 8045ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8045ce8:	464b      	mov	r3, r9
 8045cea:	460a      	mov	r2, r1
 8045cec:	eb42 0303 	adc.w	r3, r2, r3
 8045cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8045cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045cf8:	685b      	ldr	r3, [r3, #4]
 8045cfa:	2200      	movs	r2, #0
 8045cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8045d00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8045d04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8045d08:	460b      	mov	r3, r1
 8045d0a:	18db      	adds	r3, r3, r3
 8045d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8045d0e:	4613      	mov	r3, r2
 8045d10:	eb42 0303 	adc.w	r3, r2, r3
 8045d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8045d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8045d1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8045d1e:	f7fa fa65 	bl	80401ec <__aeabi_uldivmod>
 8045d22:	4602      	mov	r2, r0
 8045d24:	460b      	mov	r3, r1
 8045d26:	4b0d      	ldr	r3, [pc, #52]	; (8045d5c <UART_SetConfig+0x2d4>)
 8045d28:	fba3 1302 	umull	r1, r3, r3, r2
 8045d2c:	095b      	lsrs	r3, r3, #5
 8045d2e:	2164      	movs	r1, #100	; 0x64
 8045d30:	fb01 f303 	mul.w	r3, r1, r3
 8045d34:	1ad3      	subs	r3, r2, r3
 8045d36:	00db      	lsls	r3, r3, #3
 8045d38:	3332      	adds	r3, #50	; 0x32
 8045d3a:	4a08      	ldr	r2, [pc, #32]	; (8045d5c <UART_SetConfig+0x2d4>)
 8045d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8045d40:	095b      	lsrs	r3, r3, #5
 8045d42:	f003 0207 	and.w	r2, r3, #7
 8045d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045d4a:	681b      	ldr	r3, [r3, #0]
 8045d4c:	4422      	add	r2, r4
 8045d4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8045d50:	e105      	b.n	8045f5e <UART_SetConfig+0x4d6>
 8045d52:	bf00      	nop
 8045d54:	40011000 	.word	0x40011000
 8045d58:	40011400 	.word	0x40011400
 8045d5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8045d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045d64:	2200      	movs	r2, #0
 8045d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8045d6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8045d6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8045d72:	4642      	mov	r2, r8
 8045d74:	464b      	mov	r3, r9
 8045d76:	1891      	adds	r1, r2, r2
 8045d78:	6239      	str	r1, [r7, #32]
 8045d7a:	415b      	adcs	r3, r3
 8045d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8045d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8045d82:	4641      	mov	r1, r8
 8045d84:	1854      	adds	r4, r2, r1
 8045d86:	4649      	mov	r1, r9
 8045d88:	eb43 0501 	adc.w	r5, r3, r1
 8045d8c:	f04f 0200 	mov.w	r2, #0
 8045d90:	f04f 0300 	mov.w	r3, #0
 8045d94:	00eb      	lsls	r3, r5, #3
 8045d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8045d9a:	00e2      	lsls	r2, r4, #3
 8045d9c:	4614      	mov	r4, r2
 8045d9e:	461d      	mov	r5, r3
 8045da0:	4643      	mov	r3, r8
 8045da2:	18e3      	adds	r3, r4, r3
 8045da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8045da8:	464b      	mov	r3, r9
 8045daa:	eb45 0303 	adc.w	r3, r5, r3
 8045dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8045db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045db6:	685b      	ldr	r3, [r3, #4]
 8045db8:	2200      	movs	r2, #0
 8045dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8045dbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8045dc2:	f04f 0200 	mov.w	r2, #0
 8045dc6:	f04f 0300 	mov.w	r3, #0
 8045dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8045dce:	4629      	mov	r1, r5
 8045dd0:	008b      	lsls	r3, r1, #2
 8045dd2:	4621      	mov	r1, r4
 8045dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045dd8:	4621      	mov	r1, r4
 8045dda:	008a      	lsls	r2, r1, #2
 8045ddc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8045de0:	f7fa fa04 	bl	80401ec <__aeabi_uldivmod>
 8045de4:	4602      	mov	r2, r0
 8045de6:	460b      	mov	r3, r1
 8045de8:	4b60      	ldr	r3, [pc, #384]	; (8045f6c <UART_SetConfig+0x4e4>)
 8045dea:	fba3 2302 	umull	r2, r3, r3, r2
 8045dee:	095b      	lsrs	r3, r3, #5
 8045df0:	011c      	lsls	r4, r3, #4
 8045df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045df6:	2200      	movs	r2, #0
 8045df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8045dfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8045e00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8045e04:	4642      	mov	r2, r8
 8045e06:	464b      	mov	r3, r9
 8045e08:	1891      	adds	r1, r2, r2
 8045e0a:	61b9      	str	r1, [r7, #24]
 8045e0c:	415b      	adcs	r3, r3
 8045e0e:	61fb      	str	r3, [r7, #28]
 8045e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8045e14:	4641      	mov	r1, r8
 8045e16:	1851      	adds	r1, r2, r1
 8045e18:	6139      	str	r1, [r7, #16]
 8045e1a:	4649      	mov	r1, r9
 8045e1c:	414b      	adcs	r3, r1
 8045e1e:	617b      	str	r3, [r7, #20]
 8045e20:	f04f 0200 	mov.w	r2, #0
 8045e24:	f04f 0300 	mov.w	r3, #0
 8045e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8045e2c:	4659      	mov	r1, fp
 8045e2e:	00cb      	lsls	r3, r1, #3
 8045e30:	4651      	mov	r1, sl
 8045e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045e36:	4651      	mov	r1, sl
 8045e38:	00ca      	lsls	r2, r1, #3
 8045e3a:	4610      	mov	r0, r2
 8045e3c:	4619      	mov	r1, r3
 8045e3e:	4603      	mov	r3, r0
 8045e40:	4642      	mov	r2, r8
 8045e42:	189b      	adds	r3, r3, r2
 8045e44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8045e48:	464b      	mov	r3, r9
 8045e4a:	460a      	mov	r2, r1
 8045e4c:	eb42 0303 	adc.w	r3, r2, r3
 8045e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8045e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045e58:	685b      	ldr	r3, [r3, #4]
 8045e5a:	2200      	movs	r2, #0
 8045e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8045e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8045e60:	f04f 0200 	mov.w	r2, #0
 8045e64:	f04f 0300 	mov.w	r3, #0
 8045e68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8045e6c:	4649      	mov	r1, r9
 8045e6e:	008b      	lsls	r3, r1, #2
 8045e70:	4641      	mov	r1, r8
 8045e72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045e76:	4641      	mov	r1, r8
 8045e78:	008a      	lsls	r2, r1, #2
 8045e7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8045e7e:	f7fa f9b5 	bl	80401ec <__aeabi_uldivmod>
 8045e82:	4602      	mov	r2, r0
 8045e84:	460b      	mov	r3, r1
 8045e86:	4b39      	ldr	r3, [pc, #228]	; (8045f6c <UART_SetConfig+0x4e4>)
 8045e88:	fba3 1302 	umull	r1, r3, r3, r2
 8045e8c:	095b      	lsrs	r3, r3, #5
 8045e8e:	2164      	movs	r1, #100	; 0x64
 8045e90:	fb01 f303 	mul.w	r3, r1, r3
 8045e94:	1ad3      	subs	r3, r2, r3
 8045e96:	011b      	lsls	r3, r3, #4
 8045e98:	3332      	adds	r3, #50	; 0x32
 8045e9a:	4a34      	ldr	r2, [pc, #208]	; (8045f6c <UART_SetConfig+0x4e4>)
 8045e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8045ea0:	095b      	lsrs	r3, r3, #5
 8045ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8045ea6:	441c      	add	r4, r3
 8045ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8045eac:	2200      	movs	r2, #0
 8045eae:	673b      	str	r3, [r7, #112]	; 0x70
 8045eb0:	677a      	str	r2, [r7, #116]	; 0x74
 8045eb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8045eb6:	4642      	mov	r2, r8
 8045eb8:	464b      	mov	r3, r9
 8045eba:	1891      	adds	r1, r2, r2
 8045ebc:	60b9      	str	r1, [r7, #8]
 8045ebe:	415b      	adcs	r3, r3
 8045ec0:	60fb      	str	r3, [r7, #12]
 8045ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8045ec6:	4641      	mov	r1, r8
 8045ec8:	1851      	adds	r1, r2, r1
 8045eca:	6039      	str	r1, [r7, #0]
 8045ecc:	4649      	mov	r1, r9
 8045ece:	414b      	adcs	r3, r1
 8045ed0:	607b      	str	r3, [r7, #4]
 8045ed2:	f04f 0200 	mov.w	r2, #0
 8045ed6:	f04f 0300 	mov.w	r3, #0
 8045eda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8045ede:	4659      	mov	r1, fp
 8045ee0:	00cb      	lsls	r3, r1, #3
 8045ee2:	4651      	mov	r1, sl
 8045ee4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8045ee8:	4651      	mov	r1, sl
 8045eea:	00ca      	lsls	r2, r1, #3
 8045eec:	4610      	mov	r0, r2
 8045eee:	4619      	mov	r1, r3
 8045ef0:	4603      	mov	r3, r0
 8045ef2:	4642      	mov	r2, r8
 8045ef4:	189b      	adds	r3, r3, r2
 8045ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8045ef8:	464b      	mov	r3, r9
 8045efa:	460a      	mov	r2, r1
 8045efc:	eb42 0303 	adc.w	r3, r2, r3
 8045f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8045f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045f06:	685b      	ldr	r3, [r3, #4]
 8045f08:	2200      	movs	r2, #0
 8045f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8045f0c:	667a      	str	r2, [r7, #100]	; 0x64
 8045f0e:	f04f 0200 	mov.w	r2, #0
 8045f12:	f04f 0300 	mov.w	r3, #0
 8045f16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8045f1a:	4649      	mov	r1, r9
 8045f1c:	008b      	lsls	r3, r1, #2
 8045f1e:	4641      	mov	r1, r8
 8045f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8045f24:	4641      	mov	r1, r8
 8045f26:	008a      	lsls	r2, r1, #2
 8045f28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8045f2c:	f7fa f95e 	bl	80401ec <__aeabi_uldivmod>
 8045f30:	4602      	mov	r2, r0
 8045f32:	460b      	mov	r3, r1
 8045f34:	4b0d      	ldr	r3, [pc, #52]	; (8045f6c <UART_SetConfig+0x4e4>)
 8045f36:	fba3 1302 	umull	r1, r3, r3, r2
 8045f3a:	095b      	lsrs	r3, r3, #5
 8045f3c:	2164      	movs	r1, #100	; 0x64
 8045f3e:	fb01 f303 	mul.w	r3, r1, r3
 8045f42:	1ad3      	subs	r3, r2, r3
 8045f44:	011b      	lsls	r3, r3, #4
 8045f46:	3332      	adds	r3, #50	; 0x32
 8045f48:	4a08      	ldr	r2, [pc, #32]	; (8045f6c <UART_SetConfig+0x4e4>)
 8045f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8045f4e:	095b      	lsrs	r3, r3, #5
 8045f50:	f003 020f 	and.w	r2, r3, #15
 8045f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8045f58:	681b      	ldr	r3, [r3, #0]
 8045f5a:	4422      	add	r2, r4
 8045f5c:	609a      	str	r2, [r3, #8]
}
 8045f5e:	bf00      	nop
 8045f60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8045f64:	46bd      	mov	sp, r7
 8045f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8045f6a:	bf00      	nop
 8045f6c:	51eb851f 	.word	0x51eb851f

08045f70 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8045f70:	b480      	push	{r7}
 8045f72:	b083      	sub	sp, #12
 8045f74:	af00      	add	r7, sp, #0
 8045f76:	6078      	str	r0, [r7, #4]
 8045f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8045f7a:	683b      	ldr	r3, [r7, #0]
 8045f7c:	681b      	ldr	r3, [r3, #0]
 8045f7e:	2b00      	cmp	r3, #0
 8045f80:	d123      	bne.n	8045fca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8045f82:	687b      	ldr	r3, [r7, #4]
 8045f84:	681b      	ldr	r3, [r3, #0]
 8045f86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8045f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8045f8e:	683a      	ldr	r2, [r7, #0]
 8045f90:	6851      	ldr	r1, [r2, #4]
 8045f92:	683a      	ldr	r2, [r7, #0]
 8045f94:	6892      	ldr	r2, [r2, #8]
 8045f96:	4311      	orrs	r1, r2
 8045f98:	683a      	ldr	r2, [r7, #0]
 8045f9a:	68d2      	ldr	r2, [r2, #12]
 8045f9c:	4311      	orrs	r1, r2
 8045f9e:	683a      	ldr	r2, [r7, #0]
 8045fa0:	6912      	ldr	r2, [r2, #16]
 8045fa2:	4311      	orrs	r1, r2
 8045fa4:	683a      	ldr	r2, [r7, #0]
 8045fa6:	6952      	ldr	r2, [r2, #20]
 8045fa8:	4311      	orrs	r1, r2
 8045faa:	683a      	ldr	r2, [r7, #0]
 8045fac:	6992      	ldr	r2, [r2, #24]
 8045fae:	4311      	orrs	r1, r2
 8045fb0:	683a      	ldr	r2, [r7, #0]
 8045fb2:	69d2      	ldr	r2, [r2, #28]
 8045fb4:	4311      	orrs	r1, r2
 8045fb6:	683a      	ldr	r2, [r7, #0]
 8045fb8:	6a12      	ldr	r2, [r2, #32]
 8045fba:	4311      	orrs	r1, r2
 8045fbc:	683a      	ldr	r2, [r7, #0]
 8045fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8045fc0:	430a      	orrs	r2, r1
 8045fc2:	431a      	orrs	r2, r3
 8045fc4:	687b      	ldr	r3, [r7, #4]
 8045fc6:	601a      	str	r2, [r3, #0]
 8045fc8:	e028      	b.n	804601c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8045fca:	687b      	ldr	r3, [r7, #4]
 8045fcc:	681b      	ldr	r3, [r3, #0]
 8045fce:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8045fd2:	683b      	ldr	r3, [r7, #0]
 8045fd4:	69d9      	ldr	r1, [r3, #28]
 8045fd6:	683b      	ldr	r3, [r7, #0]
 8045fd8:	6a1b      	ldr	r3, [r3, #32]
 8045fda:	4319      	orrs	r1, r3
 8045fdc:	683b      	ldr	r3, [r7, #0]
 8045fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045fe0:	430b      	orrs	r3, r1
 8045fe2:	431a      	orrs	r2, r3
 8045fe4:	687b      	ldr	r3, [r7, #4]
 8045fe6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8045fe8:	687b      	ldr	r3, [r7, #4]
 8045fea:	685b      	ldr	r3, [r3, #4]
 8045fec:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8045ff0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8045ff4:	683a      	ldr	r2, [r7, #0]
 8045ff6:	6851      	ldr	r1, [r2, #4]
 8045ff8:	683a      	ldr	r2, [r7, #0]
 8045ffa:	6892      	ldr	r2, [r2, #8]
 8045ffc:	4311      	orrs	r1, r2
 8045ffe:	683a      	ldr	r2, [r7, #0]
 8046000:	68d2      	ldr	r2, [r2, #12]
 8046002:	4311      	orrs	r1, r2
 8046004:	683a      	ldr	r2, [r7, #0]
 8046006:	6912      	ldr	r2, [r2, #16]
 8046008:	4311      	orrs	r1, r2
 804600a:	683a      	ldr	r2, [r7, #0]
 804600c:	6952      	ldr	r2, [r2, #20]
 804600e:	4311      	orrs	r1, r2
 8046010:	683a      	ldr	r2, [r7, #0]
 8046012:	6992      	ldr	r2, [r2, #24]
 8046014:	430a      	orrs	r2, r1
 8046016:	431a      	orrs	r2, r3
 8046018:	687b      	ldr	r3, [r7, #4]
 804601a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 804601c:	2300      	movs	r3, #0
}
 804601e:	4618      	mov	r0, r3
 8046020:	370c      	adds	r7, #12
 8046022:	46bd      	mov	sp, r7
 8046024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046028:	4770      	bx	lr

0804602a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 804602a:	b480      	push	{r7}
 804602c:	b085      	sub	sp, #20
 804602e:	af00      	add	r7, sp, #0
 8046030:	60f8      	str	r0, [r7, #12]
 8046032:	60b9      	str	r1, [r7, #8]
 8046034:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8046036:	687b      	ldr	r3, [r7, #4]
 8046038:	2b00      	cmp	r3, #0
 804603a:	d128      	bne.n	804608e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 804603c:	68fb      	ldr	r3, [r7, #12]
 804603e:	689b      	ldr	r3, [r3, #8]
 8046040:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8046044:	68bb      	ldr	r3, [r7, #8]
 8046046:	681b      	ldr	r3, [r3, #0]
 8046048:	1e59      	subs	r1, r3, #1
 804604a:	68bb      	ldr	r3, [r7, #8]
 804604c:	685b      	ldr	r3, [r3, #4]
 804604e:	3b01      	subs	r3, #1
 8046050:	011b      	lsls	r3, r3, #4
 8046052:	4319      	orrs	r1, r3
 8046054:	68bb      	ldr	r3, [r7, #8]
 8046056:	689b      	ldr	r3, [r3, #8]
 8046058:	3b01      	subs	r3, #1
 804605a:	021b      	lsls	r3, r3, #8
 804605c:	4319      	orrs	r1, r3
 804605e:	68bb      	ldr	r3, [r7, #8]
 8046060:	68db      	ldr	r3, [r3, #12]
 8046062:	3b01      	subs	r3, #1
 8046064:	031b      	lsls	r3, r3, #12
 8046066:	4319      	orrs	r1, r3
 8046068:	68bb      	ldr	r3, [r7, #8]
 804606a:	691b      	ldr	r3, [r3, #16]
 804606c:	3b01      	subs	r3, #1
 804606e:	041b      	lsls	r3, r3, #16
 8046070:	4319      	orrs	r1, r3
 8046072:	68bb      	ldr	r3, [r7, #8]
 8046074:	695b      	ldr	r3, [r3, #20]
 8046076:	3b01      	subs	r3, #1
 8046078:	051b      	lsls	r3, r3, #20
 804607a:	4319      	orrs	r1, r3
 804607c:	68bb      	ldr	r3, [r7, #8]
 804607e:	699b      	ldr	r3, [r3, #24]
 8046080:	3b01      	subs	r3, #1
 8046082:	061b      	lsls	r3, r3, #24
 8046084:	430b      	orrs	r3, r1
 8046086:	431a      	orrs	r2, r3
 8046088:	68fb      	ldr	r3, [r7, #12]
 804608a:	609a      	str	r2, [r3, #8]
 804608c:	e02f      	b.n	80460ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 804608e:	68fb      	ldr	r3, [r7, #12]
 8046090:	689b      	ldr	r3, [r3, #8]
 8046092:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8046096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 804609a:	68ba      	ldr	r2, [r7, #8]
 804609c:	68d2      	ldr	r2, [r2, #12]
 804609e:	3a01      	subs	r2, #1
 80460a0:	0311      	lsls	r1, r2, #12
 80460a2:	68ba      	ldr	r2, [r7, #8]
 80460a4:	6952      	ldr	r2, [r2, #20]
 80460a6:	3a01      	subs	r2, #1
 80460a8:	0512      	lsls	r2, r2, #20
 80460aa:	430a      	orrs	r2, r1
 80460ac:	431a      	orrs	r2, r3
 80460ae:	68fb      	ldr	r3, [r7, #12]
 80460b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80460b2:	68fb      	ldr	r3, [r7, #12]
 80460b4:	68db      	ldr	r3, [r3, #12]
 80460b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80460ba:	68bb      	ldr	r3, [r7, #8]
 80460bc:	681b      	ldr	r3, [r3, #0]
 80460be:	1e59      	subs	r1, r3, #1
 80460c0:	68bb      	ldr	r3, [r7, #8]
 80460c2:	685b      	ldr	r3, [r3, #4]
 80460c4:	3b01      	subs	r3, #1
 80460c6:	011b      	lsls	r3, r3, #4
 80460c8:	4319      	orrs	r1, r3
 80460ca:	68bb      	ldr	r3, [r7, #8]
 80460cc:	689b      	ldr	r3, [r3, #8]
 80460ce:	3b01      	subs	r3, #1
 80460d0:	021b      	lsls	r3, r3, #8
 80460d2:	4319      	orrs	r1, r3
 80460d4:	68bb      	ldr	r3, [r7, #8]
 80460d6:	691b      	ldr	r3, [r3, #16]
 80460d8:	3b01      	subs	r3, #1
 80460da:	041b      	lsls	r3, r3, #16
 80460dc:	4319      	orrs	r1, r3
 80460de:	68bb      	ldr	r3, [r7, #8]
 80460e0:	699b      	ldr	r3, [r3, #24]
 80460e2:	3b01      	subs	r3, #1
 80460e4:	061b      	lsls	r3, r3, #24
 80460e6:	430b      	orrs	r3, r1
 80460e8:	431a      	orrs	r2, r3
 80460ea:	68fb      	ldr	r3, [r7, #12]
 80460ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80460ee:	2300      	movs	r3, #0
}
 80460f0:	4618      	mov	r0, r3
 80460f2:	3714      	adds	r7, #20
 80460f4:	46bd      	mov	sp, r7
 80460f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460fa:	4770      	bx	lr

080460fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80460fc:	b084      	sub	sp, #16
 80460fe:	b580      	push	{r7, lr}
 8046100:	b084      	sub	sp, #16
 8046102:	af00      	add	r7, sp, #0
 8046104:	6078      	str	r0, [r7, #4]
 8046106:	f107 001c 	add.w	r0, r7, #28
 804610a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 804610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8046110:	2b01      	cmp	r3, #1
 8046112:	d122      	bne.n	804615a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046114:	687b      	ldr	r3, [r7, #4]
 8046116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804611c:	687b      	ldr	r3, [r7, #4]
 804611e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8046120:	687b      	ldr	r3, [r7, #4]
 8046122:	68db      	ldr	r3, [r3, #12]
 8046124:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8046128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804612c:	687a      	ldr	r2, [r7, #4]
 804612e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8046130:	687b      	ldr	r3, [r7, #4]
 8046132:	68db      	ldr	r3, [r3, #12]
 8046134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8046138:	687b      	ldr	r3, [r7, #4]
 804613a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 804613c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804613e:	2b01      	cmp	r3, #1
 8046140:	d105      	bne.n	804614e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8046142:	687b      	ldr	r3, [r7, #4]
 8046144:	68db      	ldr	r3, [r3, #12]
 8046146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 804614a:	687b      	ldr	r3, [r7, #4]
 804614c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 804614e:	6878      	ldr	r0, [r7, #4]
 8046150:	f000 f9c0 	bl	80464d4 <USB_CoreReset>
 8046154:	4603      	mov	r3, r0
 8046156:	73fb      	strb	r3, [r7, #15]
 8046158:	e01a      	b.n	8046190 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 804615a:	687b      	ldr	r3, [r7, #4]
 804615c:	68db      	ldr	r3, [r3, #12]
 804615e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8046162:	687b      	ldr	r3, [r7, #4]
 8046164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046166:	6878      	ldr	r0, [r7, #4]
 8046168:	f000 f9b4 	bl	80464d4 <USB_CoreReset>
 804616c:	4603      	mov	r3, r0
 804616e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8046170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046172:	2b00      	cmp	r3, #0
 8046174:	d106      	bne.n	8046184 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8046176:	687b      	ldr	r3, [r7, #4]
 8046178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804617a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 804617e:	687b      	ldr	r3, [r7, #4]
 8046180:	639a      	str	r2, [r3, #56]	; 0x38
 8046182:	e005      	b.n	8046190 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046184:	687b      	ldr	r3, [r7, #4]
 8046186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046188:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 804618c:	687b      	ldr	r3, [r7, #4]
 804618e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8046190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8046192:	2b01      	cmp	r3, #1
 8046194:	d10b      	bne.n	80461ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8046196:	687b      	ldr	r3, [r7, #4]
 8046198:	689b      	ldr	r3, [r3, #8]
 804619a:	f043 0206 	orr.w	r2, r3, #6
 804619e:	687b      	ldr	r3, [r7, #4]
 80461a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80461a2:	687b      	ldr	r3, [r7, #4]
 80461a4:	689b      	ldr	r3, [r3, #8]
 80461a6:	f043 0220 	orr.w	r2, r3, #32
 80461aa:	687b      	ldr	r3, [r7, #4]
 80461ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80461ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80461b0:	4618      	mov	r0, r3
 80461b2:	3710      	adds	r7, #16
 80461b4:	46bd      	mov	sp, r7
 80461b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80461ba:	b004      	add	sp, #16
 80461bc:	4770      	bx	lr

080461be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80461be:	b480      	push	{r7}
 80461c0:	b083      	sub	sp, #12
 80461c2:	af00      	add	r7, sp, #0
 80461c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80461c6:	687b      	ldr	r3, [r7, #4]
 80461c8:	689b      	ldr	r3, [r3, #8]
 80461ca:	f043 0201 	orr.w	r2, r3, #1
 80461ce:	687b      	ldr	r3, [r7, #4]
 80461d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80461d2:	2300      	movs	r3, #0
}
 80461d4:	4618      	mov	r0, r3
 80461d6:	370c      	adds	r7, #12
 80461d8:	46bd      	mov	sp, r7
 80461da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80461de:	4770      	bx	lr

080461e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80461e0:	b480      	push	{r7}
 80461e2:	b083      	sub	sp, #12
 80461e4:	af00      	add	r7, sp, #0
 80461e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80461e8:	687b      	ldr	r3, [r7, #4]
 80461ea:	689b      	ldr	r3, [r3, #8]
 80461ec:	f023 0201 	bic.w	r2, r3, #1
 80461f0:	687b      	ldr	r3, [r7, #4]
 80461f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80461f4:	2300      	movs	r3, #0
}
 80461f6:	4618      	mov	r0, r3
 80461f8:	370c      	adds	r7, #12
 80461fa:	46bd      	mov	sp, r7
 80461fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046200:	4770      	bx	lr

08046202 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8046202:	b580      	push	{r7, lr}
 8046204:	b084      	sub	sp, #16
 8046206:	af00      	add	r7, sp, #0
 8046208:	6078      	str	r0, [r7, #4]
 804620a:	460b      	mov	r3, r1
 804620c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 804620e:	2300      	movs	r3, #0
 8046210:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8046212:	687b      	ldr	r3, [r7, #4]
 8046214:	68db      	ldr	r3, [r3, #12]
 8046216:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 804621a:	687b      	ldr	r3, [r7, #4]
 804621c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 804621e:	78fb      	ldrb	r3, [r7, #3]
 8046220:	2b01      	cmp	r3, #1
 8046222:	d115      	bne.n	8046250 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8046224:	687b      	ldr	r3, [r7, #4]
 8046226:	68db      	ldr	r3, [r3, #12]
 8046228:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 804622c:	687b      	ldr	r3, [r7, #4]
 804622e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8046230:	2001      	movs	r0, #1
 8046232:	f7fb fa0d 	bl	8041650 <HAL_Delay>
      ms++;
 8046236:	68fb      	ldr	r3, [r7, #12]
 8046238:	3301      	adds	r3, #1
 804623a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 804623c:	6878      	ldr	r0, [r7, #4]
 804623e:	f000 f93a 	bl	80464b6 <USB_GetMode>
 8046242:	4603      	mov	r3, r0
 8046244:	2b01      	cmp	r3, #1
 8046246:	d01e      	beq.n	8046286 <USB_SetCurrentMode+0x84>
 8046248:	68fb      	ldr	r3, [r7, #12]
 804624a:	2b31      	cmp	r3, #49	; 0x31
 804624c:	d9f0      	bls.n	8046230 <USB_SetCurrentMode+0x2e>
 804624e:	e01a      	b.n	8046286 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8046250:	78fb      	ldrb	r3, [r7, #3]
 8046252:	2b00      	cmp	r3, #0
 8046254:	d115      	bne.n	8046282 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8046256:	687b      	ldr	r3, [r7, #4]
 8046258:	68db      	ldr	r3, [r3, #12]
 804625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 804625e:	687b      	ldr	r3, [r7, #4]
 8046260:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8046262:	2001      	movs	r0, #1
 8046264:	f7fb f9f4 	bl	8041650 <HAL_Delay>
      ms++;
 8046268:	68fb      	ldr	r3, [r7, #12]
 804626a:	3301      	adds	r3, #1
 804626c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 804626e:	6878      	ldr	r0, [r7, #4]
 8046270:	f000 f921 	bl	80464b6 <USB_GetMode>
 8046274:	4603      	mov	r3, r0
 8046276:	2b00      	cmp	r3, #0
 8046278:	d005      	beq.n	8046286 <USB_SetCurrentMode+0x84>
 804627a:	68fb      	ldr	r3, [r7, #12]
 804627c:	2b31      	cmp	r3, #49	; 0x31
 804627e:	d9f0      	bls.n	8046262 <USB_SetCurrentMode+0x60>
 8046280:	e001      	b.n	8046286 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8046282:	2301      	movs	r3, #1
 8046284:	e005      	b.n	8046292 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8046286:	68fb      	ldr	r3, [r7, #12]
 8046288:	2b32      	cmp	r3, #50	; 0x32
 804628a:	d101      	bne.n	8046290 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 804628c:	2301      	movs	r3, #1
 804628e:	e000      	b.n	8046292 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8046290:	2300      	movs	r3, #0
}
 8046292:	4618      	mov	r0, r3
 8046294:	3710      	adds	r7, #16
 8046296:	46bd      	mov	sp, r7
 8046298:	bd80      	pop	{r7, pc}
	...

0804629c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 804629c:	b480      	push	{r7}
 804629e:	b085      	sub	sp, #20
 80462a0:	af00      	add	r7, sp, #0
 80462a2:	6078      	str	r0, [r7, #4]
 80462a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80462a6:	2300      	movs	r3, #0
 80462a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80462aa:	68fb      	ldr	r3, [r7, #12]
 80462ac:	3301      	adds	r3, #1
 80462ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80462b0:	68fb      	ldr	r3, [r7, #12]
 80462b2:	4a13      	ldr	r2, [pc, #76]	; (8046300 <USB_FlushTxFifo+0x64>)
 80462b4:	4293      	cmp	r3, r2
 80462b6:	d901      	bls.n	80462bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80462b8:	2303      	movs	r3, #3
 80462ba:	e01b      	b.n	80462f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80462bc:	687b      	ldr	r3, [r7, #4]
 80462be:	691b      	ldr	r3, [r3, #16]
 80462c0:	2b00      	cmp	r3, #0
 80462c2:	daf2      	bge.n	80462aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80462c4:	2300      	movs	r3, #0
 80462c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80462c8:	683b      	ldr	r3, [r7, #0]
 80462ca:	019b      	lsls	r3, r3, #6
 80462cc:	f043 0220 	orr.w	r2, r3, #32
 80462d0:	687b      	ldr	r3, [r7, #4]
 80462d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80462d4:	68fb      	ldr	r3, [r7, #12]
 80462d6:	3301      	adds	r3, #1
 80462d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80462da:	68fb      	ldr	r3, [r7, #12]
 80462dc:	4a08      	ldr	r2, [pc, #32]	; (8046300 <USB_FlushTxFifo+0x64>)
 80462de:	4293      	cmp	r3, r2
 80462e0:	d901      	bls.n	80462e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80462e2:	2303      	movs	r3, #3
 80462e4:	e006      	b.n	80462f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80462e6:	687b      	ldr	r3, [r7, #4]
 80462e8:	691b      	ldr	r3, [r3, #16]
 80462ea:	f003 0320 	and.w	r3, r3, #32
 80462ee:	2b20      	cmp	r3, #32
 80462f0:	d0f0      	beq.n	80462d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80462f2:	2300      	movs	r3, #0
}
 80462f4:	4618      	mov	r0, r3
 80462f6:	3714      	adds	r7, #20
 80462f8:	46bd      	mov	sp, r7
 80462fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462fe:	4770      	bx	lr
 8046300:	00030d40 	.word	0x00030d40

08046304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8046304:	b480      	push	{r7}
 8046306:	b085      	sub	sp, #20
 8046308:	af00      	add	r7, sp, #0
 804630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804630c:	2300      	movs	r3, #0
 804630e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8046310:	68fb      	ldr	r3, [r7, #12]
 8046312:	3301      	adds	r3, #1
 8046314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8046316:	68fb      	ldr	r3, [r7, #12]
 8046318:	4a11      	ldr	r2, [pc, #68]	; (8046360 <USB_FlushRxFifo+0x5c>)
 804631a:	4293      	cmp	r3, r2
 804631c:	d901      	bls.n	8046322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 804631e:	2303      	movs	r3, #3
 8046320:	e018      	b.n	8046354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8046322:	687b      	ldr	r3, [r7, #4]
 8046324:	691b      	ldr	r3, [r3, #16]
 8046326:	2b00      	cmp	r3, #0
 8046328:	daf2      	bge.n	8046310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804632a:	2300      	movs	r3, #0
 804632c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804632e:	687b      	ldr	r3, [r7, #4]
 8046330:	2210      	movs	r2, #16
 8046332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8046334:	68fb      	ldr	r3, [r7, #12]
 8046336:	3301      	adds	r3, #1
 8046338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804633a:	68fb      	ldr	r3, [r7, #12]
 804633c:	4a08      	ldr	r2, [pc, #32]	; (8046360 <USB_FlushRxFifo+0x5c>)
 804633e:	4293      	cmp	r3, r2
 8046340:	d901      	bls.n	8046346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8046342:	2303      	movs	r3, #3
 8046344:	e006      	b.n	8046354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8046346:	687b      	ldr	r3, [r7, #4]
 8046348:	691b      	ldr	r3, [r3, #16]
 804634a:	f003 0310 	and.w	r3, r3, #16
 804634e:	2b10      	cmp	r3, #16
 8046350:	d0f0      	beq.n	8046334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8046352:	2300      	movs	r3, #0
}
 8046354:	4618      	mov	r0, r3
 8046356:	3714      	adds	r7, #20
 8046358:	46bd      	mov	sp, r7
 804635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804635e:	4770      	bx	lr
 8046360:	00030d40 	.word	0x00030d40

08046364 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8046364:	b480      	push	{r7}
 8046366:	b089      	sub	sp, #36	; 0x24
 8046368:	af00      	add	r7, sp, #0
 804636a:	60f8      	str	r0, [r7, #12]
 804636c:	60b9      	str	r1, [r7, #8]
 804636e:	4611      	mov	r1, r2
 8046370:	461a      	mov	r2, r3
 8046372:	460b      	mov	r3, r1
 8046374:	71fb      	strb	r3, [r7, #7]
 8046376:	4613      	mov	r3, r2
 8046378:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804637a:	68fb      	ldr	r3, [r7, #12]
 804637c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 804637e:	68bb      	ldr	r3, [r7, #8]
 8046380:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8046382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8046386:	2b00      	cmp	r3, #0
 8046388:	d123      	bne.n	80463d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 804638a:	88bb      	ldrh	r3, [r7, #4]
 804638c:	3303      	adds	r3, #3
 804638e:	089b      	lsrs	r3, r3, #2
 8046390:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8046392:	2300      	movs	r3, #0
 8046394:	61bb      	str	r3, [r7, #24]
 8046396:	e018      	b.n	80463ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8046398:	79fb      	ldrb	r3, [r7, #7]
 804639a:	031a      	lsls	r2, r3, #12
 804639c:	697b      	ldr	r3, [r7, #20]
 804639e:	4413      	add	r3, r2
 80463a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80463a4:	461a      	mov	r2, r3
 80463a6:	69fb      	ldr	r3, [r7, #28]
 80463a8:	681b      	ldr	r3, [r3, #0]
 80463aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80463ac:	69fb      	ldr	r3, [r7, #28]
 80463ae:	3301      	adds	r3, #1
 80463b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80463b2:	69fb      	ldr	r3, [r7, #28]
 80463b4:	3301      	adds	r3, #1
 80463b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80463b8:	69fb      	ldr	r3, [r7, #28]
 80463ba:	3301      	adds	r3, #1
 80463bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80463be:	69fb      	ldr	r3, [r7, #28]
 80463c0:	3301      	adds	r3, #1
 80463c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80463c4:	69bb      	ldr	r3, [r7, #24]
 80463c6:	3301      	adds	r3, #1
 80463c8:	61bb      	str	r3, [r7, #24]
 80463ca:	69ba      	ldr	r2, [r7, #24]
 80463cc:	693b      	ldr	r3, [r7, #16]
 80463ce:	429a      	cmp	r2, r3
 80463d0:	d3e2      	bcc.n	8046398 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80463d2:	2300      	movs	r3, #0
}
 80463d4:	4618      	mov	r0, r3
 80463d6:	3724      	adds	r7, #36	; 0x24
 80463d8:	46bd      	mov	sp, r7
 80463da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80463de:	4770      	bx	lr

080463e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80463e0:	b480      	push	{r7}
 80463e2:	b08b      	sub	sp, #44	; 0x2c
 80463e4:	af00      	add	r7, sp, #0
 80463e6:	60f8      	str	r0, [r7, #12]
 80463e8:	60b9      	str	r1, [r7, #8]
 80463ea:	4613      	mov	r3, r2
 80463ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80463ee:	68fb      	ldr	r3, [r7, #12]
 80463f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80463f2:	68bb      	ldr	r3, [r7, #8]
 80463f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80463f6:	88fb      	ldrh	r3, [r7, #6]
 80463f8:	089b      	lsrs	r3, r3, #2
 80463fa:	b29b      	uxth	r3, r3
 80463fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80463fe:	88fb      	ldrh	r3, [r7, #6]
 8046400:	f003 0303 	and.w	r3, r3, #3
 8046404:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8046406:	2300      	movs	r3, #0
 8046408:	623b      	str	r3, [r7, #32]
 804640a:	e014      	b.n	8046436 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 804640c:	69bb      	ldr	r3, [r7, #24]
 804640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8046412:	681a      	ldr	r2, [r3, #0]
 8046414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046416:	601a      	str	r2, [r3, #0]
    pDest++;
 8046418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804641a:	3301      	adds	r3, #1
 804641c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046420:	3301      	adds	r3, #1
 8046422:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8046424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046426:	3301      	adds	r3, #1
 8046428:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 804642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804642c:	3301      	adds	r3, #1
 804642e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8046430:	6a3b      	ldr	r3, [r7, #32]
 8046432:	3301      	adds	r3, #1
 8046434:	623b      	str	r3, [r7, #32]
 8046436:	6a3a      	ldr	r2, [r7, #32]
 8046438:	697b      	ldr	r3, [r7, #20]
 804643a:	429a      	cmp	r2, r3
 804643c:	d3e6      	bcc.n	804640c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 804643e:	8bfb      	ldrh	r3, [r7, #30]
 8046440:	2b00      	cmp	r3, #0
 8046442:	d01e      	beq.n	8046482 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8046444:	2300      	movs	r3, #0
 8046446:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8046448:	69bb      	ldr	r3, [r7, #24]
 804644a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804644e:	461a      	mov	r2, r3
 8046450:	f107 0310 	add.w	r3, r7, #16
 8046454:	6812      	ldr	r2, [r2, #0]
 8046456:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8046458:	693a      	ldr	r2, [r7, #16]
 804645a:	6a3b      	ldr	r3, [r7, #32]
 804645c:	b2db      	uxtb	r3, r3
 804645e:	00db      	lsls	r3, r3, #3
 8046460:	fa22 f303 	lsr.w	r3, r2, r3
 8046464:	b2da      	uxtb	r2, r3
 8046466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046468:	701a      	strb	r2, [r3, #0]
      i++;
 804646a:	6a3b      	ldr	r3, [r7, #32]
 804646c:	3301      	adds	r3, #1
 804646e:	623b      	str	r3, [r7, #32]
      pDest++;
 8046470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046472:	3301      	adds	r3, #1
 8046474:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8046476:	8bfb      	ldrh	r3, [r7, #30]
 8046478:	3b01      	subs	r3, #1
 804647a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 804647c:	8bfb      	ldrh	r3, [r7, #30]
 804647e:	2b00      	cmp	r3, #0
 8046480:	d1ea      	bne.n	8046458 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8046482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8046484:	4618      	mov	r0, r3
 8046486:	372c      	adds	r7, #44	; 0x2c
 8046488:	46bd      	mov	sp, r7
 804648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804648e:	4770      	bx	lr

08046490 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8046490:	b480      	push	{r7}
 8046492:	b085      	sub	sp, #20
 8046494:	af00      	add	r7, sp, #0
 8046496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8046498:	687b      	ldr	r3, [r7, #4]
 804649a:	695b      	ldr	r3, [r3, #20]
 804649c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804649e:	687b      	ldr	r3, [r7, #4]
 80464a0:	699b      	ldr	r3, [r3, #24]
 80464a2:	68fa      	ldr	r2, [r7, #12]
 80464a4:	4013      	ands	r3, r2
 80464a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80464a8:	68fb      	ldr	r3, [r7, #12]
}
 80464aa:	4618      	mov	r0, r3
 80464ac:	3714      	adds	r7, #20
 80464ae:	46bd      	mov	sp, r7
 80464b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80464b4:	4770      	bx	lr

080464b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80464b6:	b480      	push	{r7}
 80464b8:	b083      	sub	sp, #12
 80464ba:	af00      	add	r7, sp, #0
 80464bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80464be:	687b      	ldr	r3, [r7, #4]
 80464c0:	695b      	ldr	r3, [r3, #20]
 80464c2:	f003 0301 	and.w	r3, r3, #1
}
 80464c6:	4618      	mov	r0, r3
 80464c8:	370c      	adds	r7, #12
 80464ca:	46bd      	mov	sp, r7
 80464cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80464d0:	4770      	bx	lr
	...

080464d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80464d4:	b480      	push	{r7}
 80464d6:	b085      	sub	sp, #20
 80464d8:	af00      	add	r7, sp, #0
 80464da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80464dc:	2300      	movs	r3, #0
 80464de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80464e0:	68fb      	ldr	r3, [r7, #12]
 80464e2:	3301      	adds	r3, #1
 80464e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80464e6:	68fb      	ldr	r3, [r7, #12]
 80464e8:	4a13      	ldr	r2, [pc, #76]	; (8046538 <USB_CoreReset+0x64>)
 80464ea:	4293      	cmp	r3, r2
 80464ec:	d901      	bls.n	80464f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80464ee:	2303      	movs	r3, #3
 80464f0:	e01b      	b.n	804652a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80464f2:	687b      	ldr	r3, [r7, #4]
 80464f4:	691b      	ldr	r3, [r3, #16]
 80464f6:	2b00      	cmp	r3, #0
 80464f8:	daf2      	bge.n	80464e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80464fa:	2300      	movs	r3, #0
 80464fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80464fe:	687b      	ldr	r3, [r7, #4]
 8046500:	691b      	ldr	r3, [r3, #16]
 8046502:	f043 0201 	orr.w	r2, r3, #1
 8046506:	687b      	ldr	r3, [r7, #4]
 8046508:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804650a:	68fb      	ldr	r3, [r7, #12]
 804650c:	3301      	adds	r3, #1
 804650e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8046510:	68fb      	ldr	r3, [r7, #12]
 8046512:	4a09      	ldr	r2, [pc, #36]	; (8046538 <USB_CoreReset+0x64>)
 8046514:	4293      	cmp	r3, r2
 8046516:	d901      	bls.n	804651c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8046518:	2303      	movs	r3, #3
 804651a:	e006      	b.n	804652a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 804651c:	687b      	ldr	r3, [r7, #4]
 804651e:	691b      	ldr	r3, [r3, #16]
 8046520:	f003 0301 	and.w	r3, r3, #1
 8046524:	2b01      	cmp	r3, #1
 8046526:	d0f0      	beq.n	804650a <USB_CoreReset+0x36>

  return HAL_OK;
 8046528:	2300      	movs	r3, #0
}
 804652a:	4618      	mov	r0, r3
 804652c:	3714      	adds	r7, #20
 804652e:	46bd      	mov	sp, r7
 8046530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046534:	4770      	bx	lr
 8046536:	bf00      	nop
 8046538:	00030d40 	.word	0x00030d40

0804653c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 804653c:	b084      	sub	sp, #16
 804653e:	b580      	push	{r7, lr}
 8046540:	b086      	sub	sp, #24
 8046542:	af00      	add	r7, sp, #0
 8046544:	6078      	str	r0, [r7, #4]
 8046546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 804654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 804654e:	2300      	movs	r3, #0
 8046550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046552:	687b      	ldr	r3, [r7, #4]
 8046554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8046556:	68fb      	ldr	r3, [r7, #12]
 8046558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 804655c:	461a      	mov	r2, r3
 804655e:	2300      	movs	r3, #0
 8046560:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8046562:	687b      	ldr	r3, [r7, #4]
 8046564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 804656a:	687b      	ldr	r3, [r7, #4]
 804656c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 804656e:	687b      	ldr	r3, [r7, #4]
 8046570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046572:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8046576:	687b      	ldr	r3, [r7, #4]
 8046578:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 804657a:	687b      	ldr	r3, [r7, #4]
 804657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804657e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8046582:	687b      	ldr	r3, [r7, #4]
 8046584:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8046586:	687b      	ldr	r3, [r7, #4]
 8046588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804658e:	2b00      	cmp	r3, #0
 8046590:	d018      	beq.n	80465c4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8046592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046594:	2b01      	cmp	r3, #1
 8046596:	d10a      	bne.n	80465ae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8046598:	68fb      	ldr	r3, [r7, #12]
 804659a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804659e:	681b      	ldr	r3, [r3, #0]
 80465a0:	68fa      	ldr	r2, [r7, #12]
 80465a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80465a6:	f043 0304 	orr.w	r3, r3, #4
 80465aa:	6013      	str	r3, [r2, #0]
 80465ac:	e014      	b.n	80465d8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80465ae:	68fb      	ldr	r3, [r7, #12]
 80465b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80465b4:	681b      	ldr	r3, [r3, #0]
 80465b6:	68fa      	ldr	r2, [r7, #12]
 80465b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80465bc:	f023 0304 	bic.w	r3, r3, #4
 80465c0:	6013      	str	r3, [r2, #0]
 80465c2:	e009      	b.n	80465d8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80465c4:	68fb      	ldr	r3, [r7, #12]
 80465c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80465ca:	681b      	ldr	r3, [r3, #0]
 80465cc:	68fa      	ldr	r2, [r7, #12]
 80465ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80465d2:	f023 0304 	bic.w	r3, r3, #4
 80465d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80465d8:	2110      	movs	r1, #16
 80465da:	6878      	ldr	r0, [r7, #4]
 80465dc:	f7ff fe5e 	bl	804629c <USB_FlushTxFifo>
 80465e0:	4603      	mov	r3, r0
 80465e2:	2b00      	cmp	r3, #0
 80465e4:	d001      	beq.n	80465ea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80465e6:	2301      	movs	r3, #1
 80465e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80465ea:	6878      	ldr	r0, [r7, #4]
 80465ec:	f7ff fe8a 	bl	8046304 <USB_FlushRxFifo>
 80465f0:	4603      	mov	r3, r0
 80465f2:	2b00      	cmp	r3, #0
 80465f4:	d001      	beq.n	80465fa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80465f6:	2301      	movs	r3, #1
 80465f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80465fa:	2300      	movs	r3, #0
 80465fc:	613b      	str	r3, [r7, #16]
 80465fe:	e015      	b.n	804662c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8046600:	693b      	ldr	r3, [r7, #16]
 8046602:	015a      	lsls	r2, r3, #5
 8046604:	68fb      	ldr	r3, [r7, #12]
 8046606:	4413      	add	r3, r2
 8046608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804660c:	461a      	mov	r2, r3
 804660e:	f04f 33ff 	mov.w	r3, #4294967295
 8046612:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8046614:	693b      	ldr	r3, [r7, #16]
 8046616:	015a      	lsls	r2, r3, #5
 8046618:	68fb      	ldr	r3, [r7, #12]
 804661a:	4413      	add	r3, r2
 804661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046620:	461a      	mov	r2, r3
 8046622:	2300      	movs	r3, #0
 8046624:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8046626:	693b      	ldr	r3, [r7, #16]
 8046628:	3301      	adds	r3, #1
 804662a:	613b      	str	r3, [r7, #16]
 804662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804662e:	693a      	ldr	r2, [r7, #16]
 8046630:	429a      	cmp	r2, r3
 8046632:	d3e5      	bcc.n	8046600 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8046634:	687b      	ldr	r3, [r7, #4]
 8046636:	2200      	movs	r2, #0
 8046638:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 804663a:	687b      	ldr	r3, [r7, #4]
 804663c:	f04f 32ff 	mov.w	r2, #4294967295
 8046640:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8046642:	687b      	ldr	r3, [r7, #4]
 8046644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8046646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804664a:	2b00      	cmp	r3, #0
 804664c:	d00b      	beq.n	8046666 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 804664e:	687b      	ldr	r3, [r7, #4]
 8046650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8046654:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8046656:	687b      	ldr	r3, [r7, #4]
 8046658:	4a13      	ldr	r2, [pc, #76]	; (80466a8 <USB_HostInit+0x16c>)
 804665a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 804665c:	687b      	ldr	r3, [r7, #4]
 804665e:	4a13      	ldr	r2, [pc, #76]	; (80466ac <USB_HostInit+0x170>)
 8046660:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8046664:	e009      	b.n	804667a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8046666:	687b      	ldr	r3, [r7, #4]
 8046668:	2280      	movs	r2, #128	; 0x80
 804666a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 804666c:	687b      	ldr	r3, [r7, #4]
 804666e:	4a10      	ldr	r2, [pc, #64]	; (80466b0 <USB_HostInit+0x174>)
 8046670:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8046672:	687b      	ldr	r3, [r7, #4]
 8046674:	4a0f      	ldr	r2, [pc, #60]	; (80466b4 <USB_HostInit+0x178>)
 8046676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 804667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804667c:	2b00      	cmp	r3, #0
 804667e:	d105      	bne.n	804668c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8046680:	687b      	ldr	r3, [r7, #4]
 8046682:	699b      	ldr	r3, [r3, #24]
 8046684:	f043 0210 	orr.w	r2, r3, #16
 8046688:	687b      	ldr	r3, [r7, #4]
 804668a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 804668c:	687b      	ldr	r3, [r7, #4]
 804668e:	699a      	ldr	r2, [r3, #24]
 8046690:	4b09      	ldr	r3, [pc, #36]	; (80466b8 <USB_HostInit+0x17c>)
 8046692:	4313      	orrs	r3, r2
 8046694:	687a      	ldr	r2, [r7, #4]
 8046696:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8046698:	7dfb      	ldrb	r3, [r7, #23]
}
 804669a:	4618      	mov	r0, r3
 804669c:	3718      	adds	r7, #24
 804669e:	46bd      	mov	sp, r7
 80466a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80466a4:	b004      	add	sp, #16
 80466a6:	4770      	bx	lr
 80466a8:	01000200 	.word	0x01000200
 80466ac:	00e00300 	.word	0x00e00300
 80466b0:	00600080 	.word	0x00600080
 80466b4:	004000e0 	.word	0x004000e0
 80466b8:	a3200008 	.word	0xa3200008

080466bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80466bc:	b480      	push	{r7}
 80466be:	b085      	sub	sp, #20
 80466c0:	af00      	add	r7, sp, #0
 80466c2:	6078      	str	r0, [r7, #4]
 80466c4:	460b      	mov	r3, r1
 80466c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80466c8:	687b      	ldr	r3, [r7, #4]
 80466ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80466cc:	68fb      	ldr	r3, [r7, #12]
 80466ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80466d2:	681b      	ldr	r3, [r3, #0]
 80466d4:	68fa      	ldr	r2, [r7, #12]
 80466d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80466da:	f023 0303 	bic.w	r3, r3, #3
 80466de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80466e0:	68fb      	ldr	r3, [r7, #12]
 80466e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80466e6:	681a      	ldr	r2, [r3, #0]
 80466e8:	78fb      	ldrb	r3, [r7, #3]
 80466ea:	f003 0303 	and.w	r3, r3, #3
 80466ee:	68f9      	ldr	r1, [r7, #12]
 80466f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80466f4:	4313      	orrs	r3, r2
 80466f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80466f8:	78fb      	ldrb	r3, [r7, #3]
 80466fa:	2b01      	cmp	r3, #1
 80466fc:	d107      	bne.n	804670e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80466fe:	68fb      	ldr	r3, [r7, #12]
 8046700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046704:	461a      	mov	r2, r3
 8046706:	f64b 3380 	movw	r3, #48000	; 0xbb80
 804670a:	6053      	str	r3, [r2, #4]
 804670c:	e009      	b.n	8046722 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 804670e:	78fb      	ldrb	r3, [r7, #3]
 8046710:	2b02      	cmp	r3, #2
 8046712:	d106      	bne.n	8046722 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8046714:	68fb      	ldr	r3, [r7, #12]
 8046716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804671a:	461a      	mov	r2, r3
 804671c:	f241 7370 	movw	r3, #6000	; 0x1770
 8046720:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8046722:	2300      	movs	r3, #0
}
 8046724:	4618      	mov	r0, r3
 8046726:	3714      	adds	r7, #20
 8046728:	46bd      	mov	sp, r7
 804672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804672e:	4770      	bx	lr

08046730 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8046730:	b580      	push	{r7, lr}
 8046732:	b084      	sub	sp, #16
 8046734:	af00      	add	r7, sp, #0
 8046736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046738:	687b      	ldr	r3, [r7, #4]
 804673a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 804673c:	2300      	movs	r3, #0
 804673e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8046740:	68fb      	ldr	r3, [r7, #12]
 8046742:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8046746:	681b      	ldr	r3, [r3, #0]
 8046748:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 804674a:	68bb      	ldr	r3, [r7, #8]
 804674c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8046750:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8046752:	68bb      	ldr	r3, [r7, #8]
 8046754:	68fa      	ldr	r2, [r7, #12]
 8046756:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804675e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8046760:	2064      	movs	r0, #100	; 0x64
 8046762:	f7fa ff75 	bl	8041650 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8046766:	68bb      	ldr	r3, [r7, #8]
 8046768:	68fa      	ldr	r2, [r7, #12]
 804676a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 804676e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8046772:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8046774:	200a      	movs	r0, #10
 8046776:	f7fa ff6b 	bl	8041650 <HAL_Delay>

  return HAL_OK;
 804677a:	2300      	movs	r3, #0
}
 804677c:	4618      	mov	r0, r3
 804677e:	3710      	adds	r7, #16
 8046780:	46bd      	mov	sp, r7
 8046782:	bd80      	pop	{r7, pc}

08046784 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8046784:	b480      	push	{r7}
 8046786:	b085      	sub	sp, #20
 8046788:	af00      	add	r7, sp, #0
 804678a:	6078      	str	r0, [r7, #4]
 804678c:	460b      	mov	r3, r1
 804678e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046790:	687b      	ldr	r3, [r7, #4]
 8046792:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8046794:	2300      	movs	r3, #0
 8046796:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8046798:	68fb      	ldr	r3, [r7, #12]
 804679a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804679e:	681b      	ldr	r3, [r3, #0]
 80467a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80467a2:	68bb      	ldr	r3, [r7, #8]
 80467a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80467a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80467aa:	68bb      	ldr	r3, [r7, #8]
 80467ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80467b0:	2b00      	cmp	r3, #0
 80467b2:	d109      	bne.n	80467c8 <USB_DriveVbus+0x44>
 80467b4:	78fb      	ldrb	r3, [r7, #3]
 80467b6:	2b01      	cmp	r3, #1
 80467b8:	d106      	bne.n	80467c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80467ba:	68bb      	ldr	r3, [r7, #8]
 80467bc:	68fa      	ldr	r2, [r7, #12]
 80467be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80467c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80467c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80467c8:	68bb      	ldr	r3, [r7, #8]
 80467ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80467ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80467d2:	d109      	bne.n	80467e8 <USB_DriveVbus+0x64>
 80467d4:	78fb      	ldrb	r3, [r7, #3]
 80467d6:	2b00      	cmp	r3, #0
 80467d8:	d106      	bne.n	80467e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80467da:	68bb      	ldr	r3, [r7, #8]
 80467dc:	68fa      	ldr	r2, [r7, #12]
 80467de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80467e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80467e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80467e8:	2300      	movs	r3, #0
}
 80467ea:	4618      	mov	r0, r3
 80467ec:	3714      	adds	r7, #20
 80467ee:	46bd      	mov	sp, r7
 80467f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80467f4:	4770      	bx	lr

080467f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80467f6:	b480      	push	{r7}
 80467f8:	b085      	sub	sp, #20
 80467fa:	af00      	add	r7, sp, #0
 80467fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80467fe:	687b      	ldr	r3, [r7, #4]
 8046800:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8046802:	2300      	movs	r3, #0
 8046804:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8046806:	68fb      	ldr	r3, [r7, #12]
 8046808:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 804680c:	681b      	ldr	r3, [r3, #0]
 804680e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8046810:	68bb      	ldr	r3, [r7, #8]
 8046812:	0c5b      	lsrs	r3, r3, #17
 8046814:	f003 0303 	and.w	r3, r3, #3
}
 8046818:	4618      	mov	r0, r3
 804681a:	3714      	adds	r7, #20
 804681c:	46bd      	mov	sp, r7
 804681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046822:	4770      	bx	lr

08046824 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8046824:	b480      	push	{r7}
 8046826:	b085      	sub	sp, #20
 8046828:	af00      	add	r7, sp, #0
 804682a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804682c:	687b      	ldr	r3, [r7, #4]
 804682e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8046830:	68fb      	ldr	r3, [r7, #12]
 8046832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046836:	689b      	ldr	r3, [r3, #8]
 8046838:	b29b      	uxth	r3, r3
}
 804683a:	4618      	mov	r0, r3
 804683c:	3714      	adds	r7, #20
 804683e:	46bd      	mov	sp, r7
 8046840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046844:	4770      	bx	lr
	...

08046848 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8046848:	b580      	push	{r7, lr}
 804684a:	b088      	sub	sp, #32
 804684c:	af00      	add	r7, sp, #0
 804684e:	6078      	str	r0, [r7, #4]
 8046850:	4608      	mov	r0, r1
 8046852:	4611      	mov	r1, r2
 8046854:	461a      	mov	r2, r3
 8046856:	4603      	mov	r3, r0
 8046858:	70fb      	strb	r3, [r7, #3]
 804685a:	460b      	mov	r3, r1
 804685c:	70bb      	strb	r3, [r7, #2]
 804685e:	4613      	mov	r3, r2
 8046860:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8046862:	2300      	movs	r3, #0
 8046864:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046866:	687b      	ldr	r3, [r7, #4]
 8046868:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 804686a:	78fb      	ldrb	r3, [r7, #3]
 804686c:	015a      	lsls	r2, r3, #5
 804686e:	693b      	ldr	r3, [r7, #16]
 8046870:	4413      	add	r3, r2
 8046872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046876:	461a      	mov	r2, r3
 8046878:	f04f 33ff 	mov.w	r3, #4294967295
 804687c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 804687e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8046882:	2b03      	cmp	r3, #3
 8046884:	d87e      	bhi.n	8046984 <USB_HC_Init+0x13c>
 8046886:	a201      	add	r2, pc, #4	; (adr r2, 804688c <USB_HC_Init+0x44>)
 8046888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804688c:	0804689d 	.word	0x0804689d
 8046890:	08046947 	.word	0x08046947
 8046894:	0804689d 	.word	0x0804689d
 8046898:	08046909 	.word	0x08046909
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 804689c:	78fb      	ldrb	r3, [r7, #3]
 804689e:	015a      	lsls	r2, r3, #5
 80468a0:	693b      	ldr	r3, [r7, #16]
 80468a2:	4413      	add	r3, r2
 80468a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80468a8:	461a      	mov	r2, r3
 80468aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80468ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80468b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80468b4:	2b00      	cmp	r3, #0
 80468b6:	da10      	bge.n	80468da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80468b8:	78fb      	ldrb	r3, [r7, #3]
 80468ba:	015a      	lsls	r2, r3, #5
 80468bc:	693b      	ldr	r3, [r7, #16]
 80468be:	4413      	add	r3, r2
 80468c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80468c4:	68db      	ldr	r3, [r3, #12]
 80468c6:	78fa      	ldrb	r2, [r7, #3]
 80468c8:	0151      	lsls	r1, r2, #5
 80468ca:	693a      	ldr	r2, [r7, #16]
 80468cc:	440a      	add	r2, r1
 80468ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80468d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80468d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80468d8:	e057      	b.n	804698a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80468da:	687b      	ldr	r3, [r7, #4]
 80468dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80468de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80468e2:	2b00      	cmp	r3, #0
 80468e4:	d051      	beq.n	804698a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80468e6:	78fb      	ldrb	r3, [r7, #3]
 80468e8:	015a      	lsls	r2, r3, #5
 80468ea:	693b      	ldr	r3, [r7, #16]
 80468ec:	4413      	add	r3, r2
 80468ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80468f2:	68db      	ldr	r3, [r3, #12]
 80468f4:	78fa      	ldrb	r2, [r7, #3]
 80468f6:	0151      	lsls	r1, r2, #5
 80468f8:	693a      	ldr	r2, [r7, #16]
 80468fa:	440a      	add	r2, r1
 80468fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046900:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8046904:	60d3      	str	r3, [r2, #12]
      break;
 8046906:	e040      	b.n	804698a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8046908:	78fb      	ldrb	r3, [r7, #3]
 804690a:	015a      	lsls	r2, r3, #5
 804690c:	693b      	ldr	r3, [r7, #16]
 804690e:	4413      	add	r3, r2
 8046910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046914:	461a      	mov	r2, r3
 8046916:	f240 639d 	movw	r3, #1693	; 0x69d
 804691a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804691c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8046920:	2b00      	cmp	r3, #0
 8046922:	da34      	bge.n	804698e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8046924:	78fb      	ldrb	r3, [r7, #3]
 8046926:	015a      	lsls	r2, r3, #5
 8046928:	693b      	ldr	r3, [r7, #16]
 804692a:	4413      	add	r3, r2
 804692c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046930:	68db      	ldr	r3, [r3, #12]
 8046932:	78fa      	ldrb	r2, [r7, #3]
 8046934:	0151      	lsls	r1, r2, #5
 8046936:	693a      	ldr	r2, [r7, #16]
 8046938:	440a      	add	r2, r1
 804693a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046942:	60d3      	str	r3, [r2, #12]
      }

      break;
 8046944:	e023      	b.n	804698e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8046946:	78fb      	ldrb	r3, [r7, #3]
 8046948:	015a      	lsls	r2, r3, #5
 804694a:	693b      	ldr	r3, [r7, #16]
 804694c:	4413      	add	r3, r2
 804694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046952:	461a      	mov	r2, r3
 8046954:	f240 2325 	movw	r3, #549	; 0x225
 8046958:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 804695a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804695e:	2b00      	cmp	r3, #0
 8046960:	da17      	bge.n	8046992 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8046962:	78fb      	ldrb	r3, [r7, #3]
 8046964:	015a      	lsls	r2, r3, #5
 8046966:	693b      	ldr	r3, [r7, #16]
 8046968:	4413      	add	r3, r2
 804696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804696e:	68db      	ldr	r3, [r3, #12]
 8046970:	78fa      	ldrb	r2, [r7, #3]
 8046972:	0151      	lsls	r1, r2, #5
 8046974:	693a      	ldr	r2, [r7, #16]
 8046976:	440a      	add	r2, r1
 8046978:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804697c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8046980:	60d3      	str	r3, [r2, #12]
      }
      break;
 8046982:	e006      	b.n	8046992 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8046984:	2301      	movs	r3, #1
 8046986:	77fb      	strb	r3, [r7, #31]
      break;
 8046988:	e004      	b.n	8046994 <USB_HC_Init+0x14c>
      break;
 804698a:	bf00      	nop
 804698c:	e002      	b.n	8046994 <USB_HC_Init+0x14c>
      break;
 804698e:	bf00      	nop
 8046990:	e000      	b.n	8046994 <USB_HC_Init+0x14c>
      break;
 8046992:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8046994:	78fb      	ldrb	r3, [r7, #3]
 8046996:	015a      	lsls	r2, r3, #5
 8046998:	693b      	ldr	r3, [r7, #16]
 804699a:	4413      	add	r3, r2
 804699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80469a0:	68db      	ldr	r3, [r3, #12]
 80469a2:	78fa      	ldrb	r2, [r7, #3]
 80469a4:	0151      	lsls	r1, r2, #5
 80469a6:	693a      	ldr	r2, [r7, #16]
 80469a8:	440a      	add	r2, r1
 80469aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80469ae:	f043 0302 	orr.w	r3, r3, #2
 80469b2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80469b4:	693b      	ldr	r3, [r7, #16]
 80469b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80469ba:	699a      	ldr	r2, [r3, #24]
 80469bc:	78fb      	ldrb	r3, [r7, #3]
 80469be:	f003 030f 	and.w	r3, r3, #15
 80469c2:	2101      	movs	r1, #1
 80469c4:	fa01 f303 	lsl.w	r3, r1, r3
 80469c8:	6939      	ldr	r1, [r7, #16]
 80469ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80469ce:	4313      	orrs	r3, r2
 80469d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80469d2:	687b      	ldr	r3, [r7, #4]
 80469d4:	699b      	ldr	r3, [r3, #24]
 80469d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80469da:	687b      	ldr	r3, [r7, #4]
 80469dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80469de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80469e2:	2b00      	cmp	r3, #0
 80469e4:	da03      	bge.n	80469ee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80469e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80469ea:	61bb      	str	r3, [r7, #24]
 80469ec:	e001      	b.n	80469f2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80469ee:	2300      	movs	r3, #0
 80469f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80469f2:	6878      	ldr	r0, [r7, #4]
 80469f4:	f7ff feff 	bl	80467f6 <USB_GetHostSpeed>
 80469f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80469fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80469fe:	2b02      	cmp	r3, #2
 8046a00:	d106      	bne.n	8046a10 <USB_HC_Init+0x1c8>
 8046a02:	68fb      	ldr	r3, [r7, #12]
 8046a04:	2b02      	cmp	r3, #2
 8046a06:	d003      	beq.n	8046a10 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8046a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8046a0c:	617b      	str	r3, [r7, #20]
 8046a0e:	e001      	b.n	8046a14 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8046a10:	2300      	movs	r3, #0
 8046a12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8046a14:	787b      	ldrb	r3, [r7, #1]
 8046a16:	059b      	lsls	r3, r3, #22
 8046a18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8046a1c:	78bb      	ldrb	r3, [r7, #2]
 8046a1e:	02db      	lsls	r3, r3, #11
 8046a20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8046a24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8046a26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8046a2a:	049b      	lsls	r3, r3, #18
 8046a2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8046a30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8046a32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8046a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8046a38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8046a3a:	69bb      	ldr	r3, [r7, #24]
 8046a3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8046a3e:	78fb      	ldrb	r3, [r7, #3]
 8046a40:	0159      	lsls	r1, r3, #5
 8046a42:	693b      	ldr	r3, [r7, #16]
 8046a44:	440b      	add	r3, r1
 8046a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046a4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8046a4c:	697b      	ldr	r3, [r7, #20]
 8046a4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8046a50:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8046a52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8046a56:	2b03      	cmp	r3, #3
 8046a58:	d003      	beq.n	8046a62 <USB_HC_Init+0x21a>
 8046a5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8046a5e:	2b01      	cmp	r3, #1
 8046a60:	d10f      	bne.n	8046a82 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8046a62:	78fb      	ldrb	r3, [r7, #3]
 8046a64:	015a      	lsls	r2, r3, #5
 8046a66:	693b      	ldr	r3, [r7, #16]
 8046a68:	4413      	add	r3, r2
 8046a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046a6e:	681b      	ldr	r3, [r3, #0]
 8046a70:	78fa      	ldrb	r2, [r7, #3]
 8046a72:	0151      	lsls	r1, r2, #5
 8046a74:	693a      	ldr	r2, [r7, #16]
 8046a76:	440a      	add	r2, r1
 8046a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8046a80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8046a82:	7ffb      	ldrb	r3, [r7, #31]
}
 8046a84:	4618      	mov	r0, r3
 8046a86:	3720      	adds	r7, #32
 8046a88:	46bd      	mov	sp, r7
 8046a8a:	bd80      	pop	{r7, pc}

08046a8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8046a8c:	b580      	push	{r7, lr}
 8046a8e:	b08c      	sub	sp, #48	; 0x30
 8046a90:	af02      	add	r7, sp, #8
 8046a92:	60f8      	str	r0, [r7, #12]
 8046a94:	60b9      	str	r1, [r7, #8]
 8046a96:	4613      	mov	r3, r2
 8046a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046a9a:	68fb      	ldr	r3, [r7, #12]
 8046a9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8046a9e:	68bb      	ldr	r3, [r7, #8]
 8046aa0:	785b      	ldrb	r3, [r3, #1]
 8046aa2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8046aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8046aa8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8046aaa:	68fb      	ldr	r3, [r7, #12]
 8046aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8046aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046ab2:	2b00      	cmp	r3, #0
 8046ab4:	d02d      	beq.n	8046b12 <USB_HC_StartXfer+0x86>
 8046ab6:	68bb      	ldr	r3, [r7, #8]
 8046ab8:	791b      	ldrb	r3, [r3, #4]
 8046aba:	2b00      	cmp	r3, #0
 8046abc:	d129      	bne.n	8046b12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8046abe:	79fb      	ldrb	r3, [r7, #7]
 8046ac0:	2b01      	cmp	r3, #1
 8046ac2:	d117      	bne.n	8046af4 <USB_HC_StartXfer+0x68>
 8046ac4:	68bb      	ldr	r3, [r7, #8]
 8046ac6:	79db      	ldrb	r3, [r3, #7]
 8046ac8:	2b00      	cmp	r3, #0
 8046aca:	d003      	beq.n	8046ad4 <USB_HC_StartXfer+0x48>
 8046acc:	68bb      	ldr	r3, [r7, #8]
 8046ace:	79db      	ldrb	r3, [r3, #7]
 8046ad0:	2b02      	cmp	r3, #2
 8046ad2:	d10f      	bne.n	8046af4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8046ad4:	69fb      	ldr	r3, [r7, #28]
 8046ad6:	015a      	lsls	r2, r3, #5
 8046ad8:	6a3b      	ldr	r3, [r7, #32]
 8046ada:	4413      	add	r3, r2
 8046adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046ae0:	68db      	ldr	r3, [r3, #12]
 8046ae2:	69fa      	ldr	r2, [r7, #28]
 8046ae4:	0151      	lsls	r1, r2, #5
 8046ae6:	6a3a      	ldr	r2, [r7, #32]
 8046ae8:	440a      	add	r2, r1
 8046aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8046af2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8046af4:	79fb      	ldrb	r3, [r7, #7]
 8046af6:	2b00      	cmp	r3, #0
 8046af8:	d10b      	bne.n	8046b12 <USB_HC_StartXfer+0x86>
 8046afa:	68bb      	ldr	r3, [r7, #8]
 8046afc:	795b      	ldrb	r3, [r3, #5]
 8046afe:	2b01      	cmp	r3, #1
 8046b00:	d107      	bne.n	8046b12 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8046b02:	68bb      	ldr	r3, [r7, #8]
 8046b04:	785b      	ldrb	r3, [r3, #1]
 8046b06:	4619      	mov	r1, r3
 8046b08:	68f8      	ldr	r0, [r7, #12]
 8046b0a:	f000 fa0f 	bl	8046f2c <USB_DoPing>
      return HAL_OK;
 8046b0e:	2300      	movs	r3, #0
 8046b10:	e0f8      	b.n	8046d04 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8046b12:	68bb      	ldr	r3, [r7, #8]
 8046b14:	695b      	ldr	r3, [r3, #20]
 8046b16:	2b00      	cmp	r3, #0
 8046b18:	d018      	beq.n	8046b4c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8046b1a:	68bb      	ldr	r3, [r7, #8]
 8046b1c:	695b      	ldr	r3, [r3, #20]
 8046b1e:	68ba      	ldr	r2, [r7, #8]
 8046b20:	8912      	ldrh	r2, [r2, #8]
 8046b22:	4413      	add	r3, r2
 8046b24:	3b01      	subs	r3, #1
 8046b26:	68ba      	ldr	r2, [r7, #8]
 8046b28:	8912      	ldrh	r2, [r2, #8]
 8046b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8046b2e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8046b30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8046b32:	8b7b      	ldrh	r3, [r7, #26]
 8046b34:	429a      	cmp	r2, r3
 8046b36:	d90b      	bls.n	8046b50 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8046b38:	8b7b      	ldrh	r3, [r7, #26]
 8046b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8046b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8046b3e:	68ba      	ldr	r2, [r7, #8]
 8046b40:	8912      	ldrh	r2, [r2, #8]
 8046b42:	fb03 f202 	mul.w	r2, r3, r2
 8046b46:	68bb      	ldr	r3, [r7, #8]
 8046b48:	611a      	str	r2, [r3, #16]
 8046b4a:	e001      	b.n	8046b50 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8046b4c:	2301      	movs	r3, #1
 8046b4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8046b50:	68bb      	ldr	r3, [r7, #8]
 8046b52:	78db      	ldrb	r3, [r3, #3]
 8046b54:	2b00      	cmp	r3, #0
 8046b56:	d007      	beq.n	8046b68 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8046b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8046b5a:	68ba      	ldr	r2, [r7, #8]
 8046b5c:	8912      	ldrh	r2, [r2, #8]
 8046b5e:	fb03 f202 	mul.w	r2, r3, r2
 8046b62:	68bb      	ldr	r3, [r7, #8]
 8046b64:	611a      	str	r2, [r3, #16]
 8046b66:	e003      	b.n	8046b70 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8046b68:	68bb      	ldr	r3, [r7, #8]
 8046b6a:	695a      	ldr	r2, [r3, #20]
 8046b6c:	68bb      	ldr	r3, [r7, #8]
 8046b6e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8046b70:	68bb      	ldr	r3, [r7, #8]
 8046b72:	691b      	ldr	r3, [r3, #16]
 8046b74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8046b78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8046b7a:	04d9      	lsls	r1, r3, #19
 8046b7c:	4b63      	ldr	r3, [pc, #396]	; (8046d0c <USB_HC_StartXfer+0x280>)
 8046b7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8046b80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8046b82:	68bb      	ldr	r3, [r7, #8]
 8046b84:	7a9b      	ldrb	r3, [r3, #10]
 8046b86:	075b      	lsls	r3, r3, #29
 8046b88:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8046b8c:	69f9      	ldr	r1, [r7, #28]
 8046b8e:	0148      	lsls	r0, r1, #5
 8046b90:	6a39      	ldr	r1, [r7, #32]
 8046b92:	4401      	add	r1, r0
 8046b94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8046b98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8046b9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8046b9c:	79fb      	ldrb	r3, [r7, #7]
 8046b9e:	2b00      	cmp	r3, #0
 8046ba0:	d009      	beq.n	8046bb6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8046ba2:	68bb      	ldr	r3, [r7, #8]
 8046ba4:	68d9      	ldr	r1, [r3, #12]
 8046ba6:	69fb      	ldr	r3, [r7, #28]
 8046ba8:	015a      	lsls	r2, r3, #5
 8046baa:	6a3b      	ldr	r3, [r7, #32]
 8046bac:	4413      	add	r3, r2
 8046bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046bb2:	460a      	mov	r2, r1
 8046bb4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8046bb6:	6a3b      	ldr	r3, [r7, #32]
 8046bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046bbc:	689b      	ldr	r3, [r3, #8]
 8046bbe:	f003 0301 	and.w	r3, r3, #1
 8046bc2:	2b00      	cmp	r3, #0
 8046bc4:	bf0c      	ite	eq
 8046bc6:	2301      	moveq	r3, #1
 8046bc8:	2300      	movne	r3, #0
 8046bca:	b2db      	uxtb	r3, r3
 8046bcc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8046bce:	69fb      	ldr	r3, [r7, #28]
 8046bd0:	015a      	lsls	r2, r3, #5
 8046bd2:	6a3b      	ldr	r3, [r7, #32]
 8046bd4:	4413      	add	r3, r2
 8046bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046bda:	681b      	ldr	r3, [r3, #0]
 8046bdc:	69fa      	ldr	r2, [r7, #28]
 8046bde:	0151      	lsls	r1, r2, #5
 8046be0:	6a3a      	ldr	r2, [r7, #32]
 8046be2:	440a      	add	r2, r1
 8046be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046be8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8046bec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8046bee:	69fb      	ldr	r3, [r7, #28]
 8046bf0:	015a      	lsls	r2, r3, #5
 8046bf2:	6a3b      	ldr	r3, [r7, #32]
 8046bf4:	4413      	add	r3, r2
 8046bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046bfa:	681a      	ldr	r2, [r3, #0]
 8046bfc:	7e7b      	ldrb	r3, [r7, #25]
 8046bfe:	075b      	lsls	r3, r3, #29
 8046c00:	69f9      	ldr	r1, [r7, #28]
 8046c02:	0148      	lsls	r0, r1, #5
 8046c04:	6a39      	ldr	r1, [r7, #32]
 8046c06:	4401      	add	r1, r0
 8046c08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8046c0c:	4313      	orrs	r3, r2
 8046c0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8046c10:	69fb      	ldr	r3, [r7, #28]
 8046c12:	015a      	lsls	r2, r3, #5
 8046c14:	6a3b      	ldr	r3, [r7, #32]
 8046c16:	4413      	add	r3, r2
 8046c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046c1c:	681b      	ldr	r3, [r3, #0]
 8046c1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8046c20:	693b      	ldr	r3, [r7, #16]
 8046c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8046c26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8046c28:	68bb      	ldr	r3, [r7, #8]
 8046c2a:	78db      	ldrb	r3, [r3, #3]
 8046c2c:	2b00      	cmp	r3, #0
 8046c2e:	d004      	beq.n	8046c3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8046c30:	693b      	ldr	r3, [r7, #16]
 8046c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8046c36:	613b      	str	r3, [r7, #16]
 8046c38:	e003      	b.n	8046c42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8046c3a:	693b      	ldr	r3, [r7, #16]
 8046c3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8046c40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046c42:	693b      	ldr	r3, [r7, #16]
 8046c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046c48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8046c4a:	69fb      	ldr	r3, [r7, #28]
 8046c4c:	015a      	lsls	r2, r3, #5
 8046c4e:	6a3b      	ldr	r3, [r7, #32]
 8046c50:	4413      	add	r3, r2
 8046c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046c56:	461a      	mov	r2, r3
 8046c58:	693b      	ldr	r3, [r7, #16]
 8046c5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8046c5c:	79fb      	ldrb	r3, [r7, #7]
 8046c5e:	2b00      	cmp	r3, #0
 8046c60:	d001      	beq.n	8046c66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8046c62:	2300      	movs	r3, #0
 8046c64:	e04e      	b.n	8046d04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8046c66:	68bb      	ldr	r3, [r7, #8]
 8046c68:	78db      	ldrb	r3, [r3, #3]
 8046c6a:	2b00      	cmp	r3, #0
 8046c6c:	d149      	bne.n	8046d02 <USB_HC_StartXfer+0x276>
 8046c6e:	68bb      	ldr	r3, [r7, #8]
 8046c70:	695b      	ldr	r3, [r3, #20]
 8046c72:	2b00      	cmp	r3, #0
 8046c74:	d045      	beq.n	8046d02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8046c76:	68bb      	ldr	r3, [r7, #8]
 8046c78:	79db      	ldrb	r3, [r3, #7]
 8046c7a:	2b03      	cmp	r3, #3
 8046c7c:	d830      	bhi.n	8046ce0 <USB_HC_StartXfer+0x254>
 8046c7e:	a201      	add	r2, pc, #4	; (adr r2, 8046c84 <USB_HC_StartXfer+0x1f8>)
 8046c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046c84:	08046c95 	.word	0x08046c95
 8046c88:	08046cb9 	.word	0x08046cb9
 8046c8c:	08046c95 	.word	0x08046c95
 8046c90:	08046cb9 	.word	0x08046cb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8046c94:	68bb      	ldr	r3, [r7, #8]
 8046c96:	695b      	ldr	r3, [r3, #20]
 8046c98:	3303      	adds	r3, #3
 8046c9a:	089b      	lsrs	r3, r3, #2
 8046c9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8046c9e:	8afa      	ldrh	r2, [r7, #22]
 8046ca0:	68fb      	ldr	r3, [r7, #12]
 8046ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046ca4:	b29b      	uxth	r3, r3
 8046ca6:	429a      	cmp	r2, r3
 8046ca8:	d91c      	bls.n	8046ce4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8046caa:	68fb      	ldr	r3, [r7, #12]
 8046cac:	699b      	ldr	r3, [r3, #24]
 8046cae:	f043 0220 	orr.w	r2, r3, #32
 8046cb2:	68fb      	ldr	r3, [r7, #12]
 8046cb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8046cb6:	e015      	b.n	8046ce4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8046cb8:	68bb      	ldr	r3, [r7, #8]
 8046cba:	695b      	ldr	r3, [r3, #20]
 8046cbc:	3303      	adds	r3, #3
 8046cbe:	089b      	lsrs	r3, r3, #2
 8046cc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8046cc2:	8afa      	ldrh	r2, [r7, #22]
 8046cc4:	6a3b      	ldr	r3, [r7, #32]
 8046cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046cca:	691b      	ldr	r3, [r3, #16]
 8046ccc:	b29b      	uxth	r3, r3
 8046cce:	429a      	cmp	r2, r3
 8046cd0:	d90a      	bls.n	8046ce8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8046cd2:	68fb      	ldr	r3, [r7, #12]
 8046cd4:	699b      	ldr	r3, [r3, #24]
 8046cd6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8046cda:	68fb      	ldr	r3, [r7, #12]
 8046cdc:	619a      	str	r2, [r3, #24]
        }
        break;
 8046cde:	e003      	b.n	8046ce8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8046ce0:	bf00      	nop
 8046ce2:	e002      	b.n	8046cea <USB_HC_StartXfer+0x25e>
        break;
 8046ce4:	bf00      	nop
 8046ce6:	e000      	b.n	8046cea <USB_HC_StartXfer+0x25e>
        break;
 8046ce8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8046cea:	68bb      	ldr	r3, [r7, #8]
 8046cec:	68d9      	ldr	r1, [r3, #12]
 8046cee:	68bb      	ldr	r3, [r7, #8]
 8046cf0:	785a      	ldrb	r2, [r3, #1]
 8046cf2:	68bb      	ldr	r3, [r7, #8]
 8046cf4:	695b      	ldr	r3, [r3, #20]
 8046cf6:	b29b      	uxth	r3, r3
 8046cf8:	2000      	movs	r0, #0
 8046cfa:	9000      	str	r0, [sp, #0]
 8046cfc:	68f8      	ldr	r0, [r7, #12]
 8046cfe:	f7ff fb31 	bl	8046364 <USB_WritePacket>
  }

  return HAL_OK;
 8046d02:	2300      	movs	r3, #0
}
 8046d04:	4618      	mov	r0, r3
 8046d06:	3728      	adds	r7, #40	; 0x28
 8046d08:	46bd      	mov	sp, r7
 8046d0a:	bd80      	pop	{r7, pc}
 8046d0c:	1ff80000 	.word	0x1ff80000

08046d10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8046d10:	b480      	push	{r7}
 8046d12:	b085      	sub	sp, #20
 8046d14:	af00      	add	r7, sp, #0
 8046d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046d18:	687b      	ldr	r3, [r7, #4]
 8046d1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8046d1c:	68fb      	ldr	r3, [r7, #12]
 8046d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046d22:	695b      	ldr	r3, [r3, #20]
 8046d24:	b29b      	uxth	r3, r3
}
 8046d26:	4618      	mov	r0, r3
 8046d28:	3714      	adds	r7, #20
 8046d2a:	46bd      	mov	sp, r7
 8046d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d30:	4770      	bx	lr

08046d32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8046d32:	b480      	push	{r7}
 8046d34:	b089      	sub	sp, #36	; 0x24
 8046d36:	af00      	add	r7, sp, #0
 8046d38:	6078      	str	r0, [r7, #4]
 8046d3a:	460b      	mov	r3, r1
 8046d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046d3e:	687b      	ldr	r3, [r7, #4]
 8046d40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8046d42:	78fb      	ldrb	r3, [r7, #3]
 8046d44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8046d46:	2300      	movs	r3, #0
 8046d48:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8046d4a:	69bb      	ldr	r3, [r7, #24]
 8046d4c:	015a      	lsls	r2, r3, #5
 8046d4e:	69fb      	ldr	r3, [r7, #28]
 8046d50:	4413      	add	r3, r2
 8046d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046d56:	681b      	ldr	r3, [r3, #0]
 8046d58:	0c9b      	lsrs	r3, r3, #18
 8046d5a:	f003 0303 	and.w	r3, r3, #3
 8046d5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8046d60:	69bb      	ldr	r3, [r7, #24]
 8046d62:	015a      	lsls	r2, r3, #5
 8046d64:	69fb      	ldr	r3, [r7, #28]
 8046d66:	4413      	add	r3, r2
 8046d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046d6c:	681b      	ldr	r3, [r3, #0]
 8046d6e:	0fdb      	lsrs	r3, r3, #31
 8046d70:	f003 0301 	and.w	r3, r3, #1
 8046d74:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8046d76:	687b      	ldr	r3, [r7, #4]
 8046d78:	689b      	ldr	r3, [r3, #8]
 8046d7a:	f003 0320 	and.w	r3, r3, #32
 8046d7e:	2b20      	cmp	r3, #32
 8046d80:	d104      	bne.n	8046d8c <USB_HC_Halt+0x5a>
 8046d82:	693b      	ldr	r3, [r7, #16]
 8046d84:	2b00      	cmp	r3, #0
 8046d86:	d101      	bne.n	8046d8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8046d88:	2300      	movs	r3, #0
 8046d8a:	e0c8      	b.n	8046f1e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8046d8c:	697b      	ldr	r3, [r7, #20]
 8046d8e:	2b00      	cmp	r3, #0
 8046d90:	d002      	beq.n	8046d98 <USB_HC_Halt+0x66>
 8046d92:	697b      	ldr	r3, [r7, #20]
 8046d94:	2b02      	cmp	r3, #2
 8046d96:	d163      	bne.n	8046e60 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8046d98:	69bb      	ldr	r3, [r7, #24]
 8046d9a:	015a      	lsls	r2, r3, #5
 8046d9c:	69fb      	ldr	r3, [r7, #28]
 8046d9e:	4413      	add	r3, r2
 8046da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046da4:	681b      	ldr	r3, [r3, #0]
 8046da6:	69ba      	ldr	r2, [r7, #24]
 8046da8:	0151      	lsls	r1, r2, #5
 8046daa:	69fa      	ldr	r2, [r7, #28]
 8046dac:	440a      	add	r2, r1
 8046dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8046db6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8046db8:	687b      	ldr	r3, [r7, #4]
 8046dba:	689b      	ldr	r3, [r3, #8]
 8046dbc:	f003 0320 	and.w	r3, r3, #32
 8046dc0:	2b00      	cmp	r3, #0
 8046dc2:	f040 80ab 	bne.w	8046f1c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8046dc6:	687b      	ldr	r3, [r7, #4]
 8046dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046dca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8046dce:	2b00      	cmp	r3, #0
 8046dd0:	d133      	bne.n	8046e3a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8046dd2:	69bb      	ldr	r3, [r7, #24]
 8046dd4:	015a      	lsls	r2, r3, #5
 8046dd6:	69fb      	ldr	r3, [r7, #28]
 8046dd8:	4413      	add	r3, r2
 8046dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046dde:	681b      	ldr	r3, [r3, #0]
 8046de0:	69ba      	ldr	r2, [r7, #24]
 8046de2:	0151      	lsls	r1, r2, #5
 8046de4:	69fa      	ldr	r2, [r7, #28]
 8046de6:	440a      	add	r2, r1
 8046de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046df0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8046df2:	69bb      	ldr	r3, [r7, #24]
 8046df4:	015a      	lsls	r2, r3, #5
 8046df6:	69fb      	ldr	r3, [r7, #28]
 8046df8:	4413      	add	r3, r2
 8046dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046dfe:	681b      	ldr	r3, [r3, #0]
 8046e00:	69ba      	ldr	r2, [r7, #24]
 8046e02:	0151      	lsls	r1, r2, #5
 8046e04:	69fa      	ldr	r2, [r7, #28]
 8046e06:	440a      	add	r2, r1
 8046e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046e0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046e10:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8046e12:	68fb      	ldr	r3, [r7, #12]
 8046e14:	3301      	adds	r3, #1
 8046e16:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8046e18:	68fb      	ldr	r3, [r7, #12]
 8046e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8046e1e:	d81d      	bhi.n	8046e5c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8046e20:	69bb      	ldr	r3, [r7, #24]
 8046e22:	015a      	lsls	r2, r3, #5
 8046e24:	69fb      	ldr	r3, [r7, #28]
 8046e26:	4413      	add	r3, r2
 8046e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046e2c:	681b      	ldr	r3, [r3, #0]
 8046e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8046e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8046e36:	d0ec      	beq.n	8046e12 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8046e38:	e070      	b.n	8046f1c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8046e3a:	69bb      	ldr	r3, [r7, #24]
 8046e3c:	015a      	lsls	r2, r3, #5
 8046e3e:	69fb      	ldr	r3, [r7, #28]
 8046e40:	4413      	add	r3, r2
 8046e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046e46:	681b      	ldr	r3, [r3, #0]
 8046e48:	69ba      	ldr	r2, [r7, #24]
 8046e4a:	0151      	lsls	r1, r2, #5
 8046e4c:	69fa      	ldr	r2, [r7, #28]
 8046e4e:	440a      	add	r2, r1
 8046e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046e58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8046e5a:	e05f      	b.n	8046f1c <USB_HC_Halt+0x1ea>
            break;
 8046e5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8046e5e:	e05d      	b.n	8046f1c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8046e60:	69bb      	ldr	r3, [r7, #24]
 8046e62:	015a      	lsls	r2, r3, #5
 8046e64:	69fb      	ldr	r3, [r7, #28]
 8046e66:	4413      	add	r3, r2
 8046e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046e6c:	681b      	ldr	r3, [r3, #0]
 8046e6e:	69ba      	ldr	r2, [r7, #24]
 8046e70:	0151      	lsls	r1, r2, #5
 8046e72:	69fa      	ldr	r2, [r7, #28]
 8046e74:	440a      	add	r2, r1
 8046e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8046e7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8046e80:	69fb      	ldr	r3, [r7, #28]
 8046e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8046e86:	691b      	ldr	r3, [r3, #16]
 8046e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8046e8c:	2b00      	cmp	r3, #0
 8046e8e:	d133      	bne.n	8046ef8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8046e90:	69bb      	ldr	r3, [r7, #24]
 8046e92:	015a      	lsls	r2, r3, #5
 8046e94:	69fb      	ldr	r3, [r7, #28]
 8046e96:	4413      	add	r3, r2
 8046e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046e9c:	681b      	ldr	r3, [r3, #0]
 8046e9e:	69ba      	ldr	r2, [r7, #24]
 8046ea0:	0151      	lsls	r1, r2, #5
 8046ea2:	69fa      	ldr	r2, [r7, #28]
 8046ea4:	440a      	add	r2, r1
 8046ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046eaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046eae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8046eb0:	69bb      	ldr	r3, [r7, #24]
 8046eb2:	015a      	lsls	r2, r3, #5
 8046eb4:	69fb      	ldr	r3, [r7, #28]
 8046eb6:	4413      	add	r3, r2
 8046eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046ebc:	681b      	ldr	r3, [r3, #0]
 8046ebe:	69ba      	ldr	r2, [r7, #24]
 8046ec0:	0151      	lsls	r1, r2, #5
 8046ec2:	69fa      	ldr	r2, [r7, #28]
 8046ec4:	440a      	add	r2, r1
 8046ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046ece:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8046ed0:	68fb      	ldr	r3, [r7, #12]
 8046ed2:	3301      	adds	r3, #1
 8046ed4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8046ed6:	68fb      	ldr	r3, [r7, #12]
 8046ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8046edc:	d81d      	bhi.n	8046f1a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8046ede:	69bb      	ldr	r3, [r7, #24]
 8046ee0:	015a      	lsls	r2, r3, #5
 8046ee2:	69fb      	ldr	r3, [r7, #28]
 8046ee4:	4413      	add	r3, r2
 8046ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046eea:	681b      	ldr	r3, [r3, #0]
 8046eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8046ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8046ef4:	d0ec      	beq.n	8046ed0 <USB_HC_Halt+0x19e>
 8046ef6:	e011      	b.n	8046f1c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8046ef8:	69bb      	ldr	r3, [r7, #24]
 8046efa:	015a      	lsls	r2, r3, #5
 8046efc:	69fb      	ldr	r3, [r7, #28]
 8046efe:	4413      	add	r3, r2
 8046f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046f04:	681b      	ldr	r3, [r3, #0]
 8046f06:	69ba      	ldr	r2, [r7, #24]
 8046f08:	0151      	lsls	r1, r2, #5
 8046f0a:	69fa      	ldr	r2, [r7, #28]
 8046f0c:	440a      	add	r2, r1
 8046f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046f16:	6013      	str	r3, [r2, #0]
 8046f18:	e000      	b.n	8046f1c <USB_HC_Halt+0x1ea>
          break;
 8046f1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8046f1c:	2300      	movs	r3, #0
}
 8046f1e:	4618      	mov	r0, r3
 8046f20:	3724      	adds	r7, #36	; 0x24
 8046f22:	46bd      	mov	sp, r7
 8046f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f28:	4770      	bx	lr
	...

08046f2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8046f2c:	b480      	push	{r7}
 8046f2e:	b087      	sub	sp, #28
 8046f30:	af00      	add	r7, sp, #0
 8046f32:	6078      	str	r0, [r7, #4]
 8046f34:	460b      	mov	r3, r1
 8046f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046f38:	687b      	ldr	r3, [r7, #4]
 8046f3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8046f3c:	78fb      	ldrb	r3, [r7, #3]
 8046f3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8046f40:	2301      	movs	r3, #1
 8046f42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8046f44:	68fb      	ldr	r3, [r7, #12]
 8046f46:	04da      	lsls	r2, r3, #19
 8046f48:	4b15      	ldr	r3, [pc, #84]	; (8046fa0 <USB_DoPing+0x74>)
 8046f4a:	4013      	ands	r3, r2
 8046f4c:	693a      	ldr	r2, [r7, #16]
 8046f4e:	0151      	lsls	r1, r2, #5
 8046f50:	697a      	ldr	r2, [r7, #20]
 8046f52:	440a      	add	r2, r1
 8046f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8046f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046f5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8046f5e:	693b      	ldr	r3, [r7, #16]
 8046f60:	015a      	lsls	r2, r3, #5
 8046f62:	697b      	ldr	r3, [r7, #20]
 8046f64:	4413      	add	r3, r2
 8046f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046f6a:	681b      	ldr	r3, [r3, #0]
 8046f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8046f6e:	68bb      	ldr	r3, [r7, #8]
 8046f70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8046f74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8046f76:	68bb      	ldr	r3, [r7, #8]
 8046f78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8046f7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8046f7e:	693b      	ldr	r3, [r7, #16]
 8046f80:	015a      	lsls	r2, r3, #5
 8046f82:	697b      	ldr	r3, [r7, #20]
 8046f84:	4413      	add	r3, r2
 8046f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046f8a:	461a      	mov	r2, r3
 8046f8c:	68bb      	ldr	r3, [r7, #8]
 8046f8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8046f90:	2300      	movs	r3, #0
}
 8046f92:	4618      	mov	r0, r3
 8046f94:	371c      	adds	r7, #28
 8046f96:	46bd      	mov	sp, r7
 8046f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f9c:	4770      	bx	lr
 8046f9e:	bf00      	nop
 8046fa0:	1ff80000 	.word	0x1ff80000

08046fa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8046fa4:	b580      	push	{r7, lr}
 8046fa6:	b088      	sub	sp, #32
 8046fa8:	af00      	add	r7, sp, #0
 8046faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8046fac:	2300      	movs	r3, #0
 8046fae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8046fb0:	687b      	ldr	r3, [r7, #4]
 8046fb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8046fb4:	2300      	movs	r3, #0
 8046fb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8046fb8:	6878      	ldr	r0, [r7, #4]
 8046fba:	f7ff f911 	bl	80461e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8046fbe:	2110      	movs	r1, #16
 8046fc0:	6878      	ldr	r0, [r7, #4]
 8046fc2:	f7ff f96b 	bl	804629c <USB_FlushTxFifo>
 8046fc6:	4603      	mov	r3, r0
 8046fc8:	2b00      	cmp	r3, #0
 8046fca:	d001      	beq.n	8046fd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8046fcc:	2301      	movs	r3, #1
 8046fce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8046fd0:	6878      	ldr	r0, [r7, #4]
 8046fd2:	f7ff f997 	bl	8046304 <USB_FlushRxFifo>
 8046fd6:	4603      	mov	r3, r0
 8046fd8:	2b00      	cmp	r3, #0
 8046fda:	d001      	beq.n	8046fe0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8046fdc:	2301      	movs	r3, #1
 8046fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8046fe0:	2300      	movs	r3, #0
 8046fe2:	61bb      	str	r3, [r7, #24]
 8046fe4:	e01f      	b.n	8047026 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8046fe6:	69bb      	ldr	r3, [r7, #24]
 8046fe8:	015a      	lsls	r2, r3, #5
 8046fea:	697b      	ldr	r3, [r7, #20]
 8046fec:	4413      	add	r3, r2
 8046fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8046ff2:	681b      	ldr	r3, [r3, #0]
 8046ff4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8046ff6:	693b      	ldr	r3, [r7, #16]
 8046ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8046ffc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8046ffe:	693b      	ldr	r3, [r7, #16]
 8047000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8047004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8047006:	693b      	ldr	r3, [r7, #16]
 8047008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804700c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804700e:	69bb      	ldr	r3, [r7, #24]
 8047010:	015a      	lsls	r2, r3, #5
 8047012:	697b      	ldr	r3, [r7, #20]
 8047014:	4413      	add	r3, r2
 8047016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804701a:	461a      	mov	r2, r3
 804701c:	693b      	ldr	r3, [r7, #16]
 804701e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8047020:	69bb      	ldr	r3, [r7, #24]
 8047022:	3301      	adds	r3, #1
 8047024:	61bb      	str	r3, [r7, #24]
 8047026:	69bb      	ldr	r3, [r7, #24]
 8047028:	2b0f      	cmp	r3, #15
 804702a:	d9dc      	bls.n	8046fe6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804702c:	2300      	movs	r3, #0
 804702e:	61bb      	str	r3, [r7, #24]
 8047030:	e034      	b.n	804709c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8047032:	69bb      	ldr	r3, [r7, #24]
 8047034:	015a      	lsls	r2, r3, #5
 8047036:	697b      	ldr	r3, [r7, #20]
 8047038:	4413      	add	r3, r2
 804703a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804703e:	681b      	ldr	r3, [r3, #0]
 8047040:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8047042:	693b      	ldr	r3, [r7, #16]
 8047044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8047048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804704a:	693b      	ldr	r3, [r7, #16]
 804704c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8047050:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8047052:	693b      	ldr	r3, [r7, #16]
 8047054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8047058:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804705a:	69bb      	ldr	r3, [r7, #24]
 804705c:	015a      	lsls	r2, r3, #5
 804705e:	697b      	ldr	r3, [r7, #20]
 8047060:	4413      	add	r3, r2
 8047062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8047066:	461a      	mov	r2, r3
 8047068:	693b      	ldr	r3, [r7, #16]
 804706a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804706c:	68fb      	ldr	r3, [r7, #12]
 804706e:	3301      	adds	r3, #1
 8047070:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8047072:	68fb      	ldr	r3, [r7, #12]
 8047074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8047078:	d80c      	bhi.n	8047094 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804707a:	69bb      	ldr	r3, [r7, #24]
 804707c:	015a      	lsls	r2, r3, #5
 804707e:	697b      	ldr	r3, [r7, #20]
 8047080:	4413      	add	r3, r2
 8047082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8047086:	681b      	ldr	r3, [r3, #0]
 8047088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804708c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8047090:	d0ec      	beq.n	804706c <USB_StopHost+0xc8>
 8047092:	e000      	b.n	8047096 <USB_StopHost+0xf2>
        break;
 8047094:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8047096:	69bb      	ldr	r3, [r7, #24]
 8047098:	3301      	adds	r3, #1
 804709a:	61bb      	str	r3, [r7, #24]
 804709c:	69bb      	ldr	r3, [r7, #24]
 804709e:	2b0f      	cmp	r3, #15
 80470a0:	d9c7      	bls.n	8047032 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80470a2:	697b      	ldr	r3, [r7, #20]
 80470a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80470a8:	461a      	mov	r2, r3
 80470aa:	f04f 33ff 	mov.w	r3, #4294967295
 80470ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80470b0:	687b      	ldr	r3, [r7, #4]
 80470b2:	f04f 32ff 	mov.w	r2, #4294967295
 80470b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80470b8:	6878      	ldr	r0, [r7, #4]
 80470ba:	f7ff f880 	bl	80461be <USB_EnableGlobalInt>

  return ret;
 80470be:	7ffb      	ldrb	r3, [r7, #31]
}
 80470c0:	4618      	mov	r0, r3
 80470c2:	3720      	adds	r7, #32
 80470c4:	46bd      	mov	sp, r7
 80470c6:	bd80      	pop	{r7, pc}

080470c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80470c8:	b590      	push	{r4, r7, lr}
 80470ca:	b089      	sub	sp, #36	; 0x24
 80470cc:	af04      	add	r7, sp, #16
 80470ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80470d0:	2301      	movs	r3, #1
 80470d2:	2202      	movs	r2, #2
 80470d4:	2102      	movs	r1, #2
 80470d6:	6878      	ldr	r0, [r7, #4]
 80470d8:	f000 fc66 	bl	80479a8 <USBH_FindInterface>
 80470dc:	4603      	mov	r3, r0
 80470de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80470e0:	7bfb      	ldrb	r3, [r7, #15]
 80470e2:	2bff      	cmp	r3, #255	; 0xff
 80470e4:	d002      	beq.n	80470ec <USBH_CDC_InterfaceInit+0x24>
 80470e6:	7bfb      	ldrb	r3, [r7, #15]
 80470e8:	2b01      	cmp	r3, #1
 80470ea:	d901      	bls.n	80470f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80470ec:	2302      	movs	r3, #2
 80470ee:	e13d      	b.n	804736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80470f0:	7bfb      	ldrb	r3, [r7, #15]
 80470f2:	4619      	mov	r1, r3
 80470f4:	6878      	ldr	r0, [r7, #4]
 80470f6:	f000 fc3b 	bl	8047970 <USBH_SelectInterface>
 80470fa:	4603      	mov	r3, r0
 80470fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80470fe:	7bbb      	ldrb	r3, [r7, #14]
 8047100:	2b00      	cmp	r3, #0
 8047102:	d001      	beq.n	8047108 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8047104:	2302      	movs	r3, #2
 8047106:	e131      	b.n	804736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8047108:	687b      	ldr	r3, [r7, #4]
 804710a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804710e:	2050      	movs	r0, #80	; 0x50
 8047110:	f002 fb00 	bl	8049714 <malloc>
 8047114:	4603      	mov	r3, r0
 8047116:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8047118:	687b      	ldr	r3, [r7, #4]
 804711a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804711e:	69db      	ldr	r3, [r3, #28]
 8047120:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8047122:	68bb      	ldr	r3, [r7, #8]
 8047124:	2b00      	cmp	r3, #0
 8047126:	d101      	bne.n	804712c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8047128:	2302      	movs	r3, #2
 804712a:	e11f      	b.n	804736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804712c:	2250      	movs	r2, #80	; 0x50
 804712e:	2100      	movs	r1, #0
 8047130:	68b8      	ldr	r0, [r7, #8]
 8047132:	f002 faff 	bl	8049734 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8047136:	7bfb      	ldrb	r3, [r7, #15]
 8047138:	687a      	ldr	r2, [r7, #4]
 804713a:	211a      	movs	r1, #26
 804713c:	fb01 f303 	mul.w	r3, r1, r3
 8047140:	4413      	add	r3, r2
 8047142:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8047146:	781b      	ldrb	r3, [r3, #0]
 8047148:	b25b      	sxtb	r3, r3
 804714a:	2b00      	cmp	r3, #0
 804714c:	da15      	bge.n	804717a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804714e:	7bfb      	ldrb	r3, [r7, #15]
 8047150:	687a      	ldr	r2, [r7, #4]
 8047152:	211a      	movs	r1, #26
 8047154:	fb01 f303 	mul.w	r3, r1, r3
 8047158:	4413      	add	r3, r2
 804715a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804715e:	781a      	ldrb	r2, [r3, #0]
 8047160:	68bb      	ldr	r3, [r7, #8]
 8047162:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8047164:	7bfb      	ldrb	r3, [r7, #15]
 8047166:	687a      	ldr	r2, [r7, #4]
 8047168:	211a      	movs	r1, #26
 804716a:	fb01 f303 	mul.w	r3, r1, r3
 804716e:	4413      	add	r3, r2
 8047170:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8047174:	881a      	ldrh	r2, [r3, #0]
 8047176:	68bb      	ldr	r3, [r7, #8]
 8047178:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804717a:	68bb      	ldr	r3, [r7, #8]
 804717c:	785b      	ldrb	r3, [r3, #1]
 804717e:	4619      	mov	r1, r3
 8047180:	6878      	ldr	r0, [r7, #4]
 8047182:	f001 ff2c 	bl	8048fde <USBH_AllocPipe>
 8047186:	4603      	mov	r3, r0
 8047188:	461a      	mov	r2, r3
 804718a:	68bb      	ldr	r3, [r7, #8]
 804718c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804718e:	68bb      	ldr	r3, [r7, #8]
 8047190:	7819      	ldrb	r1, [r3, #0]
 8047192:	68bb      	ldr	r3, [r7, #8]
 8047194:	7858      	ldrb	r0, [r3, #1]
 8047196:	687b      	ldr	r3, [r7, #4]
 8047198:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804719c:	687b      	ldr	r3, [r7, #4]
 804719e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80471a2:	68ba      	ldr	r2, [r7, #8]
 80471a4:	8952      	ldrh	r2, [r2, #10]
 80471a6:	9202      	str	r2, [sp, #8]
 80471a8:	2203      	movs	r2, #3
 80471aa:	9201      	str	r2, [sp, #4]
 80471ac:	9300      	str	r3, [sp, #0]
 80471ae:	4623      	mov	r3, r4
 80471b0:	4602      	mov	r2, r0
 80471b2:	6878      	ldr	r0, [r7, #4]
 80471b4:	f001 fee4 	bl	8048f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80471b8:	68bb      	ldr	r3, [r7, #8]
 80471ba:	781b      	ldrb	r3, [r3, #0]
 80471bc:	2200      	movs	r2, #0
 80471be:	4619      	mov	r1, r3
 80471c0:	6878      	ldr	r0, [r7, #4]
 80471c2:	f002 f9f9 	bl	80495b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80471c6:	2300      	movs	r3, #0
 80471c8:	2200      	movs	r2, #0
 80471ca:	210a      	movs	r1, #10
 80471cc:	6878      	ldr	r0, [r7, #4]
 80471ce:	f000 fbeb 	bl	80479a8 <USBH_FindInterface>
 80471d2:	4603      	mov	r3, r0
 80471d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80471d6:	7bfb      	ldrb	r3, [r7, #15]
 80471d8:	2bff      	cmp	r3, #255	; 0xff
 80471da:	d002      	beq.n	80471e2 <USBH_CDC_InterfaceInit+0x11a>
 80471dc:	7bfb      	ldrb	r3, [r7, #15]
 80471de:	2b01      	cmp	r3, #1
 80471e0:	d901      	bls.n	80471e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80471e2:	2302      	movs	r3, #2
 80471e4:	e0c2      	b.n	804736c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80471e6:	7bfb      	ldrb	r3, [r7, #15]
 80471e8:	687a      	ldr	r2, [r7, #4]
 80471ea:	211a      	movs	r1, #26
 80471ec:	fb01 f303 	mul.w	r3, r1, r3
 80471f0:	4413      	add	r3, r2
 80471f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80471f6:	781b      	ldrb	r3, [r3, #0]
 80471f8:	b25b      	sxtb	r3, r3
 80471fa:	2b00      	cmp	r3, #0
 80471fc:	da16      	bge.n	804722c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80471fe:	7bfb      	ldrb	r3, [r7, #15]
 8047200:	687a      	ldr	r2, [r7, #4]
 8047202:	211a      	movs	r1, #26
 8047204:	fb01 f303 	mul.w	r3, r1, r3
 8047208:	4413      	add	r3, r2
 804720a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804720e:	781a      	ldrb	r2, [r3, #0]
 8047210:	68bb      	ldr	r3, [r7, #8]
 8047212:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8047214:	7bfb      	ldrb	r3, [r7, #15]
 8047216:	687a      	ldr	r2, [r7, #4]
 8047218:	211a      	movs	r1, #26
 804721a:	fb01 f303 	mul.w	r3, r1, r3
 804721e:	4413      	add	r3, r2
 8047220:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8047224:	881a      	ldrh	r2, [r3, #0]
 8047226:	68bb      	ldr	r3, [r7, #8]
 8047228:	835a      	strh	r2, [r3, #26]
 804722a:	e015      	b.n	8047258 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804722c:	7bfb      	ldrb	r3, [r7, #15]
 804722e:	687a      	ldr	r2, [r7, #4]
 8047230:	211a      	movs	r1, #26
 8047232:	fb01 f303 	mul.w	r3, r1, r3
 8047236:	4413      	add	r3, r2
 8047238:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804723c:	781a      	ldrb	r2, [r3, #0]
 804723e:	68bb      	ldr	r3, [r7, #8]
 8047240:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8047242:	7bfb      	ldrb	r3, [r7, #15]
 8047244:	687a      	ldr	r2, [r7, #4]
 8047246:	211a      	movs	r1, #26
 8047248:	fb01 f303 	mul.w	r3, r1, r3
 804724c:	4413      	add	r3, r2
 804724e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8047252:	881a      	ldrh	r2, [r3, #0]
 8047254:	68bb      	ldr	r3, [r7, #8]
 8047256:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8047258:	7bfb      	ldrb	r3, [r7, #15]
 804725a:	687a      	ldr	r2, [r7, #4]
 804725c:	211a      	movs	r1, #26
 804725e:	fb01 f303 	mul.w	r3, r1, r3
 8047262:	4413      	add	r3, r2
 8047264:	f203 3356 	addw	r3, r3, #854	; 0x356
 8047268:	781b      	ldrb	r3, [r3, #0]
 804726a:	b25b      	sxtb	r3, r3
 804726c:	2b00      	cmp	r3, #0
 804726e:	da16      	bge.n	804729e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8047270:	7bfb      	ldrb	r3, [r7, #15]
 8047272:	687a      	ldr	r2, [r7, #4]
 8047274:	211a      	movs	r1, #26
 8047276:	fb01 f303 	mul.w	r3, r1, r3
 804727a:	4413      	add	r3, r2
 804727c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8047280:	781a      	ldrb	r2, [r3, #0]
 8047282:	68bb      	ldr	r3, [r7, #8]
 8047284:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8047286:	7bfb      	ldrb	r3, [r7, #15]
 8047288:	687a      	ldr	r2, [r7, #4]
 804728a:	211a      	movs	r1, #26
 804728c:	fb01 f303 	mul.w	r3, r1, r3
 8047290:	4413      	add	r3, r2
 8047292:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8047296:	881a      	ldrh	r2, [r3, #0]
 8047298:	68bb      	ldr	r3, [r7, #8]
 804729a:	835a      	strh	r2, [r3, #26]
 804729c:	e015      	b.n	80472ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804729e:	7bfb      	ldrb	r3, [r7, #15]
 80472a0:	687a      	ldr	r2, [r7, #4]
 80472a2:	211a      	movs	r1, #26
 80472a4:	fb01 f303 	mul.w	r3, r1, r3
 80472a8:	4413      	add	r3, r2
 80472aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80472ae:	781a      	ldrb	r2, [r3, #0]
 80472b0:	68bb      	ldr	r3, [r7, #8]
 80472b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80472b4:	7bfb      	ldrb	r3, [r7, #15]
 80472b6:	687a      	ldr	r2, [r7, #4]
 80472b8:	211a      	movs	r1, #26
 80472ba:	fb01 f303 	mul.w	r3, r1, r3
 80472be:	4413      	add	r3, r2
 80472c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80472c4:	881a      	ldrh	r2, [r3, #0]
 80472c6:	68bb      	ldr	r3, [r7, #8]
 80472c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80472ca:	68bb      	ldr	r3, [r7, #8]
 80472cc:	7b9b      	ldrb	r3, [r3, #14]
 80472ce:	4619      	mov	r1, r3
 80472d0:	6878      	ldr	r0, [r7, #4]
 80472d2:	f001 fe84 	bl	8048fde <USBH_AllocPipe>
 80472d6:	4603      	mov	r3, r0
 80472d8:	461a      	mov	r2, r3
 80472da:	68bb      	ldr	r3, [r7, #8]
 80472dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80472de:	68bb      	ldr	r3, [r7, #8]
 80472e0:	7bdb      	ldrb	r3, [r3, #15]
 80472e2:	4619      	mov	r1, r3
 80472e4:	6878      	ldr	r0, [r7, #4]
 80472e6:	f001 fe7a 	bl	8048fde <USBH_AllocPipe>
 80472ea:	4603      	mov	r3, r0
 80472ec:	461a      	mov	r2, r3
 80472ee:	68bb      	ldr	r3, [r7, #8]
 80472f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80472f2:	68bb      	ldr	r3, [r7, #8]
 80472f4:	7b59      	ldrb	r1, [r3, #13]
 80472f6:	68bb      	ldr	r3, [r7, #8]
 80472f8:	7b98      	ldrb	r0, [r3, #14]
 80472fa:	687b      	ldr	r3, [r7, #4]
 80472fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8047300:	687b      	ldr	r3, [r7, #4]
 8047302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8047306:	68ba      	ldr	r2, [r7, #8]
 8047308:	8b12      	ldrh	r2, [r2, #24]
 804730a:	9202      	str	r2, [sp, #8]
 804730c:	2202      	movs	r2, #2
 804730e:	9201      	str	r2, [sp, #4]
 8047310:	9300      	str	r3, [sp, #0]
 8047312:	4623      	mov	r3, r4
 8047314:	4602      	mov	r2, r0
 8047316:	6878      	ldr	r0, [r7, #4]
 8047318:	f001 fe32 	bl	8048f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804731c:	68bb      	ldr	r3, [r7, #8]
 804731e:	7b19      	ldrb	r1, [r3, #12]
 8047320:	68bb      	ldr	r3, [r7, #8]
 8047322:	7bd8      	ldrb	r0, [r3, #15]
 8047324:	687b      	ldr	r3, [r7, #4]
 8047326:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804732a:	687b      	ldr	r3, [r7, #4]
 804732c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8047330:	68ba      	ldr	r2, [r7, #8]
 8047332:	8b52      	ldrh	r2, [r2, #26]
 8047334:	9202      	str	r2, [sp, #8]
 8047336:	2202      	movs	r2, #2
 8047338:	9201      	str	r2, [sp, #4]
 804733a:	9300      	str	r3, [sp, #0]
 804733c:	4623      	mov	r3, r4
 804733e:	4602      	mov	r2, r0
 8047340:	6878      	ldr	r0, [r7, #4]
 8047342:	f001 fe1d 	bl	8048f80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8047346:	68bb      	ldr	r3, [r7, #8]
 8047348:	2200      	movs	r2, #0
 804734a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804734e:	68bb      	ldr	r3, [r7, #8]
 8047350:	7b5b      	ldrb	r3, [r3, #13]
 8047352:	2200      	movs	r2, #0
 8047354:	4619      	mov	r1, r3
 8047356:	6878      	ldr	r0, [r7, #4]
 8047358:	f002 f92e 	bl	80495b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804735c:	68bb      	ldr	r3, [r7, #8]
 804735e:	7b1b      	ldrb	r3, [r3, #12]
 8047360:	2200      	movs	r2, #0
 8047362:	4619      	mov	r1, r3
 8047364:	6878      	ldr	r0, [r7, #4]
 8047366:	f002 f927 	bl	80495b8 <USBH_LL_SetToggle>

  return USBH_OK;
 804736a:	2300      	movs	r3, #0
}
 804736c:	4618      	mov	r0, r3
 804736e:	3714      	adds	r7, #20
 8047370:	46bd      	mov	sp, r7
 8047372:	bd90      	pop	{r4, r7, pc}

08047374 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8047374:	b580      	push	{r7, lr}
 8047376:	b084      	sub	sp, #16
 8047378:	af00      	add	r7, sp, #0
 804737a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804737c:	687b      	ldr	r3, [r7, #4]
 804737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047382:	69db      	ldr	r3, [r3, #28]
 8047384:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8047386:	68fb      	ldr	r3, [r7, #12]
 8047388:	781b      	ldrb	r3, [r3, #0]
 804738a:	2b00      	cmp	r3, #0
 804738c:	d00e      	beq.n	80473ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804738e:	68fb      	ldr	r3, [r7, #12]
 8047390:	781b      	ldrb	r3, [r3, #0]
 8047392:	4619      	mov	r1, r3
 8047394:	6878      	ldr	r0, [r7, #4]
 8047396:	f001 fe12 	bl	8048fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804739a:	68fb      	ldr	r3, [r7, #12]
 804739c:	781b      	ldrb	r3, [r3, #0]
 804739e:	4619      	mov	r1, r3
 80473a0:	6878      	ldr	r0, [r7, #4]
 80473a2:	f001 fe3d 	bl	8049020 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80473a6:	68fb      	ldr	r3, [r7, #12]
 80473a8:	2200      	movs	r2, #0
 80473aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80473ac:	68fb      	ldr	r3, [r7, #12]
 80473ae:	7b1b      	ldrb	r3, [r3, #12]
 80473b0:	2b00      	cmp	r3, #0
 80473b2:	d00e      	beq.n	80473d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80473b4:	68fb      	ldr	r3, [r7, #12]
 80473b6:	7b1b      	ldrb	r3, [r3, #12]
 80473b8:	4619      	mov	r1, r3
 80473ba:	6878      	ldr	r0, [r7, #4]
 80473bc:	f001 fdff 	bl	8048fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80473c0:	68fb      	ldr	r3, [r7, #12]
 80473c2:	7b1b      	ldrb	r3, [r3, #12]
 80473c4:	4619      	mov	r1, r3
 80473c6:	6878      	ldr	r0, [r7, #4]
 80473c8:	f001 fe2a 	bl	8049020 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80473cc:	68fb      	ldr	r3, [r7, #12]
 80473ce:	2200      	movs	r2, #0
 80473d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80473d2:	68fb      	ldr	r3, [r7, #12]
 80473d4:	7b5b      	ldrb	r3, [r3, #13]
 80473d6:	2b00      	cmp	r3, #0
 80473d8:	d00e      	beq.n	80473f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80473da:	68fb      	ldr	r3, [r7, #12]
 80473dc:	7b5b      	ldrb	r3, [r3, #13]
 80473de:	4619      	mov	r1, r3
 80473e0:	6878      	ldr	r0, [r7, #4]
 80473e2:	f001 fdec 	bl	8048fbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80473e6:	68fb      	ldr	r3, [r7, #12]
 80473e8:	7b5b      	ldrb	r3, [r3, #13]
 80473ea:	4619      	mov	r1, r3
 80473ec:	6878      	ldr	r0, [r7, #4]
 80473ee:	f001 fe17 	bl	8049020 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80473f2:	68fb      	ldr	r3, [r7, #12]
 80473f4:	2200      	movs	r2, #0
 80473f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80473f8:	687b      	ldr	r3, [r7, #4]
 80473fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80473fe:	69db      	ldr	r3, [r3, #28]
 8047400:	2b00      	cmp	r3, #0
 8047402:	d00b      	beq.n	804741c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8047404:	687b      	ldr	r3, [r7, #4]
 8047406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804740a:	69db      	ldr	r3, [r3, #28]
 804740c:	4618      	mov	r0, r3
 804740e:	f002 f989 	bl	8049724 <free>
    phost->pActiveClass->pData = 0U;
 8047412:	687b      	ldr	r3, [r7, #4]
 8047414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047418:	2200      	movs	r2, #0
 804741a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804741c:	2300      	movs	r3, #0
}
 804741e:	4618      	mov	r0, r3
 8047420:	3710      	adds	r7, #16
 8047422:	46bd      	mov	sp, r7
 8047424:	bd80      	pop	{r7, pc}

08047426 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8047426:	b580      	push	{r7, lr}
 8047428:	b084      	sub	sp, #16
 804742a:	af00      	add	r7, sp, #0
 804742c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804742e:	687b      	ldr	r3, [r7, #4]
 8047430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047434:	69db      	ldr	r3, [r3, #28]
 8047436:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8047438:	68fb      	ldr	r3, [r7, #12]
 804743a:	3340      	adds	r3, #64	; 0x40
 804743c:	4619      	mov	r1, r3
 804743e:	6878      	ldr	r0, [r7, #4]
 8047440:	f000 f8b1 	bl	80475a6 <GetLineCoding>
 8047444:	4603      	mov	r3, r0
 8047446:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8047448:	7afb      	ldrb	r3, [r7, #11]
 804744a:	2b00      	cmp	r3, #0
 804744c:	d105      	bne.n	804745a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804744e:	687b      	ldr	r3, [r7, #4]
 8047450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047454:	2102      	movs	r1, #2
 8047456:	6878      	ldr	r0, [r7, #4]
 8047458:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804745a:	7afb      	ldrb	r3, [r7, #11]
}
 804745c:	4618      	mov	r0, r3
 804745e:	3710      	adds	r7, #16
 8047460:	46bd      	mov	sp, r7
 8047462:	bd80      	pop	{r7, pc}

08047464 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8047464:	b580      	push	{r7, lr}
 8047466:	b084      	sub	sp, #16
 8047468:	af00      	add	r7, sp, #0
 804746a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804746c:	2301      	movs	r3, #1
 804746e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8047470:	2300      	movs	r3, #0
 8047472:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8047474:	687b      	ldr	r3, [r7, #4]
 8047476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804747a:	69db      	ldr	r3, [r3, #28]
 804747c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804747e:	68bb      	ldr	r3, [r7, #8]
 8047480:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8047484:	2b04      	cmp	r3, #4
 8047486:	d877      	bhi.n	8047578 <USBH_CDC_Process+0x114>
 8047488:	a201      	add	r2, pc, #4	; (adr r2, 8047490 <USBH_CDC_Process+0x2c>)
 804748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804748e:	bf00      	nop
 8047490:	080474a5 	.word	0x080474a5
 8047494:	080474ab 	.word	0x080474ab
 8047498:	080474db 	.word	0x080474db
 804749c:	0804754f 	.word	0x0804754f
 80474a0:	0804755d 	.word	0x0804755d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80474a4:	2300      	movs	r3, #0
 80474a6:	73fb      	strb	r3, [r7, #15]
      break;
 80474a8:	e06d      	b.n	8047586 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80474aa:	68bb      	ldr	r3, [r7, #8]
 80474ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80474ae:	4619      	mov	r1, r3
 80474b0:	6878      	ldr	r0, [r7, #4]
 80474b2:	f000 f897 	bl	80475e4 <SetLineCoding>
 80474b6:	4603      	mov	r3, r0
 80474b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80474ba:	7bbb      	ldrb	r3, [r7, #14]
 80474bc:	2b00      	cmp	r3, #0
 80474be:	d104      	bne.n	80474ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80474c0:	68bb      	ldr	r3, [r7, #8]
 80474c2:	2202      	movs	r2, #2
 80474c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80474c8:	e058      	b.n	804757c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80474ca:	7bbb      	ldrb	r3, [r7, #14]
 80474cc:	2b01      	cmp	r3, #1
 80474ce:	d055      	beq.n	804757c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80474d0:	68bb      	ldr	r3, [r7, #8]
 80474d2:	2204      	movs	r2, #4
 80474d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80474d8:	e050      	b.n	804757c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80474da:	68bb      	ldr	r3, [r7, #8]
 80474dc:	3340      	adds	r3, #64	; 0x40
 80474de:	4619      	mov	r1, r3
 80474e0:	6878      	ldr	r0, [r7, #4]
 80474e2:	f000 f860 	bl	80475a6 <GetLineCoding>
 80474e6:	4603      	mov	r3, r0
 80474e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80474ea:	7bbb      	ldrb	r3, [r7, #14]
 80474ec:	2b00      	cmp	r3, #0
 80474ee:	d126      	bne.n	804753e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80474f0:	68bb      	ldr	r3, [r7, #8]
 80474f2:	2200      	movs	r2, #0
 80474f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80474f8:	68bb      	ldr	r3, [r7, #8]
 80474fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80474fe:	68bb      	ldr	r3, [r7, #8]
 8047500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047502:	791b      	ldrb	r3, [r3, #4]
 8047504:	429a      	cmp	r2, r3
 8047506:	d13b      	bne.n	8047580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8047508:	68bb      	ldr	r3, [r7, #8]
 804750a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804750e:	68bb      	ldr	r3, [r7, #8]
 8047510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047512:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8047514:	429a      	cmp	r2, r3
 8047516:	d133      	bne.n	8047580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8047518:	68bb      	ldr	r3, [r7, #8]
 804751a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804751e:	68bb      	ldr	r3, [r7, #8]
 8047520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047522:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8047524:	429a      	cmp	r2, r3
 8047526:	d12b      	bne.n	8047580 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8047528:	68bb      	ldr	r3, [r7, #8]
 804752a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804752c:	68bb      	ldr	r3, [r7, #8]
 804752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8047530:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8047532:	429a      	cmp	r2, r3
 8047534:	d124      	bne.n	8047580 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8047536:	6878      	ldr	r0, [r7, #4]
 8047538:	f000 f958 	bl	80477ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804753c:	e020      	b.n	8047580 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804753e:	7bbb      	ldrb	r3, [r7, #14]
 8047540:	2b01      	cmp	r3, #1
 8047542:	d01d      	beq.n	8047580 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8047544:	68bb      	ldr	r3, [r7, #8]
 8047546:	2204      	movs	r2, #4
 8047548:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804754c:	e018      	b.n	8047580 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804754e:	6878      	ldr	r0, [r7, #4]
 8047550:	f000 f867 	bl	8047622 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8047554:	6878      	ldr	r0, [r7, #4]
 8047556:	f000 f8da 	bl	804770e <CDC_ProcessReception>
      break;
 804755a:	e014      	b.n	8047586 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804755c:	2100      	movs	r1, #0
 804755e:	6878      	ldr	r0, [r7, #4]
 8047560:	f000 ffef 	bl	8048542 <USBH_ClrFeature>
 8047564:	4603      	mov	r3, r0
 8047566:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8047568:	7bbb      	ldrb	r3, [r7, #14]
 804756a:	2b00      	cmp	r3, #0
 804756c:	d10a      	bne.n	8047584 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804756e:	68bb      	ldr	r3, [r7, #8]
 8047570:	2200      	movs	r2, #0
 8047572:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8047576:	e005      	b.n	8047584 <USBH_CDC_Process+0x120>

    default:
      break;
 8047578:	bf00      	nop
 804757a:	e004      	b.n	8047586 <USBH_CDC_Process+0x122>
      break;
 804757c:	bf00      	nop
 804757e:	e002      	b.n	8047586 <USBH_CDC_Process+0x122>
      break;
 8047580:	bf00      	nop
 8047582:	e000      	b.n	8047586 <USBH_CDC_Process+0x122>
      break;
 8047584:	bf00      	nop

  }

  return status;
 8047586:	7bfb      	ldrb	r3, [r7, #15]
}
 8047588:	4618      	mov	r0, r3
 804758a:	3710      	adds	r7, #16
 804758c:	46bd      	mov	sp, r7
 804758e:	bd80      	pop	{r7, pc}

08047590 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8047590:	b480      	push	{r7}
 8047592:	b083      	sub	sp, #12
 8047594:	af00      	add	r7, sp, #0
 8047596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8047598:	2300      	movs	r3, #0
}
 804759a:	4618      	mov	r0, r3
 804759c:	370c      	adds	r7, #12
 804759e:	46bd      	mov	sp, r7
 80475a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80475a4:	4770      	bx	lr

080475a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80475a6:	b580      	push	{r7, lr}
 80475a8:	b082      	sub	sp, #8
 80475aa:	af00      	add	r7, sp, #0
 80475ac:	6078      	str	r0, [r7, #4]
 80475ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80475b0:	687b      	ldr	r3, [r7, #4]
 80475b2:	22a1      	movs	r2, #161	; 0xa1
 80475b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80475b6:	687b      	ldr	r3, [r7, #4]
 80475b8:	2221      	movs	r2, #33	; 0x21
 80475ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80475bc:	687b      	ldr	r3, [r7, #4]
 80475be:	2200      	movs	r2, #0
 80475c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80475c2:	687b      	ldr	r3, [r7, #4]
 80475c4:	2200      	movs	r2, #0
 80475c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80475c8:	687b      	ldr	r3, [r7, #4]
 80475ca:	2207      	movs	r2, #7
 80475cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80475ce:	683b      	ldr	r3, [r7, #0]
 80475d0:	2207      	movs	r2, #7
 80475d2:	4619      	mov	r1, r3
 80475d4:	6878      	ldr	r0, [r7, #4]
 80475d6:	f001 fa81 	bl	8048adc <USBH_CtlReq>
 80475da:	4603      	mov	r3, r0
}
 80475dc:	4618      	mov	r0, r3
 80475de:	3708      	adds	r7, #8
 80475e0:	46bd      	mov	sp, r7
 80475e2:	bd80      	pop	{r7, pc}

080475e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80475e4:	b580      	push	{r7, lr}
 80475e6:	b082      	sub	sp, #8
 80475e8:	af00      	add	r7, sp, #0
 80475ea:	6078      	str	r0, [r7, #4]
 80475ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80475ee:	687b      	ldr	r3, [r7, #4]
 80475f0:	2221      	movs	r2, #33	; 0x21
 80475f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80475f4:	687b      	ldr	r3, [r7, #4]
 80475f6:	2220      	movs	r2, #32
 80475f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80475fa:	687b      	ldr	r3, [r7, #4]
 80475fc:	2200      	movs	r2, #0
 80475fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8047600:	687b      	ldr	r3, [r7, #4]
 8047602:	2200      	movs	r2, #0
 8047604:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8047606:	687b      	ldr	r3, [r7, #4]
 8047608:	2207      	movs	r2, #7
 804760a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804760c:	683b      	ldr	r3, [r7, #0]
 804760e:	2207      	movs	r2, #7
 8047610:	4619      	mov	r1, r3
 8047612:	6878      	ldr	r0, [r7, #4]
 8047614:	f001 fa62 	bl	8048adc <USBH_CtlReq>
 8047618:	4603      	mov	r3, r0
}
 804761a:	4618      	mov	r0, r3
 804761c:	3708      	adds	r7, #8
 804761e:	46bd      	mov	sp, r7
 8047620:	bd80      	pop	{r7, pc}

08047622 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8047622:	b580      	push	{r7, lr}
 8047624:	b086      	sub	sp, #24
 8047626:	af02      	add	r7, sp, #8
 8047628:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804762a:	687b      	ldr	r3, [r7, #4]
 804762c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047630:	69db      	ldr	r3, [r3, #28]
 8047632:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8047634:	2300      	movs	r3, #0
 8047636:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8047638:	68fb      	ldr	r3, [r7, #12]
 804763a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804763e:	2b01      	cmp	r3, #1
 8047640:	d002      	beq.n	8047648 <CDC_ProcessTransmission+0x26>
 8047642:	2b02      	cmp	r3, #2
 8047644:	d023      	beq.n	804768e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8047646:	e05e      	b.n	8047706 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8047648:	68fb      	ldr	r3, [r7, #12]
 804764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804764c:	68fa      	ldr	r2, [r7, #12]
 804764e:	8b12      	ldrh	r2, [r2, #24]
 8047650:	4293      	cmp	r3, r2
 8047652:	d90b      	bls.n	804766c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8047654:	68fb      	ldr	r3, [r7, #12]
 8047656:	69d9      	ldr	r1, [r3, #28]
 8047658:	68fb      	ldr	r3, [r7, #12]
 804765a:	8b1a      	ldrh	r2, [r3, #24]
 804765c:	68fb      	ldr	r3, [r7, #12]
 804765e:	7b5b      	ldrb	r3, [r3, #13]
 8047660:	2001      	movs	r0, #1
 8047662:	9000      	str	r0, [sp, #0]
 8047664:	6878      	ldr	r0, [r7, #4]
 8047666:	f001 fc48 	bl	8048efa <USBH_BulkSendData>
 804766a:	e00b      	b.n	8047684 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804766c:	68fb      	ldr	r3, [r7, #12]
 804766e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8047670:	68fb      	ldr	r3, [r7, #12]
 8047672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8047674:	b29a      	uxth	r2, r3
 8047676:	68fb      	ldr	r3, [r7, #12]
 8047678:	7b5b      	ldrb	r3, [r3, #13]
 804767a:	2001      	movs	r0, #1
 804767c:	9000      	str	r0, [sp, #0]
 804767e:	6878      	ldr	r0, [r7, #4]
 8047680:	f001 fc3b 	bl	8048efa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8047684:	68fb      	ldr	r3, [r7, #12]
 8047686:	2202      	movs	r2, #2
 8047688:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804768c:	e03b      	b.n	8047706 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804768e:	68fb      	ldr	r3, [r7, #12]
 8047690:	7b5b      	ldrb	r3, [r3, #13]
 8047692:	4619      	mov	r1, r3
 8047694:	6878      	ldr	r0, [r7, #4]
 8047696:	f001 ff65 	bl	8049564 <USBH_LL_GetURBState>
 804769a:	4603      	mov	r3, r0
 804769c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804769e:	7afb      	ldrb	r3, [r7, #11]
 80476a0:	2b01      	cmp	r3, #1
 80476a2:	d128      	bne.n	80476f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80476a4:	68fb      	ldr	r3, [r7, #12]
 80476a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80476a8:	68fa      	ldr	r2, [r7, #12]
 80476aa:	8b12      	ldrh	r2, [r2, #24]
 80476ac:	4293      	cmp	r3, r2
 80476ae:	d90e      	bls.n	80476ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80476b0:	68fb      	ldr	r3, [r7, #12]
 80476b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80476b4:	68fa      	ldr	r2, [r7, #12]
 80476b6:	8b12      	ldrh	r2, [r2, #24]
 80476b8:	1a9a      	subs	r2, r3, r2
 80476ba:	68fb      	ldr	r3, [r7, #12]
 80476bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80476be:	68fb      	ldr	r3, [r7, #12]
 80476c0:	69db      	ldr	r3, [r3, #28]
 80476c2:	68fa      	ldr	r2, [r7, #12]
 80476c4:	8b12      	ldrh	r2, [r2, #24]
 80476c6:	441a      	add	r2, r3
 80476c8:	68fb      	ldr	r3, [r7, #12]
 80476ca:	61da      	str	r2, [r3, #28]
 80476cc:	e002      	b.n	80476d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80476ce:	68fb      	ldr	r3, [r7, #12]
 80476d0:	2200      	movs	r2, #0
 80476d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80476d4:	68fb      	ldr	r3, [r7, #12]
 80476d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80476d8:	2b00      	cmp	r3, #0
 80476da:	d004      	beq.n	80476e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80476dc:	68fb      	ldr	r3, [r7, #12]
 80476de:	2201      	movs	r2, #1
 80476e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80476e4:	e00e      	b.n	8047704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80476e6:	68fb      	ldr	r3, [r7, #12]
 80476e8:	2200      	movs	r2, #0
 80476ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80476ee:	6878      	ldr	r0, [r7, #4]
 80476f0:	f000 f868 	bl	80477c4 <USBH_CDC_TransmitCallback>
      break;
 80476f4:	e006      	b.n	8047704 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80476f6:	7afb      	ldrb	r3, [r7, #11]
 80476f8:	2b02      	cmp	r3, #2
 80476fa:	d103      	bne.n	8047704 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80476fc:	68fb      	ldr	r3, [r7, #12]
 80476fe:	2201      	movs	r2, #1
 8047700:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8047704:	bf00      	nop
  }
}
 8047706:	bf00      	nop
 8047708:	3710      	adds	r7, #16
 804770a:	46bd      	mov	sp, r7
 804770c:	bd80      	pop	{r7, pc}

0804770e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804770e:	b580      	push	{r7, lr}
 8047710:	b086      	sub	sp, #24
 8047712:	af00      	add	r7, sp, #0
 8047714:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8047716:	687b      	ldr	r3, [r7, #4]
 8047718:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804771c:	69db      	ldr	r3, [r3, #28]
 804771e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8047720:	2300      	movs	r3, #0
 8047722:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8047724:	697b      	ldr	r3, [r7, #20]
 8047726:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804772a:	2b03      	cmp	r3, #3
 804772c:	d002      	beq.n	8047734 <CDC_ProcessReception+0x26>
 804772e:	2b04      	cmp	r3, #4
 8047730:	d00e      	beq.n	8047750 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8047732:	e043      	b.n	80477bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8047734:	697b      	ldr	r3, [r7, #20]
 8047736:	6a19      	ldr	r1, [r3, #32]
 8047738:	697b      	ldr	r3, [r7, #20]
 804773a:	8b5a      	ldrh	r2, [r3, #26]
 804773c:	697b      	ldr	r3, [r7, #20]
 804773e:	7b1b      	ldrb	r3, [r3, #12]
 8047740:	6878      	ldr	r0, [r7, #4]
 8047742:	f001 fbff 	bl	8048f44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8047746:	697b      	ldr	r3, [r7, #20]
 8047748:	2204      	movs	r2, #4
 804774a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804774e:	e035      	b.n	80477bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8047750:	697b      	ldr	r3, [r7, #20]
 8047752:	7b1b      	ldrb	r3, [r3, #12]
 8047754:	4619      	mov	r1, r3
 8047756:	6878      	ldr	r0, [r7, #4]
 8047758:	f001 ff04 	bl	8049564 <USBH_LL_GetURBState>
 804775c:	4603      	mov	r3, r0
 804775e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8047760:	7cfb      	ldrb	r3, [r7, #19]
 8047762:	2b01      	cmp	r3, #1
 8047764:	d129      	bne.n	80477ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8047766:	697b      	ldr	r3, [r7, #20]
 8047768:	7b1b      	ldrb	r3, [r3, #12]
 804776a:	4619      	mov	r1, r3
 804776c:	6878      	ldr	r0, [r7, #4]
 804776e:	f001 fe67 	bl	8049440 <USBH_LL_GetLastXferSize>
 8047772:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8047774:	697b      	ldr	r3, [r7, #20]
 8047776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047778:	68fa      	ldr	r2, [r7, #12]
 804777a:	429a      	cmp	r2, r3
 804777c:	d016      	beq.n	80477ac <CDC_ProcessReception+0x9e>
 804777e:	697b      	ldr	r3, [r7, #20]
 8047780:	8b5b      	ldrh	r3, [r3, #26]
 8047782:	461a      	mov	r2, r3
 8047784:	68fb      	ldr	r3, [r7, #12]
 8047786:	4293      	cmp	r3, r2
 8047788:	d910      	bls.n	80477ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804778a:	697b      	ldr	r3, [r7, #20]
 804778c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804778e:	68fb      	ldr	r3, [r7, #12]
 8047790:	1ad2      	subs	r2, r2, r3
 8047792:	697b      	ldr	r3, [r7, #20]
 8047794:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8047796:	697b      	ldr	r3, [r7, #20]
 8047798:	6a1a      	ldr	r2, [r3, #32]
 804779a:	68fb      	ldr	r3, [r7, #12]
 804779c:	441a      	add	r2, r3
 804779e:	697b      	ldr	r3, [r7, #20]
 80477a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80477a2:	697b      	ldr	r3, [r7, #20]
 80477a4:	2203      	movs	r2, #3
 80477a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80477aa:	e006      	b.n	80477ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80477ac:	697b      	ldr	r3, [r7, #20]
 80477ae:	2200      	movs	r2, #0
 80477b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80477b4:	6878      	ldr	r0, [r7, #4]
 80477b6:	f000 f80f 	bl	80477d8 <USBH_CDC_ReceiveCallback>
      break;
 80477ba:	bf00      	nop
  }
}
 80477bc:	bf00      	nop
 80477be:	3718      	adds	r7, #24
 80477c0:	46bd      	mov	sp, r7
 80477c2:	bd80      	pop	{r7, pc}

080477c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80477c4:	b480      	push	{r7}
 80477c6:	b083      	sub	sp, #12
 80477c8:	af00      	add	r7, sp, #0
 80477ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80477cc:	bf00      	nop
 80477ce:	370c      	adds	r7, #12
 80477d0:	46bd      	mov	sp, r7
 80477d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477d6:	4770      	bx	lr

080477d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80477d8:	b480      	push	{r7}
 80477da:	b083      	sub	sp, #12
 80477dc:	af00      	add	r7, sp, #0
 80477de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80477e0:	bf00      	nop
 80477e2:	370c      	adds	r7, #12
 80477e4:	46bd      	mov	sp, r7
 80477e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477ea:	4770      	bx	lr

080477ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80477ec:	b480      	push	{r7}
 80477ee:	b083      	sub	sp, #12
 80477f0:	af00      	add	r7, sp, #0
 80477f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80477f4:	bf00      	nop
 80477f6:	370c      	adds	r7, #12
 80477f8:	46bd      	mov	sp, r7
 80477fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477fe:	4770      	bx	lr

08047800 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8047800:	b580      	push	{r7, lr}
 8047802:	b084      	sub	sp, #16
 8047804:	af00      	add	r7, sp, #0
 8047806:	60f8      	str	r0, [r7, #12]
 8047808:	60b9      	str	r1, [r7, #8]
 804780a:	4613      	mov	r3, r2
 804780c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804780e:	68fb      	ldr	r3, [r7, #12]
 8047810:	2b00      	cmp	r3, #0
 8047812:	d101      	bne.n	8047818 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8047814:	2302      	movs	r3, #2
 8047816:	e029      	b.n	804786c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8047818:	68fb      	ldr	r3, [r7, #12]
 804781a:	79fa      	ldrb	r2, [r7, #7]
 804781c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8047820:	68fb      	ldr	r3, [r7, #12]
 8047822:	2200      	movs	r2, #0
 8047824:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8047828:	68fb      	ldr	r3, [r7, #12]
 804782a:	2200      	movs	r2, #0
 804782c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8047830:	68f8      	ldr	r0, [r7, #12]
 8047832:	f000 f81f 	bl	8047874 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8047836:	68fb      	ldr	r3, [r7, #12]
 8047838:	2200      	movs	r2, #0
 804783a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804783e:	68fb      	ldr	r3, [r7, #12]
 8047840:	2200      	movs	r2, #0
 8047842:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8047846:	68fb      	ldr	r3, [r7, #12]
 8047848:	2200      	movs	r2, #0
 804784a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804784e:	68fb      	ldr	r3, [r7, #12]
 8047850:	2200      	movs	r2, #0
 8047852:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8047856:	68bb      	ldr	r3, [r7, #8]
 8047858:	2b00      	cmp	r3, #0
 804785a:	d003      	beq.n	8047864 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804785c:	68fb      	ldr	r3, [r7, #12]
 804785e:	68ba      	ldr	r2, [r7, #8]
 8047860:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8047864:	68f8      	ldr	r0, [r7, #12]
 8047866:	f001 fd2d 	bl	80492c4 <USBH_LL_Init>

  return USBH_OK;
 804786a:	2300      	movs	r3, #0
}
 804786c:	4618      	mov	r0, r3
 804786e:	3710      	adds	r7, #16
 8047870:	46bd      	mov	sp, r7
 8047872:	bd80      	pop	{r7, pc}

08047874 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8047874:	b480      	push	{r7}
 8047876:	b085      	sub	sp, #20
 8047878:	af00      	add	r7, sp, #0
 804787a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804787c:	2300      	movs	r3, #0
 804787e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8047880:	2300      	movs	r3, #0
 8047882:	60fb      	str	r3, [r7, #12]
 8047884:	e009      	b.n	804789a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8047886:	687a      	ldr	r2, [r7, #4]
 8047888:	68fb      	ldr	r3, [r7, #12]
 804788a:	33e0      	adds	r3, #224	; 0xe0
 804788c:	009b      	lsls	r3, r3, #2
 804788e:	4413      	add	r3, r2
 8047890:	2200      	movs	r2, #0
 8047892:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8047894:	68fb      	ldr	r3, [r7, #12]
 8047896:	3301      	adds	r3, #1
 8047898:	60fb      	str	r3, [r7, #12]
 804789a:	68fb      	ldr	r3, [r7, #12]
 804789c:	2b0f      	cmp	r3, #15
 804789e:	d9f2      	bls.n	8047886 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80478a0:	2300      	movs	r3, #0
 80478a2:	60fb      	str	r3, [r7, #12]
 80478a4:	e009      	b.n	80478ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80478a6:	687a      	ldr	r2, [r7, #4]
 80478a8:	68fb      	ldr	r3, [r7, #12]
 80478aa:	4413      	add	r3, r2
 80478ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80478b0:	2200      	movs	r2, #0
 80478b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80478b4:	68fb      	ldr	r3, [r7, #12]
 80478b6:	3301      	adds	r3, #1
 80478b8:	60fb      	str	r3, [r7, #12]
 80478ba:	68fb      	ldr	r3, [r7, #12]
 80478bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80478c0:	d3f1      	bcc.n	80478a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80478c2:	687b      	ldr	r3, [r7, #4]
 80478c4:	2200      	movs	r2, #0
 80478c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80478c8:	687b      	ldr	r3, [r7, #4]
 80478ca:	2200      	movs	r2, #0
 80478cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80478ce:	687b      	ldr	r3, [r7, #4]
 80478d0:	2201      	movs	r2, #1
 80478d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80478d4:	687b      	ldr	r3, [r7, #4]
 80478d6:	2200      	movs	r2, #0
 80478d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80478dc:	687b      	ldr	r3, [r7, #4]
 80478de:	2201      	movs	r2, #1
 80478e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80478e2:	687b      	ldr	r3, [r7, #4]
 80478e4:	2240      	movs	r2, #64	; 0x40
 80478e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80478e8:	687b      	ldr	r3, [r7, #4]
 80478ea:	2200      	movs	r2, #0
 80478ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80478ee:	687b      	ldr	r3, [r7, #4]
 80478f0:	2200      	movs	r2, #0
 80478f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80478f6:	687b      	ldr	r3, [r7, #4]
 80478f8:	2201      	movs	r2, #1
 80478fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80478fe:	687b      	ldr	r3, [r7, #4]
 8047900:	2200      	movs	r2, #0
 8047902:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8047906:	687b      	ldr	r3, [r7, #4]
 8047908:	2200      	movs	r2, #0
 804790a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804790e:	2300      	movs	r3, #0
}
 8047910:	4618      	mov	r0, r3
 8047912:	3714      	adds	r7, #20
 8047914:	46bd      	mov	sp, r7
 8047916:	f85d 7b04 	ldr.w	r7, [sp], #4
 804791a:	4770      	bx	lr

0804791c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804791c:	b480      	push	{r7}
 804791e:	b085      	sub	sp, #20
 8047920:	af00      	add	r7, sp, #0
 8047922:	6078      	str	r0, [r7, #4]
 8047924:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8047926:	2300      	movs	r3, #0
 8047928:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804792a:	683b      	ldr	r3, [r7, #0]
 804792c:	2b00      	cmp	r3, #0
 804792e:	d016      	beq.n	804795e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8047930:	687b      	ldr	r3, [r7, #4]
 8047932:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8047936:	2b00      	cmp	r3, #0
 8047938:	d10e      	bne.n	8047958 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804793a:	687b      	ldr	r3, [r7, #4]
 804793c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8047940:	1c59      	adds	r1, r3, #1
 8047942:	687a      	ldr	r2, [r7, #4]
 8047944:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8047948:	687a      	ldr	r2, [r7, #4]
 804794a:	33de      	adds	r3, #222	; 0xde
 804794c:	6839      	ldr	r1, [r7, #0]
 804794e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8047952:	2300      	movs	r3, #0
 8047954:	73fb      	strb	r3, [r7, #15]
 8047956:	e004      	b.n	8047962 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8047958:	2302      	movs	r3, #2
 804795a:	73fb      	strb	r3, [r7, #15]
 804795c:	e001      	b.n	8047962 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804795e:	2302      	movs	r3, #2
 8047960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8047962:	7bfb      	ldrb	r3, [r7, #15]
}
 8047964:	4618      	mov	r0, r3
 8047966:	3714      	adds	r7, #20
 8047968:	46bd      	mov	sp, r7
 804796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804796e:	4770      	bx	lr

08047970 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8047970:	b480      	push	{r7}
 8047972:	b085      	sub	sp, #20
 8047974:	af00      	add	r7, sp, #0
 8047976:	6078      	str	r0, [r7, #4]
 8047978:	460b      	mov	r3, r1
 804797a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804797c:	2300      	movs	r3, #0
 804797e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8047980:	687b      	ldr	r3, [r7, #4]
 8047982:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8047986:	78fa      	ldrb	r2, [r7, #3]
 8047988:	429a      	cmp	r2, r3
 804798a:	d204      	bcs.n	8047996 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804798c:	687b      	ldr	r3, [r7, #4]
 804798e:	78fa      	ldrb	r2, [r7, #3]
 8047990:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8047994:	e001      	b.n	804799a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8047996:	2302      	movs	r3, #2
 8047998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804799a:	7bfb      	ldrb	r3, [r7, #15]
}
 804799c:	4618      	mov	r0, r3
 804799e:	3714      	adds	r7, #20
 80479a0:	46bd      	mov	sp, r7
 80479a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80479a6:	4770      	bx	lr

080479a8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80479a8:	b480      	push	{r7}
 80479aa:	b087      	sub	sp, #28
 80479ac:	af00      	add	r7, sp, #0
 80479ae:	6078      	str	r0, [r7, #4]
 80479b0:	4608      	mov	r0, r1
 80479b2:	4611      	mov	r1, r2
 80479b4:	461a      	mov	r2, r3
 80479b6:	4603      	mov	r3, r0
 80479b8:	70fb      	strb	r3, [r7, #3]
 80479ba:	460b      	mov	r3, r1
 80479bc:	70bb      	strb	r3, [r7, #2]
 80479be:	4613      	mov	r3, r2
 80479c0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80479c2:	2300      	movs	r3, #0
 80479c4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80479c6:	2300      	movs	r3, #0
 80479c8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80479ca:	687b      	ldr	r3, [r7, #4]
 80479cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80479d0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80479d2:	e025      	b.n	8047a20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80479d4:	7dfb      	ldrb	r3, [r7, #23]
 80479d6:	221a      	movs	r2, #26
 80479d8:	fb02 f303 	mul.w	r3, r2, r3
 80479dc:	3308      	adds	r3, #8
 80479de:	68fa      	ldr	r2, [r7, #12]
 80479e0:	4413      	add	r3, r2
 80479e2:	3302      	adds	r3, #2
 80479e4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80479e6:	693b      	ldr	r3, [r7, #16]
 80479e8:	795b      	ldrb	r3, [r3, #5]
 80479ea:	78fa      	ldrb	r2, [r7, #3]
 80479ec:	429a      	cmp	r2, r3
 80479ee:	d002      	beq.n	80479f6 <USBH_FindInterface+0x4e>
 80479f0:	78fb      	ldrb	r3, [r7, #3]
 80479f2:	2bff      	cmp	r3, #255	; 0xff
 80479f4:	d111      	bne.n	8047a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80479f6:	693b      	ldr	r3, [r7, #16]
 80479f8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80479fa:	78ba      	ldrb	r2, [r7, #2]
 80479fc:	429a      	cmp	r2, r3
 80479fe:	d002      	beq.n	8047a06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8047a00:	78bb      	ldrb	r3, [r7, #2]
 8047a02:	2bff      	cmp	r3, #255	; 0xff
 8047a04:	d109      	bne.n	8047a1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8047a06:	693b      	ldr	r3, [r7, #16]
 8047a08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8047a0a:	787a      	ldrb	r2, [r7, #1]
 8047a0c:	429a      	cmp	r2, r3
 8047a0e:	d002      	beq.n	8047a16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8047a10:	787b      	ldrb	r3, [r7, #1]
 8047a12:	2bff      	cmp	r3, #255	; 0xff
 8047a14:	d101      	bne.n	8047a1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8047a16:	7dfb      	ldrb	r3, [r7, #23]
 8047a18:	e006      	b.n	8047a28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8047a1a:	7dfb      	ldrb	r3, [r7, #23]
 8047a1c:	3301      	adds	r3, #1
 8047a1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8047a20:	7dfb      	ldrb	r3, [r7, #23]
 8047a22:	2b01      	cmp	r3, #1
 8047a24:	d9d6      	bls.n	80479d4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8047a26:	23ff      	movs	r3, #255	; 0xff
}
 8047a28:	4618      	mov	r0, r3
 8047a2a:	371c      	adds	r7, #28
 8047a2c:	46bd      	mov	sp, r7
 8047a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a32:	4770      	bx	lr

08047a34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8047a34:	b580      	push	{r7, lr}
 8047a36:	b082      	sub	sp, #8
 8047a38:	af00      	add	r7, sp, #0
 8047a3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8047a3c:	6878      	ldr	r0, [r7, #4]
 8047a3e:	f001 fc87 	bl	8049350 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8047a42:	2101      	movs	r1, #1
 8047a44:	6878      	ldr	r0, [r7, #4]
 8047a46:	f001 fda0 	bl	804958a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8047a4a:	2300      	movs	r3, #0
}
 8047a4c:	4618      	mov	r0, r3
 8047a4e:	3708      	adds	r7, #8
 8047a50:	46bd      	mov	sp, r7
 8047a52:	bd80      	pop	{r7, pc}

08047a54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8047a54:	b580      	push	{r7, lr}
 8047a56:	b088      	sub	sp, #32
 8047a58:	af04      	add	r7, sp, #16
 8047a5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8047a5c:	2302      	movs	r3, #2
 8047a5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8047a60:	2300      	movs	r3, #0
 8047a62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8047a64:	687b      	ldr	r3, [r7, #4]
 8047a66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8047a6a:	b2db      	uxtb	r3, r3
 8047a6c:	2b01      	cmp	r3, #1
 8047a6e:	d102      	bne.n	8047a76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8047a70:	687b      	ldr	r3, [r7, #4]
 8047a72:	2203      	movs	r2, #3
 8047a74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8047a76:	687b      	ldr	r3, [r7, #4]
 8047a78:	781b      	ldrb	r3, [r3, #0]
 8047a7a:	b2db      	uxtb	r3, r3
 8047a7c:	2b0b      	cmp	r3, #11
 8047a7e:	f200 81be 	bhi.w	8047dfe <USBH_Process+0x3aa>
 8047a82:	a201      	add	r2, pc, #4	; (adr r2, 8047a88 <USBH_Process+0x34>)
 8047a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047a88:	08047ab9 	.word	0x08047ab9
 8047a8c:	08047aeb 	.word	0x08047aeb
 8047a90:	08047b53 	.word	0x08047b53
 8047a94:	08047d99 	.word	0x08047d99
 8047a98:	08047dff 	.word	0x08047dff
 8047a9c:	08047bf7 	.word	0x08047bf7
 8047aa0:	08047d3f 	.word	0x08047d3f
 8047aa4:	08047c2d 	.word	0x08047c2d
 8047aa8:	08047c4d 	.word	0x08047c4d
 8047aac:	08047c6d 	.word	0x08047c6d
 8047ab0:	08047cb1 	.word	0x08047cb1
 8047ab4:	08047d81 	.word	0x08047d81
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8047ab8:	687b      	ldr	r3, [r7, #4]
 8047aba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8047abe:	b2db      	uxtb	r3, r3
 8047ac0:	2b00      	cmp	r3, #0
 8047ac2:	f000 819e 	beq.w	8047e02 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8047ac6:	687b      	ldr	r3, [r7, #4]
 8047ac8:	2201      	movs	r2, #1
 8047aca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8047acc:	20c8      	movs	r0, #200	; 0xc8
 8047ace:	f001 fda3 	bl	8049618 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8047ad2:	6878      	ldr	r0, [r7, #4]
 8047ad4:	f001 fc99 	bl	804940a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8047ad8:	687b      	ldr	r3, [r7, #4]
 8047ada:	2200      	movs	r2, #0
 8047adc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8047ae0:	687b      	ldr	r3, [r7, #4]
 8047ae2:	2200      	movs	r2, #0
 8047ae4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8047ae8:	e18b      	b.n	8047e02 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8047aea:	687b      	ldr	r3, [r7, #4]
 8047aec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8047af0:	2b01      	cmp	r3, #1
 8047af2:	d107      	bne.n	8047b04 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8047af4:	687b      	ldr	r3, [r7, #4]
 8047af6:	2200      	movs	r2, #0
 8047af8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8047afc:	687b      	ldr	r3, [r7, #4]
 8047afe:	2202      	movs	r2, #2
 8047b00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047b02:	e18d      	b.n	8047e20 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8047b04:	687b      	ldr	r3, [r7, #4]
 8047b06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8047b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8047b0e:	d914      	bls.n	8047b3a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8047b10:	687b      	ldr	r3, [r7, #4]
 8047b12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8047b16:	3301      	adds	r3, #1
 8047b18:	b2da      	uxtb	r2, r3
 8047b1a:	687b      	ldr	r3, [r7, #4]
 8047b1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8047b20:	687b      	ldr	r3, [r7, #4]
 8047b22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8047b26:	2b03      	cmp	r3, #3
 8047b28:	d903      	bls.n	8047b32 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8047b2a:	687b      	ldr	r3, [r7, #4]
 8047b2c:	220d      	movs	r2, #13
 8047b2e:	701a      	strb	r2, [r3, #0]
      break;
 8047b30:	e176      	b.n	8047e20 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8047b32:	687b      	ldr	r3, [r7, #4]
 8047b34:	2200      	movs	r2, #0
 8047b36:	701a      	strb	r2, [r3, #0]
      break;
 8047b38:	e172      	b.n	8047e20 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8047b3a:	687b      	ldr	r3, [r7, #4]
 8047b3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8047b40:	f103 020a 	add.w	r2, r3, #10
 8047b44:	687b      	ldr	r3, [r7, #4]
 8047b46:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8047b4a:	200a      	movs	r0, #10
 8047b4c:	f001 fd64 	bl	8049618 <USBH_Delay>
      break;
 8047b50:	e166      	b.n	8047e20 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8047b52:	687b      	ldr	r3, [r7, #4]
 8047b54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047b58:	2b00      	cmp	r3, #0
 8047b5a:	d005      	beq.n	8047b68 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8047b5c:	687b      	ldr	r3, [r7, #4]
 8047b5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047b62:	2104      	movs	r1, #4
 8047b64:	6878      	ldr	r0, [r7, #4]
 8047b66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8047b68:	2064      	movs	r0, #100	; 0x64
 8047b6a:	f001 fd55 	bl	8049618 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8047b6e:	6878      	ldr	r0, [r7, #4]
 8047b70:	f001 fc24 	bl	80493bc <USBH_LL_GetSpeed>
 8047b74:	4603      	mov	r3, r0
 8047b76:	461a      	mov	r2, r3
 8047b78:	687b      	ldr	r3, [r7, #4]
 8047b7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8047b7e:	687b      	ldr	r3, [r7, #4]
 8047b80:	2205      	movs	r2, #5
 8047b82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8047b84:	2100      	movs	r1, #0
 8047b86:	6878      	ldr	r0, [r7, #4]
 8047b88:	f001 fa29 	bl	8048fde <USBH_AllocPipe>
 8047b8c:	4603      	mov	r3, r0
 8047b8e:	461a      	mov	r2, r3
 8047b90:	687b      	ldr	r3, [r7, #4]
 8047b92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8047b94:	2180      	movs	r1, #128	; 0x80
 8047b96:	6878      	ldr	r0, [r7, #4]
 8047b98:	f001 fa21 	bl	8048fde <USBH_AllocPipe>
 8047b9c:	4603      	mov	r3, r0
 8047b9e:	461a      	mov	r2, r3
 8047ba0:	687b      	ldr	r3, [r7, #4]
 8047ba2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8047ba4:	687b      	ldr	r3, [r7, #4]
 8047ba6:	7919      	ldrb	r1, [r3, #4]
 8047ba8:	687b      	ldr	r3, [r7, #4]
 8047baa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047bae:	687b      	ldr	r3, [r7, #4]
 8047bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8047bb4:	687a      	ldr	r2, [r7, #4]
 8047bb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8047bb8:	b292      	uxth	r2, r2
 8047bba:	9202      	str	r2, [sp, #8]
 8047bbc:	2200      	movs	r2, #0
 8047bbe:	9201      	str	r2, [sp, #4]
 8047bc0:	9300      	str	r3, [sp, #0]
 8047bc2:	4603      	mov	r3, r0
 8047bc4:	2280      	movs	r2, #128	; 0x80
 8047bc6:	6878      	ldr	r0, [r7, #4]
 8047bc8:	f001 f9da 	bl	8048f80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8047bcc:	687b      	ldr	r3, [r7, #4]
 8047bce:	7959      	ldrb	r1, [r3, #5]
 8047bd0:	687b      	ldr	r3, [r7, #4]
 8047bd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047bd6:	687b      	ldr	r3, [r7, #4]
 8047bd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8047bdc:	687a      	ldr	r2, [r7, #4]
 8047bde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8047be0:	b292      	uxth	r2, r2
 8047be2:	9202      	str	r2, [sp, #8]
 8047be4:	2200      	movs	r2, #0
 8047be6:	9201      	str	r2, [sp, #4]
 8047be8:	9300      	str	r3, [sp, #0]
 8047bea:	4603      	mov	r3, r0
 8047bec:	2200      	movs	r2, #0
 8047bee:	6878      	ldr	r0, [r7, #4]
 8047bf0:	f001 f9c6 	bl	8048f80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047bf4:	e114      	b.n	8047e20 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8047bf6:	6878      	ldr	r0, [r7, #4]
 8047bf8:	f000 f918 	bl	8047e2c <USBH_HandleEnum>
 8047bfc:	4603      	mov	r3, r0
 8047bfe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8047c00:	7bbb      	ldrb	r3, [r7, #14]
 8047c02:	b2db      	uxtb	r3, r3
 8047c04:	2b00      	cmp	r3, #0
 8047c06:	f040 80fe 	bne.w	8047e06 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8047c0a:	687b      	ldr	r3, [r7, #4]
 8047c0c:	2200      	movs	r2, #0
 8047c0e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8047c12:	687b      	ldr	r3, [r7, #4]
 8047c14:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8047c18:	2b01      	cmp	r3, #1
 8047c1a:	d103      	bne.n	8047c24 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8047c1c:	687b      	ldr	r3, [r7, #4]
 8047c1e:	2208      	movs	r2, #8
 8047c20:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8047c22:	e0f0      	b.n	8047e06 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8047c24:	687b      	ldr	r3, [r7, #4]
 8047c26:	2207      	movs	r2, #7
 8047c28:	701a      	strb	r2, [r3, #0]
      break;
 8047c2a:	e0ec      	b.n	8047e06 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8047c2c:	687b      	ldr	r3, [r7, #4]
 8047c2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047c32:	2b00      	cmp	r3, #0
 8047c34:	f000 80e9 	beq.w	8047e0a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8047c38:	687b      	ldr	r3, [r7, #4]
 8047c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047c3e:	2101      	movs	r1, #1
 8047c40:	6878      	ldr	r0, [r7, #4]
 8047c42:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8047c44:	687b      	ldr	r3, [r7, #4]
 8047c46:	2208      	movs	r2, #8
 8047c48:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8047c4a:	e0de      	b.n	8047e0a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8047c4c:	687b      	ldr	r3, [r7, #4]
 8047c4e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8047c52:	b29b      	uxth	r3, r3
 8047c54:	4619      	mov	r1, r3
 8047c56:	6878      	ldr	r0, [r7, #4]
 8047c58:	f000 fc2c 	bl	80484b4 <USBH_SetCfg>
 8047c5c:	4603      	mov	r3, r0
 8047c5e:	2b00      	cmp	r3, #0
 8047c60:	f040 80d5 	bne.w	8047e0e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8047c64:	687b      	ldr	r3, [r7, #4]
 8047c66:	2209      	movs	r2, #9
 8047c68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047c6a:	e0d0      	b.n	8047e0e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8047c6c:	687b      	ldr	r3, [r7, #4]
 8047c6e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8047c72:	f003 0320 	and.w	r3, r3, #32
 8047c76:	2b00      	cmp	r3, #0
 8047c78:	d016      	beq.n	8047ca8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8047c7a:	2101      	movs	r1, #1
 8047c7c:	6878      	ldr	r0, [r7, #4]
 8047c7e:	f000 fc3c 	bl	80484fa <USBH_SetFeature>
 8047c82:	4603      	mov	r3, r0
 8047c84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8047c86:	7bbb      	ldrb	r3, [r7, #14]
 8047c88:	b2db      	uxtb	r3, r3
 8047c8a:	2b00      	cmp	r3, #0
 8047c8c:	d103      	bne.n	8047c96 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8047c8e:	687b      	ldr	r3, [r7, #4]
 8047c90:	220a      	movs	r2, #10
 8047c92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047c94:	e0bd      	b.n	8047e12 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8047c96:	7bbb      	ldrb	r3, [r7, #14]
 8047c98:	b2db      	uxtb	r3, r3
 8047c9a:	2b03      	cmp	r3, #3
 8047c9c:	f040 80b9 	bne.w	8047e12 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8047ca0:	687b      	ldr	r3, [r7, #4]
 8047ca2:	220a      	movs	r2, #10
 8047ca4:	701a      	strb	r2, [r3, #0]
      break;
 8047ca6:	e0b4      	b.n	8047e12 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8047ca8:	687b      	ldr	r3, [r7, #4]
 8047caa:	220a      	movs	r2, #10
 8047cac:	701a      	strb	r2, [r3, #0]
      break;
 8047cae:	e0b0      	b.n	8047e12 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8047cb0:	687b      	ldr	r3, [r7, #4]
 8047cb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8047cb6:	2b00      	cmp	r3, #0
 8047cb8:	f000 80ad 	beq.w	8047e16 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8047cbc:	687b      	ldr	r3, [r7, #4]
 8047cbe:	2200      	movs	r2, #0
 8047cc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8047cc4:	2300      	movs	r3, #0
 8047cc6:	73fb      	strb	r3, [r7, #15]
 8047cc8:	e016      	b.n	8047cf8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8047cca:	7bfa      	ldrb	r2, [r7, #15]
 8047ccc:	687b      	ldr	r3, [r7, #4]
 8047cce:	32de      	adds	r2, #222	; 0xde
 8047cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047cd4:	791a      	ldrb	r2, [r3, #4]
 8047cd6:	687b      	ldr	r3, [r7, #4]
 8047cd8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8047cdc:	429a      	cmp	r2, r3
 8047cde:	d108      	bne.n	8047cf2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8047ce0:	7bfa      	ldrb	r2, [r7, #15]
 8047ce2:	687b      	ldr	r3, [r7, #4]
 8047ce4:	32de      	adds	r2, #222	; 0xde
 8047ce6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047cea:	687b      	ldr	r3, [r7, #4]
 8047cec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8047cf0:	e005      	b.n	8047cfe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8047cf2:	7bfb      	ldrb	r3, [r7, #15]
 8047cf4:	3301      	adds	r3, #1
 8047cf6:	73fb      	strb	r3, [r7, #15]
 8047cf8:	7bfb      	ldrb	r3, [r7, #15]
 8047cfa:	2b00      	cmp	r3, #0
 8047cfc:	d0e5      	beq.n	8047cca <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8047cfe:	687b      	ldr	r3, [r7, #4]
 8047d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d04:	2b00      	cmp	r3, #0
 8047d06:	d016      	beq.n	8047d36 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8047d08:	687b      	ldr	r3, [r7, #4]
 8047d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d0e:	689b      	ldr	r3, [r3, #8]
 8047d10:	6878      	ldr	r0, [r7, #4]
 8047d12:	4798      	blx	r3
 8047d14:	4603      	mov	r3, r0
 8047d16:	2b00      	cmp	r3, #0
 8047d18:	d109      	bne.n	8047d2e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8047d1a:	687b      	ldr	r3, [r7, #4]
 8047d1c:	2206      	movs	r2, #6
 8047d1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8047d20:	687b      	ldr	r3, [r7, #4]
 8047d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047d26:	2103      	movs	r1, #3
 8047d28:	6878      	ldr	r0, [r7, #4]
 8047d2a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047d2c:	e073      	b.n	8047e16 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8047d2e:	687b      	ldr	r3, [r7, #4]
 8047d30:	220d      	movs	r2, #13
 8047d32:	701a      	strb	r2, [r3, #0]
      break;
 8047d34:	e06f      	b.n	8047e16 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8047d36:	687b      	ldr	r3, [r7, #4]
 8047d38:	220d      	movs	r2, #13
 8047d3a:	701a      	strb	r2, [r3, #0]
      break;
 8047d3c:	e06b      	b.n	8047e16 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8047d3e:	687b      	ldr	r3, [r7, #4]
 8047d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d44:	2b00      	cmp	r3, #0
 8047d46:	d017      	beq.n	8047d78 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8047d48:	687b      	ldr	r3, [r7, #4]
 8047d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d4e:	691b      	ldr	r3, [r3, #16]
 8047d50:	6878      	ldr	r0, [r7, #4]
 8047d52:	4798      	blx	r3
 8047d54:	4603      	mov	r3, r0
 8047d56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8047d58:	7bbb      	ldrb	r3, [r7, #14]
 8047d5a:	b2db      	uxtb	r3, r3
 8047d5c:	2b00      	cmp	r3, #0
 8047d5e:	d103      	bne.n	8047d68 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8047d60:	687b      	ldr	r3, [r7, #4]
 8047d62:	220b      	movs	r2, #11
 8047d64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047d66:	e058      	b.n	8047e1a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8047d68:	7bbb      	ldrb	r3, [r7, #14]
 8047d6a:	b2db      	uxtb	r3, r3
 8047d6c:	2b02      	cmp	r3, #2
 8047d6e:	d154      	bne.n	8047e1a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8047d70:	687b      	ldr	r3, [r7, #4]
 8047d72:	220d      	movs	r2, #13
 8047d74:	701a      	strb	r2, [r3, #0]
      break;
 8047d76:	e050      	b.n	8047e1a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8047d78:	687b      	ldr	r3, [r7, #4]
 8047d7a:	220d      	movs	r2, #13
 8047d7c:	701a      	strb	r2, [r3, #0]
      break;
 8047d7e:	e04c      	b.n	8047e1a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8047d80:	687b      	ldr	r3, [r7, #4]
 8047d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d86:	2b00      	cmp	r3, #0
 8047d88:	d049      	beq.n	8047e1e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8047d8a:	687b      	ldr	r3, [r7, #4]
 8047d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047d90:	695b      	ldr	r3, [r3, #20]
 8047d92:	6878      	ldr	r0, [r7, #4]
 8047d94:	4798      	blx	r3
      }
      break;
 8047d96:	e042      	b.n	8047e1e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8047d98:	687b      	ldr	r3, [r7, #4]
 8047d9a:	2200      	movs	r2, #0
 8047d9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8047da0:	6878      	ldr	r0, [r7, #4]
 8047da2:	f7ff fd67 	bl	8047874 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8047da6:	687b      	ldr	r3, [r7, #4]
 8047da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047dac:	2b00      	cmp	r3, #0
 8047dae:	d009      	beq.n	8047dc4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8047db0:	687b      	ldr	r3, [r7, #4]
 8047db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8047db6:	68db      	ldr	r3, [r3, #12]
 8047db8:	6878      	ldr	r0, [r7, #4]
 8047dba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8047dbc:	687b      	ldr	r3, [r7, #4]
 8047dbe:	2200      	movs	r2, #0
 8047dc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8047dc4:	687b      	ldr	r3, [r7, #4]
 8047dc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047dca:	2b00      	cmp	r3, #0
 8047dcc:	d005      	beq.n	8047dda <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8047dce:	687b      	ldr	r3, [r7, #4]
 8047dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8047dd4:	2105      	movs	r1, #5
 8047dd6:	6878      	ldr	r0, [r7, #4]
 8047dd8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8047dda:	687b      	ldr	r3, [r7, #4]
 8047ddc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8047de0:	b2db      	uxtb	r3, r3
 8047de2:	2b01      	cmp	r3, #1
 8047de4:	d107      	bne.n	8047df6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8047de6:	687b      	ldr	r3, [r7, #4]
 8047de8:	2200      	movs	r2, #0
 8047dea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8047dee:	6878      	ldr	r0, [r7, #4]
 8047df0:	f7ff fe20 	bl	8047a34 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8047df4:	e014      	b.n	8047e20 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8047df6:	6878      	ldr	r0, [r7, #4]
 8047df8:	f001 faaa 	bl	8049350 <USBH_LL_Start>
      break;
 8047dfc:	e010      	b.n	8047e20 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8047dfe:	bf00      	nop
 8047e00:	e00e      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e02:	bf00      	nop
 8047e04:	e00c      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e06:	bf00      	nop
 8047e08:	e00a      	b.n	8047e20 <USBH_Process+0x3cc>
    break;
 8047e0a:	bf00      	nop
 8047e0c:	e008      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e0e:	bf00      	nop
 8047e10:	e006      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e12:	bf00      	nop
 8047e14:	e004      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e16:	bf00      	nop
 8047e18:	e002      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e1a:	bf00      	nop
 8047e1c:	e000      	b.n	8047e20 <USBH_Process+0x3cc>
      break;
 8047e1e:	bf00      	nop
  }
  return USBH_OK;
 8047e20:	2300      	movs	r3, #0
}
 8047e22:	4618      	mov	r0, r3
 8047e24:	3710      	adds	r7, #16
 8047e26:	46bd      	mov	sp, r7
 8047e28:	bd80      	pop	{r7, pc}
 8047e2a:	bf00      	nop

08047e2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8047e2c:	b580      	push	{r7, lr}
 8047e2e:	b088      	sub	sp, #32
 8047e30:	af04      	add	r7, sp, #16
 8047e32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8047e34:	2301      	movs	r3, #1
 8047e36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8047e38:	2301      	movs	r3, #1
 8047e3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8047e3c:	687b      	ldr	r3, [r7, #4]
 8047e3e:	785b      	ldrb	r3, [r3, #1]
 8047e40:	2b07      	cmp	r3, #7
 8047e42:	f200 81c1 	bhi.w	80481c8 <USBH_HandleEnum+0x39c>
 8047e46:	a201      	add	r2, pc, #4	; (adr r2, 8047e4c <USBH_HandleEnum+0x20>)
 8047e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047e4c:	08047e6d 	.word	0x08047e6d
 8047e50:	08047f2b 	.word	0x08047f2b
 8047e54:	08047f95 	.word	0x08047f95
 8047e58:	08048023 	.word	0x08048023
 8047e5c:	0804808d 	.word	0x0804808d
 8047e60:	080480fd 	.word	0x080480fd
 8047e64:	08048143 	.word	0x08048143
 8047e68:	08048189 	.word	0x08048189
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8047e6c:	2108      	movs	r1, #8
 8047e6e:	6878      	ldr	r0, [r7, #4]
 8047e70:	f000 fa50 	bl	8048314 <USBH_Get_DevDesc>
 8047e74:	4603      	mov	r3, r0
 8047e76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8047e78:	7bbb      	ldrb	r3, [r7, #14]
 8047e7a:	2b00      	cmp	r3, #0
 8047e7c:	d130      	bne.n	8047ee0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8047e7e:	687b      	ldr	r3, [r7, #4]
 8047e80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8047e84:	687b      	ldr	r3, [r7, #4]
 8047e86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8047e88:	687b      	ldr	r3, [r7, #4]
 8047e8a:	2201      	movs	r2, #1
 8047e8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8047e8e:	687b      	ldr	r3, [r7, #4]
 8047e90:	7919      	ldrb	r1, [r3, #4]
 8047e92:	687b      	ldr	r3, [r7, #4]
 8047e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047e98:	687b      	ldr	r3, [r7, #4]
 8047e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8047e9e:	687a      	ldr	r2, [r7, #4]
 8047ea0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8047ea2:	b292      	uxth	r2, r2
 8047ea4:	9202      	str	r2, [sp, #8]
 8047ea6:	2200      	movs	r2, #0
 8047ea8:	9201      	str	r2, [sp, #4]
 8047eaa:	9300      	str	r3, [sp, #0]
 8047eac:	4603      	mov	r3, r0
 8047eae:	2280      	movs	r2, #128	; 0x80
 8047eb0:	6878      	ldr	r0, [r7, #4]
 8047eb2:	f001 f865 	bl	8048f80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8047eb6:	687b      	ldr	r3, [r7, #4]
 8047eb8:	7959      	ldrb	r1, [r3, #5]
 8047eba:	687b      	ldr	r3, [r7, #4]
 8047ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047ec0:	687b      	ldr	r3, [r7, #4]
 8047ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8047ec6:	687a      	ldr	r2, [r7, #4]
 8047ec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8047eca:	b292      	uxth	r2, r2
 8047ecc:	9202      	str	r2, [sp, #8]
 8047ece:	2200      	movs	r2, #0
 8047ed0:	9201      	str	r2, [sp, #4]
 8047ed2:	9300      	str	r3, [sp, #0]
 8047ed4:	4603      	mov	r3, r0
 8047ed6:	2200      	movs	r2, #0
 8047ed8:	6878      	ldr	r0, [r7, #4]
 8047eda:	f001 f851 	bl	8048f80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8047ede:	e175      	b.n	80481cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8047ee0:	7bbb      	ldrb	r3, [r7, #14]
 8047ee2:	2b03      	cmp	r3, #3
 8047ee4:	f040 8172 	bne.w	80481cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8047ee8:	687b      	ldr	r3, [r7, #4]
 8047eea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8047eee:	3301      	adds	r3, #1
 8047ef0:	b2da      	uxtb	r2, r3
 8047ef2:	687b      	ldr	r3, [r7, #4]
 8047ef4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8047ef8:	687b      	ldr	r3, [r7, #4]
 8047efa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8047efe:	2b03      	cmp	r3, #3
 8047f00:	d903      	bls.n	8047f0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8047f02:	687b      	ldr	r3, [r7, #4]
 8047f04:	220d      	movs	r2, #13
 8047f06:	701a      	strb	r2, [r3, #0]
      break;
 8047f08:	e160      	b.n	80481cc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8047f0a:	687b      	ldr	r3, [r7, #4]
 8047f0c:	795b      	ldrb	r3, [r3, #5]
 8047f0e:	4619      	mov	r1, r3
 8047f10:	6878      	ldr	r0, [r7, #4]
 8047f12:	f001 f885 	bl	8049020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8047f16:	687b      	ldr	r3, [r7, #4]
 8047f18:	791b      	ldrb	r3, [r3, #4]
 8047f1a:	4619      	mov	r1, r3
 8047f1c:	6878      	ldr	r0, [r7, #4]
 8047f1e:	f001 f87f 	bl	8049020 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8047f22:	687b      	ldr	r3, [r7, #4]
 8047f24:	2200      	movs	r2, #0
 8047f26:	701a      	strb	r2, [r3, #0]
      break;
 8047f28:	e150      	b.n	80481cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8047f2a:	2112      	movs	r1, #18
 8047f2c:	6878      	ldr	r0, [r7, #4]
 8047f2e:	f000 f9f1 	bl	8048314 <USBH_Get_DevDesc>
 8047f32:	4603      	mov	r3, r0
 8047f34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8047f36:	7bbb      	ldrb	r3, [r7, #14]
 8047f38:	2b00      	cmp	r3, #0
 8047f3a:	d103      	bne.n	8047f44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8047f3c:	687b      	ldr	r3, [r7, #4]
 8047f3e:	2202      	movs	r2, #2
 8047f40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8047f42:	e145      	b.n	80481d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8047f44:	7bbb      	ldrb	r3, [r7, #14]
 8047f46:	2b03      	cmp	r3, #3
 8047f48:	f040 8142 	bne.w	80481d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8047f4c:	687b      	ldr	r3, [r7, #4]
 8047f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8047f52:	3301      	adds	r3, #1
 8047f54:	b2da      	uxtb	r2, r3
 8047f56:	687b      	ldr	r3, [r7, #4]
 8047f58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8047f5c:	687b      	ldr	r3, [r7, #4]
 8047f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8047f62:	2b03      	cmp	r3, #3
 8047f64:	d903      	bls.n	8047f6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8047f66:	687b      	ldr	r3, [r7, #4]
 8047f68:	220d      	movs	r2, #13
 8047f6a:	701a      	strb	r2, [r3, #0]
      break;
 8047f6c:	e130      	b.n	80481d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8047f6e:	687b      	ldr	r3, [r7, #4]
 8047f70:	795b      	ldrb	r3, [r3, #5]
 8047f72:	4619      	mov	r1, r3
 8047f74:	6878      	ldr	r0, [r7, #4]
 8047f76:	f001 f853 	bl	8049020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8047f7a:	687b      	ldr	r3, [r7, #4]
 8047f7c:	791b      	ldrb	r3, [r3, #4]
 8047f7e:	4619      	mov	r1, r3
 8047f80:	6878      	ldr	r0, [r7, #4]
 8047f82:	f001 f84d 	bl	8049020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8047f86:	687b      	ldr	r3, [r7, #4]
 8047f88:	2200      	movs	r2, #0
 8047f8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8047f8c:	687b      	ldr	r3, [r7, #4]
 8047f8e:	2200      	movs	r2, #0
 8047f90:	701a      	strb	r2, [r3, #0]
      break;
 8047f92:	e11d      	b.n	80481d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8047f94:	2101      	movs	r1, #1
 8047f96:	6878      	ldr	r0, [r7, #4]
 8047f98:	f000 fa68 	bl	804846c <USBH_SetAddress>
 8047f9c:	4603      	mov	r3, r0
 8047f9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8047fa0:	7bbb      	ldrb	r3, [r7, #14]
 8047fa2:	2b00      	cmp	r3, #0
 8047fa4:	d132      	bne.n	804800c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8047fa6:	2002      	movs	r0, #2
 8047fa8:	f001 fb36 	bl	8049618 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8047fac:	687b      	ldr	r3, [r7, #4]
 8047fae:	2201      	movs	r2, #1
 8047fb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8047fb4:	687b      	ldr	r3, [r7, #4]
 8047fb6:	2203      	movs	r2, #3
 8047fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8047fba:	687b      	ldr	r3, [r7, #4]
 8047fbc:	7919      	ldrb	r1, [r3, #4]
 8047fbe:	687b      	ldr	r3, [r7, #4]
 8047fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8047fca:	687a      	ldr	r2, [r7, #4]
 8047fcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8047fce:	b292      	uxth	r2, r2
 8047fd0:	9202      	str	r2, [sp, #8]
 8047fd2:	2200      	movs	r2, #0
 8047fd4:	9201      	str	r2, [sp, #4]
 8047fd6:	9300      	str	r3, [sp, #0]
 8047fd8:	4603      	mov	r3, r0
 8047fda:	2280      	movs	r2, #128	; 0x80
 8047fdc:	6878      	ldr	r0, [r7, #4]
 8047fde:	f000 ffcf 	bl	8048f80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8047fe2:	687b      	ldr	r3, [r7, #4]
 8047fe4:	7959      	ldrb	r1, [r3, #5]
 8047fe6:	687b      	ldr	r3, [r7, #4]
 8047fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8047fec:	687b      	ldr	r3, [r7, #4]
 8047fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8047ff2:	687a      	ldr	r2, [r7, #4]
 8047ff4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8047ff6:	b292      	uxth	r2, r2
 8047ff8:	9202      	str	r2, [sp, #8]
 8047ffa:	2200      	movs	r2, #0
 8047ffc:	9201      	str	r2, [sp, #4]
 8047ffe:	9300      	str	r3, [sp, #0]
 8048000:	4603      	mov	r3, r0
 8048002:	2200      	movs	r2, #0
 8048004:	6878      	ldr	r0, [r7, #4]
 8048006:	f000 ffbb 	bl	8048f80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804800a:	e0e3      	b.n	80481d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804800c:	7bbb      	ldrb	r3, [r7, #14]
 804800e:	2b03      	cmp	r3, #3
 8048010:	f040 80e0 	bne.w	80481d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8048014:	687b      	ldr	r3, [r7, #4]
 8048016:	220d      	movs	r2, #13
 8048018:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804801a:	687b      	ldr	r3, [r7, #4]
 804801c:	2200      	movs	r2, #0
 804801e:	705a      	strb	r2, [r3, #1]
      break;
 8048020:	e0d8      	b.n	80481d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8048022:	2109      	movs	r1, #9
 8048024:	6878      	ldr	r0, [r7, #4]
 8048026:	f000 f99d 	bl	8048364 <USBH_Get_CfgDesc>
 804802a:	4603      	mov	r3, r0
 804802c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804802e:	7bbb      	ldrb	r3, [r7, #14]
 8048030:	2b00      	cmp	r3, #0
 8048032:	d103      	bne.n	804803c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8048034:	687b      	ldr	r3, [r7, #4]
 8048036:	2204      	movs	r2, #4
 8048038:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804803a:	e0cd      	b.n	80481d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804803c:	7bbb      	ldrb	r3, [r7, #14]
 804803e:	2b03      	cmp	r3, #3
 8048040:	f040 80ca 	bne.w	80481d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8048044:	687b      	ldr	r3, [r7, #4]
 8048046:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804804a:	3301      	adds	r3, #1
 804804c:	b2da      	uxtb	r2, r3
 804804e:	687b      	ldr	r3, [r7, #4]
 8048050:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8048054:	687b      	ldr	r3, [r7, #4]
 8048056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804805a:	2b03      	cmp	r3, #3
 804805c:	d903      	bls.n	8048066 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804805e:	687b      	ldr	r3, [r7, #4]
 8048060:	220d      	movs	r2, #13
 8048062:	701a      	strb	r2, [r3, #0]
      break;
 8048064:	e0b8      	b.n	80481d8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8048066:	687b      	ldr	r3, [r7, #4]
 8048068:	795b      	ldrb	r3, [r3, #5]
 804806a:	4619      	mov	r1, r3
 804806c:	6878      	ldr	r0, [r7, #4]
 804806e:	f000 ffd7 	bl	8049020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8048072:	687b      	ldr	r3, [r7, #4]
 8048074:	791b      	ldrb	r3, [r3, #4]
 8048076:	4619      	mov	r1, r3
 8048078:	6878      	ldr	r0, [r7, #4]
 804807a:	f000 ffd1 	bl	8049020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804807e:	687b      	ldr	r3, [r7, #4]
 8048080:	2200      	movs	r2, #0
 8048082:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8048084:	687b      	ldr	r3, [r7, #4]
 8048086:	2200      	movs	r2, #0
 8048088:	701a      	strb	r2, [r3, #0]
      break;
 804808a:	e0a5      	b.n	80481d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804808c:	687b      	ldr	r3, [r7, #4]
 804808e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8048092:	4619      	mov	r1, r3
 8048094:	6878      	ldr	r0, [r7, #4]
 8048096:	f000 f965 	bl	8048364 <USBH_Get_CfgDesc>
 804809a:	4603      	mov	r3, r0
 804809c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804809e:	7bbb      	ldrb	r3, [r7, #14]
 80480a0:	2b00      	cmp	r3, #0
 80480a2:	d103      	bne.n	80480ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80480a4:	687b      	ldr	r3, [r7, #4]
 80480a6:	2205      	movs	r2, #5
 80480a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80480aa:	e097      	b.n	80481dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80480ac:	7bbb      	ldrb	r3, [r7, #14]
 80480ae:	2b03      	cmp	r3, #3
 80480b0:	f040 8094 	bne.w	80481dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80480b4:	687b      	ldr	r3, [r7, #4]
 80480b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80480ba:	3301      	adds	r3, #1
 80480bc:	b2da      	uxtb	r2, r3
 80480be:	687b      	ldr	r3, [r7, #4]
 80480c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80480c4:	687b      	ldr	r3, [r7, #4]
 80480c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80480ca:	2b03      	cmp	r3, #3
 80480cc:	d903      	bls.n	80480d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80480ce:	687b      	ldr	r3, [r7, #4]
 80480d0:	220d      	movs	r2, #13
 80480d2:	701a      	strb	r2, [r3, #0]
      break;
 80480d4:	e082      	b.n	80481dc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80480d6:	687b      	ldr	r3, [r7, #4]
 80480d8:	795b      	ldrb	r3, [r3, #5]
 80480da:	4619      	mov	r1, r3
 80480dc:	6878      	ldr	r0, [r7, #4]
 80480de:	f000 ff9f 	bl	8049020 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80480e2:	687b      	ldr	r3, [r7, #4]
 80480e4:	791b      	ldrb	r3, [r3, #4]
 80480e6:	4619      	mov	r1, r3
 80480e8:	6878      	ldr	r0, [r7, #4]
 80480ea:	f000 ff99 	bl	8049020 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80480ee:	687b      	ldr	r3, [r7, #4]
 80480f0:	2200      	movs	r2, #0
 80480f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80480f4:	687b      	ldr	r3, [r7, #4]
 80480f6:	2200      	movs	r2, #0
 80480f8:	701a      	strb	r2, [r3, #0]
      break;
 80480fa:	e06f      	b.n	80481dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80480fc:	687b      	ldr	r3, [r7, #4]
 80480fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8048102:	2b00      	cmp	r3, #0
 8048104:	d019      	beq.n	804813a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8048106:	687b      	ldr	r3, [r7, #4]
 8048108:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804810c:	687b      	ldr	r3, [r7, #4]
 804810e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8048112:	23ff      	movs	r3, #255	; 0xff
 8048114:	6878      	ldr	r0, [r7, #4]
 8048116:	f000 f949 	bl	80483ac <USBH_Get_StringDesc>
 804811a:	4603      	mov	r3, r0
 804811c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804811e:	7bbb      	ldrb	r3, [r7, #14]
 8048120:	2b00      	cmp	r3, #0
 8048122:	d103      	bne.n	804812c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8048124:	687b      	ldr	r3, [r7, #4]
 8048126:	2206      	movs	r2, #6
 8048128:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804812a:	e059      	b.n	80481e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804812c:	7bbb      	ldrb	r3, [r7, #14]
 804812e:	2b03      	cmp	r3, #3
 8048130:	d156      	bne.n	80481e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8048132:	687b      	ldr	r3, [r7, #4]
 8048134:	2206      	movs	r2, #6
 8048136:	705a      	strb	r2, [r3, #1]
      break;
 8048138:	e052      	b.n	80481e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804813a:	687b      	ldr	r3, [r7, #4]
 804813c:	2206      	movs	r2, #6
 804813e:	705a      	strb	r2, [r3, #1]
      break;
 8048140:	e04e      	b.n	80481e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8048142:	687b      	ldr	r3, [r7, #4]
 8048144:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8048148:	2b00      	cmp	r3, #0
 804814a:	d019      	beq.n	8048180 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804814c:	687b      	ldr	r3, [r7, #4]
 804814e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8048152:	687b      	ldr	r3, [r7, #4]
 8048154:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8048158:	23ff      	movs	r3, #255	; 0xff
 804815a:	6878      	ldr	r0, [r7, #4]
 804815c:	f000 f926 	bl	80483ac <USBH_Get_StringDesc>
 8048160:	4603      	mov	r3, r0
 8048162:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8048164:	7bbb      	ldrb	r3, [r7, #14]
 8048166:	2b00      	cmp	r3, #0
 8048168:	d103      	bne.n	8048172 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804816a:	687b      	ldr	r3, [r7, #4]
 804816c:	2207      	movs	r2, #7
 804816e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8048170:	e038      	b.n	80481e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8048172:	7bbb      	ldrb	r3, [r7, #14]
 8048174:	2b03      	cmp	r3, #3
 8048176:	d135      	bne.n	80481e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8048178:	687b      	ldr	r3, [r7, #4]
 804817a:	2207      	movs	r2, #7
 804817c:	705a      	strb	r2, [r3, #1]
      break;
 804817e:	e031      	b.n	80481e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8048180:	687b      	ldr	r3, [r7, #4]
 8048182:	2207      	movs	r2, #7
 8048184:	705a      	strb	r2, [r3, #1]
      break;
 8048186:	e02d      	b.n	80481e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8048188:	687b      	ldr	r3, [r7, #4]
 804818a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804818e:	2b00      	cmp	r3, #0
 8048190:	d017      	beq.n	80481c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8048192:	687b      	ldr	r3, [r7, #4]
 8048194:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8048198:	687b      	ldr	r3, [r7, #4]
 804819a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804819e:	23ff      	movs	r3, #255	; 0xff
 80481a0:	6878      	ldr	r0, [r7, #4]
 80481a2:	f000 f903 	bl	80483ac <USBH_Get_StringDesc>
 80481a6:	4603      	mov	r3, r0
 80481a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80481aa:	7bbb      	ldrb	r3, [r7, #14]
 80481ac:	2b00      	cmp	r3, #0
 80481ae:	d102      	bne.n	80481b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80481b0:	2300      	movs	r3, #0
 80481b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80481b4:	e018      	b.n	80481e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80481b6:	7bbb      	ldrb	r3, [r7, #14]
 80481b8:	2b03      	cmp	r3, #3
 80481ba:	d115      	bne.n	80481e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80481bc:	2300      	movs	r3, #0
 80481be:	73fb      	strb	r3, [r7, #15]
      break;
 80481c0:	e012      	b.n	80481e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80481c2:	2300      	movs	r3, #0
 80481c4:	73fb      	strb	r3, [r7, #15]
      break;
 80481c6:	e00f      	b.n	80481e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80481c8:	bf00      	nop
 80481ca:	e00e      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481cc:	bf00      	nop
 80481ce:	e00c      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481d0:	bf00      	nop
 80481d2:	e00a      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481d4:	bf00      	nop
 80481d6:	e008      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481d8:	bf00      	nop
 80481da:	e006      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481dc:	bf00      	nop
 80481de:	e004      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481e0:	bf00      	nop
 80481e2:	e002      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481e4:	bf00      	nop
 80481e6:	e000      	b.n	80481ea <USBH_HandleEnum+0x3be>
      break;
 80481e8:	bf00      	nop
  }
  return Status;
 80481ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80481ec:	4618      	mov	r0, r3
 80481ee:	3710      	adds	r7, #16
 80481f0:	46bd      	mov	sp, r7
 80481f2:	bd80      	pop	{r7, pc}

080481f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80481f4:	b480      	push	{r7}
 80481f6:	b083      	sub	sp, #12
 80481f8:	af00      	add	r7, sp, #0
 80481fa:	6078      	str	r0, [r7, #4]
 80481fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80481fe:	687b      	ldr	r3, [r7, #4]
 8048200:	683a      	ldr	r2, [r7, #0]
 8048202:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8048206:	bf00      	nop
 8048208:	370c      	adds	r7, #12
 804820a:	46bd      	mov	sp, r7
 804820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048210:	4770      	bx	lr

08048212 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8048212:	b580      	push	{r7, lr}
 8048214:	b082      	sub	sp, #8
 8048216:	af00      	add	r7, sp, #0
 8048218:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804821a:	687b      	ldr	r3, [r7, #4]
 804821c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8048220:	1c5a      	adds	r2, r3, #1
 8048222:	687b      	ldr	r3, [r7, #4]
 8048224:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8048228:	6878      	ldr	r0, [r7, #4]
 804822a:	f000 f804 	bl	8048236 <USBH_HandleSof>
}
 804822e:	bf00      	nop
 8048230:	3708      	adds	r7, #8
 8048232:	46bd      	mov	sp, r7
 8048234:	bd80      	pop	{r7, pc}

08048236 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8048236:	b580      	push	{r7, lr}
 8048238:	b082      	sub	sp, #8
 804823a:	af00      	add	r7, sp, #0
 804823c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804823e:	687b      	ldr	r3, [r7, #4]
 8048240:	781b      	ldrb	r3, [r3, #0]
 8048242:	b2db      	uxtb	r3, r3
 8048244:	2b0b      	cmp	r3, #11
 8048246:	d10a      	bne.n	804825e <USBH_HandleSof+0x28>
 8048248:	687b      	ldr	r3, [r7, #4]
 804824a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804824e:	2b00      	cmp	r3, #0
 8048250:	d005      	beq.n	804825e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8048252:	687b      	ldr	r3, [r7, #4]
 8048254:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8048258:	699b      	ldr	r3, [r3, #24]
 804825a:	6878      	ldr	r0, [r7, #4]
 804825c:	4798      	blx	r3
  }
}
 804825e:	bf00      	nop
 8048260:	3708      	adds	r7, #8
 8048262:	46bd      	mov	sp, r7
 8048264:	bd80      	pop	{r7, pc}

08048266 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8048266:	b480      	push	{r7}
 8048268:	b083      	sub	sp, #12
 804826a:	af00      	add	r7, sp, #0
 804826c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804826e:	687b      	ldr	r3, [r7, #4]
 8048270:	2201      	movs	r2, #1
 8048272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8048276:	bf00      	nop
}
 8048278:	370c      	adds	r7, #12
 804827a:	46bd      	mov	sp, r7
 804827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048280:	4770      	bx	lr

08048282 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8048282:	b480      	push	{r7}
 8048284:	b083      	sub	sp, #12
 8048286:	af00      	add	r7, sp, #0
 8048288:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804828a:	687b      	ldr	r3, [r7, #4]
 804828c:	2200      	movs	r2, #0
 804828e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8048292:	bf00      	nop
}
 8048294:	370c      	adds	r7, #12
 8048296:	46bd      	mov	sp, r7
 8048298:	f85d 7b04 	ldr.w	r7, [sp], #4
 804829c:	4770      	bx	lr

0804829e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804829e:	b480      	push	{r7}
 80482a0:	b083      	sub	sp, #12
 80482a2:	af00      	add	r7, sp, #0
 80482a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80482a6:	687b      	ldr	r3, [r7, #4]
 80482a8:	2201      	movs	r2, #1
 80482aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80482ae:	687b      	ldr	r3, [r7, #4]
 80482b0:	2200      	movs	r2, #0
 80482b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80482b6:	687b      	ldr	r3, [r7, #4]
 80482b8:	2200      	movs	r2, #0
 80482ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80482be:	2300      	movs	r3, #0
}
 80482c0:	4618      	mov	r0, r3
 80482c2:	370c      	adds	r7, #12
 80482c4:	46bd      	mov	sp, r7
 80482c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482ca:	4770      	bx	lr

080482cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80482cc:	b580      	push	{r7, lr}
 80482ce:	b082      	sub	sp, #8
 80482d0:	af00      	add	r7, sp, #0
 80482d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80482d4:	687b      	ldr	r3, [r7, #4]
 80482d6:	2201      	movs	r2, #1
 80482d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80482dc:	687b      	ldr	r3, [r7, #4]
 80482de:	2200      	movs	r2, #0
 80482e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80482e4:	687b      	ldr	r3, [r7, #4]
 80482e6:	2200      	movs	r2, #0
 80482e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80482ec:	6878      	ldr	r0, [r7, #4]
 80482ee:	f001 f84a 	bl	8049386 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80482f2:	687b      	ldr	r3, [r7, #4]
 80482f4:	791b      	ldrb	r3, [r3, #4]
 80482f6:	4619      	mov	r1, r3
 80482f8:	6878      	ldr	r0, [r7, #4]
 80482fa:	f000 fe91 	bl	8049020 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80482fe:	687b      	ldr	r3, [r7, #4]
 8048300:	795b      	ldrb	r3, [r3, #5]
 8048302:	4619      	mov	r1, r3
 8048304:	6878      	ldr	r0, [r7, #4]
 8048306:	f000 fe8b 	bl	8049020 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804830a:	2300      	movs	r3, #0
}
 804830c:	4618      	mov	r0, r3
 804830e:	3708      	adds	r7, #8
 8048310:	46bd      	mov	sp, r7
 8048312:	bd80      	pop	{r7, pc}

08048314 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8048314:	b580      	push	{r7, lr}
 8048316:	b086      	sub	sp, #24
 8048318:	af02      	add	r7, sp, #8
 804831a:	6078      	str	r0, [r7, #4]
 804831c:	460b      	mov	r3, r1
 804831e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8048320:	687b      	ldr	r3, [r7, #4]
 8048322:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8048326:	78fb      	ldrb	r3, [r7, #3]
 8048328:	b29b      	uxth	r3, r3
 804832a:	9300      	str	r3, [sp, #0]
 804832c:	4613      	mov	r3, r2
 804832e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8048332:	2100      	movs	r1, #0
 8048334:	6878      	ldr	r0, [r7, #4]
 8048336:	f000 f864 	bl	8048402 <USBH_GetDescriptor>
 804833a:	4603      	mov	r3, r0
 804833c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804833e:	7bfb      	ldrb	r3, [r7, #15]
 8048340:	2b00      	cmp	r3, #0
 8048342:	d10a      	bne.n	804835a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8048344:	687b      	ldr	r3, [r7, #4]
 8048346:	f203 3026 	addw	r0, r3, #806	; 0x326
 804834a:	687b      	ldr	r3, [r7, #4]
 804834c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8048350:	78fa      	ldrb	r2, [r7, #3]
 8048352:	b292      	uxth	r2, r2
 8048354:	4619      	mov	r1, r3
 8048356:	f000 f918 	bl	804858a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804835a:	7bfb      	ldrb	r3, [r7, #15]
}
 804835c:	4618      	mov	r0, r3
 804835e:	3710      	adds	r7, #16
 8048360:	46bd      	mov	sp, r7
 8048362:	bd80      	pop	{r7, pc}

08048364 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8048364:	b580      	push	{r7, lr}
 8048366:	b086      	sub	sp, #24
 8048368:	af02      	add	r7, sp, #8
 804836a:	6078      	str	r0, [r7, #4]
 804836c:	460b      	mov	r3, r1
 804836e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8048370:	687b      	ldr	r3, [r7, #4]
 8048372:	331c      	adds	r3, #28
 8048374:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8048376:	887b      	ldrh	r3, [r7, #2]
 8048378:	9300      	str	r3, [sp, #0]
 804837a:	68bb      	ldr	r3, [r7, #8]
 804837c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8048380:	2100      	movs	r1, #0
 8048382:	6878      	ldr	r0, [r7, #4]
 8048384:	f000 f83d 	bl	8048402 <USBH_GetDescriptor>
 8048388:	4603      	mov	r3, r0
 804838a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804838c:	7bfb      	ldrb	r3, [r7, #15]
 804838e:	2b00      	cmp	r3, #0
 8048390:	d107      	bne.n	80483a2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8048392:	887b      	ldrh	r3, [r7, #2]
 8048394:	461a      	mov	r2, r3
 8048396:	68b9      	ldr	r1, [r7, #8]
 8048398:	6878      	ldr	r0, [r7, #4]
 804839a:	f000 f987 	bl	80486ac <USBH_ParseCfgDesc>
 804839e:	4603      	mov	r3, r0
 80483a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80483a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80483a4:	4618      	mov	r0, r3
 80483a6:	3710      	adds	r7, #16
 80483a8:	46bd      	mov	sp, r7
 80483aa:	bd80      	pop	{r7, pc}

080483ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80483ac:	b580      	push	{r7, lr}
 80483ae:	b088      	sub	sp, #32
 80483b0:	af02      	add	r7, sp, #8
 80483b2:	60f8      	str	r0, [r7, #12]
 80483b4:	607a      	str	r2, [r7, #4]
 80483b6:	461a      	mov	r2, r3
 80483b8:	460b      	mov	r3, r1
 80483ba:	72fb      	strb	r3, [r7, #11]
 80483bc:	4613      	mov	r3, r2
 80483be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80483c0:	7afb      	ldrb	r3, [r7, #11]
 80483c2:	b29b      	uxth	r3, r3
 80483c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80483c8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80483ca:	68fb      	ldr	r3, [r7, #12]
 80483cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80483d0:	893b      	ldrh	r3, [r7, #8]
 80483d2:	9300      	str	r3, [sp, #0]
 80483d4:	460b      	mov	r3, r1
 80483d6:	2100      	movs	r1, #0
 80483d8:	68f8      	ldr	r0, [r7, #12]
 80483da:	f000 f812 	bl	8048402 <USBH_GetDescriptor>
 80483de:	4603      	mov	r3, r0
 80483e0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80483e2:	7dfb      	ldrb	r3, [r7, #23]
 80483e4:	2b00      	cmp	r3, #0
 80483e6:	d107      	bne.n	80483f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80483e8:	68fb      	ldr	r3, [r7, #12]
 80483ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80483ee:	893a      	ldrh	r2, [r7, #8]
 80483f0:	6879      	ldr	r1, [r7, #4]
 80483f2:	4618      	mov	r0, r3
 80483f4:	f000 fb24 	bl	8048a40 <USBH_ParseStringDesc>
  }

  return status;
 80483f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80483fa:	4618      	mov	r0, r3
 80483fc:	3718      	adds	r7, #24
 80483fe:	46bd      	mov	sp, r7
 8048400:	bd80      	pop	{r7, pc}

08048402 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8048402:	b580      	push	{r7, lr}
 8048404:	b084      	sub	sp, #16
 8048406:	af00      	add	r7, sp, #0
 8048408:	60f8      	str	r0, [r7, #12]
 804840a:	607b      	str	r3, [r7, #4]
 804840c:	460b      	mov	r3, r1
 804840e:	72fb      	strb	r3, [r7, #11]
 8048410:	4613      	mov	r3, r2
 8048412:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8048414:	68fb      	ldr	r3, [r7, #12]
 8048416:	789b      	ldrb	r3, [r3, #2]
 8048418:	2b01      	cmp	r3, #1
 804841a:	d11c      	bne.n	8048456 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804841c:	7afb      	ldrb	r3, [r7, #11]
 804841e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8048422:	b2da      	uxtb	r2, r3
 8048424:	68fb      	ldr	r3, [r7, #12]
 8048426:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8048428:	68fb      	ldr	r3, [r7, #12]
 804842a:	2206      	movs	r2, #6
 804842c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804842e:	68fb      	ldr	r3, [r7, #12]
 8048430:	893a      	ldrh	r2, [r7, #8]
 8048432:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8048434:	893b      	ldrh	r3, [r7, #8]
 8048436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804843a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804843e:	d104      	bne.n	804844a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8048440:	68fb      	ldr	r3, [r7, #12]
 8048442:	f240 4209 	movw	r2, #1033	; 0x409
 8048446:	829a      	strh	r2, [r3, #20]
 8048448:	e002      	b.n	8048450 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804844a:	68fb      	ldr	r3, [r7, #12]
 804844c:	2200      	movs	r2, #0
 804844e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8048450:	68fb      	ldr	r3, [r7, #12]
 8048452:	8b3a      	ldrh	r2, [r7, #24]
 8048454:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8048456:	8b3b      	ldrh	r3, [r7, #24]
 8048458:	461a      	mov	r2, r3
 804845a:	6879      	ldr	r1, [r7, #4]
 804845c:	68f8      	ldr	r0, [r7, #12]
 804845e:	f000 fb3d 	bl	8048adc <USBH_CtlReq>
 8048462:	4603      	mov	r3, r0
}
 8048464:	4618      	mov	r0, r3
 8048466:	3710      	adds	r7, #16
 8048468:	46bd      	mov	sp, r7
 804846a:	bd80      	pop	{r7, pc}

0804846c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804846c:	b580      	push	{r7, lr}
 804846e:	b082      	sub	sp, #8
 8048470:	af00      	add	r7, sp, #0
 8048472:	6078      	str	r0, [r7, #4]
 8048474:	460b      	mov	r3, r1
 8048476:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8048478:	687b      	ldr	r3, [r7, #4]
 804847a:	789b      	ldrb	r3, [r3, #2]
 804847c:	2b01      	cmp	r3, #1
 804847e:	d10f      	bne.n	80484a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8048480:	687b      	ldr	r3, [r7, #4]
 8048482:	2200      	movs	r2, #0
 8048484:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8048486:	687b      	ldr	r3, [r7, #4]
 8048488:	2205      	movs	r2, #5
 804848a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804848c:	78fb      	ldrb	r3, [r7, #3]
 804848e:	b29a      	uxth	r2, r3
 8048490:	687b      	ldr	r3, [r7, #4]
 8048492:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8048494:	687b      	ldr	r3, [r7, #4]
 8048496:	2200      	movs	r2, #0
 8048498:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804849a:	687b      	ldr	r3, [r7, #4]
 804849c:	2200      	movs	r2, #0
 804849e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80484a0:	2200      	movs	r2, #0
 80484a2:	2100      	movs	r1, #0
 80484a4:	6878      	ldr	r0, [r7, #4]
 80484a6:	f000 fb19 	bl	8048adc <USBH_CtlReq>
 80484aa:	4603      	mov	r3, r0
}
 80484ac:	4618      	mov	r0, r3
 80484ae:	3708      	adds	r7, #8
 80484b0:	46bd      	mov	sp, r7
 80484b2:	bd80      	pop	{r7, pc}

080484b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80484b4:	b580      	push	{r7, lr}
 80484b6:	b082      	sub	sp, #8
 80484b8:	af00      	add	r7, sp, #0
 80484ba:	6078      	str	r0, [r7, #4]
 80484bc:	460b      	mov	r3, r1
 80484be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80484c0:	687b      	ldr	r3, [r7, #4]
 80484c2:	789b      	ldrb	r3, [r3, #2]
 80484c4:	2b01      	cmp	r3, #1
 80484c6:	d10e      	bne.n	80484e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80484c8:	687b      	ldr	r3, [r7, #4]
 80484ca:	2200      	movs	r2, #0
 80484cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80484ce:	687b      	ldr	r3, [r7, #4]
 80484d0:	2209      	movs	r2, #9
 80484d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80484d4:	687b      	ldr	r3, [r7, #4]
 80484d6:	887a      	ldrh	r2, [r7, #2]
 80484d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80484da:	687b      	ldr	r3, [r7, #4]
 80484dc:	2200      	movs	r2, #0
 80484de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80484e0:	687b      	ldr	r3, [r7, #4]
 80484e2:	2200      	movs	r2, #0
 80484e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80484e6:	2200      	movs	r2, #0
 80484e8:	2100      	movs	r1, #0
 80484ea:	6878      	ldr	r0, [r7, #4]
 80484ec:	f000 faf6 	bl	8048adc <USBH_CtlReq>
 80484f0:	4603      	mov	r3, r0
}
 80484f2:	4618      	mov	r0, r3
 80484f4:	3708      	adds	r7, #8
 80484f6:	46bd      	mov	sp, r7
 80484f8:	bd80      	pop	{r7, pc}

080484fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80484fa:	b580      	push	{r7, lr}
 80484fc:	b082      	sub	sp, #8
 80484fe:	af00      	add	r7, sp, #0
 8048500:	6078      	str	r0, [r7, #4]
 8048502:	460b      	mov	r3, r1
 8048504:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8048506:	687b      	ldr	r3, [r7, #4]
 8048508:	789b      	ldrb	r3, [r3, #2]
 804850a:	2b01      	cmp	r3, #1
 804850c:	d10f      	bne.n	804852e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804850e:	687b      	ldr	r3, [r7, #4]
 8048510:	2200      	movs	r2, #0
 8048512:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8048514:	687b      	ldr	r3, [r7, #4]
 8048516:	2203      	movs	r2, #3
 8048518:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804851a:	78fb      	ldrb	r3, [r7, #3]
 804851c:	b29a      	uxth	r2, r3
 804851e:	687b      	ldr	r3, [r7, #4]
 8048520:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8048522:	687b      	ldr	r3, [r7, #4]
 8048524:	2200      	movs	r2, #0
 8048526:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8048528:	687b      	ldr	r3, [r7, #4]
 804852a:	2200      	movs	r2, #0
 804852c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804852e:	2200      	movs	r2, #0
 8048530:	2100      	movs	r1, #0
 8048532:	6878      	ldr	r0, [r7, #4]
 8048534:	f000 fad2 	bl	8048adc <USBH_CtlReq>
 8048538:	4603      	mov	r3, r0
}
 804853a:	4618      	mov	r0, r3
 804853c:	3708      	adds	r7, #8
 804853e:	46bd      	mov	sp, r7
 8048540:	bd80      	pop	{r7, pc}

08048542 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8048542:	b580      	push	{r7, lr}
 8048544:	b082      	sub	sp, #8
 8048546:	af00      	add	r7, sp, #0
 8048548:	6078      	str	r0, [r7, #4]
 804854a:	460b      	mov	r3, r1
 804854c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804854e:	687b      	ldr	r3, [r7, #4]
 8048550:	789b      	ldrb	r3, [r3, #2]
 8048552:	2b01      	cmp	r3, #1
 8048554:	d10f      	bne.n	8048576 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8048556:	687b      	ldr	r3, [r7, #4]
 8048558:	2202      	movs	r2, #2
 804855a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804855c:	687b      	ldr	r3, [r7, #4]
 804855e:	2201      	movs	r2, #1
 8048560:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8048562:	687b      	ldr	r3, [r7, #4]
 8048564:	2200      	movs	r2, #0
 8048566:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8048568:	78fb      	ldrb	r3, [r7, #3]
 804856a:	b29a      	uxth	r2, r3
 804856c:	687b      	ldr	r3, [r7, #4]
 804856e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8048570:	687b      	ldr	r3, [r7, #4]
 8048572:	2200      	movs	r2, #0
 8048574:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8048576:	2200      	movs	r2, #0
 8048578:	2100      	movs	r1, #0
 804857a:	6878      	ldr	r0, [r7, #4]
 804857c:	f000 faae 	bl	8048adc <USBH_CtlReq>
 8048580:	4603      	mov	r3, r0
}
 8048582:	4618      	mov	r0, r3
 8048584:	3708      	adds	r7, #8
 8048586:	46bd      	mov	sp, r7
 8048588:	bd80      	pop	{r7, pc}

0804858a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804858a:	b480      	push	{r7}
 804858c:	b085      	sub	sp, #20
 804858e:	af00      	add	r7, sp, #0
 8048590:	60f8      	str	r0, [r7, #12]
 8048592:	60b9      	str	r1, [r7, #8]
 8048594:	4613      	mov	r3, r2
 8048596:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8048598:	68bb      	ldr	r3, [r7, #8]
 804859a:	781a      	ldrb	r2, [r3, #0]
 804859c:	68fb      	ldr	r3, [r7, #12]
 804859e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80485a0:	68bb      	ldr	r3, [r7, #8]
 80485a2:	785a      	ldrb	r2, [r3, #1]
 80485a4:	68fb      	ldr	r3, [r7, #12]
 80485a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80485a8:	68bb      	ldr	r3, [r7, #8]
 80485aa:	3302      	adds	r3, #2
 80485ac:	781b      	ldrb	r3, [r3, #0]
 80485ae:	b29a      	uxth	r2, r3
 80485b0:	68bb      	ldr	r3, [r7, #8]
 80485b2:	3303      	adds	r3, #3
 80485b4:	781b      	ldrb	r3, [r3, #0]
 80485b6:	b29b      	uxth	r3, r3
 80485b8:	021b      	lsls	r3, r3, #8
 80485ba:	b29b      	uxth	r3, r3
 80485bc:	4313      	orrs	r3, r2
 80485be:	b29a      	uxth	r2, r3
 80485c0:	68fb      	ldr	r3, [r7, #12]
 80485c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80485c4:	68bb      	ldr	r3, [r7, #8]
 80485c6:	791a      	ldrb	r2, [r3, #4]
 80485c8:	68fb      	ldr	r3, [r7, #12]
 80485ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80485cc:	68bb      	ldr	r3, [r7, #8]
 80485ce:	795a      	ldrb	r2, [r3, #5]
 80485d0:	68fb      	ldr	r3, [r7, #12]
 80485d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80485d4:	68bb      	ldr	r3, [r7, #8]
 80485d6:	799a      	ldrb	r2, [r3, #6]
 80485d8:	68fb      	ldr	r3, [r7, #12]
 80485da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80485dc:	68bb      	ldr	r3, [r7, #8]
 80485de:	79da      	ldrb	r2, [r3, #7]
 80485e0:	68fb      	ldr	r3, [r7, #12]
 80485e2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80485e4:	68fb      	ldr	r3, [r7, #12]
 80485e6:	79db      	ldrb	r3, [r3, #7]
 80485e8:	2b20      	cmp	r3, #32
 80485ea:	dc11      	bgt.n	8048610 <USBH_ParseDevDesc+0x86>
 80485ec:	2b08      	cmp	r3, #8
 80485ee:	db16      	blt.n	804861e <USBH_ParseDevDesc+0x94>
 80485f0:	3b08      	subs	r3, #8
 80485f2:	2201      	movs	r2, #1
 80485f4:	fa02 f303 	lsl.w	r3, r2, r3
 80485f8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80485fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8048600:	2b00      	cmp	r3, #0
 8048602:	bf14      	ite	ne
 8048604:	2301      	movne	r3, #1
 8048606:	2300      	moveq	r3, #0
 8048608:	b2db      	uxtb	r3, r3
 804860a:	2b00      	cmp	r3, #0
 804860c:	d102      	bne.n	8048614 <USBH_ParseDevDesc+0x8a>
 804860e:	e006      	b.n	804861e <USBH_ParseDevDesc+0x94>
 8048610:	2b40      	cmp	r3, #64	; 0x40
 8048612:	d104      	bne.n	804861e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8048614:	68fb      	ldr	r3, [r7, #12]
 8048616:	79da      	ldrb	r2, [r3, #7]
 8048618:	68fb      	ldr	r3, [r7, #12]
 804861a:	71da      	strb	r2, [r3, #7]
      break;
 804861c:	e003      	b.n	8048626 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804861e:	68fb      	ldr	r3, [r7, #12]
 8048620:	2240      	movs	r2, #64	; 0x40
 8048622:	71da      	strb	r2, [r3, #7]
      break;
 8048624:	bf00      	nop
  }

  if (length > 8U)
 8048626:	88fb      	ldrh	r3, [r7, #6]
 8048628:	2b08      	cmp	r3, #8
 804862a:	d939      	bls.n	80486a0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804862c:	68bb      	ldr	r3, [r7, #8]
 804862e:	3308      	adds	r3, #8
 8048630:	781b      	ldrb	r3, [r3, #0]
 8048632:	b29a      	uxth	r2, r3
 8048634:	68bb      	ldr	r3, [r7, #8]
 8048636:	3309      	adds	r3, #9
 8048638:	781b      	ldrb	r3, [r3, #0]
 804863a:	b29b      	uxth	r3, r3
 804863c:	021b      	lsls	r3, r3, #8
 804863e:	b29b      	uxth	r3, r3
 8048640:	4313      	orrs	r3, r2
 8048642:	b29a      	uxth	r2, r3
 8048644:	68fb      	ldr	r3, [r7, #12]
 8048646:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8048648:	68bb      	ldr	r3, [r7, #8]
 804864a:	330a      	adds	r3, #10
 804864c:	781b      	ldrb	r3, [r3, #0]
 804864e:	b29a      	uxth	r2, r3
 8048650:	68bb      	ldr	r3, [r7, #8]
 8048652:	330b      	adds	r3, #11
 8048654:	781b      	ldrb	r3, [r3, #0]
 8048656:	b29b      	uxth	r3, r3
 8048658:	021b      	lsls	r3, r3, #8
 804865a:	b29b      	uxth	r3, r3
 804865c:	4313      	orrs	r3, r2
 804865e:	b29a      	uxth	r2, r3
 8048660:	68fb      	ldr	r3, [r7, #12]
 8048662:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8048664:	68bb      	ldr	r3, [r7, #8]
 8048666:	330c      	adds	r3, #12
 8048668:	781b      	ldrb	r3, [r3, #0]
 804866a:	b29a      	uxth	r2, r3
 804866c:	68bb      	ldr	r3, [r7, #8]
 804866e:	330d      	adds	r3, #13
 8048670:	781b      	ldrb	r3, [r3, #0]
 8048672:	b29b      	uxth	r3, r3
 8048674:	021b      	lsls	r3, r3, #8
 8048676:	b29b      	uxth	r3, r3
 8048678:	4313      	orrs	r3, r2
 804867a:	b29a      	uxth	r2, r3
 804867c:	68fb      	ldr	r3, [r7, #12]
 804867e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8048680:	68bb      	ldr	r3, [r7, #8]
 8048682:	7b9a      	ldrb	r2, [r3, #14]
 8048684:	68fb      	ldr	r3, [r7, #12]
 8048686:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8048688:	68bb      	ldr	r3, [r7, #8]
 804868a:	7bda      	ldrb	r2, [r3, #15]
 804868c:	68fb      	ldr	r3, [r7, #12]
 804868e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8048690:	68bb      	ldr	r3, [r7, #8]
 8048692:	7c1a      	ldrb	r2, [r3, #16]
 8048694:	68fb      	ldr	r3, [r7, #12]
 8048696:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8048698:	68bb      	ldr	r3, [r7, #8]
 804869a:	7c5a      	ldrb	r2, [r3, #17]
 804869c:	68fb      	ldr	r3, [r7, #12]
 804869e:	745a      	strb	r2, [r3, #17]
  }
}
 80486a0:	bf00      	nop
 80486a2:	3714      	adds	r7, #20
 80486a4:	46bd      	mov	sp, r7
 80486a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80486aa:	4770      	bx	lr

080486ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80486ac:	b580      	push	{r7, lr}
 80486ae:	b08c      	sub	sp, #48	; 0x30
 80486b0:	af00      	add	r7, sp, #0
 80486b2:	60f8      	str	r0, [r7, #12]
 80486b4:	60b9      	str	r1, [r7, #8]
 80486b6:	4613      	mov	r3, r2
 80486b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80486ba:	68fb      	ldr	r3, [r7, #12]
 80486bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80486c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80486c2:	2300      	movs	r3, #0
 80486c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80486c8:	68bb      	ldr	r3, [r7, #8]
 80486ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80486cc:	2300      	movs	r3, #0
 80486ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80486d2:	2300      	movs	r3, #0
 80486d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80486d8:	68bb      	ldr	r3, [r7, #8]
 80486da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80486dc:	68bb      	ldr	r3, [r7, #8]
 80486de:	781a      	ldrb	r2, [r3, #0]
 80486e0:	6a3b      	ldr	r3, [r7, #32]
 80486e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80486e4:	68bb      	ldr	r3, [r7, #8]
 80486e6:	785a      	ldrb	r2, [r3, #1]
 80486e8:	6a3b      	ldr	r3, [r7, #32]
 80486ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80486ec:	68bb      	ldr	r3, [r7, #8]
 80486ee:	3302      	adds	r3, #2
 80486f0:	781b      	ldrb	r3, [r3, #0]
 80486f2:	b29a      	uxth	r2, r3
 80486f4:	68bb      	ldr	r3, [r7, #8]
 80486f6:	3303      	adds	r3, #3
 80486f8:	781b      	ldrb	r3, [r3, #0]
 80486fa:	b29b      	uxth	r3, r3
 80486fc:	021b      	lsls	r3, r3, #8
 80486fe:	b29b      	uxth	r3, r3
 8048700:	4313      	orrs	r3, r2
 8048702:	b29b      	uxth	r3, r3
 8048704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8048708:	bf28      	it	cs
 804870a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804870e:	b29a      	uxth	r2, r3
 8048710:	6a3b      	ldr	r3, [r7, #32]
 8048712:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8048714:	68bb      	ldr	r3, [r7, #8]
 8048716:	791a      	ldrb	r2, [r3, #4]
 8048718:	6a3b      	ldr	r3, [r7, #32]
 804871a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804871c:	68bb      	ldr	r3, [r7, #8]
 804871e:	795a      	ldrb	r2, [r3, #5]
 8048720:	6a3b      	ldr	r3, [r7, #32]
 8048722:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8048724:	68bb      	ldr	r3, [r7, #8]
 8048726:	799a      	ldrb	r2, [r3, #6]
 8048728:	6a3b      	ldr	r3, [r7, #32]
 804872a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804872c:	68bb      	ldr	r3, [r7, #8]
 804872e:	79da      	ldrb	r2, [r3, #7]
 8048730:	6a3b      	ldr	r3, [r7, #32]
 8048732:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8048734:	68bb      	ldr	r3, [r7, #8]
 8048736:	7a1a      	ldrb	r2, [r3, #8]
 8048738:	6a3b      	ldr	r3, [r7, #32]
 804873a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804873c:	6a3b      	ldr	r3, [r7, #32]
 804873e:	781b      	ldrb	r3, [r3, #0]
 8048740:	2b09      	cmp	r3, #9
 8048742:	d002      	beq.n	804874a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8048744:	6a3b      	ldr	r3, [r7, #32]
 8048746:	2209      	movs	r2, #9
 8048748:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804874a:	88fb      	ldrh	r3, [r7, #6]
 804874c:	2b09      	cmp	r3, #9
 804874e:	f240 809d 	bls.w	804888c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8048752:	2309      	movs	r3, #9
 8048754:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8048756:	2300      	movs	r3, #0
 8048758:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804875a:	e081      	b.n	8048860 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804875c:	f107 0316 	add.w	r3, r7, #22
 8048760:	4619      	mov	r1, r3
 8048762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8048764:	f000 f99f 	bl	8048aa6 <USBH_GetNextDesc>
 8048768:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804876c:	785b      	ldrb	r3, [r3, #1]
 804876e:	2b04      	cmp	r3, #4
 8048770:	d176      	bne.n	8048860 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8048772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048774:	781b      	ldrb	r3, [r3, #0]
 8048776:	2b09      	cmp	r3, #9
 8048778:	d002      	beq.n	8048780 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804877c:	2209      	movs	r2, #9
 804877e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8048780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8048784:	221a      	movs	r2, #26
 8048786:	fb02 f303 	mul.w	r3, r2, r3
 804878a:	3308      	adds	r3, #8
 804878c:	6a3a      	ldr	r2, [r7, #32]
 804878e:	4413      	add	r3, r2
 8048790:	3302      	adds	r3, #2
 8048792:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8048794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8048796:	69f8      	ldr	r0, [r7, #28]
 8048798:	f000 f87e 	bl	8048898 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804879c:	2300      	movs	r3, #0
 804879e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80487a2:	2300      	movs	r3, #0
 80487a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80487a6:	e043      	b.n	8048830 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80487a8:	f107 0316 	add.w	r3, r7, #22
 80487ac:	4619      	mov	r1, r3
 80487ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80487b0:	f000 f979 	bl	8048aa6 <USBH_GetNextDesc>
 80487b4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80487b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80487b8:	785b      	ldrb	r3, [r3, #1]
 80487ba:	2b05      	cmp	r3, #5
 80487bc:	d138      	bne.n	8048830 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80487be:	69fb      	ldr	r3, [r7, #28]
 80487c0:	795b      	ldrb	r3, [r3, #5]
 80487c2:	2b01      	cmp	r3, #1
 80487c4:	d10f      	bne.n	80487e6 <USBH_ParseCfgDesc+0x13a>
 80487c6:	69fb      	ldr	r3, [r7, #28]
 80487c8:	799b      	ldrb	r3, [r3, #6]
 80487ca:	2b02      	cmp	r3, #2
 80487cc:	d10b      	bne.n	80487e6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80487ce:	69fb      	ldr	r3, [r7, #28]
 80487d0:	79db      	ldrb	r3, [r3, #7]
 80487d2:	2b00      	cmp	r3, #0
 80487d4:	d10f      	bne.n	80487f6 <USBH_ParseCfgDesc+0x14a>
 80487d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80487d8:	781b      	ldrb	r3, [r3, #0]
 80487da:	2b09      	cmp	r3, #9
 80487dc:	d00b      	beq.n	80487f6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80487de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80487e0:	2209      	movs	r2, #9
 80487e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80487e4:	e007      	b.n	80487f6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80487e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80487e8:	781b      	ldrb	r3, [r3, #0]
 80487ea:	2b07      	cmp	r3, #7
 80487ec:	d004      	beq.n	80487f8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80487ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80487f0:	2207      	movs	r2, #7
 80487f2:	701a      	strb	r2, [r3, #0]
 80487f4:	e000      	b.n	80487f8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80487f6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80487f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80487fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8048800:	3201      	adds	r2, #1
 8048802:	00d2      	lsls	r2, r2, #3
 8048804:	211a      	movs	r1, #26
 8048806:	fb01 f303 	mul.w	r3, r1, r3
 804880a:	4413      	add	r3, r2
 804880c:	3308      	adds	r3, #8
 804880e:	6a3a      	ldr	r2, [r7, #32]
 8048810:	4413      	add	r3, r2
 8048812:	3304      	adds	r3, #4
 8048814:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8048816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8048818:	69b9      	ldr	r1, [r7, #24]
 804881a:	68f8      	ldr	r0, [r7, #12]
 804881c:	f000 f86b 	bl	80488f6 <USBH_ParseEPDesc>
 8048820:	4603      	mov	r3, r0
 8048822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8048826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804882a:	3301      	adds	r3, #1
 804882c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8048830:	69fb      	ldr	r3, [r7, #28]
 8048832:	791b      	ldrb	r3, [r3, #4]
 8048834:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8048838:	429a      	cmp	r2, r3
 804883a:	d204      	bcs.n	8048846 <USBH_ParseCfgDesc+0x19a>
 804883c:	6a3b      	ldr	r3, [r7, #32]
 804883e:	885a      	ldrh	r2, [r3, #2]
 8048840:	8afb      	ldrh	r3, [r7, #22]
 8048842:	429a      	cmp	r2, r3
 8048844:	d8b0      	bhi.n	80487a8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8048846:	69fb      	ldr	r3, [r7, #28]
 8048848:	791b      	ldrb	r3, [r3, #4]
 804884a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804884e:	429a      	cmp	r2, r3
 8048850:	d201      	bcs.n	8048856 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8048852:	2303      	movs	r3, #3
 8048854:	e01c      	b.n	8048890 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8048856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804885a:	3301      	adds	r3, #1
 804885c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8048860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8048864:	2b01      	cmp	r3, #1
 8048866:	d805      	bhi.n	8048874 <USBH_ParseCfgDesc+0x1c8>
 8048868:	6a3b      	ldr	r3, [r7, #32]
 804886a:	885a      	ldrh	r2, [r3, #2]
 804886c:	8afb      	ldrh	r3, [r7, #22]
 804886e:	429a      	cmp	r2, r3
 8048870:	f63f af74 	bhi.w	804875c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8048874:	6a3b      	ldr	r3, [r7, #32]
 8048876:	791b      	ldrb	r3, [r3, #4]
 8048878:	2b02      	cmp	r3, #2
 804887a:	bf28      	it	cs
 804887c:	2302      	movcs	r3, #2
 804887e:	b2db      	uxtb	r3, r3
 8048880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8048884:	429a      	cmp	r2, r3
 8048886:	d201      	bcs.n	804888c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8048888:	2303      	movs	r3, #3
 804888a:	e001      	b.n	8048890 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804888c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8048890:	4618      	mov	r0, r3
 8048892:	3730      	adds	r7, #48	; 0x30
 8048894:	46bd      	mov	sp, r7
 8048896:	bd80      	pop	{r7, pc}

08048898 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8048898:	b480      	push	{r7}
 804889a:	b083      	sub	sp, #12
 804889c:	af00      	add	r7, sp, #0
 804889e:	6078      	str	r0, [r7, #4]
 80488a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80488a2:	683b      	ldr	r3, [r7, #0]
 80488a4:	781a      	ldrb	r2, [r3, #0]
 80488a6:	687b      	ldr	r3, [r7, #4]
 80488a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80488aa:	683b      	ldr	r3, [r7, #0]
 80488ac:	785a      	ldrb	r2, [r3, #1]
 80488ae:	687b      	ldr	r3, [r7, #4]
 80488b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80488b2:	683b      	ldr	r3, [r7, #0]
 80488b4:	789a      	ldrb	r2, [r3, #2]
 80488b6:	687b      	ldr	r3, [r7, #4]
 80488b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80488ba:	683b      	ldr	r3, [r7, #0]
 80488bc:	78da      	ldrb	r2, [r3, #3]
 80488be:	687b      	ldr	r3, [r7, #4]
 80488c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80488c2:	683b      	ldr	r3, [r7, #0]
 80488c4:	791a      	ldrb	r2, [r3, #4]
 80488c6:	687b      	ldr	r3, [r7, #4]
 80488c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80488ca:	683b      	ldr	r3, [r7, #0]
 80488cc:	795a      	ldrb	r2, [r3, #5]
 80488ce:	687b      	ldr	r3, [r7, #4]
 80488d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80488d2:	683b      	ldr	r3, [r7, #0]
 80488d4:	799a      	ldrb	r2, [r3, #6]
 80488d6:	687b      	ldr	r3, [r7, #4]
 80488d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80488da:	683b      	ldr	r3, [r7, #0]
 80488dc:	79da      	ldrb	r2, [r3, #7]
 80488de:	687b      	ldr	r3, [r7, #4]
 80488e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80488e2:	683b      	ldr	r3, [r7, #0]
 80488e4:	7a1a      	ldrb	r2, [r3, #8]
 80488e6:	687b      	ldr	r3, [r7, #4]
 80488e8:	721a      	strb	r2, [r3, #8]
}
 80488ea:	bf00      	nop
 80488ec:	370c      	adds	r7, #12
 80488ee:	46bd      	mov	sp, r7
 80488f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488f4:	4770      	bx	lr

080488f6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80488f6:	b480      	push	{r7}
 80488f8:	b087      	sub	sp, #28
 80488fa:	af00      	add	r7, sp, #0
 80488fc:	60f8      	str	r0, [r7, #12]
 80488fe:	60b9      	str	r1, [r7, #8]
 8048900:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8048902:	2300      	movs	r3, #0
 8048904:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8048906:	687b      	ldr	r3, [r7, #4]
 8048908:	781a      	ldrb	r2, [r3, #0]
 804890a:	68bb      	ldr	r3, [r7, #8]
 804890c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804890e:	687b      	ldr	r3, [r7, #4]
 8048910:	785a      	ldrb	r2, [r3, #1]
 8048912:	68bb      	ldr	r3, [r7, #8]
 8048914:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8048916:	687b      	ldr	r3, [r7, #4]
 8048918:	789a      	ldrb	r2, [r3, #2]
 804891a:	68bb      	ldr	r3, [r7, #8]
 804891c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804891e:	687b      	ldr	r3, [r7, #4]
 8048920:	78da      	ldrb	r2, [r3, #3]
 8048922:	68bb      	ldr	r3, [r7, #8]
 8048924:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8048926:	687b      	ldr	r3, [r7, #4]
 8048928:	3304      	adds	r3, #4
 804892a:	781b      	ldrb	r3, [r3, #0]
 804892c:	b29a      	uxth	r2, r3
 804892e:	687b      	ldr	r3, [r7, #4]
 8048930:	3305      	adds	r3, #5
 8048932:	781b      	ldrb	r3, [r3, #0]
 8048934:	b29b      	uxth	r3, r3
 8048936:	021b      	lsls	r3, r3, #8
 8048938:	b29b      	uxth	r3, r3
 804893a:	4313      	orrs	r3, r2
 804893c:	b29a      	uxth	r2, r3
 804893e:	68bb      	ldr	r3, [r7, #8]
 8048940:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8048942:	687b      	ldr	r3, [r7, #4]
 8048944:	799a      	ldrb	r2, [r3, #6]
 8048946:	68bb      	ldr	r3, [r7, #8]
 8048948:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804894a:	68bb      	ldr	r3, [r7, #8]
 804894c:	889b      	ldrh	r3, [r3, #4]
 804894e:	2b00      	cmp	r3, #0
 8048950:	d102      	bne.n	8048958 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8048952:	2303      	movs	r3, #3
 8048954:	75fb      	strb	r3, [r7, #23]
 8048956:	e033      	b.n	80489c0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8048958:	68bb      	ldr	r3, [r7, #8]
 804895a:	889b      	ldrh	r3, [r3, #4]
 804895c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8048960:	f023 0307 	bic.w	r3, r3, #7
 8048964:	b29a      	uxth	r2, r3
 8048966:	68bb      	ldr	r3, [r7, #8]
 8048968:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804896a:	68bb      	ldr	r3, [r7, #8]
 804896c:	889b      	ldrh	r3, [r3, #4]
 804896e:	b21a      	sxth	r2, r3
 8048970:	687b      	ldr	r3, [r7, #4]
 8048972:	3304      	adds	r3, #4
 8048974:	781b      	ldrb	r3, [r3, #0]
 8048976:	b299      	uxth	r1, r3
 8048978:	687b      	ldr	r3, [r7, #4]
 804897a:	3305      	adds	r3, #5
 804897c:	781b      	ldrb	r3, [r3, #0]
 804897e:	b29b      	uxth	r3, r3
 8048980:	021b      	lsls	r3, r3, #8
 8048982:	b29b      	uxth	r3, r3
 8048984:	430b      	orrs	r3, r1
 8048986:	b29b      	uxth	r3, r3
 8048988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804898c:	2b00      	cmp	r3, #0
 804898e:	d110      	bne.n	80489b2 <USBH_ParseEPDesc+0xbc>
 8048990:	687b      	ldr	r3, [r7, #4]
 8048992:	3304      	adds	r3, #4
 8048994:	781b      	ldrb	r3, [r3, #0]
 8048996:	b299      	uxth	r1, r3
 8048998:	687b      	ldr	r3, [r7, #4]
 804899a:	3305      	adds	r3, #5
 804899c:	781b      	ldrb	r3, [r3, #0]
 804899e:	b29b      	uxth	r3, r3
 80489a0:	021b      	lsls	r3, r3, #8
 80489a2:	b29b      	uxth	r3, r3
 80489a4:	430b      	orrs	r3, r1
 80489a6:	b29b      	uxth	r3, r3
 80489a8:	b21b      	sxth	r3, r3
 80489aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80489ae:	b21b      	sxth	r3, r3
 80489b0:	e001      	b.n	80489b6 <USBH_ParseEPDesc+0xc0>
 80489b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80489b6:	4313      	orrs	r3, r2
 80489b8:	b21b      	sxth	r3, r3
 80489ba:	b29a      	uxth	r2, r3
 80489bc:	68bb      	ldr	r3, [r7, #8]
 80489be:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80489c0:	68fb      	ldr	r3, [r7, #12]
 80489c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80489c6:	2b00      	cmp	r3, #0
 80489c8:	d116      	bne.n	80489f8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80489ca:	68bb      	ldr	r3, [r7, #8]
 80489cc:	78db      	ldrb	r3, [r3, #3]
 80489ce:	f003 0303 	and.w	r3, r3, #3
 80489d2:	2b01      	cmp	r3, #1
 80489d4:	d005      	beq.n	80489e2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80489d6:	68bb      	ldr	r3, [r7, #8]
 80489d8:	78db      	ldrb	r3, [r3, #3]
 80489da:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80489de:	2b03      	cmp	r3, #3
 80489e0:	d127      	bne.n	8048a32 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80489e2:	68bb      	ldr	r3, [r7, #8]
 80489e4:	799b      	ldrb	r3, [r3, #6]
 80489e6:	2b00      	cmp	r3, #0
 80489e8:	d003      	beq.n	80489f2 <USBH_ParseEPDesc+0xfc>
 80489ea:	68bb      	ldr	r3, [r7, #8]
 80489ec:	799b      	ldrb	r3, [r3, #6]
 80489ee:	2b10      	cmp	r3, #16
 80489f0:	d91f      	bls.n	8048a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80489f2:	2303      	movs	r3, #3
 80489f4:	75fb      	strb	r3, [r7, #23]
 80489f6:	e01c      	b.n	8048a32 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80489f8:	68bb      	ldr	r3, [r7, #8]
 80489fa:	78db      	ldrb	r3, [r3, #3]
 80489fc:	f003 0303 	and.w	r3, r3, #3
 8048a00:	2b01      	cmp	r3, #1
 8048a02:	d10a      	bne.n	8048a1a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8048a04:	68bb      	ldr	r3, [r7, #8]
 8048a06:	799b      	ldrb	r3, [r3, #6]
 8048a08:	2b00      	cmp	r3, #0
 8048a0a:	d003      	beq.n	8048a14 <USBH_ParseEPDesc+0x11e>
 8048a0c:	68bb      	ldr	r3, [r7, #8]
 8048a0e:	799b      	ldrb	r3, [r3, #6]
 8048a10:	2b10      	cmp	r3, #16
 8048a12:	d90e      	bls.n	8048a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8048a14:	2303      	movs	r3, #3
 8048a16:	75fb      	strb	r3, [r7, #23]
 8048a18:	e00b      	b.n	8048a32 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8048a1a:	68bb      	ldr	r3, [r7, #8]
 8048a1c:	78db      	ldrb	r3, [r3, #3]
 8048a1e:	f003 0303 	and.w	r3, r3, #3
 8048a22:	2b03      	cmp	r3, #3
 8048a24:	d105      	bne.n	8048a32 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8048a26:	68bb      	ldr	r3, [r7, #8]
 8048a28:	799b      	ldrb	r3, [r3, #6]
 8048a2a:	2b00      	cmp	r3, #0
 8048a2c:	d101      	bne.n	8048a32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8048a2e:	2303      	movs	r3, #3
 8048a30:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8048a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8048a34:	4618      	mov	r0, r3
 8048a36:	371c      	adds	r7, #28
 8048a38:	46bd      	mov	sp, r7
 8048a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a3e:	4770      	bx	lr

08048a40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8048a40:	b480      	push	{r7}
 8048a42:	b087      	sub	sp, #28
 8048a44:	af00      	add	r7, sp, #0
 8048a46:	60f8      	str	r0, [r7, #12]
 8048a48:	60b9      	str	r1, [r7, #8]
 8048a4a:	4613      	mov	r3, r2
 8048a4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8048a4e:	68fb      	ldr	r3, [r7, #12]
 8048a50:	3301      	adds	r3, #1
 8048a52:	781b      	ldrb	r3, [r3, #0]
 8048a54:	2b03      	cmp	r3, #3
 8048a56:	d120      	bne.n	8048a9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8048a58:	68fb      	ldr	r3, [r7, #12]
 8048a5a:	781b      	ldrb	r3, [r3, #0]
 8048a5c:	1e9a      	subs	r2, r3, #2
 8048a5e:	88fb      	ldrh	r3, [r7, #6]
 8048a60:	4293      	cmp	r3, r2
 8048a62:	bf28      	it	cs
 8048a64:	4613      	movcs	r3, r2
 8048a66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8048a68:	68fb      	ldr	r3, [r7, #12]
 8048a6a:	3302      	adds	r3, #2
 8048a6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8048a6e:	2300      	movs	r3, #0
 8048a70:	82fb      	strh	r3, [r7, #22]
 8048a72:	e00b      	b.n	8048a8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8048a74:	8afb      	ldrh	r3, [r7, #22]
 8048a76:	68fa      	ldr	r2, [r7, #12]
 8048a78:	4413      	add	r3, r2
 8048a7a:	781a      	ldrb	r2, [r3, #0]
 8048a7c:	68bb      	ldr	r3, [r7, #8]
 8048a7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8048a80:	68bb      	ldr	r3, [r7, #8]
 8048a82:	3301      	adds	r3, #1
 8048a84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8048a86:	8afb      	ldrh	r3, [r7, #22]
 8048a88:	3302      	adds	r3, #2
 8048a8a:	82fb      	strh	r3, [r7, #22]
 8048a8c:	8afa      	ldrh	r2, [r7, #22]
 8048a8e:	8abb      	ldrh	r3, [r7, #20]
 8048a90:	429a      	cmp	r2, r3
 8048a92:	d3ef      	bcc.n	8048a74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8048a94:	68bb      	ldr	r3, [r7, #8]
 8048a96:	2200      	movs	r2, #0
 8048a98:	701a      	strb	r2, [r3, #0]
  }
}
 8048a9a:	bf00      	nop
 8048a9c:	371c      	adds	r7, #28
 8048a9e:	46bd      	mov	sp, r7
 8048aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048aa4:	4770      	bx	lr

08048aa6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8048aa6:	b480      	push	{r7}
 8048aa8:	b085      	sub	sp, #20
 8048aaa:	af00      	add	r7, sp, #0
 8048aac:	6078      	str	r0, [r7, #4]
 8048aae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8048ab0:	683b      	ldr	r3, [r7, #0]
 8048ab2:	881a      	ldrh	r2, [r3, #0]
 8048ab4:	687b      	ldr	r3, [r7, #4]
 8048ab6:	781b      	ldrb	r3, [r3, #0]
 8048ab8:	b29b      	uxth	r3, r3
 8048aba:	4413      	add	r3, r2
 8048abc:	b29a      	uxth	r2, r3
 8048abe:	683b      	ldr	r3, [r7, #0]
 8048ac0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8048ac2:	687b      	ldr	r3, [r7, #4]
 8048ac4:	781b      	ldrb	r3, [r3, #0]
 8048ac6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8048ac8:	687b      	ldr	r3, [r7, #4]
 8048aca:	4413      	add	r3, r2
 8048acc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8048ace:	68fb      	ldr	r3, [r7, #12]
}
 8048ad0:	4618      	mov	r0, r3
 8048ad2:	3714      	adds	r7, #20
 8048ad4:	46bd      	mov	sp, r7
 8048ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ada:	4770      	bx	lr

08048adc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8048adc:	b580      	push	{r7, lr}
 8048ade:	b086      	sub	sp, #24
 8048ae0:	af00      	add	r7, sp, #0
 8048ae2:	60f8      	str	r0, [r7, #12]
 8048ae4:	60b9      	str	r1, [r7, #8]
 8048ae6:	4613      	mov	r3, r2
 8048ae8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8048aea:	2301      	movs	r3, #1
 8048aec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8048aee:	68fb      	ldr	r3, [r7, #12]
 8048af0:	789b      	ldrb	r3, [r3, #2]
 8048af2:	2b01      	cmp	r3, #1
 8048af4:	d002      	beq.n	8048afc <USBH_CtlReq+0x20>
 8048af6:	2b02      	cmp	r3, #2
 8048af8:	d00f      	beq.n	8048b1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8048afa:	e027      	b.n	8048b4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8048afc:	68fb      	ldr	r3, [r7, #12]
 8048afe:	68ba      	ldr	r2, [r7, #8]
 8048b00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8048b02:	68fb      	ldr	r3, [r7, #12]
 8048b04:	88fa      	ldrh	r2, [r7, #6]
 8048b06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8048b08:	68fb      	ldr	r3, [r7, #12]
 8048b0a:	2201      	movs	r2, #1
 8048b0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8048b0e:	68fb      	ldr	r3, [r7, #12]
 8048b10:	2202      	movs	r2, #2
 8048b12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8048b14:	2301      	movs	r3, #1
 8048b16:	75fb      	strb	r3, [r7, #23]
      break;
 8048b18:	e018      	b.n	8048b4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8048b1a:	68f8      	ldr	r0, [r7, #12]
 8048b1c:	f000 f81c 	bl	8048b58 <USBH_HandleControl>
 8048b20:	4603      	mov	r3, r0
 8048b22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8048b24:	7dfb      	ldrb	r3, [r7, #23]
 8048b26:	2b00      	cmp	r3, #0
 8048b28:	d002      	beq.n	8048b30 <USBH_CtlReq+0x54>
 8048b2a:	7dfb      	ldrb	r3, [r7, #23]
 8048b2c:	2b03      	cmp	r3, #3
 8048b2e:	d106      	bne.n	8048b3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8048b30:	68fb      	ldr	r3, [r7, #12]
 8048b32:	2201      	movs	r2, #1
 8048b34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8048b36:	68fb      	ldr	r3, [r7, #12]
 8048b38:	2200      	movs	r2, #0
 8048b3a:	761a      	strb	r2, [r3, #24]
      break;
 8048b3c:	e005      	b.n	8048b4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8048b3e:	7dfb      	ldrb	r3, [r7, #23]
 8048b40:	2b02      	cmp	r3, #2
 8048b42:	d102      	bne.n	8048b4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8048b44:	68fb      	ldr	r3, [r7, #12]
 8048b46:	2201      	movs	r2, #1
 8048b48:	709a      	strb	r2, [r3, #2]
      break;
 8048b4a:	bf00      	nop
  }
  return status;
 8048b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8048b4e:	4618      	mov	r0, r3
 8048b50:	3718      	adds	r7, #24
 8048b52:	46bd      	mov	sp, r7
 8048b54:	bd80      	pop	{r7, pc}
	...

08048b58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8048b58:	b580      	push	{r7, lr}
 8048b5a:	b086      	sub	sp, #24
 8048b5c:	af02      	add	r7, sp, #8
 8048b5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8048b60:	2301      	movs	r3, #1
 8048b62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8048b64:	2300      	movs	r3, #0
 8048b66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8048b68:	687b      	ldr	r3, [r7, #4]
 8048b6a:	7e1b      	ldrb	r3, [r3, #24]
 8048b6c:	3b01      	subs	r3, #1
 8048b6e:	2b0a      	cmp	r3, #10
 8048b70:	f200 8156 	bhi.w	8048e20 <USBH_HandleControl+0x2c8>
 8048b74:	a201      	add	r2, pc, #4	; (adr r2, 8048b7c <USBH_HandleControl+0x24>)
 8048b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048b7a:	bf00      	nop
 8048b7c:	08048ba9 	.word	0x08048ba9
 8048b80:	08048bc3 	.word	0x08048bc3
 8048b84:	08048c2d 	.word	0x08048c2d
 8048b88:	08048c53 	.word	0x08048c53
 8048b8c:	08048c8b 	.word	0x08048c8b
 8048b90:	08048cb5 	.word	0x08048cb5
 8048b94:	08048d07 	.word	0x08048d07
 8048b98:	08048d29 	.word	0x08048d29
 8048b9c:	08048d65 	.word	0x08048d65
 8048ba0:	08048d8b 	.word	0x08048d8b
 8048ba4:	08048dc9 	.word	0x08048dc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8048ba8:	687b      	ldr	r3, [r7, #4]
 8048baa:	f103 0110 	add.w	r1, r3, #16
 8048bae:	687b      	ldr	r3, [r7, #4]
 8048bb0:	795b      	ldrb	r3, [r3, #5]
 8048bb2:	461a      	mov	r2, r3
 8048bb4:	6878      	ldr	r0, [r7, #4]
 8048bb6:	f000 f943 	bl	8048e40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8048bba:	687b      	ldr	r3, [r7, #4]
 8048bbc:	2202      	movs	r2, #2
 8048bbe:	761a      	strb	r2, [r3, #24]
      break;
 8048bc0:	e139      	b.n	8048e36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8048bc2:	687b      	ldr	r3, [r7, #4]
 8048bc4:	795b      	ldrb	r3, [r3, #5]
 8048bc6:	4619      	mov	r1, r3
 8048bc8:	6878      	ldr	r0, [r7, #4]
 8048bca:	f000 fccb 	bl	8049564 <USBH_LL_GetURBState>
 8048bce:	4603      	mov	r3, r0
 8048bd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8048bd2:	7bbb      	ldrb	r3, [r7, #14]
 8048bd4:	2b01      	cmp	r3, #1
 8048bd6:	d11e      	bne.n	8048c16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8048bd8:	687b      	ldr	r3, [r7, #4]
 8048bda:	7c1b      	ldrb	r3, [r3, #16]
 8048bdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8048be0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8048be2:	687b      	ldr	r3, [r7, #4]
 8048be4:	8adb      	ldrh	r3, [r3, #22]
 8048be6:	2b00      	cmp	r3, #0
 8048be8:	d00a      	beq.n	8048c00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8048bea:	7b7b      	ldrb	r3, [r7, #13]
 8048bec:	2b80      	cmp	r3, #128	; 0x80
 8048bee:	d103      	bne.n	8048bf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8048bf0:	687b      	ldr	r3, [r7, #4]
 8048bf2:	2203      	movs	r2, #3
 8048bf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8048bf6:	e115      	b.n	8048e24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8048bf8:	687b      	ldr	r3, [r7, #4]
 8048bfa:	2205      	movs	r2, #5
 8048bfc:	761a      	strb	r2, [r3, #24]
      break;
 8048bfe:	e111      	b.n	8048e24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8048c00:	7b7b      	ldrb	r3, [r7, #13]
 8048c02:	2b80      	cmp	r3, #128	; 0x80
 8048c04:	d103      	bne.n	8048c0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8048c06:	687b      	ldr	r3, [r7, #4]
 8048c08:	2209      	movs	r2, #9
 8048c0a:	761a      	strb	r2, [r3, #24]
      break;
 8048c0c:	e10a      	b.n	8048e24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8048c0e:	687b      	ldr	r3, [r7, #4]
 8048c10:	2207      	movs	r2, #7
 8048c12:	761a      	strb	r2, [r3, #24]
      break;
 8048c14:	e106      	b.n	8048e24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8048c16:	7bbb      	ldrb	r3, [r7, #14]
 8048c18:	2b04      	cmp	r3, #4
 8048c1a:	d003      	beq.n	8048c24 <USBH_HandleControl+0xcc>
 8048c1c:	7bbb      	ldrb	r3, [r7, #14]
 8048c1e:	2b02      	cmp	r3, #2
 8048c20:	f040 8100 	bne.w	8048e24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8048c24:	687b      	ldr	r3, [r7, #4]
 8048c26:	220b      	movs	r2, #11
 8048c28:	761a      	strb	r2, [r3, #24]
      break;
 8048c2a:	e0fb      	b.n	8048e24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8048c2c:	687b      	ldr	r3, [r7, #4]
 8048c2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8048c32:	b29a      	uxth	r2, r3
 8048c34:	687b      	ldr	r3, [r7, #4]
 8048c36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8048c38:	687b      	ldr	r3, [r7, #4]
 8048c3a:	6899      	ldr	r1, [r3, #8]
 8048c3c:	687b      	ldr	r3, [r7, #4]
 8048c3e:	899a      	ldrh	r2, [r3, #12]
 8048c40:	687b      	ldr	r3, [r7, #4]
 8048c42:	791b      	ldrb	r3, [r3, #4]
 8048c44:	6878      	ldr	r0, [r7, #4]
 8048c46:	f000 f93a 	bl	8048ebe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8048c4a:	687b      	ldr	r3, [r7, #4]
 8048c4c:	2204      	movs	r2, #4
 8048c4e:	761a      	strb	r2, [r3, #24]
      break;
 8048c50:	e0f1      	b.n	8048e36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8048c52:	687b      	ldr	r3, [r7, #4]
 8048c54:	791b      	ldrb	r3, [r3, #4]
 8048c56:	4619      	mov	r1, r3
 8048c58:	6878      	ldr	r0, [r7, #4]
 8048c5a:	f000 fc83 	bl	8049564 <USBH_LL_GetURBState>
 8048c5e:	4603      	mov	r3, r0
 8048c60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8048c62:	7bbb      	ldrb	r3, [r7, #14]
 8048c64:	2b01      	cmp	r3, #1
 8048c66:	d102      	bne.n	8048c6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8048c68:	687b      	ldr	r3, [r7, #4]
 8048c6a:	2209      	movs	r2, #9
 8048c6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8048c6e:	7bbb      	ldrb	r3, [r7, #14]
 8048c70:	2b05      	cmp	r3, #5
 8048c72:	d102      	bne.n	8048c7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8048c74:	2303      	movs	r3, #3
 8048c76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8048c78:	e0d6      	b.n	8048e28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8048c7a:	7bbb      	ldrb	r3, [r7, #14]
 8048c7c:	2b04      	cmp	r3, #4
 8048c7e:	f040 80d3 	bne.w	8048e28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8048c82:	687b      	ldr	r3, [r7, #4]
 8048c84:	220b      	movs	r2, #11
 8048c86:	761a      	strb	r2, [r3, #24]
      break;
 8048c88:	e0ce      	b.n	8048e28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8048c8a:	687b      	ldr	r3, [r7, #4]
 8048c8c:	6899      	ldr	r1, [r3, #8]
 8048c8e:	687b      	ldr	r3, [r7, #4]
 8048c90:	899a      	ldrh	r2, [r3, #12]
 8048c92:	687b      	ldr	r3, [r7, #4]
 8048c94:	795b      	ldrb	r3, [r3, #5]
 8048c96:	2001      	movs	r0, #1
 8048c98:	9000      	str	r0, [sp, #0]
 8048c9a:	6878      	ldr	r0, [r7, #4]
 8048c9c:	f000 f8ea 	bl	8048e74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8048ca0:	687b      	ldr	r3, [r7, #4]
 8048ca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8048ca6:	b29a      	uxth	r2, r3
 8048ca8:	687b      	ldr	r3, [r7, #4]
 8048caa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8048cac:	687b      	ldr	r3, [r7, #4]
 8048cae:	2206      	movs	r2, #6
 8048cb0:	761a      	strb	r2, [r3, #24]
      break;
 8048cb2:	e0c0      	b.n	8048e36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8048cb4:	687b      	ldr	r3, [r7, #4]
 8048cb6:	795b      	ldrb	r3, [r3, #5]
 8048cb8:	4619      	mov	r1, r3
 8048cba:	6878      	ldr	r0, [r7, #4]
 8048cbc:	f000 fc52 	bl	8049564 <USBH_LL_GetURBState>
 8048cc0:	4603      	mov	r3, r0
 8048cc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8048cc4:	7bbb      	ldrb	r3, [r7, #14]
 8048cc6:	2b01      	cmp	r3, #1
 8048cc8:	d103      	bne.n	8048cd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8048cca:	687b      	ldr	r3, [r7, #4]
 8048ccc:	2207      	movs	r2, #7
 8048cce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8048cd0:	e0ac      	b.n	8048e2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8048cd2:	7bbb      	ldrb	r3, [r7, #14]
 8048cd4:	2b05      	cmp	r3, #5
 8048cd6:	d105      	bne.n	8048ce4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8048cd8:	687b      	ldr	r3, [r7, #4]
 8048cda:	220c      	movs	r2, #12
 8048cdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8048cde:	2303      	movs	r3, #3
 8048ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8048ce2:	e0a3      	b.n	8048e2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8048ce4:	7bbb      	ldrb	r3, [r7, #14]
 8048ce6:	2b02      	cmp	r3, #2
 8048ce8:	d103      	bne.n	8048cf2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8048cea:	687b      	ldr	r3, [r7, #4]
 8048cec:	2205      	movs	r2, #5
 8048cee:	761a      	strb	r2, [r3, #24]
      break;
 8048cf0:	e09c      	b.n	8048e2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8048cf2:	7bbb      	ldrb	r3, [r7, #14]
 8048cf4:	2b04      	cmp	r3, #4
 8048cf6:	f040 8099 	bne.w	8048e2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8048cfa:	687b      	ldr	r3, [r7, #4]
 8048cfc:	220b      	movs	r2, #11
 8048cfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8048d00:	2302      	movs	r3, #2
 8048d02:	73fb      	strb	r3, [r7, #15]
      break;
 8048d04:	e092      	b.n	8048e2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8048d06:	687b      	ldr	r3, [r7, #4]
 8048d08:	791b      	ldrb	r3, [r3, #4]
 8048d0a:	2200      	movs	r2, #0
 8048d0c:	2100      	movs	r1, #0
 8048d0e:	6878      	ldr	r0, [r7, #4]
 8048d10:	f000 f8d5 	bl	8048ebe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8048d14:	687b      	ldr	r3, [r7, #4]
 8048d16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8048d1a:	b29a      	uxth	r2, r3
 8048d1c:	687b      	ldr	r3, [r7, #4]
 8048d1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8048d20:	687b      	ldr	r3, [r7, #4]
 8048d22:	2208      	movs	r2, #8
 8048d24:	761a      	strb	r2, [r3, #24]

      break;
 8048d26:	e086      	b.n	8048e36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8048d28:	687b      	ldr	r3, [r7, #4]
 8048d2a:	791b      	ldrb	r3, [r3, #4]
 8048d2c:	4619      	mov	r1, r3
 8048d2e:	6878      	ldr	r0, [r7, #4]
 8048d30:	f000 fc18 	bl	8049564 <USBH_LL_GetURBState>
 8048d34:	4603      	mov	r3, r0
 8048d36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8048d38:	7bbb      	ldrb	r3, [r7, #14]
 8048d3a:	2b01      	cmp	r3, #1
 8048d3c:	d105      	bne.n	8048d4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8048d3e:	687b      	ldr	r3, [r7, #4]
 8048d40:	220d      	movs	r2, #13
 8048d42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8048d44:	2300      	movs	r3, #0
 8048d46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8048d48:	e072      	b.n	8048e30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8048d4a:	7bbb      	ldrb	r3, [r7, #14]
 8048d4c:	2b04      	cmp	r3, #4
 8048d4e:	d103      	bne.n	8048d58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8048d50:	687b      	ldr	r3, [r7, #4]
 8048d52:	220b      	movs	r2, #11
 8048d54:	761a      	strb	r2, [r3, #24]
      break;
 8048d56:	e06b      	b.n	8048e30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8048d58:	7bbb      	ldrb	r3, [r7, #14]
 8048d5a:	2b05      	cmp	r3, #5
 8048d5c:	d168      	bne.n	8048e30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8048d5e:	2303      	movs	r3, #3
 8048d60:	73fb      	strb	r3, [r7, #15]
      break;
 8048d62:	e065      	b.n	8048e30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8048d64:	687b      	ldr	r3, [r7, #4]
 8048d66:	795b      	ldrb	r3, [r3, #5]
 8048d68:	2201      	movs	r2, #1
 8048d6a:	9200      	str	r2, [sp, #0]
 8048d6c:	2200      	movs	r2, #0
 8048d6e:	2100      	movs	r1, #0
 8048d70:	6878      	ldr	r0, [r7, #4]
 8048d72:	f000 f87f 	bl	8048e74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8048d76:	687b      	ldr	r3, [r7, #4]
 8048d78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8048d7c:	b29a      	uxth	r2, r3
 8048d7e:	687b      	ldr	r3, [r7, #4]
 8048d80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8048d82:	687b      	ldr	r3, [r7, #4]
 8048d84:	220a      	movs	r2, #10
 8048d86:	761a      	strb	r2, [r3, #24]
      break;
 8048d88:	e055      	b.n	8048e36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8048d8a:	687b      	ldr	r3, [r7, #4]
 8048d8c:	795b      	ldrb	r3, [r3, #5]
 8048d8e:	4619      	mov	r1, r3
 8048d90:	6878      	ldr	r0, [r7, #4]
 8048d92:	f000 fbe7 	bl	8049564 <USBH_LL_GetURBState>
 8048d96:	4603      	mov	r3, r0
 8048d98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8048d9a:	7bbb      	ldrb	r3, [r7, #14]
 8048d9c:	2b01      	cmp	r3, #1
 8048d9e:	d105      	bne.n	8048dac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8048da0:	2300      	movs	r3, #0
 8048da2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8048da4:	687b      	ldr	r3, [r7, #4]
 8048da6:	220d      	movs	r2, #13
 8048da8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8048daa:	e043      	b.n	8048e34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8048dac:	7bbb      	ldrb	r3, [r7, #14]
 8048dae:	2b02      	cmp	r3, #2
 8048db0:	d103      	bne.n	8048dba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8048db2:	687b      	ldr	r3, [r7, #4]
 8048db4:	2209      	movs	r2, #9
 8048db6:	761a      	strb	r2, [r3, #24]
      break;
 8048db8:	e03c      	b.n	8048e34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8048dba:	7bbb      	ldrb	r3, [r7, #14]
 8048dbc:	2b04      	cmp	r3, #4
 8048dbe:	d139      	bne.n	8048e34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8048dc0:	687b      	ldr	r3, [r7, #4]
 8048dc2:	220b      	movs	r2, #11
 8048dc4:	761a      	strb	r2, [r3, #24]
      break;
 8048dc6:	e035      	b.n	8048e34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8048dc8:	687b      	ldr	r3, [r7, #4]
 8048dca:	7e5b      	ldrb	r3, [r3, #25]
 8048dcc:	3301      	adds	r3, #1
 8048dce:	b2da      	uxtb	r2, r3
 8048dd0:	687b      	ldr	r3, [r7, #4]
 8048dd2:	765a      	strb	r2, [r3, #25]
 8048dd4:	687b      	ldr	r3, [r7, #4]
 8048dd6:	7e5b      	ldrb	r3, [r3, #25]
 8048dd8:	2b02      	cmp	r3, #2
 8048dda:	d806      	bhi.n	8048dea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8048ddc:	687b      	ldr	r3, [r7, #4]
 8048dde:	2201      	movs	r2, #1
 8048de0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8048de2:	687b      	ldr	r3, [r7, #4]
 8048de4:	2201      	movs	r2, #1
 8048de6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8048de8:	e025      	b.n	8048e36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8048dea:	687b      	ldr	r3, [r7, #4]
 8048dec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8048df0:	2106      	movs	r1, #6
 8048df2:	6878      	ldr	r0, [r7, #4]
 8048df4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8048df6:	687b      	ldr	r3, [r7, #4]
 8048df8:	2200      	movs	r2, #0
 8048dfa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8048dfc:	687b      	ldr	r3, [r7, #4]
 8048dfe:	795b      	ldrb	r3, [r3, #5]
 8048e00:	4619      	mov	r1, r3
 8048e02:	6878      	ldr	r0, [r7, #4]
 8048e04:	f000 f90c 	bl	8049020 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8048e08:	687b      	ldr	r3, [r7, #4]
 8048e0a:	791b      	ldrb	r3, [r3, #4]
 8048e0c:	4619      	mov	r1, r3
 8048e0e:	6878      	ldr	r0, [r7, #4]
 8048e10:	f000 f906 	bl	8049020 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8048e14:	687b      	ldr	r3, [r7, #4]
 8048e16:	2200      	movs	r2, #0
 8048e18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8048e1a:	2302      	movs	r3, #2
 8048e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8048e1e:	e00a      	b.n	8048e36 <USBH_HandleControl+0x2de>

    default:
      break;
 8048e20:	bf00      	nop
 8048e22:	e008      	b.n	8048e36 <USBH_HandleControl+0x2de>
      break;
 8048e24:	bf00      	nop
 8048e26:	e006      	b.n	8048e36 <USBH_HandleControl+0x2de>
      break;
 8048e28:	bf00      	nop
 8048e2a:	e004      	b.n	8048e36 <USBH_HandleControl+0x2de>
      break;
 8048e2c:	bf00      	nop
 8048e2e:	e002      	b.n	8048e36 <USBH_HandleControl+0x2de>
      break;
 8048e30:	bf00      	nop
 8048e32:	e000      	b.n	8048e36 <USBH_HandleControl+0x2de>
      break;
 8048e34:	bf00      	nop
  }

  return status;
 8048e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8048e38:	4618      	mov	r0, r3
 8048e3a:	3710      	adds	r7, #16
 8048e3c:	46bd      	mov	sp, r7
 8048e3e:	bd80      	pop	{r7, pc}

08048e40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8048e40:	b580      	push	{r7, lr}
 8048e42:	b088      	sub	sp, #32
 8048e44:	af04      	add	r7, sp, #16
 8048e46:	60f8      	str	r0, [r7, #12]
 8048e48:	60b9      	str	r1, [r7, #8]
 8048e4a:	4613      	mov	r3, r2
 8048e4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8048e4e:	79f9      	ldrb	r1, [r7, #7]
 8048e50:	2300      	movs	r3, #0
 8048e52:	9303      	str	r3, [sp, #12]
 8048e54:	2308      	movs	r3, #8
 8048e56:	9302      	str	r3, [sp, #8]
 8048e58:	68bb      	ldr	r3, [r7, #8]
 8048e5a:	9301      	str	r3, [sp, #4]
 8048e5c:	2300      	movs	r3, #0
 8048e5e:	9300      	str	r3, [sp, #0]
 8048e60:	2300      	movs	r3, #0
 8048e62:	2200      	movs	r2, #0
 8048e64:	68f8      	ldr	r0, [r7, #12]
 8048e66:	f000 fb4c 	bl	8049502 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8048e6a:	2300      	movs	r3, #0
}
 8048e6c:	4618      	mov	r0, r3
 8048e6e:	3710      	adds	r7, #16
 8048e70:	46bd      	mov	sp, r7
 8048e72:	bd80      	pop	{r7, pc}

08048e74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8048e74:	b580      	push	{r7, lr}
 8048e76:	b088      	sub	sp, #32
 8048e78:	af04      	add	r7, sp, #16
 8048e7a:	60f8      	str	r0, [r7, #12]
 8048e7c:	60b9      	str	r1, [r7, #8]
 8048e7e:	4611      	mov	r1, r2
 8048e80:	461a      	mov	r2, r3
 8048e82:	460b      	mov	r3, r1
 8048e84:	80fb      	strh	r3, [r7, #6]
 8048e86:	4613      	mov	r3, r2
 8048e88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8048e8a:	68fb      	ldr	r3, [r7, #12]
 8048e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8048e90:	2b00      	cmp	r3, #0
 8048e92:	d001      	beq.n	8048e98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8048e94:	2300      	movs	r3, #0
 8048e96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8048e98:	7979      	ldrb	r1, [r7, #5]
 8048e9a:	7e3b      	ldrb	r3, [r7, #24]
 8048e9c:	9303      	str	r3, [sp, #12]
 8048e9e:	88fb      	ldrh	r3, [r7, #6]
 8048ea0:	9302      	str	r3, [sp, #8]
 8048ea2:	68bb      	ldr	r3, [r7, #8]
 8048ea4:	9301      	str	r3, [sp, #4]
 8048ea6:	2301      	movs	r3, #1
 8048ea8:	9300      	str	r3, [sp, #0]
 8048eaa:	2300      	movs	r3, #0
 8048eac:	2200      	movs	r2, #0
 8048eae:	68f8      	ldr	r0, [r7, #12]
 8048eb0:	f000 fb27 	bl	8049502 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8048eb4:	2300      	movs	r3, #0
}
 8048eb6:	4618      	mov	r0, r3
 8048eb8:	3710      	adds	r7, #16
 8048eba:	46bd      	mov	sp, r7
 8048ebc:	bd80      	pop	{r7, pc}

08048ebe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8048ebe:	b580      	push	{r7, lr}
 8048ec0:	b088      	sub	sp, #32
 8048ec2:	af04      	add	r7, sp, #16
 8048ec4:	60f8      	str	r0, [r7, #12]
 8048ec6:	60b9      	str	r1, [r7, #8]
 8048ec8:	4611      	mov	r1, r2
 8048eca:	461a      	mov	r2, r3
 8048ecc:	460b      	mov	r3, r1
 8048ece:	80fb      	strh	r3, [r7, #6]
 8048ed0:	4613      	mov	r3, r2
 8048ed2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8048ed4:	7979      	ldrb	r1, [r7, #5]
 8048ed6:	2300      	movs	r3, #0
 8048ed8:	9303      	str	r3, [sp, #12]
 8048eda:	88fb      	ldrh	r3, [r7, #6]
 8048edc:	9302      	str	r3, [sp, #8]
 8048ede:	68bb      	ldr	r3, [r7, #8]
 8048ee0:	9301      	str	r3, [sp, #4]
 8048ee2:	2301      	movs	r3, #1
 8048ee4:	9300      	str	r3, [sp, #0]
 8048ee6:	2300      	movs	r3, #0
 8048ee8:	2201      	movs	r2, #1
 8048eea:	68f8      	ldr	r0, [r7, #12]
 8048eec:	f000 fb09 	bl	8049502 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8048ef0:	2300      	movs	r3, #0

}
 8048ef2:	4618      	mov	r0, r3
 8048ef4:	3710      	adds	r7, #16
 8048ef6:	46bd      	mov	sp, r7
 8048ef8:	bd80      	pop	{r7, pc}

08048efa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8048efa:	b580      	push	{r7, lr}
 8048efc:	b088      	sub	sp, #32
 8048efe:	af04      	add	r7, sp, #16
 8048f00:	60f8      	str	r0, [r7, #12]
 8048f02:	60b9      	str	r1, [r7, #8]
 8048f04:	4611      	mov	r1, r2
 8048f06:	461a      	mov	r2, r3
 8048f08:	460b      	mov	r3, r1
 8048f0a:	80fb      	strh	r3, [r7, #6]
 8048f0c:	4613      	mov	r3, r2
 8048f0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8048f10:	68fb      	ldr	r3, [r7, #12]
 8048f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8048f16:	2b00      	cmp	r3, #0
 8048f18:	d001      	beq.n	8048f1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8048f1a:	2300      	movs	r3, #0
 8048f1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8048f1e:	7979      	ldrb	r1, [r7, #5]
 8048f20:	7e3b      	ldrb	r3, [r7, #24]
 8048f22:	9303      	str	r3, [sp, #12]
 8048f24:	88fb      	ldrh	r3, [r7, #6]
 8048f26:	9302      	str	r3, [sp, #8]
 8048f28:	68bb      	ldr	r3, [r7, #8]
 8048f2a:	9301      	str	r3, [sp, #4]
 8048f2c:	2301      	movs	r3, #1
 8048f2e:	9300      	str	r3, [sp, #0]
 8048f30:	2302      	movs	r3, #2
 8048f32:	2200      	movs	r2, #0
 8048f34:	68f8      	ldr	r0, [r7, #12]
 8048f36:	f000 fae4 	bl	8049502 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8048f3a:	2300      	movs	r3, #0
}
 8048f3c:	4618      	mov	r0, r3
 8048f3e:	3710      	adds	r7, #16
 8048f40:	46bd      	mov	sp, r7
 8048f42:	bd80      	pop	{r7, pc}

08048f44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8048f44:	b580      	push	{r7, lr}
 8048f46:	b088      	sub	sp, #32
 8048f48:	af04      	add	r7, sp, #16
 8048f4a:	60f8      	str	r0, [r7, #12]
 8048f4c:	60b9      	str	r1, [r7, #8]
 8048f4e:	4611      	mov	r1, r2
 8048f50:	461a      	mov	r2, r3
 8048f52:	460b      	mov	r3, r1
 8048f54:	80fb      	strh	r3, [r7, #6]
 8048f56:	4613      	mov	r3, r2
 8048f58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8048f5a:	7979      	ldrb	r1, [r7, #5]
 8048f5c:	2300      	movs	r3, #0
 8048f5e:	9303      	str	r3, [sp, #12]
 8048f60:	88fb      	ldrh	r3, [r7, #6]
 8048f62:	9302      	str	r3, [sp, #8]
 8048f64:	68bb      	ldr	r3, [r7, #8]
 8048f66:	9301      	str	r3, [sp, #4]
 8048f68:	2301      	movs	r3, #1
 8048f6a:	9300      	str	r3, [sp, #0]
 8048f6c:	2302      	movs	r3, #2
 8048f6e:	2201      	movs	r2, #1
 8048f70:	68f8      	ldr	r0, [r7, #12]
 8048f72:	f000 fac6 	bl	8049502 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8048f76:	2300      	movs	r3, #0
}
 8048f78:	4618      	mov	r0, r3
 8048f7a:	3710      	adds	r7, #16
 8048f7c:	46bd      	mov	sp, r7
 8048f7e:	bd80      	pop	{r7, pc}

08048f80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8048f80:	b580      	push	{r7, lr}
 8048f82:	b086      	sub	sp, #24
 8048f84:	af04      	add	r7, sp, #16
 8048f86:	6078      	str	r0, [r7, #4]
 8048f88:	4608      	mov	r0, r1
 8048f8a:	4611      	mov	r1, r2
 8048f8c:	461a      	mov	r2, r3
 8048f8e:	4603      	mov	r3, r0
 8048f90:	70fb      	strb	r3, [r7, #3]
 8048f92:	460b      	mov	r3, r1
 8048f94:	70bb      	strb	r3, [r7, #2]
 8048f96:	4613      	mov	r3, r2
 8048f98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8048f9a:	7878      	ldrb	r0, [r7, #1]
 8048f9c:	78ba      	ldrb	r2, [r7, #2]
 8048f9e:	78f9      	ldrb	r1, [r7, #3]
 8048fa0:	8b3b      	ldrh	r3, [r7, #24]
 8048fa2:	9302      	str	r3, [sp, #8]
 8048fa4:	7d3b      	ldrb	r3, [r7, #20]
 8048fa6:	9301      	str	r3, [sp, #4]
 8048fa8:	7c3b      	ldrb	r3, [r7, #16]
 8048faa:	9300      	str	r3, [sp, #0]
 8048fac:	4603      	mov	r3, r0
 8048fae:	6878      	ldr	r0, [r7, #4]
 8048fb0:	f000 fa59 	bl	8049466 <USBH_LL_OpenPipe>

  return USBH_OK;
 8048fb4:	2300      	movs	r3, #0
}
 8048fb6:	4618      	mov	r0, r3
 8048fb8:	3708      	adds	r7, #8
 8048fba:	46bd      	mov	sp, r7
 8048fbc:	bd80      	pop	{r7, pc}

08048fbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8048fbe:	b580      	push	{r7, lr}
 8048fc0:	b082      	sub	sp, #8
 8048fc2:	af00      	add	r7, sp, #0
 8048fc4:	6078      	str	r0, [r7, #4]
 8048fc6:	460b      	mov	r3, r1
 8048fc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8048fca:	78fb      	ldrb	r3, [r7, #3]
 8048fcc:	4619      	mov	r1, r3
 8048fce:	6878      	ldr	r0, [r7, #4]
 8048fd0:	f000 fa78 	bl	80494c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8048fd4:	2300      	movs	r3, #0
}
 8048fd6:	4618      	mov	r0, r3
 8048fd8:	3708      	adds	r7, #8
 8048fda:	46bd      	mov	sp, r7
 8048fdc:	bd80      	pop	{r7, pc}

08048fde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8048fde:	b580      	push	{r7, lr}
 8048fe0:	b084      	sub	sp, #16
 8048fe2:	af00      	add	r7, sp, #0
 8048fe4:	6078      	str	r0, [r7, #4]
 8048fe6:	460b      	mov	r3, r1
 8048fe8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8048fea:	6878      	ldr	r0, [r7, #4]
 8048fec:	f000 f836 	bl	804905c <USBH_GetFreePipe>
 8048ff0:	4603      	mov	r3, r0
 8048ff2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8048ff4:	89fb      	ldrh	r3, [r7, #14]
 8048ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8048ffa:	4293      	cmp	r3, r2
 8048ffc:	d00a      	beq.n	8049014 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8048ffe:	78fa      	ldrb	r2, [r7, #3]
 8049000:	89fb      	ldrh	r3, [r7, #14]
 8049002:	f003 030f 	and.w	r3, r3, #15
 8049006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804900a:	6879      	ldr	r1, [r7, #4]
 804900c:	33e0      	adds	r3, #224	; 0xe0
 804900e:	009b      	lsls	r3, r3, #2
 8049010:	440b      	add	r3, r1
 8049012:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8049014:	89fb      	ldrh	r3, [r7, #14]
 8049016:	b2db      	uxtb	r3, r3
}
 8049018:	4618      	mov	r0, r3
 804901a:	3710      	adds	r7, #16
 804901c:	46bd      	mov	sp, r7
 804901e:	bd80      	pop	{r7, pc}

08049020 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8049020:	b480      	push	{r7}
 8049022:	b083      	sub	sp, #12
 8049024:	af00      	add	r7, sp, #0
 8049026:	6078      	str	r0, [r7, #4]
 8049028:	460b      	mov	r3, r1
 804902a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804902c:	78fb      	ldrb	r3, [r7, #3]
 804902e:	2b0f      	cmp	r3, #15
 8049030:	d80d      	bhi.n	804904e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8049032:	78fb      	ldrb	r3, [r7, #3]
 8049034:	687a      	ldr	r2, [r7, #4]
 8049036:	33e0      	adds	r3, #224	; 0xe0
 8049038:	009b      	lsls	r3, r3, #2
 804903a:	4413      	add	r3, r2
 804903c:	685a      	ldr	r2, [r3, #4]
 804903e:	78fb      	ldrb	r3, [r7, #3]
 8049040:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8049044:	6879      	ldr	r1, [r7, #4]
 8049046:	33e0      	adds	r3, #224	; 0xe0
 8049048:	009b      	lsls	r3, r3, #2
 804904a:	440b      	add	r3, r1
 804904c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804904e:	2300      	movs	r3, #0
}
 8049050:	4618      	mov	r0, r3
 8049052:	370c      	adds	r7, #12
 8049054:	46bd      	mov	sp, r7
 8049056:	f85d 7b04 	ldr.w	r7, [sp], #4
 804905a:	4770      	bx	lr

0804905c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804905c:	b480      	push	{r7}
 804905e:	b085      	sub	sp, #20
 8049060:	af00      	add	r7, sp, #0
 8049062:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8049064:	2300      	movs	r3, #0
 8049066:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8049068:	2300      	movs	r3, #0
 804906a:	73fb      	strb	r3, [r7, #15]
 804906c:	e00f      	b.n	804908e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804906e:	7bfb      	ldrb	r3, [r7, #15]
 8049070:	687a      	ldr	r2, [r7, #4]
 8049072:	33e0      	adds	r3, #224	; 0xe0
 8049074:	009b      	lsls	r3, r3, #2
 8049076:	4413      	add	r3, r2
 8049078:	685b      	ldr	r3, [r3, #4]
 804907a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804907e:	2b00      	cmp	r3, #0
 8049080:	d102      	bne.n	8049088 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8049082:	7bfb      	ldrb	r3, [r7, #15]
 8049084:	b29b      	uxth	r3, r3
 8049086:	e007      	b.n	8049098 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8049088:	7bfb      	ldrb	r3, [r7, #15]
 804908a:	3301      	adds	r3, #1
 804908c:	73fb      	strb	r3, [r7, #15]
 804908e:	7bfb      	ldrb	r3, [r7, #15]
 8049090:	2b0f      	cmp	r3, #15
 8049092:	d9ec      	bls.n	804906e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8049094:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8049098:	4618      	mov	r0, r3
 804909a:	3714      	adds	r7, #20
 804909c:	46bd      	mov	sp, r7
 804909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80490a2:	4770      	bx	lr

080490a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80490a4:	b580      	push	{r7, lr}
 80490a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80490a8:	2200      	movs	r2, #0
 80490aa:	490e      	ldr	r1, [pc, #56]	; (80490e4 <MX_USB_HOST_Init+0x40>)
 80490ac:	480e      	ldr	r0, [pc, #56]	; (80490e8 <MX_USB_HOST_Init+0x44>)
 80490ae:	f7fe fba7 	bl	8047800 <USBH_Init>
 80490b2:	4603      	mov	r3, r0
 80490b4:	2b00      	cmp	r3, #0
 80490b6:	d001      	beq.n	80490bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80490b8:	f7f7 fde2 	bl	8040c80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80490bc:	490b      	ldr	r1, [pc, #44]	; (80490ec <MX_USB_HOST_Init+0x48>)
 80490be:	480a      	ldr	r0, [pc, #40]	; (80490e8 <MX_USB_HOST_Init+0x44>)
 80490c0:	f7fe fc2c 	bl	804791c <USBH_RegisterClass>
 80490c4:	4603      	mov	r3, r0
 80490c6:	2b00      	cmp	r3, #0
 80490c8:	d001      	beq.n	80490ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80490ca:	f7f7 fdd9 	bl	8040c80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80490ce:	4806      	ldr	r0, [pc, #24]	; (80490e8 <MX_USB_HOST_Init+0x44>)
 80490d0:	f7fe fcb0 	bl	8047a34 <USBH_Start>
 80490d4:	4603      	mov	r3, r0
 80490d6:	2b00      	cmp	r3, #0
 80490d8:	d001      	beq.n	80490de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80490da:	f7f7 fdd1 	bl	8040c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80490de:	bf00      	nop
 80490e0:	bd80      	pop	{r7, pc}
 80490e2:	bf00      	nop
 80490e4:	08049105 	.word	0x08049105
 80490e8:	2000035c 	.word	0x2000035c
 80490ec:	2000000c 	.word	0x2000000c

080490f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80490f0:	b580      	push	{r7, lr}
 80490f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80490f4:	4802      	ldr	r0, [pc, #8]	; (8049100 <MX_USB_HOST_Process+0x10>)
 80490f6:	f7fe fcad 	bl	8047a54 <USBH_Process>
}
 80490fa:	bf00      	nop
 80490fc:	bd80      	pop	{r7, pc}
 80490fe:	bf00      	nop
 8049100:	2000035c 	.word	0x2000035c

08049104 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8049104:	b480      	push	{r7}
 8049106:	b083      	sub	sp, #12
 8049108:	af00      	add	r7, sp, #0
 804910a:	6078      	str	r0, [r7, #4]
 804910c:	460b      	mov	r3, r1
 804910e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8049110:	78fb      	ldrb	r3, [r7, #3]
 8049112:	3b01      	subs	r3, #1
 8049114:	2b04      	cmp	r3, #4
 8049116:	d819      	bhi.n	804914c <USBH_UserProcess+0x48>
 8049118:	a201      	add	r2, pc, #4	; (adr r2, 8049120 <USBH_UserProcess+0x1c>)
 804911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804911e:	bf00      	nop
 8049120:	0804914d 	.word	0x0804914d
 8049124:	0804913d 	.word	0x0804913d
 8049128:	0804914d 	.word	0x0804914d
 804912c:	08049145 	.word	0x08049145
 8049130:	08049135 	.word	0x08049135
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8049134:	4b09      	ldr	r3, [pc, #36]	; (804915c <USBH_UserProcess+0x58>)
 8049136:	2203      	movs	r2, #3
 8049138:	701a      	strb	r2, [r3, #0]
  break;
 804913a:	e008      	b.n	804914e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804913c:	4b07      	ldr	r3, [pc, #28]	; (804915c <USBH_UserProcess+0x58>)
 804913e:	2202      	movs	r2, #2
 8049140:	701a      	strb	r2, [r3, #0]
  break;
 8049142:	e004      	b.n	804914e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8049144:	4b05      	ldr	r3, [pc, #20]	; (804915c <USBH_UserProcess+0x58>)
 8049146:	2201      	movs	r2, #1
 8049148:	701a      	strb	r2, [r3, #0]
  break;
 804914a:	e000      	b.n	804914e <USBH_UserProcess+0x4a>

  default:
  break;
 804914c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804914e:	bf00      	nop
 8049150:	370c      	adds	r7, #12
 8049152:	46bd      	mov	sp, r7
 8049154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049158:	4770      	bx	lr
 804915a:	bf00      	nop
 804915c:	20000734 	.word	0x20000734

08049160 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8049160:	b580      	push	{r7, lr}
 8049162:	b08a      	sub	sp, #40	; 0x28
 8049164:	af00      	add	r7, sp, #0
 8049166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8049168:	f107 0314 	add.w	r3, r7, #20
 804916c:	2200      	movs	r2, #0
 804916e:	601a      	str	r2, [r3, #0]
 8049170:	605a      	str	r2, [r3, #4]
 8049172:	609a      	str	r2, [r3, #8]
 8049174:	60da      	str	r2, [r3, #12]
 8049176:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8049178:	687b      	ldr	r3, [r7, #4]
 804917a:	681b      	ldr	r3, [r3, #0]
 804917c:	4a24      	ldr	r2, [pc, #144]	; (8049210 <HAL_HCD_MspInit+0xb0>)
 804917e:	4293      	cmp	r3, r2
 8049180:	d141      	bne.n	8049206 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8049182:	2300      	movs	r3, #0
 8049184:	613b      	str	r3, [r7, #16]
 8049186:	4b23      	ldr	r3, [pc, #140]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 8049188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804918a:	4a22      	ldr	r2, [pc, #136]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 804918c:	f043 0302 	orr.w	r3, r3, #2
 8049190:	6313      	str	r3, [r2, #48]	; 0x30
 8049192:	4b20      	ldr	r3, [pc, #128]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 8049194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8049196:	f003 0302 	and.w	r3, r3, #2
 804919a:	613b      	str	r3, [r7, #16]
 804919c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804919e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80491a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80491a4:	2302      	movs	r3, #2
 80491a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80491a8:	2300      	movs	r3, #0
 80491aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80491ac:	2300      	movs	r3, #0
 80491ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80491b0:	230c      	movs	r3, #12
 80491b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80491b4:	f107 0314 	add.w	r3, r7, #20
 80491b8:	4619      	mov	r1, r3
 80491ba:	4817      	ldr	r0, [pc, #92]	; (8049218 <HAL_HCD_MspInit+0xb8>)
 80491bc:	f7f8 fd56 	bl	8041c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80491c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80491c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80491c6:	2300      	movs	r3, #0
 80491c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80491ca:	2300      	movs	r3, #0
 80491cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80491ce:	f107 0314 	add.w	r3, r7, #20
 80491d2:	4619      	mov	r1, r3
 80491d4:	4810      	ldr	r0, [pc, #64]	; (8049218 <HAL_HCD_MspInit+0xb8>)
 80491d6:	f7f8 fd49 	bl	8041c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80491da:	2300      	movs	r3, #0
 80491dc:	60fb      	str	r3, [r7, #12]
 80491de:	4b0d      	ldr	r3, [pc, #52]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 80491e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80491e2:	4a0c      	ldr	r2, [pc, #48]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 80491e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80491e8:	6313      	str	r3, [r2, #48]	; 0x30
 80491ea:	4b0a      	ldr	r3, [pc, #40]	; (8049214 <HAL_HCD_MspInit+0xb4>)
 80491ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80491ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80491f2:	60fb      	str	r3, [r7, #12]
 80491f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80491f6:	2200      	movs	r2, #0
 80491f8:	2100      	movs	r1, #0
 80491fa:	204d      	movs	r0, #77	; 0x4d
 80491fc:	f7f8 fb04 	bl	8041808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8049200:	204d      	movs	r0, #77	; 0x4d
 8049202:	f7f8 fb1d 	bl	8041840 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8049206:	bf00      	nop
 8049208:	3728      	adds	r7, #40	; 0x28
 804920a:	46bd      	mov	sp, r7
 804920c:	bd80      	pop	{r7, pc}
 804920e:	bf00      	nop
 8049210:	40040000 	.word	0x40040000
 8049214:	40023800 	.word	0x40023800
 8049218:	40020400 	.word	0x40020400

0804921c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804921c:	b580      	push	{r7, lr}
 804921e:	b082      	sub	sp, #8
 8049220:	af00      	add	r7, sp, #0
 8049222:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8049224:	687b      	ldr	r3, [r7, #4]
 8049226:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804922a:	4618      	mov	r0, r3
 804922c:	f7fe fff1 	bl	8048212 <USBH_LL_IncTimer>
}
 8049230:	bf00      	nop
 8049232:	3708      	adds	r7, #8
 8049234:	46bd      	mov	sp, r7
 8049236:	bd80      	pop	{r7, pc}

08049238 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8049238:	b580      	push	{r7, lr}
 804923a:	b082      	sub	sp, #8
 804923c:	af00      	add	r7, sp, #0
 804923e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8049240:	687b      	ldr	r3, [r7, #4]
 8049242:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8049246:	4618      	mov	r0, r3
 8049248:	f7ff f829 	bl	804829e <USBH_LL_Connect>
}
 804924c:	bf00      	nop
 804924e:	3708      	adds	r7, #8
 8049250:	46bd      	mov	sp, r7
 8049252:	bd80      	pop	{r7, pc}

08049254 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8049254:	b580      	push	{r7, lr}
 8049256:	b082      	sub	sp, #8
 8049258:	af00      	add	r7, sp, #0
 804925a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804925c:	687b      	ldr	r3, [r7, #4]
 804925e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8049262:	4618      	mov	r0, r3
 8049264:	f7ff f832 	bl	80482cc <USBH_LL_Disconnect>
}
 8049268:	bf00      	nop
 804926a:	3708      	adds	r7, #8
 804926c:	46bd      	mov	sp, r7
 804926e:	bd80      	pop	{r7, pc}

08049270 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8049270:	b480      	push	{r7}
 8049272:	b083      	sub	sp, #12
 8049274:	af00      	add	r7, sp, #0
 8049276:	6078      	str	r0, [r7, #4]
 8049278:	460b      	mov	r3, r1
 804927a:	70fb      	strb	r3, [r7, #3]
 804927c:	4613      	mov	r3, r2
 804927e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8049280:	bf00      	nop
 8049282:	370c      	adds	r7, #12
 8049284:	46bd      	mov	sp, r7
 8049286:	f85d 7b04 	ldr.w	r7, [sp], #4
 804928a:	4770      	bx	lr

0804928c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804928c:	b580      	push	{r7, lr}
 804928e:	b082      	sub	sp, #8
 8049290:	af00      	add	r7, sp, #0
 8049292:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8049294:	687b      	ldr	r3, [r7, #4]
 8049296:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804929a:	4618      	mov	r0, r3
 804929c:	f7fe ffe3 	bl	8048266 <USBH_LL_PortEnabled>
}
 80492a0:	bf00      	nop
 80492a2:	3708      	adds	r7, #8
 80492a4:	46bd      	mov	sp, r7
 80492a6:	bd80      	pop	{r7, pc}

080492a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80492a8:	b580      	push	{r7, lr}
 80492aa:	b082      	sub	sp, #8
 80492ac:	af00      	add	r7, sp, #0
 80492ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80492b0:	687b      	ldr	r3, [r7, #4]
 80492b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80492b6:	4618      	mov	r0, r3
 80492b8:	f7fe ffe3 	bl	8048282 <USBH_LL_PortDisabled>
}
 80492bc:	bf00      	nop
 80492be:	3708      	adds	r7, #8
 80492c0:	46bd      	mov	sp, r7
 80492c2:	bd80      	pop	{r7, pc}

080492c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80492c4:	b580      	push	{r7, lr}
 80492c6:	b082      	sub	sp, #8
 80492c8:	af00      	add	r7, sp, #0
 80492ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80492cc:	687b      	ldr	r3, [r7, #4]
 80492ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80492d2:	2b00      	cmp	r3, #0
 80492d4:	d132      	bne.n	804933c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80492d6:	4a1c      	ldr	r2, [pc, #112]	; (8049348 <USBH_LL_Init+0x84>)
 80492d8:	687b      	ldr	r3, [r7, #4]
 80492da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80492de:	687b      	ldr	r3, [r7, #4]
 80492e0:	4a19      	ldr	r2, [pc, #100]	; (8049348 <USBH_LL_Init+0x84>)
 80492e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80492e6:	4b18      	ldr	r3, [pc, #96]	; (8049348 <USBH_LL_Init+0x84>)
 80492e8:	4a18      	ldr	r2, [pc, #96]	; (804934c <USBH_LL_Init+0x88>)
 80492ea:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80492ec:	4b16      	ldr	r3, [pc, #88]	; (8049348 <USBH_LL_Init+0x84>)
 80492ee:	220c      	movs	r2, #12
 80492f0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80492f2:	4b15      	ldr	r3, [pc, #84]	; (8049348 <USBH_LL_Init+0x84>)
 80492f4:	2201      	movs	r2, #1
 80492f6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80492f8:	4b13      	ldr	r3, [pc, #76]	; (8049348 <USBH_LL_Init+0x84>)
 80492fa:	2200      	movs	r2, #0
 80492fc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80492fe:	4b12      	ldr	r3, [pc, #72]	; (8049348 <USBH_LL_Init+0x84>)
 8049300:	2202      	movs	r2, #2
 8049302:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8049304:	4b10      	ldr	r3, [pc, #64]	; (8049348 <USBH_LL_Init+0x84>)
 8049306:	2200      	movs	r2, #0
 8049308:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804930a:	4b0f      	ldr	r3, [pc, #60]	; (8049348 <USBH_LL_Init+0x84>)
 804930c:	2200      	movs	r2, #0
 804930e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8049310:	4b0d      	ldr	r3, [pc, #52]	; (8049348 <USBH_LL_Init+0x84>)
 8049312:	2200      	movs	r2, #0
 8049314:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8049316:	4b0c      	ldr	r3, [pc, #48]	; (8049348 <USBH_LL_Init+0x84>)
 8049318:	2200      	movs	r2, #0
 804931a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804931c:	480a      	ldr	r0, [pc, #40]	; (8049348 <USBH_LL_Init+0x84>)
 804931e:	f7f8 fe6a 	bl	8041ff6 <HAL_HCD_Init>
 8049322:	4603      	mov	r3, r0
 8049324:	2b00      	cmp	r3, #0
 8049326:	d001      	beq.n	804932c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8049328:	f7f7 fcaa 	bl	8040c80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804932c:	4806      	ldr	r0, [pc, #24]	; (8049348 <USBH_LL_Init+0x84>)
 804932e:	f7f9 fa4e 	bl	80427ce <HAL_HCD_GetCurrentFrame>
 8049332:	4603      	mov	r3, r0
 8049334:	4619      	mov	r1, r3
 8049336:	6878      	ldr	r0, [r7, #4]
 8049338:	f7fe ff5c 	bl	80481f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804933c:	2300      	movs	r3, #0
}
 804933e:	4618      	mov	r0, r3
 8049340:	3708      	adds	r7, #8
 8049342:	46bd      	mov	sp, r7
 8049344:	bd80      	pop	{r7, pc}
 8049346:	bf00      	nop
 8049348:	20000738 	.word	0x20000738
 804934c:	40040000 	.word	0x40040000

08049350 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8049350:	b580      	push	{r7, lr}
 8049352:	b084      	sub	sp, #16
 8049354:	af00      	add	r7, sp, #0
 8049356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8049358:	2300      	movs	r3, #0
 804935a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804935c:	2300      	movs	r3, #0
 804935e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8049360:	687b      	ldr	r3, [r7, #4]
 8049362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8049366:	4618      	mov	r0, r3
 8049368:	f7f9 f9bb 	bl	80426e2 <HAL_HCD_Start>
 804936c:	4603      	mov	r3, r0
 804936e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8049370:	7bfb      	ldrb	r3, [r7, #15]
 8049372:	4618      	mov	r0, r3
 8049374:	f000 f95c 	bl	8049630 <USBH_Get_USB_Status>
 8049378:	4603      	mov	r3, r0
 804937a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804937c:	7bbb      	ldrb	r3, [r7, #14]
}
 804937e:	4618      	mov	r0, r3
 8049380:	3710      	adds	r7, #16
 8049382:	46bd      	mov	sp, r7
 8049384:	bd80      	pop	{r7, pc}

08049386 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8049386:	b580      	push	{r7, lr}
 8049388:	b084      	sub	sp, #16
 804938a:	af00      	add	r7, sp, #0
 804938c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804938e:	2300      	movs	r3, #0
 8049390:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8049392:	2300      	movs	r3, #0
 8049394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8049396:	687b      	ldr	r3, [r7, #4]
 8049398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804939c:	4618      	mov	r0, r3
 804939e:	f7f9 f9c3 	bl	8042728 <HAL_HCD_Stop>
 80493a2:	4603      	mov	r3, r0
 80493a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80493a6:	7bfb      	ldrb	r3, [r7, #15]
 80493a8:	4618      	mov	r0, r3
 80493aa:	f000 f941 	bl	8049630 <USBH_Get_USB_Status>
 80493ae:	4603      	mov	r3, r0
 80493b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80493b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80493b4:	4618      	mov	r0, r3
 80493b6:	3710      	adds	r7, #16
 80493b8:	46bd      	mov	sp, r7
 80493ba:	bd80      	pop	{r7, pc}

080493bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80493bc:	b580      	push	{r7, lr}
 80493be:	b084      	sub	sp, #16
 80493c0:	af00      	add	r7, sp, #0
 80493c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80493c4:	2301      	movs	r3, #1
 80493c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80493c8:	687b      	ldr	r3, [r7, #4]
 80493ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80493ce:	4618      	mov	r0, r3
 80493d0:	f7f9 fa0b 	bl	80427ea <HAL_HCD_GetCurrentSpeed>
 80493d4:	4603      	mov	r3, r0
 80493d6:	2b02      	cmp	r3, #2
 80493d8:	d00c      	beq.n	80493f4 <USBH_LL_GetSpeed+0x38>
 80493da:	2b02      	cmp	r3, #2
 80493dc:	d80d      	bhi.n	80493fa <USBH_LL_GetSpeed+0x3e>
 80493de:	2b00      	cmp	r3, #0
 80493e0:	d002      	beq.n	80493e8 <USBH_LL_GetSpeed+0x2c>
 80493e2:	2b01      	cmp	r3, #1
 80493e4:	d003      	beq.n	80493ee <USBH_LL_GetSpeed+0x32>
 80493e6:	e008      	b.n	80493fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80493e8:	2300      	movs	r3, #0
 80493ea:	73fb      	strb	r3, [r7, #15]
    break;
 80493ec:	e008      	b.n	8049400 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80493ee:	2301      	movs	r3, #1
 80493f0:	73fb      	strb	r3, [r7, #15]
    break;
 80493f2:	e005      	b.n	8049400 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80493f4:	2302      	movs	r3, #2
 80493f6:	73fb      	strb	r3, [r7, #15]
    break;
 80493f8:	e002      	b.n	8049400 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80493fa:	2301      	movs	r3, #1
 80493fc:	73fb      	strb	r3, [r7, #15]
    break;
 80493fe:	bf00      	nop
  }
  return  speed;
 8049400:	7bfb      	ldrb	r3, [r7, #15]
}
 8049402:	4618      	mov	r0, r3
 8049404:	3710      	adds	r7, #16
 8049406:	46bd      	mov	sp, r7
 8049408:	bd80      	pop	{r7, pc}

0804940a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804940a:	b580      	push	{r7, lr}
 804940c:	b084      	sub	sp, #16
 804940e:	af00      	add	r7, sp, #0
 8049410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8049412:	2300      	movs	r3, #0
 8049414:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8049416:	2300      	movs	r3, #0
 8049418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804941a:	687b      	ldr	r3, [r7, #4]
 804941c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8049420:	4618      	mov	r0, r3
 8049422:	f7f9 f99e 	bl	8042762 <HAL_HCD_ResetPort>
 8049426:	4603      	mov	r3, r0
 8049428:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804942a:	7bfb      	ldrb	r3, [r7, #15]
 804942c:	4618      	mov	r0, r3
 804942e:	f000 f8ff 	bl	8049630 <USBH_Get_USB_Status>
 8049432:	4603      	mov	r3, r0
 8049434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8049436:	7bbb      	ldrb	r3, [r7, #14]
}
 8049438:	4618      	mov	r0, r3
 804943a:	3710      	adds	r7, #16
 804943c:	46bd      	mov	sp, r7
 804943e:	bd80      	pop	{r7, pc}

08049440 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8049440:	b580      	push	{r7, lr}
 8049442:	b082      	sub	sp, #8
 8049444:	af00      	add	r7, sp, #0
 8049446:	6078      	str	r0, [r7, #4]
 8049448:	460b      	mov	r3, r1
 804944a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804944c:	687b      	ldr	r3, [r7, #4]
 804944e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8049452:	78fa      	ldrb	r2, [r7, #3]
 8049454:	4611      	mov	r1, r2
 8049456:	4618      	mov	r0, r3
 8049458:	f7f9 f9a5 	bl	80427a6 <HAL_HCD_HC_GetXferCount>
 804945c:	4603      	mov	r3, r0
}
 804945e:	4618      	mov	r0, r3
 8049460:	3708      	adds	r7, #8
 8049462:	46bd      	mov	sp, r7
 8049464:	bd80      	pop	{r7, pc}

08049466 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8049466:	b590      	push	{r4, r7, lr}
 8049468:	b089      	sub	sp, #36	; 0x24
 804946a:	af04      	add	r7, sp, #16
 804946c:	6078      	str	r0, [r7, #4]
 804946e:	4608      	mov	r0, r1
 8049470:	4611      	mov	r1, r2
 8049472:	461a      	mov	r2, r3
 8049474:	4603      	mov	r3, r0
 8049476:	70fb      	strb	r3, [r7, #3]
 8049478:	460b      	mov	r3, r1
 804947a:	70bb      	strb	r3, [r7, #2]
 804947c:	4613      	mov	r3, r2
 804947e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8049480:	2300      	movs	r3, #0
 8049482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8049484:	2300      	movs	r3, #0
 8049486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8049488:	687b      	ldr	r3, [r7, #4]
 804948a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804948e:	787c      	ldrb	r4, [r7, #1]
 8049490:	78ba      	ldrb	r2, [r7, #2]
 8049492:	78f9      	ldrb	r1, [r7, #3]
 8049494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8049496:	9302      	str	r3, [sp, #8]
 8049498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804949c:	9301      	str	r3, [sp, #4]
 804949e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80494a2:	9300      	str	r3, [sp, #0]
 80494a4:	4623      	mov	r3, r4
 80494a6:	f7f8 fe08 	bl	80420ba <HAL_HCD_HC_Init>
 80494aa:	4603      	mov	r3, r0
 80494ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80494ae:	7bfb      	ldrb	r3, [r7, #15]
 80494b0:	4618      	mov	r0, r3
 80494b2:	f000 f8bd 	bl	8049630 <USBH_Get_USB_Status>
 80494b6:	4603      	mov	r3, r0
 80494b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80494ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80494bc:	4618      	mov	r0, r3
 80494be:	3714      	adds	r7, #20
 80494c0:	46bd      	mov	sp, r7
 80494c2:	bd90      	pop	{r4, r7, pc}

080494c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80494c4:	b580      	push	{r7, lr}
 80494c6:	b084      	sub	sp, #16
 80494c8:	af00      	add	r7, sp, #0
 80494ca:	6078      	str	r0, [r7, #4]
 80494cc:	460b      	mov	r3, r1
 80494ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80494d0:	2300      	movs	r3, #0
 80494d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80494d4:	2300      	movs	r3, #0
 80494d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80494d8:	687b      	ldr	r3, [r7, #4]
 80494da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80494de:	78fa      	ldrb	r2, [r7, #3]
 80494e0:	4611      	mov	r1, r2
 80494e2:	4618      	mov	r0, r3
 80494e4:	f7f8 fe78 	bl	80421d8 <HAL_HCD_HC_Halt>
 80494e8:	4603      	mov	r3, r0
 80494ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80494ec:	7bfb      	ldrb	r3, [r7, #15]
 80494ee:	4618      	mov	r0, r3
 80494f0:	f000 f89e 	bl	8049630 <USBH_Get_USB_Status>
 80494f4:	4603      	mov	r3, r0
 80494f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80494f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80494fa:	4618      	mov	r0, r3
 80494fc:	3710      	adds	r7, #16
 80494fe:	46bd      	mov	sp, r7
 8049500:	bd80      	pop	{r7, pc}

08049502 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8049502:	b590      	push	{r4, r7, lr}
 8049504:	b089      	sub	sp, #36	; 0x24
 8049506:	af04      	add	r7, sp, #16
 8049508:	6078      	str	r0, [r7, #4]
 804950a:	4608      	mov	r0, r1
 804950c:	4611      	mov	r1, r2
 804950e:	461a      	mov	r2, r3
 8049510:	4603      	mov	r3, r0
 8049512:	70fb      	strb	r3, [r7, #3]
 8049514:	460b      	mov	r3, r1
 8049516:	70bb      	strb	r3, [r7, #2]
 8049518:	4613      	mov	r3, r2
 804951a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804951c:	2300      	movs	r3, #0
 804951e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8049520:	2300      	movs	r3, #0
 8049522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8049524:	687b      	ldr	r3, [r7, #4]
 8049526:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804952a:	787c      	ldrb	r4, [r7, #1]
 804952c:	78ba      	ldrb	r2, [r7, #2]
 804952e:	78f9      	ldrb	r1, [r7, #3]
 8049530:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049534:	9303      	str	r3, [sp, #12]
 8049536:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8049538:	9302      	str	r3, [sp, #8]
 804953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804953c:	9301      	str	r3, [sp, #4]
 804953e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8049542:	9300      	str	r3, [sp, #0]
 8049544:	4623      	mov	r3, r4
 8049546:	f7f8 fe6b 	bl	8042220 <HAL_HCD_HC_SubmitRequest>
 804954a:	4603      	mov	r3, r0
 804954c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804954e:	7bfb      	ldrb	r3, [r7, #15]
 8049550:	4618      	mov	r0, r3
 8049552:	f000 f86d 	bl	8049630 <USBH_Get_USB_Status>
 8049556:	4603      	mov	r3, r0
 8049558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804955a:	7bbb      	ldrb	r3, [r7, #14]
}
 804955c:	4618      	mov	r0, r3
 804955e:	3714      	adds	r7, #20
 8049560:	46bd      	mov	sp, r7
 8049562:	bd90      	pop	{r4, r7, pc}

08049564 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8049564:	b580      	push	{r7, lr}
 8049566:	b082      	sub	sp, #8
 8049568:	af00      	add	r7, sp, #0
 804956a:	6078      	str	r0, [r7, #4]
 804956c:	460b      	mov	r3, r1
 804956e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8049570:	687b      	ldr	r3, [r7, #4]
 8049572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8049576:	78fa      	ldrb	r2, [r7, #3]
 8049578:	4611      	mov	r1, r2
 804957a:	4618      	mov	r0, r3
 804957c:	f7f9 f8ff 	bl	804277e <HAL_HCD_HC_GetURBState>
 8049580:	4603      	mov	r3, r0
}
 8049582:	4618      	mov	r0, r3
 8049584:	3708      	adds	r7, #8
 8049586:	46bd      	mov	sp, r7
 8049588:	bd80      	pop	{r7, pc}

0804958a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804958a:	b580      	push	{r7, lr}
 804958c:	b082      	sub	sp, #8
 804958e:	af00      	add	r7, sp, #0
 8049590:	6078      	str	r0, [r7, #4]
 8049592:	460b      	mov	r3, r1
 8049594:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8049596:	687b      	ldr	r3, [r7, #4]
 8049598:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804959c:	2b00      	cmp	r3, #0
 804959e:	d103      	bne.n	80495a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80495a0:	78fb      	ldrb	r3, [r7, #3]
 80495a2:	4618      	mov	r0, r3
 80495a4:	f000 f870 	bl	8049688 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80495a8:	20c8      	movs	r0, #200	; 0xc8
 80495aa:	f7f8 f851 	bl	8041650 <HAL_Delay>
  return USBH_OK;
 80495ae:	2300      	movs	r3, #0
}
 80495b0:	4618      	mov	r0, r3
 80495b2:	3708      	adds	r7, #8
 80495b4:	46bd      	mov	sp, r7
 80495b6:	bd80      	pop	{r7, pc}

080495b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80495b8:	b480      	push	{r7}
 80495ba:	b085      	sub	sp, #20
 80495bc:	af00      	add	r7, sp, #0
 80495be:	6078      	str	r0, [r7, #4]
 80495c0:	460b      	mov	r3, r1
 80495c2:	70fb      	strb	r3, [r7, #3]
 80495c4:	4613      	mov	r3, r2
 80495c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80495c8:	687b      	ldr	r3, [r7, #4]
 80495ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80495ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80495d0:	78fb      	ldrb	r3, [r7, #3]
 80495d2:	68fa      	ldr	r2, [r7, #12]
 80495d4:	212c      	movs	r1, #44	; 0x2c
 80495d6:	fb01 f303 	mul.w	r3, r1, r3
 80495da:	4413      	add	r3, r2
 80495dc:	333b      	adds	r3, #59	; 0x3b
 80495de:	781b      	ldrb	r3, [r3, #0]
 80495e0:	2b00      	cmp	r3, #0
 80495e2:	d009      	beq.n	80495f8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80495e4:	78fb      	ldrb	r3, [r7, #3]
 80495e6:	68fa      	ldr	r2, [r7, #12]
 80495e8:	212c      	movs	r1, #44	; 0x2c
 80495ea:	fb01 f303 	mul.w	r3, r1, r3
 80495ee:	4413      	add	r3, r2
 80495f0:	3354      	adds	r3, #84	; 0x54
 80495f2:	78ba      	ldrb	r2, [r7, #2]
 80495f4:	701a      	strb	r2, [r3, #0]
 80495f6:	e008      	b.n	804960a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80495f8:	78fb      	ldrb	r3, [r7, #3]
 80495fa:	68fa      	ldr	r2, [r7, #12]
 80495fc:	212c      	movs	r1, #44	; 0x2c
 80495fe:	fb01 f303 	mul.w	r3, r1, r3
 8049602:	4413      	add	r3, r2
 8049604:	3355      	adds	r3, #85	; 0x55
 8049606:	78ba      	ldrb	r2, [r7, #2]
 8049608:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804960a:	2300      	movs	r3, #0
}
 804960c:	4618      	mov	r0, r3
 804960e:	3714      	adds	r7, #20
 8049610:	46bd      	mov	sp, r7
 8049612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049616:	4770      	bx	lr

08049618 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8049618:	b580      	push	{r7, lr}
 804961a:	b082      	sub	sp, #8
 804961c:	af00      	add	r7, sp, #0
 804961e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8049620:	6878      	ldr	r0, [r7, #4]
 8049622:	f7f8 f815 	bl	8041650 <HAL_Delay>
}
 8049626:	bf00      	nop
 8049628:	3708      	adds	r7, #8
 804962a:	46bd      	mov	sp, r7
 804962c:	bd80      	pop	{r7, pc}
	...

08049630 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8049630:	b480      	push	{r7}
 8049632:	b085      	sub	sp, #20
 8049634:	af00      	add	r7, sp, #0
 8049636:	4603      	mov	r3, r0
 8049638:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804963a:	2300      	movs	r3, #0
 804963c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804963e:	79fb      	ldrb	r3, [r7, #7]
 8049640:	2b03      	cmp	r3, #3
 8049642:	d817      	bhi.n	8049674 <USBH_Get_USB_Status+0x44>
 8049644:	a201      	add	r2, pc, #4	; (adr r2, 804964c <USBH_Get_USB_Status+0x1c>)
 8049646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804964a:	bf00      	nop
 804964c:	0804965d 	.word	0x0804965d
 8049650:	08049663 	.word	0x08049663
 8049654:	08049669 	.word	0x08049669
 8049658:	0804966f 	.word	0x0804966f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804965c:	2300      	movs	r3, #0
 804965e:	73fb      	strb	r3, [r7, #15]
    break;
 8049660:	e00b      	b.n	804967a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8049662:	2302      	movs	r3, #2
 8049664:	73fb      	strb	r3, [r7, #15]
    break;
 8049666:	e008      	b.n	804967a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8049668:	2301      	movs	r3, #1
 804966a:	73fb      	strb	r3, [r7, #15]
    break;
 804966c:	e005      	b.n	804967a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804966e:	2302      	movs	r3, #2
 8049670:	73fb      	strb	r3, [r7, #15]
    break;
 8049672:	e002      	b.n	804967a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8049674:	2302      	movs	r3, #2
 8049676:	73fb      	strb	r3, [r7, #15]
    break;
 8049678:	bf00      	nop
  }
  return usb_status;
 804967a:	7bfb      	ldrb	r3, [r7, #15]
}
 804967c:	4618      	mov	r0, r3
 804967e:	3714      	adds	r7, #20
 8049680:	46bd      	mov	sp, r7
 8049682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049686:	4770      	bx	lr

08049688 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8049688:	b580      	push	{r7, lr}
 804968a:	b084      	sub	sp, #16
 804968c:	af00      	add	r7, sp, #0
 804968e:	4603      	mov	r3, r0
 8049690:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8049692:	79fb      	ldrb	r3, [r7, #7]
 8049694:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8049696:	79fb      	ldrb	r3, [r7, #7]
 8049698:	2b00      	cmp	r3, #0
 804969a:	d102      	bne.n	80496a2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804969c:	2301      	movs	r3, #1
 804969e:	73fb      	strb	r3, [r7, #15]
 80496a0:	e001      	b.n	80496a6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80496a2:	2300      	movs	r3, #0
 80496a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80496a6:	7bfb      	ldrb	r3, [r7, #15]
 80496a8:	461a      	mov	r2, r3
 80496aa:	2110      	movs	r1, #16
 80496ac:	4803      	ldr	r0, [pc, #12]	; (80496bc <MX_DriverVbusHS+0x34>)
 80496ae:	f7f8 fc89 	bl	8041fc4 <HAL_GPIO_WritePin>
}
 80496b2:	bf00      	nop
 80496b4:	3710      	adds	r7, #16
 80496b6:	46bd      	mov	sp, r7
 80496b8:	bd80      	pop	{r7, pc}
 80496ba:	bf00      	nop
 80496bc:	40020800 	.word	0x40020800

080496c0 <__errno>:
 80496c0:	4b01      	ldr	r3, [pc, #4]	; (80496c8 <__errno+0x8>)
 80496c2:	6818      	ldr	r0, [r3, #0]
 80496c4:	4770      	bx	lr
 80496c6:	bf00      	nop
 80496c8:	2000002c 	.word	0x2000002c

080496cc <__libc_init_array>:
 80496cc:	b570      	push	{r4, r5, r6, lr}
 80496ce:	4d0d      	ldr	r5, [pc, #52]	; (8049704 <__libc_init_array+0x38>)
 80496d0:	4c0d      	ldr	r4, [pc, #52]	; (8049708 <__libc_init_array+0x3c>)
 80496d2:	1b64      	subs	r4, r4, r5
 80496d4:	10a4      	asrs	r4, r4, #2
 80496d6:	2600      	movs	r6, #0
 80496d8:	42a6      	cmp	r6, r4
 80496da:	d109      	bne.n	80496f0 <__libc_init_array+0x24>
 80496dc:	4d0b      	ldr	r5, [pc, #44]	; (804970c <__libc_init_array+0x40>)
 80496de:	4c0c      	ldr	r4, [pc, #48]	; (8049710 <__libc_init_array+0x44>)
 80496e0:	f000 f92e 	bl	8049940 <_init>
 80496e4:	1b64      	subs	r4, r4, r5
 80496e6:	10a4      	asrs	r4, r4, #2
 80496e8:	2600      	movs	r6, #0
 80496ea:	42a6      	cmp	r6, r4
 80496ec:	d105      	bne.n	80496fa <__libc_init_array+0x2e>
 80496ee:	bd70      	pop	{r4, r5, r6, pc}
 80496f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80496f4:	4798      	blx	r3
 80496f6:	3601      	adds	r6, #1
 80496f8:	e7ee      	b.n	80496d8 <__libc_init_array+0xc>
 80496fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80496fe:	4798      	blx	r3
 8049700:	3601      	adds	r6, #1
 8049702:	e7f2      	b.n	80496ea <__libc_init_array+0x1e>
 8049704:	0804997c 	.word	0x0804997c
 8049708:	0804997c 	.word	0x0804997c
 804970c:	0804997c 	.word	0x0804997c
 8049710:	08049980 	.word	0x08049980

08049714 <malloc>:
 8049714:	4b02      	ldr	r3, [pc, #8]	; (8049720 <malloc+0xc>)
 8049716:	4601      	mov	r1, r0
 8049718:	6818      	ldr	r0, [r3, #0]
 804971a:	f000 b87f 	b.w	804981c <_malloc_r>
 804971e:	bf00      	nop
 8049720:	2000002c 	.word	0x2000002c

08049724 <free>:
 8049724:	4b02      	ldr	r3, [pc, #8]	; (8049730 <free+0xc>)
 8049726:	4601      	mov	r1, r0
 8049728:	6818      	ldr	r0, [r3, #0]
 804972a:	f000 b80b 	b.w	8049744 <_free_r>
 804972e:	bf00      	nop
 8049730:	2000002c 	.word	0x2000002c

08049734 <memset>:
 8049734:	4402      	add	r2, r0
 8049736:	4603      	mov	r3, r0
 8049738:	4293      	cmp	r3, r2
 804973a:	d100      	bne.n	804973e <memset+0xa>
 804973c:	4770      	bx	lr
 804973e:	f803 1b01 	strb.w	r1, [r3], #1
 8049742:	e7f9      	b.n	8049738 <memset+0x4>

08049744 <_free_r>:
 8049744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8049746:	2900      	cmp	r1, #0
 8049748:	d044      	beq.n	80497d4 <_free_r+0x90>
 804974a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804974e:	9001      	str	r0, [sp, #4]
 8049750:	2b00      	cmp	r3, #0
 8049752:	f1a1 0404 	sub.w	r4, r1, #4
 8049756:	bfb8      	it	lt
 8049758:	18e4      	addlt	r4, r4, r3
 804975a:	f000 f8e3 	bl	8049924 <__malloc_lock>
 804975e:	4a1e      	ldr	r2, [pc, #120]	; (80497d8 <_free_r+0x94>)
 8049760:	9801      	ldr	r0, [sp, #4]
 8049762:	6813      	ldr	r3, [r2, #0]
 8049764:	b933      	cbnz	r3, 8049774 <_free_r+0x30>
 8049766:	6063      	str	r3, [r4, #4]
 8049768:	6014      	str	r4, [r2, #0]
 804976a:	b003      	add	sp, #12
 804976c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8049770:	f000 b8de 	b.w	8049930 <__malloc_unlock>
 8049774:	42a3      	cmp	r3, r4
 8049776:	d908      	bls.n	804978a <_free_r+0x46>
 8049778:	6825      	ldr	r5, [r4, #0]
 804977a:	1961      	adds	r1, r4, r5
 804977c:	428b      	cmp	r3, r1
 804977e:	bf01      	itttt	eq
 8049780:	6819      	ldreq	r1, [r3, #0]
 8049782:	685b      	ldreq	r3, [r3, #4]
 8049784:	1949      	addeq	r1, r1, r5
 8049786:	6021      	streq	r1, [r4, #0]
 8049788:	e7ed      	b.n	8049766 <_free_r+0x22>
 804978a:	461a      	mov	r2, r3
 804978c:	685b      	ldr	r3, [r3, #4]
 804978e:	b10b      	cbz	r3, 8049794 <_free_r+0x50>
 8049790:	42a3      	cmp	r3, r4
 8049792:	d9fa      	bls.n	804978a <_free_r+0x46>
 8049794:	6811      	ldr	r1, [r2, #0]
 8049796:	1855      	adds	r5, r2, r1
 8049798:	42a5      	cmp	r5, r4
 804979a:	d10b      	bne.n	80497b4 <_free_r+0x70>
 804979c:	6824      	ldr	r4, [r4, #0]
 804979e:	4421      	add	r1, r4
 80497a0:	1854      	adds	r4, r2, r1
 80497a2:	42a3      	cmp	r3, r4
 80497a4:	6011      	str	r1, [r2, #0]
 80497a6:	d1e0      	bne.n	804976a <_free_r+0x26>
 80497a8:	681c      	ldr	r4, [r3, #0]
 80497aa:	685b      	ldr	r3, [r3, #4]
 80497ac:	6053      	str	r3, [r2, #4]
 80497ae:	4421      	add	r1, r4
 80497b0:	6011      	str	r1, [r2, #0]
 80497b2:	e7da      	b.n	804976a <_free_r+0x26>
 80497b4:	d902      	bls.n	80497bc <_free_r+0x78>
 80497b6:	230c      	movs	r3, #12
 80497b8:	6003      	str	r3, [r0, #0]
 80497ba:	e7d6      	b.n	804976a <_free_r+0x26>
 80497bc:	6825      	ldr	r5, [r4, #0]
 80497be:	1961      	adds	r1, r4, r5
 80497c0:	428b      	cmp	r3, r1
 80497c2:	bf04      	itt	eq
 80497c4:	6819      	ldreq	r1, [r3, #0]
 80497c6:	685b      	ldreq	r3, [r3, #4]
 80497c8:	6063      	str	r3, [r4, #4]
 80497ca:	bf04      	itt	eq
 80497cc:	1949      	addeq	r1, r1, r5
 80497ce:	6021      	streq	r1, [r4, #0]
 80497d0:	6054      	str	r4, [r2, #4]
 80497d2:	e7ca      	b.n	804976a <_free_r+0x26>
 80497d4:	b003      	add	sp, #12
 80497d6:	bd30      	pop	{r4, r5, pc}
 80497d8:	20000a3c 	.word	0x20000a3c

080497dc <sbrk_aligned>:
 80497dc:	b570      	push	{r4, r5, r6, lr}
 80497de:	4e0e      	ldr	r6, [pc, #56]	; (8049818 <sbrk_aligned+0x3c>)
 80497e0:	460c      	mov	r4, r1
 80497e2:	6831      	ldr	r1, [r6, #0]
 80497e4:	4605      	mov	r5, r0
 80497e6:	b911      	cbnz	r1, 80497ee <sbrk_aligned+0x12>
 80497e8:	f000 f88c 	bl	8049904 <_sbrk_r>
 80497ec:	6030      	str	r0, [r6, #0]
 80497ee:	4621      	mov	r1, r4
 80497f0:	4628      	mov	r0, r5
 80497f2:	f000 f887 	bl	8049904 <_sbrk_r>
 80497f6:	1c43      	adds	r3, r0, #1
 80497f8:	d00a      	beq.n	8049810 <sbrk_aligned+0x34>
 80497fa:	1cc4      	adds	r4, r0, #3
 80497fc:	f024 0403 	bic.w	r4, r4, #3
 8049800:	42a0      	cmp	r0, r4
 8049802:	d007      	beq.n	8049814 <sbrk_aligned+0x38>
 8049804:	1a21      	subs	r1, r4, r0
 8049806:	4628      	mov	r0, r5
 8049808:	f000 f87c 	bl	8049904 <_sbrk_r>
 804980c:	3001      	adds	r0, #1
 804980e:	d101      	bne.n	8049814 <sbrk_aligned+0x38>
 8049810:	f04f 34ff 	mov.w	r4, #4294967295
 8049814:	4620      	mov	r0, r4
 8049816:	bd70      	pop	{r4, r5, r6, pc}
 8049818:	20000a40 	.word	0x20000a40

0804981c <_malloc_r>:
 804981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049820:	1ccd      	adds	r5, r1, #3
 8049822:	f025 0503 	bic.w	r5, r5, #3
 8049826:	3508      	adds	r5, #8
 8049828:	2d0c      	cmp	r5, #12
 804982a:	bf38      	it	cc
 804982c:	250c      	movcc	r5, #12
 804982e:	2d00      	cmp	r5, #0
 8049830:	4607      	mov	r7, r0
 8049832:	db01      	blt.n	8049838 <_malloc_r+0x1c>
 8049834:	42a9      	cmp	r1, r5
 8049836:	d905      	bls.n	8049844 <_malloc_r+0x28>
 8049838:	230c      	movs	r3, #12
 804983a:	603b      	str	r3, [r7, #0]
 804983c:	2600      	movs	r6, #0
 804983e:	4630      	mov	r0, r6
 8049840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8049844:	4e2e      	ldr	r6, [pc, #184]	; (8049900 <_malloc_r+0xe4>)
 8049846:	f000 f86d 	bl	8049924 <__malloc_lock>
 804984a:	6833      	ldr	r3, [r6, #0]
 804984c:	461c      	mov	r4, r3
 804984e:	bb34      	cbnz	r4, 804989e <_malloc_r+0x82>
 8049850:	4629      	mov	r1, r5
 8049852:	4638      	mov	r0, r7
 8049854:	f7ff ffc2 	bl	80497dc <sbrk_aligned>
 8049858:	1c43      	adds	r3, r0, #1
 804985a:	4604      	mov	r4, r0
 804985c:	d14d      	bne.n	80498fa <_malloc_r+0xde>
 804985e:	6834      	ldr	r4, [r6, #0]
 8049860:	4626      	mov	r6, r4
 8049862:	2e00      	cmp	r6, #0
 8049864:	d140      	bne.n	80498e8 <_malloc_r+0xcc>
 8049866:	6823      	ldr	r3, [r4, #0]
 8049868:	4631      	mov	r1, r6
 804986a:	4638      	mov	r0, r7
 804986c:	eb04 0803 	add.w	r8, r4, r3
 8049870:	f000 f848 	bl	8049904 <_sbrk_r>
 8049874:	4580      	cmp	r8, r0
 8049876:	d13a      	bne.n	80498ee <_malloc_r+0xd2>
 8049878:	6821      	ldr	r1, [r4, #0]
 804987a:	3503      	adds	r5, #3
 804987c:	1a6d      	subs	r5, r5, r1
 804987e:	f025 0503 	bic.w	r5, r5, #3
 8049882:	3508      	adds	r5, #8
 8049884:	2d0c      	cmp	r5, #12
 8049886:	bf38      	it	cc
 8049888:	250c      	movcc	r5, #12
 804988a:	4629      	mov	r1, r5
 804988c:	4638      	mov	r0, r7
 804988e:	f7ff ffa5 	bl	80497dc <sbrk_aligned>
 8049892:	3001      	adds	r0, #1
 8049894:	d02b      	beq.n	80498ee <_malloc_r+0xd2>
 8049896:	6823      	ldr	r3, [r4, #0]
 8049898:	442b      	add	r3, r5
 804989a:	6023      	str	r3, [r4, #0]
 804989c:	e00e      	b.n	80498bc <_malloc_r+0xa0>
 804989e:	6822      	ldr	r2, [r4, #0]
 80498a0:	1b52      	subs	r2, r2, r5
 80498a2:	d41e      	bmi.n	80498e2 <_malloc_r+0xc6>
 80498a4:	2a0b      	cmp	r2, #11
 80498a6:	d916      	bls.n	80498d6 <_malloc_r+0xba>
 80498a8:	1961      	adds	r1, r4, r5
 80498aa:	42a3      	cmp	r3, r4
 80498ac:	6025      	str	r5, [r4, #0]
 80498ae:	bf18      	it	ne
 80498b0:	6059      	strne	r1, [r3, #4]
 80498b2:	6863      	ldr	r3, [r4, #4]
 80498b4:	bf08      	it	eq
 80498b6:	6031      	streq	r1, [r6, #0]
 80498b8:	5162      	str	r2, [r4, r5]
 80498ba:	604b      	str	r3, [r1, #4]
 80498bc:	4638      	mov	r0, r7
 80498be:	f104 060b 	add.w	r6, r4, #11
 80498c2:	f000 f835 	bl	8049930 <__malloc_unlock>
 80498c6:	f026 0607 	bic.w	r6, r6, #7
 80498ca:	1d23      	adds	r3, r4, #4
 80498cc:	1af2      	subs	r2, r6, r3
 80498ce:	d0b6      	beq.n	804983e <_malloc_r+0x22>
 80498d0:	1b9b      	subs	r3, r3, r6
 80498d2:	50a3      	str	r3, [r4, r2]
 80498d4:	e7b3      	b.n	804983e <_malloc_r+0x22>
 80498d6:	6862      	ldr	r2, [r4, #4]
 80498d8:	42a3      	cmp	r3, r4
 80498da:	bf0c      	ite	eq
 80498dc:	6032      	streq	r2, [r6, #0]
 80498de:	605a      	strne	r2, [r3, #4]
 80498e0:	e7ec      	b.n	80498bc <_malloc_r+0xa0>
 80498e2:	4623      	mov	r3, r4
 80498e4:	6864      	ldr	r4, [r4, #4]
 80498e6:	e7b2      	b.n	804984e <_malloc_r+0x32>
 80498e8:	4634      	mov	r4, r6
 80498ea:	6876      	ldr	r6, [r6, #4]
 80498ec:	e7b9      	b.n	8049862 <_malloc_r+0x46>
 80498ee:	230c      	movs	r3, #12
 80498f0:	603b      	str	r3, [r7, #0]
 80498f2:	4638      	mov	r0, r7
 80498f4:	f000 f81c 	bl	8049930 <__malloc_unlock>
 80498f8:	e7a1      	b.n	804983e <_malloc_r+0x22>
 80498fa:	6025      	str	r5, [r4, #0]
 80498fc:	e7de      	b.n	80498bc <_malloc_r+0xa0>
 80498fe:	bf00      	nop
 8049900:	20000a3c 	.word	0x20000a3c

08049904 <_sbrk_r>:
 8049904:	b538      	push	{r3, r4, r5, lr}
 8049906:	4d06      	ldr	r5, [pc, #24]	; (8049920 <_sbrk_r+0x1c>)
 8049908:	2300      	movs	r3, #0
 804990a:	4604      	mov	r4, r0
 804990c:	4608      	mov	r0, r1
 804990e:	602b      	str	r3, [r5, #0]
 8049910:	f7f7 fde6 	bl	80414e0 <_sbrk>
 8049914:	1c43      	adds	r3, r0, #1
 8049916:	d102      	bne.n	804991e <_sbrk_r+0x1a>
 8049918:	682b      	ldr	r3, [r5, #0]
 804991a:	b103      	cbz	r3, 804991e <_sbrk_r+0x1a>
 804991c:	6023      	str	r3, [r4, #0]
 804991e:	bd38      	pop	{r3, r4, r5, pc}
 8049920:	20000a44 	.word	0x20000a44

08049924 <__malloc_lock>:
 8049924:	4801      	ldr	r0, [pc, #4]	; (804992c <__malloc_lock+0x8>)
 8049926:	f000 b809 	b.w	804993c <__retarget_lock_acquire_recursive>
 804992a:	bf00      	nop
 804992c:	20000a48 	.word	0x20000a48

08049930 <__malloc_unlock>:
 8049930:	4801      	ldr	r0, [pc, #4]	; (8049938 <__malloc_unlock+0x8>)
 8049932:	f000 b804 	b.w	804993e <__retarget_lock_release_recursive>
 8049936:	bf00      	nop
 8049938:	20000a48 	.word	0x20000a48

0804993c <__retarget_lock_acquire_recursive>:
 804993c:	4770      	bx	lr

0804993e <__retarget_lock_release_recursive>:
 804993e:	4770      	bx	lr

08049940 <_init>:
 8049940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049942:	bf00      	nop
 8049944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049946:	bc08      	pop	{r3}
 8049948:	469e      	mov	lr, r3
 804994a:	4770      	bx	lr

0804994c <_fini>:
 804994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804994e:	bf00      	nop
 8049950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049952:	bc08      	pop	{r3}
 8049954:	469e      	mov	lr, r3
 8049956:	4770      	bx	lr
