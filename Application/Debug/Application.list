
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7c0  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024b4  0802e970  0802e970  0001e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030e24  08030e24  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08030e24  08030e24  00020e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030e2c  08030e2c  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030e2c  08030e2c  00020e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030e30  08030e30  00020e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08030e34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000010d4  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011b4  200011b4  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b3f1  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005998  00000000  00000000  0005b501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b8  00000000  00000000  00060ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f88  00000000  00000000  00063058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c352  00000000  00000000  00064fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b497  00000000  00000000  00091332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f041a  00000000  00000000  000bc7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001acbe3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098c0  00000000  00000000  001acc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e0 	.word	0x200000e0
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802e958 	.word	0x0802e958

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e4 	.word	0x200000e4
 80201ec:	0802e958 	.word	0x0802e958

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 fdb8 	bl	802310c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f88c 	bl	80206b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb26 	bl	8020bf0 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f8f4 	bl	8020790 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f906 	bl	80207b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fad0 	bl	8020b50 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f934 	bl	802081c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f972 	bl	802089c <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 f9f0 	bl	802099c <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa24 	bl	8020a08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fa9c 	bl	8020afc <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00c fc98 	bl	802cef8 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa6e 	bl	8020aa8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4930      	ldr	r1, [pc, #192]	; (8020690 <main+0xfc>)
 80205d0:	4830      	ldr	r0, [pc, #192]	; (8020694 <main+0x100>)
 80205d2:	f008 fc0a 	bl	8028dea <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2302      	movs	r3, #2
 80205dc:	492e      	ldr	r1, [pc, #184]	; (8020698 <main+0x104>)
 80205de:	482f      	ldr	r0, [pc, #188]	; (802069c <main+0x108>)
 80205e0:	f00d f958 	bl	802d894 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2202      	movs	r2, #2
 80205e8:	4619      	mov	r1, r3
 80205ea:	482d      	ldr	r0, [pc, #180]	; (80206a0 <main+0x10c>)
 80205ec:	f00d f8b4 	bl	802d758 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f001 ff06 	bl	8022400 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f001 ff83 	bl	8022504 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f001 ffe4 	bl	80225cc <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 f88e 	bl	8022728 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 f829 	bl	8022668 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f001 ffe7 	bl	80225ec <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4921      	ldr	r1, [pc, #132]	; (80206a4 <main+0x110>)
 8020620:	2000      	movs	r0, #0
 8020622:	f001 ff6f 	bl	8022504 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f001 ffd0 	bl	80225cc <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 f9a6 	bl	802297c <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 f878 	bl	8022728 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 f840 	bl	80226c0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4819      	ldr	r0, [pc, #100]	; (80206a8 <main+0x114>)
 8020642:	f002 f825 	bl	8022690 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4819      	ldr	r0, [pc, #100]	; (80206ac <main+0x118>)
 8020648:	f002 f854 	bl	80226f4 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a13      	ldr	r2, [pc, #76]	; (802069c <main+0x108>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 f8d4 	bl	8022800 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 f818 	bl	8022690 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f001 ff44 	bl	80224ec <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a0f      	ldr	r2, [pc, #60]	; (80206b0 <main+0x11c>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 f8c4 	bl	8022800 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00c fc64 	bl	802cf44 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	480c      	ldr	r0, [pc, #48]	; (80206b4 <main+0x120>)
 8020684:	f003 ff4a 	bl	802451c <HAL_GPIO_WritePin>
    if (ota_update_request){

    	//TODO : ota update request handler
    }
	serial_app();
 8020688:	f000 fc00 	bl	8020e8c <serial_app>
    MX_USB_HOST_Process();
 802068c:	e7f4      	b.n	8020678 <main+0xe4>
 802068e:	bf00      	nop
 8020690:	20000400 	.word	0x20000400
 8020694:	200002e0 	.word	0x200002e0
 8020698:	0802e970 	.word	0x0802e970
 802069c:	2000039c 	.word	0x2000039c
 80206a0:	0802e990 	.word	0x0802e990
 80206a4:	d0130000 	.word	0xd0130000
 80206a8:	ffff0000 	.word	0xffff0000
 80206ac:	20000048 	.word	0x20000048
 80206b0:	0802e9b0 	.word	0x0802e9b0
 80206b4:	40021800 	.word	0x40021800

080206b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b094      	sub	sp, #80	; 0x50
 80206bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206be:	f107 0320 	add.w	r3, r7, #32
 80206c2:	2230      	movs	r2, #48	; 0x30
 80206c4:	2100      	movs	r1, #0
 80206c6:	4618      	mov	r0, r3
 80206c8:	f00c ff5e 	bl	802d588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206cc:	f107 030c 	add.w	r3, r7, #12
 80206d0:	2200      	movs	r2, #0
 80206d2:	601a      	str	r2, [r3, #0]
 80206d4:	605a      	str	r2, [r3, #4]
 80206d6:	609a      	str	r2, [r3, #8]
 80206d8:	60da      	str	r2, [r3, #12]
 80206da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80206dc:	2300      	movs	r3, #0
 80206de:	60bb      	str	r3, [r7, #8]
 80206e0:	4b29      	ldr	r3, [pc, #164]	; (8020788 <SystemClock_Config+0xd0>)
 80206e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206e4:	4a28      	ldr	r2, [pc, #160]	; (8020788 <SystemClock_Config+0xd0>)
 80206e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206ea:	6413      	str	r3, [r2, #64]	; 0x40
 80206ec:	4b26      	ldr	r3, [pc, #152]	; (8020788 <SystemClock_Config+0xd0>)
 80206ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206f4:	60bb      	str	r3, [r7, #8]
 80206f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80206f8:	2300      	movs	r3, #0
 80206fa:	607b      	str	r3, [r7, #4]
 80206fc:	4b23      	ldr	r3, [pc, #140]	; (802078c <SystemClock_Config+0xd4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020704:	4a21      	ldr	r2, [pc, #132]	; (802078c <SystemClock_Config+0xd4>)
 8020706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802070a:	6013      	str	r3, [r2, #0]
 802070c:	4b1f      	ldr	r3, [pc, #124]	; (802078c <SystemClock_Config+0xd4>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020714:	607b      	str	r3, [r7, #4]
 8020716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020718:	2301      	movs	r3, #1
 802071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020722:	2302      	movs	r3, #2
 8020724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802072c:	2310      	movs	r3, #16
 802072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020736:	2302      	movs	r3, #2
 8020738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802073a:	2303      	movs	r3, #3
 802073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802073e:	f107 0320 	add.w	r3, r7, #32
 8020742:	4618      	mov	r0, r3
 8020744:	f006 f8f6 	bl	8026934 <HAL_RCC_OscConfig>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	d001      	beq.n	8020752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802074e:	f000 fb97 	bl	8020e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020752:	230f      	movs	r3, #15
 8020754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020756:	2302      	movs	r3, #2
 8020758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802075a:	2300      	movs	r3, #0
 802075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802076a:	f107 030c 	add.w	r3, r7, #12
 802076e:	2102      	movs	r1, #2
 8020770:	4618      	mov	r0, r3
 8020772:	f006 fb57 	bl	8026e24 <HAL_RCC_ClockConfig>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	d001      	beq.n	8020780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 802077c:	f000 fb80 	bl	8020e80 <Error_Handler>
  }
}
 8020780:	bf00      	nop
 8020782:	3750      	adds	r7, #80	; 0x50
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	40023800 	.word	0x40023800
 802078c:	40007000 	.word	0x40007000

08020790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020794:	4b06      	ldr	r3, [pc, #24]	; (80207b0 <MX_CRC_Init+0x20>)
 8020796:	4a07      	ldr	r2, [pc, #28]	; (80207b4 <MX_CRC_Init+0x24>)
 8020798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802079a:	4805      	ldr	r0, [pc, #20]	; (80207b0 <MX_CRC_Init+0x20>)
 802079c:	f002 fdfe 	bl	802339c <HAL_CRC_Init>
 80207a0:	4603      	mov	r3, r0
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d001      	beq.n	80207aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207a6:	f000 fb6b 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207aa:	bf00      	nop
 80207ac:	bd80      	pop	{r7, pc}
 80207ae:	bf00      	nop
 80207b0:	200000fc 	.word	0x200000fc
 80207b4:	40023000 	.word	0x40023000

080207b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207bc:	4b15      	ldr	r3, [pc, #84]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207be:	4a16      	ldr	r2, [pc, #88]	; (8020818 <MX_DMA2D_Init+0x60>)
 80207c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207c2:	4b14      	ldr	r3, [pc, #80]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207c8:	4b12      	ldr	r3, [pc, #72]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ca:	2200      	movs	r2, #0
 80207cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207ce:	4b11      	ldr	r3, [pc, #68]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d0:	2200      	movs	r2, #0
 80207d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207d4:	4b0f      	ldr	r3, [pc, #60]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d6:	2200      	movs	r2, #0
 80207d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80207da:	4b0e      	ldr	r3, [pc, #56]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207dc:	2200      	movs	r2, #0
 80207de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80207e0:	4b0c      	ldr	r3, [pc, #48]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e2:	2200      	movs	r2, #0
 80207e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80207e6:	4b0b      	ldr	r3, [pc, #44]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80207ec:	4809      	ldr	r0, [pc, #36]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ee:	f003 f841 	bl	8023874 <HAL_DMA2D_Init>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d001      	beq.n	80207fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80207f8:	f000 fb42 	bl	8020e80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80207fc:	2101      	movs	r1, #1
 80207fe:	4805      	ldr	r0, [pc, #20]	; (8020814 <MX_DMA2D_Init+0x5c>)
 8020800:	f003 faa6 	bl	8023d50 <HAL_DMA2D_ConfigLayer>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	d001      	beq.n	802080e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802080a:	f000 fb39 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802080e:	bf00      	nop
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop
 8020814:	20000104 	.word	0x20000104
 8020818:	4002b000 	.word	0x4002b000

0802081c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802081c:	b580      	push	{r7, lr}
 802081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020820:	4b1b      	ldr	r3, [pc, #108]	; (8020890 <MX_I2C3_Init+0x74>)
 8020822:	4a1c      	ldr	r2, [pc, #112]	; (8020894 <MX_I2C3_Init+0x78>)
 8020824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020826:	4b1a      	ldr	r3, [pc, #104]	; (8020890 <MX_I2C3_Init+0x74>)
 8020828:	4a1b      	ldr	r2, [pc, #108]	; (8020898 <MX_I2C3_Init+0x7c>)
 802082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802082c:	4b18      	ldr	r3, [pc, #96]	; (8020890 <MX_I2C3_Init+0x74>)
 802082e:	2200      	movs	r2, #0
 8020830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020832:	4b17      	ldr	r3, [pc, #92]	; (8020890 <MX_I2C3_Init+0x74>)
 8020834:	2200      	movs	r2, #0
 8020836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020838:	4b15      	ldr	r3, [pc, #84]	; (8020890 <MX_I2C3_Init+0x74>)
 802083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802083e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020840:	4b13      	ldr	r3, [pc, #76]	; (8020890 <MX_I2C3_Init+0x74>)
 8020842:	2200      	movs	r2, #0
 8020844:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020846:	4b12      	ldr	r3, [pc, #72]	; (8020890 <MX_I2C3_Init+0x74>)
 8020848:	2200      	movs	r2, #0
 802084a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802084c:	4b10      	ldr	r3, [pc, #64]	; (8020890 <MX_I2C3_Init+0x74>)
 802084e:	2200      	movs	r2, #0
 8020850:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020852:	4b0f      	ldr	r3, [pc, #60]	; (8020890 <MX_I2C3_Init+0x74>)
 8020854:	2200      	movs	r2, #0
 8020856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020858:	480d      	ldr	r0, [pc, #52]	; (8020890 <MX_I2C3_Init+0x74>)
 802085a:	f005 fa9b 	bl	8025d94 <HAL_I2C_Init>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d001      	beq.n	8020868 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020864:	f000 fb0c 	bl	8020e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020868:	2100      	movs	r1, #0
 802086a:	4809      	ldr	r0, [pc, #36]	; (8020890 <MX_I2C3_Init+0x74>)
 802086c:	f005 fbd6 	bl	802601c <HAL_I2CEx_ConfigAnalogFilter>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8020876:	f000 fb03 	bl	8020e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802087a:	2100      	movs	r1, #0
 802087c:	4804      	ldr	r0, [pc, #16]	; (8020890 <MX_I2C3_Init+0x74>)
 802087e:	f005 fc09 	bl	8026094 <HAL_I2CEx_ConfigDigitalFilter>
 8020882:	4603      	mov	r3, r0
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8020888:	f000 fafa 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 802088c:	bf00      	nop
 802088e:	bd80      	pop	{r7, pc}
 8020890:	20000144 	.word	0x20000144
 8020894:	40005c00 	.word	0x40005c00
 8020898:	000186a0 	.word	0x000186a0

0802089c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b08e      	sub	sp, #56	; 0x38
 80208a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208a2:	1d3b      	adds	r3, r7, #4
 80208a4:	2234      	movs	r2, #52	; 0x34
 80208a6:	2100      	movs	r1, #0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f00c fe6d 	bl	802d588 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208ae:	4b39      	ldr	r3, [pc, #228]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b0:	4a39      	ldr	r2, [pc, #228]	; (8020998 <MX_LTDC_Init+0xfc>)
 80208b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208b4:	4b37      	ldr	r3, [pc, #220]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b6:	2200      	movs	r2, #0
 80208b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ba:	4b36      	ldr	r3, [pc, #216]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208bc:	2200      	movs	r2, #0
 80208be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208c0:	4b34      	ldr	r3, [pc, #208]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208c6:	4b33      	ldr	r3, [pc, #204]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208cc:	4b31      	ldr	r3, [pc, #196]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ce:	2209      	movs	r2, #9
 80208d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208d2:	4b30      	ldr	r3, [pc, #192]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208d4:	2201      	movs	r2, #1
 80208d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80208d8:	4b2e      	ldr	r3, [pc, #184]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208da:	221d      	movs	r2, #29
 80208dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80208de:	4b2d      	ldr	r3, [pc, #180]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e0:	2203      	movs	r2, #3
 80208e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80208e4:	4b2b      	ldr	r3, [pc, #172]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e6:	f240 120d 	movw	r2, #269	; 0x10d
 80208ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80208ec:	4b29      	ldr	r3, [pc, #164]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ee:	f240 1243 	movw	r2, #323	; 0x143
 80208f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80208f4:	4b27      	ldr	r3, [pc, #156]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208f6:	f240 1217 	movw	r2, #279	; 0x117
 80208fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80208fc:	4b25      	ldr	r3, [pc, #148]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208fe:	f240 1247 	movw	r2, #327	; 0x147
 8020902:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020904:	4b23      	ldr	r3, [pc, #140]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020906:	2200      	movs	r2, #0
 8020908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802090c:	4b21      	ldr	r3, [pc, #132]	; (8020994 <MX_LTDC_Init+0xf8>)
 802090e:	2200      	movs	r2, #0
 8020910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020914:	4b1f      	ldr	r3, [pc, #124]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020916:	2200      	movs	r2, #0
 8020918:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802091c:	481d      	ldr	r0, [pc, #116]	; (8020994 <MX_LTDC_Init+0xf8>)
 802091e:	f005 fbf9 	bl	8026114 <HAL_LTDC_Init>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020928:	f000 faaa 	bl	8020e80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802092c:	2300      	movs	r3, #0
 802092e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020930:	23f0      	movs	r3, #240	; 0xf0
 8020932:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020934:	2300      	movs	r3, #0
 8020936:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020938:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802093c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802093e:	2302      	movs	r3, #2
 8020940:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020942:	23ff      	movs	r3, #255	; 0xff
 8020944:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020946:	2300      	movs	r3, #0
 8020948:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802094a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802094e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020950:	2307      	movs	r3, #7
 8020952:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020954:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020958:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802095a:	23f0      	movs	r3, #240	; 0xf0
 802095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802095e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020962:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802096a:	2300      	movs	r3, #0
 802096c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020970:	2300      	movs	r3, #0
 8020972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020976:	1d3b      	adds	r3, r7, #4
 8020978:	2200      	movs	r2, #0
 802097a:	4619      	mov	r1, r3
 802097c:	4805      	ldr	r0, [pc, #20]	; (8020994 <MX_LTDC_Init+0xf8>)
 802097e:	f005 fd5b 	bl	8026438 <HAL_LTDC_ConfigLayer>
 8020982:	4603      	mov	r3, r0
 8020984:	2b00      	cmp	r3, #0
 8020986:	d001      	beq.n	802098c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8020988:	f000 fa7a 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 802098c:	bf00      	nop
 802098e:	3738      	adds	r7, #56	; 0x38
 8020990:	46bd      	mov	sp, r7
 8020992:	bd80      	pop	{r7, pc}
 8020994:	20000198 	.word	0x20000198
 8020998:	40016800 	.word	0x40016800

0802099c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 802099c:	b580      	push	{r7, lr}
 802099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209a0:	4b17      	ldr	r3, [pc, #92]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a2:	4a18      	ldr	r2, [pc, #96]	; (8020a04 <MX_SPI5_Init+0x68>)
 80209a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209a6:	4b16      	ldr	r3, [pc, #88]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209ae:	4b14      	ldr	r3, [pc, #80]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b0:	2200      	movs	r2, #0
 80209b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209b4:	4b12      	ldr	r3, [pc, #72]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b6:	2200      	movs	r2, #0
 80209b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ba:	4b11      	ldr	r3, [pc, #68]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209bc:	2200      	movs	r2, #0
 80209be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209c0:	4b0f      	ldr	r3, [pc, #60]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c2:	2200      	movs	r2, #0
 80209c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209c6:	4b0e      	ldr	r3, [pc, #56]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209ce:	4b0c      	ldr	r3, [pc, #48]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d0:	2218      	movs	r2, #24
 80209d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209d4:	4b0a      	ldr	r3, [pc, #40]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d6:	2200      	movs	r2, #0
 80209d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209dc:	2200      	movs	r2, #0
 80209de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209e0:	4b07      	ldr	r3, [pc, #28]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80209e6:	4b06      	ldr	r3, [pc, #24]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e8:	220a      	movs	r2, #10
 80209ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80209ec:	4804      	ldr	r0, [pc, #16]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209ee:	f006 febc 	bl	802776a <HAL_SPI_Init>
 80209f2:	4603      	mov	r3, r0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d001      	beq.n	80209fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80209f8:	f000 fa42 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80209fc:	bf00      	nop
 80209fe:	bd80      	pop	{r7, pc}
 8020a00:	20000240 	.word	0x20000240
 8020a04:	40015000 	.word	0x40015000

08020a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b086      	sub	sp, #24
 8020a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a0e:	f107 0308 	add.w	r3, r7, #8
 8020a12:	2200      	movs	r2, #0
 8020a14:	601a      	str	r2, [r3, #0]
 8020a16:	605a      	str	r2, [r3, #4]
 8020a18:	609a      	str	r2, [r3, #8]
 8020a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a1c:	463b      	mov	r3, r7
 8020a1e:	2200      	movs	r2, #0
 8020a20:	601a      	str	r2, [r3, #0]
 8020a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a24:	4b1e      	ldr	r3, [pc, #120]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a26:	4a1f      	ldr	r2, [pc, #124]	; (8020aa4 <MX_TIM1_Init+0x9c>)
 8020a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a2a:	4b1d      	ldr	r3, [pc, #116]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a30:	4b1b      	ldr	r3, [pc, #108]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a36:	4b1a      	ldr	r3, [pc, #104]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a3e:	4b18      	ldr	r3, [pc, #96]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a44:	4b16      	ldr	r3, [pc, #88]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a46:	2200      	movs	r2, #0
 8020a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a4a:	4b15      	ldr	r3, [pc, #84]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a50:	4813      	ldr	r0, [pc, #76]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a52:	f007 fc69 	bl	8028328 <HAL_TIM_Base_Init>
 8020a56:	4603      	mov	r3, r0
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d001      	beq.n	8020a60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a5c:	f000 fa10 	bl	8020e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a66:	f107 0308 	add.w	r3, r7, #8
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	480c      	ldr	r0, [pc, #48]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a6e:	f007 fe23 	bl	80286b8 <HAL_TIM_ConfigClockSource>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d001      	beq.n	8020a7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020a78:	f000 fa02 	bl	8020e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020a80:	2300      	movs	r3, #0
 8020a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020a84:	463b      	mov	r3, r7
 8020a86:	4619      	mov	r1, r3
 8020a88:	4805      	ldr	r0, [pc, #20]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a8a:	f008 f83f 	bl	8028b0c <HAL_TIMEx_MasterConfigSynchronization>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d001      	beq.n	8020a98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020a94:	f000 f9f4 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020a98:	bf00      	nop
 8020a9a:	3718      	adds	r7, #24
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	20000298 	.word	0x20000298
 8020aa4:	40010000 	.word	0x40010000

08020aa8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020aac:	4b11      	ldr	r3, [pc, #68]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020aae:	4a12      	ldr	r2, [pc, #72]	; (8020af8 <MX_UART5_Init+0x50>)
 8020ab0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020ab2:	4b10      	ldr	r3, [pc, #64]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020ab8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aba:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ac0:	4b0c      	ldr	r3, [pc, #48]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020ac6:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac8:	2200      	movs	r2, #0
 8020aca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020acc:	4b09      	ldr	r3, [pc, #36]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ace:	220c      	movs	r2, #12
 8020ad0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020ad2:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020ad8:	4b06      	ldr	r3, [pc, #24]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020ade:	4805      	ldr	r0, [pc, #20]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ae0:	f008 f8a4 	bl	8028c2c <HAL_UART_Init>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020aea:	f000 f9c9 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020aee:	bf00      	nop
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	200002e0 	.word	0x200002e0
 8020af8:	40005000 	.word	0x40005000

08020afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b00:	4b11      	ldr	r3, [pc, #68]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b02:	4a12      	ldr	r2, [pc, #72]	; (8020b4c <MX_USART1_UART_Init+0x50>)
 8020b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b06:	4b10      	ldr	r3, [pc, #64]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b0e:	4b0e      	ldr	r3, [pc, #56]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b14:	4b0c      	ldr	r3, [pc, #48]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b1a:	4b0b      	ldr	r3, [pc, #44]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b20:	4b09      	ldr	r3, [pc, #36]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b22:	220c      	movs	r2, #12
 8020b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b26:	4b08      	ldr	r3, [pc, #32]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b2c:	4b06      	ldr	r3, [pc, #24]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b2e:	2200      	movs	r2, #0
 8020b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b32:	4805      	ldr	r0, [pc, #20]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b34:	f008 f87a 	bl	8028c2c <HAL_UART_Init>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b3e:	f000 f99f 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b42:	bf00      	nop
 8020b44:	bd80      	pop	{r7, pc}
 8020b46:	bf00      	nop
 8020b48:	20000324 	.word	0x20000324
 8020b4c:	40011000 	.word	0x40011000

08020b50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b088      	sub	sp, #32
 8020b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b56:	1d3b      	adds	r3, r7, #4
 8020b58:	2200      	movs	r2, #0
 8020b5a:	601a      	str	r2, [r3, #0]
 8020b5c:	605a      	str	r2, [r3, #4]
 8020b5e:	609a      	str	r2, [r3, #8]
 8020b60:	60da      	str	r2, [r3, #12]
 8020b62:	611a      	str	r2, [r3, #16]
 8020b64:	615a      	str	r2, [r3, #20]
 8020b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b68:	4b1f      	ldr	r3, [pc, #124]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b6a:	4a20      	ldr	r2, [pc, #128]	; (8020bec <MX_FMC_Init+0x9c>)
 8020b6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b6e:	4b1e      	ldr	r3, [pc, #120]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b70:	2201      	movs	r2, #1
 8020b72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b74:	4b1c      	ldr	r3, [pc, #112]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b76:	2200      	movs	r2, #0
 8020b78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020b7a:	4b1b      	ldr	r3, [pc, #108]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b7c:	2204      	movs	r2, #4
 8020b7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020b80:	4b19      	ldr	r3, [pc, #100]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b82:	2210      	movs	r2, #16
 8020b84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020b86:	4b18      	ldr	r3, [pc, #96]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b88:	2240      	movs	r2, #64	; 0x40
 8020b8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020b8c:	4b16      	ldr	r3, [pc, #88]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020b92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020b94:	4b14      	ldr	r3, [pc, #80]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020b9a:	4b13      	ldr	r3, [pc, #76]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ba0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020ba2:	4b11      	ldr	r3, [pc, #68]	; (8020be8 <MX_FMC_Init+0x98>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020ba8:	4b0f      	ldr	r3, [pc, #60]	; (8020be8 <MX_FMC_Init+0x98>)
 8020baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bb0:	2302      	movs	r3, #2
 8020bb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bb4:	2307      	movs	r3, #7
 8020bb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020bb8:	2304      	movs	r3, #4
 8020bba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bbc:	2307      	movs	r3, #7
 8020bbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bc0:	2303      	movs	r3, #3
 8020bc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bc4:	2302      	movs	r3, #2
 8020bc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bc8:	2302      	movs	r3, #2
 8020bca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bcc:	1d3b      	adds	r3, r7, #4
 8020bce:	4619      	mov	r1, r3
 8020bd0:	4805      	ldr	r0, [pc, #20]	; (8020be8 <MX_FMC_Init+0x98>)
 8020bd2:	f006 fd39 	bl	8027648 <HAL_SDRAM_Init>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d001      	beq.n	8020be0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020bdc:	f000 f950 	bl	8020e80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020be0:	bf00      	nop
 8020be2:	3720      	adds	r7, #32
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	20000368 	.word	0x20000368
 8020bec:	a0000140 	.word	0xa0000140

08020bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b08e      	sub	sp, #56	; 0x38
 8020bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	601a      	str	r2, [r3, #0]
 8020bfe:	605a      	str	r2, [r3, #4]
 8020c00:	609a      	str	r2, [r3, #8]
 8020c02:	60da      	str	r2, [r3, #12]
 8020c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c06:	2300      	movs	r3, #0
 8020c08:	623b      	str	r3, [r7, #32]
 8020c0a:	4b85      	ldr	r3, [pc, #532]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0e:	4a84      	ldr	r2, [pc, #528]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c10:	f043 0304 	orr.w	r3, r3, #4
 8020c14:	6313      	str	r3, [r2, #48]	; 0x30
 8020c16:	4b82      	ldr	r3, [pc, #520]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c1a:	f003 0304 	and.w	r3, r3, #4
 8020c1e:	623b      	str	r3, [r7, #32]
 8020c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c22:	2300      	movs	r3, #0
 8020c24:	61fb      	str	r3, [r7, #28]
 8020c26:	4b7e      	ldr	r3, [pc, #504]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c2a:	4a7d      	ldr	r2, [pc, #500]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c2c:	f043 0320 	orr.w	r3, r3, #32
 8020c30:	6313      	str	r3, [r2, #48]	; 0x30
 8020c32:	4b7b      	ldr	r3, [pc, #492]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	f003 0320 	and.w	r3, r3, #32
 8020c3a:	61fb      	str	r3, [r7, #28]
 8020c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c3e:	2300      	movs	r3, #0
 8020c40:	61bb      	str	r3, [r7, #24]
 8020c42:	4b77      	ldr	r3, [pc, #476]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	4a76      	ldr	r2, [pc, #472]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c4e:	4b74      	ldr	r3, [pc, #464]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c56:	61bb      	str	r3, [r7, #24]
 8020c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	617b      	str	r3, [r7, #20]
 8020c5e:	4b70      	ldr	r3, [pc, #448]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	4a6f      	ldr	r2, [pc, #444]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c64:	f043 0301 	orr.w	r3, r3, #1
 8020c68:	6313      	str	r3, [r2, #48]	; 0x30
 8020c6a:	4b6d      	ldr	r3, [pc, #436]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	f003 0301 	and.w	r3, r3, #1
 8020c72:	617b      	str	r3, [r7, #20]
 8020c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c76:	2300      	movs	r3, #0
 8020c78:	613b      	str	r3, [r7, #16]
 8020c7a:	4b69      	ldr	r3, [pc, #420]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7e:	4a68      	ldr	r2, [pc, #416]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c80:	f043 0302 	orr.w	r3, r3, #2
 8020c84:	6313      	str	r3, [r2, #48]	; 0x30
 8020c86:	4b66      	ldr	r3, [pc, #408]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	f003 0302 	and.w	r3, r3, #2
 8020c8e:	613b      	str	r3, [r7, #16]
 8020c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020c92:	2300      	movs	r3, #0
 8020c94:	60fb      	str	r3, [r7, #12]
 8020c96:	4b62      	ldr	r3, [pc, #392]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9a:	4a61      	ldr	r2, [pc, #388]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ca2:	4b5f      	ldr	r3, [pc, #380]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020caa:	60fb      	str	r3, [r7, #12]
 8020cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cae:	2300      	movs	r3, #0
 8020cb0:	60bb      	str	r3, [r7, #8]
 8020cb2:	4b5b      	ldr	r3, [pc, #364]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb6:	4a5a      	ldr	r2, [pc, #360]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb8:	f043 0310 	orr.w	r3, r3, #16
 8020cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cbe:	4b58      	ldr	r3, [pc, #352]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	f003 0310 	and.w	r3, r3, #16
 8020cc6:	60bb      	str	r3, [r7, #8]
 8020cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cca:	2300      	movs	r3, #0
 8020ccc:	607b      	str	r3, [r7, #4]
 8020cce:	4b54      	ldr	r3, [pc, #336]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd2:	4a53      	ldr	r2, [pc, #332]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd4:	f043 0308 	orr.w	r3, r3, #8
 8020cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cda:	4b51      	ldr	r3, [pc, #324]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	f003 0308 	and.w	r3, r3, #8
 8020ce2:	607b      	str	r3, [r7, #4]
 8020ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020ce6:	2200      	movs	r2, #0
 8020ce8:	2116      	movs	r1, #22
 8020cea:	484e      	ldr	r0, [pc, #312]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020cec:	f003 fc16 	bl	802451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	2180      	movs	r1, #128	; 0x80
 8020cf4:	484c      	ldr	r0, [pc, #304]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020cf6:	f003 fc11 	bl	802451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d00:	484a      	ldr	r0, [pc, #296]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020d02:	f003 fc0b 	bl	802451c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d06:	2200      	movs	r2, #0
 8020d08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d0c:	4848      	ldr	r0, [pc, #288]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020d0e:	f003 fc05 	bl	802451c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d12:	2316      	movs	r3, #22
 8020d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d16:	2301      	movs	r3, #1
 8020d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d1e:	2300      	movs	r3, #0
 8020d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d26:	4619      	mov	r1, r3
 8020d28:	483e      	ldr	r0, [pc, #248]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d2a:	f003 f93f 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d2e:	2301      	movs	r3, #1
 8020d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d40:	4619      	mov	r1, r3
 8020d42:	4839      	ldr	r0, [pc, #228]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d44:	f003 f932 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d48:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d54:	2300      	movs	r3, #0
 8020d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4832      	ldr	r0, [pc, #200]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d60:	f003 f924 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d64:	2380      	movs	r3, #128	; 0x80
 8020d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d70:	2300      	movs	r3, #0
 8020d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d78:	4619      	mov	r1, r3
 8020d7a:	482b      	ldr	r0, [pc, #172]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d7c:	f003 f916 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020d80:	2320      	movs	r3, #32
 8020d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d92:	4619      	mov	r1, r3
 8020d94:	4823      	ldr	r0, [pc, #140]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d96:	f003 f909 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020d9a:	2304      	movs	r3, #4
 8020d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020daa:	4619      	mov	r1, r3
 8020dac:	4821      	ldr	r0, [pc, #132]	; (8020e34 <MX_GPIO_Init+0x244>)
 8020dae:	f003 f8fd 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020db8:	2300      	movs	r3, #0
 8020dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	4619      	mov	r1, r3
 8020dc6:	4819      	ldr	r0, [pc, #100]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020dc8:	f003 f8f0 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd6:	2300      	movs	r3, #0
 8020dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de2:	4619      	mov	r1, r3
 8020de4:	4811      	ldr	r0, [pc, #68]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020de6:	f003 f8e1 	bl	8023fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020df0:	2301      	movs	r3, #1
 8020df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020df4:	2300      	movs	r3, #0
 8020df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e00:	4619      	mov	r1, r3
 8020e02:	480b      	ldr	r0, [pc, #44]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020e04:	f003 f8d2 	bl	8023fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e08:	2200      	movs	r2, #0
 8020e0a:	2100      	movs	r1, #0
 8020e0c:	2006      	movs	r0, #6
 8020e0e:	f002 fa9b 	bl	8023348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e12:	2006      	movs	r0, #6
 8020e14:	f002 fab4 	bl	8023380 <HAL_NVIC_EnableIRQ>

}
 8020e18:	bf00      	nop
 8020e1a:	3738      	adds	r7, #56	; 0x38
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}
 8020e20:	40023800 	.word	0x40023800
 8020e24:	40020800 	.word	0x40020800
 8020e28:	40020000 	.word	0x40020000
 8020e2c:	40020c00 	.word	0x40020c00
 8020e30:	40021800 	.word	0x40021800
 8020e34:	40020400 	.word	0x40020400

08020e38 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b082      	sub	sp, #8
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e40:	1d39      	adds	r1, r7, #4
 8020e42:	f04f 33ff 	mov.w	r3, #4294967295
 8020e46:	2201      	movs	r2, #1
 8020e48:	4803      	ldr	r0, [pc, #12]	; (8020e58 <__io_putchar+0x20>)
 8020e4a:	f007 ff3c 	bl	8028cc6 <HAL_UART_Transmit>
	return ch;
 8020e4e:	687b      	ldr	r3, [r7, #4]
}
 8020e50:	4618      	mov	r0, r3
 8020e52:	3708      	adds	r7, #8
 8020e54:	46bd      	mov	sp, r7
 8020e56:	bd80      	pop	{r7, pc}
 8020e58:	20000324 	.word	0x20000324

08020e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d101      	bne.n	8020e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e6e:	f002 f96f 	bl	8023150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e72:	bf00      	nop
 8020e74:	3708      	adds	r7, #8
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	40001000 	.word	0x40001000

08020e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e80:	b480      	push	{r7}
 8020e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e84:	b672      	cpsid	i
}
 8020e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020e88:	e7fe      	b.n	8020e88 <Error_Handler+0x8>
	...

08020e8c <serial_app>:
static void ser_receive_chunk(uint8_t rx_byte);
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e92:	4b16      	ldr	r3, [pc, #88]	; (8020eec <serial_app+0x60>)
 8020e94:	785b      	ldrb	r3, [r3, #1]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d024      	beq.n	8020ee4 <serial_app+0x58>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020e9a:	4b14      	ldr	r3, [pc, #80]	; (8020eec <serial_app+0x60>)
 8020e9c:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e9e:	2b02      	cmp	r3, #2
 8020ea0:	d020      	beq.n	8020ee4 <serial_app+0x58>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	71fb      	strb	r3, [r7, #7]
		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ea6:	4b11      	ldr	r3, [pc, #68]	; (8020eec <serial_app+0x60>)
 8020ea8:	785b      	ldrb	r3, [r3, #1]
 8020eaa:	2b03      	cmp	r3, #3
 8020eac:	d105      	bne.n	8020eba <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020eae:	4810      	ldr	r0, [pc, #64]	; (8020ef0 <serial_app+0x64>)
 8020eb0:	f00c fcd8 	bl	802d864 <puts>
			ret = SER_EX_ERROR;
 8020eb4:	2301      	movs	r3, #1
 8020eb6:	71fb      	strb	r3, [r7, #7]
 8020eb8:	e002      	b.n	8020ec0 <serial_app+0x34>
		}
		else
		{
			printf("Chunk Received!!!\r\n");
 8020eba:	480e      	ldr	r0, [pc, #56]	; (8020ef4 <serial_app+0x68>)
 8020ebc:	f00c fcd2 	bl	802d864 <puts>
			//TODO: Processing data
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020ec0:	79fb      	ldrb	r3, [r7, #7]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d007      	beq.n	8020ed6 <serial_app+0x4a>
			printf("Sending NACK\r\n");
 8020ec6:	480c      	ldr	r0, [pc, #48]	; (8020ef8 <serial_app+0x6c>)
 8020ec8:	f00c fccc 	bl	802d864 <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020ecc:	2101      	movs	r1, #1
 8020ece:	480b      	ldr	r0, [pc, #44]	; (8020efc <serial_app+0x70>)
 8020ed0:	f000 f93c 	bl	802114c <ser_send_resp>
 8020ed4:	e003      	b.n	8020ede <serial_app+0x52>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020ed6:	2100      	movs	r1, #0
 8020ed8:	4808      	ldr	r0, [pc, #32]	; (8020efc <serial_app+0x70>)
 8020eda:	f000 f937 	bl	802114c <ser_send_resp>
		}

		hchunk.chunk_ready = CUN_EMPTY;
 8020ede:	4b03      	ldr	r3, [pc, #12]	; (8020eec <serial_app+0x60>)
 8020ee0:	2200      	movs	r2, #0
 8020ee2:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020ee4:	bf00      	nop
 8020ee6:	3708      	adds	r7, #8
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd80      	pop	{r7, pc}
 8020eec:	20000810 	.word	0x20000810
 8020ef0:	0802e9bc 	.word	0x0802e9bc
 8020ef4:	0802e9d4 	.word	0x0802e9d4
 8020ef8:	0802e9e8 	.word	0x0802e9e8
 8020efc:	200002e0 	.word	0x200002e0

08020f00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b082      	sub	sp, #8
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	4a0f      	ldr	r2, [pc, #60]	; (8020f48 <HAL_UART_RxCpltCallback+0x48>)
 8020f0c:	4293      	cmp	r3, r2
 8020f0e:	d116      	bne.n	8020f3e <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 8020f10:	4b0e      	ldr	r3, [pc, #56]	; (8020f4c <HAL_UART_RxCpltCallback+0x4c>)
 8020f12:	785b      	ldrb	r3, [r3, #1]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d003      	beq.n	8020f20 <HAL_UART_RxCpltCallback+0x20>
 8020f18:	4b0c      	ldr	r3, [pc, #48]	; (8020f4c <HAL_UART_RxCpltCallback+0x4c>)
 8020f1a:	785b      	ldrb	r3, [r3, #1]
 8020f1c:	2b02      	cmp	r3, #2
 8020f1e:	d104      	bne.n	8020f2a <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8020f20:	4b0b      	ldr	r3, [pc, #44]	; (8020f50 <HAL_UART_RxCpltCallback+0x50>)
 8020f22:	781b      	ldrb	r3, [r3, #0]
 8020f24:	4618      	mov	r0, r3
 8020f26:	f000 f815 	bl	8020f54 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 8020f2a:	2202      	movs	r2, #2
 8020f2c:	2100      	movs	r1, #0
 8020f2e:	4808      	ldr	r0, [pc, #32]	; (8020f50 <HAL_UART_RxCpltCallback+0x50>)
 8020f30:	f00c fb2a 	bl	802d588 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8020f34:	2201      	movs	r2, #1
 8020f36:	4906      	ldr	r1, [pc, #24]	; (8020f50 <HAL_UART_RxCpltCallback+0x50>)
 8020f38:	4803      	ldr	r0, [pc, #12]	; (8020f48 <HAL_UART_RxCpltCallback+0x48>)
 8020f3a:	f007 ff56 	bl	8028dea <HAL_UART_Receive_IT>
	}
}
 8020f3e:	bf00      	nop
 8020f40:	3708      	adds	r7, #8
 8020f42:	46bd      	mov	sp, r7
 8020f44:	bd80      	pop	{r7, pc}
 8020f46:	bf00      	nop
 8020f48:	200002e0 	.word	0x200002e0
 8020f4c:	20000810 	.word	0x20000810
 8020f50:	20000400 	.word	0x20000400

08020f54 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8020f54:	b580      	push	{r7, lr}
 8020f56:	b084      	sub	sp, #16
 8020f58:	af00      	add	r7, sp, #0
 8020f5a:	4603      	mov	r3, r0
 8020f5c:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 8020f5e:	2300      	movs	r3, #0
 8020f60:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 8020f62:	4b75      	ldr	r3, [pc, #468]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020f64:	781b      	ldrb	r3, [r3, #0]
 8020f66:	2b05      	cmp	r3, #5
 8020f68:	f200 80e1 	bhi.w	802112e <ser_receive_chunk+0x1da>
 8020f6c:	a201      	add	r2, pc, #4	; (adr r2, 8020f74 <ser_receive_chunk+0x20>)
 8020f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f72:	bf00      	nop
 8020f74:	08020f8d 	.word	0x08020f8d
 8020f78:	08020fd9 	.word	0x08020fd9
 8020f7c:	0802101f 	.word	0x0802101f
 8020f80:	0802105d 	.word	0x0802105d
 8020f84:	08021087 	.word	0x08021087
 8020f88:	080210c3 	.word	0x080210c3

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020f8c:	f240 4209 	movw	r2, #1033	; 0x409
 8020f90:	2100      	movs	r1, #0
 8020f92:	486a      	ldr	r0, [pc, #424]	; (802113c <ser_receive_chunk+0x1e8>)
 8020f94:	f00c faf8 	bl	802d588 <memset>
			hchunk.index 		 = 0u;
 8020f98:	4b67      	ldr	r3, [pc, #412]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020f9a:	2200      	movs	r2, #0
 8020f9c:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 8020f9e:	4b66      	ldr	r3, [pc, #408]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fa0:	2200      	movs	r2, #0
 8020fa2:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 8020fa4:	4b64      	ldr	r3, [pc, #400]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fa6:	2200      	movs	r2, #0
 8020fa8:	80da      	strh	r2, [r3, #6]
 8020faa:	2200      	movs	r2, #0
 8020fac:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 8020fae:	79fb      	ldrb	r3, [r7, #7]
 8020fb0:	2baa      	cmp	r3, #170	; 0xaa
 8020fb2:	f040 80b5 	bne.w	8021120 <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 8020fb6:	4b60      	ldr	r3, [pc, #384]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fb8:	885b      	ldrh	r3, [r3, #2]
 8020fba:	1c5a      	adds	r2, r3, #1
 8020fbc:	b291      	uxth	r1, r2
 8020fbe:	4a5e      	ldr	r2, [pc, #376]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fc0:	8051      	strh	r1, [r2, #2]
 8020fc2:	4619      	mov	r1, r3
 8020fc4:	4a5d      	ldr	r2, [pc, #372]	; (802113c <ser_receive_chunk+0x1e8>)
 8020fc6:	79fb      	ldrb	r3, [r7, #7]
 8020fc8:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 8020fca:	4b5b      	ldr	r3, [pc, #364]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fcc:	2201      	movs	r2, #1
 8020fce:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 8020fd0:	4b59      	ldr	r3, [pc, #356]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fd2:	2202      	movs	r2, #2
 8020fd4:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 8020fd6:	e0a3      	b.n	8021120 <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 8020fd8:	79fb      	ldrb	r3, [r7, #7]
 8020fda:	2baa      	cmp	r3, #170	; 0xaa
 8020fdc:	d111      	bne.n	8021002 <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020fde:	f240 4209 	movw	r2, #1033	; 0x409
 8020fe2:	2100      	movs	r1, #0
 8020fe4:	4855      	ldr	r0, [pc, #340]	; (802113c <ser_receive_chunk+0x1e8>)
 8020fe6:	f00c facf 	bl	802d588 <memset>
				hchunk.index 		 = 0u;
 8020fea:	4b53      	ldr	r3, [pc, #332]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020fec:	2200      	movs	r2, #0
 8020fee:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 8020ff0:	4b51      	ldr	r3, [pc, #324]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 8020ff6:	4b50      	ldr	r3, [pc, #320]	; (8021138 <ser_receive_chunk+0x1e4>)
 8020ff8:	2200      	movs	r2, #0
 8020ffa:	80da      	strh	r2, [r3, #6]
 8020ffc:	2200      	movs	r2, #0
 8020ffe:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 8021000:	e095      	b.n	802112e <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 8021002:	4b4d      	ldr	r3, [pc, #308]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021004:	885b      	ldrh	r3, [r3, #2]
 8021006:	1c5a      	adds	r2, r3, #1
 8021008:	b291      	uxth	r1, r2
 802100a:	4a4b      	ldr	r2, [pc, #300]	; (8021138 <ser_receive_chunk+0x1e4>)
 802100c:	8051      	strh	r1, [r2, #2]
 802100e:	4619      	mov	r1, r3
 8021010:	4a4a      	ldr	r2, [pc, #296]	; (802113c <ser_receive_chunk+0x1e8>)
 8021012:	79fb      	ldrb	r3, [r7, #7]
 8021014:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 8021016:	4b48      	ldr	r3, [pc, #288]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021018:	2202      	movs	r2, #2
 802101a:	701a      	strb	r2, [r3, #0]
		break;
 802101c:	e087      	b.n	802112e <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802101e:	4b46      	ldr	r3, [pc, #280]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021020:	885b      	ldrh	r3, [r3, #2]
 8021022:	1c5a      	adds	r2, r3, #1
 8021024:	b291      	uxth	r1, r2
 8021026:	4a44      	ldr	r2, [pc, #272]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021028:	8051      	strh	r1, [r2, #2]
 802102a:	4619      	mov	r1, r3
 802102c:	4a43      	ldr	r2, [pc, #268]	; (802113c <ser_receive_chunk+0x1e8>)
 802102e:	79fb      	ldrb	r3, [r7, #7]
 8021030:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 8021032:	4b41      	ldr	r3, [pc, #260]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021034:	885b      	ldrh	r3, [r3, #2]
 8021036:	2b03      	cmp	r3, #3
 8021038:	d974      	bls.n	8021124 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 802103a:	4b41      	ldr	r3, [pc, #260]	; (8021140 <ser_receive_chunk+0x1ec>)
 802103c:	881a      	ldrh	r2, [r3, #0]
 802103e:	4b3e      	ldr	r3, [pc, #248]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021040:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 8021042:	4b3d      	ldr	r3, [pc, #244]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021044:	889b      	ldrh	r3, [r3, #4]
 8021046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802104a:	d803      	bhi.n	8021054 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 802104c:	4b3a      	ldr	r3, [pc, #232]	; (8021138 <ser_receive_chunk+0x1e4>)
 802104e:	2203      	movs	r2, #3
 8021050:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021052:	e067      	b.n	8021124 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021054:	4b38      	ldr	r3, [pc, #224]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021056:	2200      	movs	r2, #0
 8021058:	701a      	strb	r2, [r3, #0]
		break;
 802105a:	e063      	b.n	8021124 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802105c:	4b36      	ldr	r3, [pc, #216]	; (8021138 <ser_receive_chunk+0x1e4>)
 802105e:	885b      	ldrh	r3, [r3, #2]
 8021060:	1c5a      	adds	r2, r3, #1
 8021062:	b291      	uxth	r1, r2
 8021064:	4a34      	ldr	r2, [pc, #208]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021066:	8051      	strh	r1, [r2, #2]
 8021068:	4619      	mov	r1, r3
 802106a:	4a34      	ldr	r2, [pc, #208]	; (802113c <ser_receive_chunk+0x1e8>)
 802106c:	79fb      	ldrb	r3, [r7, #7]
 802106e:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 8021070:	4b31      	ldr	r3, [pc, #196]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021072:	889b      	ldrh	r3, [r3, #4]
 8021074:	3303      	adds	r3, #3
 8021076:	4a30      	ldr	r2, [pc, #192]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021078:	8852      	ldrh	r2, [r2, #2]
 802107a:	4293      	cmp	r3, r2
 802107c:	da54      	bge.n	8021128 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 802107e:	4b2e      	ldr	r3, [pc, #184]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021080:	2204      	movs	r2, #4
 8021082:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8021084:	e050      	b.n	8021128 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 8021086:	4b2c      	ldr	r3, [pc, #176]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021088:	885b      	ldrh	r3, [r3, #2]
 802108a:	1c5a      	adds	r2, r3, #1
 802108c:	b291      	uxth	r1, r2
 802108e:	4a2a      	ldr	r2, [pc, #168]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021090:	8051      	strh	r1, [r2, #2]
 8021092:	4619      	mov	r1, r3
 8021094:	4a29      	ldr	r2, [pc, #164]	; (802113c <ser_receive_chunk+0x1e8>)
 8021096:	79fb      	ldrb	r3, [r7, #7]
 8021098:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 802109a:	4b27      	ldr	r3, [pc, #156]	; (8021138 <ser_receive_chunk+0x1e4>)
 802109c:	889b      	ldrh	r3, [r3, #4]
 802109e:	3307      	adds	r3, #7
 80210a0:	4a25      	ldr	r2, [pc, #148]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210a2:	8852      	ldrh	r2, [r2, #2]
 80210a4:	4293      	cmp	r3, r2
 80210a6:	da41      	bge.n	802112c <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 80210a8:	4b23      	ldr	r3, [pc, #140]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210aa:	889b      	ldrh	r3, [r3, #4]
 80210ac:	3304      	adds	r3, #4
 80210ae:	4a23      	ldr	r2, [pc, #140]	; (802113c <ser_receive_chunk+0x1e8>)
 80210b0:	4413      	add	r3, r2
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	4a20      	ldr	r2, [pc, #128]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210b6:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 80210ba:	4b1f      	ldr	r3, [pc, #124]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210bc:	2205      	movs	r2, #5
 80210be:	701a      	strb	r2, [r3, #0]
			}
		break;
 80210c0:	e034      	b.n	802112c <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 80210c2:	4b1d      	ldr	r3, [pc, #116]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210c4:	885b      	ldrh	r3, [r3, #2]
 80210c6:	4619      	mov	r1, r3
 80210c8:	4a1c      	ldr	r2, [pc, #112]	; (802113c <ser_receive_chunk+0x1e8>)
 80210ca:	79fb      	ldrb	r3, [r7, #7]
 80210cc:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 80210ce:	4b1a      	ldr	r3, [pc, #104]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210d0:	2203      	movs	r2, #3
 80210d2:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 80210d4:	4b18      	ldr	r3, [pc, #96]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210d6:	2200      	movs	r2, #0
 80210d8:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 80210da:	4b17      	ldr	r3, [pc, #92]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210dc:	885b      	ldrh	r3, [r3, #2]
 80210de:	461a      	mov	r2, r3
 80210e0:	4b16      	ldr	r3, [pc, #88]	; (802113c <ser_receive_chunk+0x1e8>)
 80210e2:	5c9b      	ldrb	r3, [r3, r2]
 80210e4:	2bbb      	cmp	r3, #187	; 0xbb
 80210e6:	d119      	bne.n	802111c <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 80210e8:	4b13      	ldr	r3, [pc, #76]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210ea:	889b      	ldrh	r3, [r3, #4]
 80210ec:	4619      	mov	r1, r3
 80210ee:	4815      	ldr	r0, [pc, #84]	; (8021144 <ser_receive_chunk+0x1f0>)
 80210f0:	f000 f858 	bl	80211a4 <ser_calcCRC>
 80210f4:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 80210f6:	4b10      	ldr	r3, [pc, #64]	; (8021138 <ser_receive_chunk+0x1e4>)
 80210f8:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80210fc:	68fa      	ldr	r2, [r7, #12]
 80210fe:	429a      	cmp	r2, r3
 8021100:	d008      	beq.n	8021114 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8021102:	4b0d      	ldr	r3, [pc, #52]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021104:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8021108:	461a      	mov	r2, r3
 802110a:	68f9      	ldr	r1, [r7, #12]
 802110c:	480e      	ldr	r0, [pc, #56]	; (8021148 <ser_receive_chunk+0x1f4>)
 802110e:	f00c fb23 	bl	802d758 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 8021112:	e004      	b.n	802111e <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 8021114:	4b08      	ldr	r3, [pc, #32]	; (8021138 <ser_receive_chunk+0x1e4>)
 8021116:	2201      	movs	r2, #1
 8021118:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 802111a:	e008      	b.n	802112e <ser_receive_chunk+0x1da>
					break;
 802111c:	bf00      	nop
		break;
 802111e:	e006      	b.n	802112e <ser_receive_chunk+0x1da>
		break;
 8021120:	bf00      	nop
 8021122:	e004      	b.n	802112e <ser_receive_chunk+0x1da>
		break;
 8021124:	bf00      	nop
 8021126:	e002      	b.n	802112e <ser_receive_chunk+0x1da>
		break;
 8021128:	bf00      	nop
 802112a:	e000      	b.n	802112e <ser_receive_chunk+0x1da>
		break;
 802112c:	bf00      	nop
	}
}
 802112e:	bf00      	nop
 8021130:	3710      	adds	r7, #16
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
 8021136:	bf00      	nop
 8021138:	20000810 	.word	0x20000810
 802113c:	20000404 	.word	0x20000404
 8021140:	20000406 	.word	0x20000406
 8021144:	20000408 	.word	0x20000408
 8021148:	0802e9f8 	.word	0x0802e9f8

0802114c <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 802114c:	b580      	push	{r7, lr}
 802114e:	b086      	sub	sp, #24
 8021150:	af00      	add	r7, sp, #0
 8021152:	6078      	str	r0, [r7, #4]
 8021154:	460b      	mov	r3, r1
 8021156:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 8021158:	f107 030c 	add.w	r3, r7, #12
 802115c:	2200      	movs	r2, #0
 802115e:	601a      	str	r2, [r3, #0]
 8021160:	605a      	str	r2, [r3, #4]
 8021162:	811a      	strh	r2, [r3, #8]
 8021164:	23aa      	movs	r3, #170	; 0xaa
 8021166:	733b      	strb	r3, [r7, #12]
 8021168:	2303      	movs	r3, #3
 802116a:	737b      	strb	r3, [r7, #13]
 802116c:	2301      	movs	r3, #1
 802116e:	81fb      	strh	r3, [r7, #14]
 8021170:	78fb      	ldrb	r3, [r7, #3]
 8021172:	743b      	strb	r3, [r7, #16]
 8021174:	23bb      	movs	r3, #187	; 0xbb
 8021176:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 8021178:	f107 030c 	add.w	r3, r7, #12
 802117c:	3304      	adds	r3, #4
 802117e:	2101      	movs	r1, #1
 8021180:	4618      	mov	r0, r3
 8021182:	f000 f80f 	bl	80211a4 <ser_calcCRC>
 8021186:	4603      	mov	r3, r0
 8021188:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 802118c:	f107 010c 	add.w	r1, r7, #12
 8021190:	f04f 33ff 	mov.w	r3, #4294967295
 8021194:	220a      	movs	r2, #10
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f007 fd95 	bl	8028cc6 <HAL_UART_Transmit>

}
 802119c:	bf00      	nop
 802119e:	3718      	adds	r7, #24
 80211a0:	46bd      	mov	sp, r7
 80211a2:	bd80      	pop	{r7, pc}

080211a4 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80211a4:	b480      	push	{r7}
 80211a6:	b087      	sub	sp, #28
 80211a8:	af00      	add	r7, sp, #0
 80211aa:	6078      	str	r0, [r7, #4]
 80211ac:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80211ae:	f04f 33ff 	mov.w	r3, #4294967295
 80211b2:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80211b4:	2300      	movs	r3, #0
 80211b6:	613b      	str	r3, [r7, #16]
 80211b8:	e014      	b.n	80211e4 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80211ba:	697b      	ldr	r3, [r7, #20]
 80211bc:	0e1b      	lsrs	r3, r3, #24
 80211be:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80211c0:	687a      	ldr	r2, [r7, #4]
 80211c2:	693b      	ldr	r3, [r7, #16]
 80211c4:	4413      	add	r3, r2
 80211c6:	781a      	ldrb	r2, [r3, #0]
 80211c8:	7bfb      	ldrb	r3, [r7, #15]
 80211ca:	4053      	eors	r3, r2
 80211cc:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80211ce:	697b      	ldr	r3, [r7, #20]
 80211d0:	021a      	lsls	r2, r3, #8
 80211d2:	7bfb      	ldrb	r3, [r7, #15]
 80211d4:	4909      	ldr	r1, [pc, #36]	; (80211fc <ser_calcCRC+0x58>)
 80211d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80211da:	4053      	eors	r3, r2
 80211dc:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80211de:	693b      	ldr	r3, [r7, #16]
 80211e0:	3301      	adds	r3, #1
 80211e2:	613b      	str	r3, [r7, #16]
 80211e4:	693a      	ldr	r2, [r7, #16]
 80211e6:	683b      	ldr	r3, [r7, #0]
 80211e8:	429a      	cmp	r2, r3
 80211ea:	d3e6      	bcc.n	80211ba <ser_calcCRC+0x16>
    }
    return Checksum;
 80211ec:	697b      	ldr	r3, [r7, #20]
}
 80211ee:	4618      	mov	r0, r3
 80211f0:	371c      	adds	r7, #28
 80211f2:	46bd      	mov	sp, r7
 80211f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211f8:	4770      	bx	lr
 80211fa:	bf00      	nop
 80211fc:	0802ea40 	.word	0x0802ea40

08021200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021200:	b480      	push	{r7}
 8021202:	b083      	sub	sp, #12
 8021204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021206:	2300      	movs	r3, #0
 8021208:	607b      	str	r3, [r7, #4]
 802120a:	4b10      	ldr	r3, [pc, #64]	; (802124c <HAL_MspInit+0x4c>)
 802120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802120e:	4a0f      	ldr	r2, [pc, #60]	; (802124c <HAL_MspInit+0x4c>)
 8021210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021214:	6453      	str	r3, [r2, #68]	; 0x44
 8021216:	4b0d      	ldr	r3, [pc, #52]	; (802124c <HAL_MspInit+0x4c>)
 8021218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802121e:	607b      	str	r3, [r7, #4]
 8021220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021222:	2300      	movs	r3, #0
 8021224:	603b      	str	r3, [r7, #0]
 8021226:	4b09      	ldr	r3, [pc, #36]	; (802124c <HAL_MspInit+0x4c>)
 8021228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802122a:	4a08      	ldr	r2, [pc, #32]	; (802124c <HAL_MspInit+0x4c>)
 802122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021230:	6413      	str	r3, [r2, #64]	; 0x40
 8021232:	4b06      	ldr	r3, [pc, #24]	; (802124c <HAL_MspInit+0x4c>)
 8021234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802123a:	603b      	str	r3, [r7, #0]
 802123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802123e:	bf00      	nop
 8021240:	370c      	adds	r7, #12
 8021242:	46bd      	mov	sp, r7
 8021244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021248:	4770      	bx	lr
 802124a:	bf00      	nop
 802124c:	40023800 	.word	0x40023800

08021250 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8021250:	b480      	push	{r7}
 8021252:	b085      	sub	sp, #20
 8021254:	af00      	add	r7, sp, #0
 8021256:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	4a0b      	ldr	r2, [pc, #44]	; (802128c <HAL_CRC_MspInit+0x3c>)
 802125e:	4293      	cmp	r3, r2
 8021260:	d10d      	bne.n	802127e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8021262:	2300      	movs	r3, #0
 8021264:	60fb      	str	r3, [r7, #12]
 8021266:	4b0a      	ldr	r3, [pc, #40]	; (8021290 <HAL_CRC_MspInit+0x40>)
 8021268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802126a:	4a09      	ldr	r2, [pc, #36]	; (8021290 <HAL_CRC_MspInit+0x40>)
 802126c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021270:	6313      	str	r3, [r2, #48]	; 0x30
 8021272:	4b07      	ldr	r3, [pc, #28]	; (8021290 <HAL_CRC_MspInit+0x40>)
 8021274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802127a:	60fb      	str	r3, [r7, #12]
 802127c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 802127e:	bf00      	nop
 8021280:	3714      	adds	r7, #20
 8021282:	46bd      	mov	sp, r7
 8021284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021288:	4770      	bx	lr
 802128a:	bf00      	nop
 802128c:	40023000 	.word	0x40023000
 8021290:	40023800 	.word	0x40023800

08021294 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021294:	b580      	push	{r7, lr}
 8021296:	b084      	sub	sp, #16
 8021298:	af00      	add	r7, sp, #0
 802129a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	4a0e      	ldr	r2, [pc, #56]	; (80212dc <HAL_DMA2D_MspInit+0x48>)
 80212a2:	4293      	cmp	r3, r2
 80212a4:	d115      	bne.n	80212d2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80212a6:	2300      	movs	r3, #0
 80212a8:	60fb      	str	r3, [r7, #12]
 80212aa:	4b0d      	ldr	r3, [pc, #52]	; (80212e0 <HAL_DMA2D_MspInit+0x4c>)
 80212ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212ae:	4a0c      	ldr	r2, [pc, #48]	; (80212e0 <HAL_DMA2D_MspInit+0x4c>)
 80212b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80212b4:	6313      	str	r3, [r2, #48]	; 0x30
 80212b6:	4b0a      	ldr	r3, [pc, #40]	; (80212e0 <HAL_DMA2D_MspInit+0x4c>)
 80212b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80212be:	60fb      	str	r3, [r7, #12]
 80212c0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80212c2:	2200      	movs	r2, #0
 80212c4:	2105      	movs	r1, #5
 80212c6:	205a      	movs	r0, #90	; 0x5a
 80212c8:	f002 f83e 	bl	8023348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80212cc:	205a      	movs	r0, #90	; 0x5a
 80212ce:	f002 f857 	bl	8023380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80212d2:	bf00      	nop
 80212d4:	3710      	adds	r7, #16
 80212d6:	46bd      	mov	sp, r7
 80212d8:	bd80      	pop	{r7, pc}
 80212da:	bf00      	nop
 80212dc:	4002b000 	.word	0x4002b000
 80212e0:	40023800 	.word	0x40023800

080212e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80212e4:	b580      	push	{r7, lr}
 80212e6:	b08a      	sub	sp, #40	; 0x28
 80212e8:	af00      	add	r7, sp, #0
 80212ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80212ec:	f107 0314 	add.w	r3, r7, #20
 80212f0:	2200      	movs	r2, #0
 80212f2:	601a      	str	r2, [r3, #0]
 80212f4:	605a      	str	r2, [r3, #4]
 80212f6:	609a      	str	r2, [r3, #8]
 80212f8:	60da      	str	r2, [r3, #12]
 80212fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	4a29      	ldr	r2, [pc, #164]	; (80213a8 <HAL_I2C_MspInit+0xc4>)
 8021302:	4293      	cmp	r3, r2
 8021304:	d14b      	bne.n	802139e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021306:	2300      	movs	r3, #0
 8021308:	613b      	str	r3, [r7, #16]
 802130a:	4b28      	ldr	r3, [pc, #160]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 802130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802130e:	4a27      	ldr	r2, [pc, #156]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021310:	f043 0304 	orr.w	r3, r3, #4
 8021314:	6313      	str	r3, [r2, #48]	; 0x30
 8021316:	4b25      	ldr	r3, [pc, #148]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802131a:	f003 0304 	and.w	r3, r3, #4
 802131e:	613b      	str	r3, [r7, #16]
 8021320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021322:	2300      	movs	r3, #0
 8021324:	60fb      	str	r3, [r7, #12]
 8021326:	4b21      	ldr	r3, [pc, #132]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802132a:	4a20      	ldr	r2, [pc, #128]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 802132c:	f043 0301 	orr.w	r3, r3, #1
 8021330:	6313      	str	r3, [r2, #48]	; 0x30
 8021332:	4b1e      	ldr	r3, [pc, #120]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021336:	f003 0301 	and.w	r3, r3, #1
 802133a:	60fb      	str	r3, [r7, #12]
 802133c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 802133e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021344:	2312      	movs	r3, #18
 8021346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021348:	2301      	movs	r3, #1
 802134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802134c:	2300      	movs	r3, #0
 802134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021350:	2304      	movs	r3, #4
 8021352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021354:	f107 0314 	add.w	r3, r7, #20
 8021358:	4619      	mov	r1, r3
 802135a:	4815      	ldr	r0, [pc, #84]	; (80213b0 <HAL_I2C_MspInit+0xcc>)
 802135c:	f002 fe26 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021366:	2312      	movs	r3, #18
 8021368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802136a:	2301      	movs	r3, #1
 802136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802136e:	2300      	movs	r3, #0
 8021370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021372:	2304      	movs	r3, #4
 8021374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8021376:	f107 0314 	add.w	r3, r7, #20
 802137a:	4619      	mov	r1, r3
 802137c:	480d      	ldr	r0, [pc, #52]	; (80213b4 <HAL_I2C_MspInit+0xd0>)
 802137e:	f002 fe15 	bl	8023fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021382:	2300      	movs	r3, #0
 8021384:	60bb      	str	r3, [r7, #8]
 8021386:	4b09      	ldr	r3, [pc, #36]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802138a:	4a08      	ldr	r2, [pc, #32]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 802138c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021390:	6413      	str	r3, [r2, #64]	; 0x40
 8021392:	4b06      	ldr	r3, [pc, #24]	; (80213ac <HAL_I2C_MspInit+0xc8>)
 8021394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802139a:	60bb      	str	r3, [r7, #8]
 802139c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802139e:	bf00      	nop
 80213a0:	3728      	adds	r7, #40	; 0x28
 80213a2:	46bd      	mov	sp, r7
 80213a4:	bd80      	pop	{r7, pc}
 80213a6:	bf00      	nop
 80213a8:	40005c00 	.word	0x40005c00
 80213ac:	40023800 	.word	0x40023800
 80213b0:	40020800 	.word	0x40020800
 80213b4:	40020000 	.word	0x40020000

080213b8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80213b8:	b580      	push	{r7, lr}
 80213ba:	b09a      	sub	sp, #104	; 0x68
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80213c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80213c4:	2200      	movs	r2, #0
 80213c6:	601a      	str	r2, [r3, #0]
 80213c8:	605a      	str	r2, [r3, #4]
 80213ca:	609a      	str	r2, [r3, #8]
 80213cc:	60da      	str	r2, [r3, #12]
 80213ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80213d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80213d4:	2230      	movs	r2, #48	; 0x30
 80213d6:	2100      	movs	r1, #0
 80213d8:	4618      	mov	r0, r3
 80213da:	f00c f8d5 	bl	802d588 <memset>
  if(hltdc->Instance==LTDC)
 80213de:	687b      	ldr	r3, [r7, #4]
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	4a85      	ldr	r2, [pc, #532]	; (80215f8 <HAL_LTDC_MspInit+0x240>)
 80213e4:	4293      	cmp	r3, r2
 80213e6:	f040 8102 	bne.w	80215ee <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80213ea:	2308      	movs	r3, #8
 80213ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80213ee:	2331      	movs	r3, #49	; 0x31
 80213f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 80213f2:	2302      	movs	r3, #2
 80213f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80213f6:	2300      	movs	r3, #0
 80213f8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80213fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80213fe:	4618      	mov	r0, r3
 8021400:	f005 ff62 	bl	80272c8 <HAL_RCCEx_PeriphCLKConfig>
 8021404:	4603      	mov	r3, r0
 8021406:	2b00      	cmp	r3, #0
 8021408:	d001      	beq.n	802140e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 802140a:	f7ff fd39 	bl	8020e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 802140e:	2300      	movs	r3, #0
 8021410:	623b      	str	r3, [r7, #32]
 8021412:	4b7a      	ldr	r3, [pc, #488]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021416:	4a79      	ldr	r2, [pc, #484]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021418:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802141c:	6453      	str	r3, [r2, #68]	; 0x44
 802141e:	4b77      	ldr	r3, [pc, #476]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021422:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021426:	623b      	str	r3, [r7, #32]
 8021428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802142a:	2300      	movs	r3, #0
 802142c:	61fb      	str	r3, [r7, #28]
 802142e:	4b73      	ldr	r3, [pc, #460]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021432:	4a72      	ldr	r2, [pc, #456]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021434:	f043 0320 	orr.w	r3, r3, #32
 8021438:	6313      	str	r3, [r2, #48]	; 0x30
 802143a:	4b70      	ldr	r3, [pc, #448]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 802143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802143e:	f003 0320 	and.w	r3, r3, #32
 8021442:	61fb      	str	r3, [r7, #28]
 8021444:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021446:	2300      	movs	r3, #0
 8021448:	61bb      	str	r3, [r7, #24]
 802144a:	4b6c      	ldr	r3, [pc, #432]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 802144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802144e:	4a6b      	ldr	r2, [pc, #428]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021450:	f043 0301 	orr.w	r3, r3, #1
 8021454:	6313      	str	r3, [r2, #48]	; 0x30
 8021456:	4b69      	ldr	r3, [pc, #420]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802145a:	f003 0301 	and.w	r3, r3, #1
 802145e:	61bb      	str	r3, [r7, #24]
 8021460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021462:	2300      	movs	r3, #0
 8021464:	617b      	str	r3, [r7, #20]
 8021466:	4b65      	ldr	r3, [pc, #404]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802146a:	4a64      	ldr	r2, [pc, #400]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 802146c:	f043 0302 	orr.w	r3, r3, #2
 8021470:	6313      	str	r3, [r2, #48]	; 0x30
 8021472:	4b62      	ldr	r3, [pc, #392]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021476:	f003 0302 	and.w	r3, r3, #2
 802147a:	617b      	str	r3, [r7, #20]
 802147c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802147e:	2300      	movs	r3, #0
 8021480:	613b      	str	r3, [r7, #16]
 8021482:	4b5e      	ldr	r3, [pc, #376]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021486:	4a5d      	ldr	r2, [pc, #372]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802148c:	6313      	str	r3, [r2, #48]	; 0x30
 802148e:	4b5b      	ldr	r3, [pc, #364]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 8021490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021496:	613b      	str	r3, [r7, #16]
 8021498:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802149a:	2300      	movs	r3, #0
 802149c:	60fb      	str	r3, [r7, #12]
 802149e:	4b57      	ldr	r3, [pc, #348]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214a2:	4a56      	ldr	r2, [pc, #344]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214a4:	f043 0304 	orr.w	r3, r3, #4
 80214a8:	6313      	str	r3, [r2, #48]	; 0x30
 80214aa:	4b54      	ldr	r3, [pc, #336]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ae:	f003 0304 	and.w	r3, r3, #4
 80214b2:	60fb      	str	r3, [r7, #12]
 80214b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80214b6:	2300      	movs	r3, #0
 80214b8:	60bb      	str	r3, [r7, #8]
 80214ba:	4b50      	ldr	r3, [pc, #320]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214be:	4a4f      	ldr	r2, [pc, #316]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214c0:	f043 0308 	orr.w	r3, r3, #8
 80214c4:	6313      	str	r3, [r2, #48]	; 0x30
 80214c6:	4b4d      	ldr	r3, [pc, #308]	; (80215fc <HAL_LTDC_MspInit+0x244>)
 80214c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ca:	f003 0308 	and.w	r3, r3, #8
 80214ce:	60bb      	str	r3, [r7, #8]
 80214d0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80214d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80214d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214d8:	2302      	movs	r3, #2
 80214da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214dc:	2300      	movs	r3, #0
 80214de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80214e0:	2300      	movs	r3, #0
 80214e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80214e4:	230e      	movs	r3, #14
 80214e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80214e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80214ec:	4619      	mov	r1, r3
 80214ee:	4844      	ldr	r0, [pc, #272]	; (8021600 <HAL_LTDC_MspInit+0x248>)
 80214f0:	f002 fd5c 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80214f4:	f641 0358 	movw	r3, #6232	; 0x1858
 80214f8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214fa:	2302      	movs	r3, #2
 80214fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214fe:	2300      	movs	r3, #0
 8021500:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021502:	2300      	movs	r3, #0
 8021504:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021506:	230e      	movs	r3, #14
 8021508:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802150a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802150e:	4619      	mov	r1, r3
 8021510:	483c      	ldr	r0, [pc, #240]	; (8021604 <HAL_LTDC_MspInit+0x24c>)
 8021512:	f002 fd4b 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021516:	2303      	movs	r3, #3
 8021518:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802151a:	2302      	movs	r3, #2
 802151c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802151e:	2300      	movs	r3, #0
 8021520:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021522:	2300      	movs	r3, #0
 8021524:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021526:	2309      	movs	r3, #9
 8021528:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802152a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802152e:	4619      	mov	r1, r3
 8021530:	4835      	ldr	r0, [pc, #212]	; (8021608 <HAL_LTDC_MspInit+0x250>)
 8021532:	f002 fd3b 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021536:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 802153a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802153c:	2302      	movs	r3, #2
 802153e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021540:	2300      	movs	r3, #0
 8021542:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021544:	2300      	movs	r3, #0
 8021546:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021548:	230e      	movs	r3, #14
 802154a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802154c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021550:	4619      	mov	r1, r3
 8021552:	482d      	ldr	r0, [pc, #180]	; (8021608 <HAL_LTDC_MspInit+0x250>)
 8021554:	f002 fd2a 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021558:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 802155c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802155e:	2302      	movs	r3, #2
 8021560:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021562:	2300      	movs	r3, #0
 8021564:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021566:	2300      	movs	r3, #0
 8021568:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802156a:	230e      	movs	r3, #14
 802156c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802156e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021572:	4619      	mov	r1, r3
 8021574:	4825      	ldr	r0, [pc, #148]	; (802160c <HAL_LTDC_MspInit+0x254>)
 8021576:	f002 fd19 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 802157a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 802157e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021580:	2302      	movs	r3, #2
 8021582:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021584:	2300      	movs	r3, #0
 8021586:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021588:	2300      	movs	r3, #0
 802158a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802158c:	230e      	movs	r3, #14
 802158e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021594:	4619      	mov	r1, r3
 8021596:	481e      	ldr	r0, [pc, #120]	; (8021610 <HAL_LTDC_MspInit+0x258>)
 8021598:	f002 fd08 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 802159c:	2348      	movs	r3, #72	; 0x48
 802159e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215a0:	2302      	movs	r3, #2
 80215a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215a4:	2300      	movs	r3, #0
 80215a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215a8:	2300      	movs	r3, #0
 80215aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80215ac:	230e      	movs	r3, #14
 80215ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80215b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80215b4:	4619      	mov	r1, r3
 80215b6:	4817      	ldr	r0, [pc, #92]	; (8021614 <HAL_LTDC_MspInit+0x25c>)
 80215b8:	f002 fcf8 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80215bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80215c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215c2:	2302      	movs	r3, #2
 80215c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215c6:	2300      	movs	r3, #0
 80215c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215ca:	2300      	movs	r3, #0
 80215cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80215ce:	2309      	movs	r3, #9
 80215d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80215d6:	4619      	mov	r1, r3
 80215d8:	480c      	ldr	r0, [pc, #48]	; (802160c <HAL_LTDC_MspInit+0x254>)
 80215da:	f002 fce7 	bl	8023fac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80215de:	2200      	movs	r2, #0
 80215e0:	2105      	movs	r1, #5
 80215e2:	2058      	movs	r0, #88	; 0x58
 80215e4:	f001 feb0 	bl	8023348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80215e8:	2058      	movs	r0, #88	; 0x58
 80215ea:	f001 fec9 	bl	8023380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80215ee:	bf00      	nop
 80215f0:	3768      	adds	r7, #104	; 0x68
 80215f2:	46bd      	mov	sp, r7
 80215f4:	bd80      	pop	{r7, pc}
 80215f6:	bf00      	nop
 80215f8:	40016800 	.word	0x40016800
 80215fc:	40023800 	.word	0x40023800
 8021600:	40021400 	.word	0x40021400
 8021604:	40020000 	.word	0x40020000
 8021608:	40020400 	.word	0x40020400
 802160c:	40021800 	.word	0x40021800
 8021610:	40020800 	.word	0x40020800
 8021614:	40020c00 	.word	0x40020c00

08021618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021618:	b580      	push	{r7, lr}
 802161a:	b08a      	sub	sp, #40	; 0x28
 802161c:	af00      	add	r7, sp, #0
 802161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021620:	f107 0314 	add.w	r3, r7, #20
 8021624:	2200      	movs	r2, #0
 8021626:	601a      	str	r2, [r3, #0]
 8021628:	605a      	str	r2, [r3, #4]
 802162a:	609a      	str	r2, [r3, #8]
 802162c:	60da      	str	r2, [r3, #12]
 802162e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	681b      	ldr	r3, [r3, #0]
 8021634:	4a19      	ldr	r2, [pc, #100]	; (802169c <HAL_SPI_MspInit+0x84>)
 8021636:	4293      	cmp	r3, r2
 8021638:	d12c      	bne.n	8021694 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 802163a:	2300      	movs	r3, #0
 802163c:	613b      	str	r3, [r7, #16]
 802163e:	4b18      	ldr	r3, [pc, #96]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 8021640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021642:	4a17      	ldr	r2, [pc, #92]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 8021644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021648:	6453      	str	r3, [r2, #68]	; 0x44
 802164a:	4b15      	ldr	r3, [pc, #84]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 802164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021652:	613b      	str	r3, [r7, #16]
 8021654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021656:	2300      	movs	r3, #0
 8021658:	60fb      	str	r3, [r7, #12]
 802165a:	4b11      	ldr	r3, [pc, #68]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 802165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802165e:	4a10      	ldr	r2, [pc, #64]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 8021660:	f043 0320 	orr.w	r3, r3, #32
 8021664:	6313      	str	r3, [r2, #48]	; 0x30
 8021666:	4b0e      	ldr	r3, [pc, #56]	; (80216a0 <HAL_SPI_MspInit+0x88>)
 8021668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802166a:	f003 0320 	and.w	r3, r3, #32
 802166e:	60fb      	str	r3, [r7, #12]
 8021670:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021672:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021678:	2302      	movs	r3, #2
 802167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802167c:	2300      	movs	r3, #0
 802167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021680:	2300      	movs	r3, #0
 8021682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021684:	2305      	movs	r3, #5
 8021686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021688:	f107 0314 	add.w	r3, r7, #20
 802168c:	4619      	mov	r1, r3
 802168e:	4805      	ldr	r0, [pc, #20]	; (80216a4 <HAL_SPI_MspInit+0x8c>)
 8021690:	f002 fc8c 	bl	8023fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021694:	bf00      	nop
 8021696:	3728      	adds	r7, #40	; 0x28
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}
 802169c:	40015000 	.word	0x40015000
 80216a0:	40023800 	.word	0x40023800
 80216a4:	40021400 	.word	0x40021400

080216a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	b082      	sub	sp, #8
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	4a08      	ldr	r2, [pc, #32]	; (80216d8 <HAL_SPI_MspDeInit+0x30>)
 80216b6:	4293      	cmp	r3, r2
 80216b8:	d10a      	bne.n	80216d0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80216ba:	4b08      	ldr	r3, [pc, #32]	; (80216dc <HAL_SPI_MspDeInit+0x34>)
 80216bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216be:	4a07      	ldr	r2, [pc, #28]	; (80216dc <HAL_SPI_MspDeInit+0x34>)
 80216c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80216c4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80216c6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80216ca:	4805      	ldr	r0, [pc, #20]	; (80216e0 <HAL_SPI_MspDeInit+0x38>)
 80216cc:	f002 fe1a 	bl	8024304 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80216d0:	bf00      	nop
 80216d2:	3708      	adds	r7, #8
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}
 80216d8:	40015000 	.word	0x40015000
 80216dc:	40023800 	.word	0x40023800
 80216e0:	40021400 	.word	0x40021400

080216e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80216e4:	b480      	push	{r7}
 80216e6:	b085      	sub	sp, #20
 80216e8:	af00      	add	r7, sp, #0
 80216ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	4a0b      	ldr	r2, [pc, #44]	; (8021720 <HAL_TIM_Base_MspInit+0x3c>)
 80216f2:	4293      	cmp	r3, r2
 80216f4:	d10d      	bne.n	8021712 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80216f6:	2300      	movs	r3, #0
 80216f8:	60fb      	str	r3, [r7, #12]
 80216fa:	4b0a      	ldr	r3, [pc, #40]	; (8021724 <HAL_TIM_Base_MspInit+0x40>)
 80216fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216fe:	4a09      	ldr	r2, [pc, #36]	; (8021724 <HAL_TIM_Base_MspInit+0x40>)
 8021700:	f043 0301 	orr.w	r3, r3, #1
 8021704:	6453      	str	r3, [r2, #68]	; 0x44
 8021706:	4b07      	ldr	r3, [pc, #28]	; (8021724 <HAL_TIM_Base_MspInit+0x40>)
 8021708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802170a:	f003 0301 	and.w	r3, r3, #1
 802170e:	60fb      	str	r3, [r7, #12]
 8021710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021712:	bf00      	nop
 8021714:	3714      	adds	r7, #20
 8021716:	46bd      	mov	sp, r7
 8021718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171c:	4770      	bx	lr
 802171e:	bf00      	nop
 8021720:	40010000 	.word	0x40010000
 8021724:	40023800 	.word	0x40023800

08021728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021728:	b580      	push	{r7, lr}
 802172a:	b08c      	sub	sp, #48	; 0x30
 802172c:	af00      	add	r7, sp, #0
 802172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021730:	f107 031c 	add.w	r3, r7, #28
 8021734:	2200      	movs	r2, #0
 8021736:	601a      	str	r2, [r3, #0]
 8021738:	605a      	str	r2, [r3, #4]
 802173a:	609a      	str	r2, [r3, #8]
 802173c:	60da      	str	r2, [r3, #12]
 802173e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	4a46      	ldr	r2, [pc, #280]	; (8021860 <HAL_UART_MspInit+0x138>)
 8021746:	4293      	cmp	r3, r2
 8021748:	d153      	bne.n	80217f2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 802174a:	2300      	movs	r3, #0
 802174c:	61bb      	str	r3, [r7, #24]
 802174e:	4b45      	ldr	r3, [pc, #276]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021752:	4a44      	ldr	r2, [pc, #272]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021758:	6413      	str	r3, [r2, #64]	; 0x40
 802175a:	4b42      	ldr	r3, [pc, #264]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802175e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021762:	61bb      	str	r3, [r7, #24]
 8021764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021766:	2300      	movs	r3, #0
 8021768:	617b      	str	r3, [r7, #20]
 802176a:	4b3e      	ldr	r3, [pc, #248]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176e:	4a3d      	ldr	r2, [pc, #244]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021770:	f043 0304 	orr.w	r3, r3, #4
 8021774:	6313      	str	r3, [r2, #48]	; 0x30
 8021776:	4b3b      	ldr	r3, [pc, #236]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802177a:	f003 0304 	and.w	r3, r3, #4
 802177e:	617b      	str	r3, [r7, #20]
 8021780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021782:	2300      	movs	r3, #0
 8021784:	613b      	str	r3, [r7, #16]
 8021786:	4b37      	ldr	r3, [pc, #220]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802178a:	4a36      	ldr	r2, [pc, #216]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802178c:	f043 0308 	orr.w	r3, r3, #8
 8021790:	6313      	str	r3, [r2, #48]	; 0x30
 8021792:	4b34      	ldr	r3, [pc, #208]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021796:	f003 0308 	and.w	r3, r3, #8
 802179a:	613b      	str	r3, [r7, #16]
 802179c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 802179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80217a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217a4:	2302      	movs	r3, #2
 80217a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217a8:	2300      	movs	r3, #0
 80217aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80217ac:	2303      	movs	r3, #3
 80217ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80217b0:	2308      	movs	r3, #8
 80217b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80217b4:	f107 031c 	add.w	r3, r7, #28
 80217b8:	4619      	mov	r1, r3
 80217ba:	482b      	ldr	r0, [pc, #172]	; (8021868 <HAL_UART_MspInit+0x140>)
 80217bc:	f002 fbf6 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80217c0:	2304      	movs	r3, #4
 80217c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217c4:	2302      	movs	r3, #2
 80217c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217c8:	2300      	movs	r3, #0
 80217ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80217cc:	2303      	movs	r3, #3
 80217ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80217d0:	2308      	movs	r3, #8
 80217d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80217d4:	f107 031c 	add.w	r3, r7, #28
 80217d8:	4619      	mov	r1, r3
 80217da:	4824      	ldr	r0, [pc, #144]	; (802186c <HAL_UART_MspInit+0x144>)
 80217dc:	f002 fbe6 	bl	8023fac <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80217e0:	2200      	movs	r2, #0
 80217e2:	2100      	movs	r1, #0
 80217e4:	2035      	movs	r0, #53	; 0x35
 80217e6:	f001 fdaf 	bl	8023348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80217ea:	2035      	movs	r0, #53	; 0x35
 80217ec:	f001 fdc8 	bl	8023380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80217f0:	e031      	b.n	8021856 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 80217f2:	687b      	ldr	r3, [r7, #4]
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	4a1e      	ldr	r2, [pc, #120]	; (8021870 <HAL_UART_MspInit+0x148>)
 80217f8:	4293      	cmp	r3, r2
 80217fa:	d12c      	bne.n	8021856 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80217fc:	2300      	movs	r3, #0
 80217fe:	60fb      	str	r3, [r7, #12]
 8021800:	4b18      	ldr	r3, [pc, #96]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021804:	4a17      	ldr	r2, [pc, #92]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021806:	f043 0310 	orr.w	r3, r3, #16
 802180a:	6453      	str	r3, [r2, #68]	; 0x44
 802180c:	4b15      	ldr	r3, [pc, #84]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021810:	f003 0310 	and.w	r3, r3, #16
 8021814:	60fb      	str	r3, [r7, #12]
 8021816:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021818:	2300      	movs	r3, #0
 802181a:	60bb      	str	r3, [r7, #8]
 802181c:	4b11      	ldr	r3, [pc, #68]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021820:	4a10      	ldr	r2, [pc, #64]	; (8021864 <HAL_UART_MspInit+0x13c>)
 8021822:	f043 0301 	orr.w	r3, r3, #1
 8021826:	6313      	str	r3, [r2, #48]	; 0x30
 8021828:	4b0e      	ldr	r3, [pc, #56]	; (8021864 <HAL_UART_MspInit+0x13c>)
 802182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802182c:	f003 0301 	and.w	r3, r3, #1
 8021830:	60bb      	str	r3, [r7, #8]
 8021832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021834:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802183a:	2302      	movs	r3, #2
 802183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802183e:	2300      	movs	r3, #0
 8021840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021842:	2303      	movs	r3, #3
 8021844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021846:	2307      	movs	r3, #7
 8021848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802184a:	f107 031c 	add.w	r3, r7, #28
 802184e:	4619      	mov	r1, r3
 8021850:	4808      	ldr	r0, [pc, #32]	; (8021874 <HAL_UART_MspInit+0x14c>)
 8021852:	f002 fbab 	bl	8023fac <HAL_GPIO_Init>
}
 8021856:	bf00      	nop
 8021858:	3730      	adds	r7, #48	; 0x30
 802185a:	46bd      	mov	sp, r7
 802185c:	bd80      	pop	{r7, pc}
 802185e:	bf00      	nop
 8021860:	40005000 	.word	0x40005000
 8021864:	40023800 	.word	0x40023800
 8021868:	40020800 	.word	0x40020800
 802186c:	40020c00 	.word	0x40020c00
 8021870:	40011000 	.word	0x40011000
 8021874:	40020000 	.word	0x40020000

08021878 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021878:	b580      	push	{r7, lr}
 802187a:	b086      	sub	sp, #24
 802187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 802187e:	1d3b      	adds	r3, r7, #4
 8021880:	2200      	movs	r2, #0
 8021882:	601a      	str	r2, [r3, #0]
 8021884:	605a      	str	r2, [r3, #4]
 8021886:	609a      	str	r2, [r3, #8]
 8021888:	60da      	str	r2, [r3, #12]
 802188a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 802188c:	4b3b      	ldr	r3, [pc, #236]	; (802197c <HAL_FMC_MspInit+0x104>)
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	2b00      	cmp	r3, #0
 8021892:	d16f      	bne.n	8021974 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021894:	4b39      	ldr	r3, [pc, #228]	; (802197c <HAL_FMC_MspInit+0x104>)
 8021896:	2201      	movs	r2, #1
 8021898:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 802189a:	2300      	movs	r3, #0
 802189c:	603b      	str	r3, [r7, #0]
 802189e:	4b38      	ldr	r3, [pc, #224]	; (8021980 <HAL_FMC_MspInit+0x108>)
 80218a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218a2:	4a37      	ldr	r2, [pc, #220]	; (8021980 <HAL_FMC_MspInit+0x108>)
 80218a4:	f043 0301 	orr.w	r3, r3, #1
 80218a8:	6393      	str	r3, [r2, #56]	; 0x38
 80218aa:	4b35      	ldr	r3, [pc, #212]	; (8021980 <HAL_FMC_MspInit+0x108>)
 80218ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218ae:	f003 0301 	and.w	r3, r3, #1
 80218b2:	603b      	str	r3, [r7, #0]
 80218b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80218b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80218ba:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218bc:	2302      	movs	r3, #2
 80218be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218c0:	2300      	movs	r3, #0
 80218c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218c4:	2303      	movs	r3, #3
 80218c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80218c8:	230c      	movs	r3, #12
 80218ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80218cc:	1d3b      	adds	r3, r7, #4
 80218ce:	4619      	mov	r1, r3
 80218d0:	482c      	ldr	r0, [pc, #176]	; (8021984 <HAL_FMC_MspInit+0x10c>)
 80218d2:	f002 fb6b 	bl	8023fac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80218d6:	2301      	movs	r3, #1
 80218d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218da:	2302      	movs	r3, #2
 80218dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218de:	2300      	movs	r3, #0
 80218e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218e2:	2303      	movs	r3, #3
 80218e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80218e6:	230c      	movs	r3, #12
 80218e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80218ea:	1d3b      	adds	r3, r7, #4
 80218ec:	4619      	mov	r1, r3
 80218ee:	4826      	ldr	r0, [pc, #152]	; (8021988 <HAL_FMC_MspInit+0x110>)
 80218f0:	f002 fb5c 	bl	8023fac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80218f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80218f8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218fa:	2302      	movs	r3, #2
 80218fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218fe:	2300      	movs	r3, #0
 8021900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021902:	2303      	movs	r3, #3
 8021904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021906:	230c      	movs	r3, #12
 8021908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802190a:	1d3b      	adds	r3, r7, #4
 802190c:	4619      	mov	r1, r3
 802190e:	481f      	ldr	r0, [pc, #124]	; (802198c <HAL_FMC_MspInit+0x114>)
 8021910:	f002 fb4c 	bl	8023fac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021914:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021918:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802191a:	2302      	movs	r3, #2
 802191c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802191e:	2300      	movs	r3, #0
 8021920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021922:	2303      	movs	r3, #3
 8021924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021926:	230c      	movs	r3, #12
 8021928:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802192a:	1d3b      	adds	r3, r7, #4
 802192c:	4619      	mov	r1, r3
 802192e:	4818      	ldr	r0, [pc, #96]	; (8021990 <HAL_FMC_MspInit+0x118>)
 8021930:	f002 fb3c 	bl	8023fac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021934:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021938:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802193a:	2302      	movs	r3, #2
 802193c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802193e:	2300      	movs	r3, #0
 8021940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021942:	2303      	movs	r3, #3
 8021944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021946:	230c      	movs	r3, #12
 8021948:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802194a:	1d3b      	adds	r3, r7, #4
 802194c:	4619      	mov	r1, r3
 802194e:	4811      	ldr	r0, [pc, #68]	; (8021994 <HAL_FMC_MspInit+0x11c>)
 8021950:	f002 fb2c 	bl	8023fac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021954:	2360      	movs	r3, #96	; 0x60
 8021956:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021958:	2302      	movs	r3, #2
 802195a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802195c:	2300      	movs	r3, #0
 802195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021960:	2303      	movs	r3, #3
 8021962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021964:	230c      	movs	r3, #12
 8021966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021968:	1d3b      	adds	r3, r7, #4
 802196a:	4619      	mov	r1, r3
 802196c:	480a      	ldr	r0, [pc, #40]	; (8021998 <HAL_FMC_MspInit+0x120>)
 802196e:	f002 fb1d 	bl	8023fac <HAL_GPIO_Init>
 8021972:	e000      	b.n	8021976 <HAL_FMC_MspInit+0xfe>
    return;
 8021974:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021976:	3718      	adds	r7, #24
 8021978:	46bd      	mov	sp, r7
 802197a:	bd80      	pop	{r7, pc}
 802197c:	2000081c 	.word	0x2000081c
 8021980:	40023800 	.word	0x40023800
 8021984:	40021400 	.word	0x40021400
 8021988:	40020800 	.word	0x40020800
 802198c:	40021800 	.word	0x40021800
 8021990:	40021000 	.word	0x40021000
 8021994:	40020c00 	.word	0x40020c00
 8021998:	40020400 	.word	0x40020400

0802199c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 802199c:	b580      	push	{r7, lr}
 802199e:	b082      	sub	sp, #8
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80219a4:	f7ff ff68 	bl	8021878 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80219a8:	bf00      	nop
 80219aa:	3708      	adds	r7, #8
 80219ac:	46bd      	mov	sp, r7
 80219ae:	bd80      	pop	{r7, pc}

080219b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80219b0:	b580      	push	{r7, lr}
 80219b2:	b08e      	sub	sp, #56	; 0x38
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80219b8:	2300      	movs	r3, #0
 80219ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80219bc:	2300      	movs	r3, #0
 80219be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80219c0:	2300      	movs	r3, #0
 80219c2:	60fb      	str	r3, [r7, #12]
 80219c4:	4b33      	ldr	r3, [pc, #204]	; (8021a94 <HAL_InitTick+0xe4>)
 80219c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219c8:	4a32      	ldr	r2, [pc, #200]	; (8021a94 <HAL_InitTick+0xe4>)
 80219ca:	f043 0310 	orr.w	r3, r3, #16
 80219ce:	6413      	str	r3, [r2, #64]	; 0x40
 80219d0:	4b30      	ldr	r3, [pc, #192]	; (8021a94 <HAL_InitTick+0xe4>)
 80219d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219d4:	f003 0310 	and.w	r3, r3, #16
 80219d8:	60fb      	str	r3, [r7, #12]
 80219da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80219dc:	f107 0210 	add.w	r2, r7, #16
 80219e0:	f107 0314 	add.w	r3, r7, #20
 80219e4:	4611      	mov	r1, r2
 80219e6:	4618      	mov	r0, r3
 80219e8:	f005 fc3c 	bl	8027264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80219ec:	6a3b      	ldr	r3, [r7, #32]
 80219ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80219f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	d103      	bne.n	80219fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80219f6:	f005 fc0d 	bl	8027214 <HAL_RCC_GetPCLK1Freq>
 80219fa:	6378      	str	r0, [r7, #52]	; 0x34
 80219fc:	e004      	b.n	8021a08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80219fe:	f005 fc09 	bl	8027214 <HAL_RCC_GetPCLK1Freq>
 8021a02:	4603      	mov	r3, r0
 8021a04:	005b      	lsls	r3, r3, #1
 8021a06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a0a:	4a23      	ldr	r2, [pc, #140]	; (8021a98 <HAL_InitTick+0xe8>)
 8021a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8021a10:	0c9b      	lsrs	r3, r3, #18
 8021a12:	3b01      	subs	r3, #1
 8021a14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021a16:	4b21      	ldr	r3, [pc, #132]	; (8021a9c <HAL_InitTick+0xec>)
 8021a18:	4a21      	ldr	r2, [pc, #132]	; (8021aa0 <HAL_InitTick+0xf0>)
 8021a1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021a1c:	4b1f      	ldr	r3, [pc, #124]	; (8021a9c <HAL_InitTick+0xec>)
 8021a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021a22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021a24:	4a1d      	ldr	r2, [pc, #116]	; (8021a9c <HAL_InitTick+0xec>)
 8021a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021a2a:	4b1c      	ldr	r3, [pc, #112]	; (8021a9c <HAL_InitTick+0xec>)
 8021a2c:	2200      	movs	r2, #0
 8021a2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021a30:	4b1a      	ldr	r3, [pc, #104]	; (8021a9c <HAL_InitTick+0xec>)
 8021a32:	2200      	movs	r2, #0
 8021a34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021a36:	4b19      	ldr	r3, [pc, #100]	; (8021a9c <HAL_InitTick+0xec>)
 8021a38:	2200      	movs	r2, #0
 8021a3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021a3c:	4817      	ldr	r0, [pc, #92]	; (8021a9c <HAL_InitTick+0xec>)
 8021a3e:	f006 fc73 	bl	8028328 <HAL_TIM_Base_Init>
 8021a42:	4603      	mov	r3, r0
 8021a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d11b      	bne.n	8021a88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021a50:	4812      	ldr	r0, [pc, #72]	; (8021a9c <HAL_InitTick+0xec>)
 8021a52:	f006 fcb9 	bl	80283c8 <HAL_TIM_Base_Start_IT>
 8021a56:	4603      	mov	r3, r0
 8021a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d111      	bne.n	8021a88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021a64:	2036      	movs	r0, #54	; 0x36
 8021a66:	f001 fc8b 	bl	8023380 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	2b0f      	cmp	r3, #15
 8021a6e:	d808      	bhi.n	8021a82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021a70:	2200      	movs	r2, #0
 8021a72:	6879      	ldr	r1, [r7, #4]
 8021a74:	2036      	movs	r0, #54	; 0x36
 8021a76:	f001 fc67 	bl	8023348 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021a7a:	4a0a      	ldr	r2, [pc, #40]	; (8021aa4 <HAL_InitTick+0xf4>)
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	6013      	str	r3, [r2, #0]
 8021a80:	e002      	b.n	8021a88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021a82:	2301      	movs	r3, #1
 8021a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	3738      	adds	r7, #56	; 0x38
 8021a90:	46bd      	mov	sp, r7
 8021a92:	bd80      	pop	{r7, pc}
 8021a94:	40023800 	.word	0x40023800
 8021a98:	431bde83 	.word	0x431bde83
 8021a9c:	20000820 	.word	0x20000820
 8021aa0:	40001000 	.word	0x40001000
 8021aa4:	20000054 	.word	0x20000054

08021aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021aa8:	b480      	push	{r7}
 8021aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021aac:	e7fe      	b.n	8021aac <NMI_Handler+0x4>

08021aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021aae:	b480      	push	{r7}
 8021ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021ab2:	e7fe      	b.n	8021ab2 <HardFault_Handler+0x4>

08021ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021ab4:	b480      	push	{r7}
 8021ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021ab8:	e7fe      	b.n	8021ab8 <MemManage_Handler+0x4>

08021aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021aba:	b480      	push	{r7}
 8021abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021abe:	e7fe      	b.n	8021abe <BusFault_Handler+0x4>

08021ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021ac0:	b480      	push	{r7}
 8021ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021ac4:	e7fe      	b.n	8021ac4 <UsageFault_Handler+0x4>

08021ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021ac6:	b480      	push	{r7}
 8021ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021aca:	bf00      	nop
 8021acc:	46bd      	mov	sp, r7
 8021ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad2:	4770      	bx	lr

08021ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021ad4:	b480      	push	{r7}
 8021ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021ad8:	bf00      	nop
 8021ada:	46bd      	mov	sp, r7
 8021adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ae0:	4770      	bx	lr

08021ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021ae2:	b480      	push	{r7}
 8021ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021ae6:	bf00      	nop
 8021ae8:	46bd      	mov	sp, r7
 8021aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021aee:	4770      	bx	lr

08021af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021af0:	b480      	push	{r7}
 8021af2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021af4:	bf00      	nop
 8021af6:	46bd      	mov	sp, r7
 8021af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021afc:	4770      	bx	lr

08021afe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021afe:	b580      	push	{r7, lr}
 8021b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021b02:	2001      	movs	r0, #1
 8021b04:	f002 fd24 	bl	8024550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021b08:	bf00      	nop
 8021b0a:	bd80      	pop	{r7, pc}

08021b0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8021b10:	4802      	ldr	r0, [pc, #8]	; (8021b1c <UART5_IRQHandler+0x10>)
 8021b12:	f007 f99b 	bl	8028e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8021b16:	bf00      	nop
 8021b18:	bd80      	pop	{r7, pc}
 8021b1a:	bf00      	nop
 8021b1c:	200002e0 	.word	0x200002e0

08021b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021b24:	4802      	ldr	r0, [pc, #8]	; (8021b30 <TIM6_DAC_IRQHandler+0x10>)
 8021b26:	f006 fcbf 	bl	80284a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8021b2a:	bf00      	nop
 8021b2c:	bd80      	pop	{r7, pc}
 8021b2e:	bf00      	nop
 8021b30:	20000820 	.word	0x20000820

08021b34 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021b34:	b580      	push	{r7, lr}
 8021b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021b38:	4802      	ldr	r0, [pc, #8]	; (8021b44 <OTG_HS_IRQHandler+0x10>)
 8021b3a:	f002 ff8b 	bl	8024a54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021b3e:	bf00      	nop
 8021b40:	bd80      	pop	{r7, pc}
 8021b42:	bf00      	nop
 8021b44:	20000ea0 	.word	0x20000ea0

08021b48 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8021b48:	b580      	push	{r7, lr}
 8021b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8021b4c:	4802      	ldr	r0, [pc, #8]	; (8021b58 <LTDC_IRQHandler+0x10>)
 8021b4e:	f004 fbb1 	bl	80262b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8021b52:	bf00      	nop
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	20000198 	.word	0x20000198

08021b5c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8021b60:	4802      	ldr	r0, [pc, #8]	; (8021b6c <DMA2D_IRQHandler+0x10>)
 8021b62:	f001 ffe4 	bl	8023b2e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8021b66:	bf00      	nop
 8021b68:	bd80      	pop	{r7, pc}
 8021b6a:	bf00      	nop
 8021b6c:	20000104 	.word	0x20000104

08021b70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8021b70:	b480      	push	{r7}
 8021b72:	b083      	sub	sp, #12
 8021b74:	af00      	add	r7, sp, #0
 8021b76:	4603      	mov	r3, r0
 8021b78:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8021b7a:	bf00      	nop
 8021b7c:	370c      	adds	r7, #12
 8021b7e:	46bd      	mov	sp, r7
 8021b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b84:	4770      	bx	lr

08021b86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021b86:	b580      	push	{r7, lr}
 8021b88:	b086      	sub	sp, #24
 8021b8a:	af00      	add	r7, sp, #0
 8021b8c:	60f8      	str	r0, [r7, #12]
 8021b8e:	60b9      	str	r1, [r7, #8]
 8021b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021b92:	2300      	movs	r3, #0
 8021b94:	617b      	str	r3, [r7, #20]
 8021b96:	e00a      	b.n	8021bae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021b98:	f3af 8000 	nop.w
 8021b9c:	4601      	mov	r1, r0
 8021b9e:	68bb      	ldr	r3, [r7, #8]
 8021ba0:	1c5a      	adds	r2, r3, #1
 8021ba2:	60ba      	str	r2, [r7, #8]
 8021ba4:	b2ca      	uxtb	r2, r1
 8021ba6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021ba8:	697b      	ldr	r3, [r7, #20]
 8021baa:	3301      	adds	r3, #1
 8021bac:	617b      	str	r3, [r7, #20]
 8021bae:	697a      	ldr	r2, [r7, #20]
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	429a      	cmp	r2, r3
 8021bb4:	dbf0      	blt.n	8021b98 <_read+0x12>
  }

  return len;
 8021bb6:	687b      	ldr	r3, [r7, #4]
}
 8021bb8:	4618      	mov	r0, r3
 8021bba:	3718      	adds	r7, #24
 8021bbc:	46bd      	mov	sp, r7
 8021bbe:	bd80      	pop	{r7, pc}

08021bc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021bc0:	b580      	push	{r7, lr}
 8021bc2:	b086      	sub	sp, #24
 8021bc4:	af00      	add	r7, sp, #0
 8021bc6:	60f8      	str	r0, [r7, #12]
 8021bc8:	60b9      	str	r1, [r7, #8]
 8021bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021bcc:	2300      	movs	r3, #0
 8021bce:	617b      	str	r3, [r7, #20]
 8021bd0:	e009      	b.n	8021be6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021bd2:	68bb      	ldr	r3, [r7, #8]
 8021bd4:	1c5a      	adds	r2, r3, #1
 8021bd6:	60ba      	str	r2, [r7, #8]
 8021bd8:	781b      	ldrb	r3, [r3, #0]
 8021bda:	4618      	mov	r0, r3
 8021bdc:	f7ff f92c 	bl	8020e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021be0:	697b      	ldr	r3, [r7, #20]
 8021be2:	3301      	adds	r3, #1
 8021be4:	617b      	str	r3, [r7, #20]
 8021be6:	697a      	ldr	r2, [r7, #20]
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	429a      	cmp	r2, r3
 8021bec:	dbf1      	blt.n	8021bd2 <_write+0x12>
  }
  return len;
 8021bee:	687b      	ldr	r3, [r7, #4]
}
 8021bf0:	4618      	mov	r0, r3
 8021bf2:	3718      	adds	r7, #24
 8021bf4:	46bd      	mov	sp, r7
 8021bf6:	bd80      	pop	{r7, pc}

08021bf8 <_close>:

int _close(int file)
{
 8021bf8:	b480      	push	{r7}
 8021bfa:	b083      	sub	sp, #12
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8021c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021c04:	4618      	mov	r0, r3
 8021c06:	370c      	adds	r7, #12
 8021c08:	46bd      	mov	sp, r7
 8021c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c0e:	4770      	bx	lr

08021c10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021c10:	b480      	push	{r7}
 8021c12:	b083      	sub	sp, #12
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	6078      	str	r0, [r7, #4]
 8021c18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021c1a:	683b      	ldr	r3, [r7, #0]
 8021c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021c20:	605a      	str	r2, [r3, #4]
  return 0;
 8021c22:	2300      	movs	r3, #0
}
 8021c24:	4618      	mov	r0, r3
 8021c26:	370c      	adds	r7, #12
 8021c28:	46bd      	mov	sp, r7
 8021c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c2e:	4770      	bx	lr

08021c30 <_isatty>:

int _isatty(int file)
{
 8021c30:	b480      	push	{r7}
 8021c32:	b083      	sub	sp, #12
 8021c34:	af00      	add	r7, sp, #0
 8021c36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021c38:	2301      	movs	r3, #1
}
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	370c      	adds	r7, #12
 8021c3e:	46bd      	mov	sp, r7
 8021c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c44:	4770      	bx	lr

08021c46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021c46:	b480      	push	{r7}
 8021c48:	b085      	sub	sp, #20
 8021c4a:	af00      	add	r7, sp, #0
 8021c4c:	60f8      	str	r0, [r7, #12]
 8021c4e:	60b9      	str	r1, [r7, #8]
 8021c50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8021c52:	2300      	movs	r3, #0
}
 8021c54:	4618      	mov	r0, r3
 8021c56:	3714      	adds	r7, #20
 8021c58:	46bd      	mov	sp, r7
 8021c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c5e:	4770      	bx	lr

08021c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021c60:	b580      	push	{r7, lr}
 8021c62:	b086      	sub	sp, #24
 8021c64:	af00      	add	r7, sp, #0
 8021c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021c68:	4a14      	ldr	r2, [pc, #80]	; (8021cbc <_sbrk+0x5c>)
 8021c6a:	4b15      	ldr	r3, [pc, #84]	; (8021cc0 <_sbrk+0x60>)
 8021c6c:	1ad3      	subs	r3, r2, r3
 8021c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021c70:	697b      	ldr	r3, [r7, #20]
 8021c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021c74:	4b13      	ldr	r3, [pc, #76]	; (8021cc4 <_sbrk+0x64>)
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d102      	bne.n	8021c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021c7c:	4b11      	ldr	r3, [pc, #68]	; (8021cc4 <_sbrk+0x64>)
 8021c7e:	4a12      	ldr	r2, [pc, #72]	; (8021cc8 <_sbrk+0x68>)
 8021c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021c82:	4b10      	ldr	r3, [pc, #64]	; (8021cc4 <_sbrk+0x64>)
 8021c84:	681a      	ldr	r2, [r3, #0]
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	4413      	add	r3, r2
 8021c8a:	693a      	ldr	r2, [r7, #16]
 8021c8c:	429a      	cmp	r2, r3
 8021c8e:	d207      	bcs.n	8021ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021c90:	f00b fc40 	bl	802d514 <__errno>
 8021c94:	4603      	mov	r3, r0
 8021c96:	220c      	movs	r2, #12
 8021c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8021c9e:	e009      	b.n	8021cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021ca0:	4b08      	ldr	r3, [pc, #32]	; (8021cc4 <_sbrk+0x64>)
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021ca6:	4b07      	ldr	r3, [pc, #28]	; (8021cc4 <_sbrk+0x64>)
 8021ca8:	681a      	ldr	r2, [r3, #0]
 8021caa:	687b      	ldr	r3, [r7, #4]
 8021cac:	4413      	add	r3, r2
 8021cae:	4a05      	ldr	r2, [pc, #20]	; (8021cc4 <_sbrk+0x64>)
 8021cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021cb2:	68fb      	ldr	r3, [r7, #12]
}
 8021cb4:	4618      	mov	r0, r3
 8021cb6:	3718      	adds	r7, #24
 8021cb8:	46bd      	mov	sp, r7
 8021cba:	bd80      	pop	{r7, pc}
 8021cbc:	20030000 	.word	0x20030000
 8021cc0:	00000400 	.word	0x00000400
 8021cc4:	20000868 	.word	0x20000868
 8021cc8:	200011b8 	.word	0x200011b8

08021ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021ccc:	b480      	push	{r7}
 8021cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021cd0:	4b07      	ldr	r3, [pc, #28]	; (8021cf0 <SystemInit+0x24>)
 8021cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021cd6:	4a06      	ldr	r2, [pc, #24]	; (8021cf0 <SystemInit+0x24>)
 8021cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021ce0:	4b03      	ldr	r3, [pc, #12]	; (8021cf0 <SystemInit+0x24>)
 8021ce2:	4a04      	ldr	r2, [pc, #16]	; (8021cf4 <SystemInit+0x28>)
 8021ce4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021ce6:	bf00      	nop
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cee:	4770      	bx	lr
 8021cf0:	e000ed00 	.word	0xe000ed00
 8021cf4:	08020000 	.word	0x08020000

08021cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8021cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021d30 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021cfc:	480d      	ldr	r0, [pc, #52]	; (8021d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021cfe:	490e      	ldr	r1, [pc, #56]	; (8021d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021d00:	4a0e      	ldr	r2, [pc, #56]	; (8021d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021d04:	e002      	b.n	8021d0c <LoopCopyDataInit>

08021d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021d0a:	3304      	adds	r3, #4

08021d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021d10:	d3f9      	bcc.n	8021d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021d12:	4a0b      	ldr	r2, [pc, #44]	; (8021d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021d14:	4c0b      	ldr	r4, [pc, #44]	; (8021d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021d18:	e001      	b.n	8021d1e <LoopFillZerobss>

08021d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021d1c:	3204      	adds	r2, #4

08021d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021d20:	d3fb      	bcc.n	8021d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8021d22:	f7ff ffd3 	bl	8021ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021d26:	f00b fbfb 	bl	802d520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021d2a:	f7fe fc33 	bl	8020594 <main>
  bx  lr    
 8021d2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8021d30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8021d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021d38:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8021d3c:	08030e34 	.word	0x08030e34
  ldr r2, =_sbss
 8021d40:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8021d44:	200011b4 	.word	0x200011b4

08021d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021d48:	e7fe      	b.n	8021d48 <ADC_IRQHandler>

08021d4a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8021d4a:	b580      	push	{r7, lr}
 8021d4c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8021d4e:	f000 fa5d 	bl	802220c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8021d52:	20ca      	movs	r0, #202	; 0xca
 8021d54:	f000 f95d 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8021d58:	20c3      	movs	r0, #195	; 0xc3
 8021d5a:	f000 f967 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8021d5e:	2008      	movs	r0, #8
 8021d60:	f000 f964 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8021d64:	2050      	movs	r0, #80	; 0x50
 8021d66:	f000 f961 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8021d6a:	20cf      	movs	r0, #207	; 0xcf
 8021d6c:	f000 f951 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021d70:	2000      	movs	r0, #0
 8021d72:	f000 f95b 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8021d76:	20c1      	movs	r0, #193	; 0xc1
 8021d78:	f000 f958 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8021d7c:	2030      	movs	r0, #48	; 0x30
 8021d7e:	f000 f955 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8021d82:	20ed      	movs	r0, #237	; 0xed
 8021d84:	f000 f945 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8021d88:	2064      	movs	r0, #100	; 0x64
 8021d8a:	f000 f94f 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8021d8e:	2003      	movs	r0, #3
 8021d90:	f000 f94c 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8021d94:	2012      	movs	r0, #18
 8021d96:	f000 f949 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8021d9a:	2081      	movs	r0, #129	; 0x81
 8021d9c:	f000 f946 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8021da0:	20e8      	movs	r0, #232	; 0xe8
 8021da2:	f000 f936 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8021da6:	2085      	movs	r0, #133	; 0x85
 8021da8:	f000 f940 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021dac:	2000      	movs	r0, #0
 8021dae:	f000 f93d 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021db2:	2078      	movs	r0, #120	; 0x78
 8021db4:	f000 f93a 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8021db8:	20cb      	movs	r0, #203	; 0xcb
 8021dba:	f000 f92a 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8021dbe:	2039      	movs	r0, #57	; 0x39
 8021dc0:	f000 f934 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8021dc4:	202c      	movs	r0, #44	; 0x2c
 8021dc6:	f000 f931 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021dca:	2000      	movs	r0, #0
 8021dcc:	f000 f92e 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8021dd0:	2034      	movs	r0, #52	; 0x34
 8021dd2:	f000 f92b 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8021dd6:	2002      	movs	r0, #2
 8021dd8:	f000 f928 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8021ddc:	20f7      	movs	r0, #247	; 0xf7
 8021dde:	f000 f918 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8021de2:	2020      	movs	r0, #32
 8021de4:	f000 f922 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8021de8:	20ea      	movs	r0, #234	; 0xea
 8021dea:	f000 f912 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021dee:	2000      	movs	r0, #0
 8021df0:	f000 f91c 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021df4:	2000      	movs	r0, #0
 8021df6:	f000 f919 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8021dfa:	20b1      	movs	r0, #177	; 0xb1
 8021dfc:	f000 f909 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021e00:	2000      	movs	r0, #0
 8021e02:	f000 f913 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021e06:	201b      	movs	r0, #27
 8021e08:	f000 f910 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021e0c:	20b6      	movs	r0, #182	; 0xb6
 8021e0e:	f000 f900 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021e12:	200a      	movs	r0, #10
 8021e14:	f000 f90a 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8021e18:	20a2      	movs	r0, #162	; 0xa2
 8021e1a:	f000 f907 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8021e1e:	20c0      	movs	r0, #192	; 0xc0
 8021e20:	f000 f8f7 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021e24:	2010      	movs	r0, #16
 8021e26:	f000 f901 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8021e2a:	20c1      	movs	r0, #193	; 0xc1
 8021e2c:	f000 f8f1 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021e30:	2010      	movs	r0, #16
 8021e32:	f000 f8fb 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8021e36:	20c5      	movs	r0, #197	; 0xc5
 8021e38:	f000 f8eb 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8021e3c:	2045      	movs	r0, #69	; 0x45
 8021e3e:	f000 f8f5 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8021e42:	2015      	movs	r0, #21
 8021e44:	f000 f8f2 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8021e48:	20c7      	movs	r0, #199	; 0xc7
 8021e4a:	f000 f8e2 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8021e4e:	2090      	movs	r0, #144	; 0x90
 8021e50:	f000 f8ec 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8021e54:	2036      	movs	r0, #54	; 0x36
 8021e56:	f000 f8dc 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8021e5a:	20c8      	movs	r0, #200	; 0xc8
 8021e5c:	f000 f8e6 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8021e60:	20f2      	movs	r0, #242	; 0xf2
 8021e62:	f000 f8d6 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021e66:	2000      	movs	r0, #0
 8021e68:	f000 f8e0 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8021e6c:	20b0      	movs	r0, #176	; 0xb0
 8021e6e:	f000 f8d0 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8021e72:	20c2      	movs	r0, #194	; 0xc2
 8021e74:	f000 f8da 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021e78:	20b6      	movs	r0, #182	; 0xb6
 8021e7a:	f000 f8ca 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021e7e:	200a      	movs	r0, #10
 8021e80:	f000 f8d4 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8021e84:	20a7      	movs	r0, #167	; 0xa7
 8021e86:	f000 f8d1 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8021e8a:	2027      	movs	r0, #39	; 0x27
 8021e8c:	f000 f8ce 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021e90:	2004      	movs	r0, #4
 8021e92:	f000 f8cb 	bl	802202c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8021e96:	202a      	movs	r0, #42	; 0x2a
 8021e98:	f000 f8bb 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021e9c:	2000      	movs	r0, #0
 8021e9e:	f000 f8c5 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ea2:	2000      	movs	r0, #0
 8021ea4:	f000 f8c2 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ea8:	2000      	movs	r0, #0
 8021eaa:	f000 f8bf 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8021eae:	20ef      	movs	r0, #239	; 0xef
 8021eb0:	f000 f8bc 	bl	802202c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8021eb4:	202b      	movs	r0, #43	; 0x2b
 8021eb6:	f000 f8ac 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021eba:	2000      	movs	r0, #0
 8021ebc:	f000 f8b6 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ec0:	2000      	movs	r0, #0
 8021ec2:	f000 f8b3 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8021ec6:	2001      	movs	r0, #1
 8021ec8:	f000 f8b0 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8021ecc:	203f      	movs	r0, #63	; 0x3f
 8021ece:	f000 f8ad 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8021ed2:	20f6      	movs	r0, #246	; 0xf6
 8021ed4:	f000 f89d 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021ed8:	2001      	movs	r0, #1
 8021eda:	f000 f8a7 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ede:	2000      	movs	r0, #0
 8021ee0:	f000 f8a4 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8021ee4:	2006      	movs	r0, #6
 8021ee6:	f000 f8a1 	bl	802202c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8021eea:	202c      	movs	r0, #44	; 0x2c
 8021eec:	f000 f891 	bl	8022012 <ili9341_WriteReg>
  LCD_Delay(200);
 8021ef0:	20c8      	movs	r0, #200	; 0xc8
 8021ef2:	f000 fa79 	bl	80223e8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8021ef6:	2026      	movs	r0, #38	; 0x26
 8021ef8:	f000 f88b 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021efc:	2001      	movs	r0, #1
 8021efe:	f000 f895 	bl	802202c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8021f02:	20e0      	movs	r0, #224	; 0xe0
 8021f04:	f000 f885 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8021f08:	200f      	movs	r0, #15
 8021f0a:	f000 f88f 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8021f0e:	2029      	movs	r0, #41	; 0x29
 8021f10:	f000 f88c 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8021f14:	2024      	movs	r0, #36	; 0x24
 8021f16:	f000 f889 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021f1a:	200c      	movs	r0, #12
 8021f1c:	f000 f886 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8021f20:	200e      	movs	r0, #14
 8021f22:	f000 f883 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021f26:	2009      	movs	r0, #9
 8021f28:	f000 f880 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8021f2c:	204e      	movs	r0, #78	; 0x4e
 8021f2e:	f000 f87d 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021f32:	2078      	movs	r0, #120	; 0x78
 8021f34:	f000 f87a 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8021f38:	203c      	movs	r0, #60	; 0x3c
 8021f3a:	f000 f877 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021f3e:	2009      	movs	r0, #9
 8021f40:	f000 f874 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8021f44:	2013      	movs	r0, #19
 8021f46:	f000 f871 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021f4a:	2005      	movs	r0, #5
 8021f4c:	f000 f86e 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8021f50:	2017      	movs	r0, #23
 8021f52:	f000 f86b 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021f56:	2011      	movs	r0, #17
 8021f58:	f000 f868 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021f5c:	2000      	movs	r0, #0
 8021f5e:	f000 f865 	bl	802202c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8021f62:	20e1      	movs	r0, #225	; 0xe1
 8021f64:	f000 f855 	bl	8022012 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021f68:	2000      	movs	r0, #0
 8021f6a:	f000 f85f 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8021f6e:	2016      	movs	r0, #22
 8021f70:	f000 f85c 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021f74:	201b      	movs	r0, #27
 8021f76:	f000 f859 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021f7a:	2004      	movs	r0, #4
 8021f7c:	f000 f856 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021f80:	2011      	movs	r0, #17
 8021f82:	f000 f853 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8021f86:	2007      	movs	r0, #7
 8021f88:	f000 f850 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8021f8c:	2031      	movs	r0, #49	; 0x31
 8021f8e:	f000 f84d 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8021f92:	2033      	movs	r0, #51	; 0x33
 8021f94:	f000 f84a 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8021f98:	2042      	movs	r0, #66	; 0x42
 8021f9a:	f000 f847 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021f9e:	2005      	movs	r0, #5
 8021fa0:	f000 f844 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021fa4:	200c      	movs	r0, #12
 8021fa6:	f000 f841 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8021faa:	200a      	movs	r0, #10
 8021fac:	f000 f83e 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8021fb0:	2028      	movs	r0, #40	; 0x28
 8021fb2:	f000 f83b 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8021fb6:	202f      	movs	r0, #47	; 0x2f
 8021fb8:	f000 f838 	bl	802202c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8021fbc:	200f      	movs	r0, #15
 8021fbe:	f000 f835 	bl	802202c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8021fc2:	2011      	movs	r0, #17
 8021fc4:	f000 f825 	bl	8022012 <ili9341_WriteReg>
  LCD_Delay(200);
 8021fc8:	20c8      	movs	r0, #200	; 0xc8
 8021fca:	f000 fa0d 	bl	80223e8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021fce:	2029      	movs	r0, #41	; 0x29
 8021fd0:	f000 f81f 	bl	8022012 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8021fd4:	202c      	movs	r0, #44	; 0x2c
 8021fd6:	f000 f81c 	bl	8022012 <ili9341_WriteReg>
}
 8021fda:	bf00      	nop
 8021fdc:	bd80      	pop	{r7, pc}

08021fde <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8021fde:	b580      	push	{r7, lr}
 8021fe0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8021fe2:	f000 f913 	bl	802220c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8021fe6:	2103      	movs	r1, #3
 8021fe8:	20d3      	movs	r0, #211	; 0xd3
 8021fea:	f000 f82c 	bl	8022046 <ili9341_ReadData>
 8021fee:	4603      	mov	r3, r0
 8021ff0:	b29b      	uxth	r3, r3
}
 8021ff2:	4618      	mov	r0, r3
 8021ff4:	bd80      	pop	{r7, pc}

08021ff6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8021ff6:	b580      	push	{r7, lr}
 8021ff8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021ffa:	2029      	movs	r0, #41	; 0x29
 8021ffc:	f000 f809 	bl	8022012 <ili9341_WriteReg>
}
 8022000:	bf00      	nop
 8022002:	bd80      	pop	{r7, pc}

08022004 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8022004:	b580      	push	{r7, lr}
 8022006:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8022008:	2028      	movs	r0, #40	; 0x28
 802200a:	f000 f802 	bl	8022012 <ili9341_WriteReg>
}
 802200e:	bf00      	nop
 8022010:	bd80      	pop	{r7, pc}

08022012 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8022012:	b580      	push	{r7, lr}
 8022014:	b082      	sub	sp, #8
 8022016:	af00      	add	r7, sp, #0
 8022018:	4603      	mov	r3, r0
 802201a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 802201c:	79fb      	ldrb	r3, [r7, #7]
 802201e:	4618      	mov	r0, r3
 8022020:	f000 f98e 	bl	8022340 <LCD_IO_WriteReg>
}
 8022024:	bf00      	nop
 8022026:	3708      	adds	r7, #8
 8022028:	46bd      	mov	sp, r7
 802202a:	bd80      	pop	{r7, pc}

0802202c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 802202c:	b580      	push	{r7, lr}
 802202e:	b082      	sub	sp, #8
 8022030:	af00      	add	r7, sp, #0
 8022032:	4603      	mov	r3, r0
 8022034:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8022036:	88fb      	ldrh	r3, [r7, #6]
 8022038:	4618      	mov	r0, r3
 802203a:	f000 f95f 	bl	80222fc <LCD_IO_WriteData>
}
 802203e:	bf00      	nop
 8022040:	3708      	adds	r7, #8
 8022042:	46bd      	mov	sp, r7
 8022044:	bd80      	pop	{r7, pc}

08022046 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8022046:	b580      	push	{r7, lr}
 8022048:	b082      	sub	sp, #8
 802204a:	af00      	add	r7, sp, #0
 802204c:	4603      	mov	r3, r0
 802204e:	460a      	mov	r2, r1
 8022050:	80fb      	strh	r3, [r7, #6]
 8022052:	4613      	mov	r3, r2
 8022054:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8022056:	797a      	ldrb	r2, [r7, #5]
 8022058:	88fb      	ldrh	r3, [r7, #6]
 802205a:	4611      	mov	r1, r2
 802205c:	4618      	mov	r0, r3
 802205e:	f000 f991 	bl	8022384 <LCD_IO_ReadData>
 8022062:	4603      	mov	r3, r0
}
 8022064:	4618      	mov	r0, r3
 8022066:	3708      	adds	r7, #8
 8022068:	46bd      	mov	sp, r7
 802206a:	bd80      	pop	{r7, pc}

0802206c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 802206c:	b480      	push	{r7}
 802206e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8022070:	23f0      	movs	r3, #240	; 0xf0
}
 8022072:	4618      	mov	r0, r3
 8022074:	46bd      	mov	sp, r7
 8022076:	f85d 7b04 	ldr.w	r7, [sp], #4
 802207a:	4770      	bx	lr

0802207c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 802207c:	b480      	push	{r7}
 802207e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8022080:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8022084:	4618      	mov	r0, r3
 8022086:	46bd      	mov	sp, r7
 8022088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802208c:	4770      	bx	lr
	...

08022090 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8022090:	b580      	push	{r7, lr}
 8022092:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8022094:	4819      	ldr	r0, [pc, #100]	; (80220fc <SPIx_Init+0x6c>)
 8022096:	f006 f808 	bl	80280aa <HAL_SPI_GetState>
 802209a:	4603      	mov	r3, r0
 802209c:	2b00      	cmp	r3, #0
 802209e:	d12b      	bne.n	80220f8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80220a0:	4b16      	ldr	r3, [pc, #88]	; (80220fc <SPIx_Init+0x6c>)
 80220a2:	4a17      	ldr	r2, [pc, #92]	; (8022100 <SPIx_Init+0x70>)
 80220a4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80220a6:	4b15      	ldr	r3, [pc, #84]	; (80220fc <SPIx_Init+0x6c>)
 80220a8:	2218      	movs	r2, #24
 80220aa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80220ac:	4b13      	ldr	r3, [pc, #76]	; (80220fc <SPIx_Init+0x6c>)
 80220ae:	2200      	movs	r2, #0
 80220b0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80220b2:	4b12      	ldr	r3, [pc, #72]	; (80220fc <SPIx_Init+0x6c>)
 80220b4:	2200      	movs	r2, #0
 80220b6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80220b8:	4b10      	ldr	r3, [pc, #64]	; (80220fc <SPIx_Init+0x6c>)
 80220ba:	2200      	movs	r2, #0
 80220bc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80220be:	4b0f      	ldr	r3, [pc, #60]	; (80220fc <SPIx_Init+0x6c>)
 80220c0:	2200      	movs	r2, #0
 80220c2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80220c4:	4b0d      	ldr	r3, [pc, #52]	; (80220fc <SPIx_Init+0x6c>)
 80220c6:	2207      	movs	r2, #7
 80220c8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80220ca:	4b0c      	ldr	r3, [pc, #48]	; (80220fc <SPIx_Init+0x6c>)
 80220cc:	2200      	movs	r2, #0
 80220ce:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80220d0:	4b0a      	ldr	r3, [pc, #40]	; (80220fc <SPIx_Init+0x6c>)
 80220d2:	2200      	movs	r2, #0
 80220d4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80220d6:	4b09      	ldr	r3, [pc, #36]	; (80220fc <SPIx_Init+0x6c>)
 80220d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80220dc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80220de:	4b07      	ldr	r3, [pc, #28]	; (80220fc <SPIx_Init+0x6c>)
 80220e0:	2200      	movs	r2, #0
 80220e2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80220e4:	4b05      	ldr	r3, [pc, #20]	; (80220fc <SPIx_Init+0x6c>)
 80220e6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80220ea:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80220ec:	4803      	ldr	r0, [pc, #12]	; (80220fc <SPIx_Init+0x6c>)
 80220ee:	f000 f853 	bl	8022198 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80220f2:	4802      	ldr	r0, [pc, #8]	; (80220fc <SPIx_Init+0x6c>)
 80220f4:	f005 fb39 	bl	802776a <HAL_SPI_Init>
  } 
}
 80220f8:	bf00      	nop
 80220fa:	bd80      	pop	{r7, pc}
 80220fc:	2000086c 	.word	0x2000086c
 8022100:	40015000 	.word	0x40015000

08022104 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8022104:	b580      	push	{r7, lr}
 8022106:	b084      	sub	sp, #16
 8022108:	af00      	add	r7, sp, #0
 802210a:	4603      	mov	r3, r0
 802210c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 802210e:	2300      	movs	r3, #0
 8022110:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8022112:	79fb      	ldrb	r3, [r7, #7]
 8022114:	b29a      	uxth	r2, r3
 8022116:	4b09      	ldr	r3, [pc, #36]	; (802213c <SPIx_Read+0x38>)
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	f107 0108 	add.w	r1, r7, #8
 802211e:	4808      	ldr	r0, [pc, #32]	; (8022140 <SPIx_Read+0x3c>)
 8022120:	f005 fd10 	bl	8027b44 <HAL_SPI_Receive>
 8022124:	4603      	mov	r3, r0
 8022126:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022128:	7bfb      	ldrb	r3, [r7, #15]
 802212a:	2b00      	cmp	r3, #0
 802212c:	d001      	beq.n	8022132 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802212e:	f000 f827 	bl	8022180 <SPIx_Error>
  }
  
  return readvalue;
 8022132:	68bb      	ldr	r3, [r7, #8]
}
 8022134:	4618      	mov	r0, r3
 8022136:	3710      	adds	r7, #16
 8022138:	46bd      	mov	sp, r7
 802213a:	bd80      	pop	{r7, pc}
 802213c:	2000003c 	.word	0x2000003c
 8022140:	2000086c 	.word	0x2000086c

08022144 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8022144:	b580      	push	{r7, lr}
 8022146:	b084      	sub	sp, #16
 8022148:	af00      	add	r7, sp, #0
 802214a:	4603      	mov	r3, r0
 802214c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 802214e:	2300      	movs	r3, #0
 8022150:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8022152:	4b09      	ldr	r3, [pc, #36]	; (8022178 <SPIx_Write+0x34>)
 8022154:	681b      	ldr	r3, [r3, #0]
 8022156:	1db9      	adds	r1, r7, #6
 8022158:	2201      	movs	r2, #1
 802215a:	4808      	ldr	r0, [pc, #32]	; (802217c <SPIx_Write+0x38>)
 802215c:	f005 fbb6 	bl	80278cc <HAL_SPI_Transmit>
 8022160:	4603      	mov	r3, r0
 8022162:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022164:	7bfb      	ldrb	r3, [r7, #15]
 8022166:	2b00      	cmp	r3, #0
 8022168:	d001      	beq.n	802216e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802216a:	f000 f809 	bl	8022180 <SPIx_Error>
  }
}
 802216e:	bf00      	nop
 8022170:	3710      	adds	r7, #16
 8022172:	46bd      	mov	sp, r7
 8022174:	bd80      	pop	{r7, pc}
 8022176:	bf00      	nop
 8022178:	2000003c 	.word	0x2000003c
 802217c:	2000086c 	.word	0x2000086c

08022180 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8022180:	b580      	push	{r7, lr}
 8022182:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8022184:	4803      	ldr	r0, [pc, #12]	; (8022194 <SPIx_Error+0x14>)
 8022186:	f005 fb79 	bl	802787c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 802218a:	f7ff ff81 	bl	8022090 <SPIx_Init>
}
 802218e:	bf00      	nop
 8022190:	bd80      	pop	{r7, pc}
 8022192:	bf00      	nop
 8022194:	2000086c 	.word	0x2000086c

08022198 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8022198:	b580      	push	{r7, lr}
 802219a:	b08a      	sub	sp, #40	; 0x28
 802219c:	af00      	add	r7, sp, #0
 802219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80221a0:	2300      	movs	r3, #0
 80221a2:	613b      	str	r3, [r7, #16]
 80221a4:	4b17      	ldr	r3, [pc, #92]	; (8022204 <SPIx_MspInit+0x6c>)
 80221a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221a8:	4a16      	ldr	r2, [pc, #88]	; (8022204 <SPIx_MspInit+0x6c>)
 80221aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80221ae:	6453      	str	r3, [r2, #68]	; 0x44
 80221b0:	4b14      	ldr	r3, [pc, #80]	; (8022204 <SPIx_MspInit+0x6c>)
 80221b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80221b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80221b8:	613b      	str	r3, [r7, #16]
 80221ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80221bc:	2300      	movs	r3, #0
 80221be:	60fb      	str	r3, [r7, #12]
 80221c0:	4b10      	ldr	r3, [pc, #64]	; (8022204 <SPIx_MspInit+0x6c>)
 80221c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221c4:	4a0f      	ldr	r2, [pc, #60]	; (8022204 <SPIx_MspInit+0x6c>)
 80221c6:	f043 0320 	orr.w	r3, r3, #32
 80221ca:	6313      	str	r3, [r2, #48]	; 0x30
 80221cc:	4b0d      	ldr	r3, [pc, #52]	; (8022204 <SPIx_MspInit+0x6c>)
 80221ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221d0:	f003 0320 	and.w	r3, r3, #32
 80221d4:	60fb      	str	r3, [r7, #12]
 80221d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80221d8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80221dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80221de:	2302      	movs	r3, #2
 80221e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80221e2:	2302      	movs	r3, #2
 80221e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80221e6:	2301      	movs	r3, #1
 80221e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80221ea:	2305      	movs	r3, #5
 80221ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80221ee:	f107 0314 	add.w	r3, r7, #20
 80221f2:	4619      	mov	r1, r3
 80221f4:	4804      	ldr	r0, [pc, #16]	; (8022208 <SPIx_MspInit+0x70>)
 80221f6:	f001 fed9 	bl	8023fac <HAL_GPIO_Init>
}
 80221fa:	bf00      	nop
 80221fc:	3728      	adds	r7, #40	; 0x28
 80221fe:	46bd      	mov	sp, r7
 8022200:	bd80      	pop	{r7, pc}
 8022202:	bf00      	nop
 8022204:	40023800 	.word	0x40023800
 8022208:	40021400 	.word	0x40021400

0802220c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 802220c:	b580      	push	{r7, lr}
 802220e:	b088      	sub	sp, #32
 8022210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8022212:	4b36      	ldr	r3, [pc, #216]	; (80222ec <LCD_IO_Init+0xe0>)
 8022214:	781b      	ldrb	r3, [r3, #0]
 8022216:	2b00      	cmp	r3, #0
 8022218:	d164      	bne.n	80222e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 802221a:	4b34      	ldr	r3, [pc, #208]	; (80222ec <LCD_IO_Init+0xe0>)
 802221c:	2201      	movs	r2, #1
 802221e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8022220:	2300      	movs	r3, #0
 8022222:	60bb      	str	r3, [r7, #8]
 8022224:	4b32      	ldr	r3, [pc, #200]	; (80222f0 <LCD_IO_Init+0xe4>)
 8022226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022228:	4a31      	ldr	r2, [pc, #196]	; (80222f0 <LCD_IO_Init+0xe4>)
 802222a:	f043 0308 	orr.w	r3, r3, #8
 802222e:	6313      	str	r3, [r2, #48]	; 0x30
 8022230:	4b2f      	ldr	r3, [pc, #188]	; (80222f0 <LCD_IO_Init+0xe4>)
 8022232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022234:	f003 0308 	and.w	r3, r3, #8
 8022238:	60bb      	str	r3, [r7, #8]
 802223a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 802223c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022242:	2301      	movs	r3, #1
 8022244:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022246:	2300      	movs	r3, #0
 8022248:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802224a:	2302      	movs	r3, #2
 802224c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 802224e:	f107 030c 	add.w	r3, r7, #12
 8022252:	4619      	mov	r1, r3
 8022254:	4827      	ldr	r0, [pc, #156]	; (80222f4 <LCD_IO_Init+0xe8>)
 8022256:	f001 fea9 	bl	8023fac <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 802225a:	2300      	movs	r3, #0
 802225c:	607b      	str	r3, [r7, #4]
 802225e:	4b24      	ldr	r3, [pc, #144]	; (80222f0 <LCD_IO_Init+0xe4>)
 8022260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022262:	4a23      	ldr	r2, [pc, #140]	; (80222f0 <LCD_IO_Init+0xe4>)
 8022264:	f043 0308 	orr.w	r3, r3, #8
 8022268:	6313      	str	r3, [r2, #48]	; 0x30
 802226a:	4b21      	ldr	r3, [pc, #132]	; (80222f0 <LCD_IO_Init+0xe4>)
 802226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802226e:	f003 0308 	and.w	r3, r3, #8
 8022272:	607b      	str	r3, [r7, #4]
 8022274:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8022276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802227a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 802227c:	2301      	movs	r3, #1
 802227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022280:	2300      	movs	r3, #0
 8022282:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022284:	2302      	movs	r3, #2
 8022286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8022288:	f107 030c 	add.w	r3, r7, #12
 802228c:	4619      	mov	r1, r3
 802228e:	4819      	ldr	r0, [pc, #100]	; (80222f4 <LCD_IO_Init+0xe8>)
 8022290:	f001 fe8c 	bl	8023fac <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8022294:	2300      	movs	r3, #0
 8022296:	603b      	str	r3, [r7, #0]
 8022298:	4b15      	ldr	r3, [pc, #84]	; (80222f0 <LCD_IO_Init+0xe4>)
 802229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802229c:	4a14      	ldr	r2, [pc, #80]	; (80222f0 <LCD_IO_Init+0xe4>)
 802229e:	f043 0304 	orr.w	r3, r3, #4
 80222a2:	6313      	str	r3, [r2, #48]	; 0x30
 80222a4:	4b12      	ldr	r3, [pc, #72]	; (80222f0 <LCD_IO_Init+0xe4>)
 80222a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222a8:	f003 0304 	and.w	r3, r3, #4
 80222ac:	603b      	str	r3, [r7, #0]
 80222ae:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80222b0:	2304      	movs	r3, #4
 80222b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80222b4:	2301      	movs	r3, #1
 80222b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80222b8:	2300      	movs	r3, #0
 80222ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80222bc:	2302      	movs	r3, #2
 80222be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80222c0:	f107 030c 	add.w	r3, r7, #12
 80222c4:	4619      	mov	r1, r3
 80222c6:	480c      	ldr	r0, [pc, #48]	; (80222f8 <LCD_IO_Init+0xec>)
 80222c8:	f001 fe70 	bl	8023fac <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80222cc:	2200      	movs	r2, #0
 80222ce:	2104      	movs	r1, #4
 80222d0:	4809      	ldr	r0, [pc, #36]	; (80222f8 <LCD_IO_Init+0xec>)
 80222d2:	f002 f923 	bl	802451c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80222d6:	2201      	movs	r2, #1
 80222d8:	2104      	movs	r1, #4
 80222da:	4807      	ldr	r0, [pc, #28]	; (80222f8 <LCD_IO_Init+0xec>)
 80222dc:	f002 f91e 	bl	802451c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80222e0:	f7ff fed6 	bl	8022090 <SPIx_Init>
  }
}
 80222e4:	bf00      	nop
 80222e6:	3720      	adds	r7, #32
 80222e8:	46bd      	mov	sp, r7
 80222ea:	bd80      	pop	{r7, pc}
 80222ec:	200008c4 	.word	0x200008c4
 80222f0:	40023800 	.word	0x40023800
 80222f4:	40020c00 	.word	0x40020c00
 80222f8:	40020800 	.word	0x40020800

080222fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b082      	sub	sp, #8
 8022300:	af00      	add	r7, sp, #0
 8022302:	4603      	mov	r3, r0
 8022304:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022306:	2201      	movs	r2, #1
 8022308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802230c:	480a      	ldr	r0, [pc, #40]	; (8022338 <LCD_IO_WriteData+0x3c>)
 802230e:	f002 f905 	bl	802451c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8022312:	2200      	movs	r2, #0
 8022314:	2104      	movs	r1, #4
 8022316:	4809      	ldr	r0, [pc, #36]	; (802233c <LCD_IO_WriteData+0x40>)
 8022318:	f002 f900 	bl	802451c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 802231c:	88fb      	ldrh	r3, [r7, #6]
 802231e:	4618      	mov	r0, r3
 8022320:	f7ff ff10 	bl	8022144 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022324:	2201      	movs	r2, #1
 8022326:	2104      	movs	r1, #4
 8022328:	4804      	ldr	r0, [pc, #16]	; (802233c <LCD_IO_WriteData+0x40>)
 802232a:	f002 f8f7 	bl	802451c <HAL_GPIO_WritePin>
}
 802232e:	bf00      	nop
 8022330:	3708      	adds	r7, #8
 8022332:	46bd      	mov	sp, r7
 8022334:	bd80      	pop	{r7, pc}
 8022336:	bf00      	nop
 8022338:	40020c00 	.word	0x40020c00
 802233c:	40020800 	.word	0x40020800

08022340 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8022340:	b580      	push	{r7, lr}
 8022342:	b082      	sub	sp, #8
 8022344:	af00      	add	r7, sp, #0
 8022346:	4603      	mov	r3, r0
 8022348:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 802234a:	2200      	movs	r2, #0
 802234c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022350:	480a      	ldr	r0, [pc, #40]	; (802237c <LCD_IO_WriteReg+0x3c>)
 8022352:	f002 f8e3 	bl	802451c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8022356:	2200      	movs	r2, #0
 8022358:	2104      	movs	r1, #4
 802235a:	4809      	ldr	r0, [pc, #36]	; (8022380 <LCD_IO_WriteReg+0x40>)
 802235c:	f002 f8de 	bl	802451c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8022360:	79fb      	ldrb	r3, [r7, #7]
 8022362:	b29b      	uxth	r3, r3
 8022364:	4618      	mov	r0, r3
 8022366:	f7ff feed 	bl	8022144 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802236a:	2201      	movs	r2, #1
 802236c:	2104      	movs	r1, #4
 802236e:	4804      	ldr	r0, [pc, #16]	; (8022380 <LCD_IO_WriteReg+0x40>)
 8022370:	f002 f8d4 	bl	802451c <HAL_GPIO_WritePin>
}
 8022374:	bf00      	nop
 8022376:	3708      	adds	r7, #8
 8022378:	46bd      	mov	sp, r7
 802237a:	bd80      	pop	{r7, pc}
 802237c:	40020c00 	.word	0x40020c00
 8022380:	40020800 	.word	0x40020800

08022384 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022384:	b580      	push	{r7, lr}
 8022386:	b084      	sub	sp, #16
 8022388:	af00      	add	r7, sp, #0
 802238a:	4603      	mov	r3, r0
 802238c:	460a      	mov	r2, r1
 802238e:	80fb      	strh	r3, [r7, #6]
 8022390:	4613      	mov	r3, r2
 8022392:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022394:	2300      	movs	r3, #0
 8022396:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022398:	2200      	movs	r2, #0
 802239a:	2104      	movs	r1, #4
 802239c:	4810      	ldr	r0, [pc, #64]	; (80223e0 <LCD_IO_ReadData+0x5c>)
 802239e:	f002 f8bd 	bl	802451c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80223a2:	2200      	movs	r2, #0
 80223a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80223a8:	480e      	ldr	r0, [pc, #56]	; (80223e4 <LCD_IO_ReadData+0x60>)
 80223aa:	f002 f8b7 	bl	802451c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80223ae:	88fb      	ldrh	r3, [r7, #6]
 80223b0:	4618      	mov	r0, r3
 80223b2:	f7ff fec7 	bl	8022144 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80223b6:	797b      	ldrb	r3, [r7, #5]
 80223b8:	4618      	mov	r0, r3
 80223ba:	f7ff fea3 	bl	8022104 <SPIx_Read>
 80223be:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80223c0:	2201      	movs	r2, #1
 80223c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80223c6:	4807      	ldr	r0, [pc, #28]	; (80223e4 <LCD_IO_ReadData+0x60>)
 80223c8:	f002 f8a8 	bl	802451c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80223cc:	2201      	movs	r2, #1
 80223ce:	2104      	movs	r1, #4
 80223d0:	4803      	ldr	r0, [pc, #12]	; (80223e0 <LCD_IO_ReadData+0x5c>)
 80223d2:	f002 f8a3 	bl	802451c <HAL_GPIO_WritePin>
  
  return readvalue;
 80223d6:	68fb      	ldr	r3, [r7, #12]
}
 80223d8:	4618      	mov	r0, r3
 80223da:	3710      	adds	r7, #16
 80223dc:	46bd      	mov	sp, r7
 80223de:	bd80      	pop	{r7, pc}
 80223e0:	40020800 	.word	0x40020800
 80223e4:	40020c00 	.word	0x40020c00

080223e8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80223e8:	b580      	push	{r7, lr}
 80223ea:	b082      	sub	sp, #8
 80223ec:	af00      	add	r7, sp, #0
 80223ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80223f0:	6878      	ldr	r0, [r7, #4]
 80223f2:	f000 fecd 	bl	8023190 <HAL_Delay>
}
 80223f6:	bf00      	nop
 80223f8:	3708      	adds	r7, #8
 80223fa:	46bd      	mov	sp, r7
 80223fc:	bd80      	pop	{r7, pc}
	...

08022400 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8022400:	b580      	push	{r7, lr}
 8022402:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022404:	4b2d      	ldr	r3, [pc, #180]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022406:	4a2e      	ldr	r2, [pc, #184]	; (80224c0 <BSP_LCD_Init+0xc0>)
 8022408:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 802240a:	4b2c      	ldr	r3, [pc, #176]	; (80224bc <BSP_LCD_Init+0xbc>)
 802240c:	2209      	movs	r2, #9
 802240e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022410:	4b2a      	ldr	r3, [pc, #168]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022412:	2201      	movs	r2, #1
 8022414:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8022416:	4b29      	ldr	r3, [pc, #164]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022418:	221d      	movs	r2, #29
 802241a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 802241c:	4b27      	ldr	r3, [pc, #156]	; (80224bc <BSP_LCD_Init+0xbc>)
 802241e:	2203      	movs	r2, #3
 8022420:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8022422:	4b26      	ldr	r3, [pc, #152]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022424:	f240 120d 	movw	r2, #269	; 0x10d
 8022428:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 802242a:	4b24      	ldr	r3, [pc, #144]	; (80224bc <BSP_LCD_Init+0xbc>)
 802242c:	f240 1243 	movw	r2, #323	; 0x143
 8022430:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8022432:	4b22      	ldr	r3, [pc, #136]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022434:	f240 1217 	movw	r2, #279	; 0x117
 8022438:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 802243a:	4b20      	ldr	r3, [pc, #128]	; (80224bc <BSP_LCD_Init+0xbc>)
 802243c:	f240 1247 	movw	r2, #327	; 0x147
 8022440:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8022442:	4b1e      	ldr	r3, [pc, #120]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022444:	2200      	movs	r2, #0
 8022446:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 802244a:	4b1c      	ldr	r3, [pc, #112]	; (80224bc <BSP_LCD_Init+0xbc>)
 802244c:	2200      	movs	r2, #0
 802244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8022452:	4b1a      	ldr	r3, [pc, #104]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022454:	2200      	movs	r2, #0
 8022456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802245a:	4b1a      	ldr	r3, [pc, #104]	; (80224c4 <BSP_LCD_Init+0xc4>)
 802245c:	2208      	movs	r2, #8
 802245e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022460:	4b18      	ldr	r3, [pc, #96]	; (80224c4 <BSP_LCD_Init+0xc4>)
 8022462:	22c0      	movs	r2, #192	; 0xc0
 8022464:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8022466:	4b17      	ldr	r3, [pc, #92]	; (80224c4 <BSP_LCD_Init+0xc4>)
 8022468:	2204      	movs	r2, #4
 802246a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 802246c:	4b15      	ldr	r3, [pc, #84]	; (80224c4 <BSP_LCD_Init+0xc4>)
 802246e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022472:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8022474:	4813      	ldr	r0, [pc, #76]	; (80224c4 <BSP_LCD_Init+0xc4>)
 8022476:	f004 ff27 	bl	80272c8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 802247a:	4b10      	ldr	r3, [pc, #64]	; (80224bc <BSP_LCD_Init+0xbc>)
 802247c:	2200      	movs	r2, #0
 802247e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022480:	4b0e      	ldr	r3, [pc, #56]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022482:	2200      	movs	r2, #0
 8022484:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8022486:	4b0d      	ldr	r3, [pc, #52]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022488:	2200      	movs	r2, #0
 802248a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 802248c:	4b0b      	ldr	r3, [pc, #44]	; (80224bc <BSP_LCD_Init+0xbc>)
 802248e:	2200      	movs	r2, #0
 8022490:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8022492:	f000 fa83 	bl	802299c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8022496:	4809      	ldr	r0, [pc, #36]	; (80224bc <BSP_LCD_Init+0xbc>)
 8022498:	f003 fe3c 	bl	8026114 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 802249c:	4b0a      	ldr	r3, [pc, #40]	; (80224c8 <BSP_LCD_Init+0xc8>)
 802249e:	4a0b      	ldr	r2, [pc, #44]	; (80224cc <BSP_LCD_Init+0xcc>)
 80224a0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80224a2:	4b09      	ldr	r3, [pc, #36]	; (80224c8 <BSP_LCD_Init+0xc8>)
 80224a4:	681b      	ldr	r3, [r3, #0]
 80224a6:	681b      	ldr	r3, [r3, #0]
 80224a8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80224aa:	f000 fc65 	bl	8022d78 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80224ae:	4808      	ldr	r0, [pc, #32]	; (80224d0 <BSP_LCD_Init+0xd0>)
 80224b0:	f000 f920 	bl	80226f4 <BSP_LCD_SetFont>

  return LCD_OK;
 80224b4:	2300      	movs	r3, #0
}  
 80224b6:	4618      	mov	r0, r3
 80224b8:	bd80      	pop	{r7, pc}
 80224ba:	bf00      	nop
 80224bc:	200008c8 	.word	0x200008c8
 80224c0:	40016800 	.word	0x40016800
 80224c4:	200009b0 	.word	0x200009b0
 80224c8:	200009fc 	.word	0x200009fc
 80224cc:	20000004 	.word	0x20000004
 80224d0:	20000040 	.word	0x20000040

080224d4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80224d4:	b580      	push	{r7, lr}
 80224d6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80224d8:	4b03      	ldr	r3, [pc, #12]	; (80224e8 <BSP_LCD_GetXSize+0x14>)
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224de:	4798      	blx	r3
 80224e0:	4603      	mov	r3, r0
}
 80224e2:	4618      	mov	r0, r3
 80224e4:	bd80      	pop	{r7, pc}
 80224e6:	bf00      	nop
 80224e8:	200009fc 	.word	0x200009fc

080224ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80224ec:	b580      	push	{r7, lr}
 80224ee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80224f0:	4b03      	ldr	r3, [pc, #12]	; (8022500 <BSP_LCD_GetYSize+0x14>)
 80224f2:	681b      	ldr	r3, [r3, #0]
 80224f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80224f6:	4798      	blx	r3
 80224f8:	4603      	mov	r3, r0
}
 80224fa:	4618      	mov	r0, r3
 80224fc:	bd80      	pop	{r7, pc}
 80224fe:	bf00      	nop
 8022500:	200009fc 	.word	0x200009fc

08022504 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022504:	b580      	push	{r7, lr}
 8022506:	b090      	sub	sp, #64	; 0x40
 8022508:	af00      	add	r7, sp, #0
 802250a:	4603      	mov	r3, r0
 802250c:	6039      	str	r1, [r7, #0]
 802250e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022510:	2300      	movs	r3, #0
 8022512:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022514:	f7ff ffde 	bl	80224d4 <BSP_LCD_GetXSize>
 8022518:	4603      	mov	r3, r0
 802251a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 802251c:	2300      	movs	r3, #0
 802251e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022520:	f7ff ffe4 	bl	80224ec <BSP_LCD_GetYSize>
 8022524:	4603      	mov	r3, r0
 8022526:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022528:	2300      	movs	r3, #0
 802252a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 802252c:	683b      	ldr	r3, [r7, #0]
 802252e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022530:	23ff      	movs	r3, #255	; 0xff
 8022532:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022534:	2300      	movs	r3, #0
 8022536:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022538:	2300      	movs	r3, #0
 802253a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 802253e:	2300      	movs	r3, #0
 8022540:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022544:	2300      	movs	r3, #0
 8022546:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802254a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802254e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022550:	2307      	movs	r3, #7
 8022552:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022554:	f7ff ffbe 	bl	80224d4 <BSP_LCD_GetXSize>
 8022558:	4603      	mov	r3, r0
 802255a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 802255c:	f7ff ffc6 	bl	80224ec <BSP_LCD_GetYSize>
 8022560:	4603      	mov	r3, r0
 8022562:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022564:	88fa      	ldrh	r2, [r7, #6]
 8022566:	f107 030c 	add.w	r3, r7, #12
 802256a:	4619      	mov	r1, r3
 802256c:	4814      	ldr	r0, [pc, #80]	; (80225c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 802256e:	f003 ff63 	bl	8026438 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022572:	88fa      	ldrh	r2, [r7, #6]
 8022574:	4913      	ldr	r1, [pc, #76]	; (80225c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022576:	4613      	mov	r3, r2
 8022578:	005b      	lsls	r3, r3, #1
 802257a:	4413      	add	r3, r2
 802257c:	009b      	lsls	r3, r3, #2
 802257e:	440b      	add	r3, r1
 8022580:	3304      	adds	r3, #4
 8022582:	f04f 32ff 	mov.w	r2, #4294967295
 8022586:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022588:	88fa      	ldrh	r2, [r7, #6]
 802258a:	490e      	ldr	r1, [pc, #56]	; (80225c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 802258c:	4613      	mov	r3, r2
 802258e:	005b      	lsls	r3, r3, #1
 8022590:	4413      	add	r3, r2
 8022592:	009b      	lsls	r3, r3, #2
 8022594:	440b      	add	r3, r1
 8022596:	3308      	adds	r3, #8
 8022598:	4a0b      	ldr	r2, [pc, #44]	; (80225c8 <BSP_LCD_LayerDefaultInit+0xc4>)
 802259a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 802259c:	88fa      	ldrh	r2, [r7, #6]
 802259e:	4909      	ldr	r1, [pc, #36]	; (80225c4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80225a0:	4613      	mov	r3, r2
 80225a2:	005b      	lsls	r3, r3, #1
 80225a4:	4413      	add	r3, r2
 80225a6:	009b      	lsls	r3, r3, #2
 80225a8:	440b      	add	r3, r1
 80225aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80225ae:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80225b0:	4803      	ldr	r0, [pc, #12]	; (80225c0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80225b2:	f003 fffd 	bl	80265b0 <HAL_LTDC_EnableDither>
}
 80225b6:	bf00      	nop
 80225b8:	3740      	adds	r7, #64	; 0x40
 80225ba:	46bd      	mov	sp, r7
 80225bc:	bd80      	pop	{r7, pc}
 80225be:	bf00      	nop
 80225c0:	200008c8 	.word	0x200008c8
 80225c4:	200009e4 	.word	0x200009e4
 80225c8:	20000040 	.word	0x20000040

080225cc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80225cc:	b480      	push	{r7}
 80225ce:	b083      	sub	sp, #12
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80225d4:	4a04      	ldr	r2, [pc, #16]	; (80225e8 <BSP_LCD_SelectLayer+0x1c>)
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	6013      	str	r3, [r2, #0]
}
 80225da:	bf00      	nop
 80225dc:	370c      	adds	r7, #12
 80225de:	46bd      	mov	sp, r7
 80225e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225e4:	4770      	bx	lr
 80225e6:	bf00      	nop
 80225e8:	200009e0 	.word	0x200009e0

080225ec <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 80225ec:	b480      	push	{r7}
 80225ee:	b083      	sub	sp, #12
 80225f0:	af00      	add	r7, sp, #0
 80225f2:	6078      	str	r0, [r7, #4]
 80225f4:	460b      	mov	r3, r1
 80225f6:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 80225f8:	78fb      	ldrb	r3, [r7, #3]
 80225fa:	2b01      	cmp	r3, #1
 80225fc:	d112      	bne.n	8022624 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80225fe:	4b19      	ldr	r3, [pc, #100]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	461a      	mov	r2, r3
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	01db      	lsls	r3, r3, #7
 8022608:	4413      	add	r3, r2
 802260a:	3384      	adds	r3, #132	; 0x84
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	4a15      	ldr	r2, [pc, #84]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 8022610:	6812      	ldr	r2, [r2, #0]
 8022612:	4611      	mov	r1, r2
 8022614:	687a      	ldr	r2, [r7, #4]
 8022616:	01d2      	lsls	r2, r2, #7
 8022618:	440a      	add	r2, r1
 802261a:	3284      	adds	r2, #132	; 0x84
 802261c:	f043 0301 	orr.w	r3, r3, #1
 8022620:	6013      	str	r3, [r2, #0]
 8022622:	e011      	b.n	8022648 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022624:	4b0f      	ldr	r3, [pc, #60]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	461a      	mov	r2, r3
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	01db      	lsls	r3, r3, #7
 802262e:	4413      	add	r3, r2
 8022630:	3384      	adds	r3, #132	; 0x84
 8022632:	681b      	ldr	r3, [r3, #0]
 8022634:	4a0b      	ldr	r2, [pc, #44]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 8022636:	6812      	ldr	r2, [r2, #0]
 8022638:	4611      	mov	r1, r2
 802263a:	687a      	ldr	r2, [r7, #4]
 802263c:	01d2      	lsls	r2, r2, #7
 802263e:	440a      	add	r2, r1
 8022640:	3284      	adds	r2, #132	; 0x84
 8022642:	f023 0301 	bic.w	r3, r3, #1
 8022646:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022648:	4b06      	ldr	r3, [pc, #24]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802264e:	4b05      	ldr	r3, [pc, #20]	; (8022664 <BSP_LCD_SetLayerVisible+0x78>)
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	f042 0201 	orr.w	r2, r2, #1
 8022656:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022658:	bf00      	nop
 802265a:	370c      	adds	r7, #12
 802265c:	46bd      	mov	sp, r7
 802265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022662:	4770      	bx	lr
 8022664:	200008c8 	.word	0x200008c8

08022668 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022668:	b580      	push	{r7, lr}
 802266a:	b082      	sub	sp, #8
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
 8022670:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022672:	687a      	ldr	r2, [r7, #4]
 8022674:	6839      	ldr	r1, [r7, #0]
 8022676:	4805      	ldr	r0, [pc, #20]	; (802268c <BSP_LCD_SetColorKeying+0x24>)
 8022678:	f003 ff1c 	bl	80264b4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 802267c:	6879      	ldr	r1, [r7, #4]
 802267e:	4803      	ldr	r0, [pc, #12]	; (802268c <BSP_LCD_SetColorKeying+0x24>)
 8022680:	f003 ff5c 	bl	802653c <HAL_LTDC_EnableColorKeying>
}
 8022684:	bf00      	nop
 8022686:	3708      	adds	r7, #8
 8022688:	46bd      	mov	sp, r7
 802268a:	bd80      	pop	{r7, pc}
 802268c:	200008c8 	.word	0x200008c8

08022690 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022690:	b480      	push	{r7}
 8022692:	b083      	sub	sp, #12
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022698:	4b07      	ldr	r3, [pc, #28]	; (80226b8 <BSP_LCD_SetTextColor+0x28>)
 802269a:	681a      	ldr	r2, [r3, #0]
 802269c:	4907      	ldr	r1, [pc, #28]	; (80226bc <BSP_LCD_SetTextColor+0x2c>)
 802269e:	4613      	mov	r3, r2
 80226a0:	005b      	lsls	r3, r3, #1
 80226a2:	4413      	add	r3, r2
 80226a4:	009b      	lsls	r3, r3, #2
 80226a6:	440b      	add	r3, r1
 80226a8:	687a      	ldr	r2, [r7, #4]
 80226aa:	601a      	str	r2, [r3, #0]
}
 80226ac:	bf00      	nop
 80226ae:	370c      	adds	r7, #12
 80226b0:	46bd      	mov	sp, r7
 80226b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b6:	4770      	bx	lr
 80226b8:	200009e0 	.word	0x200009e0
 80226bc:	200009e4 	.word	0x200009e4

080226c0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80226c0:	b480      	push	{r7}
 80226c2:	b083      	sub	sp, #12
 80226c4:	af00      	add	r7, sp, #0
 80226c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80226c8:	4b08      	ldr	r3, [pc, #32]	; (80226ec <BSP_LCD_SetBackColor+0x2c>)
 80226ca:	681a      	ldr	r2, [r3, #0]
 80226cc:	4908      	ldr	r1, [pc, #32]	; (80226f0 <BSP_LCD_SetBackColor+0x30>)
 80226ce:	4613      	mov	r3, r2
 80226d0:	005b      	lsls	r3, r3, #1
 80226d2:	4413      	add	r3, r2
 80226d4:	009b      	lsls	r3, r3, #2
 80226d6:	440b      	add	r3, r1
 80226d8:	3304      	adds	r3, #4
 80226da:	687a      	ldr	r2, [r7, #4]
 80226dc:	601a      	str	r2, [r3, #0]
}
 80226de:	bf00      	nop
 80226e0:	370c      	adds	r7, #12
 80226e2:	46bd      	mov	sp, r7
 80226e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226e8:	4770      	bx	lr
 80226ea:	bf00      	nop
 80226ec:	200009e0 	.word	0x200009e0
 80226f0:	200009e4 	.word	0x200009e4

080226f4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80226f4:	b480      	push	{r7}
 80226f6:	b083      	sub	sp, #12
 80226f8:	af00      	add	r7, sp, #0
 80226fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80226fc:	4b08      	ldr	r3, [pc, #32]	; (8022720 <BSP_LCD_SetFont+0x2c>)
 80226fe:	681a      	ldr	r2, [r3, #0]
 8022700:	4908      	ldr	r1, [pc, #32]	; (8022724 <BSP_LCD_SetFont+0x30>)
 8022702:	4613      	mov	r3, r2
 8022704:	005b      	lsls	r3, r3, #1
 8022706:	4413      	add	r3, r2
 8022708:	009b      	lsls	r3, r3, #2
 802270a:	440b      	add	r3, r1
 802270c:	3308      	adds	r3, #8
 802270e:	687a      	ldr	r2, [r7, #4]
 8022710:	601a      	str	r2, [r3, #0]
}
 8022712:	bf00      	nop
 8022714:	370c      	adds	r7, #12
 8022716:	46bd      	mov	sp, r7
 8022718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802271c:	4770      	bx	lr
 802271e:	bf00      	nop
 8022720:	200009e0 	.word	0x200009e0
 8022724:	200009e4 	.word	0x200009e4

08022728 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022728:	b5f0      	push	{r4, r5, r6, r7, lr}
 802272a:	b085      	sub	sp, #20
 802272c:	af02      	add	r7, sp, #8
 802272e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022730:	4b0f      	ldr	r3, [pc, #60]	; (8022770 <BSP_LCD_Clear+0x48>)
 8022732:	681c      	ldr	r4, [r3, #0]
 8022734:	4b0e      	ldr	r3, [pc, #56]	; (8022770 <BSP_LCD_Clear+0x48>)
 8022736:	681b      	ldr	r3, [r3, #0]
 8022738:	4a0e      	ldr	r2, [pc, #56]	; (8022774 <BSP_LCD_Clear+0x4c>)
 802273a:	2134      	movs	r1, #52	; 0x34
 802273c:	fb01 f303 	mul.w	r3, r1, r3
 8022740:	4413      	add	r3, r2
 8022742:	335c      	adds	r3, #92	; 0x5c
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	461e      	mov	r6, r3
 8022748:	f7ff fec4 	bl	80224d4 <BSP_LCD_GetXSize>
 802274c:	4605      	mov	r5, r0
 802274e:	f7ff fecd 	bl	80224ec <BSP_LCD_GetYSize>
 8022752:	4602      	mov	r2, r0
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	9301      	str	r3, [sp, #4]
 8022758:	2300      	movs	r3, #0
 802275a:	9300      	str	r3, [sp, #0]
 802275c:	4613      	mov	r3, r2
 802275e:	462a      	mov	r2, r5
 8022760:	4631      	mov	r1, r6
 8022762:	4620      	mov	r0, r4
 8022764:	f000 fad0 	bl	8022d08 <FillBuffer>
}
 8022768:	bf00      	nop
 802276a:	370c      	adds	r7, #12
 802276c:	46bd      	mov	sp, r7
 802276e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022770:	200009e0 	.word	0x200009e0
 8022774:	200008c8 	.word	0x200008c8

08022778 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022778:	b590      	push	{r4, r7, lr}
 802277a:	b083      	sub	sp, #12
 802277c:	af00      	add	r7, sp, #0
 802277e:	4603      	mov	r3, r0
 8022780:	80fb      	strh	r3, [r7, #6]
 8022782:	460b      	mov	r3, r1
 8022784:	80bb      	strh	r3, [r7, #4]
 8022786:	4613      	mov	r3, r2
 8022788:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 802278a:	4b1b      	ldr	r3, [pc, #108]	; (80227f8 <BSP_LCD_DisplayChar+0x80>)
 802278c:	681a      	ldr	r2, [r3, #0]
 802278e:	491b      	ldr	r1, [pc, #108]	; (80227fc <BSP_LCD_DisplayChar+0x84>)
 8022790:	4613      	mov	r3, r2
 8022792:	005b      	lsls	r3, r3, #1
 8022794:	4413      	add	r3, r2
 8022796:	009b      	lsls	r3, r3, #2
 8022798:	440b      	add	r3, r1
 802279a:	3308      	adds	r3, #8
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	6819      	ldr	r1, [r3, #0]
 80227a0:	78fb      	ldrb	r3, [r7, #3]
 80227a2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80227a6:	4b14      	ldr	r3, [pc, #80]	; (80227f8 <BSP_LCD_DisplayChar+0x80>)
 80227a8:	681a      	ldr	r2, [r3, #0]
 80227aa:	4c14      	ldr	r4, [pc, #80]	; (80227fc <BSP_LCD_DisplayChar+0x84>)
 80227ac:	4613      	mov	r3, r2
 80227ae:	005b      	lsls	r3, r3, #1
 80227b0:	4413      	add	r3, r2
 80227b2:	009b      	lsls	r3, r3, #2
 80227b4:	4423      	add	r3, r4
 80227b6:	3308      	adds	r3, #8
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80227bc:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80227c0:	4b0d      	ldr	r3, [pc, #52]	; (80227f8 <BSP_LCD_DisplayChar+0x80>)
 80227c2:	681a      	ldr	r2, [r3, #0]
 80227c4:	4c0d      	ldr	r4, [pc, #52]	; (80227fc <BSP_LCD_DisplayChar+0x84>)
 80227c6:	4613      	mov	r3, r2
 80227c8:	005b      	lsls	r3, r3, #1
 80227ca:	4413      	add	r3, r2
 80227cc:	009b      	lsls	r3, r3, #2
 80227ce:	4423      	add	r3, r4
 80227d0:	3308      	adds	r3, #8
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	889b      	ldrh	r3, [r3, #4]
 80227d6:	3307      	adds	r3, #7
 80227d8:	2b00      	cmp	r3, #0
 80227da:	da00      	bge.n	80227de <BSP_LCD_DisplayChar+0x66>
 80227dc:	3307      	adds	r3, #7
 80227de:	10db      	asrs	r3, r3, #3
 80227e0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80227e4:	18ca      	adds	r2, r1, r3
 80227e6:	88b9      	ldrh	r1, [r7, #4]
 80227e8:	88fb      	ldrh	r3, [r7, #6]
 80227ea:	4618      	mov	r0, r3
 80227ec:	f000 f9d2 	bl	8022b94 <DrawChar>
}
 80227f0:	bf00      	nop
 80227f2:	370c      	adds	r7, #12
 80227f4:	46bd      	mov	sp, r7
 80227f6:	bd90      	pop	{r4, r7, pc}
 80227f8:	200009e0 	.word	0x200009e0
 80227fc:	200009e4 	.word	0x200009e4

08022800 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022800:	b5b0      	push	{r4, r5, r7, lr}
 8022802:	b088      	sub	sp, #32
 8022804:	af00      	add	r7, sp, #0
 8022806:	60ba      	str	r2, [r7, #8]
 8022808:	461a      	mov	r2, r3
 802280a:	4603      	mov	r3, r0
 802280c:	81fb      	strh	r3, [r7, #14]
 802280e:	460b      	mov	r3, r1
 8022810:	81bb      	strh	r3, [r7, #12]
 8022812:	4613      	mov	r3, r2
 8022814:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022816:	2301      	movs	r3, #1
 8022818:	83fb      	strh	r3, [r7, #30]
 802281a:	2300      	movs	r3, #0
 802281c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 802281e:	2300      	movs	r3, #0
 8022820:	61bb      	str	r3, [r7, #24]
 8022822:	2300      	movs	r3, #0
 8022824:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022826:	68bb      	ldr	r3, [r7, #8]
 8022828:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 802282a:	e002      	b.n	8022832 <BSP_LCD_DisplayStringAt+0x32>
 802282c:	69bb      	ldr	r3, [r7, #24]
 802282e:	3301      	adds	r3, #1
 8022830:	61bb      	str	r3, [r7, #24]
 8022832:	697b      	ldr	r3, [r7, #20]
 8022834:	1c5a      	adds	r2, r3, #1
 8022836:	617a      	str	r2, [r7, #20]
 8022838:	781b      	ldrb	r3, [r3, #0]
 802283a:	2b00      	cmp	r3, #0
 802283c:	d1f6      	bne.n	802282c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 802283e:	f7ff fe49 	bl	80224d4 <BSP_LCD_GetXSize>
 8022842:	4601      	mov	r1, r0
 8022844:	4b4b      	ldr	r3, [pc, #300]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 8022846:	681a      	ldr	r2, [r3, #0]
 8022848:	484b      	ldr	r0, [pc, #300]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 802284a:	4613      	mov	r3, r2
 802284c:	005b      	lsls	r3, r3, #1
 802284e:	4413      	add	r3, r2
 8022850:	009b      	lsls	r3, r3, #2
 8022852:	4403      	add	r3, r0
 8022854:	3308      	adds	r3, #8
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	889b      	ldrh	r3, [r3, #4]
 802285a:	fbb1 f3f3 	udiv	r3, r1, r3
 802285e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022860:	79fb      	ldrb	r3, [r7, #7]
 8022862:	2b03      	cmp	r3, #3
 8022864:	d01c      	beq.n	80228a0 <BSP_LCD_DisplayStringAt+0xa0>
 8022866:	2b03      	cmp	r3, #3
 8022868:	dc33      	bgt.n	80228d2 <BSP_LCD_DisplayStringAt+0xd2>
 802286a:	2b01      	cmp	r3, #1
 802286c:	d002      	beq.n	8022874 <BSP_LCD_DisplayStringAt+0x74>
 802286e:	2b02      	cmp	r3, #2
 8022870:	d019      	beq.n	80228a6 <BSP_LCD_DisplayStringAt+0xa6>
 8022872:	e02e      	b.n	80228d2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022874:	693a      	ldr	r2, [r7, #16]
 8022876:	69bb      	ldr	r3, [r7, #24]
 8022878:	1ad1      	subs	r1, r2, r3
 802287a:	4b3e      	ldr	r3, [pc, #248]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 802287c:	681a      	ldr	r2, [r3, #0]
 802287e:	483e      	ldr	r0, [pc, #248]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 8022880:	4613      	mov	r3, r2
 8022882:	005b      	lsls	r3, r3, #1
 8022884:	4413      	add	r3, r2
 8022886:	009b      	lsls	r3, r3, #2
 8022888:	4403      	add	r3, r0
 802288a:	3308      	adds	r3, #8
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	889b      	ldrh	r3, [r3, #4]
 8022890:	fb01 f303 	mul.w	r3, r1, r3
 8022894:	085b      	lsrs	r3, r3, #1
 8022896:	b29a      	uxth	r2, r3
 8022898:	89fb      	ldrh	r3, [r7, #14]
 802289a:	4413      	add	r3, r2
 802289c:	83fb      	strh	r3, [r7, #30]
      break;
 802289e:	e01b      	b.n	80228d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80228a0:	89fb      	ldrh	r3, [r7, #14]
 80228a2:	83fb      	strh	r3, [r7, #30]
      break;
 80228a4:	e018      	b.n	80228d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80228a6:	693a      	ldr	r2, [r7, #16]
 80228a8:	69bb      	ldr	r3, [r7, #24]
 80228aa:	1ad3      	subs	r3, r2, r3
 80228ac:	b299      	uxth	r1, r3
 80228ae:	4b31      	ldr	r3, [pc, #196]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 80228b0:	681a      	ldr	r2, [r3, #0]
 80228b2:	4831      	ldr	r0, [pc, #196]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 80228b4:	4613      	mov	r3, r2
 80228b6:	005b      	lsls	r3, r3, #1
 80228b8:	4413      	add	r3, r2
 80228ba:	009b      	lsls	r3, r3, #2
 80228bc:	4403      	add	r3, r0
 80228be:	3308      	adds	r3, #8
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	889b      	ldrh	r3, [r3, #4]
 80228c4:	fb11 f303 	smulbb	r3, r1, r3
 80228c8:	b29a      	uxth	r2, r3
 80228ca:	89fb      	ldrh	r3, [r7, #14]
 80228cc:	4413      	add	r3, r2
 80228ce:	83fb      	strh	r3, [r7, #30]
      break;
 80228d0:	e002      	b.n	80228d8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80228d2:	89fb      	ldrh	r3, [r7, #14]
 80228d4:	83fb      	strh	r3, [r7, #30]
      break;
 80228d6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80228d8:	e01a      	b.n	8022910 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80228da:	68bb      	ldr	r3, [r7, #8]
 80228dc:	781a      	ldrb	r2, [r3, #0]
 80228de:	89b9      	ldrh	r1, [r7, #12]
 80228e0:	8bfb      	ldrh	r3, [r7, #30]
 80228e2:	4618      	mov	r0, r3
 80228e4:	f7ff ff48 	bl	8022778 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80228e8:	4b22      	ldr	r3, [pc, #136]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 80228ea:	681a      	ldr	r2, [r3, #0]
 80228ec:	4922      	ldr	r1, [pc, #136]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 80228ee:	4613      	mov	r3, r2
 80228f0:	005b      	lsls	r3, r3, #1
 80228f2:	4413      	add	r3, r2
 80228f4:	009b      	lsls	r3, r3, #2
 80228f6:	440b      	add	r3, r1
 80228f8:	3308      	adds	r3, #8
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	889a      	ldrh	r2, [r3, #4]
 80228fe:	8bfb      	ldrh	r3, [r7, #30]
 8022900:	4413      	add	r3, r2
 8022902:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022904:	68bb      	ldr	r3, [r7, #8]
 8022906:	3301      	adds	r3, #1
 8022908:	60bb      	str	r3, [r7, #8]
    i++;
 802290a:	8bbb      	ldrh	r3, [r7, #28]
 802290c:	3301      	adds	r3, #1
 802290e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	781b      	ldrb	r3, [r3, #0]
 8022914:	2b00      	cmp	r3, #0
 8022916:	bf14      	ite	ne
 8022918:	2301      	movne	r3, #1
 802291a:	2300      	moveq	r3, #0
 802291c:	b2dc      	uxtb	r4, r3
 802291e:	f7ff fdd9 	bl	80224d4 <BSP_LCD_GetXSize>
 8022922:	8bb9      	ldrh	r1, [r7, #28]
 8022924:	4b13      	ldr	r3, [pc, #76]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 8022926:	681a      	ldr	r2, [r3, #0]
 8022928:	4d13      	ldr	r5, [pc, #76]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 802292a:	4613      	mov	r3, r2
 802292c:	005b      	lsls	r3, r3, #1
 802292e:	4413      	add	r3, r2
 8022930:	009b      	lsls	r3, r3, #2
 8022932:	442b      	add	r3, r5
 8022934:	3308      	adds	r3, #8
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	889b      	ldrh	r3, [r3, #4]
 802293a:	fb01 f303 	mul.w	r3, r1, r3
 802293e:	1ac3      	subs	r3, r0, r3
 8022940:	b299      	uxth	r1, r3
 8022942:	4b0c      	ldr	r3, [pc, #48]	; (8022974 <BSP_LCD_DisplayStringAt+0x174>)
 8022944:	681a      	ldr	r2, [r3, #0]
 8022946:	480c      	ldr	r0, [pc, #48]	; (8022978 <BSP_LCD_DisplayStringAt+0x178>)
 8022948:	4613      	mov	r3, r2
 802294a:	005b      	lsls	r3, r3, #1
 802294c:	4413      	add	r3, r2
 802294e:	009b      	lsls	r3, r3, #2
 8022950:	4403      	add	r3, r0
 8022952:	3308      	adds	r3, #8
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	889b      	ldrh	r3, [r3, #4]
 8022958:	4299      	cmp	r1, r3
 802295a:	bf2c      	ite	cs
 802295c:	2301      	movcs	r3, #1
 802295e:	2300      	movcc	r3, #0
 8022960:	b2db      	uxtb	r3, r3
 8022962:	4023      	ands	r3, r4
 8022964:	b2db      	uxtb	r3, r3
 8022966:	2b00      	cmp	r3, #0
 8022968:	d1b7      	bne.n	80228da <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 802296a:	bf00      	nop
 802296c:	bf00      	nop
 802296e:	3720      	adds	r7, #32
 8022970:	46bd      	mov	sp, r7
 8022972:	bdb0      	pop	{r4, r5, r7, pc}
 8022974:	200009e0 	.word	0x200009e0
 8022978:	200009e4 	.word	0x200009e4

0802297c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 802297c:	b580      	push	{r7, lr}
 802297e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022980:	4b05      	ldr	r3, [pc, #20]	; (8022998 <BSP_LCD_DisplayOn+0x1c>)
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	689b      	ldr	r3, [r3, #8]
 8022986:	2b00      	cmp	r3, #0
 8022988:	d003      	beq.n	8022992 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 802298a:	4b03      	ldr	r3, [pc, #12]	; (8022998 <BSP_LCD_DisplayOn+0x1c>)
 802298c:	681b      	ldr	r3, [r3, #0]
 802298e:	689b      	ldr	r3, [r3, #8]
 8022990:	4798      	blx	r3
  }
}
 8022992:	bf00      	nop
 8022994:	bd80      	pop	{r7, pc}
 8022996:	bf00      	nop
 8022998:	200009fc 	.word	0x200009fc

0802299c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 802299c:	b580      	push	{r7, lr}
 802299e:	b08e      	sub	sp, #56	; 0x38
 80229a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80229a2:	2300      	movs	r3, #0
 80229a4:	623b      	str	r3, [r7, #32]
 80229a6:	4b61      	ldr	r3, [pc, #388]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80229aa:	4a60      	ldr	r2, [pc, #384]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80229b0:	6453      	str	r3, [r2, #68]	; 0x44
 80229b2:	4b5e      	ldr	r3, [pc, #376]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80229b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80229ba:	623b      	str	r3, [r7, #32]
 80229bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80229be:	2300      	movs	r3, #0
 80229c0:	61fb      	str	r3, [r7, #28]
 80229c2:	4b5a      	ldr	r3, [pc, #360]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229c6:	4a59      	ldr	r2, [pc, #356]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80229cc:	6313      	str	r3, [r2, #48]	; 0x30
 80229ce:	4b57      	ldr	r3, [pc, #348]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80229d6:	61fb      	str	r3, [r7, #28]
 80229d8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80229da:	2300      	movs	r3, #0
 80229dc:	61bb      	str	r3, [r7, #24]
 80229de:	4b53      	ldr	r3, [pc, #332]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229e2:	4a52      	ldr	r2, [pc, #328]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229e4:	f043 0301 	orr.w	r3, r3, #1
 80229e8:	6313      	str	r3, [r2, #48]	; 0x30
 80229ea:	4b50      	ldr	r3, [pc, #320]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229ee:	f003 0301 	and.w	r3, r3, #1
 80229f2:	61bb      	str	r3, [r7, #24]
 80229f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80229f6:	2300      	movs	r3, #0
 80229f8:	617b      	str	r3, [r7, #20]
 80229fa:	4b4c      	ldr	r3, [pc, #304]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 80229fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229fe:	4a4b      	ldr	r2, [pc, #300]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a00:	f043 0302 	orr.w	r3, r3, #2
 8022a04:	6313      	str	r3, [r2, #48]	; 0x30
 8022a06:	4b49      	ldr	r3, [pc, #292]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a0a:	f003 0302 	and.w	r3, r3, #2
 8022a0e:	617b      	str	r3, [r7, #20]
 8022a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022a12:	2300      	movs	r3, #0
 8022a14:	613b      	str	r3, [r7, #16]
 8022a16:	4b45      	ldr	r3, [pc, #276]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a1a:	4a44      	ldr	r2, [pc, #272]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a1c:	f043 0304 	orr.w	r3, r3, #4
 8022a20:	6313      	str	r3, [r2, #48]	; 0x30
 8022a22:	4b42      	ldr	r3, [pc, #264]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a26:	f003 0304 	and.w	r3, r3, #4
 8022a2a:	613b      	str	r3, [r7, #16]
 8022a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022a2e:	2300      	movs	r3, #0
 8022a30:	60fb      	str	r3, [r7, #12]
 8022a32:	4b3e      	ldr	r3, [pc, #248]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a36:	4a3d      	ldr	r2, [pc, #244]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a38:	f043 0308 	orr.w	r3, r3, #8
 8022a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8022a3e:	4b3b      	ldr	r3, [pc, #236]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a42:	f003 0308 	and.w	r3, r3, #8
 8022a46:	60fb      	str	r3, [r7, #12]
 8022a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	60bb      	str	r3, [r7, #8]
 8022a4e:	4b37      	ldr	r3, [pc, #220]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a52:	4a36      	ldr	r2, [pc, #216]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a54:	f043 0320 	orr.w	r3, r3, #32
 8022a58:	6313      	str	r3, [r2, #48]	; 0x30
 8022a5a:	4b34      	ldr	r3, [pc, #208]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a5e:	f003 0320 	and.w	r3, r3, #32
 8022a62:	60bb      	str	r3, [r7, #8]
 8022a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022a66:	2300      	movs	r3, #0
 8022a68:	607b      	str	r3, [r7, #4]
 8022a6a:	4b30      	ldr	r3, [pc, #192]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a6e:	4a2f      	ldr	r2, [pc, #188]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a74:	6313      	str	r3, [r2, #48]	; 0x30
 8022a76:	4b2d      	ldr	r3, [pc, #180]	; (8022b2c <BSP_LCD_MspInit+0x190>)
 8022a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022a7e:	607b      	str	r3, [r7, #4]
 8022a80:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022a82:	f641 0358 	movw	r3, #6232	; 0x1858
 8022a86:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022a88:	2302      	movs	r3, #2
 8022a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022a8c:	2300      	movs	r3, #0
 8022a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022a90:	2302      	movs	r3, #2
 8022a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022a94:	230e      	movs	r3, #14
 8022a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a9c:	4619      	mov	r1, r3
 8022a9e:	4824      	ldr	r0, [pc, #144]	; (8022b30 <BSP_LCD_MspInit+0x194>)
 8022aa0:	f001 fa84 	bl	8023fac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022aa4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022aa8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022aae:	4619      	mov	r1, r3
 8022ab0:	4820      	ldr	r0, [pc, #128]	; (8022b34 <BSP_LCD_MspInit+0x198>)
 8022ab2:	f001 fa7b 	bl	8023fac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022ab6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ac0:	4619      	mov	r1, r3
 8022ac2:	481d      	ldr	r0, [pc, #116]	; (8022b38 <BSP_LCD_MspInit+0x19c>)
 8022ac4:	f001 fa72 	bl	8023fac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022ac8:	2348      	movs	r3, #72	; 0x48
 8022aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ad0:	4619      	mov	r1, r3
 8022ad2:	481a      	ldr	r0, [pc, #104]	; (8022b3c <BSP_LCD_MspInit+0x1a0>)
 8022ad4:	f001 fa6a 	bl	8023fac <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ae2:	4619      	mov	r1, r3
 8022ae4:	4816      	ldr	r0, [pc, #88]	; (8022b40 <BSP_LCD_MspInit+0x1a4>)
 8022ae6:	f001 fa61 	bl	8023fac <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022aea:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022aee:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022af4:	4619      	mov	r1, r3
 8022af6:	4813      	ldr	r0, [pc, #76]	; (8022b44 <BSP_LCD_MspInit+0x1a8>)
 8022af8:	f001 fa58 	bl	8023fac <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022afc:	2303      	movs	r3, #3
 8022afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022b00:	2309      	movs	r3, #9
 8022b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022b08:	4619      	mov	r1, r3
 8022b0a:	480a      	ldr	r0, [pc, #40]	; (8022b34 <BSP_LCD_MspInit+0x198>)
 8022b0c:	f001 fa4e 	bl	8023fac <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022b1a:	4619      	mov	r1, r3
 8022b1c:	4809      	ldr	r0, [pc, #36]	; (8022b44 <BSP_LCD_MspInit+0x1a8>)
 8022b1e:	f001 fa45 	bl	8023fac <HAL_GPIO_Init>
}
 8022b22:	bf00      	nop
 8022b24:	3738      	adds	r7, #56	; 0x38
 8022b26:	46bd      	mov	sp, r7
 8022b28:	bd80      	pop	{r7, pc}
 8022b2a:	bf00      	nop
 8022b2c:	40023800 	.word	0x40023800
 8022b30:	40020000 	.word	0x40020000
 8022b34:	40020400 	.word	0x40020400
 8022b38:	40020800 	.word	0x40020800
 8022b3c:	40020c00 	.word	0x40020c00
 8022b40:	40021400 	.word	0x40021400
 8022b44:	40021800 	.word	0x40021800

08022b48 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8022b48:	b5b0      	push	{r4, r5, r7, lr}
 8022b4a:	b082      	sub	sp, #8
 8022b4c:	af00      	add	r7, sp, #0
 8022b4e:	4603      	mov	r3, r0
 8022b50:	603a      	str	r2, [r7, #0]
 8022b52:	80fb      	strh	r3, [r7, #6]
 8022b54:	460b      	mov	r3, r1
 8022b56:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8022b58:	4b0c      	ldr	r3, [pc, #48]	; (8022b8c <BSP_LCD_DrawPixel+0x44>)
 8022b5a:	681b      	ldr	r3, [r3, #0]
 8022b5c:	4a0c      	ldr	r2, [pc, #48]	; (8022b90 <BSP_LCD_DrawPixel+0x48>)
 8022b5e:	2134      	movs	r1, #52	; 0x34
 8022b60:	fb01 f303 	mul.w	r3, r1, r3
 8022b64:	4413      	add	r3, r2
 8022b66:	335c      	adds	r3, #92	; 0x5c
 8022b68:	681c      	ldr	r4, [r3, #0]
 8022b6a:	88bd      	ldrh	r5, [r7, #4]
 8022b6c:	f7ff fcb2 	bl	80224d4 <BSP_LCD_GetXSize>
 8022b70:	4603      	mov	r3, r0
 8022b72:	fb03 f205 	mul.w	r2, r3, r5
 8022b76:	88fb      	ldrh	r3, [r7, #6]
 8022b78:	4413      	add	r3, r2
 8022b7a:	009b      	lsls	r3, r3, #2
 8022b7c:	4423      	add	r3, r4
 8022b7e:	461a      	mov	r2, r3
 8022b80:	683b      	ldr	r3, [r7, #0]
 8022b82:	6013      	str	r3, [r2, #0]
}
 8022b84:	bf00      	nop
 8022b86:	3708      	adds	r7, #8
 8022b88:	46bd      	mov	sp, r7
 8022b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8022b8c:	200009e0 	.word	0x200009e0
 8022b90:	200008c8 	.word	0x200008c8

08022b94 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8022b94:	b580      	push	{r7, lr}
 8022b96:	b088      	sub	sp, #32
 8022b98:	af00      	add	r7, sp, #0
 8022b9a:	4603      	mov	r3, r0
 8022b9c:	603a      	str	r2, [r7, #0]
 8022b9e:	80fb      	strh	r3, [r7, #6]
 8022ba0:	460b      	mov	r3, r1
 8022ba2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8022ba4:	2300      	movs	r3, #0
 8022ba6:	61fb      	str	r3, [r7, #28]
 8022ba8:	2300      	movs	r3, #0
 8022baa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8022bac:	2300      	movs	r3, #0
 8022bae:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8022bb0:	4b53      	ldr	r3, [pc, #332]	; (8022d00 <DrawChar+0x16c>)
 8022bb2:	681a      	ldr	r2, [r3, #0]
 8022bb4:	4953      	ldr	r1, [pc, #332]	; (8022d04 <DrawChar+0x170>)
 8022bb6:	4613      	mov	r3, r2
 8022bb8:	005b      	lsls	r3, r3, #1
 8022bba:	4413      	add	r3, r2
 8022bbc:	009b      	lsls	r3, r3, #2
 8022bbe:	440b      	add	r3, r1
 8022bc0:	3308      	adds	r3, #8
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	88db      	ldrh	r3, [r3, #6]
 8022bc6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022bc8:	4b4d      	ldr	r3, [pc, #308]	; (8022d00 <DrawChar+0x16c>)
 8022bca:	681a      	ldr	r2, [r3, #0]
 8022bcc:	494d      	ldr	r1, [pc, #308]	; (8022d04 <DrawChar+0x170>)
 8022bce:	4613      	mov	r3, r2
 8022bd0:	005b      	lsls	r3, r3, #1
 8022bd2:	4413      	add	r3, r2
 8022bd4:	009b      	lsls	r3, r3, #2
 8022bd6:	440b      	add	r3, r1
 8022bd8:	3308      	adds	r3, #8
 8022bda:	681b      	ldr	r3, [r3, #0]
 8022bdc:	889b      	ldrh	r3, [r3, #4]
 8022bde:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8022be0:	8a3b      	ldrh	r3, [r7, #16]
 8022be2:	3307      	adds	r3, #7
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	da00      	bge.n	8022bea <DrawChar+0x56>
 8022be8:	3307      	adds	r3, #7
 8022bea:	10db      	asrs	r3, r3, #3
 8022bec:	b2db      	uxtb	r3, r3
 8022bee:	00db      	lsls	r3, r3, #3
 8022bf0:	b2da      	uxtb	r2, r3
 8022bf2:	8a3b      	ldrh	r3, [r7, #16]
 8022bf4:	b2db      	uxtb	r3, r3
 8022bf6:	1ad3      	subs	r3, r2, r3
 8022bf8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	61fb      	str	r3, [r7, #28]
 8022bfe:	e076      	b.n	8022cee <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8022c00:	8a3b      	ldrh	r3, [r7, #16]
 8022c02:	3307      	adds	r3, #7
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	da00      	bge.n	8022c0a <DrawChar+0x76>
 8022c08:	3307      	adds	r3, #7
 8022c0a:	10db      	asrs	r3, r3, #3
 8022c0c:	461a      	mov	r2, r3
 8022c0e:	69fb      	ldr	r3, [r7, #28]
 8022c10:	fb02 f303 	mul.w	r3, r2, r3
 8022c14:	683a      	ldr	r2, [r7, #0]
 8022c16:	4413      	add	r3, r2
 8022c18:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8022c1a:	8a3b      	ldrh	r3, [r7, #16]
 8022c1c:	3307      	adds	r3, #7
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	da00      	bge.n	8022c24 <DrawChar+0x90>
 8022c22:	3307      	adds	r3, #7
 8022c24:	10db      	asrs	r3, r3, #3
 8022c26:	2b01      	cmp	r3, #1
 8022c28:	d002      	beq.n	8022c30 <DrawChar+0x9c>
 8022c2a:	2b02      	cmp	r3, #2
 8022c2c:	d004      	beq.n	8022c38 <DrawChar+0xa4>
 8022c2e:	e00c      	b.n	8022c4a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8022c30:	68bb      	ldr	r3, [r7, #8]
 8022c32:	781b      	ldrb	r3, [r3, #0]
 8022c34:	617b      	str	r3, [r7, #20]
      break;
 8022c36:	e016      	b.n	8022c66 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8022c38:	68bb      	ldr	r3, [r7, #8]
 8022c3a:	781b      	ldrb	r3, [r3, #0]
 8022c3c:	021b      	lsls	r3, r3, #8
 8022c3e:	68ba      	ldr	r2, [r7, #8]
 8022c40:	3201      	adds	r2, #1
 8022c42:	7812      	ldrb	r2, [r2, #0]
 8022c44:	4313      	orrs	r3, r2
 8022c46:	617b      	str	r3, [r7, #20]
      break;
 8022c48:	e00d      	b.n	8022c66 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8022c4a:	68bb      	ldr	r3, [r7, #8]
 8022c4c:	781b      	ldrb	r3, [r3, #0]
 8022c4e:	041a      	lsls	r2, r3, #16
 8022c50:	68bb      	ldr	r3, [r7, #8]
 8022c52:	3301      	adds	r3, #1
 8022c54:	781b      	ldrb	r3, [r3, #0]
 8022c56:	021b      	lsls	r3, r3, #8
 8022c58:	4313      	orrs	r3, r2
 8022c5a:	68ba      	ldr	r2, [r7, #8]
 8022c5c:	3202      	adds	r2, #2
 8022c5e:	7812      	ldrb	r2, [r2, #0]
 8022c60:	4313      	orrs	r3, r2
 8022c62:	617b      	str	r3, [r7, #20]
      break;
 8022c64:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8022c66:	2300      	movs	r3, #0
 8022c68:	61bb      	str	r3, [r7, #24]
 8022c6a:	e036      	b.n	8022cda <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8022c6c:	8a3a      	ldrh	r2, [r7, #16]
 8022c6e:	69bb      	ldr	r3, [r7, #24]
 8022c70:	1ad2      	subs	r2, r2, r3
 8022c72:	7bfb      	ldrb	r3, [r7, #15]
 8022c74:	4413      	add	r3, r2
 8022c76:	3b01      	subs	r3, #1
 8022c78:	2201      	movs	r2, #1
 8022c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8022c7e:	461a      	mov	r2, r3
 8022c80:	697b      	ldr	r3, [r7, #20]
 8022c82:	4013      	ands	r3, r2
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d012      	beq.n	8022cae <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8022c88:	69bb      	ldr	r3, [r7, #24]
 8022c8a:	b29a      	uxth	r2, r3
 8022c8c:	88fb      	ldrh	r3, [r7, #6]
 8022c8e:	4413      	add	r3, r2
 8022c90:	b298      	uxth	r0, r3
 8022c92:	4b1b      	ldr	r3, [pc, #108]	; (8022d00 <DrawChar+0x16c>)
 8022c94:	681a      	ldr	r2, [r3, #0]
 8022c96:	491b      	ldr	r1, [pc, #108]	; (8022d04 <DrawChar+0x170>)
 8022c98:	4613      	mov	r3, r2
 8022c9a:	005b      	lsls	r3, r3, #1
 8022c9c:	4413      	add	r3, r2
 8022c9e:	009b      	lsls	r3, r3, #2
 8022ca0:	440b      	add	r3, r1
 8022ca2:	681a      	ldr	r2, [r3, #0]
 8022ca4:	88bb      	ldrh	r3, [r7, #4]
 8022ca6:	4619      	mov	r1, r3
 8022ca8:	f7ff ff4e 	bl	8022b48 <BSP_LCD_DrawPixel>
 8022cac:	e012      	b.n	8022cd4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8022cae:	69bb      	ldr	r3, [r7, #24]
 8022cb0:	b29a      	uxth	r2, r3
 8022cb2:	88fb      	ldrh	r3, [r7, #6]
 8022cb4:	4413      	add	r3, r2
 8022cb6:	b298      	uxth	r0, r3
 8022cb8:	4b11      	ldr	r3, [pc, #68]	; (8022d00 <DrawChar+0x16c>)
 8022cba:	681a      	ldr	r2, [r3, #0]
 8022cbc:	4911      	ldr	r1, [pc, #68]	; (8022d04 <DrawChar+0x170>)
 8022cbe:	4613      	mov	r3, r2
 8022cc0:	005b      	lsls	r3, r3, #1
 8022cc2:	4413      	add	r3, r2
 8022cc4:	009b      	lsls	r3, r3, #2
 8022cc6:	440b      	add	r3, r1
 8022cc8:	3304      	adds	r3, #4
 8022cca:	681a      	ldr	r2, [r3, #0]
 8022ccc:	88bb      	ldrh	r3, [r7, #4]
 8022cce:	4619      	mov	r1, r3
 8022cd0:	f7ff ff3a 	bl	8022b48 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8022cd4:	69bb      	ldr	r3, [r7, #24]
 8022cd6:	3301      	adds	r3, #1
 8022cd8:	61bb      	str	r3, [r7, #24]
 8022cda:	8a3b      	ldrh	r3, [r7, #16]
 8022cdc:	69ba      	ldr	r2, [r7, #24]
 8022cde:	429a      	cmp	r2, r3
 8022ce0:	d3c4      	bcc.n	8022c6c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8022ce2:	88bb      	ldrh	r3, [r7, #4]
 8022ce4:	3301      	adds	r3, #1
 8022ce6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8022ce8:	69fb      	ldr	r3, [r7, #28]
 8022cea:	3301      	adds	r3, #1
 8022cec:	61fb      	str	r3, [r7, #28]
 8022cee:	8a7b      	ldrh	r3, [r7, #18]
 8022cf0:	69fa      	ldr	r2, [r7, #28]
 8022cf2:	429a      	cmp	r2, r3
 8022cf4:	d384      	bcc.n	8022c00 <DrawChar+0x6c>
  }
}
 8022cf6:	bf00      	nop
 8022cf8:	bf00      	nop
 8022cfa:	3720      	adds	r7, #32
 8022cfc:	46bd      	mov	sp, r7
 8022cfe:	bd80      	pop	{r7, pc}
 8022d00:	200009e0 	.word	0x200009e0
 8022d04:	200009e4 	.word	0x200009e4

08022d08 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b086      	sub	sp, #24
 8022d0c:	af02      	add	r7, sp, #8
 8022d0e:	60f8      	str	r0, [r7, #12]
 8022d10:	60b9      	str	r1, [r7, #8]
 8022d12:	607a      	str	r2, [r7, #4]
 8022d14:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8022d16:	4b16      	ldr	r3, [pc, #88]	; (8022d70 <FillBuffer+0x68>)
 8022d18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8022d1c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8022d1e:	4b14      	ldr	r3, [pc, #80]	; (8022d70 <FillBuffer+0x68>)
 8022d20:	2200      	movs	r2, #0
 8022d22:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8022d24:	4a12      	ldr	r2, [pc, #72]	; (8022d70 <FillBuffer+0x68>)
 8022d26:	69bb      	ldr	r3, [r7, #24]
 8022d28:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8022d2a:	4b11      	ldr	r3, [pc, #68]	; (8022d70 <FillBuffer+0x68>)
 8022d2c:	4a11      	ldr	r2, [pc, #68]	; (8022d74 <FillBuffer+0x6c>)
 8022d2e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8022d30:	480f      	ldr	r0, [pc, #60]	; (8022d70 <FillBuffer+0x68>)
 8022d32:	f000 fd9f 	bl	8023874 <HAL_DMA2D_Init>
 8022d36:	4603      	mov	r3, r0
 8022d38:	2b00      	cmp	r3, #0
 8022d3a:	d115      	bne.n	8022d68 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8022d3c:	68f9      	ldr	r1, [r7, #12]
 8022d3e:	480c      	ldr	r0, [pc, #48]	; (8022d70 <FillBuffer+0x68>)
 8022d40:	f001 f806 	bl	8023d50 <HAL_DMA2D_ConfigLayer>
 8022d44:	4603      	mov	r3, r0
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d10e      	bne.n	8022d68 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8022d4a:	68ba      	ldr	r2, [r7, #8]
 8022d4c:	683b      	ldr	r3, [r7, #0]
 8022d4e:	9300      	str	r3, [sp, #0]
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	69f9      	ldr	r1, [r7, #28]
 8022d54:	4806      	ldr	r0, [pc, #24]	; (8022d70 <FillBuffer+0x68>)
 8022d56:	f000 fdd6 	bl	8023906 <HAL_DMA2D_Start>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d103      	bne.n	8022d68 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8022d60:	210a      	movs	r1, #10
 8022d62:	4803      	ldr	r0, [pc, #12]	; (8022d70 <FillBuffer+0x68>)
 8022d64:	f000 fdfa 	bl	802395c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8022d68:	bf00      	nop
 8022d6a:	3710      	adds	r7, #16
 8022d6c:	46bd      	mov	sp, r7
 8022d6e:	bd80      	pop	{r7, pc}
 8022d70:	20000970 	.word	0x20000970
 8022d74:	4002b000 	.word	0x4002b000

08022d78 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8022d78:	b580      	push	{r7, lr}
 8022d7a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8022d7c:	4b29      	ldr	r3, [pc, #164]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022d7e:	4a2a      	ldr	r2, [pc, #168]	; (8022e28 <BSP_SDRAM_Init+0xb0>)
 8022d80:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8022d82:	4b2a      	ldr	r3, [pc, #168]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022d84:	2202      	movs	r2, #2
 8022d86:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8022d88:	4b28      	ldr	r3, [pc, #160]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022d8a:	2207      	movs	r2, #7
 8022d8c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8022d8e:	4b27      	ldr	r3, [pc, #156]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022d90:	2204      	movs	r2, #4
 8022d92:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8022d94:	4b25      	ldr	r3, [pc, #148]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022d96:	2207      	movs	r2, #7
 8022d98:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8022d9a:	4b24      	ldr	r3, [pc, #144]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022d9c:	2202      	movs	r2, #2
 8022d9e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8022da0:	4b22      	ldr	r3, [pc, #136]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022da2:	2202      	movs	r2, #2
 8022da4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8022da6:	4b21      	ldr	r3, [pc, #132]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022da8:	2202      	movs	r2, #2
 8022daa:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8022dac:	4b1d      	ldr	r3, [pc, #116]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dae:	2201      	movs	r2, #1
 8022db0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8022db2:	4b1c      	ldr	r3, [pc, #112]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022db4:	2200      	movs	r2, #0
 8022db6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8022db8:	4b1a      	ldr	r3, [pc, #104]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dba:	2204      	movs	r2, #4
 8022dbc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8022dbe:	4b19      	ldr	r3, [pc, #100]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dc0:	2210      	movs	r2, #16
 8022dc2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8022dc4:	4b17      	ldr	r3, [pc, #92]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dc6:	2240      	movs	r2, #64	; 0x40
 8022dc8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8022dca:	4b16      	ldr	r3, [pc, #88]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dcc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8022dd0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8022dd2:	4b14      	ldr	r3, [pc, #80]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dd4:	2200      	movs	r2, #0
 8022dd6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8022dd8:	4b12      	ldr	r3, [pc, #72]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022dde:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8022de0:	4b10      	ldr	r3, [pc, #64]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022de2:	2200      	movs	r2, #0
 8022de4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8022de6:	4b0f      	ldr	r3, [pc, #60]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022dec:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8022dee:	2100      	movs	r1, #0
 8022df0:	480c      	ldr	r0, [pc, #48]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022df2:	f000 f87f 	bl	8022ef4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8022df6:	490d      	ldr	r1, [pc, #52]	; (8022e2c <BSP_SDRAM_Init+0xb4>)
 8022df8:	480a      	ldr	r0, [pc, #40]	; (8022e24 <BSP_SDRAM_Init+0xac>)
 8022dfa:	f004 fc25 	bl	8027648 <HAL_SDRAM_Init>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	d003      	beq.n	8022e0c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8022e04:	4b0a      	ldr	r3, [pc, #40]	; (8022e30 <BSP_SDRAM_Init+0xb8>)
 8022e06:	2201      	movs	r2, #1
 8022e08:	701a      	strb	r2, [r3, #0]
 8022e0a:	e002      	b.n	8022e12 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8022e0c:	4b08      	ldr	r3, [pc, #32]	; (8022e30 <BSP_SDRAM_Init+0xb8>)
 8022e0e:	2200      	movs	r2, #0
 8022e10:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8022e12:	f240 506a 	movw	r0, #1386	; 0x56a
 8022e16:	f000 f80d 	bl	8022e34 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8022e1a:	4b05      	ldr	r3, [pc, #20]	; (8022e30 <BSP_SDRAM_Init+0xb8>)
 8022e1c:	781b      	ldrb	r3, [r3, #0]
}
 8022e1e:	4618      	mov	r0, r3
 8022e20:	bd80      	pop	{r7, pc}
 8022e22:	bf00      	nop
 8022e24:	20000a00 	.word	0x20000a00
 8022e28:	a0000140 	.word	0xa0000140
 8022e2c:	20000a34 	.word	0x20000a34
 8022e30:	20000050 	.word	0x20000050

08022e34 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8022e34:	b580      	push	{r7, lr}
 8022e36:	b084      	sub	sp, #16
 8022e38:	af00      	add	r7, sp, #0
 8022e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8022e3c:	2300      	movs	r3, #0
 8022e3e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8022e40:	4b2a      	ldr	r3, [pc, #168]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e42:	2201      	movs	r2, #1
 8022e44:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022e46:	4b29      	ldr	r3, [pc, #164]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e48:	2208      	movs	r2, #8
 8022e4a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022e4c:	4b27      	ldr	r3, [pc, #156]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e4e:	2201      	movs	r2, #1
 8022e50:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022e52:	4b26      	ldr	r3, [pc, #152]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e54:	2200      	movs	r2, #0
 8022e56:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e5c:	4923      	ldr	r1, [pc, #140]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e5e:	4824      	ldr	r0, [pc, #144]	; (8022ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022e60:	f004 fc26 	bl	80276b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8022e64:	2001      	movs	r0, #1
 8022e66:	f000 f993 	bl	8023190 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8022e6a:	4b20      	ldr	r3, [pc, #128]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e6c:	2202      	movs	r2, #2
 8022e6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022e70:	4b1e      	ldr	r3, [pc, #120]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e72:	2208      	movs	r2, #8
 8022e74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022e76:	4b1d      	ldr	r3, [pc, #116]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e78:	2201      	movs	r2, #1
 8022e7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022e7c:	4b1b      	ldr	r3, [pc, #108]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e7e:	2200      	movs	r2, #0
 8022e80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8022e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e86:	4919      	ldr	r1, [pc, #100]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e88:	4819      	ldr	r0, [pc, #100]	; (8022ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022e8a:	f004 fc11 	bl	80276b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8022e8e:	4b17      	ldr	r3, [pc, #92]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e90:	2203      	movs	r2, #3
 8022e92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022e94:	4b15      	ldr	r3, [pc, #84]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e96:	2208      	movs	r2, #8
 8022e98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8022e9a:	4b14      	ldr	r3, [pc, #80]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e9c:	2204      	movs	r2, #4
 8022e9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022ea0:	4b12      	ldr	r3, [pc, #72]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ea2:	2200      	movs	r2, #0
 8022ea4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022eaa:	4910      	ldr	r1, [pc, #64]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022eac:	4810      	ldr	r0, [pc, #64]	; (8022ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022eae:	f004 fbff 	bl	80276b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8022eb2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8022eb6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8022eb8:	4b0c      	ldr	r3, [pc, #48]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022eba:	2204      	movs	r2, #4
 8022ebc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022ebe:	4b0b      	ldr	r3, [pc, #44]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ec0:	2208      	movs	r2, #8
 8022ec2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022ec4:	4b09      	ldr	r3, [pc, #36]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ec6:	2201      	movs	r2, #1
 8022ec8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8022eca:	68fb      	ldr	r3, [r7, #12]
 8022ecc:	4a07      	ldr	r2, [pc, #28]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ece:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022ed4:	4905      	ldr	r1, [pc, #20]	; (8022eec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ed6:	4806      	ldr	r0, [pc, #24]	; (8022ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022ed8:	f004 fbea 	bl	80276b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8022edc:	6879      	ldr	r1, [r7, #4]
 8022ede:	4804      	ldr	r0, [pc, #16]	; (8022ef0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022ee0:	f004 fc1b 	bl	802771a <HAL_SDRAM_ProgramRefreshRate>
}
 8022ee4:	bf00      	nop
 8022ee6:	3710      	adds	r7, #16
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	bd80      	pop	{r7, pc}
 8022eec:	20000a50 	.word	0x20000a50
 8022ef0:	20000a00 	.word	0x20000a00

08022ef4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8022ef4:	b580      	push	{r7, lr}
 8022ef6:	b090      	sub	sp, #64	; 0x40
 8022ef8:	af00      	add	r7, sp, #0
 8022efa:	6078      	str	r0, [r7, #4]
 8022efc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	2b00      	cmp	r3, #0
 8022f02:	f000 80ec 	beq.w	80230de <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8022f06:	2300      	movs	r3, #0
 8022f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8022f0a:	4b77      	ldr	r3, [pc, #476]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f0e:	4a76      	ldr	r2, [pc, #472]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f10:	f043 0301 	orr.w	r3, r3, #1
 8022f14:	6393      	str	r3, [r2, #56]	; 0x38
 8022f16:	4b74      	ldr	r3, [pc, #464]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f1a:	f003 0301 	and.w	r3, r3, #1
 8022f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8022f20:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8022f22:	2300      	movs	r3, #0
 8022f24:	627b      	str	r3, [r7, #36]	; 0x24
 8022f26:	4b70      	ldr	r3, [pc, #448]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f2a:	4a6f      	ldr	r2, [pc, #444]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022f30:	6313      	str	r3, [r2, #48]	; 0x30
 8022f32:	4b6d      	ldr	r3, [pc, #436]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8022f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022f3e:	2300      	movs	r3, #0
 8022f40:	623b      	str	r3, [r7, #32]
 8022f42:	4b69      	ldr	r3, [pc, #420]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f46:	4a68      	ldr	r2, [pc, #416]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f48:	f043 0302 	orr.w	r3, r3, #2
 8022f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f4e:	4b66      	ldr	r3, [pc, #408]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f52:	f003 0302 	and.w	r3, r3, #2
 8022f56:	623b      	str	r3, [r7, #32]
 8022f58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	61fb      	str	r3, [r7, #28]
 8022f5e:	4b62      	ldr	r3, [pc, #392]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f62:	4a61      	ldr	r2, [pc, #388]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f64:	f043 0304 	orr.w	r3, r3, #4
 8022f68:	6313      	str	r3, [r2, #48]	; 0x30
 8022f6a:	4b5f      	ldr	r3, [pc, #380]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f6e:	f003 0304 	and.w	r3, r3, #4
 8022f72:	61fb      	str	r3, [r7, #28]
 8022f74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022f76:	2300      	movs	r3, #0
 8022f78:	61bb      	str	r3, [r7, #24]
 8022f7a:	4b5b      	ldr	r3, [pc, #364]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f7e:	4a5a      	ldr	r2, [pc, #360]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f80:	f043 0308 	orr.w	r3, r3, #8
 8022f84:	6313      	str	r3, [r2, #48]	; 0x30
 8022f86:	4b58      	ldr	r3, [pc, #352]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f8a:	f003 0308 	and.w	r3, r3, #8
 8022f8e:	61bb      	str	r3, [r7, #24]
 8022f90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8022f92:	2300      	movs	r3, #0
 8022f94:	617b      	str	r3, [r7, #20]
 8022f96:	4b54      	ldr	r3, [pc, #336]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f9a:	4a53      	ldr	r2, [pc, #332]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022f9c:	f043 0310 	orr.w	r3, r3, #16
 8022fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8022fa2:	4b51      	ldr	r3, [pc, #324]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fa6:	f003 0310 	and.w	r3, r3, #16
 8022faa:	617b      	str	r3, [r7, #20]
 8022fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022fae:	2300      	movs	r3, #0
 8022fb0:	613b      	str	r3, [r7, #16]
 8022fb2:	4b4d      	ldr	r3, [pc, #308]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fb6:	4a4c      	ldr	r2, [pc, #304]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fb8:	f043 0320 	orr.w	r3, r3, #32
 8022fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8022fbe:	4b4a      	ldr	r3, [pc, #296]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fc2:	f003 0320 	and.w	r3, r3, #32
 8022fc6:	613b      	str	r3, [r7, #16]
 8022fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022fca:	2300      	movs	r3, #0
 8022fcc:	60fb      	str	r3, [r7, #12]
 8022fce:	4b46      	ldr	r3, [pc, #280]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fd2:	4a45      	ldr	r2, [pc, #276]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8022fda:	4b43      	ldr	r3, [pc, #268]	; (80230e8 <BSP_SDRAM_MspInit+0x1f4>)
 8022fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022fe2:	60fb      	str	r3, [r7, #12]
 8022fe4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8022fe6:	2302      	movs	r3, #2
 8022fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022fea:	2302      	movs	r3, #2
 8022fec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8022fee:	2300      	movs	r3, #0
 8022ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8022ff2:	230c      	movs	r3, #12
 8022ff4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8022ff6:	2360      	movs	r3, #96	; 0x60
 8022ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8022ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022ffe:	4619      	mov	r1, r3
 8023000:	483a      	ldr	r0, [pc, #232]	; (80230ec <BSP_SDRAM_MspInit+0x1f8>)
 8023002:	f000 ffd3 	bl	8023fac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8023006:	2301      	movs	r3, #1
 8023008:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 802300a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802300e:	4619      	mov	r1, r3
 8023010:	4837      	ldr	r0, [pc, #220]	; (80230f0 <BSP_SDRAM_MspInit+0x1fc>)
 8023012:	f000 ffcb 	bl	8023fac <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8023016:	f24c 7303 	movw	r3, #50947	; 0xc703
 802301a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 802301c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023020:	4619      	mov	r1, r3
 8023022:	4834      	ldr	r0, [pc, #208]	; (80230f4 <BSP_SDRAM_MspInit+0x200>)
 8023024:	f000 ffc2 	bl	8023fac <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8023028:	f64f 7383 	movw	r3, #65411	; 0xff83
 802302c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 802302e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023032:	4619      	mov	r1, r3
 8023034:	4830      	ldr	r0, [pc, #192]	; (80230f8 <BSP_SDRAM_MspInit+0x204>)
 8023036:	f000 ffb9 	bl	8023fac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 802303a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802303e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8023040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023044:	4619      	mov	r1, r3
 8023046:	482d      	ldr	r0, [pc, #180]	; (80230fc <BSP_SDRAM_MspInit+0x208>)
 8023048:	f000 ffb0 	bl	8023fac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 802304c:	f248 1333 	movw	r3, #33075	; 0x8133
 8023050:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8023052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023056:	4619      	mov	r1, r3
 8023058:	4829      	ldr	r0, [pc, #164]	; (8023100 <BSP_SDRAM_MspInit+0x20c>)
 802305a:	f000 ffa7 	bl	8023fac <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 802305e:	4b29      	ldr	r3, [pc, #164]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 8023060:	2200      	movs	r2, #0
 8023062:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023064:	4b27      	ldr	r3, [pc, #156]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 8023066:	2280      	movs	r2, #128	; 0x80
 8023068:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802306a:	4b26      	ldr	r3, [pc, #152]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 802306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023070:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8023072:	4b24      	ldr	r3, [pc, #144]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 8023074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023078:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802307a:	4b22      	ldr	r3, [pc, #136]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 802307c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023080:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8023082:	4b20      	ldr	r3, [pc, #128]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 8023084:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023088:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 802308a:	4b1e      	ldr	r3, [pc, #120]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 802308c:	2200      	movs	r2, #0
 802308e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8023090:	4b1c      	ldr	r3, [pc, #112]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 8023092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8023096:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8023098:	4b1a      	ldr	r3, [pc, #104]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 802309a:	2200      	movs	r2, #0
 802309c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802309e:	4b19      	ldr	r3, [pc, #100]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230a0:	2203      	movs	r2, #3
 80230a2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80230a4:	4b17      	ldr	r3, [pc, #92]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230a6:	2200      	movs	r2, #0
 80230a8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80230aa:	4b16      	ldr	r3, [pc, #88]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230ac:	2200      	movs	r2, #0
 80230ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80230b0:	4b14      	ldr	r3, [pc, #80]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230b2:	4a15      	ldr	r2, [pc, #84]	; (8023108 <BSP_SDRAM_MspInit+0x214>)
 80230b4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	4a12      	ldr	r2, [pc, #72]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230ba:	631a      	str	r2, [r3, #48]	; 0x30
 80230bc:	4a11      	ldr	r2, [pc, #68]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80230c2:	4810      	ldr	r0, [pc, #64]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230c4:	f000 fa34 	bl	8023530 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80230c8:	480e      	ldr	r0, [pc, #56]	; (8023104 <BSP_SDRAM_MspInit+0x210>)
 80230ca:	f000 f983 	bl	80233d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80230ce:	2200      	movs	r2, #0
 80230d0:	210f      	movs	r1, #15
 80230d2:	2038      	movs	r0, #56	; 0x38
 80230d4:	f000 f938 	bl	8023348 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80230d8:	2038      	movs	r0, #56	; 0x38
 80230da:	f000 f951 	bl	8023380 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80230de:	bf00      	nop
 80230e0:	3740      	adds	r7, #64	; 0x40
 80230e2:	46bd      	mov	sp, r7
 80230e4:	bd80      	pop	{r7, pc}
 80230e6:	bf00      	nop
 80230e8:	40023800 	.word	0x40023800
 80230ec:	40020400 	.word	0x40020400
 80230f0:	40020800 	.word	0x40020800
 80230f4:	40020c00 	.word	0x40020c00
 80230f8:	40021000 	.word	0x40021000
 80230fc:	40021400 	.word	0x40021400
 8023100:	40021800 	.word	0x40021800
 8023104:	20000a60 	.word	0x20000a60
 8023108:	40026410 	.word	0x40026410

0802310c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802310c:	b580      	push	{r7, lr}
 802310e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023110:	4b0e      	ldr	r3, [pc, #56]	; (802314c <HAL_Init+0x40>)
 8023112:	681b      	ldr	r3, [r3, #0]
 8023114:	4a0d      	ldr	r2, [pc, #52]	; (802314c <HAL_Init+0x40>)
 8023116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802311a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802311c:	4b0b      	ldr	r3, [pc, #44]	; (802314c <HAL_Init+0x40>)
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	4a0a      	ldr	r2, [pc, #40]	; (802314c <HAL_Init+0x40>)
 8023122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023128:	4b08      	ldr	r3, [pc, #32]	; (802314c <HAL_Init+0x40>)
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	4a07      	ldr	r2, [pc, #28]	; (802314c <HAL_Init+0x40>)
 802312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023134:	2003      	movs	r0, #3
 8023136:	f000 f8fc 	bl	8023332 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802313a:	200f      	movs	r0, #15
 802313c:	f7fe fc38 	bl	80219b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023140:	f7fe f85e 	bl	8021200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023144:	2300      	movs	r3, #0
}
 8023146:	4618      	mov	r0, r3
 8023148:	bd80      	pop	{r7, pc}
 802314a:	bf00      	nop
 802314c:	40023c00 	.word	0x40023c00

08023150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023150:	b480      	push	{r7}
 8023152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023154:	4b06      	ldr	r3, [pc, #24]	; (8023170 <HAL_IncTick+0x20>)
 8023156:	781b      	ldrb	r3, [r3, #0]
 8023158:	461a      	mov	r2, r3
 802315a:	4b06      	ldr	r3, [pc, #24]	; (8023174 <HAL_IncTick+0x24>)
 802315c:	681b      	ldr	r3, [r3, #0]
 802315e:	4413      	add	r3, r2
 8023160:	4a04      	ldr	r2, [pc, #16]	; (8023174 <HAL_IncTick+0x24>)
 8023162:	6013      	str	r3, [r2, #0]
}
 8023164:	bf00      	nop
 8023166:	46bd      	mov	sp, r7
 8023168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802316c:	4770      	bx	lr
 802316e:	bf00      	nop
 8023170:	20000058 	.word	0x20000058
 8023174:	20000ac0 	.word	0x20000ac0

08023178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023178:	b480      	push	{r7}
 802317a:	af00      	add	r7, sp, #0
  return uwTick;
 802317c:	4b03      	ldr	r3, [pc, #12]	; (802318c <HAL_GetTick+0x14>)
 802317e:	681b      	ldr	r3, [r3, #0]
}
 8023180:	4618      	mov	r0, r3
 8023182:	46bd      	mov	sp, r7
 8023184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023188:	4770      	bx	lr
 802318a:	bf00      	nop
 802318c:	20000ac0 	.word	0x20000ac0

08023190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023190:	b580      	push	{r7, lr}
 8023192:	b084      	sub	sp, #16
 8023194:	af00      	add	r7, sp, #0
 8023196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023198:	f7ff ffee 	bl	8023178 <HAL_GetTick>
 802319c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802319e:	687b      	ldr	r3, [r7, #4]
 80231a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80231a8:	d005      	beq.n	80231b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80231aa:	4b0a      	ldr	r3, [pc, #40]	; (80231d4 <HAL_Delay+0x44>)
 80231ac:	781b      	ldrb	r3, [r3, #0]
 80231ae:	461a      	mov	r2, r3
 80231b0:	68fb      	ldr	r3, [r7, #12]
 80231b2:	4413      	add	r3, r2
 80231b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80231b6:	bf00      	nop
 80231b8:	f7ff ffde 	bl	8023178 <HAL_GetTick>
 80231bc:	4602      	mov	r2, r0
 80231be:	68bb      	ldr	r3, [r7, #8]
 80231c0:	1ad3      	subs	r3, r2, r3
 80231c2:	68fa      	ldr	r2, [r7, #12]
 80231c4:	429a      	cmp	r2, r3
 80231c6:	d8f7      	bhi.n	80231b8 <HAL_Delay+0x28>
  {
  }
}
 80231c8:	bf00      	nop
 80231ca:	bf00      	nop
 80231cc:	3710      	adds	r7, #16
 80231ce:	46bd      	mov	sp, r7
 80231d0:	bd80      	pop	{r7, pc}
 80231d2:	bf00      	nop
 80231d4:	20000058 	.word	0x20000058

080231d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80231d8:	b480      	push	{r7}
 80231da:	b085      	sub	sp, #20
 80231dc:	af00      	add	r7, sp, #0
 80231de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	f003 0307 	and.w	r3, r3, #7
 80231e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80231e8:	4b0c      	ldr	r3, [pc, #48]	; (802321c <__NVIC_SetPriorityGrouping+0x44>)
 80231ea:	68db      	ldr	r3, [r3, #12]
 80231ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80231ee:	68ba      	ldr	r2, [r7, #8]
 80231f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80231f4:	4013      	ands	r3, r2
 80231f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80231f8:	68fb      	ldr	r3, [r7, #12]
 80231fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80231fc:	68bb      	ldr	r3, [r7, #8]
 80231fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8023200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802320a:	4a04      	ldr	r2, [pc, #16]	; (802321c <__NVIC_SetPriorityGrouping+0x44>)
 802320c:	68bb      	ldr	r3, [r7, #8]
 802320e:	60d3      	str	r3, [r2, #12]
}
 8023210:	bf00      	nop
 8023212:	3714      	adds	r7, #20
 8023214:	46bd      	mov	sp, r7
 8023216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802321a:	4770      	bx	lr
 802321c:	e000ed00 	.word	0xe000ed00

08023220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023220:	b480      	push	{r7}
 8023222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023224:	4b04      	ldr	r3, [pc, #16]	; (8023238 <__NVIC_GetPriorityGrouping+0x18>)
 8023226:	68db      	ldr	r3, [r3, #12]
 8023228:	0a1b      	lsrs	r3, r3, #8
 802322a:	f003 0307 	and.w	r3, r3, #7
}
 802322e:	4618      	mov	r0, r3
 8023230:	46bd      	mov	sp, r7
 8023232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023236:	4770      	bx	lr
 8023238:	e000ed00 	.word	0xe000ed00

0802323c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802323c:	b480      	push	{r7}
 802323e:	b083      	sub	sp, #12
 8023240:	af00      	add	r7, sp, #0
 8023242:	4603      	mov	r3, r0
 8023244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802324a:	2b00      	cmp	r3, #0
 802324c:	db0b      	blt.n	8023266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802324e:	79fb      	ldrb	r3, [r7, #7]
 8023250:	f003 021f 	and.w	r2, r3, #31
 8023254:	4907      	ldr	r1, [pc, #28]	; (8023274 <__NVIC_EnableIRQ+0x38>)
 8023256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802325a:	095b      	lsrs	r3, r3, #5
 802325c:	2001      	movs	r0, #1
 802325e:	fa00 f202 	lsl.w	r2, r0, r2
 8023262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023266:	bf00      	nop
 8023268:	370c      	adds	r7, #12
 802326a:	46bd      	mov	sp, r7
 802326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023270:	4770      	bx	lr
 8023272:	bf00      	nop
 8023274:	e000e100 	.word	0xe000e100

08023278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023278:	b480      	push	{r7}
 802327a:	b083      	sub	sp, #12
 802327c:	af00      	add	r7, sp, #0
 802327e:	4603      	mov	r3, r0
 8023280:	6039      	str	r1, [r7, #0]
 8023282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023288:	2b00      	cmp	r3, #0
 802328a:	db0a      	blt.n	80232a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802328c:	683b      	ldr	r3, [r7, #0]
 802328e:	b2da      	uxtb	r2, r3
 8023290:	490c      	ldr	r1, [pc, #48]	; (80232c4 <__NVIC_SetPriority+0x4c>)
 8023292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023296:	0112      	lsls	r2, r2, #4
 8023298:	b2d2      	uxtb	r2, r2
 802329a:	440b      	add	r3, r1
 802329c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80232a0:	e00a      	b.n	80232b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80232a2:	683b      	ldr	r3, [r7, #0]
 80232a4:	b2da      	uxtb	r2, r3
 80232a6:	4908      	ldr	r1, [pc, #32]	; (80232c8 <__NVIC_SetPriority+0x50>)
 80232a8:	79fb      	ldrb	r3, [r7, #7]
 80232aa:	f003 030f 	and.w	r3, r3, #15
 80232ae:	3b04      	subs	r3, #4
 80232b0:	0112      	lsls	r2, r2, #4
 80232b2:	b2d2      	uxtb	r2, r2
 80232b4:	440b      	add	r3, r1
 80232b6:	761a      	strb	r2, [r3, #24]
}
 80232b8:	bf00      	nop
 80232ba:	370c      	adds	r7, #12
 80232bc:	46bd      	mov	sp, r7
 80232be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232c2:	4770      	bx	lr
 80232c4:	e000e100 	.word	0xe000e100
 80232c8:	e000ed00 	.word	0xe000ed00

080232cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80232cc:	b480      	push	{r7}
 80232ce:	b089      	sub	sp, #36	; 0x24
 80232d0:	af00      	add	r7, sp, #0
 80232d2:	60f8      	str	r0, [r7, #12]
 80232d4:	60b9      	str	r1, [r7, #8]
 80232d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80232d8:	68fb      	ldr	r3, [r7, #12]
 80232da:	f003 0307 	and.w	r3, r3, #7
 80232de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80232e0:	69fb      	ldr	r3, [r7, #28]
 80232e2:	f1c3 0307 	rsb	r3, r3, #7
 80232e6:	2b04      	cmp	r3, #4
 80232e8:	bf28      	it	cs
 80232ea:	2304      	movcs	r3, #4
 80232ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80232ee:	69fb      	ldr	r3, [r7, #28]
 80232f0:	3304      	adds	r3, #4
 80232f2:	2b06      	cmp	r3, #6
 80232f4:	d902      	bls.n	80232fc <NVIC_EncodePriority+0x30>
 80232f6:	69fb      	ldr	r3, [r7, #28]
 80232f8:	3b03      	subs	r3, #3
 80232fa:	e000      	b.n	80232fe <NVIC_EncodePriority+0x32>
 80232fc:	2300      	movs	r3, #0
 80232fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023300:	f04f 32ff 	mov.w	r2, #4294967295
 8023304:	69bb      	ldr	r3, [r7, #24]
 8023306:	fa02 f303 	lsl.w	r3, r2, r3
 802330a:	43da      	mvns	r2, r3
 802330c:	68bb      	ldr	r3, [r7, #8]
 802330e:	401a      	ands	r2, r3
 8023310:	697b      	ldr	r3, [r7, #20]
 8023312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023314:	f04f 31ff 	mov.w	r1, #4294967295
 8023318:	697b      	ldr	r3, [r7, #20]
 802331a:	fa01 f303 	lsl.w	r3, r1, r3
 802331e:	43d9      	mvns	r1, r3
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023324:	4313      	orrs	r3, r2
         );
}
 8023326:	4618      	mov	r0, r3
 8023328:	3724      	adds	r7, #36	; 0x24
 802332a:	46bd      	mov	sp, r7
 802332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023330:	4770      	bx	lr

08023332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023332:	b580      	push	{r7, lr}
 8023334:	b082      	sub	sp, #8
 8023336:	af00      	add	r7, sp, #0
 8023338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802333a:	6878      	ldr	r0, [r7, #4]
 802333c:	f7ff ff4c 	bl	80231d8 <__NVIC_SetPriorityGrouping>
}
 8023340:	bf00      	nop
 8023342:	3708      	adds	r7, #8
 8023344:	46bd      	mov	sp, r7
 8023346:	bd80      	pop	{r7, pc}

08023348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023348:	b580      	push	{r7, lr}
 802334a:	b086      	sub	sp, #24
 802334c:	af00      	add	r7, sp, #0
 802334e:	4603      	mov	r3, r0
 8023350:	60b9      	str	r1, [r7, #8]
 8023352:	607a      	str	r2, [r7, #4]
 8023354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023356:	2300      	movs	r3, #0
 8023358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802335a:	f7ff ff61 	bl	8023220 <__NVIC_GetPriorityGrouping>
 802335e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023360:	687a      	ldr	r2, [r7, #4]
 8023362:	68b9      	ldr	r1, [r7, #8]
 8023364:	6978      	ldr	r0, [r7, #20]
 8023366:	f7ff ffb1 	bl	80232cc <NVIC_EncodePriority>
 802336a:	4602      	mov	r2, r0
 802336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023370:	4611      	mov	r1, r2
 8023372:	4618      	mov	r0, r3
 8023374:	f7ff ff80 	bl	8023278 <__NVIC_SetPriority>
}
 8023378:	bf00      	nop
 802337a:	3718      	adds	r7, #24
 802337c:	46bd      	mov	sp, r7
 802337e:	bd80      	pop	{r7, pc}

08023380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023380:	b580      	push	{r7, lr}
 8023382:	b082      	sub	sp, #8
 8023384:	af00      	add	r7, sp, #0
 8023386:	4603      	mov	r3, r0
 8023388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802338e:	4618      	mov	r0, r3
 8023390:	f7ff ff54 	bl	802323c <__NVIC_EnableIRQ>
}
 8023394:	bf00      	nop
 8023396:	3708      	adds	r7, #8
 8023398:	46bd      	mov	sp, r7
 802339a:	bd80      	pop	{r7, pc}

0802339c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802339c:	b580      	push	{r7, lr}
 802339e:	b082      	sub	sp, #8
 80233a0:	af00      	add	r7, sp, #0
 80233a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	d101      	bne.n	80233ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80233aa:	2301      	movs	r3, #1
 80233ac:	e00e      	b.n	80233cc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	795b      	ldrb	r3, [r3, #5]
 80233b2:	b2db      	uxtb	r3, r3
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	d105      	bne.n	80233c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80233b8:	687b      	ldr	r3, [r7, #4]
 80233ba:	2200      	movs	r2, #0
 80233bc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80233be:	6878      	ldr	r0, [r7, #4]
 80233c0:	f7fd ff46 	bl	8021250 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	2201      	movs	r2, #1
 80233c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80233ca:	2300      	movs	r3, #0
}
 80233cc:	4618      	mov	r0, r3
 80233ce:	3708      	adds	r7, #8
 80233d0:	46bd      	mov	sp, r7
 80233d2:	bd80      	pop	{r7, pc}

080233d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80233d4:	b580      	push	{r7, lr}
 80233d6:	b086      	sub	sp, #24
 80233d8:	af00      	add	r7, sp, #0
 80233da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80233dc:	2300      	movs	r3, #0
 80233de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80233e0:	f7ff feca 	bl	8023178 <HAL_GetTick>
 80233e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	d101      	bne.n	80233f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80233ec:	2301      	movs	r3, #1
 80233ee:	e099      	b.n	8023524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	2202      	movs	r2, #2
 80233f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	2200      	movs	r2, #0
 80233fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023400:	687b      	ldr	r3, [r7, #4]
 8023402:	681b      	ldr	r3, [r3, #0]
 8023404:	681a      	ldr	r2, [r3, #0]
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	f022 0201 	bic.w	r2, r2, #1
 802340e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023410:	e00f      	b.n	8023432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023412:	f7ff feb1 	bl	8023178 <HAL_GetTick>
 8023416:	4602      	mov	r2, r0
 8023418:	693b      	ldr	r3, [r7, #16]
 802341a:	1ad3      	subs	r3, r2, r3
 802341c:	2b05      	cmp	r3, #5
 802341e:	d908      	bls.n	8023432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	2220      	movs	r2, #32
 8023424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023426:	687b      	ldr	r3, [r7, #4]
 8023428:	2203      	movs	r2, #3
 802342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802342e:	2303      	movs	r3, #3
 8023430:	e078      	b.n	8023524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	f003 0301 	and.w	r3, r3, #1
 802343c:	2b00      	cmp	r3, #0
 802343e:	d1e8      	bne.n	8023412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	681b      	ldr	r3, [r3, #0]
 8023446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8023448:	697a      	ldr	r2, [r7, #20]
 802344a:	4b38      	ldr	r3, [pc, #224]	; (802352c <HAL_DMA_Init+0x158>)
 802344c:	4013      	ands	r3, r2
 802344e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	685a      	ldr	r2, [r3, #4]
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	689b      	ldr	r3, [r3, #8]
 8023458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	691b      	ldr	r3, [r3, #16]
 8023464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802346c:	687b      	ldr	r3, [r7, #4]
 802346e:	699b      	ldr	r3, [r3, #24]
 8023470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023472:	687b      	ldr	r3, [r7, #4]
 8023474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	6a1b      	ldr	r3, [r3, #32]
 802347c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802347e:	697a      	ldr	r2, [r7, #20]
 8023480:	4313      	orrs	r3, r2
 8023482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023488:	2b04      	cmp	r3, #4
 802348a:	d107      	bne.n	802349c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023494:	4313      	orrs	r3, r2
 8023496:	697a      	ldr	r2, [r7, #20]
 8023498:	4313      	orrs	r3, r2
 802349a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	697a      	ldr	r2, [r7, #20]
 80234a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	681b      	ldr	r3, [r3, #0]
 80234a8:	695b      	ldr	r3, [r3, #20]
 80234aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80234ac:	697b      	ldr	r3, [r7, #20]
 80234ae:	f023 0307 	bic.w	r3, r3, #7
 80234b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234b8:	697a      	ldr	r2, [r7, #20]
 80234ba:	4313      	orrs	r3, r2
 80234bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234c2:	2b04      	cmp	r3, #4
 80234c4:	d117      	bne.n	80234f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80234c6:	687b      	ldr	r3, [r7, #4]
 80234c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234ca:	697a      	ldr	r2, [r7, #20]
 80234cc:	4313      	orrs	r3, r2
 80234ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80234d0:	687b      	ldr	r3, [r7, #4]
 80234d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d00e      	beq.n	80234f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80234d8:	6878      	ldr	r0, [r7, #4]
 80234da:	f000 f94f 	bl	802377c <DMA_CheckFifoParam>
 80234de:	4603      	mov	r3, r0
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d008      	beq.n	80234f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	2240      	movs	r2, #64	; 0x40
 80234e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	2201      	movs	r2, #1
 80234ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80234f2:	2301      	movs	r3, #1
 80234f4:	e016      	b.n	8023524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80234f6:	687b      	ldr	r3, [r7, #4]
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	697a      	ldr	r2, [r7, #20]
 80234fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80234fe:	6878      	ldr	r0, [r7, #4]
 8023500:	f000 f906 	bl	8023710 <DMA_CalcBaseAndBitshift>
 8023504:	4603      	mov	r3, r0
 8023506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802350c:	223f      	movs	r2, #63	; 0x3f
 802350e:	409a      	lsls	r2, r3
 8023510:	68fb      	ldr	r3, [r7, #12]
 8023512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	2200      	movs	r2, #0
 8023518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	2201      	movs	r2, #1
 802351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023522:	2300      	movs	r3, #0
}
 8023524:	4618      	mov	r0, r3
 8023526:	3718      	adds	r7, #24
 8023528:	46bd      	mov	sp, r7
 802352a:	bd80      	pop	{r7, pc}
 802352c:	f010803f 	.word	0xf010803f

08023530 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023530:	b580      	push	{r7, lr}
 8023532:	b084      	sub	sp, #16
 8023534:	af00      	add	r7, sp, #0
 8023536:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	2b00      	cmp	r3, #0
 802353c:	d101      	bne.n	8023542 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 802353e:	2301      	movs	r3, #1
 8023540:	e050      	b.n	80235e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023548:	b2db      	uxtb	r3, r3
 802354a:	2b02      	cmp	r3, #2
 802354c:	d101      	bne.n	8023552 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 802354e:	2302      	movs	r3, #2
 8023550:	e048      	b.n	80235e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	681b      	ldr	r3, [r3, #0]
 8023556:	681a      	ldr	r2, [r3, #0]
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	f022 0201 	bic.w	r2, r2, #1
 8023560:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	681b      	ldr	r3, [r3, #0]
 8023566:	2200      	movs	r2, #0
 8023568:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	2200      	movs	r2, #0
 8023570:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	2200      	movs	r2, #0
 8023578:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	2200      	movs	r2, #0
 8023580:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	2200      	movs	r2, #0
 8023588:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 802358a:	687b      	ldr	r3, [r7, #4]
 802358c:	681b      	ldr	r3, [r3, #0]
 802358e:	2221      	movs	r2, #33	; 0x21
 8023590:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023592:	6878      	ldr	r0, [r7, #4]
 8023594:	f000 f8bc 	bl	8023710 <DMA_CalcBaseAndBitshift>
 8023598:	4603      	mov	r3, r0
 802359a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	2200      	movs	r2, #0
 80235a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80235a2:	687b      	ldr	r3, [r7, #4]
 80235a4:	2200      	movs	r2, #0
 80235a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	2200      	movs	r2, #0
 80235ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	2200      	movs	r2, #0
 80235b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80235b4:	687b      	ldr	r3, [r7, #4]
 80235b6:	2200      	movs	r2, #0
 80235b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	2200      	movs	r2, #0
 80235be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80235c4:	223f      	movs	r2, #63	; 0x3f
 80235c6:	409a      	lsls	r2, r3
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	2200      	movs	r2, #0
 80235d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	2200      	movs	r2, #0
 80235d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	2200      	movs	r2, #0
 80235de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80235e2:	2300      	movs	r3, #0
}
 80235e4:	4618      	mov	r0, r3
 80235e6:	3710      	adds	r7, #16
 80235e8:	46bd      	mov	sp, r7
 80235ea:	bd80      	pop	{r7, pc}

080235ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80235ec:	b580      	push	{r7, lr}
 80235ee:	b084      	sub	sp, #16
 80235f0:	af00      	add	r7, sp, #0
 80235f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80235f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80235fa:	f7ff fdbd 	bl	8023178 <HAL_GetTick>
 80235fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023606:	b2db      	uxtb	r3, r3
 8023608:	2b02      	cmp	r3, #2
 802360a:	d008      	beq.n	802361e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802360c:	687b      	ldr	r3, [r7, #4]
 802360e:	2280      	movs	r2, #128	; 0x80
 8023610:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023612:	687b      	ldr	r3, [r7, #4]
 8023614:	2200      	movs	r2, #0
 8023616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 802361a:	2301      	movs	r3, #1
 802361c:	e052      	b.n	80236c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	681b      	ldr	r3, [r3, #0]
 8023622:	681a      	ldr	r2, [r3, #0]
 8023624:	687b      	ldr	r3, [r7, #4]
 8023626:	681b      	ldr	r3, [r3, #0]
 8023628:	f022 0216 	bic.w	r2, r2, #22
 802362c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	695a      	ldr	r2, [r3, #20]
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802363c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023642:	2b00      	cmp	r3, #0
 8023644:	d103      	bne.n	802364e <HAL_DMA_Abort+0x62>
 8023646:	687b      	ldr	r3, [r7, #4]
 8023648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802364a:	2b00      	cmp	r3, #0
 802364c:	d007      	beq.n	802365e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	681a      	ldr	r2, [r3, #0]
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	f022 0208 	bic.w	r2, r2, #8
 802365c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	681a      	ldr	r2, [r3, #0]
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	681b      	ldr	r3, [r3, #0]
 8023668:	f022 0201 	bic.w	r2, r2, #1
 802366c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802366e:	e013      	b.n	8023698 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023670:	f7ff fd82 	bl	8023178 <HAL_GetTick>
 8023674:	4602      	mov	r2, r0
 8023676:	68bb      	ldr	r3, [r7, #8]
 8023678:	1ad3      	subs	r3, r2, r3
 802367a:	2b05      	cmp	r3, #5
 802367c:	d90c      	bls.n	8023698 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	2220      	movs	r2, #32
 8023682:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	2203      	movs	r2, #3
 8023688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	2200      	movs	r2, #0
 8023690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023694:	2303      	movs	r3, #3
 8023696:	e015      	b.n	80236c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	f003 0301 	and.w	r3, r3, #1
 80236a2:	2b00      	cmp	r3, #0
 80236a4:	d1e4      	bne.n	8023670 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80236a6:	687b      	ldr	r3, [r7, #4]
 80236a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80236aa:	223f      	movs	r2, #63	; 0x3f
 80236ac:	409a      	lsls	r2, r3
 80236ae:	68fb      	ldr	r3, [r7, #12]
 80236b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	2201      	movs	r2, #1
 80236b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	2200      	movs	r2, #0
 80236be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80236c2:	2300      	movs	r3, #0
}
 80236c4:	4618      	mov	r0, r3
 80236c6:	3710      	adds	r7, #16
 80236c8:	46bd      	mov	sp, r7
 80236ca:	bd80      	pop	{r7, pc}

080236cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80236cc:	b480      	push	{r7}
 80236ce:	b083      	sub	sp, #12
 80236d0:	af00      	add	r7, sp, #0
 80236d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80236da:	b2db      	uxtb	r3, r3
 80236dc:	2b02      	cmp	r3, #2
 80236de:	d004      	beq.n	80236ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	2280      	movs	r2, #128	; 0x80
 80236e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80236e6:	2301      	movs	r3, #1
 80236e8:	e00c      	b.n	8023704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	2205      	movs	r2, #5
 80236ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	681b      	ldr	r3, [r3, #0]
 80236f6:	681a      	ldr	r2, [r3, #0]
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	681b      	ldr	r3, [r3, #0]
 80236fc:	f022 0201 	bic.w	r2, r2, #1
 8023700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023702:	2300      	movs	r3, #0
}
 8023704:	4618      	mov	r0, r3
 8023706:	370c      	adds	r7, #12
 8023708:	46bd      	mov	sp, r7
 802370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802370e:	4770      	bx	lr

08023710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023710:	b480      	push	{r7}
 8023712:	b085      	sub	sp, #20
 8023714:	af00      	add	r7, sp, #0
 8023716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	b2db      	uxtb	r3, r3
 802371e:	3b10      	subs	r3, #16
 8023720:	4a14      	ldr	r2, [pc, #80]	; (8023774 <DMA_CalcBaseAndBitshift+0x64>)
 8023722:	fba2 2303 	umull	r2, r3, r2, r3
 8023726:	091b      	lsrs	r3, r3, #4
 8023728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802372a:	4a13      	ldr	r2, [pc, #76]	; (8023778 <DMA_CalcBaseAndBitshift+0x68>)
 802372c:	68fb      	ldr	r3, [r7, #12]
 802372e:	4413      	add	r3, r2
 8023730:	781b      	ldrb	r3, [r3, #0]
 8023732:	461a      	mov	r2, r3
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	2b03      	cmp	r3, #3
 802373c:	d909      	bls.n	8023752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802373e:	687b      	ldr	r3, [r7, #4]
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023746:	f023 0303 	bic.w	r3, r3, #3
 802374a:	1d1a      	adds	r2, r3, #4
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	659a      	str	r2, [r3, #88]	; 0x58
 8023750:	e007      	b.n	8023762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023752:	687b      	ldr	r3, [r7, #4]
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802375a:	f023 0303 	bic.w	r3, r3, #3
 802375e:	687a      	ldr	r2, [r7, #4]
 8023760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023766:	4618      	mov	r0, r3
 8023768:	3714      	adds	r7, #20
 802376a:	46bd      	mov	sp, r7
 802376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023770:	4770      	bx	lr
 8023772:	bf00      	nop
 8023774:	aaaaaaab 	.word	0xaaaaaaab
 8023778:	08030d84 	.word	0x08030d84

0802377c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802377c:	b480      	push	{r7}
 802377e:	b085      	sub	sp, #20
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023784:	2300      	movs	r3, #0
 8023786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802378c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802378e:	687b      	ldr	r3, [r7, #4]
 8023790:	699b      	ldr	r3, [r3, #24]
 8023792:	2b00      	cmp	r3, #0
 8023794:	d11f      	bne.n	80237d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023796:	68bb      	ldr	r3, [r7, #8]
 8023798:	2b03      	cmp	r3, #3
 802379a:	d856      	bhi.n	802384a <DMA_CheckFifoParam+0xce>
 802379c:	a201      	add	r2, pc, #4	; (adr r2, 80237a4 <DMA_CheckFifoParam+0x28>)
 802379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80237a2:	bf00      	nop
 80237a4:	080237b5 	.word	0x080237b5
 80237a8:	080237c7 	.word	0x080237c7
 80237ac:	080237b5 	.word	0x080237b5
 80237b0:	0802384b 	.word	0x0802384b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d046      	beq.n	802384e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80237c0:	2301      	movs	r3, #1
 80237c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80237c4:	e043      	b.n	802384e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80237c6:	687b      	ldr	r3, [r7, #4]
 80237c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80237ce:	d140      	bne.n	8023852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80237d0:	2301      	movs	r3, #1
 80237d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80237d4:	e03d      	b.n	8023852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	699b      	ldr	r3, [r3, #24]
 80237da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80237de:	d121      	bne.n	8023824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80237e0:	68bb      	ldr	r3, [r7, #8]
 80237e2:	2b03      	cmp	r3, #3
 80237e4:	d837      	bhi.n	8023856 <DMA_CheckFifoParam+0xda>
 80237e6:	a201      	add	r2, pc, #4	; (adr r2, 80237ec <DMA_CheckFifoParam+0x70>)
 80237e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80237ec:	080237fd 	.word	0x080237fd
 80237f0:	08023803 	.word	0x08023803
 80237f4:	080237fd 	.word	0x080237fd
 80237f8:	08023815 	.word	0x08023815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80237fc:	2301      	movs	r3, #1
 80237fe:	73fb      	strb	r3, [r7, #15]
      break;
 8023800:	e030      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802380a:	2b00      	cmp	r3, #0
 802380c:	d025      	beq.n	802385a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802380e:	2301      	movs	r3, #1
 8023810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023812:	e022      	b.n	802385a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802381c:	d11f      	bne.n	802385e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802381e:	2301      	movs	r3, #1
 8023820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023822:	e01c      	b.n	802385e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023824:	68bb      	ldr	r3, [r7, #8]
 8023826:	2b02      	cmp	r3, #2
 8023828:	d903      	bls.n	8023832 <DMA_CheckFifoParam+0xb6>
 802382a:	68bb      	ldr	r3, [r7, #8]
 802382c:	2b03      	cmp	r3, #3
 802382e:	d003      	beq.n	8023838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023830:	e018      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023832:	2301      	movs	r3, #1
 8023834:	73fb      	strb	r3, [r7, #15]
      break;
 8023836:	e015      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802383c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023840:	2b00      	cmp	r3, #0
 8023842:	d00e      	beq.n	8023862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023844:	2301      	movs	r3, #1
 8023846:	73fb      	strb	r3, [r7, #15]
      break;
 8023848:	e00b      	b.n	8023862 <DMA_CheckFifoParam+0xe6>
      break;
 802384a:	bf00      	nop
 802384c:	e00a      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;
 802384e:	bf00      	nop
 8023850:	e008      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;
 8023852:	bf00      	nop
 8023854:	e006      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;
 8023856:	bf00      	nop
 8023858:	e004      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;
 802385a:	bf00      	nop
 802385c:	e002      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;   
 802385e:	bf00      	nop
 8023860:	e000      	b.n	8023864 <DMA_CheckFifoParam+0xe8>
      break;
 8023862:	bf00      	nop
    }
  } 
  
  return status; 
 8023864:	7bfb      	ldrb	r3, [r7, #15]
}
 8023866:	4618      	mov	r0, r3
 8023868:	3714      	adds	r7, #20
 802386a:	46bd      	mov	sp, r7
 802386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023870:	4770      	bx	lr
 8023872:	bf00      	nop

08023874 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023874:	b580      	push	{r7, lr}
 8023876:	b082      	sub	sp, #8
 8023878:	af00      	add	r7, sp, #0
 802387a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	2b00      	cmp	r3, #0
 8023880:	d101      	bne.n	8023886 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023882:	2301      	movs	r3, #1
 8023884:	e03b      	b.n	80238fe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802388c:	b2db      	uxtb	r3, r3
 802388e:	2b00      	cmp	r3, #0
 8023890:	d106      	bne.n	80238a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	2200      	movs	r2, #0
 8023896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 802389a:	6878      	ldr	r0, [r7, #4]
 802389c:	f7fd fcfa 	bl	8021294 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	2202      	movs	r2, #2
 80238a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	681b      	ldr	r3, [r3, #0]
 80238ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	685a      	ldr	r2, [r3, #4]
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	681b      	ldr	r3, [r3, #0]
 80238ba:	430a      	orrs	r2, r1
 80238bc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	681b      	ldr	r3, [r3, #0]
 80238c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80238c4:	f023 0107 	bic.w	r1, r3, #7
 80238c8:	687b      	ldr	r3, [r7, #4]
 80238ca:	689a      	ldr	r2, [r3, #8]
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	430a      	orrs	r2, r1
 80238d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80238de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80238e2:	687a      	ldr	r2, [r7, #4]
 80238e4:	68d1      	ldr	r1, [r2, #12]
 80238e6:	687a      	ldr	r2, [r7, #4]
 80238e8:	6812      	ldr	r2, [r2, #0]
 80238ea:	430b      	orrs	r3, r1
 80238ec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	2200      	movs	r2, #0
 80238f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	2201      	movs	r2, #1
 80238f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80238fc:	2300      	movs	r3, #0
}
 80238fe:	4618      	mov	r0, r3
 8023900:	3708      	adds	r7, #8
 8023902:	46bd      	mov	sp, r7
 8023904:	bd80      	pop	{r7, pc}

08023906 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023906:	b580      	push	{r7, lr}
 8023908:	b086      	sub	sp, #24
 802390a:	af02      	add	r7, sp, #8
 802390c:	60f8      	str	r0, [r7, #12]
 802390e:	60b9      	str	r1, [r7, #8]
 8023910:	607a      	str	r2, [r7, #4]
 8023912:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802391a:	2b01      	cmp	r3, #1
 802391c:	d101      	bne.n	8023922 <HAL_DMA2D_Start+0x1c>
 802391e:	2302      	movs	r3, #2
 8023920:	e018      	b.n	8023954 <HAL_DMA2D_Start+0x4e>
 8023922:	68fb      	ldr	r3, [r7, #12]
 8023924:	2201      	movs	r2, #1
 8023926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802392a:	68fb      	ldr	r3, [r7, #12]
 802392c:	2202      	movs	r2, #2
 802392e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023932:	69bb      	ldr	r3, [r7, #24]
 8023934:	9300      	str	r3, [sp, #0]
 8023936:	683b      	ldr	r3, [r7, #0]
 8023938:	687a      	ldr	r2, [r7, #4]
 802393a:	68b9      	ldr	r1, [r7, #8]
 802393c:	68f8      	ldr	r0, [r7, #12]
 802393e:	f000 fa99 	bl	8023e74 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023942:	68fb      	ldr	r3, [r7, #12]
 8023944:	681b      	ldr	r3, [r3, #0]
 8023946:	681a      	ldr	r2, [r3, #0]
 8023948:	68fb      	ldr	r3, [r7, #12]
 802394a:	681b      	ldr	r3, [r3, #0]
 802394c:	f042 0201 	orr.w	r2, r2, #1
 8023950:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023952:	2300      	movs	r3, #0
}
 8023954:	4618      	mov	r0, r3
 8023956:	3710      	adds	r7, #16
 8023958:	46bd      	mov	sp, r7
 802395a:	bd80      	pop	{r7, pc}

0802395c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 802395c:	b580      	push	{r7, lr}
 802395e:	b086      	sub	sp, #24
 8023960:	af00      	add	r7, sp, #0
 8023962:	6078      	str	r0, [r7, #4]
 8023964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023966:	2300      	movs	r3, #0
 8023968:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 802396a:	687b      	ldr	r3, [r7, #4]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	681b      	ldr	r3, [r3, #0]
 8023970:	f003 0301 	and.w	r3, r3, #1
 8023974:	2b00      	cmp	r3, #0
 8023976:	d056      	beq.n	8023a26 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023978:	f7ff fbfe 	bl	8023178 <HAL_GetTick>
 802397c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 802397e:	e04b      	b.n	8023a18 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	681b      	ldr	r3, [r3, #0]
 8023984:	685b      	ldr	r3, [r3, #4]
 8023986:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023988:	68fb      	ldr	r3, [r7, #12]
 802398a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 802398e:	2b00      	cmp	r3, #0
 8023990:	d023      	beq.n	80239da <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023992:	68fb      	ldr	r3, [r7, #12]
 8023994:	f003 0320 	and.w	r3, r3, #32
 8023998:	2b00      	cmp	r3, #0
 802399a:	d005      	beq.n	80239a8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80239a0:	f043 0202 	orr.w	r2, r3, #2
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80239a8:	68fb      	ldr	r3, [r7, #12]
 80239aa:	f003 0301 	and.w	r3, r3, #1
 80239ae:	2b00      	cmp	r3, #0
 80239b0:	d005      	beq.n	80239be <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80239b6:	f043 0201 	orr.w	r2, r3, #1
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80239be:	687b      	ldr	r3, [r7, #4]
 80239c0:	681b      	ldr	r3, [r3, #0]
 80239c2:	2221      	movs	r2, #33	; 0x21
 80239c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80239c6:	687b      	ldr	r3, [r7, #4]
 80239c8:	2204      	movs	r2, #4
 80239ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	2200      	movs	r2, #0
 80239d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80239d6:	2301      	movs	r3, #1
 80239d8:	e0a5      	b.n	8023b26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80239da:	683b      	ldr	r3, [r7, #0]
 80239dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239e0:	d01a      	beq.n	8023a18 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80239e2:	f7ff fbc9 	bl	8023178 <HAL_GetTick>
 80239e6:	4602      	mov	r2, r0
 80239e8:	697b      	ldr	r3, [r7, #20]
 80239ea:	1ad3      	subs	r3, r2, r3
 80239ec:	683a      	ldr	r2, [r7, #0]
 80239ee:	429a      	cmp	r2, r3
 80239f0:	d302      	bcc.n	80239f8 <HAL_DMA2D_PollForTransfer+0x9c>
 80239f2:	683b      	ldr	r3, [r7, #0]
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d10f      	bne.n	8023a18 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80239fc:	f043 0220 	orr.w	r2, r3, #32
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	2203      	movs	r2, #3
 8023a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	2200      	movs	r2, #0
 8023a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023a14:	2303      	movs	r3, #3
 8023a16:	e086      	b.n	8023b26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	681b      	ldr	r3, [r3, #0]
 8023a1c:	685b      	ldr	r3, [r3, #4]
 8023a1e:	f003 0302 	and.w	r3, r3, #2
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d0ac      	beq.n	8023980 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	681b      	ldr	r3, [r3, #0]
 8023a2a:	69db      	ldr	r3, [r3, #28]
 8023a2c:	f003 0320 	and.w	r3, r3, #32
 8023a30:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	681b      	ldr	r3, [r3, #0]
 8023a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023a38:	f003 0320 	and.w	r3, r3, #32
 8023a3c:	693a      	ldr	r2, [r7, #16]
 8023a3e:	4313      	orrs	r3, r2
 8023a40:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023a42:	693b      	ldr	r3, [r7, #16]
 8023a44:	2b00      	cmp	r3, #0
 8023a46:	d061      	beq.n	8023b0c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023a48:	f7ff fb96 	bl	8023178 <HAL_GetTick>
 8023a4c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023a4e:	e056      	b.n	8023afe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023a50:	687b      	ldr	r3, [r7, #4]
 8023a52:	681b      	ldr	r3, [r3, #0]
 8023a54:	685b      	ldr	r3, [r3, #4]
 8023a56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023a58:	68fb      	ldr	r3, [r7, #12]
 8023a5a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d02e      	beq.n	8023ac0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023a62:	68fb      	ldr	r3, [r7, #12]
 8023a64:	f003 0308 	and.w	r3, r3, #8
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d005      	beq.n	8023a78 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a70:	f043 0204 	orr.w	r2, r3, #4
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023a78:	68fb      	ldr	r3, [r7, #12]
 8023a7a:	f003 0320 	and.w	r3, r3, #32
 8023a7e:	2b00      	cmp	r3, #0
 8023a80:	d005      	beq.n	8023a8e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a86:	f043 0202 	orr.w	r2, r3, #2
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	f003 0301 	and.w	r3, r3, #1
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	d005      	beq.n	8023aa4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a9c:	f043 0201 	orr.w	r2, r3, #1
 8023aa0:	687b      	ldr	r3, [r7, #4]
 8023aa2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	681b      	ldr	r3, [r3, #0]
 8023aa8:	2229      	movs	r2, #41	; 0x29
 8023aaa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	2204      	movs	r2, #4
 8023ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023abc:	2301      	movs	r3, #1
 8023abe:	e032      	b.n	8023b26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023ac0:	683b      	ldr	r3, [r7, #0]
 8023ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ac6:	d01a      	beq.n	8023afe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023ac8:	f7ff fb56 	bl	8023178 <HAL_GetTick>
 8023acc:	4602      	mov	r2, r0
 8023ace:	697b      	ldr	r3, [r7, #20]
 8023ad0:	1ad3      	subs	r3, r2, r3
 8023ad2:	683a      	ldr	r2, [r7, #0]
 8023ad4:	429a      	cmp	r2, r3
 8023ad6:	d302      	bcc.n	8023ade <HAL_DMA2D_PollForTransfer+0x182>
 8023ad8:	683b      	ldr	r3, [r7, #0]
 8023ada:	2b00      	cmp	r3, #0
 8023adc:	d10f      	bne.n	8023afe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ae2:	f043 0220 	orr.w	r2, r3, #32
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	2203      	movs	r2, #3
 8023aee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	2200      	movs	r2, #0
 8023af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023afa:	2303      	movs	r3, #3
 8023afc:	e013      	b.n	8023b26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	685b      	ldr	r3, [r3, #4]
 8023b04:	f003 0310 	and.w	r3, r3, #16
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	d0a1      	beq.n	8023a50 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023b0c:	687b      	ldr	r3, [r7, #4]
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	2212      	movs	r2, #18
 8023b12:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	2201      	movs	r2, #1
 8023b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2200      	movs	r2, #0
 8023b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023b24:	2300      	movs	r3, #0
}
 8023b26:	4618      	mov	r0, r3
 8023b28:	3718      	adds	r7, #24
 8023b2a:	46bd      	mov	sp, r7
 8023b2c:	bd80      	pop	{r7, pc}

08023b2e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023b2e:	b580      	push	{r7, lr}
 8023b30:	b084      	sub	sp, #16
 8023b32:	af00      	add	r7, sp, #0
 8023b34:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	681b      	ldr	r3, [r3, #0]
 8023b3a:	685b      	ldr	r3, [r3, #4]
 8023b3c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023b3e:	687b      	ldr	r3, [r7, #4]
 8023b40:	681b      	ldr	r3, [r3, #0]
 8023b42:	681b      	ldr	r3, [r3, #0]
 8023b44:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023b46:	68fb      	ldr	r3, [r7, #12]
 8023b48:	f003 0301 	and.w	r3, r3, #1
 8023b4c:	2b00      	cmp	r3, #0
 8023b4e:	d026      	beq.n	8023b9e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023b50:	68bb      	ldr	r3, [r7, #8]
 8023b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023b56:	2b00      	cmp	r3, #0
 8023b58:	d021      	beq.n	8023b9e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	681b      	ldr	r3, [r3, #0]
 8023b5e:	681a      	ldr	r2, [r3, #0]
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	681b      	ldr	r3, [r3, #0]
 8023b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023b68:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023b6e:	f043 0201 	orr.w	r2, r3, #1
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	2201      	movs	r2, #1
 8023b7c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	2204      	movs	r2, #4
 8023b82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	2200      	movs	r2, #0
 8023b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	695b      	ldr	r3, [r3, #20]
 8023b92:	2b00      	cmp	r3, #0
 8023b94:	d003      	beq.n	8023b9e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023b96:	687b      	ldr	r3, [r7, #4]
 8023b98:	695b      	ldr	r3, [r3, #20]
 8023b9a:	6878      	ldr	r0, [r7, #4]
 8023b9c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023b9e:	68fb      	ldr	r3, [r7, #12]
 8023ba0:	f003 0320 	and.w	r3, r3, #32
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d026      	beq.n	8023bf6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8023ba8:	68bb      	ldr	r3, [r7, #8]
 8023baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d021      	beq.n	8023bf6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	681b      	ldr	r3, [r3, #0]
 8023bb6:	681a      	ldr	r2, [r3, #0]
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023bc0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	681b      	ldr	r3, [r3, #0]
 8023bc6:	2220      	movs	r2, #32
 8023bc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023bce:	f043 0202 	orr.w	r2, r3, #2
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	2204      	movs	r2, #4
 8023bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023bde:	687b      	ldr	r3, [r7, #4]
 8023be0:	2200      	movs	r2, #0
 8023be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	695b      	ldr	r3, [r3, #20]
 8023bea:	2b00      	cmp	r3, #0
 8023bec:	d003      	beq.n	8023bf6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	695b      	ldr	r3, [r3, #20]
 8023bf2:	6878      	ldr	r0, [r7, #4]
 8023bf4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	f003 0308 	and.w	r3, r3, #8
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d026      	beq.n	8023c4e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8023c00:	68bb      	ldr	r3, [r7, #8]
 8023c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d021      	beq.n	8023c4e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	681b      	ldr	r3, [r3, #0]
 8023c0e:	681a      	ldr	r2, [r3, #0]
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023c18:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	681b      	ldr	r3, [r3, #0]
 8023c1e:	2208      	movs	r2, #8
 8023c20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c26:	f043 0204 	orr.w	r2, r3, #4
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023c2e:	687b      	ldr	r3, [r7, #4]
 8023c30:	2204      	movs	r2, #4
 8023c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	2200      	movs	r2, #0
 8023c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	695b      	ldr	r3, [r3, #20]
 8023c42:	2b00      	cmp	r3, #0
 8023c44:	d003      	beq.n	8023c4e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	695b      	ldr	r3, [r3, #20]
 8023c4a:	6878      	ldr	r0, [r7, #4]
 8023c4c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8023c4e:	68fb      	ldr	r3, [r7, #12]
 8023c50:	f003 0304 	and.w	r3, r3, #4
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d013      	beq.n	8023c80 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8023c58:	68bb      	ldr	r3, [r7, #8]
 8023c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d00e      	beq.n	8023c80 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	681b      	ldr	r3, [r3, #0]
 8023c66:	681a      	ldr	r2, [r3, #0]
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023c70:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	681b      	ldr	r3, [r3, #0]
 8023c76:	2204      	movs	r2, #4
 8023c78:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8023c7a:	6878      	ldr	r0, [r7, #4]
 8023c7c:	f000 f853 	bl	8023d26 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8023c80:	68fb      	ldr	r3, [r7, #12]
 8023c82:	f003 0302 	and.w	r3, r3, #2
 8023c86:	2b00      	cmp	r3, #0
 8023c88:	d024      	beq.n	8023cd4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8023c8a:	68bb      	ldr	r3, [r7, #8]
 8023c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d01f      	beq.n	8023cd4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8023c94:	687b      	ldr	r3, [r7, #4]
 8023c96:	681b      	ldr	r3, [r3, #0]
 8023c98:	681a      	ldr	r2, [r3, #0]
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	681b      	ldr	r3, [r3, #0]
 8023c9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023ca2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	681b      	ldr	r3, [r3, #0]
 8023ca8:	2202      	movs	r2, #2
 8023caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	2201      	movs	r2, #1
 8023cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	2200      	movs	r2, #0
 8023cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	691b      	ldr	r3, [r3, #16]
 8023cc8:	2b00      	cmp	r3, #0
 8023cca:	d003      	beq.n	8023cd4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8023ccc:	687b      	ldr	r3, [r7, #4]
 8023cce:	691b      	ldr	r3, [r3, #16]
 8023cd0:	6878      	ldr	r0, [r7, #4]
 8023cd2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8023cd4:	68fb      	ldr	r3, [r7, #12]
 8023cd6:	f003 0310 	and.w	r3, r3, #16
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	d01f      	beq.n	8023d1e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8023cde:	68bb      	ldr	r3, [r7, #8]
 8023ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	d01a      	beq.n	8023d1e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	681a      	ldr	r2, [r3, #0]
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023cf6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8023cf8:	687b      	ldr	r3, [r7, #4]
 8023cfa:	681b      	ldr	r3, [r3, #0]
 8023cfc:	2210      	movs	r2, #16
 8023cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	2201      	movs	r2, #1
 8023d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	2200      	movs	r2, #0
 8023d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8023d18:	6878      	ldr	r0, [r7, #4]
 8023d1a:	f000 f80e 	bl	8023d3a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8023d1e:	bf00      	nop
 8023d20:	3710      	adds	r7, #16
 8023d22:	46bd      	mov	sp, r7
 8023d24:	bd80      	pop	{r7, pc}

08023d26 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023d26:	b480      	push	{r7}
 8023d28:	b083      	sub	sp, #12
 8023d2a:	af00      	add	r7, sp, #0
 8023d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8023d2e:	bf00      	nop
 8023d30:	370c      	adds	r7, #12
 8023d32:	46bd      	mov	sp, r7
 8023d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d38:	4770      	bx	lr

08023d3a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023d3a:	b480      	push	{r7}
 8023d3c:	b083      	sub	sp, #12
 8023d3e:	af00      	add	r7, sp, #0
 8023d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8023d42:	bf00      	nop
 8023d44:	370c      	adds	r7, #12
 8023d46:	46bd      	mov	sp, r7
 8023d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d4c:	4770      	bx	lr
	...

08023d50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8023d50:	b480      	push	{r7}
 8023d52:	b087      	sub	sp, #28
 8023d54:	af00      	add	r7, sp, #0
 8023d56:	6078      	str	r0, [r7, #4]
 8023d58:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	685b      	ldr	r3, [r3, #4]
 8023d5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023d68:	2b01      	cmp	r3, #1
 8023d6a:	d101      	bne.n	8023d70 <HAL_DMA2D_ConfigLayer+0x20>
 8023d6c:	2302      	movs	r3, #2
 8023d6e:	e079      	b.n	8023e64 <HAL_DMA2D_ConfigLayer+0x114>
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	2201      	movs	r2, #1
 8023d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023d78:	687b      	ldr	r3, [r7, #4]
 8023d7a:	2202      	movs	r2, #2
 8023d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8023d80:	683b      	ldr	r3, [r7, #0]
 8023d82:	011b      	lsls	r3, r3, #4
 8023d84:	3318      	adds	r3, #24
 8023d86:	687a      	ldr	r2, [r7, #4]
 8023d88:	4413      	add	r3, r2
 8023d8a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8023d8c:	693b      	ldr	r3, [r7, #16]
 8023d8e:	685a      	ldr	r2, [r3, #4]
 8023d90:	693b      	ldr	r3, [r7, #16]
 8023d92:	689b      	ldr	r3, [r3, #8]
 8023d94:	041b      	lsls	r3, r3, #16
 8023d96:	4313      	orrs	r3, r2
 8023d98:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8023d9a:	4b35      	ldr	r3, [pc, #212]	; (8023e70 <HAL_DMA2D_ConfigLayer+0x120>)
 8023d9c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023d9e:	693b      	ldr	r3, [r7, #16]
 8023da0:	685b      	ldr	r3, [r3, #4]
 8023da2:	2b0a      	cmp	r3, #10
 8023da4:	d003      	beq.n	8023dae <HAL_DMA2D_ConfigLayer+0x5e>
 8023da6:	693b      	ldr	r3, [r7, #16]
 8023da8:	685b      	ldr	r3, [r3, #4]
 8023daa:	2b09      	cmp	r3, #9
 8023dac:	d107      	bne.n	8023dbe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8023dae:	693b      	ldr	r3, [r7, #16]
 8023db0:	68db      	ldr	r3, [r3, #12]
 8023db2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023db6:	697a      	ldr	r2, [r7, #20]
 8023db8:	4313      	orrs	r3, r2
 8023dba:	617b      	str	r3, [r7, #20]
 8023dbc:	e005      	b.n	8023dca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8023dbe:	693b      	ldr	r3, [r7, #16]
 8023dc0:	68db      	ldr	r3, [r3, #12]
 8023dc2:	061b      	lsls	r3, r3, #24
 8023dc4:	697a      	ldr	r2, [r7, #20]
 8023dc6:	4313      	orrs	r3, r2
 8023dc8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8023dca:	683b      	ldr	r3, [r7, #0]
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d120      	bne.n	8023e12 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	681b      	ldr	r3, [r3, #0]
 8023dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023dd6:	68fb      	ldr	r3, [r7, #12]
 8023dd8:	43db      	mvns	r3, r3
 8023dda:	ea02 0103 	and.w	r1, r2, r3
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	697a      	ldr	r2, [r7, #20]
 8023de4:	430a      	orrs	r2, r1
 8023de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	681b      	ldr	r3, [r3, #0]
 8023dec:	693a      	ldr	r2, [r7, #16]
 8023dee:	6812      	ldr	r2, [r2, #0]
 8023df0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023df2:	693b      	ldr	r3, [r7, #16]
 8023df4:	685b      	ldr	r3, [r3, #4]
 8023df6:	2b0a      	cmp	r3, #10
 8023df8:	d003      	beq.n	8023e02 <HAL_DMA2D_ConfigLayer+0xb2>
 8023dfa:	693b      	ldr	r3, [r7, #16]
 8023dfc:	685b      	ldr	r3, [r3, #4]
 8023dfe:	2b09      	cmp	r3, #9
 8023e00:	d127      	bne.n	8023e52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8023e02:	693b      	ldr	r3, [r7, #16]
 8023e04:	68da      	ldr	r2, [r3, #12]
 8023e06:	687b      	ldr	r3, [r7, #4]
 8023e08:	681b      	ldr	r3, [r3, #0]
 8023e0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8023e10:	e01f      	b.n	8023e52 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	69da      	ldr	r2, [r3, #28]
 8023e18:	68fb      	ldr	r3, [r7, #12]
 8023e1a:	43db      	mvns	r3, r3
 8023e1c:	ea02 0103 	and.w	r1, r2, r3
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	697a      	ldr	r2, [r7, #20]
 8023e26:	430a      	orrs	r2, r1
 8023e28:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	681b      	ldr	r3, [r3, #0]
 8023e2e:	693a      	ldr	r2, [r7, #16]
 8023e30:	6812      	ldr	r2, [r2, #0]
 8023e32:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023e34:	693b      	ldr	r3, [r7, #16]
 8023e36:	685b      	ldr	r3, [r3, #4]
 8023e38:	2b0a      	cmp	r3, #10
 8023e3a:	d003      	beq.n	8023e44 <HAL_DMA2D_ConfigLayer+0xf4>
 8023e3c:	693b      	ldr	r3, [r7, #16]
 8023e3e:	685b      	ldr	r3, [r3, #4]
 8023e40:	2b09      	cmp	r3, #9
 8023e42:	d106      	bne.n	8023e52 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8023e44:	693b      	ldr	r3, [r7, #16]
 8023e46:	68da      	ldr	r2, [r3, #12]
 8023e48:	687b      	ldr	r3, [r7, #4]
 8023e4a:	681b      	ldr	r3, [r3, #0]
 8023e4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023e50:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	2201      	movs	r2, #1
 8023e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023e5a:	687b      	ldr	r3, [r7, #4]
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023e62:	2300      	movs	r3, #0
}
 8023e64:	4618      	mov	r0, r3
 8023e66:	371c      	adds	r7, #28
 8023e68:	46bd      	mov	sp, r7
 8023e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e6e:	4770      	bx	lr
 8023e70:	ff03000f 	.word	0xff03000f

08023e74 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8023e74:	b480      	push	{r7}
 8023e76:	b08b      	sub	sp, #44	; 0x2c
 8023e78:	af00      	add	r7, sp, #0
 8023e7a:	60f8      	str	r0, [r7, #12]
 8023e7c:	60b9      	str	r1, [r7, #8]
 8023e7e:	607a      	str	r2, [r7, #4]
 8023e80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8023e82:	68fb      	ldr	r3, [r7, #12]
 8023e84:	681b      	ldr	r3, [r3, #0]
 8023e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023e88:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8023e8c:	683b      	ldr	r3, [r7, #0]
 8023e8e:	041a      	lsls	r2, r3, #16
 8023e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e92:	431a      	orrs	r2, r3
 8023e94:	68fb      	ldr	r3, [r7, #12]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	430a      	orrs	r2, r1
 8023e9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8023e9c:	68fb      	ldr	r3, [r7, #12]
 8023e9e:	681b      	ldr	r3, [r3, #0]
 8023ea0:	687a      	ldr	r2, [r7, #4]
 8023ea2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	685b      	ldr	r3, [r3, #4]
 8023ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8023eac:	d174      	bne.n	8023f98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8023eae:	68bb      	ldr	r3, [r7, #8]
 8023eb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023eb4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8023eb6:	68bb      	ldr	r3, [r7, #8]
 8023eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8023ebc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8023ebe:	68bb      	ldr	r3, [r7, #8]
 8023ec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023ec4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8023ec6:	68bb      	ldr	r3, [r7, #8]
 8023ec8:	b2db      	uxtb	r3, r3
 8023eca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	689b      	ldr	r3, [r3, #8]
 8023ed0:	2b00      	cmp	r3, #0
 8023ed2:	d108      	bne.n	8023ee6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8023ed4:	69ba      	ldr	r2, [r7, #24]
 8023ed6:	69fb      	ldr	r3, [r7, #28]
 8023ed8:	431a      	orrs	r2, r3
 8023eda:	6a3b      	ldr	r3, [r7, #32]
 8023edc:	4313      	orrs	r3, r2
 8023ede:	697a      	ldr	r2, [r7, #20]
 8023ee0:	4313      	orrs	r3, r2
 8023ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8023ee4:	e053      	b.n	8023f8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8023ee6:	68fb      	ldr	r3, [r7, #12]
 8023ee8:	689b      	ldr	r3, [r3, #8]
 8023eea:	2b01      	cmp	r3, #1
 8023eec:	d106      	bne.n	8023efc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8023eee:	69ba      	ldr	r2, [r7, #24]
 8023ef0:	69fb      	ldr	r3, [r7, #28]
 8023ef2:	4313      	orrs	r3, r2
 8023ef4:	697a      	ldr	r2, [r7, #20]
 8023ef6:	4313      	orrs	r3, r2
 8023ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8023efa:	e048      	b.n	8023f8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8023efc:	68fb      	ldr	r3, [r7, #12]
 8023efe:	689b      	ldr	r3, [r3, #8]
 8023f00:	2b02      	cmp	r3, #2
 8023f02:	d111      	bne.n	8023f28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8023f04:	69fb      	ldr	r3, [r7, #28]
 8023f06:	0cdb      	lsrs	r3, r3, #19
 8023f08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8023f0a:	69bb      	ldr	r3, [r7, #24]
 8023f0c:	0a9b      	lsrs	r3, r3, #10
 8023f0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023f10:	697b      	ldr	r3, [r7, #20]
 8023f12:	08db      	lsrs	r3, r3, #3
 8023f14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8023f16:	69bb      	ldr	r3, [r7, #24]
 8023f18:	015a      	lsls	r2, r3, #5
 8023f1a:	69fb      	ldr	r3, [r7, #28]
 8023f1c:	02db      	lsls	r3, r3, #11
 8023f1e:	4313      	orrs	r3, r2
 8023f20:	697a      	ldr	r2, [r7, #20]
 8023f22:	4313      	orrs	r3, r2
 8023f24:	627b      	str	r3, [r7, #36]	; 0x24
 8023f26:	e032      	b.n	8023f8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8023f28:	68fb      	ldr	r3, [r7, #12]
 8023f2a:	689b      	ldr	r3, [r3, #8]
 8023f2c:	2b03      	cmp	r3, #3
 8023f2e:	d117      	bne.n	8023f60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8023f30:	6a3b      	ldr	r3, [r7, #32]
 8023f32:	0fdb      	lsrs	r3, r3, #31
 8023f34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8023f36:	69fb      	ldr	r3, [r7, #28]
 8023f38:	0cdb      	lsrs	r3, r3, #19
 8023f3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8023f3c:	69bb      	ldr	r3, [r7, #24]
 8023f3e:	0adb      	lsrs	r3, r3, #11
 8023f40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023f42:	697b      	ldr	r3, [r7, #20]
 8023f44:	08db      	lsrs	r3, r3, #3
 8023f46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8023f48:	69bb      	ldr	r3, [r7, #24]
 8023f4a:	015a      	lsls	r2, r3, #5
 8023f4c:	69fb      	ldr	r3, [r7, #28]
 8023f4e:	029b      	lsls	r3, r3, #10
 8023f50:	431a      	orrs	r2, r3
 8023f52:	6a3b      	ldr	r3, [r7, #32]
 8023f54:	03db      	lsls	r3, r3, #15
 8023f56:	4313      	orrs	r3, r2
 8023f58:	697a      	ldr	r2, [r7, #20]
 8023f5a:	4313      	orrs	r3, r2
 8023f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8023f5e:	e016      	b.n	8023f8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8023f60:	6a3b      	ldr	r3, [r7, #32]
 8023f62:	0f1b      	lsrs	r3, r3, #28
 8023f64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8023f66:	69fb      	ldr	r3, [r7, #28]
 8023f68:	0d1b      	lsrs	r3, r3, #20
 8023f6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8023f6c:	69bb      	ldr	r3, [r7, #24]
 8023f6e:	0b1b      	lsrs	r3, r3, #12
 8023f70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8023f72:	697b      	ldr	r3, [r7, #20]
 8023f74:	091b      	lsrs	r3, r3, #4
 8023f76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8023f78:	69bb      	ldr	r3, [r7, #24]
 8023f7a:	011a      	lsls	r2, r3, #4
 8023f7c:	69fb      	ldr	r3, [r7, #28]
 8023f7e:	021b      	lsls	r3, r3, #8
 8023f80:	431a      	orrs	r2, r3
 8023f82:	6a3b      	ldr	r3, [r7, #32]
 8023f84:	031b      	lsls	r3, r3, #12
 8023f86:	4313      	orrs	r3, r2
 8023f88:	697a      	ldr	r2, [r7, #20]
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8023f8e:	68fb      	ldr	r3, [r7, #12]
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023f94:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8023f96:	e003      	b.n	8023fa0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	681b      	ldr	r3, [r3, #0]
 8023f9c:	68ba      	ldr	r2, [r7, #8]
 8023f9e:	60da      	str	r2, [r3, #12]
}
 8023fa0:	bf00      	nop
 8023fa2:	372c      	adds	r7, #44	; 0x2c
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023faa:	4770      	bx	lr

08023fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023fac:	b480      	push	{r7}
 8023fae:	b089      	sub	sp, #36	; 0x24
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
 8023fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023fb6:	2300      	movs	r3, #0
 8023fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023fba:	2300      	movs	r3, #0
 8023fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023fbe:	2300      	movs	r3, #0
 8023fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023fc2:	2300      	movs	r3, #0
 8023fc4:	61fb      	str	r3, [r7, #28]
 8023fc6:	e177      	b.n	80242b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023fc8:	2201      	movs	r2, #1
 8023fca:	69fb      	ldr	r3, [r7, #28]
 8023fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8023fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8023fd2:	683b      	ldr	r3, [r7, #0]
 8023fd4:	681b      	ldr	r3, [r3, #0]
 8023fd6:	697a      	ldr	r2, [r7, #20]
 8023fd8:	4013      	ands	r3, r2
 8023fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023fdc:	693a      	ldr	r2, [r7, #16]
 8023fde:	697b      	ldr	r3, [r7, #20]
 8023fe0:	429a      	cmp	r2, r3
 8023fe2:	f040 8166 	bne.w	80242b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023fe6:	683b      	ldr	r3, [r7, #0]
 8023fe8:	685b      	ldr	r3, [r3, #4]
 8023fea:	f003 0303 	and.w	r3, r3, #3
 8023fee:	2b01      	cmp	r3, #1
 8023ff0:	d005      	beq.n	8023ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023ff2:	683b      	ldr	r3, [r7, #0]
 8023ff4:	685b      	ldr	r3, [r3, #4]
 8023ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023ffa:	2b02      	cmp	r3, #2
 8023ffc:	d130      	bne.n	8024060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	689b      	ldr	r3, [r3, #8]
 8024002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024004:	69fb      	ldr	r3, [r7, #28]
 8024006:	005b      	lsls	r3, r3, #1
 8024008:	2203      	movs	r2, #3
 802400a:	fa02 f303 	lsl.w	r3, r2, r3
 802400e:	43db      	mvns	r3, r3
 8024010:	69ba      	ldr	r2, [r7, #24]
 8024012:	4013      	ands	r3, r2
 8024014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024016:	683b      	ldr	r3, [r7, #0]
 8024018:	68da      	ldr	r2, [r3, #12]
 802401a:	69fb      	ldr	r3, [r7, #28]
 802401c:	005b      	lsls	r3, r3, #1
 802401e:	fa02 f303 	lsl.w	r3, r2, r3
 8024022:	69ba      	ldr	r2, [r7, #24]
 8024024:	4313      	orrs	r3, r2
 8024026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024028:	687b      	ldr	r3, [r7, #4]
 802402a:	69ba      	ldr	r2, [r7, #24]
 802402c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	685b      	ldr	r3, [r3, #4]
 8024032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024034:	2201      	movs	r2, #1
 8024036:	69fb      	ldr	r3, [r7, #28]
 8024038:	fa02 f303 	lsl.w	r3, r2, r3
 802403c:	43db      	mvns	r3, r3
 802403e:	69ba      	ldr	r2, [r7, #24]
 8024040:	4013      	ands	r3, r2
 8024042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024044:	683b      	ldr	r3, [r7, #0]
 8024046:	685b      	ldr	r3, [r3, #4]
 8024048:	091b      	lsrs	r3, r3, #4
 802404a:	f003 0201 	and.w	r2, r3, #1
 802404e:	69fb      	ldr	r3, [r7, #28]
 8024050:	fa02 f303 	lsl.w	r3, r2, r3
 8024054:	69ba      	ldr	r2, [r7, #24]
 8024056:	4313      	orrs	r3, r2
 8024058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	69ba      	ldr	r2, [r7, #24]
 802405e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024060:	683b      	ldr	r3, [r7, #0]
 8024062:	685b      	ldr	r3, [r3, #4]
 8024064:	f003 0303 	and.w	r3, r3, #3
 8024068:	2b03      	cmp	r3, #3
 802406a:	d017      	beq.n	802409c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 802406c:	687b      	ldr	r3, [r7, #4]
 802406e:	68db      	ldr	r3, [r3, #12]
 8024070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024072:	69fb      	ldr	r3, [r7, #28]
 8024074:	005b      	lsls	r3, r3, #1
 8024076:	2203      	movs	r2, #3
 8024078:	fa02 f303 	lsl.w	r3, r2, r3
 802407c:	43db      	mvns	r3, r3
 802407e:	69ba      	ldr	r2, [r7, #24]
 8024080:	4013      	ands	r3, r2
 8024082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024084:	683b      	ldr	r3, [r7, #0]
 8024086:	689a      	ldr	r2, [r3, #8]
 8024088:	69fb      	ldr	r3, [r7, #28]
 802408a:	005b      	lsls	r3, r3, #1
 802408c:	fa02 f303 	lsl.w	r3, r2, r3
 8024090:	69ba      	ldr	r2, [r7, #24]
 8024092:	4313      	orrs	r3, r2
 8024094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	69ba      	ldr	r2, [r7, #24]
 802409a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802409c:	683b      	ldr	r3, [r7, #0]
 802409e:	685b      	ldr	r3, [r3, #4]
 80240a0:	f003 0303 	and.w	r3, r3, #3
 80240a4:	2b02      	cmp	r3, #2
 80240a6:	d123      	bne.n	80240f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80240a8:	69fb      	ldr	r3, [r7, #28]
 80240aa:	08da      	lsrs	r2, r3, #3
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	3208      	adds	r2, #8
 80240b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80240b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80240b6:	69fb      	ldr	r3, [r7, #28]
 80240b8:	f003 0307 	and.w	r3, r3, #7
 80240bc:	009b      	lsls	r3, r3, #2
 80240be:	220f      	movs	r2, #15
 80240c0:	fa02 f303 	lsl.w	r3, r2, r3
 80240c4:	43db      	mvns	r3, r3
 80240c6:	69ba      	ldr	r2, [r7, #24]
 80240c8:	4013      	ands	r3, r2
 80240ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80240cc:	683b      	ldr	r3, [r7, #0]
 80240ce:	691a      	ldr	r2, [r3, #16]
 80240d0:	69fb      	ldr	r3, [r7, #28]
 80240d2:	f003 0307 	and.w	r3, r3, #7
 80240d6:	009b      	lsls	r3, r3, #2
 80240d8:	fa02 f303 	lsl.w	r3, r2, r3
 80240dc:	69ba      	ldr	r2, [r7, #24]
 80240de:	4313      	orrs	r3, r2
 80240e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80240e2:	69fb      	ldr	r3, [r7, #28]
 80240e4:	08da      	lsrs	r2, r3, #3
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	3208      	adds	r2, #8
 80240ea:	69b9      	ldr	r1, [r7, #24]
 80240ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80240f0:	687b      	ldr	r3, [r7, #4]
 80240f2:	681b      	ldr	r3, [r3, #0]
 80240f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80240f6:	69fb      	ldr	r3, [r7, #28]
 80240f8:	005b      	lsls	r3, r3, #1
 80240fa:	2203      	movs	r2, #3
 80240fc:	fa02 f303 	lsl.w	r3, r2, r3
 8024100:	43db      	mvns	r3, r3
 8024102:	69ba      	ldr	r2, [r7, #24]
 8024104:	4013      	ands	r3, r2
 8024106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024108:	683b      	ldr	r3, [r7, #0]
 802410a:	685b      	ldr	r3, [r3, #4]
 802410c:	f003 0203 	and.w	r2, r3, #3
 8024110:	69fb      	ldr	r3, [r7, #28]
 8024112:	005b      	lsls	r3, r3, #1
 8024114:	fa02 f303 	lsl.w	r3, r2, r3
 8024118:	69ba      	ldr	r2, [r7, #24]
 802411a:	4313      	orrs	r3, r2
 802411c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	69ba      	ldr	r2, [r7, #24]
 8024122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024124:	683b      	ldr	r3, [r7, #0]
 8024126:	685b      	ldr	r3, [r3, #4]
 8024128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802412c:	2b00      	cmp	r3, #0
 802412e:	f000 80c0 	beq.w	80242b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024132:	2300      	movs	r3, #0
 8024134:	60fb      	str	r3, [r7, #12]
 8024136:	4b66      	ldr	r3, [pc, #408]	; (80242d0 <HAL_GPIO_Init+0x324>)
 8024138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802413a:	4a65      	ldr	r2, [pc, #404]	; (80242d0 <HAL_GPIO_Init+0x324>)
 802413c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024140:	6453      	str	r3, [r2, #68]	; 0x44
 8024142:	4b63      	ldr	r3, [pc, #396]	; (80242d0 <HAL_GPIO_Init+0x324>)
 8024144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802414a:	60fb      	str	r3, [r7, #12]
 802414c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802414e:	4a61      	ldr	r2, [pc, #388]	; (80242d4 <HAL_GPIO_Init+0x328>)
 8024150:	69fb      	ldr	r3, [r7, #28]
 8024152:	089b      	lsrs	r3, r3, #2
 8024154:	3302      	adds	r3, #2
 8024156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802415c:	69fb      	ldr	r3, [r7, #28]
 802415e:	f003 0303 	and.w	r3, r3, #3
 8024162:	009b      	lsls	r3, r3, #2
 8024164:	220f      	movs	r2, #15
 8024166:	fa02 f303 	lsl.w	r3, r2, r3
 802416a:	43db      	mvns	r3, r3
 802416c:	69ba      	ldr	r2, [r7, #24]
 802416e:	4013      	ands	r3, r2
 8024170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	4a58      	ldr	r2, [pc, #352]	; (80242d8 <HAL_GPIO_Init+0x32c>)
 8024176:	4293      	cmp	r3, r2
 8024178:	d037      	beq.n	80241ea <HAL_GPIO_Init+0x23e>
 802417a:	687b      	ldr	r3, [r7, #4]
 802417c:	4a57      	ldr	r2, [pc, #348]	; (80242dc <HAL_GPIO_Init+0x330>)
 802417e:	4293      	cmp	r3, r2
 8024180:	d031      	beq.n	80241e6 <HAL_GPIO_Init+0x23a>
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	4a56      	ldr	r2, [pc, #344]	; (80242e0 <HAL_GPIO_Init+0x334>)
 8024186:	4293      	cmp	r3, r2
 8024188:	d02b      	beq.n	80241e2 <HAL_GPIO_Init+0x236>
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	4a55      	ldr	r2, [pc, #340]	; (80242e4 <HAL_GPIO_Init+0x338>)
 802418e:	4293      	cmp	r3, r2
 8024190:	d025      	beq.n	80241de <HAL_GPIO_Init+0x232>
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	4a54      	ldr	r2, [pc, #336]	; (80242e8 <HAL_GPIO_Init+0x33c>)
 8024196:	4293      	cmp	r3, r2
 8024198:	d01f      	beq.n	80241da <HAL_GPIO_Init+0x22e>
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	4a53      	ldr	r2, [pc, #332]	; (80242ec <HAL_GPIO_Init+0x340>)
 802419e:	4293      	cmp	r3, r2
 80241a0:	d019      	beq.n	80241d6 <HAL_GPIO_Init+0x22a>
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	4a52      	ldr	r2, [pc, #328]	; (80242f0 <HAL_GPIO_Init+0x344>)
 80241a6:	4293      	cmp	r3, r2
 80241a8:	d013      	beq.n	80241d2 <HAL_GPIO_Init+0x226>
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	4a51      	ldr	r2, [pc, #324]	; (80242f4 <HAL_GPIO_Init+0x348>)
 80241ae:	4293      	cmp	r3, r2
 80241b0:	d00d      	beq.n	80241ce <HAL_GPIO_Init+0x222>
 80241b2:	687b      	ldr	r3, [r7, #4]
 80241b4:	4a50      	ldr	r2, [pc, #320]	; (80242f8 <HAL_GPIO_Init+0x34c>)
 80241b6:	4293      	cmp	r3, r2
 80241b8:	d007      	beq.n	80241ca <HAL_GPIO_Init+0x21e>
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	4a4f      	ldr	r2, [pc, #316]	; (80242fc <HAL_GPIO_Init+0x350>)
 80241be:	4293      	cmp	r3, r2
 80241c0:	d101      	bne.n	80241c6 <HAL_GPIO_Init+0x21a>
 80241c2:	2309      	movs	r3, #9
 80241c4:	e012      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241c6:	230a      	movs	r3, #10
 80241c8:	e010      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241ca:	2308      	movs	r3, #8
 80241cc:	e00e      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241ce:	2307      	movs	r3, #7
 80241d0:	e00c      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241d2:	2306      	movs	r3, #6
 80241d4:	e00a      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241d6:	2305      	movs	r3, #5
 80241d8:	e008      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241da:	2304      	movs	r3, #4
 80241dc:	e006      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241de:	2303      	movs	r3, #3
 80241e0:	e004      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241e2:	2302      	movs	r3, #2
 80241e4:	e002      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241e6:	2301      	movs	r3, #1
 80241e8:	e000      	b.n	80241ec <HAL_GPIO_Init+0x240>
 80241ea:	2300      	movs	r3, #0
 80241ec:	69fa      	ldr	r2, [r7, #28]
 80241ee:	f002 0203 	and.w	r2, r2, #3
 80241f2:	0092      	lsls	r2, r2, #2
 80241f4:	4093      	lsls	r3, r2
 80241f6:	69ba      	ldr	r2, [r7, #24]
 80241f8:	4313      	orrs	r3, r2
 80241fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80241fc:	4935      	ldr	r1, [pc, #212]	; (80242d4 <HAL_GPIO_Init+0x328>)
 80241fe:	69fb      	ldr	r3, [r7, #28]
 8024200:	089b      	lsrs	r3, r3, #2
 8024202:	3302      	adds	r3, #2
 8024204:	69ba      	ldr	r2, [r7, #24]
 8024206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802420a:	4b3d      	ldr	r3, [pc, #244]	; (8024300 <HAL_GPIO_Init+0x354>)
 802420c:	689b      	ldr	r3, [r3, #8]
 802420e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024210:	693b      	ldr	r3, [r7, #16]
 8024212:	43db      	mvns	r3, r3
 8024214:	69ba      	ldr	r2, [r7, #24]
 8024216:	4013      	ands	r3, r2
 8024218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802421a:	683b      	ldr	r3, [r7, #0]
 802421c:	685b      	ldr	r3, [r3, #4]
 802421e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024222:	2b00      	cmp	r3, #0
 8024224:	d003      	beq.n	802422e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024226:	69ba      	ldr	r2, [r7, #24]
 8024228:	693b      	ldr	r3, [r7, #16]
 802422a:	4313      	orrs	r3, r2
 802422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802422e:	4a34      	ldr	r2, [pc, #208]	; (8024300 <HAL_GPIO_Init+0x354>)
 8024230:	69bb      	ldr	r3, [r7, #24]
 8024232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024234:	4b32      	ldr	r3, [pc, #200]	; (8024300 <HAL_GPIO_Init+0x354>)
 8024236:	68db      	ldr	r3, [r3, #12]
 8024238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802423a:	693b      	ldr	r3, [r7, #16]
 802423c:	43db      	mvns	r3, r3
 802423e:	69ba      	ldr	r2, [r7, #24]
 8024240:	4013      	ands	r3, r2
 8024242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024244:	683b      	ldr	r3, [r7, #0]
 8024246:	685b      	ldr	r3, [r3, #4]
 8024248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802424c:	2b00      	cmp	r3, #0
 802424e:	d003      	beq.n	8024258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024250:	69ba      	ldr	r2, [r7, #24]
 8024252:	693b      	ldr	r3, [r7, #16]
 8024254:	4313      	orrs	r3, r2
 8024256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024258:	4a29      	ldr	r2, [pc, #164]	; (8024300 <HAL_GPIO_Init+0x354>)
 802425a:	69bb      	ldr	r3, [r7, #24]
 802425c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802425e:	4b28      	ldr	r3, [pc, #160]	; (8024300 <HAL_GPIO_Init+0x354>)
 8024260:	685b      	ldr	r3, [r3, #4]
 8024262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024264:	693b      	ldr	r3, [r7, #16]
 8024266:	43db      	mvns	r3, r3
 8024268:	69ba      	ldr	r2, [r7, #24]
 802426a:	4013      	ands	r3, r2
 802426c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802426e:	683b      	ldr	r3, [r7, #0]
 8024270:	685b      	ldr	r3, [r3, #4]
 8024272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024276:	2b00      	cmp	r3, #0
 8024278:	d003      	beq.n	8024282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 802427a:	69ba      	ldr	r2, [r7, #24]
 802427c:	693b      	ldr	r3, [r7, #16]
 802427e:	4313      	orrs	r3, r2
 8024280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024282:	4a1f      	ldr	r2, [pc, #124]	; (8024300 <HAL_GPIO_Init+0x354>)
 8024284:	69bb      	ldr	r3, [r7, #24]
 8024286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024288:	4b1d      	ldr	r3, [pc, #116]	; (8024300 <HAL_GPIO_Init+0x354>)
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802428e:	693b      	ldr	r3, [r7, #16]
 8024290:	43db      	mvns	r3, r3
 8024292:	69ba      	ldr	r2, [r7, #24]
 8024294:	4013      	ands	r3, r2
 8024296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024298:	683b      	ldr	r3, [r7, #0]
 802429a:	685b      	ldr	r3, [r3, #4]
 802429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d003      	beq.n	80242ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80242a4:	69ba      	ldr	r2, [r7, #24]
 80242a6:	693b      	ldr	r3, [r7, #16]
 80242a8:	4313      	orrs	r3, r2
 80242aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80242ac:	4a14      	ldr	r2, [pc, #80]	; (8024300 <HAL_GPIO_Init+0x354>)
 80242ae:	69bb      	ldr	r3, [r7, #24]
 80242b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80242b2:	69fb      	ldr	r3, [r7, #28]
 80242b4:	3301      	adds	r3, #1
 80242b6:	61fb      	str	r3, [r7, #28]
 80242b8:	69fb      	ldr	r3, [r7, #28]
 80242ba:	2b0f      	cmp	r3, #15
 80242bc:	f67f ae84 	bls.w	8023fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80242c0:	bf00      	nop
 80242c2:	bf00      	nop
 80242c4:	3724      	adds	r7, #36	; 0x24
 80242c6:	46bd      	mov	sp, r7
 80242c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242cc:	4770      	bx	lr
 80242ce:	bf00      	nop
 80242d0:	40023800 	.word	0x40023800
 80242d4:	40013800 	.word	0x40013800
 80242d8:	40020000 	.word	0x40020000
 80242dc:	40020400 	.word	0x40020400
 80242e0:	40020800 	.word	0x40020800
 80242e4:	40020c00 	.word	0x40020c00
 80242e8:	40021000 	.word	0x40021000
 80242ec:	40021400 	.word	0x40021400
 80242f0:	40021800 	.word	0x40021800
 80242f4:	40021c00 	.word	0x40021c00
 80242f8:	40022000 	.word	0x40022000
 80242fc:	40022400 	.word	0x40022400
 8024300:	40013c00 	.word	0x40013c00

08024304 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024304:	b480      	push	{r7}
 8024306:	b087      	sub	sp, #28
 8024308:	af00      	add	r7, sp, #0
 802430a:	6078      	str	r0, [r7, #4]
 802430c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802430e:	2300      	movs	r3, #0
 8024310:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024312:	2300      	movs	r3, #0
 8024314:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024316:	2300      	movs	r3, #0
 8024318:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802431a:	2300      	movs	r3, #0
 802431c:	617b      	str	r3, [r7, #20]
 802431e:	e0d9      	b.n	80244d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024320:	2201      	movs	r2, #1
 8024322:	697b      	ldr	r3, [r7, #20]
 8024324:	fa02 f303 	lsl.w	r3, r2, r3
 8024328:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 802432a:	683a      	ldr	r2, [r7, #0]
 802432c:	693b      	ldr	r3, [r7, #16]
 802432e:	4013      	ands	r3, r2
 8024330:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024332:	68fa      	ldr	r2, [r7, #12]
 8024334:	693b      	ldr	r3, [r7, #16]
 8024336:	429a      	cmp	r2, r3
 8024338:	f040 80c9 	bne.w	80244ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 802433c:	4a6b      	ldr	r2, [pc, #428]	; (80244ec <HAL_GPIO_DeInit+0x1e8>)
 802433e:	697b      	ldr	r3, [r7, #20]
 8024340:	089b      	lsrs	r3, r3, #2
 8024342:	3302      	adds	r3, #2
 8024344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024348:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 802434a:	697b      	ldr	r3, [r7, #20]
 802434c:	f003 0303 	and.w	r3, r3, #3
 8024350:	009b      	lsls	r3, r3, #2
 8024352:	220f      	movs	r2, #15
 8024354:	fa02 f303 	lsl.w	r3, r2, r3
 8024358:	68ba      	ldr	r2, [r7, #8]
 802435a:	4013      	ands	r3, r2
 802435c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	4a63      	ldr	r2, [pc, #396]	; (80244f0 <HAL_GPIO_DeInit+0x1ec>)
 8024362:	4293      	cmp	r3, r2
 8024364:	d037      	beq.n	80243d6 <HAL_GPIO_DeInit+0xd2>
 8024366:	687b      	ldr	r3, [r7, #4]
 8024368:	4a62      	ldr	r2, [pc, #392]	; (80244f4 <HAL_GPIO_DeInit+0x1f0>)
 802436a:	4293      	cmp	r3, r2
 802436c:	d031      	beq.n	80243d2 <HAL_GPIO_DeInit+0xce>
 802436e:	687b      	ldr	r3, [r7, #4]
 8024370:	4a61      	ldr	r2, [pc, #388]	; (80244f8 <HAL_GPIO_DeInit+0x1f4>)
 8024372:	4293      	cmp	r3, r2
 8024374:	d02b      	beq.n	80243ce <HAL_GPIO_DeInit+0xca>
 8024376:	687b      	ldr	r3, [r7, #4]
 8024378:	4a60      	ldr	r2, [pc, #384]	; (80244fc <HAL_GPIO_DeInit+0x1f8>)
 802437a:	4293      	cmp	r3, r2
 802437c:	d025      	beq.n	80243ca <HAL_GPIO_DeInit+0xc6>
 802437e:	687b      	ldr	r3, [r7, #4]
 8024380:	4a5f      	ldr	r2, [pc, #380]	; (8024500 <HAL_GPIO_DeInit+0x1fc>)
 8024382:	4293      	cmp	r3, r2
 8024384:	d01f      	beq.n	80243c6 <HAL_GPIO_DeInit+0xc2>
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	4a5e      	ldr	r2, [pc, #376]	; (8024504 <HAL_GPIO_DeInit+0x200>)
 802438a:	4293      	cmp	r3, r2
 802438c:	d019      	beq.n	80243c2 <HAL_GPIO_DeInit+0xbe>
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	4a5d      	ldr	r2, [pc, #372]	; (8024508 <HAL_GPIO_DeInit+0x204>)
 8024392:	4293      	cmp	r3, r2
 8024394:	d013      	beq.n	80243be <HAL_GPIO_DeInit+0xba>
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	4a5c      	ldr	r2, [pc, #368]	; (802450c <HAL_GPIO_DeInit+0x208>)
 802439a:	4293      	cmp	r3, r2
 802439c:	d00d      	beq.n	80243ba <HAL_GPIO_DeInit+0xb6>
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	4a5b      	ldr	r2, [pc, #364]	; (8024510 <HAL_GPIO_DeInit+0x20c>)
 80243a2:	4293      	cmp	r3, r2
 80243a4:	d007      	beq.n	80243b6 <HAL_GPIO_DeInit+0xb2>
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	4a5a      	ldr	r2, [pc, #360]	; (8024514 <HAL_GPIO_DeInit+0x210>)
 80243aa:	4293      	cmp	r3, r2
 80243ac:	d101      	bne.n	80243b2 <HAL_GPIO_DeInit+0xae>
 80243ae:	2309      	movs	r3, #9
 80243b0:	e012      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243b2:	230a      	movs	r3, #10
 80243b4:	e010      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243b6:	2308      	movs	r3, #8
 80243b8:	e00e      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243ba:	2307      	movs	r3, #7
 80243bc:	e00c      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243be:	2306      	movs	r3, #6
 80243c0:	e00a      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243c2:	2305      	movs	r3, #5
 80243c4:	e008      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243c6:	2304      	movs	r3, #4
 80243c8:	e006      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243ca:	2303      	movs	r3, #3
 80243cc:	e004      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243ce:	2302      	movs	r3, #2
 80243d0:	e002      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243d2:	2301      	movs	r3, #1
 80243d4:	e000      	b.n	80243d8 <HAL_GPIO_DeInit+0xd4>
 80243d6:	2300      	movs	r3, #0
 80243d8:	697a      	ldr	r2, [r7, #20]
 80243da:	f002 0203 	and.w	r2, r2, #3
 80243de:	0092      	lsls	r2, r2, #2
 80243e0:	4093      	lsls	r3, r2
 80243e2:	68ba      	ldr	r2, [r7, #8]
 80243e4:	429a      	cmp	r2, r3
 80243e6:	d132      	bne.n	802444e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80243e8:	4b4b      	ldr	r3, [pc, #300]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 80243ea:	681a      	ldr	r2, [r3, #0]
 80243ec:	68fb      	ldr	r3, [r7, #12]
 80243ee:	43db      	mvns	r3, r3
 80243f0:	4949      	ldr	r1, [pc, #292]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 80243f2:	4013      	ands	r3, r2
 80243f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80243f6:	4b48      	ldr	r3, [pc, #288]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 80243f8:	685a      	ldr	r2, [r3, #4]
 80243fa:	68fb      	ldr	r3, [r7, #12]
 80243fc:	43db      	mvns	r3, r3
 80243fe:	4946      	ldr	r1, [pc, #280]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 8024400:	4013      	ands	r3, r2
 8024402:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024404:	4b44      	ldr	r3, [pc, #272]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 8024406:	68da      	ldr	r2, [r3, #12]
 8024408:	68fb      	ldr	r3, [r7, #12]
 802440a:	43db      	mvns	r3, r3
 802440c:	4942      	ldr	r1, [pc, #264]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 802440e:	4013      	ands	r3, r2
 8024410:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024412:	4b41      	ldr	r3, [pc, #260]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 8024414:	689a      	ldr	r2, [r3, #8]
 8024416:	68fb      	ldr	r3, [r7, #12]
 8024418:	43db      	mvns	r3, r3
 802441a:	493f      	ldr	r1, [pc, #252]	; (8024518 <HAL_GPIO_DeInit+0x214>)
 802441c:	4013      	ands	r3, r2
 802441e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024420:	697b      	ldr	r3, [r7, #20]
 8024422:	f003 0303 	and.w	r3, r3, #3
 8024426:	009b      	lsls	r3, r3, #2
 8024428:	220f      	movs	r2, #15
 802442a:	fa02 f303 	lsl.w	r3, r2, r3
 802442e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024430:	4a2e      	ldr	r2, [pc, #184]	; (80244ec <HAL_GPIO_DeInit+0x1e8>)
 8024432:	697b      	ldr	r3, [r7, #20]
 8024434:	089b      	lsrs	r3, r3, #2
 8024436:	3302      	adds	r3, #2
 8024438:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802443c:	68bb      	ldr	r3, [r7, #8]
 802443e:	43da      	mvns	r2, r3
 8024440:	482a      	ldr	r0, [pc, #168]	; (80244ec <HAL_GPIO_DeInit+0x1e8>)
 8024442:	697b      	ldr	r3, [r7, #20]
 8024444:	089b      	lsrs	r3, r3, #2
 8024446:	400a      	ands	r2, r1
 8024448:	3302      	adds	r3, #2
 802444a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	681a      	ldr	r2, [r3, #0]
 8024452:	697b      	ldr	r3, [r7, #20]
 8024454:	005b      	lsls	r3, r3, #1
 8024456:	2103      	movs	r1, #3
 8024458:	fa01 f303 	lsl.w	r3, r1, r3
 802445c:	43db      	mvns	r3, r3
 802445e:	401a      	ands	r2, r3
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024464:	697b      	ldr	r3, [r7, #20]
 8024466:	08da      	lsrs	r2, r3, #3
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	3208      	adds	r2, #8
 802446c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024470:	697b      	ldr	r3, [r7, #20]
 8024472:	f003 0307 	and.w	r3, r3, #7
 8024476:	009b      	lsls	r3, r3, #2
 8024478:	220f      	movs	r2, #15
 802447a:	fa02 f303 	lsl.w	r3, r2, r3
 802447e:	43db      	mvns	r3, r3
 8024480:	697a      	ldr	r2, [r7, #20]
 8024482:	08d2      	lsrs	r2, r2, #3
 8024484:	4019      	ands	r1, r3
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	3208      	adds	r2, #8
 802448a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802448e:	687b      	ldr	r3, [r7, #4]
 8024490:	68da      	ldr	r2, [r3, #12]
 8024492:	697b      	ldr	r3, [r7, #20]
 8024494:	005b      	lsls	r3, r3, #1
 8024496:	2103      	movs	r1, #3
 8024498:	fa01 f303 	lsl.w	r3, r1, r3
 802449c:	43db      	mvns	r3, r3
 802449e:	401a      	ands	r2, r3
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	685a      	ldr	r2, [r3, #4]
 80244a8:	2101      	movs	r1, #1
 80244aa:	697b      	ldr	r3, [r7, #20]
 80244ac:	fa01 f303 	lsl.w	r3, r1, r3
 80244b0:	43db      	mvns	r3, r3
 80244b2:	401a      	ands	r2, r3
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	689a      	ldr	r2, [r3, #8]
 80244bc:	697b      	ldr	r3, [r7, #20]
 80244be:	005b      	lsls	r3, r3, #1
 80244c0:	2103      	movs	r1, #3
 80244c2:	fa01 f303 	lsl.w	r3, r1, r3
 80244c6:	43db      	mvns	r3, r3
 80244c8:	401a      	ands	r2, r3
 80244ca:	687b      	ldr	r3, [r7, #4]
 80244cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80244ce:	697b      	ldr	r3, [r7, #20]
 80244d0:	3301      	adds	r3, #1
 80244d2:	617b      	str	r3, [r7, #20]
 80244d4:	697b      	ldr	r3, [r7, #20]
 80244d6:	2b0f      	cmp	r3, #15
 80244d8:	f67f af22 	bls.w	8024320 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80244dc:	bf00      	nop
 80244de:	bf00      	nop
 80244e0:	371c      	adds	r7, #28
 80244e2:	46bd      	mov	sp, r7
 80244e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244e8:	4770      	bx	lr
 80244ea:	bf00      	nop
 80244ec:	40013800 	.word	0x40013800
 80244f0:	40020000 	.word	0x40020000
 80244f4:	40020400 	.word	0x40020400
 80244f8:	40020800 	.word	0x40020800
 80244fc:	40020c00 	.word	0x40020c00
 8024500:	40021000 	.word	0x40021000
 8024504:	40021400 	.word	0x40021400
 8024508:	40021800 	.word	0x40021800
 802450c:	40021c00 	.word	0x40021c00
 8024510:	40022000 	.word	0x40022000
 8024514:	40022400 	.word	0x40022400
 8024518:	40013c00 	.word	0x40013c00

0802451c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802451c:	b480      	push	{r7}
 802451e:	b083      	sub	sp, #12
 8024520:	af00      	add	r7, sp, #0
 8024522:	6078      	str	r0, [r7, #4]
 8024524:	460b      	mov	r3, r1
 8024526:	807b      	strh	r3, [r7, #2]
 8024528:	4613      	mov	r3, r2
 802452a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802452c:	787b      	ldrb	r3, [r7, #1]
 802452e:	2b00      	cmp	r3, #0
 8024530:	d003      	beq.n	802453a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8024532:	887a      	ldrh	r2, [r7, #2]
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024538:	e003      	b.n	8024542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802453a:	887b      	ldrh	r3, [r7, #2]
 802453c:	041a      	lsls	r2, r3, #16
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	619a      	str	r2, [r3, #24]
}
 8024542:	bf00      	nop
 8024544:	370c      	adds	r7, #12
 8024546:	46bd      	mov	sp, r7
 8024548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802454c:	4770      	bx	lr
	...

08024550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8024550:	b580      	push	{r7, lr}
 8024552:	b082      	sub	sp, #8
 8024554:	af00      	add	r7, sp, #0
 8024556:	4603      	mov	r3, r0
 8024558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802455a:	4b08      	ldr	r3, [pc, #32]	; (802457c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802455c:	695a      	ldr	r2, [r3, #20]
 802455e:	88fb      	ldrh	r3, [r7, #6]
 8024560:	4013      	ands	r3, r2
 8024562:	2b00      	cmp	r3, #0
 8024564:	d006      	beq.n	8024574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024566:	4a05      	ldr	r2, [pc, #20]	; (802457c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024568:	88fb      	ldrh	r3, [r7, #6]
 802456a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 802456c:	88fb      	ldrh	r3, [r7, #6]
 802456e:	4618      	mov	r0, r3
 8024570:	f7fd fafe 	bl	8021b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8024574:	bf00      	nop
 8024576:	3708      	adds	r7, #8
 8024578:	46bd      	mov	sp, r7
 802457a:	bd80      	pop	{r7, pc}
 802457c:	40013c00 	.word	0x40013c00

08024580 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8024580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024582:	b08f      	sub	sp, #60	; 0x3c
 8024584:	af0a      	add	r7, sp, #40	; 0x28
 8024586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	2b00      	cmp	r3, #0
 802458c:	d101      	bne.n	8024592 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 802458e:	2301      	movs	r3, #1
 8024590:	e054      	b.n	802463c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8024592:	687b      	ldr	r3, [r7, #4]
 8024594:	681b      	ldr	r3, [r3, #0]
 8024596:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 802459e:	b2db      	uxtb	r3, r3
 80245a0:	2b00      	cmp	r3, #0
 80245a2:	d106      	bne.n	80245b2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	2200      	movs	r2, #0
 80245a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80245ac:	6878      	ldr	r0, [r7, #4]
 80245ae:	f008 fd01 	bl	802cfb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80245b2:	687b      	ldr	r3, [r7, #4]
 80245b4:	2203      	movs	r2, #3
 80245b6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80245ba:	68fb      	ldr	r3, [r7, #12]
 80245bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80245be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	d102      	bne.n	80245cc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	2200      	movs	r2, #0
 80245ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	681b      	ldr	r3, [r3, #0]
 80245d0:	4618      	mov	r0, r3
 80245d2:	f005 fd2f 	bl	802a034 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	681b      	ldr	r3, [r3, #0]
 80245da:	603b      	str	r3, [r7, #0]
 80245dc:	687e      	ldr	r6, [r7, #4]
 80245de:	466d      	mov	r5, sp
 80245e0:	f106 0410 	add.w	r4, r6, #16
 80245e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80245e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80245e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80245ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80245ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80245f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80245f4:	1d33      	adds	r3, r6, #4
 80245f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80245f8:	6838      	ldr	r0, [r7, #0]
 80245fa:	f005 fca9 	bl	8029f50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	2101      	movs	r1, #1
 8024604:	4618      	mov	r0, r3
 8024606:	f005 fd26 	bl	802a056 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	681b      	ldr	r3, [r3, #0]
 802460e:	603b      	str	r3, [r7, #0]
 8024610:	687e      	ldr	r6, [r7, #4]
 8024612:	466d      	mov	r5, sp
 8024614:	f106 0410 	add.w	r4, r6, #16
 8024618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802461a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802461c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802461e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024624:	e885 0003 	stmia.w	r5, {r0, r1}
 8024628:	1d33      	adds	r3, r6, #4
 802462a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802462c:	6838      	ldr	r0, [r7, #0]
 802462e:	f005 feaf 	bl	802a390 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8024632:	687b      	ldr	r3, [r7, #4]
 8024634:	2201      	movs	r2, #1
 8024636:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 802463a:	2300      	movs	r3, #0
}
 802463c:	4618      	mov	r0, r3
 802463e:	3714      	adds	r7, #20
 8024640:	46bd      	mov	sp, r7
 8024642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024644 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8024644:	b590      	push	{r4, r7, lr}
 8024646:	b089      	sub	sp, #36	; 0x24
 8024648:	af04      	add	r7, sp, #16
 802464a:	6078      	str	r0, [r7, #4]
 802464c:	4608      	mov	r0, r1
 802464e:	4611      	mov	r1, r2
 8024650:	461a      	mov	r2, r3
 8024652:	4603      	mov	r3, r0
 8024654:	70fb      	strb	r3, [r7, #3]
 8024656:	460b      	mov	r3, r1
 8024658:	70bb      	strb	r3, [r7, #2]
 802465a:	4613      	mov	r3, r2
 802465c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 802465e:	687b      	ldr	r3, [r7, #4]
 8024660:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024664:	2b01      	cmp	r3, #1
 8024666:	d101      	bne.n	802466c <HAL_HCD_HC_Init+0x28>
 8024668:	2302      	movs	r3, #2
 802466a:	e076      	b.n	802475a <HAL_HCD_HC_Init+0x116>
 802466c:	687b      	ldr	r3, [r7, #4]
 802466e:	2201      	movs	r2, #1
 8024670:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8024674:	78fb      	ldrb	r3, [r7, #3]
 8024676:	687a      	ldr	r2, [r7, #4]
 8024678:	212c      	movs	r1, #44	; 0x2c
 802467a:	fb01 f303 	mul.w	r3, r1, r3
 802467e:	4413      	add	r3, r2
 8024680:	333d      	adds	r3, #61	; 0x3d
 8024682:	2200      	movs	r2, #0
 8024684:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8024686:	78fb      	ldrb	r3, [r7, #3]
 8024688:	687a      	ldr	r2, [r7, #4]
 802468a:	212c      	movs	r1, #44	; 0x2c
 802468c:	fb01 f303 	mul.w	r3, r1, r3
 8024690:	4413      	add	r3, r2
 8024692:	3338      	adds	r3, #56	; 0x38
 8024694:	787a      	ldrb	r2, [r7, #1]
 8024696:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8024698:	78fb      	ldrb	r3, [r7, #3]
 802469a:	687a      	ldr	r2, [r7, #4]
 802469c:	212c      	movs	r1, #44	; 0x2c
 802469e:	fb01 f303 	mul.w	r3, r1, r3
 80246a2:	4413      	add	r3, r2
 80246a4:	3340      	adds	r3, #64	; 0x40
 80246a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80246a8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80246aa:	78fb      	ldrb	r3, [r7, #3]
 80246ac:	687a      	ldr	r2, [r7, #4]
 80246ae:	212c      	movs	r1, #44	; 0x2c
 80246b0:	fb01 f303 	mul.w	r3, r1, r3
 80246b4:	4413      	add	r3, r2
 80246b6:	3339      	adds	r3, #57	; 0x39
 80246b8:	78fa      	ldrb	r2, [r7, #3]
 80246ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80246bc:	78fb      	ldrb	r3, [r7, #3]
 80246be:	687a      	ldr	r2, [r7, #4]
 80246c0:	212c      	movs	r1, #44	; 0x2c
 80246c2:	fb01 f303 	mul.w	r3, r1, r3
 80246c6:	4413      	add	r3, r2
 80246c8:	333f      	adds	r3, #63	; 0x3f
 80246ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80246ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80246d0:	78fb      	ldrb	r3, [r7, #3]
 80246d2:	78ba      	ldrb	r2, [r7, #2]
 80246d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80246d8:	b2d0      	uxtb	r0, r2
 80246da:	687a      	ldr	r2, [r7, #4]
 80246dc:	212c      	movs	r1, #44	; 0x2c
 80246de:	fb01 f303 	mul.w	r3, r1, r3
 80246e2:	4413      	add	r3, r2
 80246e4:	333a      	adds	r3, #58	; 0x3a
 80246e6:	4602      	mov	r2, r0
 80246e8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80246ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80246ee:	2b00      	cmp	r3, #0
 80246f0:	da09      	bge.n	8024706 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80246f2:	78fb      	ldrb	r3, [r7, #3]
 80246f4:	687a      	ldr	r2, [r7, #4]
 80246f6:	212c      	movs	r1, #44	; 0x2c
 80246f8:	fb01 f303 	mul.w	r3, r1, r3
 80246fc:	4413      	add	r3, r2
 80246fe:	333b      	adds	r3, #59	; 0x3b
 8024700:	2201      	movs	r2, #1
 8024702:	701a      	strb	r2, [r3, #0]
 8024704:	e008      	b.n	8024718 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8024706:	78fb      	ldrb	r3, [r7, #3]
 8024708:	687a      	ldr	r2, [r7, #4]
 802470a:	212c      	movs	r1, #44	; 0x2c
 802470c:	fb01 f303 	mul.w	r3, r1, r3
 8024710:	4413      	add	r3, r2
 8024712:	333b      	adds	r3, #59	; 0x3b
 8024714:	2200      	movs	r2, #0
 8024716:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8024718:	78fb      	ldrb	r3, [r7, #3]
 802471a:	687a      	ldr	r2, [r7, #4]
 802471c:	212c      	movs	r1, #44	; 0x2c
 802471e:	fb01 f303 	mul.w	r3, r1, r3
 8024722:	4413      	add	r3, r2
 8024724:	333c      	adds	r3, #60	; 0x3c
 8024726:	f897 2020 	ldrb.w	r2, [r7, #32]
 802472a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 802472c:	687b      	ldr	r3, [r7, #4]
 802472e:	6818      	ldr	r0, [r3, #0]
 8024730:	787c      	ldrb	r4, [r7, #1]
 8024732:	78ba      	ldrb	r2, [r7, #2]
 8024734:	78f9      	ldrb	r1, [r7, #3]
 8024736:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8024738:	9302      	str	r3, [sp, #8]
 802473a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802473e:	9301      	str	r3, [sp, #4]
 8024740:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024744:	9300      	str	r3, [sp, #0]
 8024746:	4623      	mov	r3, r4
 8024748:	f005 ffa8 	bl	802a69c <USB_HC_Init>
 802474c:	4603      	mov	r3, r0
 802474e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	2200      	movs	r2, #0
 8024754:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8024758:	7bfb      	ldrb	r3, [r7, #15]
}
 802475a:	4618      	mov	r0, r3
 802475c:	3714      	adds	r7, #20
 802475e:	46bd      	mov	sp, r7
 8024760:	bd90      	pop	{r4, r7, pc}

08024762 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8024762:	b580      	push	{r7, lr}
 8024764:	b084      	sub	sp, #16
 8024766:	af00      	add	r7, sp, #0
 8024768:	6078      	str	r0, [r7, #4]
 802476a:	460b      	mov	r3, r1
 802476c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 802476e:	2300      	movs	r3, #0
 8024770:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8024772:	687b      	ldr	r3, [r7, #4]
 8024774:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024778:	2b01      	cmp	r3, #1
 802477a:	d101      	bne.n	8024780 <HAL_HCD_HC_Halt+0x1e>
 802477c:	2302      	movs	r3, #2
 802477e:	e00f      	b.n	80247a0 <HAL_HCD_HC_Halt+0x3e>
 8024780:	687b      	ldr	r3, [r7, #4]
 8024782:	2201      	movs	r2, #1
 8024784:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	681b      	ldr	r3, [r3, #0]
 802478c:	78fa      	ldrb	r2, [r7, #3]
 802478e:	4611      	mov	r1, r2
 8024790:	4618      	mov	r0, r3
 8024792:	f006 f9f8 	bl	802ab86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	2200      	movs	r2, #0
 802479a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 802479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80247a0:	4618      	mov	r0, r3
 80247a2:	3710      	adds	r7, #16
 80247a4:	46bd      	mov	sp, r7
 80247a6:	bd80      	pop	{r7, pc}

080247a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80247a8:	b580      	push	{r7, lr}
 80247aa:	b082      	sub	sp, #8
 80247ac:	af00      	add	r7, sp, #0
 80247ae:	6078      	str	r0, [r7, #4]
 80247b0:	4608      	mov	r0, r1
 80247b2:	4611      	mov	r1, r2
 80247b4:	461a      	mov	r2, r3
 80247b6:	4603      	mov	r3, r0
 80247b8:	70fb      	strb	r3, [r7, #3]
 80247ba:	460b      	mov	r3, r1
 80247bc:	70bb      	strb	r3, [r7, #2]
 80247be:	4613      	mov	r3, r2
 80247c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80247c2:	78fb      	ldrb	r3, [r7, #3]
 80247c4:	687a      	ldr	r2, [r7, #4]
 80247c6:	212c      	movs	r1, #44	; 0x2c
 80247c8:	fb01 f303 	mul.w	r3, r1, r3
 80247cc:	4413      	add	r3, r2
 80247ce:	333b      	adds	r3, #59	; 0x3b
 80247d0:	78ba      	ldrb	r2, [r7, #2]
 80247d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80247d4:	78fb      	ldrb	r3, [r7, #3]
 80247d6:	687a      	ldr	r2, [r7, #4]
 80247d8:	212c      	movs	r1, #44	; 0x2c
 80247da:	fb01 f303 	mul.w	r3, r1, r3
 80247de:	4413      	add	r3, r2
 80247e0:	333f      	adds	r3, #63	; 0x3f
 80247e2:	787a      	ldrb	r2, [r7, #1]
 80247e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80247e6:	7c3b      	ldrb	r3, [r7, #16]
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d112      	bne.n	8024812 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80247ec:	78fb      	ldrb	r3, [r7, #3]
 80247ee:	687a      	ldr	r2, [r7, #4]
 80247f0:	212c      	movs	r1, #44	; 0x2c
 80247f2:	fb01 f303 	mul.w	r3, r1, r3
 80247f6:	4413      	add	r3, r2
 80247f8:	3342      	adds	r3, #66	; 0x42
 80247fa:	2203      	movs	r2, #3
 80247fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80247fe:	78fb      	ldrb	r3, [r7, #3]
 8024800:	687a      	ldr	r2, [r7, #4]
 8024802:	212c      	movs	r1, #44	; 0x2c
 8024804:	fb01 f303 	mul.w	r3, r1, r3
 8024808:	4413      	add	r3, r2
 802480a:	333d      	adds	r3, #61	; 0x3d
 802480c:	7f3a      	ldrb	r2, [r7, #28]
 802480e:	701a      	strb	r2, [r3, #0]
 8024810:	e008      	b.n	8024824 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024812:	78fb      	ldrb	r3, [r7, #3]
 8024814:	687a      	ldr	r2, [r7, #4]
 8024816:	212c      	movs	r1, #44	; 0x2c
 8024818:	fb01 f303 	mul.w	r3, r1, r3
 802481c:	4413      	add	r3, r2
 802481e:	3342      	adds	r3, #66	; 0x42
 8024820:	2202      	movs	r2, #2
 8024822:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8024824:	787b      	ldrb	r3, [r7, #1]
 8024826:	2b03      	cmp	r3, #3
 8024828:	f200 80c6 	bhi.w	80249b8 <HAL_HCD_HC_SubmitRequest+0x210>
 802482c:	a201      	add	r2, pc, #4	; (adr r2, 8024834 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024832:	bf00      	nop
 8024834:	08024845 	.word	0x08024845
 8024838:	080249a5 	.word	0x080249a5
 802483c:	080248a9 	.word	0x080248a9
 8024840:	08024927 	.word	0x08024927
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8024844:	7c3b      	ldrb	r3, [r7, #16]
 8024846:	2b01      	cmp	r3, #1
 8024848:	f040 80b8 	bne.w	80249bc <HAL_HCD_HC_SubmitRequest+0x214>
 802484c:	78bb      	ldrb	r3, [r7, #2]
 802484e:	2b00      	cmp	r3, #0
 8024850:	f040 80b4 	bne.w	80249bc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8024854:	8b3b      	ldrh	r3, [r7, #24]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d108      	bne.n	802486c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 802485a:	78fb      	ldrb	r3, [r7, #3]
 802485c:	687a      	ldr	r2, [r7, #4]
 802485e:	212c      	movs	r1, #44	; 0x2c
 8024860:	fb01 f303 	mul.w	r3, r1, r3
 8024864:	4413      	add	r3, r2
 8024866:	3355      	adds	r3, #85	; 0x55
 8024868:	2201      	movs	r2, #1
 802486a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802486c:	78fb      	ldrb	r3, [r7, #3]
 802486e:	687a      	ldr	r2, [r7, #4]
 8024870:	212c      	movs	r1, #44	; 0x2c
 8024872:	fb01 f303 	mul.w	r3, r1, r3
 8024876:	4413      	add	r3, r2
 8024878:	3355      	adds	r3, #85	; 0x55
 802487a:	781b      	ldrb	r3, [r3, #0]
 802487c:	2b00      	cmp	r3, #0
 802487e:	d109      	bne.n	8024894 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024880:	78fb      	ldrb	r3, [r7, #3]
 8024882:	687a      	ldr	r2, [r7, #4]
 8024884:	212c      	movs	r1, #44	; 0x2c
 8024886:	fb01 f303 	mul.w	r3, r1, r3
 802488a:	4413      	add	r3, r2
 802488c:	3342      	adds	r3, #66	; 0x42
 802488e:	2200      	movs	r2, #0
 8024890:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024892:	e093      	b.n	80249bc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024894:	78fb      	ldrb	r3, [r7, #3]
 8024896:	687a      	ldr	r2, [r7, #4]
 8024898:	212c      	movs	r1, #44	; 0x2c
 802489a:	fb01 f303 	mul.w	r3, r1, r3
 802489e:	4413      	add	r3, r2
 80248a0:	3342      	adds	r3, #66	; 0x42
 80248a2:	2202      	movs	r2, #2
 80248a4:	701a      	strb	r2, [r3, #0]
      break;
 80248a6:	e089      	b.n	80249bc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80248a8:	78bb      	ldrb	r3, [r7, #2]
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d11d      	bne.n	80248ea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80248ae:	78fb      	ldrb	r3, [r7, #3]
 80248b0:	687a      	ldr	r2, [r7, #4]
 80248b2:	212c      	movs	r1, #44	; 0x2c
 80248b4:	fb01 f303 	mul.w	r3, r1, r3
 80248b8:	4413      	add	r3, r2
 80248ba:	3355      	adds	r3, #85	; 0x55
 80248bc:	781b      	ldrb	r3, [r3, #0]
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d109      	bne.n	80248d6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80248c2:	78fb      	ldrb	r3, [r7, #3]
 80248c4:	687a      	ldr	r2, [r7, #4]
 80248c6:	212c      	movs	r1, #44	; 0x2c
 80248c8:	fb01 f303 	mul.w	r3, r1, r3
 80248cc:	4413      	add	r3, r2
 80248ce:	3342      	adds	r3, #66	; 0x42
 80248d0:	2200      	movs	r2, #0
 80248d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80248d4:	e073      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80248d6:	78fb      	ldrb	r3, [r7, #3]
 80248d8:	687a      	ldr	r2, [r7, #4]
 80248da:	212c      	movs	r1, #44	; 0x2c
 80248dc:	fb01 f303 	mul.w	r3, r1, r3
 80248e0:	4413      	add	r3, r2
 80248e2:	3342      	adds	r3, #66	; 0x42
 80248e4:	2202      	movs	r2, #2
 80248e6:	701a      	strb	r2, [r3, #0]
      break;
 80248e8:	e069      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80248ea:	78fb      	ldrb	r3, [r7, #3]
 80248ec:	687a      	ldr	r2, [r7, #4]
 80248ee:	212c      	movs	r1, #44	; 0x2c
 80248f0:	fb01 f303 	mul.w	r3, r1, r3
 80248f4:	4413      	add	r3, r2
 80248f6:	3354      	adds	r3, #84	; 0x54
 80248f8:	781b      	ldrb	r3, [r3, #0]
 80248fa:	2b00      	cmp	r3, #0
 80248fc:	d109      	bne.n	8024912 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80248fe:	78fb      	ldrb	r3, [r7, #3]
 8024900:	687a      	ldr	r2, [r7, #4]
 8024902:	212c      	movs	r1, #44	; 0x2c
 8024904:	fb01 f303 	mul.w	r3, r1, r3
 8024908:	4413      	add	r3, r2
 802490a:	3342      	adds	r3, #66	; 0x42
 802490c:	2200      	movs	r2, #0
 802490e:	701a      	strb	r2, [r3, #0]
      break;
 8024910:	e055      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024912:	78fb      	ldrb	r3, [r7, #3]
 8024914:	687a      	ldr	r2, [r7, #4]
 8024916:	212c      	movs	r1, #44	; 0x2c
 8024918:	fb01 f303 	mul.w	r3, r1, r3
 802491c:	4413      	add	r3, r2
 802491e:	3342      	adds	r3, #66	; 0x42
 8024920:	2202      	movs	r2, #2
 8024922:	701a      	strb	r2, [r3, #0]
      break;
 8024924:	e04b      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8024926:	78bb      	ldrb	r3, [r7, #2]
 8024928:	2b00      	cmp	r3, #0
 802492a:	d11d      	bne.n	8024968 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802492c:	78fb      	ldrb	r3, [r7, #3]
 802492e:	687a      	ldr	r2, [r7, #4]
 8024930:	212c      	movs	r1, #44	; 0x2c
 8024932:	fb01 f303 	mul.w	r3, r1, r3
 8024936:	4413      	add	r3, r2
 8024938:	3355      	adds	r3, #85	; 0x55
 802493a:	781b      	ldrb	r3, [r3, #0]
 802493c:	2b00      	cmp	r3, #0
 802493e:	d109      	bne.n	8024954 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024940:	78fb      	ldrb	r3, [r7, #3]
 8024942:	687a      	ldr	r2, [r7, #4]
 8024944:	212c      	movs	r1, #44	; 0x2c
 8024946:	fb01 f303 	mul.w	r3, r1, r3
 802494a:	4413      	add	r3, r2
 802494c:	3342      	adds	r3, #66	; 0x42
 802494e:	2200      	movs	r2, #0
 8024950:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024952:	e034      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024954:	78fb      	ldrb	r3, [r7, #3]
 8024956:	687a      	ldr	r2, [r7, #4]
 8024958:	212c      	movs	r1, #44	; 0x2c
 802495a:	fb01 f303 	mul.w	r3, r1, r3
 802495e:	4413      	add	r3, r2
 8024960:	3342      	adds	r3, #66	; 0x42
 8024962:	2202      	movs	r2, #2
 8024964:	701a      	strb	r2, [r3, #0]
      break;
 8024966:	e02a      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8024968:	78fb      	ldrb	r3, [r7, #3]
 802496a:	687a      	ldr	r2, [r7, #4]
 802496c:	212c      	movs	r1, #44	; 0x2c
 802496e:	fb01 f303 	mul.w	r3, r1, r3
 8024972:	4413      	add	r3, r2
 8024974:	3354      	adds	r3, #84	; 0x54
 8024976:	781b      	ldrb	r3, [r3, #0]
 8024978:	2b00      	cmp	r3, #0
 802497a:	d109      	bne.n	8024990 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802497c:	78fb      	ldrb	r3, [r7, #3]
 802497e:	687a      	ldr	r2, [r7, #4]
 8024980:	212c      	movs	r1, #44	; 0x2c
 8024982:	fb01 f303 	mul.w	r3, r1, r3
 8024986:	4413      	add	r3, r2
 8024988:	3342      	adds	r3, #66	; 0x42
 802498a:	2200      	movs	r2, #0
 802498c:	701a      	strb	r2, [r3, #0]
      break;
 802498e:	e016      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024990:	78fb      	ldrb	r3, [r7, #3]
 8024992:	687a      	ldr	r2, [r7, #4]
 8024994:	212c      	movs	r1, #44	; 0x2c
 8024996:	fb01 f303 	mul.w	r3, r1, r3
 802499a:	4413      	add	r3, r2
 802499c:	3342      	adds	r3, #66	; 0x42
 802499e:	2202      	movs	r2, #2
 80249a0:	701a      	strb	r2, [r3, #0]
      break;
 80249a2:	e00c      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80249a4:	78fb      	ldrb	r3, [r7, #3]
 80249a6:	687a      	ldr	r2, [r7, #4]
 80249a8:	212c      	movs	r1, #44	; 0x2c
 80249aa:	fb01 f303 	mul.w	r3, r1, r3
 80249ae:	4413      	add	r3, r2
 80249b0:	3342      	adds	r3, #66	; 0x42
 80249b2:	2200      	movs	r2, #0
 80249b4:	701a      	strb	r2, [r3, #0]
      break;
 80249b6:	e002      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80249b8:	bf00      	nop
 80249ba:	e000      	b.n	80249be <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80249bc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80249be:	78fb      	ldrb	r3, [r7, #3]
 80249c0:	687a      	ldr	r2, [r7, #4]
 80249c2:	212c      	movs	r1, #44	; 0x2c
 80249c4:	fb01 f303 	mul.w	r3, r1, r3
 80249c8:	4413      	add	r3, r2
 80249ca:	3344      	adds	r3, #68	; 0x44
 80249cc:	697a      	ldr	r2, [r7, #20]
 80249ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80249d0:	78fb      	ldrb	r3, [r7, #3]
 80249d2:	8b3a      	ldrh	r2, [r7, #24]
 80249d4:	6879      	ldr	r1, [r7, #4]
 80249d6:	202c      	movs	r0, #44	; 0x2c
 80249d8:	fb00 f303 	mul.w	r3, r0, r3
 80249dc:	440b      	add	r3, r1
 80249de:	334c      	adds	r3, #76	; 0x4c
 80249e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80249e2:	78fb      	ldrb	r3, [r7, #3]
 80249e4:	687a      	ldr	r2, [r7, #4]
 80249e6:	212c      	movs	r1, #44	; 0x2c
 80249e8:	fb01 f303 	mul.w	r3, r1, r3
 80249ec:	4413      	add	r3, r2
 80249ee:	3360      	adds	r3, #96	; 0x60
 80249f0:	2200      	movs	r2, #0
 80249f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80249f4:	78fb      	ldrb	r3, [r7, #3]
 80249f6:	687a      	ldr	r2, [r7, #4]
 80249f8:	212c      	movs	r1, #44	; 0x2c
 80249fa:	fb01 f303 	mul.w	r3, r1, r3
 80249fe:	4413      	add	r3, r2
 8024a00:	3350      	adds	r3, #80	; 0x50
 8024a02:	2200      	movs	r2, #0
 8024a04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024a06:	78fb      	ldrb	r3, [r7, #3]
 8024a08:	687a      	ldr	r2, [r7, #4]
 8024a0a:	212c      	movs	r1, #44	; 0x2c
 8024a0c:	fb01 f303 	mul.w	r3, r1, r3
 8024a10:	4413      	add	r3, r2
 8024a12:	3339      	adds	r3, #57	; 0x39
 8024a14:	78fa      	ldrb	r2, [r7, #3]
 8024a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024a18:	78fb      	ldrb	r3, [r7, #3]
 8024a1a:	687a      	ldr	r2, [r7, #4]
 8024a1c:	212c      	movs	r1, #44	; 0x2c
 8024a1e:	fb01 f303 	mul.w	r3, r1, r3
 8024a22:	4413      	add	r3, r2
 8024a24:	3361      	adds	r3, #97	; 0x61
 8024a26:	2200      	movs	r2, #0
 8024a28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8024a2a:	687b      	ldr	r3, [r7, #4]
 8024a2c:	6818      	ldr	r0, [r3, #0]
 8024a2e:	78fb      	ldrb	r3, [r7, #3]
 8024a30:	222c      	movs	r2, #44	; 0x2c
 8024a32:	fb02 f303 	mul.w	r3, r2, r3
 8024a36:	3338      	adds	r3, #56	; 0x38
 8024a38:	687a      	ldr	r2, [r7, #4]
 8024a3a:	18d1      	adds	r1, r2, r3
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	691b      	ldr	r3, [r3, #16]
 8024a40:	b2db      	uxtb	r3, r3
 8024a42:	461a      	mov	r2, r3
 8024a44:	f005 ff4c 	bl	802a8e0 <USB_HC_StartXfer>
 8024a48:	4603      	mov	r3, r0
}
 8024a4a:	4618      	mov	r0, r3
 8024a4c:	3708      	adds	r7, #8
 8024a4e:	46bd      	mov	sp, r7
 8024a50:	bd80      	pop	{r7, pc}
 8024a52:	bf00      	nop

08024a54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8024a54:	b580      	push	{r7, lr}
 8024a56:	b086      	sub	sp, #24
 8024a58:	af00      	add	r7, sp, #0
 8024a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024a62:	693b      	ldr	r3, [r7, #16]
 8024a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8024a66:	687b      	ldr	r3, [r7, #4]
 8024a68:	681b      	ldr	r3, [r3, #0]
 8024a6a:	4618      	mov	r0, r3
 8024a6c:	f005 fc4d 	bl	802a30a <USB_GetMode>
 8024a70:	4603      	mov	r3, r0
 8024a72:	2b01      	cmp	r3, #1
 8024a74:	f040 80f6 	bne.w	8024c64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8024a78:	687b      	ldr	r3, [r7, #4]
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f005 fc31 	bl	802a2e4 <USB_ReadInterrupts>
 8024a82:	4603      	mov	r3, r0
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	f000 80ec 	beq.w	8024c62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	681b      	ldr	r3, [r3, #0]
 8024a8e:	4618      	mov	r0, r3
 8024a90:	f005 fc28 	bl	802a2e4 <USB_ReadInterrupts>
 8024a94:	4603      	mov	r3, r0
 8024a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024a9e:	d104      	bne.n	8024aaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	4618      	mov	r0, r3
 8024ab0:	f005 fc18 	bl	802a2e4 <USB_ReadInterrupts>
 8024ab4:	4603      	mov	r3, r0
 8024ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024abe:	d104      	bne.n	8024aca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	681b      	ldr	r3, [r3, #0]
 8024ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	681b      	ldr	r3, [r3, #0]
 8024ace:	4618      	mov	r0, r3
 8024ad0:	f005 fc08 	bl	802a2e4 <USB_ReadInterrupts>
 8024ad4:	4603      	mov	r3, r0
 8024ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024ade:	d104      	bne.n	8024aea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8024ae0:	687b      	ldr	r3, [r7, #4]
 8024ae2:	681b      	ldr	r3, [r3, #0]
 8024ae4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024aea:	687b      	ldr	r3, [r7, #4]
 8024aec:	681b      	ldr	r3, [r3, #0]
 8024aee:	4618      	mov	r0, r3
 8024af0:	f005 fbf8 	bl	802a2e4 <USB_ReadInterrupts>
 8024af4:	4603      	mov	r3, r0
 8024af6:	f003 0302 	and.w	r3, r3, #2
 8024afa:	2b02      	cmp	r3, #2
 8024afc:	d103      	bne.n	8024b06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	681b      	ldr	r3, [r3, #0]
 8024b02:	2202      	movs	r2, #2
 8024b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	4618      	mov	r0, r3
 8024b0c:	f005 fbea 	bl	802a2e4 <USB_ReadInterrupts>
 8024b10:	4603      	mov	r3, r0
 8024b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024b1a:	d11c      	bne.n	8024b56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8024b24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8024b26:	68fb      	ldr	r3, [r7, #12]
 8024b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	f003 0301 	and.w	r3, r3, #1
 8024b32:	2b00      	cmp	r3, #0
 8024b34:	d10f      	bne.n	8024b56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8024b36:	2110      	movs	r1, #16
 8024b38:	6938      	ldr	r0, [r7, #16]
 8024b3a:	f005 fad9 	bl	802a0f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8024b3e:	6938      	ldr	r0, [r7, #16]
 8024b40:	f005 fb0a 	bl	802a158 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	2101      	movs	r1, #1
 8024b4a:	4618      	mov	r0, r3
 8024b4c:	f005 fce0 	bl	802a510 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8024b50:	6878      	ldr	r0, [r7, #4]
 8024b52:	f008 faa9 	bl	802d0a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	681b      	ldr	r3, [r3, #0]
 8024b5a:	4618      	mov	r0, r3
 8024b5c:	f005 fbc2 	bl	802a2e4 <USB_ReadInterrupts>
 8024b60:	4603      	mov	r3, r0
 8024b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024b6a:	d102      	bne.n	8024b72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8024b6c:	6878      	ldr	r0, [r7, #4]
 8024b6e:	f001 f89e 	bl	8025cae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	681b      	ldr	r3, [r3, #0]
 8024b76:	4618      	mov	r0, r3
 8024b78:	f005 fbb4 	bl	802a2e4 <USB_ReadInterrupts>
 8024b7c:	4603      	mov	r3, r0
 8024b7e:	f003 0308 	and.w	r3, r3, #8
 8024b82:	2b08      	cmp	r3, #8
 8024b84:	d106      	bne.n	8024b94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8024b86:	6878      	ldr	r0, [r7, #4]
 8024b88:	f008 fa72 	bl	802d070 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	2208      	movs	r2, #8
 8024b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8024b94:	687b      	ldr	r3, [r7, #4]
 8024b96:	681b      	ldr	r3, [r3, #0]
 8024b98:	4618      	mov	r0, r3
 8024b9a:	f005 fba3 	bl	802a2e4 <USB_ReadInterrupts>
 8024b9e:	4603      	mov	r3, r0
 8024ba0:	f003 0310 	and.w	r3, r3, #16
 8024ba4:	2b10      	cmp	r3, #16
 8024ba6:	d101      	bne.n	8024bac <HAL_HCD_IRQHandler+0x158>
 8024ba8:	2301      	movs	r3, #1
 8024baa:	e000      	b.n	8024bae <HAL_HCD_IRQHandler+0x15a>
 8024bac:	2300      	movs	r3, #0
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d012      	beq.n	8024bd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	699a      	ldr	r2, [r3, #24]
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	681b      	ldr	r3, [r3, #0]
 8024bbc:	f022 0210 	bic.w	r2, r2, #16
 8024bc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8024bc2:	6878      	ldr	r0, [r7, #4]
 8024bc4:	f000 ffa1 	bl	8025b0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	681b      	ldr	r3, [r3, #0]
 8024bcc:	699a      	ldr	r2, [r3, #24]
 8024bce:	687b      	ldr	r3, [r7, #4]
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	f042 0210 	orr.w	r2, r2, #16
 8024bd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8024bd8:	687b      	ldr	r3, [r7, #4]
 8024bda:	681b      	ldr	r3, [r3, #0]
 8024bdc:	4618      	mov	r0, r3
 8024bde:	f005 fb81 	bl	802a2e4 <USB_ReadInterrupts>
 8024be2:	4603      	mov	r3, r0
 8024be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024be8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8024bec:	d13a      	bne.n	8024c64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	681b      	ldr	r3, [r3, #0]
 8024bf2:	4618      	mov	r0, r3
 8024bf4:	f005 ffb6 	bl	802ab64 <USB_HC_ReadInterrupt>
 8024bf8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024bfa:	2300      	movs	r3, #0
 8024bfc:	617b      	str	r3, [r7, #20]
 8024bfe:	e025      	b.n	8024c4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8024c00:	697b      	ldr	r3, [r7, #20]
 8024c02:	f003 030f 	and.w	r3, r3, #15
 8024c06:	68ba      	ldr	r2, [r7, #8]
 8024c08:	fa22 f303 	lsr.w	r3, r2, r3
 8024c0c:	f003 0301 	and.w	r3, r3, #1
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d018      	beq.n	8024c46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8024c14:	697b      	ldr	r3, [r7, #20]
 8024c16:	015a      	lsls	r2, r3, #5
 8024c18:	68fb      	ldr	r3, [r7, #12]
 8024c1a:	4413      	add	r3, r2
 8024c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024c20:	681b      	ldr	r3, [r3, #0]
 8024c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024c2a:	d106      	bne.n	8024c3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8024c2c:	697b      	ldr	r3, [r7, #20]
 8024c2e:	b2db      	uxtb	r3, r3
 8024c30:	4619      	mov	r1, r3
 8024c32:	6878      	ldr	r0, [r7, #4]
 8024c34:	f000 f8ab 	bl	8024d8e <HCD_HC_IN_IRQHandler>
 8024c38:	e005      	b.n	8024c46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8024c3a:	697b      	ldr	r3, [r7, #20]
 8024c3c:	b2db      	uxtb	r3, r3
 8024c3e:	4619      	mov	r1, r3
 8024c40:	6878      	ldr	r0, [r7, #4]
 8024c42:	f000 fbf9 	bl	8025438 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024c46:	697b      	ldr	r3, [r7, #20]
 8024c48:	3301      	adds	r3, #1
 8024c4a:	617b      	str	r3, [r7, #20]
 8024c4c:	687b      	ldr	r3, [r7, #4]
 8024c4e:	689b      	ldr	r3, [r3, #8]
 8024c50:	697a      	ldr	r2, [r7, #20]
 8024c52:	429a      	cmp	r2, r3
 8024c54:	d3d4      	bcc.n	8024c00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8024c5e:	615a      	str	r2, [r3, #20]
 8024c60:	e000      	b.n	8024c64 <HAL_HCD_IRQHandler+0x210>
      return;
 8024c62:	bf00      	nop
    }
  }
}
 8024c64:	3718      	adds	r7, #24
 8024c66:	46bd      	mov	sp, r7
 8024c68:	bd80      	pop	{r7, pc}

08024c6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8024c6a:	b580      	push	{r7, lr}
 8024c6c:	b082      	sub	sp, #8
 8024c6e:	af00      	add	r7, sp, #0
 8024c70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024c72:	687b      	ldr	r3, [r7, #4]
 8024c74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024c78:	2b01      	cmp	r3, #1
 8024c7a:	d101      	bne.n	8024c80 <HAL_HCD_Start+0x16>
 8024c7c:	2302      	movs	r3, #2
 8024c7e:	e013      	b.n	8024ca8 <HAL_HCD_Start+0x3e>
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	2201      	movs	r2, #1
 8024c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8024c88:	687b      	ldr	r3, [r7, #4]
 8024c8a:	681b      	ldr	r3, [r3, #0]
 8024c8c:	2101      	movs	r1, #1
 8024c8e:	4618      	mov	r0, r3
 8024c90:	f005 fca2 	bl	802a5d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	681b      	ldr	r3, [r3, #0]
 8024c98:	4618      	mov	r0, r3
 8024c9a:	f005 f9ba 	bl	802a012 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8024c9e:	687b      	ldr	r3, [r7, #4]
 8024ca0:	2200      	movs	r2, #0
 8024ca2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024ca6:	2300      	movs	r3, #0
}
 8024ca8:	4618      	mov	r0, r3
 8024caa:	3708      	adds	r7, #8
 8024cac:	46bd      	mov	sp, r7
 8024cae:	bd80      	pop	{r7, pc}

08024cb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b082      	sub	sp, #8
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024cbe:	2b01      	cmp	r3, #1
 8024cc0:	d101      	bne.n	8024cc6 <HAL_HCD_Stop+0x16>
 8024cc2:	2302      	movs	r3, #2
 8024cc4:	e00d      	b.n	8024ce2 <HAL_HCD_Stop+0x32>
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	2201      	movs	r2, #1
 8024cca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	4618      	mov	r0, r3
 8024cd4:	f006 f890 	bl	802adf8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	2200      	movs	r2, #0
 8024cdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024ce0:	2300      	movs	r3, #0
}
 8024ce2:	4618      	mov	r0, r3
 8024ce4:	3708      	adds	r7, #8
 8024ce6:	46bd      	mov	sp, r7
 8024ce8:	bd80      	pop	{r7, pc}

08024cea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8024cea:	b580      	push	{r7, lr}
 8024cec:	b082      	sub	sp, #8
 8024cee:	af00      	add	r7, sp, #0
 8024cf0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	4618      	mov	r0, r3
 8024cf8:	f005 fc44 	bl	802a584 <USB_ResetPort>
 8024cfc:	4603      	mov	r3, r0
}
 8024cfe:	4618      	mov	r0, r3
 8024d00:	3708      	adds	r7, #8
 8024d02:	46bd      	mov	sp, r7
 8024d04:	bd80      	pop	{r7, pc}

08024d06 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024d06:	b480      	push	{r7}
 8024d08:	b083      	sub	sp, #12
 8024d0a:	af00      	add	r7, sp, #0
 8024d0c:	6078      	str	r0, [r7, #4]
 8024d0e:	460b      	mov	r3, r1
 8024d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8024d12:	78fb      	ldrb	r3, [r7, #3]
 8024d14:	687a      	ldr	r2, [r7, #4]
 8024d16:	212c      	movs	r1, #44	; 0x2c
 8024d18:	fb01 f303 	mul.w	r3, r1, r3
 8024d1c:	4413      	add	r3, r2
 8024d1e:	3360      	adds	r3, #96	; 0x60
 8024d20:	781b      	ldrb	r3, [r3, #0]
}
 8024d22:	4618      	mov	r0, r3
 8024d24:	370c      	adds	r7, #12
 8024d26:	46bd      	mov	sp, r7
 8024d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d2c:	4770      	bx	lr

08024d2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024d2e:	b480      	push	{r7}
 8024d30:	b083      	sub	sp, #12
 8024d32:	af00      	add	r7, sp, #0
 8024d34:	6078      	str	r0, [r7, #4]
 8024d36:	460b      	mov	r3, r1
 8024d38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8024d3a:	78fb      	ldrb	r3, [r7, #3]
 8024d3c:	687a      	ldr	r2, [r7, #4]
 8024d3e:	212c      	movs	r1, #44	; 0x2c
 8024d40:	fb01 f303 	mul.w	r3, r1, r3
 8024d44:	4413      	add	r3, r2
 8024d46:	3350      	adds	r3, #80	; 0x50
 8024d48:	681b      	ldr	r3, [r3, #0]
}
 8024d4a:	4618      	mov	r0, r3
 8024d4c:	370c      	adds	r7, #12
 8024d4e:	46bd      	mov	sp, r7
 8024d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d54:	4770      	bx	lr

08024d56 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8024d56:	b580      	push	{r7, lr}
 8024d58:	b082      	sub	sp, #8
 8024d5a:	af00      	add	r7, sp, #0
 8024d5c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	4618      	mov	r0, r3
 8024d64:	f005 fc88 	bl	802a678 <USB_GetCurrentFrame>
 8024d68:	4603      	mov	r3, r0
}
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	3708      	adds	r7, #8
 8024d6e:	46bd      	mov	sp, r7
 8024d70:	bd80      	pop	{r7, pc}

08024d72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8024d72:	b580      	push	{r7, lr}
 8024d74:	b082      	sub	sp, #8
 8024d76:	af00      	add	r7, sp, #0
 8024d78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	681b      	ldr	r3, [r3, #0]
 8024d7e:	4618      	mov	r0, r3
 8024d80:	f005 fc63 	bl	802a64a <USB_GetHostSpeed>
 8024d84:	4603      	mov	r3, r0
}
 8024d86:	4618      	mov	r0, r3
 8024d88:	3708      	adds	r7, #8
 8024d8a:	46bd      	mov	sp, r7
 8024d8c:	bd80      	pop	{r7, pc}

08024d8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024d8e:	b580      	push	{r7, lr}
 8024d90:	b086      	sub	sp, #24
 8024d92:	af00      	add	r7, sp, #0
 8024d94:	6078      	str	r0, [r7, #4]
 8024d96:	460b      	mov	r3, r1
 8024d98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024da0:	697b      	ldr	r3, [r7, #20]
 8024da2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8024da4:	78fb      	ldrb	r3, [r7, #3]
 8024da6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8024da8:	68fb      	ldr	r3, [r7, #12]
 8024daa:	015a      	lsls	r2, r3, #5
 8024dac:	693b      	ldr	r3, [r7, #16]
 8024dae:	4413      	add	r3, r2
 8024db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024db4:	689b      	ldr	r3, [r3, #8]
 8024db6:	f003 0304 	and.w	r3, r3, #4
 8024dba:	2b04      	cmp	r3, #4
 8024dbc:	d11a      	bne.n	8024df4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8024dbe:	68fb      	ldr	r3, [r7, #12]
 8024dc0:	015a      	lsls	r2, r3, #5
 8024dc2:	693b      	ldr	r3, [r7, #16]
 8024dc4:	4413      	add	r3, r2
 8024dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dca:	461a      	mov	r2, r3
 8024dcc:	2304      	movs	r3, #4
 8024dce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024dd0:	687a      	ldr	r2, [r7, #4]
 8024dd2:	68fb      	ldr	r3, [r7, #12]
 8024dd4:	212c      	movs	r1, #44	; 0x2c
 8024dd6:	fb01 f303 	mul.w	r3, r1, r3
 8024dda:	4413      	add	r3, r2
 8024ddc:	3361      	adds	r3, #97	; 0x61
 8024dde:	2206      	movs	r2, #6
 8024de0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024de2:	687b      	ldr	r3, [r7, #4]
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	68fa      	ldr	r2, [r7, #12]
 8024de8:	b2d2      	uxtb	r2, r2
 8024dea:	4611      	mov	r1, r2
 8024dec:	4618      	mov	r0, r3
 8024dee:	f005 feca 	bl	802ab86 <USB_HC_Halt>
 8024df2:	e0af      	b.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8024df4:	68fb      	ldr	r3, [r7, #12]
 8024df6:	015a      	lsls	r2, r3, #5
 8024df8:	693b      	ldr	r3, [r7, #16]
 8024dfa:	4413      	add	r3, r2
 8024dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e00:	689b      	ldr	r3, [r3, #8]
 8024e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024e0a:	d11b      	bne.n	8024e44 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8024e0c:	68fb      	ldr	r3, [r7, #12]
 8024e0e:	015a      	lsls	r2, r3, #5
 8024e10:	693b      	ldr	r3, [r7, #16]
 8024e12:	4413      	add	r3, r2
 8024e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e18:	461a      	mov	r2, r3
 8024e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024e1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8024e20:	687a      	ldr	r2, [r7, #4]
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	212c      	movs	r1, #44	; 0x2c
 8024e26:	fb01 f303 	mul.w	r3, r1, r3
 8024e2a:	4413      	add	r3, r2
 8024e2c:	3361      	adds	r3, #97	; 0x61
 8024e2e:	2207      	movs	r2, #7
 8024e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024e32:	687b      	ldr	r3, [r7, #4]
 8024e34:	681b      	ldr	r3, [r3, #0]
 8024e36:	68fa      	ldr	r2, [r7, #12]
 8024e38:	b2d2      	uxtb	r2, r2
 8024e3a:	4611      	mov	r1, r2
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f005 fea2 	bl	802ab86 <USB_HC_Halt>
 8024e42:	e087      	b.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8024e44:	68fb      	ldr	r3, [r7, #12]
 8024e46:	015a      	lsls	r2, r3, #5
 8024e48:	693b      	ldr	r3, [r7, #16]
 8024e4a:	4413      	add	r3, r2
 8024e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e50:	689b      	ldr	r3, [r3, #8]
 8024e52:	f003 0320 	and.w	r3, r3, #32
 8024e56:	2b20      	cmp	r3, #32
 8024e58:	d109      	bne.n	8024e6e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	015a      	lsls	r2, r3, #5
 8024e5e:	693b      	ldr	r3, [r7, #16]
 8024e60:	4413      	add	r3, r2
 8024e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e66:	461a      	mov	r2, r3
 8024e68:	2320      	movs	r3, #32
 8024e6a:	6093      	str	r3, [r2, #8]
 8024e6c:	e072      	b.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8024e6e:	68fb      	ldr	r3, [r7, #12]
 8024e70:	015a      	lsls	r2, r3, #5
 8024e72:	693b      	ldr	r3, [r7, #16]
 8024e74:	4413      	add	r3, r2
 8024e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e7a:	689b      	ldr	r3, [r3, #8]
 8024e7c:	f003 0308 	and.w	r3, r3, #8
 8024e80:	2b08      	cmp	r3, #8
 8024e82:	d11a      	bne.n	8024eba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8024e84:	68fb      	ldr	r3, [r7, #12]
 8024e86:	015a      	lsls	r2, r3, #5
 8024e88:	693b      	ldr	r3, [r7, #16]
 8024e8a:	4413      	add	r3, r2
 8024e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e90:	461a      	mov	r2, r3
 8024e92:	2308      	movs	r3, #8
 8024e94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8024e96:	687a      	ldr	r2, [r7, #4]
 8024e98:	68fb      	ldr	r3, [r7, #12]
 8024e9a:	212c      	movs	r1, #44	; 0x2c
 8024e9c:	fb01 f303 	mul.w	r3, r1, r3
 8024ea0:	4413      	add	r3, r2
 8024ea2:	3361      	adds	r3, #97	; 0x61
 8024ea4:	2205      	movs	r2, #5
 8024ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	681b      	ldr	r3, [r3, #0]
 8024eac:	68fa      	ldr	r2, [r7, #12]
 8024eae:	b2d2      	uxtb	r2, r2
 8024eb0:	4611      	mov	r1, r2
 8024eb2:	4618      	mov	r0, r3
 8024eb4:	f005 fe67 	bl	802ab86 <USB_HC_Halt>
 8024eb8:	e04c      	b.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8024eba:	68fb      	ldr	r3, [r7, #12]
 8024ebc:	015a      	lsls	r2, r3, #5
 8024ebe:	693b      	ldr	r3, [r7, #16]
 8024ec0:	4413      	add	r3, r2
 8024ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ec6:	689b      	ldr	r3, [r3, #8]
 8024ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024ed0:	d11b      	bne.n	8024f0a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8024ed2:	68fb      	ldr	r3, [r7, #12]
 8024ed4:	015a      	lsls	r2, r3, #5
 8024ed6:	693b      	ldr	r3, [r7, #16]
 8024ed8:	4413      	add	r3, r2
 8024eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ede:	461a      	mov	r2, r3
 8024ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8024ee6:	687a      	ldr	r2, [r7, #4]
 8024ee8:	68fb      	ldr	r3, [r7, #12]
 8024eea:	212c      	movs	r1, #44	; 0x2c
 8024eec:	fb01 f303 	mul.w	r3, r1, r3
 8024ef0:	4413      	add	r3, r2
 8024ef2:	3361      	adds	r3, #97	; 0x61
 8024ef4:	2208      	movs	r2, #8
 8024ef6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	681b      	ldr	r3, [r3, #0]
 8024efc:	68fa      	ldr	r2, [r7, #12]
 8024efe:	b2d2      	uxtb	r2, r2
 8024f00:	4611      	mov	r1, r2
 8024f02:	4618      	mov	r0, r3
 8024f04:	f005 fe3f 	bl	802ab86 <USB_HC_Halt>
 8024f08:	e024      	b.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8024f0a:	68fb      	ldr	r3, [r7, #12]
 8024f0c:	015a      	lsls	r2, r3, #5
 8024f0e:	693b      	ldr	r3, [r7, #16]
 8024f10:	4413      	add	r3, r2
 8024f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f16:	689b      	ldr	r3, [r3, #8]
 8024f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024f1c:	2b80      	cmp	r3, #128	; 0x80
 8024f1e:	d119      	bne.n	8024f54 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	015a      	lsls	r2, r3, #5
 8024f24:	693b      	ldr	r3, [r7, #16]
 8024f26:	4413      	add	r3, r2
 8024f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f2c:	461a      	mov	r2, r3
 8024f2e:	2380      	movs	r3, #128	; 0x80
 8024f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024f32:	687a      	ldr	r2, [r7, #4]
 8024f34:	68fb      	ldr	r3, [r7, #12]
 8024f36:	212c      	movs	r1, #44	; 0x2c
 8024f38:	fb01 f303 	mul.w	r3, r1, r3
 8024f3c:	4413      	add	r3, r2
 8024f3e:	3361      	adds	r3, #97	; 0x61
 8024f40:	2206      	movs	r2, #6
 8024f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	681b      	ldr	r3, [r3, #0]
 8024f48:	68fa      	ldr	r2, [r7, #12]
 8024f4a:	b2d2      	uxtb	r2, r2
 8024f4c:	4611      	mov	r1, r2
 8024f4e:	4618      	mov	r0, r3
 8024f50:	f005 fe19 	bl	802ab86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8024f54:	68fb      	ldr	r3, [r7, #12]
 8024f56:	015a      	lsls	r2, r3, #5
 8024f58:	693b      	ldr	r3, [r7, #16]
 8024f5a:	4413      	add	r3, r2
 8024f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f60:	689b      	ldr	r3, [r3, #8]
 8024f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024f6a:	d112      	bne.n	8024f92 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	68fa      	ldr	r2, [r7, #12]
 8024f72:	b2d2      	uxtb	r2, r2
 8024f74:	4611      	mov	r1, r2
 8024f76:	4618      	mov	r0, r3
 8024f78:	f005 fe05 	bl	802ab86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8024f7c:	68fb      	ldr	r3, [r7, #12]
 8024f7e:	015a      	lsls	r2, r3, #5
 8024f80:	693b      	ldr	r3, [r7, #16]
 8024f82:	4413      	add	r3, r2
 8024f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f88:	461a      	mov	r2, r3
 8024f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024f8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8024f90:	e24e      	b.n	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8024f92:	68fb      	ldr	r3, [r7, #12]
 8024f94:	015a      	lsls	r2, r3, #5
 8024f96:	693b      	ldr	r3, [r7, #16]
 8024f98:	4413      	add	r3, r2
 8024f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f9e:	689b      	ldr	r3, [r3, #8]
 8024fa0:	f003 0301 	and.w	r3, r3, #1
 8024fa4:	2b01      	cmp	r3, #1
 8024fa6:	f040 80df 	bne.w	8025168 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	691b      	ldr	r3, [r3, #16]
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d019      	beq.n	8024fe6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024fb2:	687a      	ldr	r2, [r7, #4]
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	212c      	movs	r1, #44	; 0x2c
 8024fb8:	fb01 f303 	mul.w	r3, r1, r3
 8024fbc:	4413      	add	r3, r2
 8024fbe:	3348      	adds	r3, #72	; 0x48
 8024fc0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8024fc2:	68fb      	ldr	r3, [r7, #12]
 8024fc4:	0159      	lsls	r1, r3, #5
 8024fc6:	693b      	ldr	r3, [r7, #16]
 8024fc8:	440b      	add	r3, r1
 8024fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fce:	691b      	ldr	r3, [r3, #16]
 8024fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024fd4:	1ad2      	subs	r2, r2, r3
 8024fd6:	6879      	ldr	r1, [r7, #4]
 8024fd8:	68fb      	ldr	r3, [r7, #12]
 8024fda:	202c      	movs	r0, #44	; 0x2c
 8024fdc:	fb00 f303 	mul.w	r3, r0, r3
 8024fe0:	440b      	add	r3, r1
 8024fe2:	3350      	adds	r3, #80	; 0x50
 8024fe4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8024fe6:	687a      	ldr	r2, [r7, #4]
 8024fe8:	68fb      	ldr	r3, [r7, #12]
 8024fea:	212c      	movs	r1, #44	; 0x2c
 8024fec:	fb01 f303 	mul.w	r3, r1, r3
 8024ff0:	4413      	add	r3, r2
 8024ff2:	3361      	adds	r3, #97	; 0x61
 8024ff4:	2201      	movs	r2, #1
 8024ff6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8024ff8:	687a      	ldr	r2, [r7, #4]
 8024ffa:	68fb      	ldr	r3, [r7, #12]
 8024ffc:	212c      	movs	r1, #44	; 0x2c
 8024ffe:	fb01 f303 	mul.w	r3, r1, r3
 8025002:	4413      	add	r3, r2
 8025004:	335c      	adds	r3, #92	; 0x5c
 8025006:	2200      	movs	r2, #0
 8025008:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	015a      	lsls	r2, r3, #5
 802500e:	693b      	ldr	r3, [r7, #16]
 8025010:	4413      	add	r3, r2
 8025012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025016:	461a      	mov	r2, r3
 8025018:	2301      	movs	r3, #1
 802501a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802501c:	687a      	ldr	r2, [r7, #4]
 802501e:	68fb      	ldr	r3, [r7, #12]
 8025020:	212c      	movs	r1, #44	; 0x2c
 8025022:	fb01 f303 	mul.w	r3, r1, r3
 8025026:	4413      	add	r3, r2
 8025028:	333f      	adds	r3, #63	; 0x3f
 802502a:	781b      	ldrb	r3, [r3, #0]
 802502c:	2b00      	cmp	r3, #0
 802502e:	d009      	beq.n	8025044 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025030:	687a      	ldr	r2, [r7, #4]
 8025032:	68fb      	ldr	r3, [r7, #12]
 8025034:	212c      	movs	r1, #44	; 0x2c
 8025036:	fb01 f303 	mul.w	r3, r1, r3
 802503a:	4413      	add	r3, r2
 802503c:	333f      	adds	r3, #63	; 0x3f
 802503e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025040:	2b02      	cmp	r3, #2
 8025042:	d111      	bne.n	8025068 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	68fa      	ldr	r2, [r7, #12]
 802504a:	b2d2      	uxtb	r2, r2
 802504c:	4611      	mov	r1, r2
 802504e:	4618      	mov	r0, r3
 8025050:	f005 fd99 	bl	802ab86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	015a      	lsls	r2, r3, #5
 8025058:	693b      	ldr	r3, [r7, #16]
 802505a:	4413      	add	r3, r2
 802505c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025060:	461a      	mov	r2, r3
 8025062:	2310      	movs	r3, #16
 8025064:	6093      	str	r3, [r2, #8]
 8025066:	e03a      	b.n	80250de <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025068:	687a      	ldr	r2, [r7, #4]
 802506a:	68fb      	ldr	r3, [r7, #12]
 802506c:	212c      	movs	r1, #44	; 0x2c
 802506e:	fb01 f303 	mul.w	r3, r1, r3
 8025072:	4413      	add	r3, r2
 8025074:	333f      	adds	r3, #63	; 0x3f
 8025076:	781b      	ldrb	r3, [r3, #0]
 8025078:	2b03      	cmp	r3, #3
 802507a:	d009      	beq.n	8025090 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 802507c:	687a      	ldr	r2, [r7, #4]
 802507e:	68fb      	ldr	r3, [r7, #12]
 8025080:	212c      	movs	r1, #44	; 0x2c
 8025082:	fb01 f303 	mul.w	r3, r1, r3
 8025086:	4413      	add	r3, r2
 8025088:	333f      	adds	r3, #63	; 0x3f
 802508a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 802508c:	2b01      	cmp	r3, #1
 802508e:	d126      	bne.n	80250de <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025090:	68fb      	ldr	r3, [r7, #12]
 8025092:	015a      	lsls	r2, r3, #5
 8025094:	693b      	ldr	r3, [r7, #16]
 8025096:	4413      	add	r3, r2
 8025098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802509c:	681b      	ldr	r3, [r3, #0]
 802509e:	68fa      	ldr	r2, [r7, #12]
 80250a0:	0151      	lsls	r1, r2, #5
 80250a2:	693a      	ldr	r2, [r7, #16]
 80250a4:	440a      	add	r2, r1
 80250a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80250aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80250ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80250b0:	687a      	ldr	r2, [r7, #4]
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	212c      	movs	r1, #44	; 0x2c
 80250b6:	fb01 f303 	mul.w	r3, r1, r3
 80250ba:	4413      	add	r3, r2
 80250bc:	3360      	adds	r3, #96	; 0x60
 80250be:	2201      	movs	r2, #1
 80250c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80250c2:	68fb      	ldr	r3, [r7, #12]
 80250c4:	b2d9      	uxtb	r1, r3
 80250c6:	687a      	ldr	r2, [r7, #4]
 80250c8:	68fb      	ldr	r3, [r7, #12]
 80250ca:	202c      	movs	r0, #44	; 0x2c
 80250cc:	fb00 f303 	mul.w	r3, r0, r3
 80250d0:	4413      	add	r3, r2
 80250d2:	3360      	adds	r3, #96	; 0x60
 80250d4:	781b      	ldrb	r3, [r3, #0]
 80250d6:	461a      	mov	r2, r3
 80250d8:	6878      	ldr	r0, [r7, #4]
 80250da:	f007 fff3 	bl	802d0c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80250de:	687b      	ldr	r3, [r7, #4]
 80250e0:	691b      	ldr	r3, [r3, #16]
 80250e2:	2b01      	cmp	r3, #1
 80250e4:	d12b      	bne.n	802513e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80250e6:	687a      	ldr	r2, [r7, #4]
 80250e8:	68fb      	ldr	r3, [r7, #12]
 80250ea:	212c      	movs	r1, #44	; 0x2c
 80250ec:	fb01 f303 	mul.w	r3, r1, r3
 80250f0:	4413      	add	r3, r2
 80250f2:	3348      	adds	r3, #72	; 0x48
 80250f4:	681b      	ldr	r3, [r3, #0]
 80250f6:	6879      	ldr	r1, [r7, #4]
 80250f8:	68fa      	ldr	r2, [r7, #12]
 80250fa:	202c      	movs	r0, #44	; 0x2c
 80250fc:	fb00 f202 	mul.w	r2, r0, r2
 8025100:	440a      	add	r2, r1
 8025102:	3240      	adds	r2, #64	; 0x40
 8025104:	8812      	ldrh	r2, [r2, #0]
 8025106:	fbb3 f3f2 	udiv	r3, r3, r2
 802510a:	f003 0301 	and.w	r3, r3, #1
 802510e:	2b00      	cmp	r3, #0
 8025110:	f000 818e 	beq.w	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025114:	687a      	ldr	r2, [r7, #4]
 8025116:	68fb      	ldr	r3, [r7, #12]
 8025118:	212c      	movs	r1, #44	; 0x2c
 802511a:	fb01 f303 	mul.w	r3, r1, r3
 802511e:	4413      	add	r3, r2
 8025120:	3354      	adds	r3, #84	; 0x54
 8025122:	781b      	ldrb	r3, [r3, #0]
 8025124:	f083 0301 	eor.w	r3, r3, #1
 8025128:	b2d8      	uxtb	r0, r3
 802512a:	687a      	ldr	r2, [r7, #4]
 802512c:	68fb      	ldr	r3, [r7, #12]
 802512e:	212c      	movs	r1, #44	; 0x2c
 8025130:	fb01 f303 	mul.w	r3, r1, r3
 8025134:	4413      	add	r3, r2
 8025136:	3354      	adds	r3, #84	; 0x54
 8025138:	4602      	mov	r2, r0
 802513a:	701a      	strb	r2, [r3, #0]
}
 802513c:	e178      	b.n	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 802513e:	687a      	ldr	r2, [r7, #4]
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	212c      	movs	r1, #44	; 0x2c
 8025144:	fb01 f303 	mul.w	r3, r1, r3
 8025148:	4413      	add	r3, r2
 802514a:	3354      	adds	r3, #84	; 0x54
 802514c:	781b      	ldrb	r3, [r3, #0]
 802514e:	f083 0301 	eor.w	r3, r3, #1
 8025152:	b2d8      	uxtb	r0, r3
 8025154:	687a      	ldr	r2, [r7, #4]
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	212c      	movs	r1, #44	; 0x2c
 802515a:	fb01 f303 	mul.w	r3, r1, r3
 802515e:	4413      	add	r3, r2
 8025160:	3354      	adds	r3, #84	; 0x54
 8025162:	4602      	mov	r2, r0
 8025164:	701a      	strb	r2, [r3, #0]
}
 8025166:	e163      	b.n	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025168:	68fb      	ldr	r3, [r7, #12]
 802516a:	015a      	lsls	r2, r3, #5
 802516c:	693b      	ldr	r3, [r7, #16]
 802516e:	4413      	add	r3, r2
 8025170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025174:	689b      	ldr	r3, [r3, #8]
 8025176:	f003 0302 	and.w	r3, r3, #2
 802517a:	2b02      	cmp	r3, #2
 802517c:	f040 80f6 	bne.w	802536c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025180:	687a      	ldr	r2, [r7, #4]
 8025182:	68fb      	ldr	r3, [r7, #12]
 8025184:	212c      	movs	r1, #44	; 0x2c
 8025186:	fb01 f303 	mul.w	r3, r1, r3
 802518a:	4413      	add	r3, r2
 802518c:	3361      	adds	r3, #97	; 0x61
 802518e:	781b      	ldrb	r3, [r3, #0]
 8025190:	2b01      	cmp	r3, #1
 8025192:	d109      	bne.n	80251a8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025194:	687a      	ldr	r2, [r7, #4]
 8025196:	68fb      	ldr	r3, [r7, #12]
 8025198:	212c      	movs	r1, #44	; 0x2c
 802519a:	fb01 f303 	mul.w	r3, r1, r3
 802519e:	4413      	add	r3, r2
 80251a0:	3360      	adds	r3, #96	; 0x60
 80251a2:	2201      	movs	r2, #1
 80251a4:	701a      	strb	r2, [r3, #0]
 80251a6:	e0c9      	b.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80251a8:	687a      	ldr	r2, [r7, #4]
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	212c      	movs	r1, #44	; 0x2c
 80251ae:	fb01 f303 	mul.w	r3, r1, r3
 80251b2:	4413      	add	r3, r2
 80251b4:	3361      	adds	r3, #97	; 0x61
 80251b6:	781b      	ldrb	r3, [r3, #0]
 80251b8:	2b05      	cmp	r3, #5
 80251ba:	d109      	bne.n	80251d0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80251bc:	687a      	ldr	r2, [r7, #4]
 80251be:	68fb      	ldr	r3, [r7, #12]
 80251c0:	212c      	movs	r1, #44	; 0x2c
 80251c2:	fb01 f303 	mul.w	r3, r1, r3
 80251c6:	4413      	add	r3, r2
 80251c8:	3360      	adds	r3, #96	; 0x60
 80251ca:	2205      	movs	r2, #5
 80251cc:	701a      	strb	r2, [r3, #0]
 80251ce:	e0b5      	b.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80251d0:	687a      	ldr	r2, [r7, #4]
 80251d2:	68fb      	ldr	r3, [r7, #12]
 80251d4:	212c      	movs	r1, #44	; 0x2c
 80251d6:	fb01 f303 	mul.w	r3, r1, r3
 80251da:	4413      	add	r3, r2
 80251dc:	3361      	adds	r3, #97	; 0x61
 80251de:	781b      	ldrb	r3, [r3, #0]
 80251e0:	2b06      	cmp	r3, #6
 80251e2:	d009      	beq.n	80251f8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80251e4:	687a      	ldr	r2, [r7, #4]
 80251e6:	68fb      	ldr	r3, [r7, #12]
 80251e8:	212c      	movs	r1, #44	; 0x2c
 80251ea:	fb01 f303 	mul.w	r3, r1, r3
 80251ee:	4413      	add	r3, r2
 80251f0:	3361      	adds	r3, #97	; 0x61
 80251f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80251f4:	2b08      	cmp	r3, #8
 80251f6:	d150      	bne.n	802529a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80251f8:	687a      	ldr	r2, [r7, #4]
 80251fa:	68fb      	ldr	r3, [r7, #12]
 80251fc:	212c      	movs	r1, #44	; 0x2c
 80251fe:	fb01 f303 	mul.w	r3, r1, r3
 8025202:	4413      	add	r3, r2
 8025204:	335c      	adds	r3, #92	; 0x5c
 8025206:	681b      	ldr	r3, [r3, #0]
 8025208:	1c5a      	adds	r2, r3, #1
 802520a:	6879      	ldr	r1, [r7, #4]
 802520c:	68fb      	ldr	r3, [r7, #12]
 802520e:	202c      	movs	r0, #44	; 0x2c
 8025210:	fb00 f303 	mul.w	r3, r0, r3
 8025214:	440b      	add	r3, r1
 8025216:	335c      	adds	r3, #92	; 0x5c
 8025218:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802521a:	687a      	ldr	r2, [r7, #4]
 802521c:	68fb      	ldr	r3, [r7, #12]
 802521e:	212c      	movs	r1, #44	; 0x2c
 8025220:	fb01 f303 	mul.w	r3, r1, r3
 8025224:	4413      	add	r3, r2
 8025226:	335c      	adds	r3, #92	; 0x5c
 8025228:	681b      	ldr	r3, [r3, #0]
 802522a:	2b02      	cmp	r3, #2
 802522c:	d912      	bls.n	8025254 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 802522e:	687a      	ldr	r2, [r7, #4]
 8025230:	68fb      	ldr	r3, [r7, #12]
 8025232:	212c      	movs	r1, #44	; 0x2c
 8025234:	fb01 f303 	mul.w	r3, r1, r3
 8025238:	4413      	add	r3, r2
 802523a:	335c      	adds	r3, #92	; 0x5c
 802523c:	2200      	movs	r2, #0
 802523e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025240:	687a      	ldr	r2, [r7, #4]
 8025242:	68fb      	ldr	r3, [r7, #12]
 8025244:	212c      	movs	r1, #44	; 0x2c
 8025246:	fb01 f303 	mul.w	r3, r1, r3
 802524a:	4413      	add	r3, r2
 802524c:	3360      	adds	r3, #96	; 0x60
 802524e:	2204      	movs	r2, #4
 8025250:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025252:	e073      	b.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025254:	687a      	ldr	r2, [r7, #4]
 8025256:	68fb      	ldr	r3, [r7, #12]
 8025258:	212c      	movs	r1, #44	; 0x2c
 802525a:	fb01 f303 	mul.w	r3, r1, r3
 802525e:	4413      	add	r3, r2
 8025260:	3360      	adds	r3, #96	; 0x60
 8025262:	2202      	movs	r2, #2
 8025264:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025266:	68fb      	ldr	r3, [r7, #12]
 8025268:	015a      	lsls	r2, r3, #5
 802526a:	693b      	ldr	r3, [r7, #16]
 802526c:	4413      	add	r3, r2
 802526e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025272:	681b      	ldr	r3, [r3, #0]
 8025274:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025276:	68bb      	ldr	r3, [r7, #8]
 8025278:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802527c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 802527e:	68bb      	ldr	r3, [r7, #8]
 8025280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025284:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025286:	68fb      	ldr	r3, [r7, #12]
 8025288:	015a      	lsls	r2, r3, #5
 802528a:	693b      	ldr	r3, [r7, #16]
 802528c:	4413      	add	r3, r2
 802528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025292:	461a      	mov	r2, r3
 8025294:	68bb      	ldr	r3, [r7, #8]
 8025296:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025298:	e050      	b.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 802529a:	687a      	ldr	r2, [r7, #4]
 802529c:	68fb      	ldr	r3, [r7, #12]
 802529e:	212c      	movs	r1, #44	; 0x2c
 80252a0:	fb01 f303 	mul.w	r3, r1, r3
 80252a4:	4413      	add	r3, r2
 80252a6:	3361      	adds	r3, #97	; 0x61
 80252a8:	781b      	ldrb	r3, [r3, #0]
 80252aa:	2b03      	cmp	r3, #3
 80252ac:	d122      	bne.n	80252f4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80252ae:	687a      	ldr	r2, [r7, #4]
 80252b0:	68fb      	ldr	r3, [r7, #12]
 80252b2:	212c      	movs	r1, #44	; 0x2c
 80252b4:	fb01 f303 	mul.w	r3, r1, r3
 80252b8:	4413      	add	r3, r2
 80252ba:	3360      	adds	r3, #96	; 0x60
 80252bc:	2202      	movs	r2, #2
 80252be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80252c0:	68fb      	ldr	r3, [r7, #12]
 80252c2:	015a      	lsls	r2, r3, #5
 80252c4:	693b      	ldr	r3, [r7, #16]
 80252c6:	4413      	add	r3, r2
 80252c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252cc:	681b      	ldr	r3, [r3, #0]
 80252ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80252d0:	68bb      	ldr	r3, [r7, #8]
 80252d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80252d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80252d8:	68bb      	ldr	r3, [r7, #8]
 80252da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80252de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80252e0:	68fb      	ldr	r3, [r7, #12]
 80252e2:	015a      	lsls	r2, r3, #5
 80252e4:	693b      	ldr	r3, [r7, #16]
 80252e6:	4413      	add	r3, r2
 80252e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252ec:	461a      	mov	r2, r3
 80252ee:	68bb      	ldr	r3, [r7, #8]
 80252f0:	6013      	str	r3, [r2, #0]
 80252f2:	e023      	b.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80252f4:	687a      	ldr	r2, [r7, #4]
 80252f6:	68fb      	ldr	r3, [r7, #12]
 80252f8:	212c      	movs	r1, #44	; 0x2c
 80252fa:	fb01 f303 	mul.w	r3, r1, r3
 80252fe:	4413      	add	r3, r2
 8025300:	3361      	adds	r3, #97	; 0x61
 8025302:	781b      	ldrb	r3, [r3, #0]
 8025304:	2b07      	cmp	r3, #7
 8025306:	d119      	bne.n	802533c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025308:	687a      	ldr	r2, [r7, #4]
 802530a:	68fb      	ldr	r3, [r7, #12]
 802530c:	212c      	movs	r1, #44	; 0x2c
 802530e:	fb01 f303 	mul.w	r3, r1, r3
 8025312:	4413      	add	r3, r2
 8025314:	335c      	adds	r3, #92	; 0x5c
 8025316:	681b      	ldr	r3, [r3, #0]
 8025318:	1c5a      	adds	r2, r3, #1
 802531a:	6879      	ldr	r1, [r7, #4]
 802531c:	68fb      	ldr	r3, [r7, #12]
 802531e:	202c      	movs	r0, #44	; 0x2c
 8025320:	fb00 f303 	mul.w	r3, r0, r3
 8025324:	440b      	add	r3, r1
 8025326:	335c      	adds	r3, #92	; 0x5c
 8025328:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 802532a:	687a      	ldr	r2, [r7, #4]
 802532c:	68fb      	ldr	r3, [r7, #12]
 802532e:	212c      	movs	r1, #44	; 0x2c
 8025330:	fb01 f303 	mul.w	r3, r1, r3
 8025334:	4413      	add	r3, r2
 8025336:	3360      	adds	r3, #96	; 0x60
 8025338:	2204      	movs	r2, #4
 802533a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 802533c:	68fb      	ldr	r3, [r7, #12]
 802533e:	015a      	lsls	r2, r3, #5
 8025340:	693b      	ldr	r3, [r7, #16]
 8025342:	4413      	add	r3, r2
 8025344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025348:	461a      	mov	r2, r3
 802534a:	2302      	movs	r3, #2
 802534c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 802534e:	68fb      	ldr	r3, [r7, #12]
 8025350:	b2d9      	uxtb	r1, r3
 8025352:	687a      	ldr	r2, [r7, #4]
 8025354:	68fb      	ldr	r3, [r7, #12]
 8025356:	202c      	movs	r0, #44	; 0x2c
 8025358:	fb00 f303 	mul.w	r3, r0, r3
 802535c:	4413      	add	r3, r2
 802535e:	3360      	adds	r3, #96	; 0x60
 8025360:	781b      	ldrb	r3, [r3, #0]
 8025362:	461a      	mov	r2, r3
 8025364:	6878      	ldr	r0, [r7, #4]
 8025366:	f007 fead 	bl	802d0c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802536a:	e061      	b.n	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 802536c:	68fb      	ldr	r3, [r7, #12]
 802536e:	015a      	lsls	r2, r3, #5
 8025370:	693b      	ldr	r3, [r7, #16]
 8025372:	4413      	add	r3, r2
 8025374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025378:	689b      	ldr	r3, [r3, #8]
 802537a:	f003 0310 	and.w	r3, r3, #16
 802537e:	2b10      	cmp	r3, #16
 8025380:	d156      	bne.n	8025430 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025382:	687a      	ldr	r2, [r7, #4]
 8025384:	68fb      	ldr	r3, [r7, #12]
 8025386:	212c      	movs	r1, #44	; 0x2c
 8025388:	fb01 f303 	mul.w	r3, r1, r3
 802538c:	4413      	add	r3, r2
 802538e:	333f      	adds	r3, #63	; 0x3f
 8025390:	781b      	ldrb	r3, [r3, #0]
 8025392:	2b03      	cmp	r3, #3
 8025394:	d111      	bne.n	80253ba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025396:	687a      	ldr	r2, [r7, #4]
 8025398:	68fb      	ldr	r3, [r7, #12]
 802539a:	212c      	movs	r1, #44	; 0x2c
 802539c:	fb01 f303 	mul.w	r3, r1, r3
 80253a0:	4413      	add	r3, r2
 80253a2:	335c      	adds	r3, #92	; 0x5c
 80253a4:	2200      	movs	r2, #0
 80253a6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80253a8:	687b      	ldr	r3, [r7, #4]
 80253aa:	681b      	ldr	r3, [r3, #0]
 80253ac:	68fa      	ldr	r2, [r7, #12]
 80253ae:	b2d2      	uxtb	r2, r2
 80253b0:	4611      	mov	r1, r2
 80253b2:	4618      	mov	r0, r3
 80253b4:	f005 fbe7 	bl	802ab86 <USB_HC_Halt>
 80253b8:	e031      	b.n	802541e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80253ba:	687a      	ldr	r2, [r7, #4]
 80253bc:	68fb      	ldr	r3, [r7, #12]
 80253be:	212c      	movs	r1, #44	; 0x2c
 80253c0:	fb01 f303 	mul.w	r3, r1, r3
 80253c4:	4413      	add	r3, r2
 80253c6:	333f      	adds	r3, #63	; 0x3f
 80253c8:	781b      	ldrb	r3, [r3, #0]
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d009      	beq.n	80253e2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80253ce:	687a      	ldr	r2, [r7, #4]
 80253d0:	68fb      	ldr	r3, [r7, #12]
 80253d2:	212c      	movs	r1, #44	; 0x2c
 80253d4:	fb01 f303 	mul.w	r3, r1, r3
 80253d8:	4413      	add	r3, r2
 80253da:	333f      	adds	r3, #63	; 0x3f
 80253dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80253de:	2b02      	cmp	r3, #2
 80253e0:	d11d      	bne.n	802541e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80253e2:	687a      	ldr	r2, [r7, #4]
 80253e4:	68fb      	ldr	r3, [r7, #12]
 80253e6:	212c      	movs	r1, #44	; 0x2c
 80253e8:	fb01 f303 	mul.w	r3, r1, r3
 80253ec:	4413      	add	r3, r2
 80253ee:	335c      	adds	r3, #92	; 0x5c
 80253f0:	2200      	movs	r2, #0
 80253f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	691b      	ldr	r3, [r3, #16]
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d110      	bne.n	802541e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80253fc:	687a      	ldr	r2, [r7, #4]
 80253fe:	68fb      	ldr	r3, [r7, #12]
 8025400:	212c      	movs	r1, #44	; 0x2c
 8025402:	fb01 f303 	mul.w	r3, r1, r3
 8025406:	4413      	add	r3, r2
 8025408:	3361      	adds	r3, #97	; 0x61
 802540a:	2203      	movs	r2, #3
 802540c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	681b      	ldr	r3, [r3, #0]
 8025412:	68fa      	ldr	r2, [r7, #12]
 8025414:	b2d2      	uxtb	r2, r2
 8025416:	4611      	mov	r1, r2
 8025418:	4618      	mov	r0, r3
 802541a:	f005 fbb4 	bl	802ab86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 802541e:	68fb      	ldr	r3, [r7, #12]
 8025420:	015a      	lsls	r2, r3, #5
 8025422:	693b      	ldr	r3, [r7, #16]
 8025424:	4413      	add	r3, r2
 8025426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802542a:	461a      	mov	r2, r3
 802542c:	2310      	movs	r3, #16
 802542e:	6093      	str	r3, [r2, #8]
}
 8025430:	bf00      	nop
 8025432:	3718      	adds	r7, #24
 8025434:	46bd      	mov	sp, r7
 8025436:	bd80      	pop	{r7, pc}

08025438 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025438:	b580      	push	{r7, lr}
 802543a:	b088      	sub	sp, #32
 802543c:	af00      	add	r7, sp, #0
 802543e:	6078      	str	r0, [r7, #4]
 8025440:	460b      	mov	r3, r1
 8025442:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025444:	687b      	ldr	r3, [r7, #4]
 8025446:	681b      	ldr	r3, [r3, #0]
 8025448:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802544a:	69fb      	ldr	r3, [r7, #28]
 802544c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 802544e:	78fb      	ldrb	r3, [r7, #3]
 8025450:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025452:	697b      	ldr	r3, [r7, #20]
 8025454:	015a      	lsls	r2, r3, #5
 8025456:	69bb      	ldr	r3, [r7, #24]
 8025458:	4413      	add	r3, r2
 802545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802545e:	689b      	ldr	r3, [r3, #8]
 8025460:	f003 0304 	and.w	r3, r3, #4
 8025464:	2b04      	cmp	r3, #4
 8025466:	d11a      	bne.n	802549e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025468:	697b      	ldr	r3, [r7, #20]
 802546a:	015a      	lsls	r2, r3, #5
 802546c:	69bb      	ldr	r3, [r7, #24]
 802546e:	4413      	add	r3, r2
 8025470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025474:	461a      	mov	r2, r3
 8025476:	2304      	movs	r3, #4
 8025478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802547a:	687a      	ldr	r2, [r7, #4]
 802547c:	697b      	ldr	r3, [r7, #20]
 802547e:	212c      	movs	r1, #44	; 0x2c
 8025480:	fb01 f303 	mul.w	r3, r1, r3
 8025484:	4413      	add	r3, r2
 8025486:	3361      	adds	r3, #97	; 0x61
 8025488:	2206      	movs	r2, #6
 802548a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	681b      	ldr	r3, [r3, #0]
 8025490:	697a      	ldr	r2, [r7, #20]
 8025492:	b2d2      	uxtb	r2, r2
 8025494:	4611      	mov	r1, r2
 8025496:	4618      	mov	r0, r3
 8025498:	f005 fb75 	bl	802ab86 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 802549c:	e331      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 802549e:	697b      	ldr	r3, [r7, #20]
 80254a0:	015a      	lsls	r2, r3, #5
 80254a2:	69bb      	ldr	r3, [r7, #24]
 80254a4:	4413      	add	r3, r2
 80254a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254aa:	689b      	ldr	r3, [r3, #8]
 80254ac:	f003 0320 	and.w	r3, r3, #32
 80254b0:	2b20      	cmp	r3, #32
 80254b2:	d12e      	bne.n	8025512 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80254b4:	697b      	ldr	r3, [r7, #20]
 80254b6:	015a      	lsls	r2, r3, #5
 80254b8:	69bb      	ldr	r3, [r7, #24]
 80254ba:	4413      	add	r3, r2
 80254bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254c0:	461a      	mov	r2, r3
 80254c2:	2320      	movs	r3, #32
 80254c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80254c6:	687a      	ldr	r2, [r7, #4]
 80254c8:	697b      	ldr	r3, [r7, #20]
 80254ca:	212c      	movs	r1, #44	; 0x2c
 80254cc:	fb01 f303 	mul.w	r3, r1, r3
 80254d0:	4413      	add	r3, r2
 80254d2:	333d      	adds	r3, #61	; 0x3d
 80254d4:	781b      	ldrb	r3, [r3, #0]
 80254d6:	2b01      	cmp	r3, #1
 80254d8:	f040 8313 	bne.w	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80254dc:	687a      	ldr	r2, [r7, #4]
 80254de:	697b      	ldr	r3, [r7, #20]
 80254e0:	212c      	movs	r1, #44	; 0x2c
 80254e2:	fb01 f303 	mul.w	r3, r1, r3
 80254e6:	4413      	add	r3, r2
 80254e8:	333d      	adds	r3, #61	; 0x3d
 80254ea:	2200      	movs	r2, #0
 80254ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80254ee:	687a      	ldr	r2, [r7, #4]
 80254f0:	697b      	ldr	r3, [r7, #20]
 80254f2:	212c      	movs	r1, #44	; 0x2c
 80254f4:	fb01 f303 	mul.w	r3, r1, r3
 80254f8:	4413      	add	r3, r2
 80254fa:	3360      	adds	r3, #96	; 0x60
 80254fc:	2202      	movs	r2, #2
 80254fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	681b      	ldr	r3, [r3, #0]
 8025504:	697a      	ldr	r2, [r7, #20]
 8025506:	b2d2      	uxtb	r2, r2
 8025508:	4611      	mov	r1, r2
 802550a:	4618      	mov	r0, r3
 802550c:	f005 fb3b 	bl	802ab86 <USB_HC_Halt>
}
 8025510:	e2f7      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025512:	697b      	ldr	r3, [r7, #20]
 8025514:	015a      	lsls	r2, r3, #5
 8025516:	69bb      	ldr	r3, [r7, #24]
 8025518:	4413      	add	r3, r2
 802551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802551e:	689b      	ldr	r3, [r3, #8]
 8025520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025528:	d112      	bne.n	8025550 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 802552a:	697b      	ldr	r3, [r7, #20]
 802552c:	015a      	lsls	r2, r3, #5
 802552e:	69bb      	ldr	r3, [r7, #24]
 8025530:	4413      	add	r3, r2
 8025532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025536:	461a      	mov	r2, r3
 8025538:	f44f 7300 	mov.w	r3, #512	; 0x200
 802553c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	697a      	ldr	r2, [r7, #20]
 8025544:	b2d2      	uxtb	r2, r2
 8025546:	4611      	mov	r1, r2
 8025548:	4618      	mov	r0, r3
 802554a:	f005 fb1c 	bl	802ab86 <USB_HC_Halt>
}
 802554e:	e2d8      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025550:	697b      	ldr	r3, [r7, #20]
 8025552:	015a      	lsls	r2, r3, #5
 8025554:	69bb      	ldr	r3, [r7, #24]
 8025556:	4413      	add	r3, r2
 8025558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802555c:	689b      	ldr	r3, [r3, #8]
 802555e:	f003 0301 	and.w	r3, r3, #1
 8025562:	2b01      	cmp	r3, #1
 8025564:	d140      	bne.n	80255e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025566:	687a      	ldr	r2, [r7, #4]
 8025568:	697b      	ldr	r3, [r7, #20]
 802556a:	212c      	movs	r1, #44	; 0x2c
 802556c:	fb01 f303 	mul.w	r3, r1, r3
 8025570:	4413      	add	r3, r2
 8025572:	335c      	adds	r3, #92	; 0x5c
 8025574:	2200      	movs	r2, #0
 8025576:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025578:	697b      	ldr	r3, [r7, #20]
 802557a:	015a      	lsls	r2, r3, #5
 802557c:	69bb      	ldr	r3, [r7, #24]
 802557e:	4413      	add	r3, r2
 8025580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025584:	689b      	ldr	r3, [r3, #8]
 8025586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802558a:	2b40      	cmp	r3, #64	; 0x40
 802558c:	d111      	bne.n	80255b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 802558e:	687a      	ldr	r2, [r7, #4]
 8025590:	697b      	ldr	r3, [r7, #20]
 8025592:	212c      	movs	r1, #44	; 0x2c
 8025594:	fb01 f303 	mul.w	r3, r1, r3
 8025598:	4413      	add	r3, r2
 802559a:	333d      	adds	r3, #61	; 0x3d
 802559c:	2201      	movs	r2, #1
 802559e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80255a0:	697b      	ldr	r3, [r7, #20]
 80255a2:	015a      	lsls	r2, r3, #5
 80255a4:	69bb      	ldr	r3, [r7, #24]
 80255a6:	4413      	add	r3, r2
 80255a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255ac:	461a      	mov	r2, r3
 80255ae:	2340      	movs	r3, #64	; 0x40
 80255b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80255b2:	697b      	ldr	r3, [r7, #20]
 80255b4:	015a      	lsls	r2, r3, #5
 80255b6:	69bb      	ldr	r3, [r7, #24]
 80255b8:	4413      	add	r3, r2
 80255ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255be:	461a      	mov	r2, r3
 80255c0:	2301      	movs	r3, #1
 80255c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80255c4:	687a      	ldr	r2, [r7, #4]
 80255c6:	697b      	ldr	r3, [r7, #20]
 80255c8:	212c      	movs	r1, #44	; 0x2c
 80255ca:	fb01 f303 	mul.w	r3, r1, r3
 80255ce:	4413      	add	r3, r2
 80255d0:	3361      	adds	r3, #97	; 0x61
 80255d2:	2201      	movs	r2, #1
 80255d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	681b      	ldr	r3, [r3, #0]
 80255da:	697a      	ldr	r2, [r7, #20]
 80255dc:	b2d2      	uxtb	r2, r2
 80255de:	4611      	mov	r1, r2
 80255e0:	4618      	mov	r0, r3
 80255e2:	f005 fad0 	bl	802ab86 <USB_HC_Halt>
}
 80255e6:	e28c      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80255e8:	697b      	ldr	r3, [r7, #20]
 80255ea:	015a      	lsls	r2, r3, #5
 80255ec:	69bb      	ldr	r3, [r7, #24]
 80255ee:	4413      	add	r3, r2
 80255f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255f4:	689b      	ldr	r3, [r3, #8]
 80255f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80255fa:	2b40      	cmp	r3, #64	; 0x40
 80255fc:	d12c      	bne.n	8025658 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80255fe:	687a      	ldr	r2, [r7, #4]
 8025600:	697b      	ldr	r3, [r7, #20]
 8025602:	212c      	movs	r1, #44	; 0x2c
 8025604:	fb01 f303 	mul.w	r3, r1, r3
 8025608:	4413      	add	r3, r2
 802560a:	3361      	adds	r3, #97	; 0x61
 802560c:	2204      	movs	r2, #4
 802560e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8025610:	687a      	ldr	r2, [r7, #4]
 8025612:	697b      	ldr	r3, [r7, #20]
 8025614:	212c      	movs	r1, #44	; 0x2c
 8025616:	fb01 f303 	mul.w	r3, r1, r3
 802561a:	4413      	add	r3, r2
 802561c:	333d      	adds	r3, #61	; 0x3d
 802561e:	2201      	movs	r2, #1
 8025620:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025622:	687a      	ldr	r2, [r7, #4]
 8025624:	697b      	ldr	r3, [r7, #20]
 8025626:	212c      	movs	r1, #44	; 0x2c
 8025628:	fb01 f303 	mul.w	r3, r1, r3
 802562c:	4413      	add	r3, r2
 802562e:	335c      	adds	r3, #92	; 0x5c
 8025630:	2200      	movs	r2, #0
 8025632:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025634:	687b      	ldr	r3, [r7, #4]
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	697a      	ldr	r2, [r7, #20]
 802563a:	b2d2      	uxtb	r2, r2
 802563c:	4611      	mov	r1, r2
 802563e:	4618      	mov	r0, r3
 8025640:	f005 faa1 	bl	802ab86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8025644:	697b      	ldr	r3, [r7, #20]
 8025646:	015a      	lsls	r2, r3, #5
 8025648:	69bb      	ldr	r3, [r7, #24]
 802564a:	4413      	add	r3, r2
 802564c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025650:	461a      	mov	r2, r3
 8025652:	2340      	movs	r3, #64	; 0x40
 8025654:	6093      	str	r3, [r2, #8]
}
 8025656:	e254      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8025658:	697b      	ldr	r3, [r7, #20]
 802565a:	015a      	lsls	r2, r3, #5
 802565c:	69bb      	ldr	r3, [r7, #24]
 802565e:	4413      	add	r3, r2
 8025660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025664:	689b      	ldr	r3, [r3, #8]
 8025666:	f003 0308 	and.w	r3, r3, #8
 802566a:	2b08      	cmp	r3, #8
 802566c:	d11a      	bne.n	80256a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 802566e:	697b      	ldr	r3, [r7, #20]
 8025670:	015a      	lsls	r2, r3, #5
 8025672:	69bb      	ldr	r3, [r7, #24]
 8025674:	4413      	add	r3, r2
 8025676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802567a:	461a      	mov	r2, r3
 802567c:	2308      	movs	r3, #8
 802567e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025680:	687a      	ldr	r2, [r7, #4]
 8025682:	697b      	ldr	r3, [r7, #20]
 8025684:	212c      	movs	r1, #44	; 0x2c
 8025686:	fb01 f303 	mul.w	r3, r1, r3
 802568a:	4413      	add	r3, r2
 802568c:	3361      	adds	r3, #97	; 0x61
 802568e:	2205      	movs	r2, #5
 8025690:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025692:	687b      	ldr	r3, [r7, #4]
 8025694:	681b      	ldr	r3, [r3, #0]
 8025696:	697a      	ldr	r2, [r7, #20]
 8025698:	b2d2      	uxtb	r2, r2
 802569a:	4611      	mov	r1, r2
 802569c:	4618      	mov	r0, r3
 802569e:	f005 fa72 	bl	802ab86 <USB_HC_Halt>
}
 80256a2:	e22e      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80256a4:	697b      	ldr	r3, [r7, #20]
 80256a6:	015a      	lsls	r2, r3, #5
 80256a8:	69bb      	ldr	r3, [r7, #24]
 80256aa:	4413      	add	r3, r2
 80256ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256b0:	689b      	ldr	r3, [r3, #8]
 80256b2:	f003 0310 	and.w	r3, r3, #16
 80256b6:	2b10      	cmp	r3, #16
 80256b8:	d140      	bne.n	802573c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80256ba:	687a      	ldr	r2, [r7, #4]
 80256bc:	697b      	ldr	r3, [r7, #20]
 80256be:	212c      	movs	r1, #44	; 0x2c
 80256c0:	fb01 f303 	mul.w	r3, r1, r3
 80256c4:	4413      	add	r3, r2
 80256c6:	335c      	adds	r3, #92	; 0x5c
 80256c8:	2200      	movs	r2, #0
 80256ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80256cc:	687a      	ldr	r2, [r7, #4]
 80256ce:	697b      	ldr	r3, [r7, #20]
 80256d0:	212c      	movs	r1, #44	; 0x2c
 80256d2:	fb01 f303 	mul.w	r3, r1, r3
 80256d6:	4413      	add	r3, r2
 80256d8:	3361      	adds	r3, #97	; 0x61
 80256da:	2203      	movs	r2, #3
 80256dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80256de:	687a      	ldr	r2, [r7, #4]
 80256e0:	697b      	ldr	r3, [r7, #20]
 80256e2:	212c      	movs	r1, #44	; 0x2c
 80256e4:	fb01 f303 	mul.w	r3, r1, r3
 80256e8:	4413      	add	r3, r2
 80256ea:	333d      	adds	r3, #61	; 0x3d
 80256ec:	781b      	ldrb	r3, [r3, #0]
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	d112      	bne.n	8025718 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80256f2:	687a      	ldr	r2, [r7, #4]
 80256f4:	697b      	ldr	r3, [r7, #20]
 80256f6:	212c      	movs	r1, #44	; 0x2c
 80256f8:	fb01 f303 	mul.w	r3, r1, r3
 80256fc:	4413      	add	r3, r2
 80256fe:	333c      	adds	r3, #60	; 0x3c
 8025700:	781b      	ldrb	r3, [r3, #0]
 8025702:	2b00      	cmp	r3, #0
 8025704:	d108      	bne.n	8025718 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8025706:	687a      	ldr	r2, [r7, #4]
 8025708:	697b      	ldr	r3, [r7, #20]
 802570a:	212c      	movs	r1, #44	; 0x2c
 802570c:	fb01 f303 	mul.w	r3, r1, r3
 8025710:	4413      	add	r3, r2
 8025712:	333d      	adds	r3, #61	; 0x3d
 8025714:	2201      	movs	r2, #1
 8025716:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	681b      	ldr	r3, [r3, #0]
 802571c:	697a      	ldr	r2, [r7, #20]
 802571e:	b2d2      	uxtb	r2, r2
 8025720:	4611      	mov	r1, r2
 8025722:	4618      	mov	r0, r3
 8025724:	f005 fa2f 	bl	802ab86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025728:	697b      	ldr	r3, [r7, #20]
 802572a:	015a      	lsls	r2, r3, #5
 802572c:	69bb      	ldr	r3, [r7, #24]
 802572e:	4413      	add	r3, r2
 8025730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025734:	461a      	mov	r2, r3
 8025736:	2310      	movs	r3, #16
 8025738:	6093      	str	r3, [r2, #8]
}
 802573a:	e1e2      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 802573c:	697b      	ldr	r3, [r7, #20]
 802573e:	015a      	lsls	r2, r3, #5
 8025740:	69bb      	ldr	r3, [r7, #24]
 8025742:	4413      	add	r3, r2
 8025744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025748:	689b      	ldr	r3, [r3, #8]
 802574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802574e:	2b80      	cmp	r3, #128	; 0x80
 8025750:	d164      	bne.n	802581c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	691b      	ldr	r3, [r3, #16]
 8025756:	2b00      	cmp	r3, #0
 8025758:	d111      	bne.n	802577e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 802575a:	687a      	ldr	r2, [r7, #4]
 802575c:	697b      	ldr	r3, [r7, #20]
 802575e:	212c      	movs	r1, #44	; 0x2c
 8025760:	fb01 f303 	mul.w	r3, r1, r3
 8025764:	4413      	add	r3, r2
 8025766:	3361      	adds	r3, #97	; 0x61
 8025768:	2206      	movs	r2, #6
 802576a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802576c:	687b      	ldr	r3, [r7, #4]
 802576e:	681b      	ldr	r3, [r3, #0]
 8025770:	697a      	ldr	r2, [r7, #20]
 8025772:	b2d2      	uxtb	r2, r2
 8025774:	4611      	mov	r1, r2
 8025776:	4618      	mov	r0, r3
 8025778:	f005 fa05 	bl	802ab86 <USB_HC_Halt>
 802577c:	e044      	b.n	8025808 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 802577e:	687a      	ldr	r2, [r7, #4]
 8025780:	697b      	ldr	r3, [r7, #20]
 8025782:	212c      	movs	r1, #44	; 0x2c
 8025784:	fb01 f303 	mul.w	r3, r1, r3
 8025788:	4413      	add	r3, r2
 802578a:	335c      	adds	r3, #92	; 0x5c
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	1c5a      	adds	r2, r3, #1
 8025790:	6879      	ldr	r1, [r7, #4]
 8025792:	697b      	ldr	r3, [r7, #20]
 8025794:	202c      	movs	r0, #44	; 0x2c
 8025796:	fb00 f303 	mul.w	r3, r0, r3
 802579a:	440b      	add	r3, r1
 802579c:	335c      	adds	r3, #92	; 0x5c
 802579e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80257a0:	687a      	ldr	r2, [r7, #4]
 80257a2:	697b      	ldr	r3, [r7, #20]
 80257a4:	212c      	movs	r1, #44	; 0x2c
 80257a6:	fb01 f303 	mul.w	r3, r1, r3
 80257aa:	4413      	add	r3, r2
 80257ac:	335c      	adds	r3, #92	; 0x5c
 80257ae:	681b      	ldr	r3, [r3, #0]
 80257b0:	2b02      	cmp	r3, #2
 80257b2:	d920      	bls.n	80257f6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80257b4:	687a      	ldr	r2, [r7, #4]
 80257b6:	697b      	ldr	r3, [r7, #20]
 80257b8:	212c      	movs	r1, #44	; 0x2c
 80257ba:	fb01 f303 	mul.w	r3, r1, r3
 80257be:	4413      	add	r3, r2
 80257c0:	335c      	adds	r3, #92	; 0x5c
 80257c2:	2200      	movs	r2, #0
 80257c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80257c6:	687a      	ldr	r2, [r7, #4]
 80257c8:	697b      	ldr	r3, [r7, #20]
 80257ca:	212c      	movs	r1, #44	; 0x2c
 80257cc:	fb01 f303 	mul.w	r3, r1, r3
 80257d0:	4413      	add	r3, r2
 80257d2:	3360      	adds	r3, #96	; 0x60
 80257d4:	2204      	movs	r2, #4
 80257d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80257d8:	697b      	ldr	r3, [r7, #20]
 80257da:	b2d9      	uxtb	r1, r3
 80257dc:	687a      	ldr	r2, [r7, #4]
 80257de:	697b      	ldr	r3, [r7, #20]
 80257e0:	202c      	movs	r0, #44	; 0x2c
 80257e2:	fb00 f303 	mul.w	r3, r0, r3
 80257e6:	4413      	add	r3, r2
 80257e8:	3360      	adds	r3, #96	; 0x60
 80257ea:	781b      	ldrb	r3, [r3, #0]
 80257ec:	461a      	mov	r2, r3
 80257ee:	6878      	ldr	r0, [r7, #4]
 80257f0:	f007 fc68 	bl	802d0c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80257f4:	e008      	b.n	8025808 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80257f6:	687a      	ldr	r2, [r7, #4]
 80257f8:	697b      	ldr	r3, [r7, #20]
 80257fa:	212c      	movs	r1, #44	; 0x2c
 80257fc:	fb01 f303 	mul.w	r3, r1, r3
 8025800:	4413      	add	r3, r2
 8025802:	3360      	adds	r3, #96	; 0x60
 8025804:	2202      	movs	r2, #2
 8025806:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025808:	697b      	ldr	r3, [r7, #20]
 802580a:	015a      	lsls	r2, r3, #5
 802580c:	69bb      	ldr	r3, [r7, #24]
 802580e:	4413      	add	r3, r2
 8025810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025814:	461a      	mov	r2, r3
 8025816:	2380      	movs	r3, #128	; 0x80
 8025818:	6093      	str	r3, [r2, #8]
}
 802581a:	e172      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802581c:	697b      	ldr	r3, [r7, #20]
 802581e:	015a      	lsls	r2, r3, #5
 8025820:	69bb      	ldr	r3, [r7, #24]
 8025822:	4413      	add	r3, r2
 8025824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025828:	689b      	ldr	r3, [r3, #8]
 802582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025832:	d11b      	bne.n	802586c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025834:	687a      	ldr	r2, [r7, #4]
 8025836:	697b      	ldr	r3, [r7, #20]
 8025838:	212c      	movs	r1, #44	; 0x2c
 802583a:	fb01 f303 	mul.w	r3, r1, r3
 802583e:	4413      	add	r3, r2
 8025840:	3361      	adds	r3, #97	; 0x61
 8025842:	2208      	movs	r2, #8
 8025844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025846:	687b      	ldr	r3, [r7, #4]
 8025848:	681b      	ldr	r3, [r3, #0]
 802584a:	697a      	ldr	r2, [r7, #20]
 802584c:	b2d2      	uxtb	r2, r2
 802584e:	4611      	mov	r1, r2
 8025850:	4618      	mov	r0, r3
 8025852:	f005 f998 	bl	802ab86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025856:	697b      	ldr	r3, [r7, #20]
 8025858:	015a      	lsls	r2, r3, #5
 802585a:	69bb      	ldr	r3, [r7, #24]
 802585c:	4413      	add	r3, r2
 802585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025862:	461a      	mov	r2, r3
 8025864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025868:	6093      	str	r3, [r2, #8]
}
 802586a:	e14a      	b.n	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 802586c:	697b      	ldr	r3, [r7, #20]
 802586e:	015a      	lsls	r2, r3, #5
 8025870:	69bb      	ldr	r3, [r7, #24]
 8025872:	4413      	add	r3, r2
 8025874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025878:	689b      	ldr	r3, [r3, #8]
 802587a:	f003 0302 	and.w	r3, r3, #2
 802587e:	2b02      	cmp	r3, #2
 8025880:	f040 813f 	bne.w	8025b02 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025884:	687a      	ldr	r2, [r7, #4]
 8025886:	697b      	ldr	r3, [r7, #20]
 8025888:	212c      	movs	r1, #44	; 0x2c
 802588a:	fb01 f303 	mul.w	r3, r1, r3
 802588e:	4413      	add	r3, r2
 8025890:	3361      	adds	r3, #97	; 0x61
 8025892:	781b      	ldrb	r3, [r3, #0]
 8025894:	2b01      	cmp	r3, #1
 8025896:	d17d      	bne.n	8025994 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8025898:	687a      	ldr	r2, [r7, #4]
 802589a:	697b      	ldr	r3, [r7, #20]
 802589c:	212c      	movs	r1, #44	; 0x2c
 802589e:	fb01 f303 	mul.w	r3, r1, r3
 80258a2:	4413      	add	r3, r2
 80258a4:	3360      	adds	r3, #96	; 0x60
 80258a6:	2201      	movs	r2, #1
 80258a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80258aa:	687a      	ldr	r2, [r7, #4]
 80258ac:	697b      	ldr	r3, [r7, #20]
 80258ae:	212c      	movs	r1, #44	; 0x2c
 80258b0:	fb01 f303 	mul.w	r3, r1, r3
 80258b4:	4413      	add	r3, r2
 80258b6:	333f      	adds	r3, #63	; 0x3f
 80258b8:	781b      	ldrb	r3, [r3, #0]
 80258ba:	2b02      	cmp	r3, #2
 80258bc:	d00a      	beq.n	80258d4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80258be:	687a      	ldr	r2, [r7, #4]
 80258c0:	697b      	ldr	r3, [r7, #20]
 80258c2:	212c      	movs	r1, #44	; 0x2c
 80258c4:	fb01 f303 	mul.w	r3, r1, r3
 80258c8:	4413      	add	r3, r2
 80258ca:	333f      	adds	r3, #63	; 0x3f
 80258cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80258ce:	2b03      	cmp	r3, #3
 80258d0:	f040 8100 	bne.w	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80258d4:	687b      	ldr	r3, [r7, #4]
 80258d6:	691b      	ldr	r3, [r3, #16]
 80258d8:	2b00      	cmp	r3, #0
 80258da:	d113      	bne.n	8025904 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80258dc:	687a      	ldr	r2, [r7, #4]
 80258de:	697b      	ldr	r3, [r7, #20]
 80258e0:	212c      	movs	r1, #44	; 0x2c
 80258e2:	fb01 f303 	mul.w	r3, r1, r3
 80258e6:	4413      	add	r3, r2
 80258e8:	3355      	adds	r3, #85	; 0x55
 80258ea:	781b      	ldrb	r3, [r3, #0]
 80258ec:	f083 0301 	eor.w	r3, r3, #1
 80258f0:	b2d8      	uxtb	r0, r3
 80258f2:	687a      	ldr	r2, [r7, #4]
 80258f4:	697b      	ldr	r3, [r7, #20]
 80258f6:	212c      	movs	r1, #44	; 0x2c
 80258f8:	fb01 f303 	mul.w	r3, r1, r3
 80258fc:	4413      	add	r3, r2
 80258fe:	3355      	adds	r3, #85	; 0x55
 8025900:	4602      	mov	r2, r0
 8025902:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	691b      	ldr	r3, [r3, #16]
 8025908:	2b01      	cmp	r3, #1
 802590a:	f040 80e3 	bne.w	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
 802590e:	687a      	ldr	r2, [r7, #4]
 8025910:	697b      	ldr	r3, [r7, #20]
 8025912:	212c      	movs	r1, #44	; 0x2c
 8025914:	fb01 f303 	mul.w	r3, r1, r3
 8025918:	4413      	add	r3, r2
 802591a:	334c      	adds	r3, #76	; 0x4c
 802591c:	681b      	ldr	r3, [r3, #0]
 802591e:	2b00      	cmp	r3, #0
 8025920:	f000 80d8 	beq.w	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8025924:	687a      	ldr	r2, [r7, #4]
 8025926:	697b      	ldr	r3, [r7, #20]
 8025928:	212c      	movs	r1, #44	; 0x2c
 802592a:	fb01 f303 	mul.w	r3, r1, r3
 802592e:	4413      	add	r3, r2
 8025930:	334c      	adds	r3, #76	; 0x4c
 8025932:	681b      	ldr	r3, [r3, #0]
 8025934:	6879      	ldr	r1, [r7, #4]
 8025936:	697a      	ldr	r2, [r7, #20]
 8025938:	202c      	movs	r0, #44	; 0x2c
 802593a:	fb00 f202 	mul.w	r2, r0, r2
 802593e:	440a      	add	r2, r1
 8025940:	3240      	adds	r2, #64	; 0x40
 8025942:	8812      	ldrh	r2, [r2, #0]
 8025944:	4413      	add	r3, r2
 8025946:	3b01      	subs	r3, #1
 8025948:	6879      	ldr	r1, [r7, #4]
 802594a:	697a      	ldr	r2, [r7, #20]
 802594c:	202c      	movs	r0, #44	; 0x2c
 802594e:	fb00 f202 	mul.w	r2, r0, r2
 8025952:	440a      	add	r2, r1
 8025954:	3240      	adds	r2, #64	; 0x40
 8025956:	8812      	ldrh	r2, [r2, #0]
 8025958:	fbb3 f3f2 	udiv	r3, r3, r2
 802595c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 802595e:	68fb      	ldr	r3, [r7, #12]
 8025960:	f003 0301 	and.w	r3, r3, #1
 8025964:	2b00      	cmp	r3, #0
 8025966:	f000 80b5 	beq.w	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 802596a:	687a      	ldr	r2, [r7, #4]
 802596c:	697b      	ldr	r3, [r7, #20]
 802596e:	212c      	movs	r1, #44	; 0x2c
 8025970:	fb01 f303 	mul.w	r3, r1, r3
 8025974:	4413      	add	r3, r2
 8025976:	3355      	adds	r3, #85	; 0x55
 8025978:	781b      	ldrb	r3, [r3, #0]
 802597a:	f083 0301 	eor.w	r3, r3, #1
 802597e:	b2d8      	uxtb	r0, r3
 8025980:	687a      	ldr	r2, [r7, #4]
 8025982:	697b      	ldr	r3, [r7, #20]
 8025984:	212c      	movs	r1, #44	; 0x2c
 8025986:	fb01 f303 	mul.w	r3, r1, r3
 802598a:	4413      	add	r3, r2
 802598c:	3355      	adds	r3, #85	; 0x55
 802598e:	4602      	mov	r2, r0
 8025990:	701a      	strb	r2, [r3, #0]
 8025992:	e09f      	b.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025994:	687a      	ldr	r2, [r7, #4]
 8025996:	697b      	ldr	r3, [r7, #20]
 8025998:	212c      	movs	r1, #44	; 0x2c
 802599a:	fb01 f303 	mul.w	r3, r1, r3
 802599e:	4413      	add	r3, r2
 80259a0:	3361      	adds	r3, #97	; 0x61
 80259a2:	781b      	ldrb	r3, [r3, #0]
 80259a4:	2b03      	cmp	r3, #3
 80259a6:	d109      	bne.n	80259bc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80259a8:	687a      	ldr	r2, [r7, #4]
 80259aa:	697b      	ldr	r3, [r7, #20]
 80259ac:	212c      	movs	r1, #44	; 0x2c
 80259ae:	fb01 f303 	mul.w	r3, r1, r3
 80259b2:	4413      	add	r3, r2
 80259b4:	3360      	adds	r3, #96	; 0x60
 80259b6:	2202      	movs	r2, #2
 80259b8:	701a      	strb	r2, [r3, #0]
 80259ba:	e08b      	b.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80259bc:	687a      	ldr	r2, [r7, #4]
 80259be:	697b      	ldr	r3, [r7, #20]
 80259c0:	212c      	movs	r1, #44	; 0x2c
 80259c2:	fb01 f303 	mul.w	r3, r1, r3
 80259c6:	4413      	add	r3, r2
 80259c8:	3361      	adds	r3, #97	; 0x61
 80259ca:	781b      	ldrb	r3, [r3, #0]
 80259cc:	2b04      	cmp	r3, #4
 80259ce:	d109      	bne.n	80259e4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80259d0:	687a      	ldr	r2, [r7, #4]
 80259d2:	697b      	ldr	r3, [r7, #20]
 80259d4:	212c      	movs	r1, #44	; 0x2c
 80259d6:	fb01 f303 	mul.w	r3, r1, r3
 80259da:	4413      	add	r3, r2
 80259dc:	3360      	adds	r3, #96	; 0x60
 80259de:	2202      	movs	r2, #2
 80259e0:	701a      	strb	r2, [r3, #0]
 80259e2:	e077      	b.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80259e4:	687a      	ldr	r2, [r7, #4]
 80259e6:	697b      	ldr	r3, [r7, #20]
 80259e8:	212c      	movs	r1, #44	; 0x2c
 80259ea:	fb01 f303 	mul.w	r3, r1, r3
 80259ee:	4413      	add	r3, r2
 80259f0:	3361      	adds	r3, #97	; 0x61
 80259f2:	781b      	ldrb	r3, [r3, #0]
 80259f4:	2b05      	cmp	r3, #5
 80259f6:	d109      	bne.n	8025a0c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80259f8:	687a      	ldr	r2, [r7, #4]
 80259fa:	697b      	ldr	r3, [r7, #20]
 80259fc:	212c      	movs	r1, #44	; 0x2c
 80259fe:	fb01 f303 	mul.w	r3, r1, r3
 8025a02:	4413      	add	r3, r2
 8025a04:	3360      	adds	r3, #96	; 0x60
 8025a06:	2205      	movs	r2, #5
 8025a08:	701a      	strb	r2, [r3, #0]
 8025a0a:	e063      	b.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025a0c:	687a      	ldr	r2, [r7, #4]
 8025a0e:	697b      	ldr	r3, [r7, #20]
 8025a10:	212c      	movs	r1, #44	; 0x2c
 8025a12:	fb01 f303 	mul.w	r3, r1, r3
 8025a16:	4413      	add	r3, r2
 8025a18:	3361      	adds	r3, #97	; 0x61
 8025a1a:	781b      	ldrb	r3, [r3, #0]
 8025a1c:	2b06      	cmp	r3, #6
 8025a1e:	d009      	beq.n	8025a34 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025a20:	687a      	ldr	r2, [r7, #4]
 8025a22:	697b      	ldr	r3, [r7, #20]
 8025a24:	212c      	movs	r1, #44	; 0x2c
 8025a26:	fb01 f303 	mul.w	r3, r1, r3
 8025a2a:	4413      	add	r3, r2
 8025a2c:	3361      	adds	r3, #97	; 0x61
 8025a2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025a30:	2b08      	cmp	r3, #8
 8025a32:	d14f      	bne.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8025a34:	687a      	ldr	r2, [r7, #4]
 8025a36:	697b      	ldr	r3, [r7, #20]
 8025a38:	212c      	movs	r1, #44	; 0x2c
 8025a3a:	fb01 f303 	mul.w	r3, r1, r3
 8025a3e:	4413      	add	r3, r2
 8025a40:	335c      	adds	r3, #92	; 0x5c
 8025a42:	681b      	ldr	r3, [r3, #0]
 8025a44:	1c5a      	adds	r2, r3, #1
 8025a46:	6879      	ldr	r1, [r7, #4]
 8025a48:	697b      	ldr	r3, [r7, #20]
 8025a4a:	202c      	movs	r0, #44	; 0x2c
 8025a4c:	fb00 f303 	mul.w	r3, r0, r3
 8025a50:	440b      	add	r3, r1
 8025a52:	335c      	adds	r3, #92	; 0x5c
 8025a54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025a56:	687a      	ldr	r2, [r7, #4]
 8025a58:	697b      	ldr	r3, [r7, #20]
 8025a5a:	212c      	movs	r1, #44	; 0x2c
 8025a5c:	fb01 f303 	mul.w	r3, r1, r3
 8025a60:	4413      	add	r3, r2
 8025a62:	335c      	adds	r3, #92	; 0x5c
 8025a64:	681b      	ldr	r3, [r3, #0]
 8025a66:	2b02      	cmp	r3, #2
 8025a68:	d912      	bls.n	8025a90 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025a6a:	687a      	ldr	r2, [r7, #4]
 8025a6c:	697b      	ldr	r3, [r7, #20]
 8025a6e:	212c      	movs	r1, #44	; 0x2c
 8025a70:	fb01 f303 	mul.w	r3, r1, r3
 8025a74:	4413      	add	r3, r2
 8025a76:	335c      	adds	r3, #92	; 0x5c
 8025a78:	2200      	movs	r2, #0
 8025a7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025a7c:	687a      	ldr	r2, [r7, #4]
 8025a7e:	697b      	ldr	r3, [r7, #20]
 8025a80:	212c      	movs	r1, #44	; 0x2c
 8025a82:	fb01 f303 	mul.w	r3, r1, r3
 8025a86:	4413      	add	r3, r2
 8025a88:	3360      	adds	r3, #96	; 0x60
 8025a8a:	2204      	movs	r2, #4
 8025a8c:	701a      	strb	r2, [r3, #0]
 8025a8e:	e021      	b.n	8025ad4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025a90:	687a      	ldr	r2, [r7, #4]
 8025a92:	697b      	ldr	r3, [r7, #20]
 8025a94:	212c      	movs	r1, #44	; 0x2c
 8025a96:	fb01 f303 	mul.w	r3, r1, r3
 8025a9a:	4413      	add	r3, r2
 8025a9c:	3360      	adds	r3, #96	; 0x60
 8025a9e:	2202      	movs	r2, #2
 8025aa0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025aa2:	697b      	ldr	r3, [r7, #20]
 8025aa4:	015a      	lsls	r2, r3, #5
 8025aa6:	69bb      	ldr	r3, [r7, #24]
 8025aa8:	4413      	add	r3, r2
 8025aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025ab2:	693b      	ldr	r3, [r7, #16]
 8025ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025ab8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025aba:	693b      	ldr	r3, [r7, #16]
 8025abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025ac0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025ac2:	697b      	ldr	r3, [r7, #20]
 8025ac4:	015a      	lsls	r2, r3, #5
 8025ac6:	69bb      	ldr	r3, [r7, #24]
 8025ac8:	4413      	add	r3, r2
 8025aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ace:	461a      	mov	r2, r3
 8025ad0:	693b      	ldr	r3, [r7, #16]
 8025ad2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025ad4:	697b      	ldr	r3, [r7, #20]
 8025ad6:	015a      	lsls	r2, r3, #5
 8025ad8:	69bb      	ldr	r3, [r7, #24]
 8025ada:	4413      	add	r3, r2
 8025adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ae0:	461a      	mov	r2, r3
 8025ae2:	2302      	movs	r3, #2
 8025ae4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025ae6:	697b      	ldr	r3, [r7, #20]
 8025ae8:	b2d9      	uxtb	r1, r3
 8025aea:	687a      	ldr	r2, [r7, #4]
 8025aec:	697b      	ldr	r3, [r7, #20]
 8025aee:	202c      	movs	r0, #44	; 0x2c
 8025af0:	fb00 f303 	mul.w	r3, r0, r3
 8025af4:	4413      	add	r3, r2
 8025af6:	3360      	adds	r3, #96	; 0x60
 8025af8:	781b      	ldrb	r3, [r3, #0]
 8025afa:	461a      	mov	r2, r3
 8025afc:	6878      	ldr	r0, [r7, #4]
 8025afe:	f007 fae1 	bl	802d0c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025b02:	bf00      	nop
 8025b04:	3720      	adds	r7, #32
 8025b06:	46bd      	mov	sp, r7
 8025b08:	bd80      	pop	{r7, pc}

08025b0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025b0a:	b580      	push	{r7, lr}
 8025b0c:	b08a      	sub	sp, #40	; 0x28
 8025b0e:	af00      	add	r7, sp, #0
 8025b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025b12:	687b      	ldr	r3, [r7, #4]
 8025b14:	681b      	ldr	r3, [r3, #0]
 8025b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8025b1c:	687b      	ldr	r3, [r7, #4]
 8025b1e:	681b      	ldr	r3, [r3, #0]
 8025b20:	6a1b      	ldr	r3, [r3, #32]
 8025b22:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8025b24:	69fb      	ldr	r3, [r7, #28]
 8025b26:	f003 030f 	and.w	r3, r3, #15
 8025b2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8025b2c:	69fb      	ldr	r3, [r7, #28]
 8025b2e:	0c5b      	lsrs	r3, r3, #17
 8025b30:	f003 030f 	and.w	r3, r3, #15
 8025b34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025b36:	69fb      	ldr	r3, [r7, #28]
 8025b38:	091b      	lsrs	r3, r3, #4
 8025b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025b3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8025b40:	697b      	ldr	r3, [r7, #20]
 8025b42:	2b02      	cmp	r3, #2
 8025b44:	d004      	beq.n	8025b50 <HCD_RXQLVL_IRQHandler+0x46>
 8025b46:	697b      	ldr	r3, [r7, #20]
 8025b48:	2b05      	cmp	r3, #5
 8025b4a:	f000 80a9 	beq.w	8025ca0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8025b4e:	e0aa      	b.n	8025ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8025b50:	693b      	ldr	r3, [r7, #16]
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	f000 80a6 	beq.w	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8025b58:	687a      	ldr	r2, [r7, #4]
 8025b5a:	69bb      	ldr	r3, [r7, #24]
 8025b5c:	212c      	movs	r1, #44	; 0x2c
 8025b5e:	fb01 f303 	mul.w	r3, r1, r3
 8025b62:	4413      	add	r3, r2
 8025b64:	3344      	adds	r3, #68	; 0x44
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	f000 809b 	beq.w	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8025b6e:	687a      	ldr	r2, [r7, #4]
 8025b70:	69bb      	ldr	r3, [r7, #24]
 8025b72:	212c      	movs	r1, #44	; 0x2c
 8025b74:	fb01 f303 	mul.w	r3, r1, r3
 8025b78:	4413      	add	r3, r2
 8025b7a:	3350      	adds	r3, #80	; 0x50
 8025b7c:	681a      	ldr	r2, [r3, #0]
 8025b7e:	693b      	ldr	r3, [r7, #16]
 8025b80:	441a      	add	r2, r3
 8025b82:	6879      	ldr	r1, [r7, #4]
 8025b84:	69bb      	ldr	r3, [r7, #24]
 8025b86:	202c      	movs	r0, #44	; 0x2c
 8025b88:	fb00 f303 	mul.w	r3, r0, r3
 8025b8c:	440b      	add	r3, r1
 8025b8e:	334c      	adds	r3, #76	; 0x4c
 8025b90:	681b      	ldr	r3, [r3, #0]
 8025b92:	429a      	cmp	r2, r3
 8025b94:	d87a      	bhi.n	8025c8c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	6818      	ldr	r0, [r3, #0]
 8025b9a:	687a      	ldr	r2, [r7, #4]
 8025b9c:	69bb      	ldr	r3, [r7, #24]
 8025b9e:	212c      	movs	r1, #44	; 0x2c
 8025ba0:	fb01 f303 	mul.w	r3, r1, r3
 8025ba4:	4413      	add	r3, r2
 8025ba6:	3344      	adds	r3, #68	; 0x44
 8025ba8:	681b      	ldr	r3, [r3, #0]
 8025baa:	693a      	ldr	r2, [r7, #16]
 8025bac:	b292      	uxth	r2, r2
 8025bae:	4619      	mov	r1, r3
 8025bb0:	f004 fb40 	bl	802a234 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8025bb4:	687a      	ldr	r2, [r7, #4]
 8025bb6:	69bb      	ldr	r3, [r7, #24]
 8025bb8:	212c      	movs	r1, #44	; 0x2c
 8025bba:	fb01 f303 	mul.w	r3, r1, r3
 8025bbe:	4413      	add	r3, r2
 8025bc0:	3344      	adds	r3, #68	; 0x44
 8025bc2:	681a      	ldr	r2, [r3, #0]
 8025bc4:	693b      	ldr	r3, [r7, #16]
 8025bc6:	441a      	add	r2, r3
 8025bc8:	6879      	ldr	r1, [r7, #4]
 8025bca:	69bb      	ldr	r3, [r7, #24]
 8025bcc:	202c      	movs	r0, #44	; 0x2c
 8025bce:	fb00 f303 	mul.w	r3, r0, r3
 8025bd2:	440b      	add	r3, r1
 8025bd4:	3344      	adds	r3, #68	; 0x44
 8025bd6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8025bd8:	687a      	ldr	r2, [r7, #4]
 8025bda:	69bb      	ldr	r3, [r7, #24]
 8025bdc:	212c      	movs	r1, #44	; 0x2c
 8025bde:	fb01 f303 	mul.w	r3, r1, r3
 8025be2:	4413      	add	r3, r2
 8025be4:	3350      	adds	r3, #80	; 0x50
 8025be6:	681a      	ldr	r2, [r3, #0]
 8025be8:	693b      	ldr	r3, [r7, #16]
 8025bea:	441a      	add	r2, r3
 8025bec:	6879      	ldr	r1, [r7, #4]
 8025bee:	69bb      	ldr	r3, [r7, #24]
 8025bf0:	202c      	movs	r0, #44	; 0x2c
 8025bf2:	fb00 f303 	mul.w	r3, r0, r3
 8025bf6:	440b      	add	r3, r1
 8025bf8:	3350      	adds	r3, #80	; 0x50
 8025bfa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8025bfc:	69bb      	ldr	r3, [r7, #24]
 8025bfe:	015a      	lsls	r2, r3, #5
 8025c00:	6a3b      	ldr	r3, [r7, #32]
 8025c02:	4413      	add	r3, r2
 8025c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c08:	691b      	ldr	r3, [r3, #16]
 8025c0a:	0cdb      	lsrs	r3, r3, #19
 8025c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025c10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8025c12:	687a      	ldr	r2, [r7, #4]
 8025c14:	69bb      	ldr	r3, [r7, #24]
 8025c16:	212c      	movs	r1, #44	; 0x2c
 8025c18:	fb01 f303 	mul.w	r3, r1, r3
 8025c1c:	4413      	add	r3, r2
 8025c1e:	3340      	adds	r3, #64	; 0x40
 8025c20:	881b      	ldrh	r3, [r3, #0]
 8025c22:	461a      	mov	r2, r3
 8025c24:	693b      	ldr	r3, [r7, #16]
 8025c26:	4293      	cmp	r3, r2
 8025c28:	d13c      	bne.n	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
 8025c2a:	68fb      	ldr	r3, [r7, #12]
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	d039      	beq.n	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025c30:	69bb      	ldr	r3, [r7, #24]
 8025c32:	015a      	lsls	r2, r3, #5
 8025c34:	6a3b      	ldr	r3, [r7, #32]
 8025c36:	4413      	add	r3, r2
 8025c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c3c:	681b      	ldr	r3, [r3, #0]
 8025c3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025c40:	68bb      	ldr	r3, [r7, #8]
 8025c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025c46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025c48:	68bb      	ldr	r3, [r7, #8]
 8025c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025c4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025c50:	69bb      	ldr	r3, [r7, #24]
 8025c52:	015a      	lsls	r2, r3, #5
 8025c54:	6a3b      	ldr	r3, [r7, #32]
 8025c56:	4413      	add	r3, r2
 8025c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c5c:	461a      	mov	r2, r3
 8025c5e:	68bb      	ldr	r3, [r7, #8]
 8025c60:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c62:	687a      	ldr	r2, [r7, #4]
 8025c64:	69bb      	ldr	r3, [r7, #24]
 8025c66:	212c      	movs	r1, #44	; 0x2c
 8025c68:	fb01 f303 	mul.w	r3, r1, r3
 8025c6c:	4413      	add	r3, r2
 8025c6e:	3354      	adds	r3, #84	; 0x54
 8025c70:	781b      	ldrb	r3, [r3, #0]
 8025c72:	f083 0301 	eor.w	r3, r3, #1
 8025c76:	b2d8      	uxtb	r0, r3
 8025c78:	687a      	ldr	r2, [r7, #4]
 8025c7a:	69bb      	ldr	r3, [r7, #24]
 8025c7c:	212c      	movs	r1, #44	; 0x2c
 8025c7e:	fb01 f303 	mul.w	r3, r1, r3
 8025c82:	4413      	add	r3, r2
 8025c84:	3354      	adds	r3, #84	; 0x54
 8025c86:	4602      	mov	r2, r0
 8025c88:	701a      	strb	r2, [r3, #0]
      break;
 8025c8a:	e00b      	b.n	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025c8c:	687a      	ldr	r2, [r7, #4]
 8025c8e:	69bb      	ldr	r3, [r7, #24]
 8025c90:	212c      	movs	r1, #44	; 0x2c
 8025c92:	fb01 f303 	mul.w	r3, r1, r3
 8025c96:	4413      	add	r3, r2
 8025c98:	3360      	adds	r3, #96	; 0x60
 8025c9a:	2204      	movs	r2, #4
 8025c9c:	701a      	strb	r2, [r3, #0]
      break;
 8025c9e:	e001      	b.n	8025ca4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8025ca0:	bf00      	nop
 8025ca2:	e000      	b.n	8025ca6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8025ca4:	bf00      	nop
  }
}
 8025ca6:	bf00      	nop
 8025ca8:	3728      	adds	r7, #40	; 0x28
 8025caa:	46bd      	mov	sp, r7
 8025cac:	bd80      	pop	{r7, pc}

08025cae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025cae:	b580      	push	{r7, lr}
 8025cb0:	b086      	sub	sp, #24
 8025cb2:	af00      	add	r7, sp, #0
 8025cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	681b      	ldr	r3, [r3, #0]
 8025cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025cbc:	697b      	ldr	r3, [r7, #20]
 8025cbe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8025cc0:	693b      	ldr	r3, [r7, #16]
 8025cc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025cc6:	681b      	ldr	r3, [r3, #0]
 8025cc8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8025cca:	693b      	ldr	r3, [r7, #16]
 8025ccc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025cd0:	681b      	ldr	r3, [r3, #0]
 8025cd2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8025cd4:	68bb      	ldr	r3, [r7, #8]
 8025cd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8025cda:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8025cdc:	68fb      	ldr	r3, [r7, #12]
 8025cde:	f003 0302 	and.w	r3, r3, #2
 8025ce2:	2b02      	cmp	r3, #2
 8025ce4:	d10b      	bne.n	8025cfe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8025ce6:	68fb      	ldr	r3, [r7, #12]
 8025ce8:	f003 0301 	and.w	r3, r3, #1
 8025cec:	2b01      	cmp	r3, #1
 8025cee:	d102      	bne.n	8025cf6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8025cf0:	6878      	ldr	r0, [r7, #4]
 8025cf2:	f007 f9cb 	bl	802d08c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8025cf6:	68bb      	ldr	r3, [r7, #8]
 8025cf8:	f043 0302 	orr.w	r3, r3, #2
 8025cfc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	f003 0308 	and.w	r3, r3, #8
 8025d04:	2b08      	cmp	r3, #8
 8025d06:	d132      	bne.n	8025d6e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8025d08:	68bb      	ldr	r3, [r7, #8]
 8025d0a:	f043 0308 	orr.w	r3, r3, #8
 8025d0e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8025d10:	68fb      	ldr	r3, [r7, #12]
 8025d12:	f003 0304 	and.w	r3, r3, #4
 8025d16:	2b04      	cmp	r3, #4
 8025d18:	d126      	bne.n	8025d68 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8025d1a:	687b      	ldr	r3, [r7, #4]
 8025d1c:	699b      	ldr	r3, [r3, #24]
 8025d1e:	2b02      	cmp	r3, #2
 8025d20:	d113      	bne.n	8025d4a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8025d22:	68fb      	ldr	r3, [r7, #12]
 8025d24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8025d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025d2c:	d106      	bne.n	8025d3c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	681b      	ldr	r3, [r3, #0]
 8025d32:	2102      	movs	r1, #2
 8025d34:	4618      	mov	r0, r3
 8025d36:	f004 fbeb 	bl	802a510 <USB_InitFSLSPClkSel>
 8025d3a:	e011      	b.n	8025d60 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025d3c:	687b      	ldr	r3, [r7, #4]
 8025d3e:	681b      	ldr	r3, [r3, #0]
 8025d40:	2101      	movs	r1, #1
 8025d42:	4618      	mov	r0, r3
 8025d44:	f004 fbe4 	bl	802a510 <USB_InitFSLSPClkSel>
 8025d48:	e00a      	b.n	8025d60 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	68db      	ldr	r3, [r3, #12]
 8025d4e:	2b01      	cmp	r3, #1
 8025d50:	d106      	bne.n	8025d60 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8025d52:	693b      	ldr	r3, [r7, #16]
 8025d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025d58:	461a      	mov	r2, r3
 8025d5a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8025d5e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8025d60:	6878      	ldr	r0, [r7, #4]
 8025d62:	f007 f9bd 	bl	802d0e0 <HAL_HCD_PortEnabled_Callback>
 8025d66:	e002      	b.n	8025d6e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8025d68:	6878      	ldr	r0, [r7, #4]
 8025d6a:	f007 f9c7 	bl	802d0fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8025d6e:	68fb      	ldr	r3, [r7, #12]
 8025d70:	f003 0320 	and.w	r3, r3, #32
 8025d74:	2b20      	cmp	r3, #32
 8025d76:	d103      	bne.n	8025d80 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8025d78:	68bb      	ldr	r3, [r7, #8]
 8025d7a:	f043 0320 	orr.w	r3, r3, #32
 8025d7e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8025d80:	693b      	ldr	r3, [r7, #16]
 8025d82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025d86:	461a      	mov	r2, r3
 8025d88:	68bb      	ldr	r3, [r7, #8]
 8025d8a:	6013      	str	r3, [r2, #0]
}
 8025d8c:	bf00      	nop
 8025d8e:	3718      	adds	r7, #24
 8025d90:	46bd      	mov	sp, r7
 8025d92:	bd80      	pop	{r7, pc}

08025d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025d94:	b580      	push	{r7, lr}
 8025d96:	b084      	sub	sp, #16
 8025d98:	af00      	add	r7, sp, #0
 8025d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025d9c:	687b      	ldr	r3, [r7, #4]
 8025d9e:	2b00      	cmp	r3, #0
 8025da0:	d101      	bne.n	8025da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025da2:	2301      	movs	r3, #1
 8025da4:	e12b      	b.n	8025ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025da6:	687b      	ldr	r3, [r7, #4]
 8025da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025dac:	b2db      	uxtb	r3, r3
 8025dae:	2b00      	cmp	r3, #0
 8025db0:	d106      	bne.n	8025dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	2200      	movs	r2, #0
 8025db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8025dba:	6878      	ldr	r0, [r7, #4]
 8025dbc:	f7fb fa92 	bl	80212e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	2224      	movs	r2, #36	; 0x24
 8025dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	681a      	ldr	r2, [r3, #0]
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	681b      	ldr	r3, [r3, #0]
 8025dd2:	f022 0201 	bic.w	r2, r2, #1
 8025dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8025dd8:	687b      	ldr	r3, [r7, #4]
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	681a      	ldr	r2, [r3, #0]
 8025dde:	687b      	ldr	r3, [r7, #4]
 8025de0:	681b      	ldr	r3, [r3, #0]
 8025de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8025de8:	687b      	ldr	r3, [r7, #4]
 8025dea:	681b      	ldr	r3, [r3, #0]
 8025dec:	681a      	ldr	r2, [r3, #0]
 8025dee:	687b      	ldr	r3, [r7, #4]
 8025df0:	681b      	ldr	r3, [r3, #0]
 8025df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8025df8:	f001 fa0c 	bl	8027214 <HAL_RCC_GetPCLK1Freq>
 8025dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	685b      	ldr	r3, [r3, #4]
 8025e02:	4a81      	ldr	r2, [pc, #516]	; (8026008 <HAL_I2C_Init+0x274>)
 8025e04:	4293      	cmp	r3, r2
 8025e06:	d807      	bhi.n	8025e18 <HAL_I2C_Init+0x84>
 8025e08:	68fb      	ldr	r3, [r7, #12]
 8025e0a:	4a80      	ldr	r2, [pc, #512]	; (802600c <HAL_I2C_Init+0x278>)
 8025e0c:	4293      	cmp	r3, r2
 8025e0e:	bf94      	ite	ls
 8025e10:	2301      	movls	r3, #1
 8025e12:	2300      	movhi	r3, #0
 8025e14:	b2db      	uxtb	r3, r3
 8025e16:	e006      	b.n	8025e26 <HAL_I2C_Init+0x92>
 8025e18:	68fb      	ldr	r3, [r7, #12]
 8025e1a:	4a7d      	ldr	r2, [pc, #500]	; (8026010 <HAL_I2C_Init+0x27c>)
 8025e1c:	4293      	cmp	r3, r2
 8025e1e:	bf94      	ite	ls
 8025e20:	2301      	movls	r3, #1
 8025e22:	2300      	movhi	r3, #0
 8025e24:	b2db      	uxtb	r3, r3
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	d001      	beq.n	8025e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8025e2a:	2301      	movs	r3, #1
 8025e2c:	e0e7      	b.n	8025ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8025e2e:	68fb      	ldr	r3, [r7, #12]
 8025e30:	4a78      	ldr	r2, [pc, #480]	; (8026014 <HAL_I2C_Init+0x280>)
 8025e32:	fba2 2303 	umull	r2, r3, r2, r3
 8025e36:	0c9b      	lsrs	r3, r3, #18
 8025e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8025e3a:	687b      	ldr	r3, [r7, #4]
 8025e3c:	681b      	ldr	r3, [r3, #0]
 8025e3e:	685b      	ldr	r3, [r3, #4]
 8025e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025e44:	687b      	ldr	r3, [r7, #4]
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	68ba      	ldr	r2, [r7, #8]
 8025e4a:	430a      	orrs	r2, r1
 8025e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8025e4e:	687b      	ldr	r3, [r7, #4]
 8025e50:	681b      	ldr	r3, [r3, #0]
 8025e52:	6a1b      	ldr	r3, [r3, #32]
 8025e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025e58:	687b      	ldr	r3, [r7, #4]
 8025e5a:	685b      	ldr	r3, [r3, #4]
 8025e5c:	4a6a      	ldr	r2, [pc, #424]	; (8026008 <HAL_I2C_Init+0x274>)
 8025e5e:	4293      	cmp	r3, r2
 8025e60:	d802      	bhi.n	8025e68 <HAL_I2C_Init+0xd4>
 8025e62:	68bb      	ldr	r3, [r7, #8]
 8025e64:	3301      	adds	r3, #1
 8025e66:	e009      	b.n	8025e7c <HAL_I2C_Init+0xe8>
 8025e68:	68bb      	ldr	r3, [r7, #8]
 8025e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8025e6e:	fb02 f303 	mul.w	r3, r2, r3
 8025e72:	4a69      	ldr	r2, [pc, #420]	; (8026018 <HAL_I2C_Init+0x284>)
 8025e74:	fba2 2303 	umull	r2, r3, r2, r3
 8025e78:	099b      	lsrs	r3, r3, #6
 8025e7a:	3301      	adds	r3, #1
 8025e7c:	687a      	ldr	r2, [r7, #4]
 8025e7e:	6812      	ldr	r2, [r2, #0]
 8025e80:	430b      	orrs	r3, r1
 8025e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025e84:	687b      	ldr	r3, [r7, #4]
 8025e86:	681b      	ldr	r3, [r3, #0]
 8025e88:	69db      	ldr	r3, [r3, #28]
 8025e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8025e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025e92:	687b      	ldr	r3, [r7, #4]
 8025e94:	685b      	ldr	r3, [r3, #4]
 8025e96:	495c      	ldr	r1, [pc, #368]	; (8026008 <HAL_I2C_Init+0x274>)
 8025e98:	428b      	cmp	r3, r1
 8025e9a:	d819      	bhi.n	8025ed0 <HAL_I2C_Init+0x13c>
 8025e9c:	68fb      	ldr	r3, [r7, #12]
 8025e9e:	1e59      	subs	r1, r3, #1
 8025ea0:	687b      	ldr	r3, [r7, #4]
 8025ea2:	685b      	ldr	r3, [r3, #4]
 8025ea4:	005b      	lsls	r3, r3, #1
 8025ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8025eaa:	1c59      	adds	r1, r3, #1
 8025eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8025eb0:	400b      	ands	r3, r1
 8025eb2:	2b00      	cmp	r3, #0
 8025eb4:	d00a      	beq.n	8025ecc <HAL_I2C_Init+0x138>
 8025eb6:	68fb      	ldr	r3, [r7, #12]
 8025eb8:	1e59      	subs	r1, r3, #1
 8025eba:	687b      	ldr	r3, [r7, #4]
 8025ebc:	685b      	ldr	r3, [r3, #4]
 8025ebe:	005b      	lsls	r3, r3, #1
 8025ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8025ec4:	3301      	adds	r3, #1
 8025ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025eca:	e051      	b.n	8025f70 <HAL_I2C_Init+0x1dc>
 8025ecc:	2304      	movs	r3, #4
 8025ece:	e04f      	b.n	8025f70 <HAL_I2C_Init+0x1dc>
 8025ed0:	687b      	ldr	r3, [r7, #4]
 8025ed2:	689b      	ldr	r3, [r3, #8]
 8025ed4:	2b00      	cmp	r3, #0
 8025ed6:	d111      	bne.n	8025efc <HAL_I2C_Init+0x168>
 8025ed8:	68fb      	ldr	r3, [r7, #12]
 8025eda:	1e58      	subs	r0, r3, #1
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	6859      	ldr	r1, [r3, #4]
 8025ee0:	460b      	mov	r3, r1
 8025ee2:	005b      	lsls	r3, r3, #1
 8025ee4:	440b      	add	r3, r1
 8025ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8025eea:	3301      	adds	r3, #1
 8025eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025ef0:	2b00      	cmp	r3, #0
 8025ef2:	bf0c      	ite	eq
 8025ef4:	2301      	moveq	r3, #1
 8025ef6:	2300      	movne	r3, #0
 8025ef8:	b2db      	uxtb	r3, r3
 8025efa:	e012      	b.n	8025f22 <HAL_I2C_Init+0x18e>
 8025efc:	68fb      	ldr	r3, [r7, #12]
 8025efe:	1e58      	subs	r0, r3, #1
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	6859      	ldr	r1, [r3, #4]
 8025f04:	460b      	mov	r3, r1
 8025f06:	009b      	lsls	r3, r3, #2
 8025f08:	440b      	add	r3, r1
 8025f0a:	0099      	lsls	r1, r3, #2
 8025f0c:	440b      	add	r3, r1
 8025f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8025f12:	3301      	adds	r3, #1
 8025f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	bf0c      	ite	eq
 8025f1c:	2301      	moveq	r3, #1
 8025f1e:	2300      	movne	r3, #0
 8025f20:	b2db      	uxtb	r3, r3
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d001      	beq.n	8025f2a <HAL_I2C_Init+0x196>
 8025f26:	2301      	movs	r3, #1
 8025f28:	e022      	b.n	8025f70 <HAL_I2C_Init+0x1dc>
 8025f2a:	687b      	ldr	r3, [r7, #4]
 8025f2c:	689b      	ldr	r3, [r3, #8]
 8025f2e:	2b00      	cmp	r3, #0
 8025f30:	d10e      	bne.n	8025f50 <HAL_I2C_Init+0x1bc>
 8025f32:	68fb      	ldr	r3, [r7, #12]
 8025f34:	1e58      	subs	r0, r3, #1
 8025f36:	687b      	ldr	r3, [r7, #4]
 8025f38:	6859      	ldr	r1, [r3, #4]
 8025f3a:	460b      	mov	r3, r1
 8025f3c:	005b      	lsls	r3, r3, #1
 8025f3e:	440b      	add	r3, r1
 8025f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8025f44:	3301      	adds	r3, #1
 8025f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025f4e:	e00f      	b.n	8025f70 <HAL_I2C_Init+0x1dc>
 8025f50:	68fb      	ldr	r3, [r7, #12]
 8025f52:	1e58      	subs	r0, r3, #1
 8025f54:	687b      	ldr	r3, [r7, #4]
 8025f56:	6859      	ldr	r1, [r3, #4]
 8025f58:	460b      	mov	r3, r1
 8025f5a:	009b      	lsls	r3, r3, #2
 8025f5c:	440b      	add	r3, r1
 8025f5e:	0099      	lsls	r1, r3, #2
 8025f60:	440b      	add	r3, r1
 8025f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8025f66:	3301      	adds	r3, #1
 8025f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025f70:	6879      	ldr	r1, [r7, #4]
 8025f72:	6809      	ldr	r1, [r1, #0]
 8025f74:	4313      	orrs	r3, r2
 8025f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025f78:	687b      	ldr	r3, [r7, #4]
 8025f7a:	681b      	ldr	r3, [r3, #0]
 8025f7c:	681b      	ldr	r3, [r3, #0]
 8025f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8025f82:	687b      	ldr	r3, [r7, #4]
 8025f84:	69da      	ldr	r2, [r3, #28]
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	6a1b      	ldr	r3, [r3, #32]
 8025f8a:	431a      	orrs	r2, r3
 8025f8c:	687b      	ldr	r3, [r7, #4]
 8025f8e:	681b      	ldr	r3, [r3, #0]
 8025f90:	430a      	orrs	r2, r1
 8025f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	681b      	ldr	r3, [r3, #0]
 8025f98:	689b      	ldr	r3, [r3, #8]
 8025f9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8025fa2:	687a      	ldr	r2, [r7, #4]
 8025fa4:	6911      	ldr	r1, [r2, #16]
 8025fa6:	687a      	ldr	r2, [r7, #4]
 8025fa8:	68d2      	ldr	r2, [r2, #12]
 8025faa:	4311      	orrs	r1, r2
 8025fac:	687a      	ldr	r2, [r7, #4]
 8025fae:	6812      	ldr	r2, [r2, #0]
 8025fb0:	430b      	orrs	r3, r1
 8025fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	681b      	ldr	r3, [r3, #0]
 8025fb8:	68db      	ldr	r3, [r3, #12]
 8025fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8025fbe:	687b      	ldr	r3, [r7, #4]
 8025fc0:	695a      	ldr	r2, [r3, #20]
 8025fc2:	687b      	ldr	r3, [r7, #4]
 8025fc4:	699b      	ldr	r3, [r3, #24]
 8025fc6:	431a      	orrs	r2, r3
 8025fc8:	687b      	ldr	r3, [r7, #4]
 8025fca:	681b      	ldr	r3, [r3, #0]
 8025fcc:	430a      	orrs	r2, r1
 8025fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	681b      	ldr	r3, [r3, #0]
 8025fd4:	681a      	ldr	r2, [r3, #0]
 8025fd6:	687b      	ldr	r3, [r7, #4]
 8025fd8:	681b      	ldr	r3, [r3, #0]
 8025fda:	f042 0201 	orr.w	r2, r2, #1
 8025fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025fe0:	687b      	ldr	r3, [r7, #4]
 8025fe2:	2200      	movs	r2, #0
 8025fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8025fe6:	687b      	ldr	r3, [r7, #4]
 8025fe8:	2220      	movs	r2, #32
 8025fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8025fee:	687b      	ldr	r3, [r7, #4]
 8025ff0:	2200      	movs	r2, #0
 8025ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025ff4:	687b      	ldr	r3, [r7, #4]
 8025ff6:	2200      	movs	r2, #0
 8025ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025ffc:	2300      	movs	r3, #0
}
 8025ffe:	4618      	mov	r0, r3
 8026000:	3710      	adds	r7, #16
 8026002:	46bd      	mov	sp, r7
 8026004:	bd80      	pop	{r7, pc}
 8026006:	bf00      	nop
 8026008:	000186a0 	.word	0x000186a0
 802600c:	001e847f 	.word	0x001e847f
 8026010:	003d08ff 	.word	0x003d08ff
 8026014:	431bde83 	.word	0x431bde83
 8026018:	10624dd3 	.word	0x10624dd3

0802601c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802601c:	b480      	push	{r7}
 802601e:	b083      	sub	sp, #12
 8026020:	af00      	add	r7, sp, #0
 8026022:	6078      	str	r0, [r7, #4]
 8026024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026026:	687b      	ldr	r3, [r7, #4]
 8026028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802602c:	b2db      	uxtb	r3, r3
 802602e:	2b20      	cmp	r3, #32
 8026030:	d129      	bne.n	8026086 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026032:	687b      	ldr	r3, [r7, #4]
 8026034:	2224      	movs	r2, #36	; 0x24
 8026036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802603a:	687b      	ldr	r3, [r7, #4]
 802603c:	681b      	ldr	r3, [r3, #0]
 802603e:	681a      	ldr	r2, [r3, #0]
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	681b      	ldr	r3, [r3, #0]
 8026044:	f022 0201 	bic.w	r2, r2, #1
 8026048:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 802604a:	687b      	ldr	r3, [r7, #4]
 802604c:	681b      	ldr	r3, [r3, #0]
 802604e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	f022 0210 	bic.w	r2, r2, #16
 8026058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 802605a:	687b      	ldr	r3, [r7, #4]
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026060:	687b      	ldr	r3, [r7, #4]
 8026062:	681b      	ldr	r3, [r3, #0]
 8026064:	683a      	ldr	r2, [r7, #0]
 8026066:	430a      	orrs	r2, r1
 8026068:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 802606a:	687b      	ldr	r3, [r7, #4]
 802606c:	681b      	ldr	r3, [r3, #0]
 802606e:	681a      	ldr	r2, [r3, #0]
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	f042 0201 	orr.w	r2, r2, #1
 8026078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	2220      	movs	r2, #32
 802607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026082:	2300      	movs	r3, #0
 8026084:	e000      	b.n	8026088 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026086:	2302      	movs	r3, #2
  }
}
 8026088:	4618      	mov	r0, r3
 802608a:	370c      	adds	r7, #12
 802608c:	46bd      	mov	sp, r7
 802608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026092:	4770      	bx	lr

08026094 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026094:	b480      	push	{r7}
 8026096:	b085      	sub	sp, #20
 8026098:	af00      	add	r7, sp, #0
 802609a:	6078      	str	r0, [r7, #4]
 802609c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 802609e:	2300      	movs	r3, #0
 80260a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80260a2:	687b      	ldr	r3, [r7, #4]
 80260a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80260a8:	b2db      	uxtb	r3, r3
 80260aa:	2b20      	cmp	r3, #32
 80260ac:	d12a      	bne.n	8026104 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80260ae:	687b      	ldr	r3, [r7, #4]
 80260b0:	2224      	movs	r2, #36	; 0x24
 80260b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80260b6:	687b      	ldr	r3, [r7, #4]
 80260b8:	681b      	ldr	r3, [r3, #0]
 80260ba:	681a      	ldr	r2, [r3, #0]
 80260bc:	687b      	ldr	r3, [r7, #4]
 80260be:	681b      	ldr	r3, [r3, #0]
 80260c0:	f022 0201 	bic.w	r2, r2, #1
 80260c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80260c6:	687b      	ldr	r3, [r7, #4]
 80260c8:	681b      	ldr	r3, [r3, #0]
 80260ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80260cc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80260ce:	89fb      	ldrh	r3, [r7, #14]
 80260d0:	f023 030f 	bic.w	r3, r3, #15
 80260d4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80260d6:	683b      	ldr	r3, [r7, #0]
 80260d8:	b29a      	uxth	r2, r3
 80260da:	89fb      	ldrh	r3, [r7, #14]
 80260dc:	4313      	orrs	r3, r2
 80260de:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80260e0:	687b      	ldr	r3, [r7, #4]
 80260e2:	681b      	ldr	r3, [r3, #0]
 80260e4:	89fa      	ldrh	r2, [r7, #14]
 80260e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80260e8:	687b      	ldr	r3, [r7, #4]
 80260ea:	681b      	ldr	r3, [r3, #0]
 80260ec:	681a      	ldr	r2, [r3, #0]
 80260ee:	687b      	ldr	r3, [r7, #4]
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	f042 0201 	orr.w	r2, r2, #1
 80260f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	2220      	movs	r2, #32
 80260fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026100:	2300      	movs	r3, #0
 8026102:	e000      	b.n	8026106 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026104:	2302      	movs	r3, #2
  }
}
 8026106:	4618      	mov	r0, r3
 8026108:	3714      	adds	r7, #20
 802610a:	46bd      	mov	sp, r7
 802610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026110:	4770      	bx	lr
	...

08026114 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026114:	b580      	push	{r7, lr}
 8026116:	b084      	sub	sp, #16
 8026118:	af00      	add	r7, sp, #0
 802611a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 802611c:	687b      	ldr	r3, [r7, #4]
 802611e:	2b00      	cmp	r3, #0
 8026120:	d101      	bne.n	8026126 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026122:	2301      	movs	r3, #1
 8026124:	e0bf      	b.n	80262a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026126:	687b      	ldr	r3, [r7, #4]
 8026128:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 802612c:	b2db      	uxtb	r3, r3
 802612e:	2b00      	cmp	r3, #0
 8026130:	d106      	bne.n	8026140 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	2200      	movs	r2, #0
 8026136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 802613a:	6878      	ldr	r0, [r7, #4]
 802613c:	f7fb f93c 	bl	80213b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	2202      	movs	r2, #2
 8026144:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	681b      	ldr	r3, [r3, #0]
 802614c:	699a      	ldr	r2, [r3, #24]
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	681b      	ldr	r3, [r3, #0]
 8026152:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026156:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	681b      	ldr	r3, [r3, #0]
 802615c:	6999      	ldr	r1, [r3, #24]
 802615e:	687b      	ldr	r3, [r7, #4]
 8026160:	685a      	ldr	r2, [r3, #4]
 8026162:	687b      	ldr	r3, [r7, #4]
 8026164:	689b      	ldr	r3, [r3, #8]
 8026166:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026168:	687b      	ldr	r3, [r7, #4]
 802616a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 802616c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 802616e:	687b      	ldr	r3, [r7, #4]
 8026170:	691b      	ldr	r3, [r3, #16]
 8026172:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	681b      	ldr	r3, [r3, #0]
 8026178:	430a      	orrs	r2, r1
 802617a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	681b      	ldr	r3, [r3, #0]
 8026180:	6899      	ldr	r1, [r3, #8]
 8026182:	687b      	ldr	r3, [r7, #4]
 8026184:	681a      	ldr	r2, [r3, #0]
 8026186:	4b4a      	ldr	r3, [pc, #296]	; (80262b0 <HAL_LTDC_Init+0x19c>)
 8026188:	400b      	ands	r3, r1
 802618a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 802618c:	687b      	ldr	r3, [r7, #4]
 802618e:	695b      	ldr	r3, [r3, #20]
 8026190:	041b      	lsls	r3, r3, #16
 8026192:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026194:	687b      	ldr	r3, [r7, #4]
 8026196:	681b      	ldr	r3, [r3, #0]
 8026198:	6899      	ldr	r1, [r3, #8]
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	699a      	ldr	r2, [r3, #24]
 802619e:	68fb      	ldr	r3, [r7, #12]
 80261a0:	431a      	orrs	r2, r3
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	681b      	ldr	r3, [r3, #0]
 80261a6:	430a      	orrs	r2, r1
 80261a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80261aa:	687b      	ldr	r3, [r7, #4]
 80261ac:	681b      	ldr	r3, [r3, #0]
 80261ae:	68d9      	ldr	r1, [r3, #12]
 80261b0:	687b      	ldr	r3, [r7, #4]
 80261b2:	681a      	ldr	r2, [r3, #0]
 80261b4:	4b3e      	ldr	r3, [pc, #248]	; (80262b0 <HAL_LTDC_Init+0x19c>)
 80261b6:	400b      	ands	r3, r1
 80261b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80261ba:	687b      	ldr	r3, [r7, #4]
 80261bc:	69db      	ldr	r3, [r3, #28]
 80261be:	041b      	lsls	r3, r3, #16
 80261c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80261c2:	687b      	ldr	r3, [r7, #4]
 80261c4:	681b      	ldr	r3, [r3, #0]
 80261c6:	68d9      	ldr	r1, [r3, #12]
 80261c8:	687b      	ldr	r3, [r7, #4]
 80261ca:	6a1a      	ldr	r2, [r3, #32]
 80261cc:	68fb      	ldr	r3, [r7, #12]
 80261ce:	431a      	orrs	r2, r3
 80261d0:	687b      	ldr	r3, [r7, #4]
 80261d2:	681b      	ldr	r3, [r3, #0]
 80261d4:	430a      	orrs	r2, r1
 80261d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80261d8:	687b      	ldr	r3, [r7, #4]
 80261da:	681b      	ldr	r3, [r3, #0]
 80261dc:	6919      	ldr	r1, [r3, #16]
 80261de:	687b      	ldr	r3, [r7, #4]
 80261e0:	681a      	ldr	r2, [r3, #0]
 80261e2:	4b33      	ldr	r3, [pc, #204]	; (80262b0 <HAL_LTDC_Init+0x19c>)
 80261e4:	400b      	ands	r3, r1
 80261e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80261e8:	687b      	ldr	r3, [r7, #4]
 80261ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80261ec:	041b      	lsls	r3, r3, #16
 80261ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	681b      	ldr	r3, [r3, #0]
 80261f4:	6919      	ldr	r1, [r3, #16]
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80261fa:	68fb      	ldr	r3, [r7, #12]
 80261fc:	431a      	orrs	r2, r3
 80261fe:	687b      	ldr	r3, [r7, #4]
 8026200:	681b      	ldr	r3, [r3, #0]
 8026202:	430a      	orrs	r2, r1
 8026204:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026206:	687b      	ldr	r3, [r7, #4]
 8026208:	681b      	ldr	r3, [r3, #0]
 802620a:	6959      	ldr	r1, [r3, #20]
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	681a      	ldr	r2, [r3, #0]
 8026210:	4b27      	ldr	r3, [pc, #156]	; (80262b0 <HAL_LTDC_Init+0x19c>)
 8026212:	400b      	ands	r3, r1
 8026214:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026216:	687b      	ldr	r3, [r7, #4]
 8026218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802621a:	041b      	lsls	r3, r3, #16
 802621c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 802621e:	687b      	ldr	r3, [r7, #4]
 8026220:	681b      	ldr	r3, [r3, #0]
 8026222:	6959      	ldr	r1, [r3, #20]
 8026224:	687b      	ldr	r3, [r7, #4]
 8026226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026228:	68fb      	ldr	r3, [r7, #12]
 802622a:	431a      	orrs	r2, r3
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	430a      	orrs	r2, r1
 8026232:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026234:	687b      	ldr	r3, [r7, #4]
 8026236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802623a:	021b      	lsls	r3, r3, #8
 802623c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 802623e:	687b      	ldr	r3, [r7, #4]
 8026240:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026244:	041b      	lsls	r3, r3, #16
 8026246:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802624e:	687b      	ldr	r3, [r7, #4]
 8026250:	681b      	ldr	r3, [r3, #0]
 8026252:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026256:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026258:	687b      	ldr	r3, [r7, #4]
 802625a:	681b      	ldr	r3, [r3, #0]
 802625c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802625e:	68ba      	ldr	r2, [r7, #8]
 8026260:	68fb      	ldr	r3, [r7, #12]
 8026262:	4313      	orrs	r3, r2
 8026264:	687a      	ldr	r2, [r7, #4]
 8026266:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 802626a:	431a      	orrs	r2, r3
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	681b      	ldr	r3, [r3, #0]
 8026270:	430a      	orrs	r2, r1
 8026272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026274:	687b      	ldr	r3, [r7, #4]
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802627a:	687b      	ldr	r3, [r7, #4]
 802627c:	681b      	ldr	r3, [r3, #0]
 802627e:	f042 0206 	orr.w	r2, r2, #6
 8026282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026284:	687b      	ldr	r3, [r7, #4]
 8026286:	681b      	ldr	r3, [r3, #0]
 8026288:	699a      	ldr	r2, [r3, #24]
 802628a:	687b      	ldr	r3, [r7, #4]
 802628c:	681b      	ldr	r3, [r3, #0]
 802628e:	f042 0201 	orr.w	r2, r2, #1
 8026292:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	2200      	movs	r2, #0
 8026298:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	2201      	movs	r2, #1
 80262a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80262a4:	2300      	movs	r3, #0
}
 80262a6:	4618      	mov	r0, r3
 80262a8:	3710      	adds	r7, #16
 80262aa:	46bd      	mov	sp, r7
 80262ac:	bd80      	pop	{r7, pc}
 80262ae:	bf00      	nop
 80262b0:	f000f800 	.word	0xf000f800

080262b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80262b4:	b580      	push	{r7, lr}
 80262b6:	b084      	sub	sp, #16
 80262b8:	af00      	add	r7, sp, #0
 80262ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80262bc:	687b      	ldr	r3, [r7, #4]
 80262be:	681b      	ldr	r3, [r3, #0]
 80262c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80262c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	681b      	ldr	r3, [r3, #0]
 80262c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80262ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80262cc:	68fb      	ldr	r3, [r7, #12]
 80262ce:	f003 0304 	and.w	r3, r3, #4
 80262d2:	2b00      	cmp	r3, #0
 80262d4:	d023      	beq.n	802631e <HAL_LTDC_IRQHandler+0x6a>
 80262d6:	68bb      	ldr	r3, [r7, #8]
 80262d8:	f003 0304 	and.w	r3, r3, #4
 80262dc:	2b00      	cmp	r3, #0
 80262de:	d01e      	beq.n	802631e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80262e6:	687b      	ldr	r3, [r7, #4]
 80262e8:	681b      	ldr	r3, [r3, #0]
 80262ea:	f022 0204 	bic.w	r2, r2, #4
 80262ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80262f0:	687b      	ldr	r3, [r7, #4]
 80262f2:	681b      	ldr	r3, [r3, #0]
 80262f4:	2204      	movs	r2, #4
 80262f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80262fe:	f043 0201 	orr.w	r2, r3, #1
 8026302:	687b      	ldr	r3, [r7, #4]
 8026304:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026308:	687b      	ldr	r3, [r7, #4]
 802630a:	2204      	movs	r2, #4
 802630c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026310:	687b      	ldr	r3, [r7, #4]
 8026312:	2200      	movs	r2, #0
 8026314:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026318:	6878      	ldr	r0, [r7, #4]
 802631a:	f000 f86f 	bl	80263fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 802631e:	68fb      	ldr	r3, [r7, #12]
 8026320:	f003 0302 	and.w	r3, r3, #2
 8026324:	2b00      	cmp	r3, #0
 8026326:	d023      	beq.n	8026370 <HAL_LTDC_IRQHandler+0xbc>
 8026328:	68bb      	ldr	r3, [r7, #8]
 802632a:	f003 0302 	and.w	r3, r3, #2
 802632e:	2b00      	cmp	r3, #0
 8026330:	d01e      	beq.n	8026370 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026332:	687b      	ldr	r3, [r7, #4]
 8026334:	681b      	ldr	r3, [r3, #0]
 8026336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026338:	687b      	ldr	r3, [r7, #4]
 802633a:	681b      	ldr	r3, [r3, #0]
 802633c:	f022 0202 	bic.w	r2, r2, #2
 8026340:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026342:	687b      	ldr	r3, [r7, #4]
 8026344:	681b      	ldr	r3, [r3, #0]
 8026346:	2202      	movs	r2, #2
 8026348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 802634a:	687b      	ldr	r3, [r7, #4]
 802634c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026350:	f043 0202 	orr.w	r2, r3, #2
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 802635a:	687b      	ldr	r3, [r7, #4]
 802635c:	2204      	movs	r2, #4
 802635e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	2200      	movs	r2, #0
 8026366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 802636a:	6878      	ldr	r0, [r7, #4]
 802636c:	f000 f846 	bl	80263fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026370:	68fb      	ldr	r3, [r7, #12]
 8026372:	f003 0301 	and.w	r3, r3, #1
 8026376:	2b00      	cmp	r3, #0
 8026378:	d01b      	beq.n	80263b2 <HAL_LTDC_IRQHandler+0xfe>
 802637a:	68bb      	ldr	r3, [r7, #8]
 802637c:	f003 0301 	and.w	r3, r3, #1
 8026380:	2b00      	cmp	r3, #0
 8026382:	d016      	beq.n	80263b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026384:	687b      	ldr	r3, [r7, #4]
 8026386:	681b      	ldr	r3, [r3, #0]
 8026388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	f022 0201 	bic.w	r2, r2, #1
 8026392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026394:	687b      	ldr	r3, [r7, #4]
 8026396:	681b      	ldr	r3, [r3, #0]
 8026398:	2201      	movs	r2, #1
 802639a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 802639c:	687b      	ldr	r3, [r7, #4]
 802639e:	2201      	movs	r2, #1
 80263a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80263a4:	687b      	ldr	r3, [r7, #4]
 80263a6:	2200      	movs	r2, #0
 80263a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80263ac:	6878      	ldr	r0, [r7, #4]
 80263ae:	f000 f82f 	bl	8026410 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80263b2:	68fb      	ldr	r3, [r7, #12]
 80263b4:	f003 0308 	and.w	r3, r3, #8
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	d01b      	beq.n	80263f4 <HAL_LTDC_IRQHandler+0x140>
 80263bc:	68bb      	ldr	r3, [r7, #8]
 80263be:	f003 0308 	and.w	r3, r3, #8
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	d016      	beq.n	80263f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	681b      	ldr	r3, [r3, #0]
 80263ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80263cc:	687b      	ldr	r3, [r7, #4]
 80263ce:	681b      	ldr	r3, [r3, #0]
 80263d0:	f022 0208 	bic.w	r2, r2, #8
 80263d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	681b      	ldr	r3, [r3, #0]
 80263da:	2208      	movs	r2, #8
 80263dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80263de:	687b      	ldr	r3, [r7, #4]
 80263e0:	2201      	movs	r2, #1
 80263e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	2200      	movs	r2, #0
 80263ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80263ee:	6878      	ldr	r0, [r7, #4]
 80263f0:	f000 f818 	bl	8026424 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80263f4:	bf00      	nop
 80263f6:	3710      	adds	r7, #16
 80263f8:	46bd      	mov	sp, r7
 80263fa:	bd80      	pop	{r7, pc}

080263fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80263fc:	b480      	push	{r7}
 80263fe:	b083      	sub	sp, #12
 8026400:	af00      	add	r7, sp, #0
 8026402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026404:	bf00      	nop
 8026406:	370c      	adds	r7, #12
 8026408:	46bd      	mov	sp, r7
 802640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802640e:	4770      	bx	lr

08026410 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026410:	b480      	push	{r7}
 8026412:	b083      	sub	sp, #12
 8026414:	af00      	add	r7, sp, #0
 8026416:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026418:	bf00      	nop
 802641a:	370c      	adds	r7, #12
 802641c:	46bd      	mov	sp, r7
 802641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026422:	4770      	bx	lr

08026424 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026424:	b480      	push	{r7}
 8026426:	b083      	sub	sp, #12
 8026428:	af00      	add	r7, sp, #0
 802642a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 802642c:	bf00      	nop
 802642e:	370c      	adds	r7, #12
 8026430:	46bd      	mov	sp, r7
 8026432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026436:	4770      	bx	lr

08026438 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026438:	b5b0      	push	{r4, r5, r7, lr}
 802643a:	b084      	sub	sp, #16
 802643c:	af00      	add	r7, sp, #0
 802643e:	60f8      	str	r0, [r7, #12]
 8026440:	60b9      	str	r1, [r7, #8]
 8026442:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026444:	68fb      	ldr	r3, [r7, #12]
 8026446:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802644a:	2b01      	cmp	r3, #1
 802644c:	d101      	bne.n	8026452 <HAL_LTDC_ConfigLayer+0x1a>
 802644e:	2302      	movs	r3, #2
 8026450:	e02c      	b.n	80264ac <HAL_LTDC_ConfigLayer+0x74>
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	2201      	movs	r2, #1
 8026456:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802645a:	68fb      	ldr	r3, [r7, #12]
 802645c:	2202      	movs	r2, #2
 802645e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026462:	68fa      	ldr	r2, [r7, #12]
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	2134      	movs	r1, #52	; 0x34
 8026468:	fb01 f303 	mul.w	r3, r1, r3
 802646c:	4413      	add	r3, r2
 802646e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026472:	68bb      	ldr	r3, [r7, #8]
 8026474:	4614      	mov	r4, r2
 8026476:	461d      	mov	r5, r3
 8026478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802647a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802647c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802647e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026484:	682b      	ldr	r3, [r5, #0]
 8026486:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026488:	687a      	ldr	r2, [r7, #4]
 802648a:	68b9      	ldr	r1, [r7, #8]
 802648c:	68f8      	ldr	r0, [r7, #12]
 802648e:	f000 f8b9 	bl	8026604 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026492:	68fb      	ldr	r3, [r7, #12]
 8026494:	681b      	ldr	r3, [r3, #0]
 8026496:	2201      	movs	r2, #1
 8026498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 802649a:	68fb      	ldr	r3, [r7, #12]
 802649c:	2201      	movs	r2, #1
 802649e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80264a2:	68fb      	ldr	r3, [r7, #12]
 80264a4:	2200      	movs	r2, #0
 80264a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80264aa:	2300      	movs	r3, #0
}
 80264ac:	4618      	mov	r0, r3
 80264ae:	3710      	adds	r7, #16
 80264b0:	46bd      	mov	sp, r7
 80264b2:	bdb0      	pop	{r4, r5, r7, pc}

080264b4 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80264b4:	b480      	push	{r7}
 80264b6:	b085      	sub	sp, #20
 80264b8:	af00      	add	r7, sp, #0
 80264ba:	60f8      	str	r0, [r7, #12]
 80264bc:	60b9      	str	r1, [r7, #8]
 80264be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80264c6:	2b01      	cmp	r3, #1
 80264c8:	d101      	bne.n	80264ce <HAL_LTDC_ConfigColorKeying+0x1a>
 80264ca:	2302      	movs	r3, #2
 80264cc:	e030      	b.n	8026530 <HAL_LTDC_ConfigColorKeying+0x7c>
 80264ce:	68fb      	ldr	r3, [r7, #12]
 80264d0:	2201      	movs	r2, #1
 80264d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80264d6:	68fb      	ldr	r3, [r7, #12]
 80264d8:	2202      	movs	r2, #2
 80264da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 80264de:	68fb      	ldr	r3, [r7, #12]
 80264e0:	681b      	ldr	r3, [r3, #0]
 80264e2:	461a      	mov	r2, r3
 80264e4:	687b      	ldr	r3, [r7, #4]
 80264e6:	01db      	lsls	r3, r3, #7
 80264e8:	4413      	add	r3, r2
 80264ea:	3384      	adds	r3, #132	; 0x84
 80264ec:	68db      	ldr	r3, [r3, #12]
 80264ee:	68fa      	ldr	r2, [r7, #12]
 80264f0:	6812      	ldr	r2, [r2, #0]
 80264f2:	4611      	mov	r1, r2
 80264f4:	687a      	ldr	r2, [r7, #4]
 80264f6:	01d2      	lsls	r2, r2, #7
 80264f8:	440a      	add	r2, r1
 80264fa:	3284      	adds	r2, #132	; 0x84
 80264fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8026500:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	681b      	ldr	r3, [r3, #0]
 8026506:	461a      	mov	r2, r3
 8026508:	687b      	ldr	r3, [r7, #4]
 802650a:	01db      	lsls	r3, r3, #7
 802650c:	4413      	add	r3, r2
 802650e:	3384      	adds	r3, #132	; 0x84
 8026510:	461a      	mov	r2, r3
 8026512:	68bb      	ldr	r3, [r7, #8]
 8026514:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026516:	68fb      	ldr	r3, [r7, #12]
 8026518:	681b      	ldr	r3, [r3, #0]
 802651a:	2201      	movs	r2, #1
 802651c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802651e:	68fb      	ldr	r3, [r7, #12]
 8026520:	2201      	movs	r2, #1
 8026522:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026526:	68fb      	ldr	r3, [r7, #12]
 8026528:	2200      	movs	r2, #0
 802652a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802652e:	2300      	movs	r3, #0
}
 8026530:	4618      	mov	r0, r3
 8026532:	3714      	adds	r7, #20
 8026534:	46bd      	mov	sp, r7
 8026536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802653a:	4770      	bx	lr

0802653c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 802653c:	b480      	push	{r7}
 802653e:	b083      	sub	sp, #12
 8026540:	af00      	add	r7, sp, #0
 8026542:	6078      	str	r0, [r7, #4]
 8026544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026546:	687b      	ldr	r3, [r7, #4]
 8026548:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802654c:	2b01      	cmp	r3, #1
 802654e:	d101      	bne.n	8026554 <HAL_LTDC_EnableColorKeying+0x18>
 8026550:	2302      	movs	r3, #2
 8026552:	e026      	b.n	80265a2 <HAL_LTDC_EnableColorKeying+0x66>
 8026554:	687b      	ldr	r3, [r7, #4]
 8026556:	2201      	movs	r2, #1
 8026558:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802655c:	687b      	ldr	r3, [r7, #4]
 802655e:	2202      	movs	r2, #2
 8026560:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8026564:	687b      	ldr	r3, [r7, #4]
 8026566:	681b      	ldr	r3, [r3, #0]
 8026568:	461a      	mov	r2, r3
 802656a:	683b      	ldr	r3, [r7, #0]
 802656c:	01db      	lsls	r3, r3, #7
 802656e:	4413      	add	r3, r2
 8026570:	3384      	adds	r3, #132	; 0x84
 8026572:	681b      	ldr	r3, [r3, #0]
 8026574:	687a      	ldr	r2, [r7, #4]
 8026576:	6812      	ldr	r2, [r2, #0]
 8026578:	4611      	mov	r1, r2
 802657a:	683a      	ldr	r2, [r7, #0]
 802657c:	01d2      	lsls	r2, r2, #7
 802657e:	440a      	add	r2, r1
 8026580:	3284      	adds	r2, #132	; 0x84
 8026582:	f043 0302 	orr.w	r3, r3, #2
 8026586:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026588:	687b      	ldr	r3, [r7, #4]
 802658a:	681b      	ldr	r3, [r3, #0]
 802658c:	2201      	movs	r2, #1
 802658e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	2201      	movs	r2, #1
 8026594:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026598:	687b      	ldr	r3, [r7, #4]
 802659a:	2200      	movs	r2, #0
 802659c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80265a0:	2300      	movs	r3, #0
}
 80265a2:	4618      	mov	r0, r3
 80265a4:	370c      	adds	r7, #12
 80265a6:	46bd      	mov	sp, r7
 80265a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265ac:	4770      	bx	lr
	...

080265b0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80265b0:	b480      	push	{r7}
 80265b2:	b083      	sub	sp, #12
 80265b4:	af00      	add	r7, sp, #0
 80265b6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80265b8:	687b      	ldr	r3, [r7, #4]
 80265ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80265be:	2b01      	cmp	r3, #1
 80265c0:	d101      	bne.n	80265c6 <HAL_LTDC_EnableDither+0x16>
 80265c2:	2302      	movs	r3, #2
 80265c4:	e016      	b.n	80265f4 <HAL_LTDC_EnableDither+0x44>
 80265c6:	687b      	ldr	r3, [r7, #4]
 80265c8:	2201      	movs	r2, #1
 80265ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80265ce:	687b      	ldr	r3, [r7, #4]
 80265d0:	2202      	movs	r2, #2
 80265d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80265d6:	4b0a      	ldr	r3, [pc, #40]	; (8026600 <HAL_LTDC_EnableDither+0x50>)
 80265d8:	699b      	ldr	r3, [r3, #24]
 80265da:	4a09      	ldr	r2, [pc, #36]	; (8026600 <HAL_LTDC_EnableDither+0x50>)
 80265dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80265e0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80265e2:	687b      	ldr	r3, [r7, #4]
 80265e4:	2201      	movs	r2, #1
 80265e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	2200      	movs	r2, #0
 80265ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80265f2:	2300      	movs	r3, #0
}
 80265f4:	4618      	mov	r0, r3
 80265f6:	370c      	adds	r7, #12
 80265f8:	46bd      	mov	sp, r7
 80265fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265fe:	4770      	bx	lr
 8026600:	40016800 	.word	0x40016800

08026604 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026604:	b480      	push	{r7}
 8026606:	b089      	sub	sp, #36	; 0x24
 8026608:	af00      	add	r7, sp, #0
 802660a:	60f8      	str	r0, [r7, #12]
 802660c:	60b9      	str	r1, [r7, #8]
 802660e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026610:	68bb      	ldr	r3, [r7, #8]
 8026612:	685a      	ldr	r2, [r3, #4]
 8026614:	68fb      	ldr	r3, [r7, #12]
 8026616:	681b      	ldr	r3, [r3, #0]
 8026618:	68db      	ldr	r3, [r3, #12]
 802661a:	0c1b      	lsrs	r3, r3, #16
 802661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026620:	4413      	add	r3, r2
 8026622:	041b      	lsls	r3, r3, #16
 8026624:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8026626:	68fb      	ldr	r3, [r7, #12]
 8026628:	681b      	ldr	r3, [r3, #0]
 802662a:	461a      	mov	r2, r3
 802662c:	687b      	ldr	r3, [r7, #4]
 802662e:	01db      	lsls	r3, r3, #7
 8026630:	4413      	add	r3, r2
 8026632:	3384      	adds	r3, #132	; 0x84
 8026634:	685b      	ldr	r3, [r3, #4]
 8026636:	68fa      	ldr	r2, [r7, #12]
 8026638:	6812      	ldr	r2, [r2, #0]
 802663a:	4611      	mov	r1, r2
 802663c:	687a      	ldr	r2, [r7, #4]
 802663e:	01d2      	lsls	r2, r2, #7
 8026640:	440a      	add	r2, r1
 8026642:	3284      	adds	r2, #132	; 0x84
 8026644:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8026648:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802664a:	68bb      	ldr	r3, [r7, #8]
 802664c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802664e:	68fb      	ldr	r3, [r7, #12]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	68db      	ldr	r3, [r3, #12]
 8026654:	0c1b      	lsrs	r3, r3, #16
 8026656:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802665a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802665c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802665e:	68fb      	ldr	r3, [r7, #12]
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	4619      	mov	r1, r3
 8026664:	687b      	ldr	r3, [r7, #4]
 8026666:	01db      	lsls	r3, r3, #7
 8026668:	440b      	add	r3, r1
 802666a:	3384      	adds	r3, #132	; 0x84
 802666c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802666e:	69fb      	ldr	r3, [r7, #28]
 8026670:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8026672:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8026674:	68bb      	ldr	r3, [r7, #8]
 8026676:	68da      	ldr	r2, [r3, #12]
 8026678:	68fb      	ldr	r3, [r7, #12]
 802667a:	681b      	ldr	r3, [r3, #0]
 802667c:	68db      	ldr	r3, [r3, #12]
 802667e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026682:	4413      	add	r3, r2
 8026684:	041b      	lsls	r3, r3, #16
 8026686:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8026688:	68fb      	ldr	r3, [r7, #12]
 802668a:	681b      	ldr	r3, [r3, #0]
 802668c:	461a      	mov	r2, r3
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	01db      	lsls	r3, r3, #7
 8026692:	4413      	add	r3, r2
 8026694:	3384      	adds	r3, #132	; 0x84
 8026696:	689b      	ldr	r3, [r3, #8]
 8026698:	68fa      	ldr	r2, [r7, #12]
 802669a:	6812      	ldr	r2, [r2, #0]
 802669c:	4611      	mov	r1, r2
 802669e:	687a      	ldr	r2, [r7, #4]
 80266a0:	01d2      	lsls	r2, r2, #7
 80266a2:	440a      	add	r2, r1
 80266a4:	3284      	adds	r2, #132	; 0x84
 80266a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80266aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80266ac:	68bb      	ldr	r3, [r7, #8]
 80266ae:	689a      	ldr	r2, [r3, #8]
 80266b0:	68fb      	ldr	r3, [r7, #12]
 80266b2:	681b      	ldr	r3, [r3, #0]
 80266b4:	68db      	ldr	r3, [r3, #12]
 80266b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80266ba:	4413      	add	r3, r2
 80266bc:	1c5a      	adds	r2, r3, #1
 80266be:	68fb      	ldr	r3, [r7, #12]
 80266c0:	681b      	ldr	r3, [r3, #0]
 80266c2:	4619      	mov	r1, r3
 80266c4:	687b      	ldr	r3, [r7, #4]
 80266c6:	01db      	lsls	r3, r3, #7
 80266c8:	440b      	add	r3, r1
 80266ca:	3384      	adds	r3, #132	; 0x84
 80266cc:	4619      	mov	r1, r3
 80266ce:	69fb      	ldr	r3, [r7, #28]
 80266d0:	4313      	orrs	r3, r2
 80266d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80266d4:	68fb      	ldr	r3, [r7, #12]
 80266d6:	681b      	ldr	r3, [r3, #0]
 80266d8:	461a      	mov	r2, r3
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	01db      	lsls	r3, r3, #7
 80266de:	4413      	add	r3, r2
 80266e0:	3384      	adds	r3, #132	; 0x84
 80266e2:	691b      	ldr	r3, [r3, #16]
 80266e4:	68fa      	ldr	r2, [r7, #12]
 80266e6:	6812      	ldr	r2, [r2, #0]
 80266e8:	4611      	mov	r1, r2
 80266ea:	687a      	ldr	r2, [r7, #4]
 80266ec:	01d2      	lsls	r2, r2, #7
 80266ee:	440a      	add	r2, r1
 80266f0:	3284      	adds	r2, #132	; 0x84
 80266f2:	f023 0307 	bic.w	r3, r3, #7
 80266f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80266f8:	68fb      	ldr	r3, [r7, #12]
 80266fa:	681b      	ldr	r3, [r3, #0]
 80266fc:	461a      	mov	r2, r3
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	01db      	lsls	r3, r3, #7
 8026702:	4413      	add	r3, r2
 8026704:	3384      	adds	r3, #132	; 0x84
 8026706:	461a      	mov	r2, r3
 8026708:	68bb      	ldr	r3, [r7, #8]
 802670a:	691b      	ldr	r3, [r3, #16]
 802670c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802670e:	68bb      	ldr	r3, [r7, #8]
 8026710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026714:	021b      	lsls	r3, r3, #8
 8026716:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026718:	68bb      	ldr	r3, [r7, #8]
 802671a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802671e:	041b      	lsls	r3, r3, #16
 8026720:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8026722:	68bb      	ldr	r3, [r7, #8]
 8026724:	699b      	ldr	r3, [r3, #24]
 8026726:	061b      	lsls	r3, r3, #24
 8026728:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 802672a:	68fb      	ldr	r3, [r7, #12]
 802672c:	681b      	ldr	r3, [r3, #0]
 802672e:	461a      	mov	r2, r3
 8026730:	687b      	ldr	r3, [r7, #4]
 8026732:	01db      	lsls	r3, r3, #7
 8026734:	4413      	add	r3, r2
 8026736:	3384      	adds	r3, #132	; 0x84
 8026738:	699b      	ldr	r3, [r3, #24]
 802673a:	68fb      	ldr	r3, [r7, #12]
 802673c:	681b      	ldr	r3, [r3, #0]
 802673e:	461a      	mov	r2, r3
 8026740:	687b      	ldr	r3, [r7, #4]
 8026742:	01db      	lsls	r3, r3, #7
 8026744:	4413      	add	r3, r2
 8026746:	3384      	adds	r3, #132	; 0x84
 8026748:	461a      	mov	r2, r3
 802674a:	2300      	movs	r3, #0
 802674c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 802674e:	68bb      	ldr	r3, [r7, #8]
 8026750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026754:	461a      	mov	r2, r3
 8026756:	69fb      	ldr	r3, [r7, #28]
 8026758:	431a      	orrs	r2, r3
 802675a:	69bb      	ldr	r3, [r7, #24]
 802675c:	431a      	orrs	r2, r3
 802675e:	68fb      	ldr	r3, [r7, #12]
 8026760:	681b      	ldr	r3, [r3, #0]
 8026762:	4619      	mov	r1, r3
 8026764:	687b      	ldr	r3, [r7, #4]
 8026766:	01db      	lsls	r3, r3, #7
 8026768:	440b      	add	r3, r1
 802676a:	3384      	adds	r3, #132	; 0x84
 802676c:	4619      	mov	r1, r3
 802676e:	697b      	ldr	r3, [r7, #20]
 8026770:	4313      	orrs	r3, r2
 8026772:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8026774:	68fb      	ldr	r3, [r7, #12]
 8026776:	681b      	ldr	r3, [r3, #0]
 8026778:	461a      	mov	r2, r3
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	01db      	lsls	r3, r3, #7
 802677e:	4413      	add	r3, r2
 8026780:	3384      	adds	r3, #132	; 0x84
 8026782:	695b      	ldr	r3, [r3, #20]
 8026784:	68fa      	ldr	r2, [r7, #12]
 8026786:	6812      	ldr	r2, [r2, #0]
 8026788:	4611      	mov	r1, r2
 802678a:	687a      	ldr	r2, [r7, #4]
 802678c:	01d2      	lsls	r2, r2, #7
 802678e:	440a      	add	r2, r1
 8026790:	3284      	adds	r2, #132	; 0x84
 8026792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026796:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8026798:	68fb      	ldr	r3, [r7, #12]
 802679a:	681b      	ldr	r3, [r3, #0]
 802679c:	461a      	mov	r2, r3
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	01db      	lsls	r3, r3, #7
 80267a2:	4413      	add	r3, r2
 80267a4:	3384      	adds	r3, #132	; 0x84
 80267a6:	461a      	mov	r2, r3
 80267a8:	68bb      	ldr	r3, [r7, #8]
 80267aa:	695b      	ldr	r3, [r3, #20]
 80267ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	461a      	mov	r2, r3
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	01db      	lsls	r3, r3, #7
 80267b8:	4413      	add	r3, r2
 80267ba:	3384      	adds	r3, #132	; 0x84
 80267bc:	69db      	ldr	r3, [r3, #28]
 80267be:	68fa      	ldr	r2, [r7, #12]
 80267c0:	6812      	ldr	r2, [r2, #0]
 80267c2:	4611      	mov	r1, r2
 80267c4:	687a      	ldr	r2, [r7, #4]
 80267c6:	01d2      	lsls	r2, r2, #7
 80267c8:	440a      	add	r2, r1
 80267ca:	3284      	adds	r2, #132	; 0x84
 80267cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80267d0:	f023 0307 	bic.w	r3, r3, #7
 80267d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80267d6:	68bb      	ldr	r3, [r7, #8]
 80267d8:	69da      	ldr	r2, [r3, #28]
 80267da:	68bb      	ldr	r3, [r7, #8]
 80267dc:	6a1b      	ldr	r3, [r3, #32]
 80267de:	68f9      	ldr	r1, [r7, #12]
 80267e0:	6809      	ldr	r1, [r1, #0]
 80267e2:	4608      	mov	r0, r1
 80267e4:	6879      	ldr	r1, [r7, #4]
 80267e6:	01c9      	lsls	r1, r1, #7
 80267e8:	4401      	add	r1, r0
 80267ea:	3184      	adds	r1, #132	; 0x84
 80267ec:	4313      	orrs	r3, r2
 80267ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80267f0:	68fb      	ldr	r3, [r7, #12]
 80267f2:	681b      	ldr	r3, [r3, #0]
 80267f4:	461a      	mov	r2, r3
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	01db      	lsls	r3, r3, #7
 80267fa:	4413      	add	r3, r2
 80267fc:	3384      	adds	r3, #132	; 0x84
 80267fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	681b      	ldr	r3, [r3, #0]
 8026804:	461a      	mov	r2, r3
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	01db      	lsls	r3, r3, #7
 802680a:	4413      	add	r3, r2
 802680c:	3384      	adds	r3, #132	; 0x84
 802680e:	461a      	mov	r2, r3
 8026810:	2300      	movs	r3, #0
 8026812:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026814:	68fb      	ldr	r3, [r7, #12]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	461a      	mov	r2, r3
 802681a:	687b      	ldr	r3, [r7, #4]
 802681c:	01db      	lsls	r3, r3, #7
 802681e:	4413      	add	r3, r2
 8026820:	3384      	adds	r3, #132	; 0x84
 8026822:	461a      	mov	r2, r3
 8026824:	68bb      	ldr	r3, [r7, #8]
 8026826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026828:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802682a:	68bb      	ldr	r3, [r7, #8]
 802682c:	691b      	ldr	r3, [r3, #16]
 802682e:	2b00      	cmp	r3, #0
 8026830:	d102      	bne.n	8026838 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8026832:	2304      	movs	r3, #4
 8026834:	61fb      	str	r3, [r7, #28]
 8026836:	e01b      	b.n	8026870 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8026838:	68bb      	ldr	r3, [r7, #8]
 802683a:	691b      	ldr	r3, [r3, #16]
 802683c:	2b01      	cmp	r3, #1
 802683e:	d102      	bne.n	8026846 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8026840:	2303      	movs	r3, #3
 8026842:	61fb      	str	r3, [r7, #28]
 8026844:	e014      	b.n	8026870 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026846:	68bb      	ldr	r3, [r7, #8]
 8026848:	691b      	ldr	r3, [r3, #16]
 802684a:	2b04      	cmp	r3, #4
 802684c:	d00b      	beq.n	8026866 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802684e:	68bb      	ldr	r3, [r7, #8]
 8026850:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8026852:	2b02      	cmp	r3, #2
 8026854:	d007      	beq.n	8026866 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026856:	68bb      	ldr	r3, [r7, #8]
 8026858:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802685a:	2b03      	cmp	r3, #3
 802685c:	d003      	beq.n	8026866 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 802685e:	68bb      	ldr	r3, [r7, #8]
 8026860:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8026862:	2b07      	cmp	r3, #7
 8026864:	d102      	bne.n	802686c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8026866:	2302      	movs	r3, #2
 8026868:	61fb      	str	r3, [r7, #28]
 802686a:	e001      	b.n	8026870 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 802686c:	2301      	movs	r3, #1
 802686e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8026870:	68fb      	ldr	r3, [r7, #12]
 8026872:	681b      	ldr	r3, [r3, #0]
 8026874:	461a      	mov	r2, r3
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	01db      	lsls	r3, r3, #7
 802687a:	4413      	add	r3, r2
 802687c:	3384      	adds	r3, #132	; 0x84
 802687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026880:	68fa      	ldr	r2, [r7, #12]
 8026882:	6812      	ldr	r2, [r2, #0]
 8026884:	4611      	mov	r1, r2
 8026886:	687a      	ldr	r2, [r7, #4]
 8026888:	01d2      	lsls	r2, r2, #7
 802688a:	440a      	add	r2, r1
 802688c:	3284      	adds	r2, #132	; 0x84
 802688e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8026892:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8026894:	68bb      	ldr	r3, [r7, #8]
 8026896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026898:	69fa      	ldr	r2, [r7, #28]
 802689a:	fb02 f303 	mul.w	r3, r2, r3
 802689e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80268a0:	68bb      	ldr	r3, [r7, #8]
 80268a2:	6859      	ldr	r1, [r3, #4]
 80268a4:	68bb      	ldr	r3, [r7, #8]
 80268a6:	681b      	ldr	r3, [r3, #0]
 80268a8:	1acb      	subs	r3, r1, r3
 80268aa:	69f9      	ldr	r1, [r7, #28]
 80268ac:	fb01 f303 	mul.w	r3, r1, r3
 80268b0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80268b2:	68f9      	ldr	r1, [r7, #12]
 80268b4:	6809      	ldr	r1, [r1, #0]
 80268b6:	4608      	mov	r0, r1
 80268b8:	6879      	ldr	r1, [r7, #4]
 80268ba:	01c9      	lsls	r1, r1, #7
 80268bc:	4401      	add	r1, r0
 80268be:	3184      	adds	r1, #132	; 0x84
 80268c0:	4313      	orrs	r3, r2
 80268c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80268c4:	68fb      	ldr	r3, [r7, #12]
 80268c6:	681b      	ldr	r3, [r3, #0]
 80268c8:	461a      	mov	r2, r3
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	01db      	lsls	r3, r3, #7
 80268ce:	4413      	add	r3, r2
 80268d0:	3384      	adds	r3, #132	; 0x84
 80268d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80268d4:	68fa      	ldr	r2, [r7, #12]
 80268d6:	6812      	ldr	r2, [r2, #0]
 80268d8:	4611      	mov	r1, r2
 80268da:	687a      	ldr	r2, [r7, #4]
 80268dc:	01d2      	lsls	r2, r2, #7
 80268de:	440a      	add	r2, r1
 80268e0:	3284      	adds	r2, #132	; 0x84
 80268e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80268e6:	f023 0307 	bic.w	r3, r3, #7
 80268ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80268ec:	68fb      	ldr	r3, [r7, #12]
 80268ee:	681b      	ldr	r3, [r3, #0]
 80268f0:	461a      	mov	r2, r3
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	01db      	lsls	r3, r3, #7
 80268f6:	4413      	add	r3, r2
 80268f8:	3384      	adds	r3, #132	; 0x84
 80268fa:	461a      	mov	r2, r3
 80268fc:	68bb      	ldr	r3, [r7, #8]
 80268fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026900:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026902:	68fb      	ldr	r3, [r7, #12]
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	461a      	mov	r2, r3
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	01db      	lsls	r3, r3, #7
 802690c:	4413      	add	r3, r2
 802690e:	3384      	adds	r3, #132	; 0x84
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	68fa      	ldr	r2, [r7, #12]
 8026914:	6812      	ldr	r2, [r2, #0]
 8026916:	4611      	mov	r1, r2
 8026918:	687a      	ldr	r2, [r7, #4]
 802691a:	01d2      	lsls	r2, r2, #7
 802691c:	440a      	add	r2, r1
 802691e:	3284      	adds	r2, #132	; 0x84
 8026920:	f043 0301 	orr.w	r3, r3, #1
 8026924:	6013      	str	r3, [r2, #0]
}
 8026926:	bf00      	nop
 8026928:	3724      	adds	r7, #36	; 0x24
 802692a:	46bd      	mov	sp, r7
 802692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026930:	4770      	bx	lr
	...

08026934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8026934:	b580      	push	{r7, lr}
 8026936:	b086      	sub	sp, #24
 8026938:	af00      	add	r7, sp, #0
 802693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802693c:	687b      	ldr	r3, [r7, #4]
 802693e:	2b00      	cmp	r3, #0
 8026940:	d101      	bne.n	8026946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8026942:	2301      	movs	r3, #1
 8026944:	e267      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	681b      	ldr	r3, [r3, #0]
 802694a:	f003 0301 	and.w	r3, r3, #1
 802694e:	2b00      	cmp	r3, #0
 8026950:	d075      	beq.n	8026a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026952:	4b88      	ldr	r3, [pc, #544]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026954:	689b      	ldr	r3, [r3, #8]
 8026956:	f003 030c 	and.w	r3, r3, #12
 802695a:	2b04      	cmp	r3, #4
 802695c:	d00c      	beq.n	8026978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802695e:	4b85      	ldr	r3, [pc, #532]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026960:	689b      	ldr	r3, [r3, #8]
 8026962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8026966:	2b08      	cmp	r3, #8
 8026968:	d112      	bne.n	8026990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802696a:	4b82      	ldr	r3, [pc, #520]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 802696c:	685b      	ldr	r3, [r3, #4]
 802696e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8026976:	d10b      	bne.n	8026990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026978:	4b7e      	ldr	r3, [pc, #504]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 802697a:	681b      	ldr	r3, [r3, #0]
 802697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026980:	2b00      	cmp	r3, #0
 8026982:	d05b      	beq.n	8026a3c <HAL_RCC_OscConfig+0x108>
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	685b      	ldr	r3, [r3, #4]
 8026988:	2b00      	cmp	r3, #0
 802698a:	d157      	bne.n	8026a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802698c:	2301      	movs	r3, #1
 802698e:	e242      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026990:	687b      	ldr	r3, [r7, #4]
 8026992:	685b      	ldr	r3, [r3, #4]
 8026994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026998:	d106      	bne.n	80269a8 <HAL_RCC_OscConfig+0x74>
 802699a:	4b76      	ldr	r3, [pc, #472]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	4a75      	ldr	r2, [pc, #468]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80269a4:	6013      	str	r3, [r2, #0]
 80269a6:	e01d      	b.n	80269e4 <HAL_RCC_OscConfig+0xb0>
 80269a8:	687b      	ldr	r3, [r7, #4]
 80269aa:	685b      	ldr	r3, [r3, #4]
 80269ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80269b0:	d10c      	bne.n	80269cc <HAL_RCC_OscConfig+0x98>
 80269b2:	4b70      	ldr	r3, [pc, #448]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	4a6f      	ldr	r2, [pc, #444]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80269bc:	6013      	str	r3, [r2, #0]
 80269be:	4b6d      	ldr	r3, [pc, #436]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269c0:	681b      	ldr	r3, [r3, #0]
 80269c2:	4a6c      	ldr	r2, [pc, #432]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80269c8:	6013      	str	r3, [r2, #0]
 80269ca:	e00b      	b.n	80269e4 <HAL_RCC_OscConfig+0xb0>
 80269cc:	4b69      	ldr	r3, [pc, #420]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269ce:	681b      	ldr	r3, [r3, #0]
 80269d0:	4a68      	ldr	r2, [pc, #416]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80269d6:	6013      	str	r3, [r2, #0]
 80269d8:	4b66      	ldr	r3, [pc, #408]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269da:	681b      	ldr	r3, [r3, #0]
 80269dc:	4a65      	ldr	r2, [pc, #404]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 80269de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80269e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	685b      	ldr	r3, [r3, #4]
 80269e8:	2b00      	cmp	r3, #0
 80269ea:	d013      	beq.n	8026a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80269ec:	f7fc fbc4 	bl	8023178 <HAL_GetTick>
 80269f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80269f2:	e008      	b.n	8026a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80269f4:	f7fc fbc0 	bl	8023178 <HAL_GetTick>
 80269f8:	4602      	mov	r2, r0
 80269fa:	693b      	ldr	r3, [r7, #16]
 80269fc:	1ad3      	subs	r3, r2, r3
 80269fe:	2b64      	cmp	r3, #100	; 0x64
 8026a00:	d901      	bls.n	8026a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026a02:	2303      	movs	r3, #3
 8026a04:	e207      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026a06:	4b5b      	ldr	r3, [pc, #364]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	d0f0      	beq.n	80269f4 <HAL_RCC_OscConfig+0xc0>
 8026a12:	e014      	b.n	8026a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026a14:	f7fc fbb0 	bl	8023178 <HAL_GetTick>
 8026a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026a1a:	e008      	b.n	8026a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026a1c:	f7fc fbac 	bl	8023178 <HAL_GetTick>
 8026a20:	4602      	mov	r2, r0
 8026a22:	693b      	ldr	r3, [r7, #16]
 8026a24:	1ad3      	subs	r3, r2, r3
 8026a26:	2b64      	cmp	r3, #100	; 0x64
 8026a28:	d901      	bls.n	8026a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8026a2a:	2303      	movs	r3, #3
 8026a2c:	e1f3      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8026a2e:	4b51      	ldr	r3, [pc, #324]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026a36:	2b00      	cmp	r3, #0
 8026a38:	d1f0      	bne.n	8026a1c <HAL_RCC_OscConfig+0xe8>
 8026a3a:	e000      	b.n	8026a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8026a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	681b      	ldr	r3, [r3, #0]
 8026a42:	f003 0302 	and.w	r3, r3, #2
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	d063      	beq.n	8026b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026a4a:	4b4a      	ldr	r3, [pc, #296]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a4c:	689b      	ldr	r3, [r3, #8]
 8026a4e:	f003 030c 	and.w	r3, r3, #12
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	d00b      	beq.n	8026a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026a56:	4b47      	ldr	r3, [pc, #284]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a58:	689b      	ldr	r3, [r3, #8]
 8026a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8026a5e:	2b08      	cmp	r3, #8
 8026a60:	d11c      	bne.n	8026a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8026a62:	4b44      	ldr	r3, [pc, #272]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a64:	685b      	ldr	r3, [r3, #4]
 8026a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	d116      	bne.n	8026a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026a6e:	4b41      	ldr	r3, [pc, #260]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a70:	681b      	ldr	r3, [r3, #0]
 8026a72:	f003 0302 	and.w	r3, r3, #2
 8026a76:	2b00      	cmp	r3, #0
 8026a78:	d005      	beq.n	8026a86 <HAL_RCC_OscConfig+0x152>
 8026a7a:	687b      	ldr	r3, [r7, #4]
 8026a7c:	68db      	ldr	r3, [r3, #12]
 8026a7e:	2b01      	cmp	r3, #1
 8026a80:	d001      	beq.n	8026a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8026a82:	2301      	movs	r3, #1
 8026a84:	e1c7      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026a86:	4b3b      	ldr	r3, [pc, #236]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a88:	681b      	ldr	r3, [r3, #0]
 8026a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	691b      	ldr	r3, [r3, #16]
 8026a92:	00db      	lsls	r3, r3, #3
 8026a94:	4937      	ldr	r1, [pc, #220]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026a96:	4313      	orrs	r3, r2
 8026a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026a9a:	e03a      	b.n	8026b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026a9c:	687b      	ldr	r3, [r7, #4]
 8026a9e:	68db      	ldr	r3, [r3, #12]
 8026aa0:	2b00      	cmp	r3, #0
 8026aa2:	d020      	beq.n	8026ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026aa4:	4b34      	ldr	r3, [pc, #208]	; (8026b78 <HAL_RCC_OscConfig+0x244>)
 8026aa6:	2201      	movs	r2, #1
 8026aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026aaa:	f7fc fb65 	bl	8023178 <HAL_GetTick>
 8026aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026ab0:	e008      	b.n	8026ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026ab2:	f7fc fb61 	bl	8023178 <HAL_GetTick>
 8026ab6:	4602      	mov	r2, r0
 8026ab8:	693b      	ldr	r3, [r7, #16]
 8026aba:	1ad3      	subs	r3, r2, r3
 8026abc:	2b02      	cmp	r3, #2
 8026abe:	d901      	bls.n	8026ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026ac0:	2303      	movs	r3, #3
 8026ac2:	e1a8      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026ac4:	4b2b      	ldr	r3, [pc, #172]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026ac6:	681b      	ldr	r3, [r3, #0]
 8026ac8:	f003 0302 	and.w	r3, r3, #2
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	d0f0      	beq.n	8026ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026ad0:	4b28      	ldr	r3, [pc, #160]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026ad8:	687b      	ldr	r3, [r7, #4]
 8026ada:	691b      	ldr	r3, [r3, #16]
 8026adc:	00db      	lsls	r3, r3, #3
 8026ade:	4925      	ldr	r1, [pc, #148]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026ae0:	4313      	orrs	r3, r2
 8026ae2:	600b      	str	r3, [r1, #0]
 8026ae4:	e015      	b.n	8026b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026ae6:	4b24      	ldr	r3, [pc, #144]	; (8026b78 <HAL_RCC_OscConfig+0x244>)
 8026ae8:	2200      	movs	r2, #0
 8026aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026aec:	f7fc fb44 	bl	8023178 <HAL_GetTick>
 8026af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026af2:	e008      	b.n	8026b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026af4:	f7fc fb40 	bl	8023178 <HAL_GetTick>
 8026af8:	4602      	mov	r2, r0
 8026afa:	693b      	ldr	r3, [r7, #16]
 8026afc:	1ad3      	subs	r3, r2, r3
 8026afe:	2b02      	cmp	r3, #2
 8026b00:	d901      	bls.n	8026b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026b02:	2303      	movs	r3, #3
 8026b04:	e187      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026b06:	4b1b      	ldr	r3, [pc, #108]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026b08:	681b      	ldr	r3, [r3, #0]
 8026b0a:	f003 0302 	and.w	r3, r3, #2
 8026b0e:	2b00      	cmp	r3, #0
 8026b10:	d1f0      	bne.n	8026af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	f003 0308 	and.w	r3, r3, #8
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d036      	beq.n	8026b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	695b      	ldr	r3, [r3, #20]
 8026b22:	2b00      	cmp	r3, #0
 8026b24:	d016      	beq.n	8026b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026b26:	4b15      	ldr	r3, [pc, #84]	; (8026b7c <HAL_RCC_OscConfig+0x248>)
 8026b28:	2201      	movs	r2, #1
 8026b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026b2c:	f7fc fb24 	bl	8023178 <HAL_GetTick>
 8026b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026b32:	e008      	b.n	8026b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026b34:	f7fc fb20 	bl	8023178 <HAL_GetTick>
 8026b38:	4602      	mov	r2, r0
 8026b3a:	693b      	ldr	r3, [r7, #16]
 8026b3c:	1ad3      	subs	r3, r2, r3
 8026b3e:	2b02      	cmp	r3, #2
 8026b40:	d901      	bls.n	8026b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026b42:	2303      	movs	r3, #3
 8026b44:	e167      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026b46:	4b0b      	ldr	r3, [pc, #44]	; (8026b74 <HAL_RCC_OscConfig+0x240>)
 8026b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b4a:	f003 0302 	and.w	r3, r3, #2
 8026b4e:	2b00      	cmp	r3, #0
 8026b50:	d0f0      	beq.n	8026b34 <HAL_RCC_OscConfig+0x200>
 8026b52:	e01b      	b.n	8026b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026b54:	4b09      	ldr	r3, [pc, #36]	; (8026b7c <HAL_RCC_OscConfig+0x248>)
 8026b56:	2200      	movs	r2, #0
 8026b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026b5a:	f7fc fb0d 	bl	8023178 <HAL_GetTick>
 8026b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026b60:	e00e      	b.n	8026b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026b62:	f7fc fb09 	bl	8023178 <HAL_GetTick>
 8026b66:	4602      	mov	r2, r0
 8026b68:	693b      	ldr	r3, [r7, #16]
 8026b6a:	1ad3      	subs	r3, r2, r3
 8026b6c:	2b02      	cmp	r3, #2
 8026b6e:	d907      	bls.n	8026b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026b70:	2303      	movs	r3, #3
 8026b72:	e150      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
 8026b74:	40023800 	.word	0x40023800
 8026b78:	42470000 	.word	0x42470000
 8026b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026b80:	4b88      	ldr	r3, [pc, #544]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026b84:	f003 0302 	and.w	r3, r3, #2
 8026b88:	2b00      	cmp	r3, #0
 8026b8a:	d1ea      	bne.n	8026b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	f003 0304 	and.w	r3, r3, #4
 8026b94:	2b00      	cmp	r3, #0
 8026b96:	f000 8097 	beq.w	8026cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026b9a:	2300      	movs	r3, #0
 8026b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026b9e:	4b81      	ldr	r3, [pc, #516]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026ba6:	2b00      	cmp	r3, #0
 8026ba8:	d10f      	bne.n	8026bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026baa:	2300      	movs	r3, #0
 8026bac:	60bb      	str	r3, [r7, #8]
 8026bae:	4b7d      	ldr	r3, [pc, #500]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bb2:	4a7c      	ldr	r2, [pc, #496]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8026bba:	4b7a      	ldr	r3, [pc, #488]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026bc2:	60bb      	str	r3, [r7, #8]
 8026bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026bc6:	2301      	movs	r3, #1
 8026bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026bca:	4b77      	ldr	r3, [pc, #476]	; (8026da8 <HAL_RCC_OscConfig+0x474>)
 8026bcc:	681b      	ldr	r3, [r3, #0]
 8026bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026bd2:	2b00      	cmp	r3, #0
 8026bd4:	d118      	bne.n	8026c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026bd6:	4b74      	ldr	r3, [pc, #464]	; (8026da8 <HAL_RCC_OscConfig+0x474>)
 8026bd8:	681b      	ldr	r3, [r3, #0]
 8026bda:	4a73      	ldr	r2, [pc, #460]	; (8026da8 <HAL_RCC_OscConfig+0x474>)
 8026bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026be2:	f7fc fac9 	bl	8023178 <HAL_GetTick>
 8026be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026be8:	e008      	b.n	8026bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026bea:	f7fc fac5 	bl	8023178 <HAL_GetTick>
 8026bee:	4602      	mov	r2, r0
 8026bf0:	693b      	ldr	r3, [r7, #16]
 8026bf2:	1ad3      	subs	r3, r2, r3
 8026bf4:	2b02      	cmp	r3, #2
 8026bf6:	d901      	bls.n	8026bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026bf8:	2303      	movs	r3, #3
 8026bfa:	e10c      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026bfc:	4b6a      	ldr	r3, [pc, #424]	; (8026da8 <HAL_RCC_OscConfig+0x474>)
 8026bfe:	681b      	ldr	r3, [r3, #0]
 8026c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026c04:	2b00      	cmp	r3, #0
 8026c06:	d0f0      	beq.n	8026bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026c08:	687b      	ldr	r3, [r7, #4]
 8026c0a:	689b      	ldr	r3, [r3, #8]
 8026c0c:	2b01      	cmp	r3, #1
 8026c0e:	d106      	bne.n	8026c1e <HAL_RCC_OscConfig+0x2ea>
 8026c10:	4b64      	ldr	r3, [pc, #400]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c14:	4a63      	ldr	r2, [pc, #396]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c16:	f043 0301 	orr.w	r3, r3, #1
 8026c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8026c1c:	e01c      	b.n	8026c58 <HAL_RCC_OscConfig+0x324>
 8026c1e:	687b      	ldr	r3, [r7, #4]
 8026c20:	689b      	ldr	r3, [r3, #8]
 8026c22:	2b05      	cmp	r3, #5
 8026c24:	d10c      	bne.n	8026c40 <HAL_RCC_OscConfig+0x30c>
 8026c26:	4b5f      	ldr	r3, [pc, #380]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c2a:	4a5e      	ldr	r2, [pc, #376]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c2c:	f043 0304 	orr.w	r3, r3, #4
 8026c30:	6713      	str	r3, [r2, #112]	; 0x70
 8026c32:	4b5c      	ldr	r3, [pc, #368]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c36:	4a5b      	ldr	r2, [pc, #364]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c38:	f043 0301 	orr.w	r3, r3, #1
 8026c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8026c3e:	e00b      	b.n	8026c58 <HAL_RCC_OscConfig+0x324>
 8026c40:	4b58      	ldr	r3, [pc, #352]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c44:	4a57      	ldr	r2, [pc, #348]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c46:	f023 0301 	bic.w	r3, r3, #1
 8026c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8026c4c:	4b55      	ldr	r3, [pc, #340]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c50:	4a54      	ldr	r2, [pc, #336]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c52:	f023 0304 	bic.w	r3, r3, #4
 8026c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	689b      	ldr	r3, [r3, #8]
 8026c5c:	2b00      	cmp	r3, #0
 8026c5e:	d015      	beq.n	8026c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026c60:	f7fc fa8a 	bl	8023178 <HAL_GetTick>
 8026c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026c66:	e00a      	b.n	8026c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026c68:	f7fc fa86 	bl	8023178 <HAL_GetTick>
 8026c6c:	4602      	mov	r2, r0
 8026c6e:	693b      	ldr	r3, [r7, #16]
 8026c70:	1ad3      	subs	r3, r2, r3
 8026c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8026c76:	4293      	cmp	r3, r2
 8026c78:	d901      	bls.n	8026c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8026c7a:	2303      	movs	r3, #3
 8026c7c:	e0cb      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026c7e:	4b49      	ldr	r3, [pc, #292]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c82:	f003 0302 	and.w	r3, r3, #2
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	d0ee      	beq.n	8026c68 <HAL_RCC_OscConfig+0x334>
 8026c8a:	e014      	b.n	8026cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026c8c:	f7fc fa74 	bl	8023178 <HAL_GetTick>
 8026c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026c92:	e00a      	b.n	8026caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026c94:	f7fc fa70 	bl	8023178 <HAL_GetTick>
 8026c98:	4602      	mov	r2, r0
 8026c9a:	693b      	ldr	r3, [r7, #16]
 8026c9c:	1ad3      	subs	r3, r2, r3
 8026c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026ca2:	4293      	cmp	r3, r2
 8026ca4:	d901      	bls.n	8026caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026ca6:	2303      	movs	r3, #3
 8026ca8:	e0b5      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026caa:	4b3e      	ldr	r3, [pc, #248]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026cae:	f003 0302 	and.w	r3, r3, #2
 8026cb2:	2b00      	cmp	r3, #0
 8026cb4:	d1ee      	bne.n	8026c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026cb6:	7dfb      	ldrb	r3, [r7, #23]
 8026cb8:	2b01      	cmp	r3, #1
 8026cba:	d105      	bne.n	8026cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026cbc:	4b39      	ldr	r3, [pc, #228]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026cc0:	4a38      	ldr	r2, [pc, #224]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	699b      	ldr	r3, [r3, #24]
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	f000 80a1 	beq.w	8026e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026cd2:	4b34      	ldr	r3, [pc, #208]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026cd4:	689b      	ldr	r3, [r3, #8]
 8026cd6:	f003 030c 	and.w	r3, r3, #12
 8026cda:	2b08      	cmp	r3, #8
 8026cdc:	d05c      	beq.n	8026d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	699b      	ldr	r3, [r3, #24]
 8026ce2:	2b02      	cmp	r3, #2
 8026ce4:	d141      	bne.n	8026d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026ce6:	4b31      	ldr	r3, [pc, #196]	; (8026dac <HAL_RCC_OscConfig+0x478>)
 8026ce8:	2200      	movs	r2, #0
 8026cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026cec:	f7fc fa44 	bl	8023178 <HAL_GetTick>
 8026cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026cf2:	e008      	b.n	8026d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026cf4:	f7fc fa40 	bl	8023178 <HAL_GetTick>
 8026cf8:	4602      	mov	r2, r0
 8026cfa:	693b      	ldr	r3, [r7, #16]
 8026cfc:	1ad3      	subs	r3, r2, r3
 8026cfe:	2b02      	cmp	r3, #2
 8026d00:	d901      	bls.n	8026d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026d02:	2303      	movs	r3, #3
 8026d04:	e087      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026d06:	4b27      	ldr	r3, [pc, #156]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d0e:	2b00      	cmp	r3, #0
 8026d10:	d1f0      	bne.n	8026cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8026d12:	687b      	ldr	r3, [r7, #4]
 8026d14:	69da      	ldr	r2, [r3, #28]
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	6a1b      	ldr	r3, [r3, #32]
 8026d1a:	431a      	orrs	r2, r3
 8026d1c:	687b      	ldr	r3, [r7, #4]
 8026d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d20:	019b      	lsls	r3, r3, #6
 8026d22:	431a      	orrs	r2, r3
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d28:	085b      	lsrs	r3, r3, #1
 8026d2a:	3b01      	subs	r3, #1
 8026d2c:	041b      	lsls	r3, r3, #16
 8026d2e:	431a      	orrs	r2, r3
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d34:	061b      	lsls	r3, r3, #24
 8026d36:	491b      	ldr	r1, [pc, #108]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026d38:	4313      	orrs	r3, r2
 8026d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026d3c:	4b1b      	ldr	r3, [pc, #108]	; (8026dac <HAL_RCC_OscConfig+0x478>)
 8026d3e:	2201      	movs	r2, #1
 8026d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d42:	f7fc fa19 	bl	8023178 <HAL_GetTick>
 8026d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026d48:	e008      	b.n	8026d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026d4a:	f7fc fa15 	bl	8023178 <HAL_GetTick>
 8026d4e:	4602      	mov	r2, r0
 8026d50:	693b      	ldr	r3, [r7, #16]
 8026d52:	1ad3      	subs	r3, r2, r3
 8026d54:	2b02      	cmp	r3, #2
 8026d56:	d901      	bls.n	8026d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8026d58:	2303      	movs	r3, #3
 8026d5a:	e05c      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026d5c:	4b11      	ldr	r3, [pc, #68]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026d5e:	681b      	ldr	r3, [r3, #0]
 8026d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d64:	2b00      	cmp	r3, #0
 8026d66:	d0f0      	beq.n	8026d4a <HAL_RCC_OscConfig+0x416>
 8026d68:	e054      	b.n	8026e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026d6a:	4b10      	ldr	r3, [pc, #64]	; (8026dac <HAL_RCC_OscConfig+0x478>)
 8026d6c:	2200      	movs	r2, #0
 8026d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026d70:	f7fc fa02 	bl	8023178 <HAL_GetTick>
 8026d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026d76:	e008      	b.n	8026d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026d78:	f7fc f9fe 	bl	8023178 <HAL_GetTick>
 8026d7c:	4602      	mov	r2, r0
 8026d7e:	693b      	ldr	r3, [r7, #16]
 8026d80:	1ad3      	subs	r3, r2, r3
 8026d82:	2b02      	cmp	r3, #2
 8026d84:	d901      	bls.n	8026d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8026d86:	2303      	movs	r3, #3
 8026d88:	e045      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026d8a:	4b06      	ldr	r3, [pc, #24]	; (8026da4 <HAL_RCC_OscConfig+0x470>)
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	d1f0      	bne.n	8026d78 <HAL_RCC_OscConfig+0x444>
 8026d96:	e03d      	b.n	8026e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	699b      	ldr	r3, [r3, #24]
 8026d9c:	2b01      	cmp	r3, #1
 8026d9e:	d107      	bne.n	8026db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8026da0:	2301      	movs	r3, #1
 8026da2:	e038      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
 8026da4:	40023800 	.word	0x40023800
 8026da8:	40007000 	.word	0x40007000
 8026dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8026db0:	4b1b      	ldr	r3, [pc, #108]	; (8026e20 <HAL_RCC_OscConfig+0x4ec>)
 8026db2:	685b      	ldr	r3, [r3, #4]
 8026db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	699b      	ldr	r3, [r3, #24]
 8026dba:	2b01      	cmp	r3, #1
 8026dbc:	d028      	beq.n	8026e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026dbe:	68fb      	ldr	r3, [r7, #12]
 8026dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026dc8:	429a      	cmp	r2, r3
 8026dca:	d121      	bne.n	8026e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026dcc:	68fb      	ldr	r3, [r7, #12]
 8026dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8026dd2:	687b      	ldr	r3, [r7, #4]
 8026dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026dd6:	429a      	cmp	r2, r3
 8026dd8:	d11a      	bne.n	8026e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026dda:	68fa      	ldr	r2, [r7, #12]
 8026ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8026de0:	4013      	ands	r3, r2
 8026de2:	687a      	ldr	r2, [r7, #4]
 8026de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026de8:	4293      	cmp	r3, r2
 8026dea:	d111      	bne.n	8026e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026dec:	68fb      	ldr	r3, [r7, #12]
 8026dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8026df2:	687b      	ldr	r3, [r7, #4]
 8026df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026df6:	085b      	lsrs	r3, r3, #1
 8026df8:	3b01      	subs	r3, #1
 8026dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026dfc:	429a      	cmp	r2, r3
 8026dfe:	d107      	bne.n	8026e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8026e00:	68fb      	ldr	r3, [r7, #12]
 8026e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8026e06:	687b      	ldr	r3, [r7, #4]
 8026e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026e0c:	429a      	cmp	r2, r3
 8026e0e:	d001      	beq.n	8026e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8026e10:	2301      	movs	r3, #1
 8026e12:	e000      	b.n	8026e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8026e14:	2300      	movs	r3, #0
}
 8026e16:	4618      	mov	r0, r3
 8026e18:	3718      	adds	r7, #24
 8026e1a:	46bd      	mov	sp, r7
 8026e1c:	bd80      	pop	{r7, pc}
 8026e1e:	bf00      	nop
 8026e20:	40023800 	.word	0x40023800

08026e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026e24:	b580      	push	{r7, lr}
 8026e26:	b084      	sub	sp, #16
 8026e28:	af00      	add	r7, sp, #0
 8026e2a:	6078      	str	r0, [r7, #4]
 8026e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8026e2e:	687b      	ldr	r3, [r7, #4]
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	d101      	bne.n	8026e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8026e34:	2301      	movs	r3, #1
 8026e36:	e0cc      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8026e38:	4b68      	ldr	r3, [pc, #416]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026e3a:	681b      	ldr	r3, [r3, #0]
 8026e3c:	f003 030f 	and.w	r3, r3, #15
 8026e40:	683a      	ldr	r2, [r7, #0]
 8026e42:	429a      	cmp	r2, r3
 8026e44:	d90c      	bls.n	8026e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026e46:	4b65      	ldr	r3, [pc, #404]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026e48:	683a      	ldr	r2, [r7, #0]
 8026e4a:	b2d2      	uxtb	r2, r2
 8026e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026e4e:	4b63      	ldr	r3, [pc, #396]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026e50:	681b      	ldr	r3, [r3, #0]
 8026e52:	f003 030f 	and.w	r3, r3, #15
 8026e56:	683a      	ldr	r2, [r7, #0]
 8026e58:	429a      	cmp	r2, r3
 8026e5a:	d001      	beq.n	8026e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8026e5c:	2301      	movs	r3, #1
 8026e5e:	e0b8      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026e60:	687b      	ldr	r3, [r7, #4]
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	f003 0302 	and.w	r3, r3, #2
 8026e68:	2b00      	cmp	r3, #0
 8026e6a:	d020      	beq.n	8026eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026e6c:	687b      	ldr	r3, [r7, #4]
 8026e6e:	681b      	ldr	r3, [r3, #0]
 8026e70:	f003 0304 	and.w	r3, r3, #4
 8026e74:	2b00      	cmp	r3, #0
 8026e76:	d005      	beq.n	8026e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026e78:	4b59      	ldr	r3, [pc, #356]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026e7a:	689b      	ldr	r3, [r3, #8]
 8026e7c:	4a58      	ldr	r2, [pc, #352]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8026e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	681b      	ldr	r3, [r3, #0]
 8026e88:	f003 0308 	and.w	r3, r3, #8
 8026e8c:	2b00      	cmp	r3, #0
 8026e8e:	d005      	beq.n	8026e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026e90:	4b53      	ldr	r3, [pc, #332]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026e92:	689b      	ldr	r3, [r3, #8]
 8026e94:	4a52      	ldr	r2, [pc, #328]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8026e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026e9c:	4b50      	ldr	r3, [pc, #320]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026e9e:	689b      	ldr	r3, [r3, #8]
 8026ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	689b      	ldr	r3, [r3, #8]
 8026ea8:	494d      	ldr	r1, [pc, #308]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026eaa:	4313      	orrs	r3, r2
 8026eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026eae:	687b      	ldr	r3, [r7, #4]
 8026eb0:	681b      	ldr	r3, [r3, #0]
 8026eb2:	f003 0301 	and.w	r3, r3, #1
 8026eb6:	2b00      	cmp	r3, #0
 8026eb8:	d044      	beq.n	8026f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	685b      	ldr	r3, [r3, #4]
 8026ebe:	2b01      	cmp	r3, #1
 8026ec0:	d107      	bne.n	8026ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026ec2:	4b47      	ldr	r3, [pc, #284]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026ec4:	681b      	ldr	r3, [r3, #0]
 8026ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026eca:	2b00      	cmp	r3, #0
 8026ecc:	d119      	bne.n	8026f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026ece:	2301      	movs	r3, #1
 8026ed0:	e07f      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026ed2:	687b      	ldr	r3, [r7, #4]
 8026ed4:	685b      	ldr	r3, [r3, #4]
 8026ed6:	2b02      	cmp	r3, #2
 8026ed8:	d003      	beq.n	8026ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8026eda:	687b      	ldr	r3, [r7, #4]
 8026edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026ede:	2b03      	cmp	r3, #3
 8026ee0:	d107      	bne.n	8026ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026ee2:	4b3f      	ldr	r3, [pc, #252]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026ee4:	681b      	ldr	r3, [r3, #0]
 8026ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026eea:	2b00      	cmp	r3, #0
 8026eec:	d109      	bne.n	8026f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026eee:	2301      	movs	r3, #1
 8026ef0:	e06f      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026ef2:	4b3b      	ldr	r3, [pc, #236]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	f003 0302 	and.w	r3, r3, #2
 8026efa:	2b00      	cmp	r3, #0
 8026efc:	d101      	bne.n	8026f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026efe:	2301      	movs	r3, #1
 8026f00:	e067      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8026f02:	4b37      	ldr	r3, [pc, #220]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f04:	689b      	ldr	r3, [r3, #8]
 8026f06:	f023 0203 	bic.w	r2, r3, #3
 8026f0a:	687b      	ldr	r3, [r7, #4]
 8026f0c:	685b      	ldr	r3, [r3, #4]
 8026f0e:	4934      	ldr	r1, [pc, #208]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f10:	4313      	orrs	r3, r2
 8026f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8026f14:	f7fc f930 	bl	8023178 <HAL_GetTick>
 8026f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026f1a:	e00a      	b.n	8026f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026f1c:	f7fc f92c 	bl	8023178 <HAL_GetTick>
 8026f20:	4602      	mov	r2, r0
 8026f22:	68fb      	ldr	r3, [r7, #12]
 8026f24:	1ad3      	subs	r3, r2, r3
 8026f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8026f2a:	4293      	cmp	r3, r2
 8026f2c:	d901      	bls.n	8026f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8026f2e:	2303      	movs	r3, #3
 8026f30:	e04f      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026f32:	4b2b      	ldr	r3, [pc, #172]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f34:	689b      	ldr	r3, [r3, #8]
 8026f36:	f003 020c 	and.w	r2, r3, #12
 8026f3a:	687b      	ldr	r3, [r7, #4]
 8026f3c:	685b      	ldr	r3, [r3, #4]
 8026f3e:	009b      	lsls	r3, r3, #2
 8026f40:	429a      	cmp	r2, r3
 8026f42:	d1eb      	bne.n	8026f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8026f44:	4b25      	ldr	r3, [pc, #148]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026f46:	681b      	ldr	r3, [r3, #0]
 8026f48:	f003 030f 	and.w	r3, r3, #15
 8026f4c:	683a      	ldr	r2, [r7, #0]
 8026f4e:	429a      	cmp	r2, r3
 8026f50:	d20c      	bcs.n	8026f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026f52:	4b22      	ldr	r3, [pc, #136]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026f54:	683a      	ldr	r2, [r7, #0]
 8026f56:	b2d2      	uxtb	r2, r2
 8026f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026f5a:	4b20      	ldr	r3, [pc, #128]	; (8026fdc <HAL_RCC_ClockConfig+0x1b8>)
 8026f5c:	681b      	ldr	r3, [r3, #0]
 8026f5e:	f003 030f 	and.w	r3, r3, #15
 8026f62:	683a      	ldr	r2, [r7, #0]
 8026f64:	429a      	cmp	r2, r3
 8026f66:	d001      	beq.n	8026f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8026f68:	2301      	movs	r3, #1
 8026f6a:	e032      	b.n	8026fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	681b      	ldr	r3, [r3, #0]
 8026f70:	f003 0304 	and.w	r3, r3, #4
 8026f74:	2b00      	cmp	r3, #0
 8026f76:	d008      	beq.n	8026f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026f78:	4b19      	ldr	r3, [pc, #100]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f7a:	689b      	ldr	r3, [r3, #8]
 8026f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	68db      	ldr	r3, [r3, #12]
 8026f84:	4916      	ldr	r1, [pc, #88]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f86:	4313      	orrs	r3, r2
 8026f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	f003 0308 	and.w	r3, r3, #8
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	d009      	beq.n	8026faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8026f96:	4b12      	ldr	r3, [pc, #72]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026f98:	689b      	ldr	r3, [r3, #8]
 8026f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026f9e:	687b      	ldr	r3, [r7, #4]
 8026fa0:	691b      	ldr	r3, [r3, #16]
 8026fa2:	00db      	lsls	r3, r3, #3
 8026fa4:	490e      	ldr	r1, [pc, #56]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026fa6:	4313      	orrs	r3, r2
 8026fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8026faa:	f000 f821 	bl	8026ff0 <HAL_RCC_GetSysClockFreq>
 8026fae:	4602      	mov	r2, r0
 8026fb0:	4b0b      	ldr	r3, [pc, #44]	; (8026fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8026fb2:	689b      	ldr	r3, [r3, #8]
 8026fb4:	091b      	lsrs	r3, r3, #4
 8026fb6:	f003 030f 	and.w	r3, r3, #15
 8026fba:	490a      	ldr	r1, [pc, #40]	; (8026fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8026fbc:	5ccb      	ldrb	r3, [r1, r3]
 8026fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8026fc2:	4a09      	ldr	r2, [pc, #36]	; (8026fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8026fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8026fc6:	4b09      	ldr	r3, [pc, #36]	; (8026fec <HAL_RCC_ClockConfig+0x1c8>)
 8026fc8:	681b      	ldr	r3, [r3, #0]
 8026fca:	4618      	mov	r0, r3
 8026fcc:	f7fa fcf0 	bl	80219b0 <HAL_InitTick>

  return HAL_OK;
 8026fd0:	2300      	movs	r3, #0
}
 8026fd2:	4618      	mov	r0, r3
 8026fd4:	3710      	adds	r7, #16
 8026fd6:	46bd      	mov	sp, r7
 8026fd8:	bd80      	pop	{r7, pc}
 8026fda:	bf00      	nop
 8026fdc:	40023c00 	.word	0x40023c00
 8026fe0:	40023800 	.word	0x40023800
 8026fe4:	0802ee40 	.word	0x0802ee40
 8026fe8:	20000000 	.word	0x20000000
 8026fec:	20000054 	.word	0x20000054

08026ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026ff4:	b094      	sub	sp, #80	; 0x50
 8026ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8026ff8:	2300      	movs	r3, #0
 8026ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8026ffc:	2300      	movs	r3, #0
 8026ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027000:	2300      	movs	r3, #0
 8027002:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8027004:	2300      	movs	r3, #0
 8027006:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027008:	4b79      	ldr	r3, [pc, #484]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 802700a:	689b      	ldr	r3, [r3, #8]
 802700c:	f003 030c 	and.w	r3, r3, #12
 8027010:	2b08      	cmp	r3, #8
 8027012:	d00d      	beq.n	8027030 <HAL_RCC_GetSysClockFreq+0x40>
 8027014:	2b08      	cmp	r3, #8
 8027016:	f200 80e1 	bhi.w	80271dc <HAL_RCC_GetSysClockFreq+0x1ec>
 802701a:	2b00      	cmp	r3, #0
 802701c:	d002      	beq.n	8027024 <HAL_RCC_GetSysClockFreq+0x34>
 802701e:	2b04      	cmp	r3, #4
 8027020:	d003      	beq.n	802702a <HAL_RCC_GetSysClockFreq+0x3a>
 8027022:	e0db      	b.n	80271dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027024:	4b73      	ldr	r3, [pc, #460]	; (80271f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8027026:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027028:	e0db      	b.n	80271e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802702a:	4b73      	ldr	r3, [pc, #460]	; (80271f8 <HAL_RCC_GetSysClockFreq+0x208>)
 802702c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802702e:	e0d8      	b.n	80271e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027030:	4b6f      	ldr	r3, [pc, #444]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8027032:	685b      	ldr	r3, [r3, #4]
 8027034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027038:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802703a:	4b6d      	ldr	r3, [pc, #436]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 802703c:	685b      	ldr	r3, [r3, #4]
 802703e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027042:	2b00      	cmp	r3, #0
 8027044:	d063      	beq.n	802710e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027046:	4b6a      	ldr	r3, [pc, #424]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8027048:	685b      	ldr	r3, [r3, #4]
 802704a:	099b      	lsrs	r3, r3, #6
 802704c:	2200      	movs	r2, #0
 802704e:	63bb      	str	r3, [r7, #56]	; 0x38
 8027050:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027058:	633b      	str	r3, [r7, #48]	; 0x30
 802705a:	2300      	movs	r3, #0
 802705c:	637b      	str	r3, [r7, #52]	; 0x34
 802705e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027062:	4622      	mov	r2, r4
 8027064:	462b      	mov	r3, r5
 8027066:	f04f 0000 	mov.w	r0, #0
 802706a:	f04f 0100 	mov.w	r1, #0
 802706e:	0159      	lsls	r1, r3, #5
 8027070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027074:	0150      	lsls	r0, r2, #5
 8027076:	4602      	mov	r2, r0
 8027078:	460b      	mov	r3, r1
 802707a:	4621      	mov	r1, r4
 802707c:	1a51      	subs	r1, r2, r1
 802707e:	6139      	str	r1, [r7, #16]
 8027080:	4629      	mov	r1, r5
 8027082:	eb63 0301 	sbc.w	r3, r3, r1
 8027086:	617b      	str	r3, [r7, #20]
 8027088:	f04f 0200 	mov.w	r2, #0
 802708c:	f04f 0300 	mov.w	r3, #0
 8027090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027094:	4659      	mov	r1, fp
 8027096:	018b      	lsls	r3, r1, #6
 8027098:	4651      	mov	r1, sl
 802709a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802709e:	4651      	mov	r1, sl
 80270a0:	018a      	lsls	r2, r1, #6
 80270a2:	4651      	mov	r1, sl
 80270a4:	ebb2 0801 	subs.w	r8, r2, r1
 80270a8:	4659      	mov	r1, fp
 80270aa:	eb63 0901 	sbc.w	r9, r3, r1
 80270ae:	f04f 0200 	mov.w	r2, #0
 80270b2:	f04f 0300 	mov.w	r3, #0
 80270b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80270ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80270be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80270c2:	4690      	mov	r8, r2
 80270c4:	4699      	mov	r9, r3
 80270c6:	4623      	mov	r3, r4
 80270c8:	eb18 0303 	adds.w	r3, r8, r3
 80270cc:	60bb      	str	r3, [r7, #8]
 80270ce:	462b      	mov	r3, r5
 80270d0:	eb49 0303 	adc.w	r3, r9, r3
 80270d4:	60fb      	str	r3, [r7, #12]
 80270d6:	f04f 0200 	mov.w	r2, #0
 80270da:	f04f 0300 	mov.w	r3, #0
 80270de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80270e2:	4629      	mov	r1, r5
 80270e4:	024b      	lsls	r3, r1, #9
 80270e6:	4621      	mov	r1, r4
 80270e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80270ec:	4621      	mov	r1, r4
 80270ee:	024a      	lsls	r2, r1, #9
 80270f0:	4610      	mov	r0, r2
 80270f2:	4619      	mov	r1, r3
 80270f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80270f6:	2200      	movs	r2, #0
 80270f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80270fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80270fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027100:	f7f9 f8c6 	bl	8020290 <__aeabi_uldivmod>
 8027104:	4602      	mov	r2, r0
 8027106:	460b      	mov	r3, r1
 8027108:	4613      	mov	r3, r2
 802710a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802710c:	e058      	b.n	80271c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802710e:	4b38      	ldr	r3, [pc, #224]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8027110:	685b      	ldr	r3, [r3, #4]
 8027112:	099b      	lsrs	r3, r3, #6
 8027114:	2200      	movs	r2, #0
 8027116:	4618      	mov	r0, r3
 8027118:	4611      	mov	r1, r2
 802711a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802711e:	623b      	str	r3, [r7, #32]
 8027120:	2300      	movs	r3, #0
 8027122:	627b      	str	r3, [r7, #36]	; 0x24
 8027124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027128:	4642      	mov	r2, r8
 802712a:	464b      	mov	r3, r9
 802712c:	f04f 0000 	mov.w	r0, #0
 8027130:	f04f 0100 	mov.w	r1, #0
 8027134:	0159      	lsls	r1, r3, #5
 8027136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802713a:	0150      	lsls	r0, r2, #5
 802713c:	4602      	mov	r2, r0
 802713e:	460b      	mov	r3, r1
 8027140:	4641      	mov	r1, r8
 8027142:	ebb2 0a01 	subs.w	sl, r2, r1
 8027146:	4649      	mov	r1, r9
 8027148:	eb63 0b01 	sbc.w	fp, r3, r1
 802714c:	f04f 0200 	mov.w	r2, #0
 8027150:	f04f 0300 	mov.w	r3, #0
 8027154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 802715c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027160:	ebb2 040a 	subs.w	r4, r2, sl
 8027164:	eb63 050b 	sbc.w	r5, r3, fp
 8027168:	f04f 0200 	mov.w	r2, #0
 802716c:	f04f 0300 	mov.w	r3, #0
 8027170:	00eb      	lsls	r3, r5, #3
 8027172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027176:	00e2      	lsls	r2, r4, #3
 8027178:	4614      	mov	r4, r2
 802717a:	461d      	mov	r5, r3
 802717c:	4643      	mov	r3, r8
 802717e:	18e3      	adds	r3, r4, r3
 8027180:	603b      	str	r3, [r7, #0]
 8027182:	464b      	mov	r3, r9
 8027184:	eb45 0303 	adc.w	r3, r5, r3
 8027188:	607b      	str	r3, [r7, #4]
 802718a:	f04f 0200 	mov.w	r2, #0
 802718e:	f04f 0300 	mov.w	r3, #0
 8027192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027196:	4629      	mov	r1, r5
 8027198:	028b      	lsls	r3, r1, #10
 802719a:	4621      	mov	r1, r4
 802719c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80271a0:	4621      	mov	r1, r4
 80271a2:	028a      	lsls	r2, r1, #10
 80271a4:	4610      	mov	r0, r2
 80271a6:	4619      	mov	r1, r3
 80271a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80271aa:	2200      	movs	r2, #0
 80271ac:	61bb      	str	r3, [r7, #24]
 80271ae:	61fa      	str	r2, [r7, #28]
 80271b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80271b4:	f7f9 f86c 	bl	8020290 <__aeabi_uldivmod>
 80271b8:	4602      	mov	r2, r0
 80271ba:	460b      	mov	r3, r1
 80271bc:	4613      	mov	r3, r2
 80271be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80271c0:	4b0b      	ldr	r3, [pc, #44]	; (80271f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80271c2:	685b      	ldr	r3, [r3, #4]
 80271c4:	0c1b      	lsrs	r3, r3, #16
 80271c6:	f003 0303 	and.w	r3, r3, #3
 80271ca:	3301      	adds	r3, #1
 80271cc:	005b      	lsls	r3, r3, #1
 80271ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80271d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80271d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80271d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80271d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80271da:	e002      	b.n	80271e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80271dc:	4b05      	ldr	r3, [pc, #20]	; (80271f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80271de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80271e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80271e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80271e4:	4618      	mov	r0, r3
 80271e6:	3750      	adds	r7, #80	; 0x50
 80271e8:	46bd      	mov	sp, r7
 80271ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80271ee:	bf00      	nop
 80271f0:	40023800 	.word	0x40023800
 80271f4:	00f42400 	.word	0x00f42400
 80271f8:	007a1200 	.word	0x007a1200

080271fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80271fc:	b480      	push	{r7}
 80271fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027200:	4b03      	ldr	r3, [pc, #12]	; (8027210 <HAL_RCC_GetHCLKFreq+0x14>)
 8027202:	681b      	ldr	r3, [r3, #0]
}
 8027204:	4618      	mov	r0, r3
 8027206:	46bd      	mov	sp, r7
 8027208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802720c:	4770      	bx	lr
 802720e:	bf00      	nop
 8027210:	20000000 	.word	0x20000000

08027214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027214:	b580      	push	{r7, lr}
 8027216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027218:	f7ff fff0 	bl	80271fc <HAL_RCC_GetHCLKFreq>
 802721c:	4602      	mov	r2, r0
 802721e:	4b05      	ldr	r3, [pc, #20]	; (8027234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027220:	689b      	ldr	r3, [r3, #8]
 8027222:	0a9b      	lsrs	r3, r3, #10
 8027224:	f003 0307 	and.w	r3, r3, #7
 8027228:	4903      	ldr	r1, [pc, #12]	; (8027238 <HAL_RCC_GetPCLK1Freq+0x24>)
 802722a:	5ccb      	ldrb	r3, [r1, r3]
 802722c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027230:	4618      	mov	r0, r3
 8027232:	bd80      	pop	{r7, pc}
 8027234:	40023800 	.word	0x40023800
 8027238:	0802ee50 	.word	0x0802ee50

0802723c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802723c:	b580      	push	{r7, lr}
 802723e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027240:	f7ff ffdc 	bl	80271fc <HAL_RCC_GetHCLKFreq>
 8027244:	4602      	mov	r2, r0
 8027246:	4b05      	ldr	r3, [pc, #20]	; (802725c <HAL_RCC_GetPCLK2Freq+0x20>)
 8027248:	689b      	ldr	r3, [r3, #8]
 802724a:	0b5b      	lsrs	r3, r3, #13
 802724c:	f003 0307 	and.w	r3, r3, #7
 8027250:	4903      	ldr	r1, [pc, #12]	; (8027260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8027252:	5ccb      	ldrb	r3, [r1, r3]
 8027254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027258:	4618      	mov	r0, r3
 802725a:	bd80      	pop	{r7, pc}
 802725c:	40023800 	.word	0x40023800
 8027260:	0802ee50 	.word	0x0802ee50

08027264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027264:	b480      	push	{r7}
 8027266:	b083      	sub	sp, #12
 8027268:	af00      	add	r7, sp, #0
 802726a:	6078      	str	r0, [r7, #4]
 802726c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 802726e:	687b      	ldr	r3, [r7, #4]
 8027270:	220f      	movs	r2, #15
 8027272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027274:	4b12      	ldr	r3, [pc, #72]	; (80272c0 <HAL_RCC_GetClockConfig+0x5c>)
 8027276:	689b      	ldr	r3, [r3, #8]
 8027278:	f003 0203 	and.w	r2, r3, #3
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027280:	4b0f      	ldr	r3, [pc, #60]	; (80272c0 <HAL_RCC_GetClockConfig+0x5c>)
 8027282:	689b      	ldr	r3, [r3, #8]
 8027284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027288:	687b      	ldr	r3, [r7, #4]
 802728a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 802728c:	4b0c      	ldr	r3, [pc, #48]	; (80272c0 <HAL_RCC_GetClockConfig+0x5c>)
 802728e:	689b      	ldr	r3, [r3, #8]
 8027290:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027298:	4b09      	ldr	r3, [pc, #36]	; (80272c0 <HAL_RCC_GetClockConfig+0x5c>)
 802729a:	689b      	ldr	r3, [r3, #8]
 802729c:	08db      	lsrs	r3, r3, #3
 802729e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80272a6:	4b07      	ldr	r3, [pc, #28]	; (80272c4 <HAL_RCC_GetClockConfig+0x60>)
 80272a8:	681b      	ldr	r3, [r3, #0]
 80272aa:	f003 020f 	and.w	r2, r3, #15
 80272ae:	683b      	ldr	r3, [r7, #0]
 80272b0:	601a      	str	r2, [r3, #0]
}
 80272b2:	bf00      	nop
 80272b4:	370c      	adds	r7, #12
 80272b6:	46bd      	mov	sp, r7
 80272b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272bc:	4770      	bx	lr
 80272be:	bf00      	nop
 80272c0:	40023800 	.word	0x40023800
 80272c4:	40023c00 	.word	0x40023c00

080272c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80272c8:	b580      	push	{r7, lr}
 80272ca:	b086      	sub	sp, #24
 80272cc:	af00      	add	r7, sp, #0
 80272ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80272d0:	2300      	movs	r3, #0
 80272d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80272d4:	2300      	movs	r3, #0
 80272d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	681b      	ldr	r3, [r3, #0]
 80272dc:	f003 0301 	and.w	r3, r3, #1
 80272e0:	2b00      	cmp	r3, #0
 80272e2:	d10b      	bne.n	80272fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	681b      	ldr	r3, [r3, #0]
 80272e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80272ec:	2b00      	cmp	r3, #0
 80272ee:	d105      	bne.n	80272fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80272f8:	2b00      	cmp	r3, #0
 80272fa:	d075      	beq.n	80273e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80272fc:	4b91      	ldr	r3, [pc, #580]	; (8027544 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80272fe:	2200      	movs	r2, #0
 8027300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027302:	f7fb ff39 	bl	8023178 <HAL_GetTick>
 8027306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027308:	e008      	b.n	802731c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802730a:	f7fb ff35 	bl	8023178 <HAL_GetTick>
 802730e:	4602      	mov	r2, r0
 8027310:	697b      	ldr	r3, [r7, #20]
 8027312:	1ad3      	subs	r3, r2, r3
 8027314:	2b02      	cmp	r3, #2
 8027316:	d901      	bls.n	802731c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027318:	2303      	movs	r3, #3
 802731a:	e189      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802731c:	4b8a      	ldr	r3, [pc, #552]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802731e:	681b      	ldr	r3, [r3, #0]
 8027320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027324:	2b00      	cmp	r3, #0
 8027326:	d1f0      	bne.n	802730a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027328:	687b      	ldr	r3, [r7, #4]
 802732a:	681b      	ldr	r3, [r3, #0]
 802732c:	f003 0301 	and.w	r3, r3, #1
 8027330:	2b00      	cmp	r3, #0
 8027332:	d009      	beq.n	8027348 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027334:	687b      	ldr	r3, [r7, #4]
 8027336:	685b      	ldr	r3, [r3, #4]
 8027338:	019a      	lsls	r2, r3, #6
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	689b      	ldr	r3, [r3, #8]
 802733e:	071b      	lsls	r3, r3, #28
 8027340:	4981      	ldr	r1, [pc, #516]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027342:	4313      	orrs	r3, r2
 8027344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	681b      	ldr	r3, [r3, #0]
 802734c:	f003 0302 	and.w	r3, r3, #2
 8027350:	2b00      	cmp	r3, #0
 8027352:	d01f      	beq.n	8027394 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027354:	4b7c      	ldr	r3, [pc, #496]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802735a:	0f1b      	lsrs	r3, r3, #28
 802735c:	f003 0307 	and.w	r3, r3, #7
 8027360:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	685b      	ldr	r3, [r3, #4]
 8027366:	019a      	lsls	r2, r3, #6
 8027368:	687b      	ldr	r3, [r7, #4]
 802736a:	68db      	ldr	r3, [r3, #12]
 802736c:	061b      	lsls	r3, r3, #24
 802736e:	431a      	orrs	r2, r3
 8027370:	693b      	ldr	r3, [r7, #16]
 8027372:	071b      	lsls	r3, r3, #28
 8027374:	4974      	ldr	r1, [pc, #464]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027376:	4313      	orrs	r3, r2
 8027378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 802737c:	4b72      	ldr	r3, [pc, #456]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802737e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027382:	f023 021f 	bic.w	r2, r3, #31
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	69db      	ldr	r3, [r3, #28]
 802738a:	3b01      	subs	r3, #1
 802738c:	496e      	ldr	r1, [pc, #440]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802738e:	4313      	orrs	r3, r2
 8027390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	681b      	ldr	r3, [r3, #0]
 8027398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802739c:	2b00      	cmp	r3, #0
 802739e:	d00d      	beq.n	80273bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	685b      	ldr	r3, [r3, #4]
 80273a4:	019a      	lsls	r2, r3, #6
 80273a6:	687b      	ldr	r3, [r7, #4]
 80273a8:	68db      	ldr	r3, [r3, #12]
 80273aa:	061b      	lsls	r3, r3, #24
 80273ac:	431a      	orrs	r2, r3
 80273ae:	687b      	ldr	r3, [r7, #4]
 80273b0:	689b      	ldr	r3, [r3, #8]
 80273b2:	071b      	lsls	r3, r3, #28
 80273b4:	4964      	ldr	r1, [pc, #400]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273b6:	4313      	orrs	r3, r2
 80273b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80273bc:	4b61      	ldr	r3, [pc, #388]	; (8027544 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80273be:	2201      	movs	r2, #1
 80273c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80273c2:	f7fb fed9 	bl	8023178 <HAL_GetTick>
 80273c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80273c8:	e008      	b.n	80273dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80273ca:	f7fb fed5 	bl	8023178 <HAL_GetTick>
 80273ce:	4602      	mov	r2, r0
 80273d0:	697b      	ldr	r3, [r7, #20]
 80273d2:	1ad3      	subs	r3, r2, r3
 80273d4:	2b02      	cmp	r3, #2
 80273d6:	d901      	bls.n	80273dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80273d8:	2303      	movs	r3, #3
 80273da:	e129      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80273dc:	4b5a      	ldr	r3, [pc, #360]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273de:	681b      	ldr	r3, [r3, #0]
 80273e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80273e4:	2b00      	cmp	r3, #0
 80273e6:	d0f0      	beq.n	80273ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80273e8:	687b      	ldr	r3, [r7, #4]
 80273ea:	681b      	ldr	r3, [r3, #0]
 80273ec:	f003 0304 	and.w	r3, r3, #4
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d105      	bne.n	8027400 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	681b      	ldr	r3, [r3, #0]
 80273f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80273fc:	2b00      	cmp	r3, #0
 80273fe:	d079      	beq.n	80274f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027400:	4b52      	ldr	r3, [pc, #328]	; (802754c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027402:	2200      	movs	r2, #0
 8027404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027406:	f7fb feb7 	bl	8023178 <HAL_GetTick>
 802740a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802740c:	e008      	b.n	8027420 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802740e:	f7fb feb3 	bl	8023178 <HAL_GetTick>
 8027412:	4602      	mov	r2, r0
 8027414:	697b      	ldr	r3, [r7, #20]
 8027416:	1ad3      	subs	r3, r2, r3
 8027418:	2b02      	cmp	r3, #2
 802741a:	d901      	bls.n	8027420 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802741c:	2303      	movs	r3, #3
 802741e:	e107      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027420:	4b49      	ldr	r3, [pc, #292]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027422:	681b      	ldr	r3, [r3, #0]
 8027424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802742c:	d0ef      	beq.n	802740e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 802742e:	687b      	ldr	r3, [r7, #4]
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	f003 0304 	and.w	r3, r3, #4
 8027436:	2b00      	cmp	r3, #0
 8027438:	d020      	beq.n	802747c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 802743a:	4b43      	ldr	r3, [pc, #268]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027440:	0f1b      	lsrs	r3, r3, #28
 8027442:	f003 0307 	and.w	r3, r3, #7
 8027446:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	691b      	ldr	r3, [r3, #16]
 802744c:	019a      	lsls	r2, r3, #6
 802744e:	687b      	ldr	r3, [r7, #4]
 8027450:	695b      	ldr	r3, [r3, #20]
 8027452:	061b      	lsls	r3, r3, #24
 8027454:	431a      	orrs	r2, r3
 8027456:	693b      	ldr	r3, [r7, #16]
 8027458:	071b      	lsls	r3, r3, #28
 802745a:	493b      	ldr	r1, [pc, #236]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802745c:	4313      	orrs	r3, r2
 802745e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027462:	4b39      	ldr	r3, [pc, #228]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 802746c:	687b      	ldr	r3, [r7, #4]
 802746e:	6a1b      	ldr	r3, [r3, #32]
 8027470:	3b01      	subs	r3, #1
 8027472:	021b      	lsls	r3, r3, #8
 8027474:	4934      	ldr	r1, [pc, #208]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027476:	4313      	orrs	r3, r2
 8027478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 802747c:	687b      	ldr	r3, [r7, #4]
 802747e:	681b      	ldr	r3, [r3, #0]
 8027480:	f003 0308 	and.w	r3, r3, #8
 8027484:	2b00      	cmp	r3, #0
 8027486:	d01e      	beq.n	80274c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027488:	4b2f      	ldr	r3, [pc, #188]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802748a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802748e:	0e1b      	lsrs	r3, r3, #24
 8027490:	f003 030f 	and.w	r3, r3, #15
 8027494:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	691b      	ldr	r3, [r3, #16]
 802749a:	019a      	lsls	r2, r3, #6
 802749c:	693b      	ldr	r3, [r7, #16]
 802749e:	061b      	lsls	r3, r3, #24
 80274a0:	431a      	orrs	r2, r3
 80274a2:	687b      	ldr	r3, [r7, #4]
 80274a4:	699b      	ldr	r3, [r3, #24]
 80274a6:	071b      	lsls	r3, r3, #28
 80274a8:	4927      	ldr	r1, [pc, #156]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80274aa:	4313      	orrs	r3, r2
 80274ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80274b0:	4b25      	ldr	r3, [pc, #148]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80274b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80274b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80274ba:	687b      	ldr	r3, [r7, #4]
 80274bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80274be:	4922      	ldr	r1, [pc, #136]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80274c0:	4313      	orrs	r3, r2
 80274c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80274c6:	4b21      	ldr	r3, [pc, #132]	; (802754c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80274c8:	2201      	movs	r2, #1
 80274ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80274cc:	f7fb fe54 	bl	8023178 <HAL_GetTick>
 80274d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80274d2:	e008      	b.n	80274e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80274d4:	f7fb fe50 	bl	8023178 <HAL_GetTick>
 80274d8:	4602      	mov	r2, r0
 80274da:	697b      	ldr	r3, [r7, #20]
 80274dc:	1ad3      	subs	r3, r2, r3
 80274de:	2b02      	cmp	r3, #2
 80274e0:	d901      	bls.n	80274e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80274e2:	2303      	movs	r3, #3
 80274e4:	e0a4      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80274e6:	4b18      	ldr	r3, [pc, #96]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80274e8:	681b      	ldr	r3, [r3, #0]
 80274ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80274ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80274f2:	d1ef      	bne.n	80274d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80274f4:	687b      	ldr	r3, [r7, #4]
 80274f6:	681b      	ldr	r3, [r3, #0]
 80274f8:	f003 0320 	and.w	r3, r3, #32
 80274fc:	2b00      	cmp	r3, #0
 80274fe:	f000 808b 	beq.w	8027618 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027502:	2300      	movs	r3, #0
 8027504:	60fb      	str	r3, [r7, #12]
 8027506:	4b10      	ldr	r3, [pc, #64]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802750a:	4a0f      	ldr	r2, [pc, #60]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802750c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027510:	6413      	str	r3, [r2, #64]	; 0x40
 8027512:	4b0d      	ldr	r3, [pc, #52]	; (8027548 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802751a:	60fb      	str	r3, [r7, #12]
 802751c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802751e:	4b0c      	ldr	r3, [pc, #48]	; (8027550 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027520:	681b      	ldr	r3, [r3, #0]
 8027522:	4a0b      	ldr	r2, [pc, #44]	; (8027550 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027528:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802752a:	f7fb fe25 	bl	8023178 <HAL_GetTick>
 802752e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027530:	e010      	b.n	8027554 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8027532:	f7fb fe21 	bl	8023178 <HAL_GetTick>
 8027536:	4602      	mov	r2, r0
 8027538:	697b      	ldr	r3, [r7, #20]
 802753a:	1ad3      	subs	r3, r2, r3
 802753c:	2b02      	cmp	r3, #2
 802753e:	d909      	bls.n	8027554 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8027540:	2303      	movs	r3, #3
 8027542:	e075      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8027544:	42470068 	.word	0x42470068
 8027548:	40023800 	.word	0x40023800
 802754c:	42470070 	.word	0x42470070
 8027550:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027554:	4b38      	ldr	r3, [pc, #224]	; (8027638 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8027556:	681b      	ldr	r3, [r3, #0]
 8027558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802755c:	2b00      	cmp	r3, #0
 802755e:	d0e8      	beq.n	8027532 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027560:	4b36      	ldr	r3, [pc, #216]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027568:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802756a:	693b      	ldr	r3, [r7, #16]
 802756c:	2b00      	cmp	r3, #0
 802756e:	d02f      	beq.n	80275d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8027570:	687b      	ldr	r3, [r7, #4]
 8027572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027578:	693a      	ldr	r2, [r7, #16]
 802757a:	429a      	cmp	r2, r3
 802757c:	d028      	beq.n	80275d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802757e:	4b2f      	ldr	r3, [pc, #188]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027586:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027588:	4b2d      	ldr	r3, [pc, #180]	; (8027640 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 802758a:	2201      	movs	r2, #1
 802758c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802758e:	4b2c      	ldr	r3, [pc, #176]	; (8027640 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027590:	2200      	movs	r2, #0
 8027592:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8027594:	4a29      	ldr	r2, [pc, #164]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027596:	693b      	ldr	r3, [r7, #16]
 8027598:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802759a:	4b28      	ldr	r3, [pc, #160]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802759e:	f003 0301 	and.w	r3, r3, #1
 80275a2:	2b01      	cmp	r3, #1
 80275a4:	d114      	bne.n	80275d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80275a6:	f7fb fde7 	bl	8023178 <HAL_GetTick>
 80275aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80275ac:	e00a      	b.n	80275c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80275ae:	f7fb fde3 	bl	8023178 <HAL_GetTick>
 80275b2:	4602      	mov	r2, r0
 80275b4:	697b      	ldr	r3, [r7, #20]
 80275b6:	1ad3      	subs	r3, r2, r3
 80275b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80275bc:	4293      	cmp	r3, r2
 80275be:	d901      	bls.n	80275c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80275c0:	2303      	movs	r3, #3
 80275c2:	e035      	b.n	8027630 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80275c4:	4b1d      	ldr	r3, [pc, #116]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80275c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80275c8:	f003 0302 	and.w	r3, r3, #2
 80275cc:	2b00      	cmp	r3, #0
 80275ce:	d0ee      	beq.n	80275ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80275d0:	687b      	ldr	r3, [r7, #4]
 80275d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80275d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80275d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80275dc:	d10d      	bne.n	80275fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80275de:	4b17      	ldr	r3, [pc, #92]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80275e0:	689b      	ldr	r3, [r3, #8]
 80275e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80275ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80275ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80275f2:	4912      	ldr	r1, [pc, #72]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80275f4:	4313      	orrs	r3, r2
 80275f6:	608b      	str	r3, [r1, #8]
 80275f8:	e005      	b.n	8027606 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80275fa:	4b10      	ldr	r3, [pc, #64]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80275fc:	689b      	ldr	r3, [r3, #8]
 80275fe:	4a0f      	ldr	r2, [pc, #60]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027600:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027604:	6093      	str	r3, [r2, #8]
 8027606:	4b0d      	ldr	r3, [pc, #52]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802760a:	687b      	ldr	r3, [r7, #4]
 802760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802760e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027612:	490a      	ldr	r1, [pc, #40]	; (802763c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027614:	4313      	orrs	r3, r2
 8027616:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	681b      	ldr	r3, [r3, #0]
 802761c:	f003 0310 	and.w	r3, r3, #16
 8027620:	2b00      	cmp	r3, #0
 8027622:	d004      	beq.n	802762e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027624:	687b      	ldr	r3, [r7, #4]
 8027626:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 802762a:	4b06      	ldr	r3, [pc, #24]	; (8027644 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 802762c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802762e:	2300      	movs	r3, #0
}
 8027630:	4618      	mov	r0, r3
 8027632:	3718      	adds	r7, #24
 8027634:	46bd      	mov	sp, r7
 8027636:	bd80      	pop	{r7, pc}
 8027638:	40007000 	.word	0x40007000
 802763c:	40023800 	.word	0x40023800
 8027640:	42470e40 	.word	0x42470e40
 8027644:	424711e0 	.word	0x424711e0

08027648 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8027648:	b580      	push	{r7, lr}
 802764a:	b082      	sub	sp, #8
 802764c:	af00      	add	r7, sp, #0
 802764e:	6078      	str	r0, [r7, #4]
 8027650:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8027652:	687b      	ldr	r3, [r7, #4]
 8027654:	2b00      	cmp	r3, #0
 8027656:	d101      	bne.n	802765c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8027658:	2301      	movs	r3, #1
 802765a:	e025      	b.n	80276a8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 802765c:	687b      	ldr	r3, [r7, #4]
 802765e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027662:	b2db      	uxtb	r3, r3
 8027664:	2b00      	cmp	r3, #0
 8027666:	d106      	bne.n	8027676 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8027668:	687b      	ldr	r3, [r7, #4]
 802766a:	2200      	movs	r2, #0
 802766c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8027670:	6878      	ldr	r0, [r7, #4]
 8027672:	f7fa f993 	bl	802199c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027676:	687b      	ldr	r3, [r7, #4]
 8027678:	2202      	movs	r2, #2
 802767a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802767e:	687b      	ldr	r3, [r7, #4]
 8027680:	681a      	ldr	r2, [r3, #0]
 8027682:	687b      	ldr	r3, [r7, #4]
 8027684:	3304      	adds	r3, #4
 8027686:	4619      	mov	r1, r3
 8027688:	4610      	mov	r0, r2
 802768a:	f002 fb47 	bl	8029d1c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 802768e:	687b      	ldr	r3, [r7, #4]
 8027690:	6818      	ldr	r0, [r3, #0]
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	685b      	ldr	r3, [r3, #4]
 8027696:	461a      	mov	r2, r3
 8027698:	6839      	ldr	r1, [r7, #0]
 802769a:	f002 fb9c 	bl	8029dd6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802769e:	687b      	ldr	r3, [r7, #4]
 80276a0:	2201      	movs	r2, #1
 80276a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80276a6:	2300      	movs	r3, #0
}
 80276a8:	4618      	mov	r0, r3
 80276aa:	3708      	adds	r7, #8
 80276ac:	46bd      	mov	sp, r7
 80276ae:	bd80      	pop	{r7, pc}

080276b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80276b0:	b580      	push	{r7, lr}
 80276b2:	b086      	sub	sp, #24
 80276b4:	af00      	add	r7, sp, #0
 80276b6:	60f8      	str	r0, [r7, #12]
 80276b8:	60b9      	str	r1, [r7, #8]
 80276ba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80276bc:	68fb      	ldr	r3, [r7, #12]
 80276be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80276c2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80276c4:	7dfb      	ldrb	r3, [r7, #23]
 80276c6:	2b02      	cmp	r3, #2
 80276c8:	d101      	bne.n	80276ce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80276ca:	2302      	movs	r3, #2
 80276cc:	e021      	b.n	8027712 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80276ce:	7dfb      	ldrb	r3, [r7, #23]
 80276d0:	2b01      	cmp	r3, #1
 80276d2:	d002      	beq.n	80276da <HAL_SDRAM_SendCommand+0x2a>
 80276d4:	7dfb      	ldrb	r3, [r7, #23]
 80276d6:	2b05      	cmp	r3, #5
 80276d8:	d118      	bne.n	802770c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80276da:	68fb      	ldr	r3, [r7, #12]
 80276dc:	2202      	movs	r2, #2
 80276de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	687a      	ldr	r2, [r7, #4]
 80276e8:	68b9      	ldr	r1, [r7, #8]
 80276ea:	4618      	mov	r0, r3
 80276ec:	f002 fbdc 	bl	8029ea8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80276f0:	68bb      	ldr	r3, [r7, #8]
 80276f2:	681b      	ldr	r3, [r3, #0]
 80276f4:	2b02      	cmp	r3, #2
 80276f6:	d104      	bne.n	8027702 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80276f8:	68fb      	ldr	r3, [r7, #12]
 80276fa:	2205      	movs	r2, #5
 80276fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027700:	e006      	b.n	8027710 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8027702:	68fb      	ldr	r3, [r7, #12]
 8027704:	2201      	movs	r2, #1
 8027706:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802770a:	e001      	b.n	8027710 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 802770c:	2301      	movs	r3, #1
 802770e:	e000      	b.n	8027712 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8027710:	2300      	movs	r3, #0
}
 8027712:	4618      	mov	r0, r3
 8027714:	3718      	adds	r7, #24
 8027716:	46bd      	mov	sp, r7
 8027718:	bd80      	pop	{r7, pc}

0802771a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 802771a:	b580      	push	{r7, lr}
 802771c:	b082      	sub	sp, #8
 802771e:	af00      	add	r7, sp, #0
 8027720:	6078      	str	r0, [r7, #4]
 8027722:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802772a:	b2db      	uxtb	r3, r3
 802772c:	2b02      	cmp	r3, #2
 802772e:	d101      	bne.n	8027734 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8027730:	2302      	movs	r3, #2
 8027732:	e016      	b.n	8027762 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8027734:	687b      	ldr	r3, [r7, #4]
 8027736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802773a:	b2db      	uxtb	r3, r3
 802773c:	2b01      	cmp	r3, #1
 802773e:	d10f      	bne.n	8027760 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8027740:	687b      	ldr	r3, [r7, #4]
 8027742:	2202      	movs	r2, #2
 8027744:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8027748:	687b      	ldr	r3, [r7, #4]
 802774a:	681b      	ldr	r3, [r3, #0]
 802774c:	6839      	ldr	r1, [r7, #0]
 802774e:	4618      	mov	r0, r3
 8027750:	f002 fbe7 	bl	8029f22 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8027754:	687b      	ldr	r3, [r7, #4]
 8027756:	2201      	movs	r2, #1
 8027758:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 802775c:	2300      	movs	r3, #0
 802775e:	e000      	b.n	8027762 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8027760:	2301      	movs	r3, #1
}
 8027762:	4618      	mov	r0, r3
 8027764:	3708      	adds	r7, #8
 8027766:	46bd      	mov	sp, r7
 8027768:	bd80      	pop	{r7, pc}

0802776a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802776a:	b580      	push	{r7, lr}
 802776c:	b082      	sub	sp, #8
 802776e:	af00      	add	r7, sp, #0
 8027770:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8027772:	687b      	ldr	r3, [r7, #4]
 8027774:	2b00      	cmp	r3, #0
 8027776:	d101      	bne.n	802777c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8027778:	2301      	movs	r3, #1
 802777a:	e07b      	b.n	8027874 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802777c:	687b      	ldr	r3, [r7, #4]
 802777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027780:	2b00      	cmp	r3, #0
 8027782:	d108      	bne.n	8027796 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8027784:	687b      	ldr	r3, [r7, #4]
 8027786:	685b      	ldr	r3, [r3, #4]
 8027788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802778c:	d009      	beq.n	80277a2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	2200      	movs	r2, #0
 8027792:	61da      	str	r2, [r3, #28]
 8027794:	e005      	b.n	80277a2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8027796:	687b      	ldr	r3, [r7, #4]
 8027798:	2200      	movs	r2, #0
 802779a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802779c:	687b      	ldr	r3, [r7, #4]
 802779e:	2200      	movs	r2, #0
 80277a0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80277a2:	687b      	ldr	r3, [r7, #4]
 80277a4:	2200      	movs	r2, #0
 80277a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80277a8:	687b      	ldr	r3, [r7, #4]
 80277aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80277ae:	b2db      	uxtb	r3, r3
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	d106      	bne.n	80277c2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80277b4:	687b      	ldr	r3, [r7, #4]
 80277b6:	2200      	movs	r2, #0
 80277b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80277bc:	6878      	ldr	r0, [r7, #4]
 80277be:	f7f9 ff2b 	bl	8021618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80277c2:	687b      	ldr	r3, [r7, #4]
 80277c4:	2202      	movs	r2, #2
 80277c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	681b      	ldr	r3, [r3, #0]
 80277ce:	681a      	ldr	r2, [r3, #0]
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80277d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	685b      	ldr	r3, [r3, #4]
 80277de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80277e2:	687b      	ldr	r3, [r7, #4]
 80277e4:	689b      	ldr	r3, [r3, #8]
 80277e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80277ea:	431a      	orrs	r2, r3
 80277ec:	687b      	ldr	r3, [r7, #4]
 80277ee:	68db      	ldr	r3, [r3, #12]
 80277f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80277f4:	431a      	orrs	r2, r3
 80277f6:	687b      	ldr	r3, [r7, #4]
 80277f8:	691b      	ldr	r3, [r3, #16]
 80277fa:	f003 0302 	and.w	r3, r3, #2
 80277fe:	431a      	orrs	r2, r3
 8027800:	687b      	ldr	r3, [r7, #4]
 8027802:	695b      	ldr	r3, [r3, #20]
 8027804:	f003 0301 	and.w	r3, r3, #1
 8027808:	431a      	orrs	r2, r3
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	699b      	ldr	r3, [r3, #24]
 802780e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027812:	431a      	orrs	r2, r3
 8027814:	687b      	ldr	r3, [r7, #4]
 8027816:	69db      	ldr	r3, [r3, #28]
 8027818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802781c:	431a      	orrs	r2, r3
 802781e:	687b      	ldr	r3, [r7, #4]
 8027820:	6a1b      	ldr	r3, [r3, #32]
 8027822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027826:	ea42 0103 	orr.w	r1, r2, r3
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802782e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8027832:	687b      	ldr	r3, [r7, #4]
 8027834:	681b      	ldr	r3, [r3, #0]
 8027836:	430a      	orrs	r2, r1
 8027838:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802783a:	687b      	ldr	r3, [r7, #4]
 802783c:	699b      	ldr	r3, [r3, #24]
 802783e:	0c1b      	lsrs	r3, r3, #16
 8027840:	f003 0104 	and.w	r1, r3, #4
 8027844:	687b      	ldr	r3, [r7, #4]
 8027846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027848:	f003 0210 	and.w	r2, r3, #16
 802784c:	687b      	ldr	r3, [r7, #4]
 802784e:	681b      	ldr	r3, [r3, #0]
 8027850:	430a      	orrs	r2, r1
 8027852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8027854:	687b      	ldr	r3, [r7, #4]
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	69da      	ldr	r2, [r3, #28]
 802785a:	687b      	ldr	r3, [r7, #4]
 802785c:	681b      	ldr	r3, [r3, #0]
 802785e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8027864:	687b      	ldr	r3, [r7, #4]
 8027866:	2200      	movs	r2, #0
 8027868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802786a:	687b      	ldr	r3, [r7, #4]
 802786c:	2201      	movs	r2, #1
 802786e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8027872:	2300      	movs	r3, #0
}
 8027874:	4618      	mov	r0, r3
 8027876:	3708      	adds	r7, #8
 8027878:	46bd      	mov	sp, r7
 802787a:	bd80      	pop	{r7, pc}

0802787c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 802787c:	b580      	push	{r7, lr}
 802787e:	b082      	sub	sp, #8
 8027880:	af00      	add	r7, sp, #0
 8027882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8027884:	687b      	ldr	r3, [r7, #4]
 8027886:	2b00      	cmp	r3, #0
 8027888:	d101      	bne.n	802788e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 802788a:	2301      	movs	r3, #1
 802788c:	e01a      	b.n	80278c4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802788e:	687b      	ldr	r3, [r7, #4]
 8027890:	2202      	movs	r2, #2
 8027892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8027896:	687b      	ldr	r3, [r7, #4]
 8027898:	681b      	ldr	r3, [r3, #0]
 802789a:	681a      	ldr	r2, [r3, #0]
 802789c:	687b      	ldr	r3, [r7, #4]
 802789e:	681b      	ldr	r3, [r3, #0]
 80278a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80278a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80278a6:	6878      	ldr	r0, [r7, #4]
 80278a8:	f7f9 fefe 	bl	80216a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80278ac:	687b      	ldr	r3, [r7, #4]
 80278ae:	2200      	movs	r2, #0
 80278b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80278b2:	687b      	ldr	r3, [r7, #4]
 80278b4:	2200      	movs	r2, #0
 80278b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80278ba:	687b      	ldr	r3, [r7, #4]
 80278bc:	2200      	movs	r2, #0
 80278be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80278c2:	2300      	movs	r3, #0
}
 80278c4:	4618      	mov	r0, r3
 80278c6:	3708      	adds	r7, #8
 80278c8:	46bd      	mov	sp, r7
 80278ca:	bd80      	pop	{r7, pc}

080278cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80278cc:	b580      	push	{r7, lr}
 80278ce:	b088      	sub	sp, #32
 80278d0:	af00      	add	r7, sp, #0
 80278d2:	60f8      	str	r0, [r7, #12]
 80278d4:	60b9      	str	r1, [r7, #8]
 80278d6:	603b      	str	r3, [r7, #0]
 80278d8:	4613      	mov	r3, r2
 80278da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80278dc:	2300      	movs	r3, #0
 80278de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80278e0:	68fb      	ldr	r3, [r7, #12]
 80278e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80278e6:	2b01      	cmp	r3, #1
 80278e8:	d101      	bne.n	80278ee <HAL_SPI_Transmit+0x22>
 80278ea:	2302      	movs	r3, #2
 80278ec:	e126      	b.n	8027b3c <HAL_SPI_Transmit+0x270>
 80278ee:	68fb      	ldr	r3, [r7, #12]
 80278f0:	2201      	movs	r2, #1
 80278f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80278f6:	f7fb fc3f 	bl	8023178 <HAL_GetTick>
 80278fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80278fc:	88fb      	ldrh	r3, [r7, #6]
 80278fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027900:	68fb      	ldr	r3, [r7, #12]
 8027902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027906:	b2db      	uxtb	r3, r3
 8027908:	2b01      	cmp	r3, #1
 802790a:	d002      	beq.n	8027912 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802790c:	2302      	movs	r3, #2
 802790e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027910:	e10b      	b.n	8027b2a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8027912:	68bb      	ldr	r3, [r7, #8]
 8027914:	2b00      	cmp	r3, #0
 8027916:	d002      	beq.n	802791e <HAL_SPI_Transmit+0x52>
 8027918:	88fb      	ldrh	r3, [r7, #6]
 802791a:	2b00      	cmp	r3, #0
 802791c:	d102      	bne.n	8027924 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802791e:	2301      	movs	r3, #1
 8027920:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027922:	e102      	b.n	8027b2a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8027924:	68fb      	ldr	r3, [r7, #12]
 8027926:	2203      	movs	r2, #3
 8027928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802792c:	68fb      	ldr	r3, [r7, #12]
 802792e:	2200      	movs	r2, #0
 8027930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8027932:	68fb      	ldr	r3, [r7, #12]
 8027934:	68ba      	ldr	r2, [r7, #8]
 8027936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8027938:	68fb      	ldr	r3, [r7, #12]
 802793a:	88fa      	ldrh	r2, [r7, #6]
 802793c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802793e:	68fb      	ldr	r3, [r7, #12]
 8027940:	88fa      	ldrh	r2, [r7, #6]
 8027942:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8027944:	68fb      	ldr	r3, [r7, #12]
 8027946:	2200      	movs	r2, #0
 8027948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802794a:	68fb      	ldr	r3, [r7, #12]
 802794c:	2200      	movs	r2, #0
 802794e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8027950:	68fb      	ldr	r3, [r7, #12]
 8027952:	2200      	movs	r2, #0
 8027954:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8027956:	68fb      	ldr	r3, [r7, #12]
 8027958:	2200      	movs	r2, #0
 802795a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802795c:	68fb      	ldr	r3, [r7, #12]
 802795e:	2200      	movs	r2, #0
 8027960:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027962:	68fb      	ldr	r3, [r7, #12]
 8027964:	689b      	ldr	r3, [r3, #8]
 8027966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802796a:	d10f      	bne.n	802798c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802796c:	68fb      	ldr	r3, [r7, #12]
 802796e:	681b      	ldr	r3, [r3, #0]
 8027970:	681a      	ldr	r2, [r3, #0]
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	681b      	ldr	r3, [r3, #0]
 8027976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802797a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 802797c:	68fb      	ldr	r3, [r7, #12]
 802797e:	681b      	ldr	r3, [r3, #0]
 8027980:	681a      	ldr	r2, [r3, #0]
 8027982:	68fb      	ldr	r3, [r7, #12]
 8027984:	681b      	ldr	r3, [r3, #0]
 8027986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802798a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802798c:	68fb      	ldr	r3, [r7, #12]
 802798e:	681b      	ldr	r3, [r3, #0]
 8027990:	681b      	ldr	r3, [r3, #0]
 8027992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027996:	2b40      	cmp	r3, #64	; 0x40
 8027998:	d007      	beq.n	80279aa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802799a:	68fb      	ldr	r3, [r7, #12]
 802799c:	681b      	ldr	r3, [r3, #0]
 802799e:	681a      	ldr	r2, [r3, #0]
 80279a0:	68fb      	ldr	r3, [r7, #12]
 80279a2:	681b      	ldr	r3, [r3, #0]
 80279a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80279a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80279aa:	68fb      	ldr	r3, [r7, #12]
 80279ac:	68db      	ldr	r3, [r3, #12]
 80279ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80279b2:	d14b      	bne.n	8027a4c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80279b4:	68fb      	ldr	r3, [r7, #12]
 80279b6:	685b      	ldr	r3, [r3, #4]
 80279b8:	2b00      	cmp	r3, #0
 80279ba:	d002      	beq.n	80279c2 <HAL_SPI_Transmit+0xf6>
 80279bc:	8afb      	ldrh	r3, [r7, #22]
 80279be:	2b01      	cmp	r3, #1
 80279c0:	d13e      	bne.n	8027a40 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80279c2:	68fb      	ldr	r3, [r7, #12]
 80279c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279c6:	881a      	ldrh	r2, [r3, #0]
 80279c8:	68fb      	ldr	r3, [r7, #12]
 80279ca:	681b      	ldr	r3, [r3, #0]
 80279cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80279ce:	68fb      	ldr	r3, [r7, #12]
 80279d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279d2:	1c9a      	adds	r2, r3, #2
 80279d4:	68fb      	ldr	r3, [r7, #12]
 80279d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80279d8:	68fb      	ldr	r3, [r7, #12]
 80279da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80279dc:	b29b      	uxth	r3, r3
 80279de:	3b01      	subs	r3, #1
 80279e0:	b29a      	uxth	r2, r3
 80279e2:	68fb      	ldr	r3, [r7, #12]
 80279e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80279e6:	e02b      	b.n	8027a40 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80279e8:	68fb      	ldr	r3, [r7, #12]
 80279ea:	681b      	ldr	r3, [r3, #0]
 80279ec:	689b      	ldr	r3, [r3, #8]
 80279ee:	f003 0302 	and.w	r3, r3, #2
 80279f2:	2b02      	cmp	r3, #2
 80279f4:	d112      	bne.n	8027a1c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80279f6:	68fb      	ldr	r3, [r7, #12]
 80279f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279fa:	881a      	ldrh	r2, [r3, #0]
 80279fc:	68fb      	ldr	r3, [r7, #12]
 80279fe:	681b      	ldr	r3, [r3, #0]
 8027a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027a02:	68fb      	ldr	r3, [r7, #12]
 8027a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a06:	1c9a      	adds	r2, r3, #2
 8027a08:	68fb      	ldr	r3, [r7, #12]
 8027a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027a0c:	68fb      	ldr	r3, [r7, #12]
 8027a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a10:	b29b      	uxth	r3, r3
 8027a12:	3b01      	subs	r3, #1
 8027a14:	b29a      	uxth	r2, r3
 8027a16:	68fb      	ldr	r3, [r7, #12]
 8027a18:	86da      	strh	r2, [r3, #54]	; 0x36
 8027a1a:	e011      	b.n	8027a40 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a1c:	f7fb fbac 	bl	8023178 <HAL_GetTick>
 8027a20:	4602      	mov	r2, r0
 8027a22:	69bb      	ldr	r3, [r7, #24]
 8027a24:	1ad3      	subs	r3, r2, r3
 8027a26:	683a      	ldr	r2, [r7, #0]
 8027a28:	429a      	cmp	r2, r3
 8027a2a:	d803      	bhi.n	8027a34 <HAL_SPI_Transmit+0x168>
 8027a2c:	683b      	ldr	r3, [r7, #0]
 8027a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a32:	d102      	bne.n	8027a3a <HAL_SPI_Transmit+0x16e>
 8027a34:	683b      	ldr	r3, [r7, #0]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d102      	bne.n	8027a40 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8027a3a:	2303      	movs	r3, #3
 8027a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027a3e:	e074      	b.n	8027b2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027a40:	68fb      	ldr	r3, [r7, #12]
 8027a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a44:	b29b      	uxth	r3, r3
 8027a46:	2b00      	cmp	r3, #0
 8027a48:	d1ce      	bne.n	80279e8 <HAL_SPI_Transmit+0x11c>
 8027a4a:	e04c      	b.n	8027ae6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	685b      	ldr	r3, [r3, #4]
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d002      	beq.n	8027a5a <HAL_SPI_Transmit+0x18e>
 8027a54:	8afb      	ldrh	r3, [r7, #22]
 8027a56:	2b01      	cmp	r3, #1
 8027a58:	d140      	bne.n	8027adc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027a5a:	68fb      	ldr	r3, [r7, #12]
 8027a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027a5e:	68fb      	ldr	r3, [r7, #12]
 8027a60:	681b      	ldr	r3, [r3, #0]
 8027a62:	330c      	adds	r3, #12
 8027a64:	7812      	ldrb	r2, [r2, #0]
 8027a66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027a68:	68fb      	ldr	r3, [r7, #12]
 8027a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a6c:	1c5a      	adds	r2, r3, #1
 8027a6e:	68fb      	ldr	r3, [r7, #12]
 8027a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027a72:	68fb      	ldr	r3, [r7, #12]
 8027a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a76:	b29b      	uxth	r3, r3
 8027a78:	3b01      	subs	r3, #1
 8027a7a:	b29a      	uxth	r2, r3
 8027a7c:	68fb      	ldr	r3, [r7, #12]
 8027a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8027a80:	e02c      	b.n	8027adc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027a82:	68fb      	ldr	r3, [r7, #12]
 8027a84:	681b      	ldr	r3, [r3, #0]
 8027a86:	689b      	ldr	r3, [r3, #8]
 8027a88:	f003 0302 	and.w	r3, r3, #2
 8027a8c:	2b02      	cmp	r3, #2
 8027a8e:	d113      	bne.n	8027ab8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027a90:	68fb      	ldr	r3, [r7, #12]
 8027a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027a94:	68fb      	ldr	r3, [r7, #12]
 8027a96:	681b      	ldr	r3, [r3, #0]
 8027a98:	330c      	adds	r3, #12
 8027a9a:	7812      	ldrb	r2, [r2, #0]
 8027a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8027a9e:	68fb      	ldr	r3, [r7, #12]
 8027aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027aa2:	1c5a      	adds	r2, r3, #1
 8027aa4:	68fb      	ldr	r3, [r7, #12]
 8027aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027aa8:	68fb      	ldr	r3, [r7, #12]
 8027aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027aac:	b29b      	uxth	r3, r3
 8027aae:	3b01      	subs	r3, #1
 8027ab0:	b29a      	uxth	r2, r3
 8027ab2:	68fb      	ldr	r3, [r7, #12]
 8027ab4:	86da      	strh	r2, [r3, #54]	; 0x36
 8027ab6:	e011      	b.n	8027adc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027ab8:	f7fb fb5e 	bl	8023178 <HAL_GetTick>
 8027abc:	4602      	mov	r2, r0
 8027abe:	69bb      	ldr	r3, [r7, #24]
 8027ac0:	1ad3      	subs	r3, r2, r3
 8027ac2:	683a      	ldr	r2, [r7, #0]
 8027ac4:	429a      	cmp	r2, r3
 8027ac6:	d803      	bhi.n	8027ad0 <HAL_SPI_Transmit+0x204>
 8027ac8:	683b      	ldr	r3, [r7, #0]
 8027aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ace:	d102      	bne.n	8027ad6 <HAL_SPI_Transmit+0x20a>
 8027ad0:	683b      	ldr	r3, [r7, #0]
 8027ad2:	2b00      	cmp	r3, #0
 8027ad4:	d102      	bne.n	8027adc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027ad6:	2303      	movs	r3, #3
 8027ad8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027ada:	e026      	b.n	8027b2a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027adc:	68fb      	ldr	r3, [r7, #12]
 8027ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ae0:	b29b      	uxth	r3, r3
 8027ae2:	2b00      	cmp	r3, #0
 8027ae4:	d1cd      	bne.n	8027a82 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027ae6:	69ba      	ldr	r2, [r7, #24]
 8027ae8:	6839      	ldr	r1, [r7, #0]
 8027aea:	68f8      	ldr	r0, [r7, #12]
 8027aec:	f000 fbda 	bl	80282a4 <SPI_EndRxTxTransaction>
 8027af0:	4603      	mov	r3, r0
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d002      	beq.n	8027afc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027af6:	68fb      	ldr	r3, [r7, #12]
 8027af8:	2220      	movs	r2, #32
 8027afa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027afc:	68fb      	ldr	r3, [r7, #12]
 8027afe:	689b      	ldr	r3, [r3, #8]
 8027b00:	2b00      	cmp	r3, #0
 8027b02:	d10a      	bne.n	8027b1a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027b04:	2300      	movs	r3, #0
 8027b06:	613b      	str	r3, [r7, #16]
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	681b      	ldr	r3, [r3, #0]
 8027b0c:	68db      	ldr	r3, [r3, #12]
 8027b0e:	613b      	str	r3, [r7, #16]
 8027b10:	68fb      	ldr	r3, [r7, #12]
 8027b12:	681b      	ldr	r3, [r3, #0]
 8027b14:	689b      	ldr	r3, [r3, #8]
 8027b16:	613b      	str	r3, [r7, #16]
 8027b18:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027b1a:	68fb      	ldr	r3, [r7, #12]
 8027b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027b1e:	2b00      	cmp	r3, #0
 8027b20:	d002      	beq.n	8027b28 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8027b22:	2301      	movs	r3, #1
 8027b24:	77fb      	strb	r3, [r7, #31]
 8027b26:	e000      	b.n	8027b2a <HAL_SPI_Transmit+0x25e>
  }

error:
 8027b28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027b2a:	68fb      	ldr	r3, [r7, #12]
 8027b2c:	2201      	movs	r2, #1
 8027b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8027b32:	68fb      	ldr	r3, [r7, #12]
 8027b34:	2200      	movs	r2, #0
 8027b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8027b3c:	4618      	mov	r0, r3
 8027b3e:	3720      	adds	r7, #32
 8027b40:	46bd      	mov	sp, r7
 8027b42:	bd80      	pop	{r7, pc}

08027b44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027b44:	b580      	push	{r7, lr}
 8027b46:	b088      	sub	sp, #32
 8027b48:	af02      	add	r7, sp, #8
 8027b4a:	60f8      	str	r0, [r7, #12]
 8027b4c:	60b9      	str	r1, [r7, #8]
 8027b4e:	603b      	str	r3, [r7, #0]
 8027b50:	4613      	mov	r3, r2
 8027b52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027b54:	2300      	movs	r3, #0
 8027b56:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8027b58:	68fb      	ldr	r3, [r7, #12]
 8027b5a:	685b      	ldr	r3, [r3, #4]
 8027b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027b60:	d112      	bne.n	8027b88 <HAL_SPI_Receive+0x44>
 8027b62:	68fb      	ldr	r3, [r7, #12]
 8027b64:	689b      	ldr	r3, [r3, #8]
 8027b66:	2b00      	cmp	r3, #0
 8027b68:	d10e      	bne.n	8027b88 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8027b6a:	68fb      	ldr	r3, [r7, #12]
 8027b6c:	2204      	movs	r2, #4
 8027b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8027b72:	88fa      	ldrh	r2, [r7, #6]
 8027b74:	683b      	ldr	r3, [r7, #0]
 8027b76:	9300      	str	r3, [sp, #0]
 8027b78:	4613      	mov	r3, r2
 8027b7a:	68ba      	ldr	r2, [r7, #8]
 8027b7c:	68b9      	ldr	r1, [r7, #8]
 8027b7e:	68f8      	ldr	r0, [r7, #12]
 8027b80:	f000 f8f1 	bl	8027d66 <HAL_SPI_TransmitReceive>
 8027b84:	4603      	mov	r3, r0
 8027b86:	e0ea      	b.n	8027d5e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027b88:	68fb      	ldr	r3, [r7, #12]
 8027b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027b8e:	2b01      	cmp	r3, #1
 8027b90:	d101      	bne.n	8027b96 <HAL_SPI_Receive+0x52>
 8027b92:	2302      	movs	r3, #2
 8027b94:	e0e3      	b.n	8027d5e <HAL_SPI_Receive+0x21a>
 8027b96:	68fb      	ldr	r3, [r7, #12]
 8027b98:	2201      	movs	r2, #1
 8027b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027b9e:	f7fb faeb 	bl	8023178 <HAL_GetTick>
 8027ba2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027ba4:	68fb      	ldr	r3, [r7, #12]
 8027ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027baa:	b2db      	uxtb	r3, r3
 8027bac:	2b01      	cmp	r3, #1
 8027bae:	d002      	beq.n	8027bb6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8027bb0:	2302      	movs	r3, #2
 8027bb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027bb4:	e0ca      	b.n	8027d4c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027bb6:	68bb      	ldr	r3, [r7, #8]
 8027bb8:	2b00      	cmp	r3, #0
 8027bba:	d002      	beq.n	8027bc2 <HAL_SPI_Receive+0x7e>
 8027bbc:	88fb      	ldrh	r3, [r7, #6]
 8027bbe:	2b00      	cmp	r3, #0
 8027bc0:	d102      	bne.n	8027bc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8027bc2:	2301      	movs	r3, #1
 8027bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027bc6:	e0c1      	b.n	8027d4c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027bc8:	68fb      	ldr	r3, [r7, #12]
 8027bca:	2204      	movs	r2, #4
 8027bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027bd0:	68fb      	ldr	r3, [r7, #12]
 8027bd2:	2200      	movs	r2, #0
 8027bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027bd6:	68fb      	ldr	r3, [r7, #12]
 8027bd8:	68ba      	ldr	r2, [r7, #8]
 8027bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027bdc:	68fb      	ldr	r3, [r7, #12]
 8027bde:	88fa      	ldrh	r2, [r7, #6]
 8027be0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	88fa      	ldrh	r2, [r7, #6]
 8027be6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027be8:	68fb      	ldr	r3, [r7, #12]
 8027bea:	2200      	movs	r2, #0
 8027bec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	2200      	movs	r2, #0
 8027bf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027bf4:	68fb      	ldr	r3, [r7, #12]
 8027bf6:	2200      	movs	r2, #0
 8027bf8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027bfa:	68fb      	ldr	r3, [r7, #12]
 8027bfc:	2200      	movs	r2, #0
 8027bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027c00:	68fb      	ldr	r3, [r7, #12]
 8027c02:	2200      	movs	r2, #0
 8027c04:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027c06:	68fb      	ldr	r3, [r7, #12]
 8027c08:	689b      	ldr	r3, [r3, #8]
 8027c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027c0e:	d10f      	bne.n	8027c30 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027c10:	68fb      	ldr	r3, [r7, #12]
 8027c12:	681b      	ldr	r3, [r3, #0]
 8027c14:	681a      	ldr	r2, [r3, #0]
 8027c16:	68fb      	ldr	r3, [r7, #12]
 8027c18:	681b      	ldr	r3, [r3, #0]
 8027c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027c1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8027c20:	68fb      	ldr	r3, [r7, #12]
 8027c22:	681b      	ldr	r3, [r3, #0]
 8027c24:	681a      	ldr	r2, [r3, #0]
 8027c26:	68fb      	ldr	r3, [r7, #12]
 8027c28:	681b      	ldr	r3, [r3, #0]
 8027c2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027c2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027c30:	68fb      	ldr	r3, [r7, #12]
 8027c32:	681b      	ldr	r3, [r3, #0]
 8027c34:	681b      	ldr	r3, [r3, #0]
 8027c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027c3a:	2b40      	cmp	r3, #64	; 0x40
 8027c3c:	d007      	beq.n	8027c4e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027c3e:	68fb      	ldr	r3, [r7, #12]
 8027c40:	681b      	ldr	r3, [r3, #0]
 8027c42:	681a      	ldr	r2, [r3, #0]
 8027c44:	68fb      	ldr	r3, [r7, #12]
 8027c46:	681b      	ldr	r3, [r3, #0]
 8027c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027c4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027c4e:	68fb      	ldr	r3, [r7, #12]
 8027c50:	68db      	ldr	r3, [r3, #12]
 8027c52:	2b00      	cmp	r3, #0
 8027c54:	d162      	bne.n	8027d1c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027c56:	e02e      	b.n	8027cb6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027c58:	68fb      	ldr	r3, [r7, #12]
 8027c5a:	681b      	ldr	r3, [r3, #0]
 8027c5c:	689b      	ldr	r3, [r3, #8]
 8027c5e:	f003 0301 	and.w	r3, r3, #1
 8027c62:	2b01      	cmp	r3, #1
 8027c64:	d115      	bne.n	8027c92 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027c66:	68fb      	ldr	r3, [r7, #12]
 8027c68:	681b      	ldr	r3, [r3, #0]
 8027c6a:	f103 020c 	add.w	r2, r3, #12
 8027c6e:	68fb      	ldr	r3, [r7, #12]
 8027c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c72:	7812      	ldrb	r2, [r2, #0]
 8027c74:	b2d2      	uxtb	r2, r2
 8027c76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8027c78:	68fb      	ldr	r3, [r7, #12]
 8027c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c7c:	1c5a      	adds	r2, r3, #1
 8027c7e:	68fb      	ldr	r3, [r7, #12]
 8027c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027c82:	68fb      	ldr	r3, [r7, #12]
 8027c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c86:	b29b      	uxth	r3, r3
 8027c88:	3b01      	subs	r3, #1
 8027c8a:	b29a      	uxth	r2, r3
 8027c8c:	68fb      	ldr	r3, [r7, #12]
 8027c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027c90:	e011      	b.n	8027cb6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027c92:	f7fb fa71 	bl	8023178 <HAL_GetTick>
 8027c96:	4602      	mov	r2, r0
 8027c98:	693b      	ldr	r3, [r7, #16]
 8027c9a:	1ad3      	subs	r3, r2, r3
 8027c9c:	683a      	ldr	r2, [r7, #0]
 8027c9e:	429a      	cmp	r2, r3
 8027ca0:	d803      	bhi.n	8027caa <HAL_SPI_Receive+0x166>
 8027ca2:	683b      	ldr	r3, [r7, #0]
 8027ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ca8:	d102      	bne.n	8027cb0 <HAL_SPI_Receive+0x16c>
 8027caa:	683b      	ldr	r3, [r7, #0]
 8027cac:	2b00      	cmp	r3, #0
 8027cae:	d102      	bne.n	8027cb6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8027cb0:	2303      	movs	r3, #3
 8027cb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027cb4:	e04a      	b.n	8027d4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027cb6:	68fb      	ldr	r3, [r7, #12]
 8027cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cba:	b29b      	uxth	r3, r3
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	d1cb      	bne.n	8027c58 <HAL_SPI_Receive+0x114>
 8027cc0:	e031      	b.n	8027d26 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027cc2:	68fb      	ldr	r3, [r7, #12]
 8027cc4:	681b      	ldr	r3, [r3, #0]
 8027cc6:	689b      	ldr	r3, [r3, #8]
 8027cc8:	f003 0301 	and.w	r3, r3, #1
 8027ccc:	2b01      	cmp	r3, #1
 8027cce:	d113      	bne.n	8027cf8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027cd0:	68fb      	ldr	r3, [r7, #12]
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	68da      	ldr	r2, [r3, #12]
 8027cd6:	68fb      	ldr	r3, [r7, #12]
 8027cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027cda:	b292      	uxth	r2, r2
 8027cdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027cde:	68fb      	ldr	r3, [r7, #12]
 8027ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ce2:	1c9a      	adds	r2, r3, #2
 8027ce4:	68fb      	ldr	r3, [r7, #12]
 8027ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027ce8:	68fb      	ldr	r3, [r7, #12]
 8027cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027cec:	b29b      	uxth	r3, r3
 8027cee:	3b01      	subs	r3, #1
 8027cf0:	b29a      	uxth	r2, r3
 8027cf2:	68fb      	ldr	r3, [r7, #12]
 8027cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027cf6:	e011      	b.n	8027d1c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027cf8:	f7fb fa3e 	bl	8023178 <HAL_GetTick>
 8027cfc:	4602      	mov	r2, r0
 8027cfe:	693b      	ldr	r3, [r7, #16]
 8027d00:	1ad3      	subs	r3, r2, r3
 8027d02:	683a      	ldr	r2, [r7, #0]
 8027d04:	429a      	cmp	r2, r3
 8027d06:	d803      	bhi.n	8027d10 <HAL_SPI_Receive+0x1cc>
 8027d08:	683b      	ldr	r3, [r7, #0]
 8027d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d0e:	d102      	bne.n	8027d16 <HAL_SPI_Receive+0x1d2>
 8027d10:	683b      	ldr	r3, [r7, #0]
 8027d12:	2b00      	cmp	r3, #0
 8027d14:	d102      	bne.n	8027d1c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027d16:	2303      	movs	r3, #3
 8027d18:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027d1a:	e017      	b.n	8027d4c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027d1c:	68fb      	ldr	r3, [r7, #12]
 8027d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027d20:	b29b      	uxth	r3, r3
 8027d22:	2b00      	cmp	r3, #0
 8027d24:	d1cd      	bne.n	8027cc2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027d26:	693a      	ldr	r2, [r7, #16]
 8027d28:	6839      	ldr	r1, [r7, #0]
 8027d2a:	68f8      	ldr	r0, [r7, #12]
 8027d2c:	f000 fa54 	bl	80281d8 <SPI_EndRxTransaction>
 8027d30:	4603      	mov	r3, r0
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d002      	beq.n	8027d3c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027d36:	68fb      	ldr	r3, [r7, #12]
 8027d38:	2220      	movs	r2, #32
 8027d3a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027d3c:	68fb      	ldr	r3, [r7, #12]
 8027d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027d40:	2b00      	cmp	r3, #0
 8027d42:	d002      	beq.n	8027d4a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027d44:	2301      	movs	r3, #1
 8027d46:	75fb      	strb	r3, [r7, #23]
 8027d48:	e000      	b.n	8027d4c <HAL_SPI_Receive+0x208>
  }

error :
 8027d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027d4c:	68fb      	ldr	r3, [r7, #12]
 8027d4e:	2201      	movs	r2, #1
 8027d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027d54:	68fb      	ldr	r3, [r7, #12]
 8027d56:	2200      	movs	r2, #0
 8027d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8027d5e:	4618      	mov	r0, r3
 8027d60:	3718      	adds	r7, #24
 8027d62:	46bd      	mov	sp, r7
 8027d64:	bd80      	pop	{r7, pc}

08027d66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027d66:	b580      	push	{r7, lr}
 8027d68:	b08c      	sub	sp, #48	; 0x30
 8027d6a:	af00      	add	r7, sp, #0
 8027d6c:	60f8      	str	r0, [r7, #12]
 8027d6e:	60b9      	str	r1, [r7, #8]
 8027d70:	607a      	str	r2, [r7, #4]
 8027d72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027d74:	2301      	movs	r3, #1
 8027d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027d78:	2300      	movs	r3, #0
 8027d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027d7e:	68fb      	ldr	r3, [r7, #12]
 8027d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027d84:	2b01      	cmp	r3, #1
 8027d86:	d101      	bne.n	8027d8c <HAL_SPI_TransmitReceive+0x26>
 8027d88:	2302      	movs	r3, #2
 8027d8a:	e18a      	b.n	80280a2 <HAL_SPI_TransmitReceive+0x33c>
 8027d8c:	68fb      	ldr	r3, [r7, #12]
 8027d8e:	2201      	movs	r2, #1
 8027d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027d94:	f7fb f9f0 	bl	8023178 <HAL_GetTick>
 8027d98:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027d9a:	68fb      	ldr	r3, [r7, #12]
 8027d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027da4:	68fb      	ldr	r3, [r7, #12]
 8027da6:	685b      	ldr	r3, [r3, #4]
 8027da8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027daa:	887b      	ldrh	r3, [r7, #2]
 8027dac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027dae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027db2:	2b01      	cmp	r3, #1
 8027db4:	d00f      	beq.n	8027dd6 <HAL_SPI_TransmitReceive+0x70>
 8027db6:	69fb      	ldr	r3, [r7, #28]
 8027db8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027dbc:	d107      	bne.n	8027dce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027dbe:	68fb      	ldr	r3, [r7, #12]
 8027dc0:	689b      	ldr	r3, [r3, #8]
 8027dc2:	2b00      	cmp	r3, #0
 8027dc4:	d103      	bne.n	8027dce <HAL_SPI_TransmitReceive+0x68>
 8027dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027dca:	2b04      	cmp	r3, #4
 8027dcc:	d003      	beq.n	8027dd6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027dce:	2302      	movs	r3, #2
 8027dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027dd4:	e15b      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027dd6:	68bb      	ldr	r3, [r7, #8]
 8027dd8:	2b00      	cmp	r3, #0
 8027dda:	d005      	beq.n	8027de8 <HAL_SPI_TransmitReceive+0x82>
 8027ddc:	687b      	ldr	r3, [r7, #4]
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	d002      	beq.n	8027de8 <HAL_SPI_TransmitReceive+0x82>
 8027de2:	887b      	ldrh	r3, [r7, #2]
 8027de4:	2b00      	cmp	r3, #0
 8027de6:	d103      	bne.n	8027df0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027de8:	2301      	movs	r3, #1
 8027dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027dee:	e14e      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027df0:	68fb      	ldr	r3, [r7, #12]
 8027df2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027df6:	b2db      	uxtb	r3, r3
 8027df8:	2b04      	cmp	r3, #4
 8027dfa:	d003      	beq.n	8027e04 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027dfc:	68fb      	ldr	r3, [r7, #12]
 8027dfe:	2205      	movs	r2, #5
 8027e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027e04:	68fb      	ldr	r3, [r7, #12]
 8027e06:	2200      	movs	r2, #0
 8027e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027e0a:	68fb      	ldr	r3, [r7, #12]
 8027e0c:	687a      	ldr	r2, [r7, #4]
 8027e0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027e10:	68fb      	ldr	r3, [r7, #12]
 8027e12:	887a      	ldrh	r2, [r7, #2]
 8027e14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027e16:	68fb      	ldr	r3, [r7, #12]
 8027e18:	887a      	ldrh	r2, [r7, #2]
 8027e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027e1c:	68fb      	ldr	r3, [r7, #12]
 8027e1e:	68ba      	ldr	r2, [r7, #8]
 8027e20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027e22:	68fb      	ldr	r3, [r7, #12]
 8027e24:	887a      	ldrh	r2, [r7, #2]
 8027e26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027e28:	68fb      	ldr	r3, [r7, #12]
 8027e2a:	887a      	ldrh	r2, [r7, #2]
 8027e2c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027e2e:	68fb      	ldr	r3, [r7, #12]
 8027e30:	2200      	movs	r2, #0
 8027e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027e34:	68fb      	ldr	r3, [r7, #12]
 8027e36:	2200      	movs	r2, #0
 8027e38:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027e3a:	68fb      	ldr	r3, [r7, #12]
 8027e3c:	681b      	ldr	r3, [r3, #0]
 8027e3e:	681b      	ldr	r3, [r3, #0]
 8027e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027e44:	2b40      	cmp	r3, #64	; 0x40
 8027e46:	d007      	beq.n	8027e58 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027e48:	68fb      	ldr	r3, [r7, #12]
 8027e4a:	681b      	ldr	r3, [r3, #0]
 8027e4c:	681a      	ldr	r2, [r3, #0]
 8027e4e:	68fb      	ldr	r3, [r7, #12]
 8027e50:	681b      	ldr	r3, [r3, #0]
 8027e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027e58:	68fb      	ldr	r3, [r7, #12]
 8027e5a:	68db      	ldr	r3, [r3, #12]
 8027e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027e60:	d178      	bne.n	8027f54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027e62:	68fb      	ldr	r3, [r7, #12]
 8027e64:	685b      	ldr	r3, [r3, #4]
 8027e66:	2b00      	cmp	r3, #0
 8027e68:	d002      	beq.n	8027e70 <HAL_SPI_TransmitReceive+0x10a>
 8027e6a:	8b7b      	ldrh	r3, [r7, #26]
 8027e6c:	2b01      	cmp	r3, #1
 8027e6e:	d166      	bne.n	8027f3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027e70:	68fb      	ldr	r3, [r7, #12]
 8027e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e74:	881a      	ldrh	r2, [r3, #0]
 8027e76:	68fb      	ldr	r3, [r7, #12]
 8027e78:	681b      	ldr	r3, [r3, #0]
 8027e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027e7c:	68fb      	ldr	r3, [r7, #12]
 8027e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e80:	1c9a      	adds	r2, r3, #2
 8027e82:	68fb      	ldr	r3, [r7, #12]
 8027e84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027e86:	68fb      	ldr	r3, [r7, #12]
 8027e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027e8a:	b29b      	uxth	r3, r3
 8027e8c:	3b01      	subs	r3, #1
 8027e8e:	b29a      	uxth	r2, r3
 8027e90:	68fb      	ldr	r3, [r7, #12]
 8027e92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027e94:	e053      	b.n	8027f3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027e96:	68fb      	ldr	r3, [r7, #12]
 8027e98:	681b      	ldr	r3, [r3, #0]
 8027e9a:	689b      	ldr	r3, [r3, #8]
 8027e9c:	f003 0302 	and.w	r3, r3, #2
 8027ea0:	2b02      	cmp	r3, #2
 8027ea2:	d11b      	bne.n	8027edc <HAL_SPI_TransmitReceive+0x176>
 8027ea4:	68fb      	ldr	r3, [r7, #12]
 8027ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ea8:	b29b      	uxth	r3, r3
 8027eaa:	2b00      	cmp	r3, #0
 8027eac:	d016      	beq.n	8027edc <HAL_SPI_TransmitReceive+0x176>
 8027eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027eb0:	2b01      	cmp	r3, #1
 8027eb2:	d113      	bne.n	8027edc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027eb4:	68fb      	ldr	r3, [r7, #12]
 8027eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027eb8:	881a      	ldrh	r2, [r3, #0]
 8027eba:	68fb      	ldr	r3, [r7, #12]
 8027ebc:	681b      	ldr	r3, [r3, #0]
 8027ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027ec0:	68fb      	ldr	r3, [r7, #12]
 8027ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ec4:	1c9a      	adds	r2, r3, #2
 8027ec6:	68fb      	ldr	r3, [r7, #12]
 8027ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027eca:	68fb      	ldr	r3, [r7, #12]
 8027ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027ece:	b29b      	uxth	r3, r3
 8027ed0:	3b01      	subs	r3, #1
 8027ed2:	b29a      	uxth	r2, r3
 8027ed4:	68fb      	ldr	r3, [r7, #12]
 8027ed6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027ed8:	2300      	movs	r3, #0
 8027eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027edc:	68fb      	ldr	r3, [r7, #12]
 8027ede:	681b      	ldr	r3, [r3, #0]
 8027ee0:	689b      	ldr	r3, [r3, #8]
 8027ee2:	f003 0301 	and.w	r3, r3, #1
 8027ee6:	2b01      	cmp	r3, #1
 8027ee8:	d119      	bne.n	8027f1e <HAL_SPI_TransmitReceive+0x1b8>
 8027eea:	68fb      	ldr	r3, [r7, #12]
 8027eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027eee:	b29b      	uxth	r3, r3
 8027ef0:	2b00      	cmp	r3, #0
 8027ef2:	d014      	beq.n	8027f1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027ef4:	68fb      	ldr	r3, [r7, #12]
 8027ef6:	681b      	ldr	r3, [r3, #0]
 8027ef8:	68da      	ldr	r2, [r3, #12]
 8027efa:	68fb      	ldr	r3, [r7, #12]
 8027efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027efe:	b292      	uxth	r2, r2
 8027f00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027f02:	68fb      	ldr	r3, [r7, #12]
 8027f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f06:	1c9a      	adds	r2, r3, #2
 8027f08:	68fb      	ldr	r3, [r7, #12]
 8027f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027f0c:	68fb      	ldr	r3, [r7, #12]
 8027f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f10:	b29b      	uxth	r3, r3
 8027f12:	3b01      	subs	r3, #1
 8027f14:	b29a      	uxth	r2, r3
 8027f16:	68fb      	ldr	r3, [r7, #12]
 8027f18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027f1a:	2301      	movs	r3, #1
 8027f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027f1e:	f7fb f92b 	bl	8023178 <HAL_GetTick>
 8027f22:	4602      	mov	r2, r0
 8027f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f26:	1ad3      	subs	r3, r2, r3
 8027f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027f2a:	429a      	cmp	r2, r3
 8027f2c:	d807      	bhi.n	8027f3e <HAL_SPI_TransmitReceive+0x1d8>
 8027f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f34:	d003      	beq.n	8027f3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027f36:	2303      	movs	r3, #3
 8027f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027f3c:	e0a7      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027f3e:	68fb      	ldr	r3, [r7, #12]
 8027f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f42:	b29b      	uxth	r3, r3
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	d1a6      	bne.n	8027e96 <HAL_SPI_TransmitReceive+0x130>
 8027f48:	68fb      	ldr	r3, [r7, #12]
 8027f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f4c:	b29b      	uxth	r3, r3
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	d1a1      	bne.n	8027e96 <HAL_SPI_TransmitReceive+0x130>
 8027f52:	e07c      	b.n	802804e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027f54:	68fb      	ldr	r3, [r7, #12]
 8027f56:	685b      	ldr	r3, [r3, #4]
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	d002      	beq.n	8027f62 <HAL_SPI_TransmitReceive+0x1fc>
 8027f5c:	8b7b      	ldrh	r3, [r7, #26]
 8027f5e:	2b01      	cmp	r3, #1
 8027f60:	d16b      	bne.n	802803a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027f62:	68fb      	ldr	r3, [r7, #12]
 8027f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027f66:	68fb      	ldr	r3, [r7, #12]
 8027f68:	681b      	ldr	r3, [r3, #0]
 8027f6a:	330c      	adds	r3, #12
 8027f6c:	7812      	ldrb	r2, [r2, #0]
 8027f6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027f70:	68fb      	ldr	r3, [r7, #12]
 8027f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f74:	1c5a      	adds	r2, r3, #1
 8027f76:	68fb      	ldr	r3, [r7, #12]
 8027f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027f7a:	68fb      	ldr	r3, [r7, #12]
 8027f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f7e:	b29b      	uxth	r3, r3
 8027f80:	3b01      	subs	r3, #1
 8027f82:	b29a      	uxth	r2, r3
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027f88:	e057      	b.n	802803a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027f8a:	68fb      	ldr	r3, [r7, #12]
 8027f8c:	681b      	ldr	r3, [r3, #0]
 8027f8e:	689b      	ldr	r3, [r3, #8]
 8027f90:	f003 0302 	and.w	r3, r3, #2
 8027f94:	2b02      	cmp	r3, #2
 8027f96:	d11c      	bne.n	8027fd2 <HAL_SPI_TransmitReceive+0x26c>
 8027f98:	68fb      	ldr	r3, [r7, #12]
 8027f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f9c:	b29b      	uxth	r3, r3
 8027f9e:	2b00      	cmp	r3, #0
 8027fa0:	d017      	beq.n	8027fd2 <HAL_SPI_TransmitReceive+0x26c>
 8027fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fa4:	2b01      	cmp	r3, #1
 8027fa6:	d114      	bne.n	8027fd2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027fa8:	68fb      	ldr	r3, [r7, #12]
 8027faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027fac:	68fb      	ldr	r3, [r7, #12]
 8027fae:	681b      	ldr	r3, [r3, #0]
 8027fb0:	330c      	adds	r3, #12
 8027fb2:	7812      	ldrb	r2, [r2, #0]
 8027fb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027fb6:	68fb      	ldr	r3, [r7, #12]
 8027fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fba:	1c5a      	adds	r2, r3, #1
 8027fbc:	68fb      	ldr	r3, [r7, #12]
 8027fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027fc0:	68fb      	ldr	r3, [r7, #12]
 8027fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027fc4:	b29b      	uxth	r3, r3
 8027fc6:	3b01      	subs	r3, #1
 8027fc8:	b29a      	uxth	r2, r3
 8027fca:	68fb      	ldr	r3, [r7, #12]
 8027fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027fce:	2300      	movs	r3, #0
 8027fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027fd2:	68fb      	ldr	r3, [r7, #12]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	689b      	ldr	r3, [r3, #8]
 8027fd8:	f003 0301 	and.w	r3, r3, #1
 8027fdc:	2b01      	cmp	r3, #1
 8027fde:	d119      	bne.n	8028014 <HAL_SPI_TransmitReceive+0x2ae>
 8027fe0:	68fb      	ldr	r3, [r7, #12]
 8027fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027fe4:	b29b      	uxth	r3, r3
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	d014      	beq.n	8028014 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027fea:	68fb      	ldr	r3, [r7, #12]
 8027fec:	681b      	ldr	r3, [r3, #0]
 8027fee:	68da      	ldr	r2, [r3, #12]
 8027ff0:	68fb      	ldr	r3, [r7, #12]
 8027ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ff4:	b2d2      	uxtb	r2, r2
 8027ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027ff8:	68fb      	ldr	r3, [r7, #12]
 8027ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027ffc:	1c5a      	adds	r2, r3, #1
 8027ffe:	68fb      	ldr	r3, [r7, #12]
 8028000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028002:	68fb      	ldr	r3, [r7, #12]
 8028004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028006:	b29b      	uxth	r3, r3
 8028008:	3b01      	subs	r3, #1
 802800a:	b29a      	uxth	r2, r3
 802800c:	68fb      	ldr	r3, [r7, #12]
 802800e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028010:	2301      	movs	r3, #1
 8028012:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028014:	f7fb f8b0 	bl	8023178 <HAL_GetTick>
 8028018:	4602      	mov	r2, r0
 802801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802801c:	1ad3      	subs	r3, r2, r3
 802801e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028020:	429a      	cmp	r2, r3
 8028022:	d803      	bhi.n	802802c <HAL_SPI_TransmitReceive+0x2c6>
 8028024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028026:	f1b3 3fff 	cmp.w	r3, #4294967295
 802802a:	d102      	bne.n	8028032 <HAL_SPI_TransmitReceive+0x2cc>
 802802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802802e:	2b00      	cmp	r3, #0
 8028030:	d103      	bne.n	802803a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028032:	2303      	movs	r3, #3
 8028034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028038:	e029      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802803a:	68fb      	ldr	r3, [r7, #12]
 802803c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802803e:	b29b      	uxth	r3, r3
 8028040:	2b00      	cmp	r3, #0
 8028042:	d1a2      	bne.n	8027f8a <HAL_SPI_TransmitReceive+0x224>
 8028044:	68fb      	ldr	r3, [r7, #12]
 8028046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028048:	b29b      	uxth	r3, r3
 802804a:	2b00      	cmp	r3, #0
 802804c:	d19d      	bne.n	8027f8a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802804e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028052:	68f8      	ldr	r0, [r7, #12]
 8028054:	f000 f926 	bl	80282a4 <SPI_EndRxTxTransaction>
 8028058:	4603      	mov	r3, r0
 802805a:	2b00      	cmp	r3, #0
 802805c:	d006      	beq.n	802806c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802805e:	2301      	movs	r3, #1
 8028060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028064:	68fb      	ldr	r3, [r7, #12]
 8028066:	2220      	movs	r2, #32
 8028068:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802806a:	e010      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802806c:	68fb      	ldr	r3, [r7, #12]
 802806e:	689b      	ldr	r3, [r3, #8]
 8028070:	2b00      	cmp	r3, #0
 8028072:	d10b      	bne.n	802808c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028074:	2300      	movs	r3, #0
 8028076:	617b      	str	r3, [r7, #20]
 8028078:	68fb      	ldr	r3, [r7, #12]
 802807a:	681b      	ldr	r3, [r3, #0]
 802807c:	68db      	ldr	r3, [r3, #12]
 802807e:	617b      	str	r3, [r7, #20]
 8028080:	68fb      	ldr	r3, [r7, #12]
 8028082:	681b      	ldr	r3, [r3, #0]
 8028084:	689b      	ldr	r3, [r3, #8]
 8028086:	617b      	str	r3, [r7, #20]
 8028088:	697b      	ldr	r3, [r7, #20]
 802808a:	e000      	b.n	802808e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802808c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802808e:	68fb      	ldr	r3, [r7, #12]
 8028090:	2201      	movs	r2, #1
 8028092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028096:	68fb      	ldr	r3, [r7, #12]
 8028098:	2200      	movs	r2, #0
 802809a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802809e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80280a2:	4618      	mov	r0, r3
 80280a4:	3730      	adds	r7, #48	; 0x30
 80280a6:	46bd      	mov	sp, r7
 80280a8:	bd80      	pop	{r7, pc}

080280aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80280aa:	b480      	push	{r7}
 80280ac:	b083      	sub	sp, #12
 80280ae:	af00      	add	r7, sp, #0
 80280b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80280b2:	687b      	ldr	r3, [r7, #4]
 80280b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80280b8:	b2db      	uxtb	r3, r3
}
 80280ba:	4618      	mov	r0, r3
 80280bc:	370c      	adds	r7, #12
 80280be:	46bd      	mov	sp, r7
 80280c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280c4:	4770      	bx	lr
	...

080280c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80280c8:	b580      	push	{r7, lr}
 80280ca:	b088      	sub	sp, #32
 80280cc:	af00      	add	r7, sp, #0
 80280ce:	60f8      	str	r0, [r7, #12]
 80280d0:	60b9      	str	r1, [r7, #8]
 80280d2:	603b      	str	r3, [r7, #0]
 80280d4:	4613      	mov	r3, r2
 80280d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80280d8:	f7fb f84e 	bl	8023178 <HAL_GetTick>
 80280dc:	4602      	mov	r2, r0
 80280de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280e0:	1a9b      	subs	r3, r3, r2
 80280e2:	683a      	ldr	r2, [r7, #0]
 80280e4:	4413      	add	r3, r2
 80280e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80280e8:	f7fb f846 	bl	8023178 <HAL_GetTick>
 80280ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80280ee:	4b39      	ldr	r3, [pc, #228]	; (80281d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80280f0:	681b      	ldr	r3, [r3, #0]
 80280f2:	015b      	lsls	r3, r3, #5
 80280f4:	0d1b      	lsrs	r3, r3, #20
 80280f6:	69fa      	ldr	r2, [r7, #28]
 80280f8:	fb02 f303 	mul.w	r3, r2, r3
 80280fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80280fe:	e054      	b.n	80281aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028100:	683b      	ldr	r3, [r7, #0]
 8028102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028106:	d050      	beq.n	80281aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028108:	f7fb f836 	bl	8023178 <HAL_GetTick>
 802810c:	4602      	mov	r2, r0
 802810e:	69bb      	ldr	r3, [r7, #24]
 8028110:	1ad3      	subs	r3, r2, r3
 8028112:	69fa      	ldr	r2, [r7, #28]
 8028114:	429a      	cmp	r2, r3
 8028116:	d902      	bls.n	802811e <SPI_WaitFlagStateUntilTimeout+0x56>
 8028118:	69fb      	ldr	r3, [r7, #28]
 802811a:	2b00      	cmp	r3, #0
 802811c:	d13d      	bne.n	802819a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802811e:	68fb      	ldr	r3, [r7, #12]
 8028120:	681b      	ldr	r3, [r3, #0]
 8028122:	685a      	ldr	r2, [r3, #4]
 8028124:	68fb      	ldr	r3, [r7, #12]
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802812c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802812e:	68fb      	ldr	r3, [r7, #12]
 8028130:	685b      	ldr	r3, [r3, #4]
 8028132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028136:	d111      	bne.n	802815c <SPI_WaitFlagStateUntilTimeout+0x94>
 8028138:	68fb      	ldr	r3, [r7, #12]
 802813a:	689b      	ldr	r3, [r3, #8]
 802813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028140:	d004      	beq.n	802814c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028142:	68fb      	ldr	r3, [r7, #12]
 8028144:	689b      	ldr	r3, [r3, #8]
 8028146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802814a:	d107      	bne.n	802815c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802814c:	68fb      	ldr	r3, [r7, #12]
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	681a      	ldr	r2, [r3, #0]
 8028152:	68fb      	ldr	r3, [r7, #12]
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802815a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802815c:	68fb      	ldr	r3, [r7, #12]
 802815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028164:	d10f      	bne.n	8028186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	681b      	ldr	r3, [r3, #0]
 802816a:	681a      	ldr	r2, [r3, #0]
 802816c:	68fb      	ldr	r3, [r7, #12]
 802816e:	681b      	ldr	r3, [r3, #0]
 8028170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028174:	601a      	str	r2, [r3, #0]
 8028176:	68fb      	ldr	r3, [r7, #12]
 8028178:	681b      	ldr	r3, [r3, #0]
 802817a:	681a      	ldr	r2, [r3, #0]
 802817c:	68fb      	ldr	r3, [r7, #12]
 802817e:	681b      	ldr	r3, [r3, #0]
 8028180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028186:	68fb      	ldr	r3, [r7, #12]
 8028188:	2201      	movs	r2, #1
 802818a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802818e:	68fb      	ldr	r3, [r7, #12]
 8028190:	2200      	movs	r2, #0
 8028192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028196:	2303      	movs	r3, #3
 8028198:	e017      	b.n	80281ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802819a:	697b      	ldr	r3, [r7, #20]
 802819c:	2b00      	cmp	r3, #0
 802819e:	d101      	bne.n	80281a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80281a0:	2300      	movs	r3, #0
 80281a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80281a4:	697b      	ldr	r3, [r7, #20]
 80281a6:	3b01      	subs	r3, #1
 80281a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80281aa:	68fb      	ldr	r3, [r7, #12]
 80281ac:	681b      	ldr	r3, [r3, #0]
 80281ae:	689a      	ldr	r2, [r3, #8]
 80281b0:	68bb      	ldr	r3, [r7, #8]
 80281b2:	4013      	ands	r3, r2
 80281b4:	68ba      	ldr	r2, [r7, #8]
 80281b6:	429a      	cmp	r2, r3
 80281b8:	bf0c      	ite	eq
 80281ba:	2301      	moveq	r3, #1
 80281bc:	2300      	movne	r3, #0
 80281be:	b2db      	uxtb	r3, r3
 80281c0:	461a      	mov	r2, r3
 80281c2:	79fb      	ldrb	r3, [r7, #7]
 80281c4:	429a      	cmp	r2, r3
 80281c6:	d19b      	bne.n	8028100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80281c8:	2300      	movs	r3, #0
}
 80281ca:	4618      	mov	r0, r3
 80281cc:	3720      	adds	r7, #32
 80281ce:	46bd      	mov	sp, r7
 80281d0:	bd80      	pop	{r7, pc}
 80281d2:	bf00      	nop
 80281d4:	20000000 	.word	0x20000000

080281d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80281d8:	b580      	push	{r7, lr}
 80281da:	b086      	sub	sp, #24
 80281dc:	af02      	add	r7, sp, #8
 80281de:	60f8      	str	r0, [r7, #12]
 80281e0:	60b9      	str	r1, [r7, #8]
 80281e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80281e4:	68fb      	ldr	r3, [r7, #12]
 80281e6:	685b      	ldr	r3, [r3, #4]
 80281e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80281ec:	d111      	bne.n	8028212 <SPI_EndRxTransaction+0x3a>
 80281ee:	68fb      	ldr	r3, [r7, #12]
 80281f0:	689b      	ldr	r3, [r3, #8]
 80281f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80281f6:	d004      	beq.n	8028202 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80281f8:	68fb      	ldr	r3, [r7, #12]
 80281fa:	689b      	ldr	r3, [r3, #8]
 80281fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028200:	d107      	bne.n	8028212 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028202:	68fb      	ldr	r3, [r7, #12]
 8028204:	681b      	ldr	r3, [r3, #0]
 8028206:	681a      	ldr	r2, [r3, #0]
 8028208:	68fb      	ldr	r3, [r7, #12]
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028210:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028212:	68fb      	ldr	r3, [r7, #12]
 8028214:	685b      	ldr	r3, [r3, #4]
 8028216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802821a:	d12a      	bne.n	8028272 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802821c:	68fb      	ldr	r3, [r7, #12]
 802821e:	689b      	ldr	r3, [r3, #8]
 8028220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028224:	d012      	beq.n	802824c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028226:	687b      	ldr	r3, [r7, #4]
 8028228:	9300      	str	r3, [sp, #0]
 802822a:	68bb      	ldr	r3, [r7, #8]
 802822c:	2200      	movs	r2, #0
 802822e:	2180      	movs	r1, #128	; 0x80
 8028230:	68f8      	ldr	r0, [r7, #12]
 8028232:	f7ff ff49 	bl	80280c8 <SPI_WaitFlagStateUntilTimeout>
 8028236:	4603      	mov	r3, r0
 8028238:	2b00      	cmp	r3, #0
 802823a:	d02d      	beq.n	8028298 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802823c:	68fb      	ldr	r3, [r7, #12]
 802823e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028240:	f043 0220 	orr.w	r2, r3, #32
 8028244:	68fb      	ldr	r3, [r7, #12]
 8028246:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028248:	2303      	movs	r3, #3
 802824a:	e026      	b.n	802829a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802824c:	687b      	ldr	r3, [r7, #4]
 802824e:	9300      	str	r3, [sp, #0]
 8028250:	68bb      	ldr	r3, [r7, #8]
 8028252:	2200      	movs	r2, #0
 8028254:	2101      	movs	r1, #1
 8028256:	68f8      	ldr	r0, [r7, #12]
 8028258:	f7ff ff36 	bl	80280c8 <SPI_WaitFlagStateUntilTimeout>
 802825c:	4603      	mov	r3, r0
 802825e:	2b00      	cmp	r3, #0
 8028260:	d01a      	beq.n	8028298 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028262:	68fb      	ldr	r3, [r7, #12]
 8028264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028266:	f043 0220 	orr.w	r2, r3, #32
 802826a:	68fb      	ldr	r3, [r7, #12]
 802826c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802826e:	2303      	movs	r3, #3
 8028270:	e013      	b.n	802829a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	9300      	str	r3, [sp, #0]
 8028276:	68bb      	ldr	r3, [r7, #8]
 8028278:	2200      	movs	r2, #0
 802827a:	2101      	movs	r1, #1
 802827c:	68f8      	ldr	r0, [r7, #12]
 802827e:	f7ff ff23 	bl	80280c8 <SPI_WaitFlagStateUntilTimeout>
 8028282:	4603      	mov	r3, r0
 8028284:	2b00      	cmp	r3, #0
 8028286:	d007      	beq.n	8028298 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028288:	68fb      	ldr	r3, [r7, #12]
 802828a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802828c:	f043 0220 	orr.w	r2, r3, #32
 8028290:	68fb      	ldr	r3, [r7, #12]
 8028292:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028294:	2303      	movs	r3, #3
 8028296:	e000      	b.n	802829a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028298:	2300      	movs	r3, #0
}
 802829a:	4618      	mov	r0, r3
 802829c:	3710      	adds	r7, #16
 802829e:	46bd      	mov	sp, r7
 80282a0:	bd80      	pop	{r7, pc}
	...

080282a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80282a4:	b580      	push	{r7, lr}
 80282a6:	b088      	sub	sp, #32
 80282a8:	af02      	add	r7, sp, #8
 80282aa:	60f8      	str	r0, [r7, #12]
 80282ac:	60b9      	str	r1, [r7, #8]
 80282ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80282b0:	4b1b      	ldr	r3, [pc, #108]	; (8028320 <SPI_EndRxTxTransaction+0x7c>)
 80282b2:	681b      	ldr	r3, [r3, #0]
 80282b4:	4a1b      	ldr	r2, [pc, #108]	; (8028324 <SPI_EndRxTxTransaction+0x80>)
 80282b6:	fba2 2303 	umull	r2, r3, r2, r3
 80282ba:	0d5b      	lsrs	r3, r3, #21
 80282bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80282c0:	fb02 f303 	mul.w	r3, r2, r3
 80282c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80282c6:	68fb      	ldr	r3, [r7, #12]
 80282c8:	685b      	ldr	r3, [r3, #4]
 80282ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80282ce:	d112      	bne.n	80282f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80282d0:	687b      	ldr	r3, [r7, #4]
 80282d2:	9300      	str	r3, [sp, #0]
 80282d4:	68bb      	ldr	r3, [r7, #8]
 80282d6:	2200      	movs	r2, #0
 80282d8:	2180      	movs	r1, #128	; 0x80
 80282da:	68f8      	ldr	r0, [r7, #12]
 80282dc:	f7ff fef4 	bl	80280c8 <SPI_WaitFlagStateUntilTimeout>
 80282e0:	4603      	mov	r3, r0
 80282e2:	2b00      	cmp	r3, #0
 80282e4:	d016      	beq.n	8028314 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80282e6:	68fb      	ldr	r3, [r7, #12]
 80282e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80282ea:	f043 0220 	orr.w	r2, r3, #32
 80282ee:	68fb      	ldr	r3, [r7, #12]
 80282f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80282f2:	2303      	movs	r3, #3
 80282f4:	e00f      	b.n	8028316 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80282f6:	697b      	ldr	r3, [r7, #20]
 80282f8:	2b00      	cmp	r3, #0
 80282fa:	d00a      	beq.n	8028312 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80282fc:	697b      	ldr	r3, [r7, #20]
 80282fe:	3b01      	subs	r3, #1
 8028300:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028302:	68fb      	ldr	r3, [r7, #12]
 8028304:	681b      	ldr	r3, [r3, #0]
 8028306:	689b      	ldr	r3, [r3, #8]
 8028308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802830c:	2b80      	cmp	r3, #128	; 0x80
 802830e:	d0f2      	beq.n	80282f6 <SPI_EndRxTxTransaction+0x52>
 8028310:	e000      	b.n	8028314 <SPI_EndRxTxTransaction+0x70>
        break;
 8028312:	bf00      	nop
  }

  return HAL_OK;
 8028314:	2300      	movs	r3, #0
}
 8028316:	4618      	mov	r0, r3
 8028318:	3718      	adds	r7, #24
 802831a:	46bd      	mov	sp, r7
 802831c:	bd80      	pop	{r7, pc}
 802831e:	bf00      	nop
 8028320:	20000000 	.word	0x20000000
 8028324:	165e9f81 	.word	0x165e9f81

08028328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028328:	b580      	push	{r7, lr}
 802832a:	b082      	sub	sp, #8
 802832c:	af00      	add	r7, sp, #0
 802832e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028330:	687b      	ldr	r3, [r7, #4]
 8028332:	2b00      	cmp	r3, #0
 8028334:	d101      	bne.n	802833a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028336:	2301      	movs	r3, #1
 8028338:	e041      	b.n	80283be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028340:	b2db      	uxtb	r3, r3
 8028342:	2b00      	cmp	r3, #0
 8028344:	d106      	bne.n	8028354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028346:	687b      	ldr	r3, [r7, #4]
 8028348:	2200      	movs	r2, #0
 802834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802834e:	6878      	ldr	r0, [r7, #4]
 8028350:	f7f9 f9c8 	bl	80216e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028354:	687b      	ldr	r3, [r7, #4]
 8028356:	2202      	movs	r2, #2
 8028358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802835c:	687b      	ldr	r3, [r7, #4]
 802835e:	681a      	ldr	r2, [r3, #0]
 8028360:	687b      	ldr	r3, [r7, #4]
 8028362:	3304      	adds	r3, #4
 8028364:	4619      	mov	r1, r3
 8028366:	4610      	mov	r0, r2
 8028368:	f000 fa96 	bl	8028898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	2201      	movs	r2, #1
 8028370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028374:	687b      	ldr	r3, [r7, #4]
 8028376:	2201      	movs	r2, #1
 8028378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	2201      	movs	r2, #1
 8028380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	2201      	movs	r2, #1
 8028388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802838c:	687b      	ldr	r3, [r7, #4]
 802838e:	2201      	movs	r2, #1
 8028390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028394:	687b      	ldr	r3, [r7, #4]
 8028396:	2201      	movs	r2, #1
 8028398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802839c:	687b      	ldr	r3, [r7, #4]
 802839e:	2201      	movs	r2, #1
 80283a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	2201      	movs	r2, #1
 80283a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80283ac:	687b      	ldr	r3, [r7, #4]
 80283ae:	2201      	movs	r2, #1
 80283b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	2201      	movs	r2, #1
 80283b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80283bc:	2300      	movs	r3, #0
}
 80283be:	4618      	mov	r0, r3
 80283c0:	3708      	adds	r7, #8
 80283c2:	46bd      	mov	sp, r7
 80283c4:	bd80      	pop	{r7, pc}
	...

080283c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80283c8:	b480      	push	{r7}
 80283ca:	b085      	sub	sp, #20
 80283cc:	af00      	add	r7, sp, #0
 80283ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80283d0:	687b      	ldr	r3, [r7, #4]
 80283d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80283d6:	b2db      	uxtb	r3, r3
 80283d8:	2b01      	cmp	r3, #1
 80283da:	d001      	beq.n	80283e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80283dc:	2301      	movs	r3, #1
 80283de:	e04e      	b.n	802847e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80283e0:	687b      	ldr	r3, [r7, #4]
 80283e2:	2202      	movs	r2, #2
 80283e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	681b      	ldr	r3, [r3, #0]
 80283ec:	68da      	ldr	r2, [r3, #12]
 80283ee:	687b      	ldr	r3, [r7, #4]
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	f042 0201 	orr.w	r2, r2, #1
 80283f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80283f8:	687b      	ldr	r3, [r7, #4]
 80283fa:	681b      	ldr	r3, [r3, #0]
 80283fc:	4a23      	ldr	r2, [pc, #140]	; (802848c <HAL_TIM_Base_Start_IT+0xc4>)
 80283fe:	4293      	cmp	r3, r2
 8028400:	d022      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 8028402:	687b      	ldr	r3, [r7, #4]
 8028404:	681b      	ldr	r3, [r3, #0]
 8028406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802840a:	d01d      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 802840c:	687b      	ldr	r3, [r7, #4]
 802840e:	681b      	ldr	r3, [r3, #0]
 8028410:	4a1f      	ldr	r2, [pc, #124]	; (8028490 <HAL_TIM_Base_Start_IT+0xc8>)
 8028412:	4293      	cmp	r3, r2
 8028414:	d018      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 8028416:	687b      	ldr	r3, [r7, #4]
 8028418:	681b      	ldr	r3, [r3, #0]
 802841a:	4a1e      	ldr	r2, [pc, #120]	; (8028494 <HAL_TIM_Base_Start_IT+0xcc>)
 802841c:	4293      	cmp	r3, r2
 802841e:	d013      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 8028420:	687b      	ldr	r3, [r7, #4]
 8028422:	681b      	ldr	r3, [r3, #0]
 8028424:	4a1c      	ldr	r2, [pc, #112]	; (8028498 <HAL_TIM_Base_Start_IT+0xd0>)
 8028426:	4293      	cmp	r3, r2
 8028428:	d00e      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 802842a:	687b      	ldr	r3, [r7, #4]
 802842c:	681b      	ldr	r3, [r3, #0]
 802842e:	4a1b      	ldr	r2, [pc, #108]	; (802849c <HAL_TIM_Base_Start_IT+0xd4>)
 8028430:	4293      	cmp	r3, r2
 8028432:	d009      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	681b      	ldr	r3, [r3, #0]
 8028438:	4a19      	ldr	r2, [pc, #100]	; (80284a0 <HAL_TIM_Base_Start_IT+0xd8>)
 802843a:	4293      	cmp	r3, r2
 802843c:	d004      	beq.n	8028448 <HAL_TIM_Base_Start_IT+0x80>
 802843e:	687b      	ldr	r3, [r7, #4]
 8028440:	681b      	ldr	r3, [r3, #0]
 8028442:	4a18      	ldr	r2, [pc, #96]	; (80284a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8028444:	4293      	cmp	r3, r2
 8028446:	d111      	bne.n	802846c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	681b      	ldr	r3, [r3, #0]
 802844c:	689b      	ldr	r3, [r3, #8]
 802844e:	f003 0307 	and.w	r3, r3, #7
 8028452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028454:	68fb      	ldr	r3, [r7, #12]
 8028456:	2b06      	cmp	r3, #6
 8028458:	d010      	beq.n	802847c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 802845a:	687b      	ldr	r3, [r7, #4]
 802845c:	681b      	ldr	r3, [r3, #0]
 802845e:	681a      	ldr	r2, [r3, #0]
 8028460:	687b      	ldr	r3, [r7, #4]
 8028462:	681b      	ldr	r3, [r3, #0]
 8028464:	f042 0201 	orr.w	r2, r2, #1
 8028468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802846a:	e007      	b.n	802847c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802846c:	687b      	ldr	r3, [r7, #4]
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	681a      	ldr	r2, [r3, #0]
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	681b      	ldr	r3, [r3, #0]
 8028476:	f042 0201 	orr.w	r2, r2, #1
 802847a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802847c:	2300      	movs	r3, #0
}
 802847e:	4618      	mov	r0, r3
 8028480:	3714      	adds	r7, #20
 8028482:	46bd      	mov	sp, r7
 8028484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028488:	4770      	bx	lr
 802848a:	bf00      	nop
 802848c:	40010000 	.word	0x40010000
 8028490:	40000400 	.word	0x40000400
 8028494:	40000800 	.word	0x40000800
 8028498:	40000c00 	.word	0x40000c00
 802849c:	40010400 	.word	0x40010400
 80284a0:	40014000 	.word	0x40014000
 80284a4:	40001800 	.word	0x40001800

080284a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80284a8:	b580      	push	{r7, lr}
 80284aa:	b082      	sub	sp, #8
 80284ac:	af00      	add	r7, sp, #0
 80284ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80284b0:	687b      	ldr	r3, [r7, #4]
 80284b2:	681b      	ldr	r3, [r3, #0]
 80284b4:	691b      	ldr	r3, [r3, #16]
 80284b6:	f003 0302 	and.w	r3, r3, #2
 80284ba:	2b02      	cmp	r3, #2
 80284bc:	d122      	bne.n	8028504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80284be:	687b      	ldr	r3, [r7, #4]
 80284c0:	681b      	ldr	r3, [r3, #0]
 80284c2:	68db      	ldr	r3, [r3, #12]
 80284c4:	f003 0302 	and.w	r3, r3, #2
 80284c8:	2b02      	cmp	r3, #2
 80284ca:	d11b      	bne.n	8028504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80284cc:	687b      	ldr	r3, [r7, #4]
 80284ce:	681b      	ldr	r3, [r3, #0]
 80284d0:	f06f 0202 	mvn.w	r2, #2
 80284d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	2201      	movs	r2, #1
 80284da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80284dc:	687b      	ldr	r3, [r7, #4]
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	699b      	ldr	r3, [r3, #24]
 80284e2:	f003 0303 	and.w	r3, r3, #3
 80284e6:	2b00      	cmp	r3, #0
 80284e8:	d003      	beq.n	80284f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80284ea:	6878      	ldr	r0, [r7, #4]
 80284ec:	f000 f9b5 	bl	802885a <HAL_TIM_IC_CaptureCallback>
 80284f0:	e005      	b.n	80284fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80284f2:	6878      	ldr	r0, [r7, #4]
 80284f4:	f000 f9a7 	bl	8028846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80284f8:	6878      	ldr	r0, [r7, #4]
 80284fa:	f000 f9b8 	bl	802886e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80284fe:	687b      	ldr	r3, [r7, #4]
 8028500:	2200      	movs	r2, #0
 8028502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028504:	687b      	ldr	r3, [r7, #4]
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	691b      	ldr	r3, [r3, #16]
 802850a:	f003 0304 	and.w	r3, r3, #4
 802850e:	2b04      	cmp	r3, #4
 8028510:	d122      	bne.n	8028558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028512:	687b      	ldr	r3, [r7, #4]
 8028514:	681b      	ldr	r3, [r3, #0]
 8028516:	68db      	ldr	r3, [r3, #12]
 8028518:	f003 0304 	and.w	r3, r3, #4
 802851c:	2b04      	cmp	r3, #4
 802851e:	d11b      	bne.n	8028558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028520:	687b      	ldr	r3, [r7, #4]
 8028522:	681b      	ldr	r3, [r3, #0]
 8028524:	f06f 0204 	mvn.w	r2, #4
 8028528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	2202      	movs	r2, #2
 802852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028530:	687b      	ldr	r3, [r7, #4]
 8028532:	681b      	ldr	r3, [r3, #0]
 8028534:	699b      	ldr	r3, [r3, #24]
 8028536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802853a:	2b00      	cmp	r3, #0
 802853c:	d003      	beq.n	8028546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802853e:	6878      	ldr	r0, [r7, #4]
 8028540:	f000 f98b 	bl	802885a <HAL_TIM_IC_CaptureCallback>
 8028544:	e005      	b.n	8028552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028546:	6878      	ldr	r0, [r7, #4]
 8028548:	f000 f97d 	bl	8028846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802854c:	6878      	ldr	r0, [r7, #4]
 802854e:	f000 f98e 	bl	802886e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028552:	687b      	ldr	r3, [r7, #4]
 8028554:	2200      	movs	r2, #0
 8028556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028558:	687b      	ldr	r3, [r7, #4]
 802855a:	681b      	ldr	r3, [r3, #0]
 802855c:	691b      	ldr	r3, [r3, #16]
 802855e:	f003 0308 	and.w	r3, r3, #8
 8028562:	2b08      	cmp	r3, #8
 8028564:	d122      	bne.n	80285ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	681b      	ldr	r3, [r3, #0]
 802856a:	68db      	ldr	r3, [r3, #12]
 802856c:	f003 0308 	and.w	r3, r3, #8
 8028570:	2b08      	cmp	r3, #8
 8028572:	d11b      	bne.n	80285ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028574:	687b      	ldr	r3, [r7, #4]
 8028576:	681b      	ldr	r3, [r3, #0]
 8028578:	f06f 0208 	mvn.w	r2, #8
 802857c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	2204      	movs	r2, #4
 8028582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028584:	687b      	ldr	r3, [r7, #4]
 8028586:	681b      	ldr	r3, [r3, #0]
 8028588:	69db      	ldr	r3, [r3, #28]
 802858a:	f003 0303 	and.w	r3, r3, #3
 802858e:	2b00      	cmp	r3, #0
 8028590:	d003      	beq.n	802859a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028592:	6878      	ldr	r0, [r7, #4]
 8028594:	f000 f961 	bl	802885a <HAL_TIM_IC_CaptureCallback>
 8028598:	e005      	b.n	80285a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802859a:	6878      	ldr	r0, [r7, #4]
 802859c:	f000 f953 	bl	8028846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80285a0:	6878      	ldr	r0, [r7, #4]
 80285a2:	f000 f964 	bl	802886e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80285a6:	687b      	ldr	r3, [r7, #4]
 80285a8:	2200      	movs	r2, #0
 80285aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80285ac:	687b      	ldr	r3, [r7, #4]
 80285ae:	681b      	ldr	r3, [r3, #0]
 80285b0:	691b      	ldr	r3, [r3, #16]
 80285b2:	f003 0310 	and.w	r3, r3, #16
 80285b6:	2b10      	cmp	r3, #16
 80285b8:	d122      	bne.n	8028600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80285ba:	687b      	ldr	r3, [r7, #4]
 80285bc:	681b      	ldr	r3, [r3, #0]
 80285be:	68db      	ldr	r3, [r3, #12]
 80285c0:	f003 0310 	and.w	r3, r3, #16
 80285c4:	2b10      	cmp	r3, #16
 80285c6:	d11b      	bne.n	8028600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	681b      	ldr	r3, [r3, #0]
 80285cc:	f06f 0210 	mvn.w	r2, #16
 80285d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80285d2:	687b      	ldr	r3, [r7, #4]
 80285d4:	2208      	movs	r2, #8
 80285d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80285d8:	687b      	ldr	r3, [r7, #4]
 80285da:	681b      	ldr	r3, [r3, #0]
 80285dc:	69db      	ldr	r3, [r3, #28]
 80285de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80285e2:	2b00      	cmp	r3, #0
 80285e4:	d003      	beq.n	80285ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80285e6:	6878      	ldr	r0, [r7, #4]
 80285e8:	f000 f937 	bl	802885a <HAL_TIM_IC_CaptureCallback>
 80285ec:	e005      	b.n	80285fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80285ee:	6878      	ldr	r0, [r7, #4]
 80285f0:	f000 f929 	bl	8028846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80285f4:	6878      	ldr	r0, [r7, #4]
 80285f6:	f000 f93a 	bl	802886e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80285fa:	687b      	ldr	r3, [r7, #4]
 80285fc:	2200      	movs	r2, #0
 80285fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028600:	687b      	ldr	r3, [r7, #4]
 8028602:	681b      	ldr	r3, [r3, #0]
 8028604:	691b      	ldr	r3, [r3, #16]
 8028606:	f003 0301 	and.w	r3, r3, #1
 802860a:	2b01      	cmp	r3, #1
 802860c:	d10e      	bne.n	802862c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802860e:	687b      	ldr	r3, [r7, #4]
 8028610:	681b      	ldr	r3, [r3, #0]
 8028612:	68db      	ldr	r3, [r3, #12]
 8028614:	f003 0301 	and.w	r3, r3, #1
 8028618:	2b01      	cmp	r3, #1
 802861a:	d107      	bne.n	802862c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802861c:	687b      	ldr	r3, [r7, #4]
 802861e:	681b      	ldr	r3, [r3, #0]
 8028620:	f06f 0201 	mvn.w	r2, #1
 8028624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028626:	6878      	ldr	r0, [r7, #4]
 8028628:	f7f8 fc18 	bl	8020e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802862c:	687b      	ldr	r3, [r7, #4]
 802862e:	681b      	ldr	r3, [r3, #0]
 8028630:	691b      	ldr	r3, [r3, #16]
 8028632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028636:	2b80      	cmp	r3, #128	; 0x80
 8028638:	d10e      	bne.n	8028658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802863a:	687b      	ldr	r3, [r7, #4]
 802863c:	681b      	ldr	r3, [r3, #0]
 802863e:	68db      	ldr	r3, [r3, #12]
 8028640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028644:	2b80      	cmp	r3, #128	; 0x80
 8028646:	d107      	bne.n	8028658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8028648:	687b      	ldr	r3, [r7, #4]
 802864a:	681b      	ldr	r3, [r3, #0]
 802864c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8028650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8028652:	6878      	ldr	r0, [r7, #4]
 8028654:	f000 fae0 	bl	8028c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8028658:	687b      	ldr	r3, [r7, #4]
 802865a:	681b      	ldr	r3, [r3, #0]
 802865c:	691b      	ldr	r3, [r3, #16]
 802865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028662:	2b40      	cmp	r3, #64	; 0x40
 8028664:	d10e      	bne.n	8028684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	681b      	ldr	r3, [r3, #0]
 802866a:	68db      	ldr	r3, [r3, #12]
 802866c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028670:	2b40      	cmp	r3, #64	; 0x40
 8028672:	d107      	bne.n	8028684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8028674:	687b      	ldr	r3, [r7, #4]
 8028676:	681b      	ldr	r3, [r3, #0]
 8028678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802867c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802867e:	6878      	ldr	r0, [r7, #4]
 8028680:	f000 f8ff 	bl	8028882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8028684:	687b      	ldr	r3, [r7, #4]
 8028686:	681b      	ldr	r3, [r3, #0]
 8028688:	691b      	ldr	r3, [r3, #16]
 802868a:	f003 0320 	and.w	r3, r3, #32
 802868e:	2b20      	cmp	r3, #32
 8028690:	d10e      	bne.n	80286b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028692:	687b      	ldr	r3, [r7, #4]
 8028694:	681b      	ldr	r3, [r3, #0]
 8028696:	68db      	ldr	r3, [r3, #12]
 8028698:	f003 0320 	and.w	r3, r3, #32
 802869c:	2b20      	cmp	r3, #32
 802869e:	d107      	bne.n	80286b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80286a0:	687b      	ldr	r3, [r7, #4]
 80286a2:	681b      	ldr	r3, [r3, #0]
 80286a4:	f06f 0220 	mvn.w	r2, #32
 80286a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80286aa:	6878      	ldr	r0, [r7, #4]
 80286ac:	f000 faaa 	bl	8028c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80286b0:	bf00      	nop
 80286b2:	3708      	adds	r7, #8
 80286b4:	46bd      	mov	sp, r7
 80286b6:	bd80      	pop	{r7, pc}

080286b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80286b8:	b580      	push	{r7, lr}
 80286ba:	b084      	sub	sp, #16
 80286bc:	af00      	add	r7, sp, #0
 80286be:	6078      	str	r0, [r7, #4]
 80286c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80286c2:	2300      	movs	r3, #0
 80286c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80286c6:	687b      	ldr	r3, [r7, #4]
 80286c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80286cc:	2b01      	cmp	r3, #1
 80286ce:	d101      	bne.n	80286d4 <HAL_TIM_ConfigClockSource+0x1c>
 80286d0:	2302      	movs	r3, #2
 80286d2:	e0b4      	b.n	802883e <HAL_TIM_ConfigClockSource+0x186>
 80286d4:	687b      	ldr	r3, [r7, #4]
 80286d6:	2201      	movs	r2, #1
 80286d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	2202      	movs	r2, #2
 80286e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80286e4:	687b      	ldr	r3, [r7, #4]
 80286e6:	681b      	ldr	r3, [r3, #0]
 80286e8:	689b      	ldr	r3, [r3, #8]
 80286ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80286ec:	68bb      	ldr	r3, [r7, #8]
 80286ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80286f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80286f4:	68bb      	ldr	r3, [r7, #8]
 80286f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80286fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80286fc:	687b      	ldr	r3, [r7, #4]
 80286fe:	681b      	ldr	r3, [r3, #0]
 8028700:	68ba      	ldr	r2, [r7, #8]
 8028702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8028704:	683b      	ldr	r3, [r7, #0]
 8028706:	681b      	ldr	r3, [r3, #0]
 8028708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802870c:	d03e      	beq.n	802878c <HAL_TIM_ConfigClockSource+0xd4>
 802870e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028712:	f200 8087 	bhi.w	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 8028716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802871a:	f000 8086 	beq.w	802882a <HAL_TIM_ConfigClockSource+0x172>
 802871e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028722:	d87f      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 8028724:	2b70      	cmp	r3, #112	; 0x70
 8028726:	d01a      	beq.n	802875e <HAL_TIM_ConfigClockSource+0xa6>
 8028728:	2b70      	cmp	r3, #112	; 0x70
 802872a:	d87b      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 802872c:	2b60      	cmp	r3, #96	; 0x60
 802872e:	d050      	beq.n	80287d2 <HAL_TIM_ConfigClockSource+0x11a>
 8028730:	2b60      	cmp	r3, #96	; 0x60
 8028732:	d877      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 8028734:	2b50      	cmp	r3, #80	; 0x50
 8028736:	d03c      	beq.n	80287b2 <HAL_TIM_ConfigClockSource+0xfa>
 8028738:	2b50      	cmp	r3, #80	; 0x50
 802873a:	d873      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 802873c:	2b40      	cmp	r3, #64	; 0x40
 802873e:	d058      	beq.n	80287f2 <HAL_TIM_ConfigClockSource+0x13a>
 8028740:	2b40      	cmp	r3, #64	; 0x40
 8028742:	d86f      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 8028744:	2b30      	cmp	r3, #48	; 0x30
 8028746:	d064      	beq.n	8028812 <HAL_TIM_ConfigClockSource+0x15a>
 8028748:	2b30      	cmp	r3, #48	; 0x30
 802874a:	d86b      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 802874c:	2b20      	cmp	r3, #32
 802874e:	d060      	beq.n	8028812 <HAL_TIM_ConfigClockSource+0x15a>
 8028750:	2b20      	cmp	r3, #32
 8028752:	d867      	bhi.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
 8028754:	2b00      	cmp	r3, #0
 8028756:	d05c      	beq.n	8028812 <HAL_TIM_ConfigClockSource+0x15a>
 8028758:	2b10      	cmp	r3, #16
 802875a:	d05a      	beq.n	8028812 <HAL_TIM_ConfigClockSource+0x15a>
 802875c:	e062      	b.n	8028824 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	6818      	ldr	r0, [r3, #0]
 8028762:	683b      	ldr	r3, [r7, #0]
 8028764:	6899      	ldr	r1, [r3, #8]
 8028766:	683b      	ldr	r3, [r7, #0]
 8028768:	685a      	ldr	r2, [r3, #4]
 802876a:	683b      	ldr	r3, [r7, #0]
 802876c:	68db      	ldr	r3, [r3, #12]
 802876e:	f000 f9ad 	bl	8028acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	681b      	ldr	r3, [r3, #0]
 8028776:	689b      	ldr	r3, [r3, #8]
 8028778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802877a:	68bb      	ldr	r3, [r7, #8]
 802877c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8028780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	681b      	ldr	r3, [r3, #0]
 8028786:	68ba      	ldr	r2, [r7, #8]
 8028788:	609a      	str	r2, [r3, #8]
      break;
 802878a:	e04f      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802878c:	687b      	ldr	r3, [r7, #4]
 802878e:	6818      	ldr	r0, [r3, #0]
 8028790:	683b      	ldr	r3, [r7, #0]
 8028792:	6899      	ldr	r1, [r3, #8]
 8028794:	683b      	ldr	r3, [r7, #0]
 8028796:	685a      	ldr	r2, [r3, #4]
 8028798:	683b      	ldr	r3, [r7, #0]
 802879a:	68db      	ldr	r3, [r3, #12]
 802879c:	f000 f996 	bl	8028acc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80287a0:	687b      	ldr	r3, [r7, #4]
 80287a2:	681b      	ldr	r3, [r3, #0]
 80287a4:	689a      	ldr	r2, [r3, #8]
 80287a6:	687b      	ldr	r3, [r7, #4]
 80287a8:	681b      	ldr	r3, [r3, #0]
 80287aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80287ae:	609a      	str	r2, [r3, #8]
      break;
 80287b0:	e03c      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	6818      	ldr	r0, [r3, #0]
 80287b6:	683b      	ldr	r3, [r7, #0]
 80287b8:	6859      	ldr	r1, [r3, #4]
 80287ba:	683b      	ldr	r3, [r7, #0]
 80287bc:	68db      	ldr	r3, [r3, #12]
 80287be:	461a      	mov	r2, r3
 80287c0:	f000 f90a 	bl	80289d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80287c4:	687b      	ldr	r3, [r7, #4]
 80287c6:	681b      	ldr	r3, [r3, #0]
 80287c8:	2150      	movs	r1, #80	; 0x50
 80287ca:	4618      	mov	r0, r3
 80287cc:	f000 f963 	bl	8028a96 <TIM_ITRx_SetConfig>
      break;
 80287d0:	e02c      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80287d2:	687b      	ldr	r3, [r7, #4]
 80287d4:	6818      	ldr	r0, [r3, #0]
 80287d6:	683b      	ldr	r3, [r7, #0]
 80287d8:	6859      	ldr	r1, [r3, #4]
 80287da:	683b      	ldr	r3, [r7, #0]
 80287dc:	68db      	ldr	r3, [r3, #12]
 80287de:	461a      	mov	r2, r3
 80287e0:	f000 f929 	bl	8028a36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	681b      	ldr	r3, [r3, #0]
 80287e8:	2160      	movs	r1, #96	; 0x60
 80287ea:	4618      	mov	r0, r3
 80287ec:	f000 f953 	bl	8028a96 <TIM_ITRx_SetConfig>
      break;
 80287f0:	e01c      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80287f2:	687b      	ldr	r3, [r7, #4]
 80287f4:	6818      	ldr	r0, [r3, #0]
 80287f6:	683b      	ldr	r3, [r7, #0]
 80287f8:	6859      	ldr	r1, [r3, #4]
 80287fa:	683b      	ldr	r3, [r7, #0]
 80287fc:	68db      	ldr	r3, [r3, #12]
 80287fe:	461a      	mov	r2, r3
 8028800:	f000 f8ea 	bl	80289d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8028804:	687b      	ldr	r3, [r7, #4]
 8028806:	681b      	ldr	r3, [r3, #0]
 8028808:	2140      	movs	r1, #64	; 0x40
 802880a:	4618      	mov	r0, r3
 802880c:	f000 f943 	bl	8028a96 <TIM_ITRx_SetConfig>
      break;
 8028810:	e00c      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8028812:	687b      	ldr	r3, [r7, #4]
 8028814:	681a      	ldr	r2, [r3, #0]
 8028816:	683b      	ldr	r3, [r7, #0]
 8028818:	681b      	ldr	r3, [r3, #0]
 802881a:	4619      	mov	r1, r3
 802881c:	4610      	mov	r0, r2
 802881e:	f000 f93a 	bl	8028a96 <TIM_ITRx_SetConfig>
      break;
 8028822:	e003      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8028824:	2301      	movs	r3, #1
 8028826:	73fb      	strb	r3, [r7, #15]
      break;
 8028828:	e000      	b.n	802882c <HAL_TIM_ConfigClockSource+0x174>
      break;
 802882a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	2201      	movs	r2, #1
 8028830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	2200      	movs	r2, #0
 8028838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802883c:	7bfb      	ldrb	r3, [r7, #15]
}
 802883e:	4618      	mov	r0, r3
 8028840:	3710      	adds	r7, #16
 8028842:	46bd      	mov	sp, r7
 8028844:	bd80      	pop	{r7, pc}

08028846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8028846:	b480      	push	{r7}
 8028848:	b083      	sub	sp, #12
 802884a:	af00      	add	r7, sp, #0
 802884c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802884e:	bf00      	nop
 8028850:	370c      	adds	r7, #12
 8028852:	46bd      	mov	sp, r7
 8028854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028858:	4770      	bx	lr

0802885a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802885a:	b480      	push	{r7}
 802885c:	b083      	sub	sp, #12
 802885e:	af00      	add	r7, sp, #0
 8028860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8028862:	bf00      	nop
 8028864:	370c      	adds	r7, #12
 8028866:	46bd      	mov	sp, r7
 8028868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802886c:	4770      	bx	lr

0802886e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802886e:	b480      	push	{r7}
 8028870:	b083      	sub	sp, #12
 8028872:	af00      	add	r7, sp, #0
 8028874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8028876:	bf00      	nop
 8028878:	370c      	adds	r7, #12
 802887a:	46bd      	mov	sp, r7
 802887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028880:	4770      	bx	lr

08028882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8028882:	b480      	push	{r7}
 8028884:	b083      	sub	sp, #12
 8028886:	af00      	add	r7, sp, #0
 8028888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802888a:	bf00      	nop
 802888c:	370c      	adds	r7, #12
 802888e:	46bd      	mov	sp, r7
 8028890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028894:	4770      	bx	lr
	...

08028898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8028898:	b480      	push	{r7}
 802889a:	b085      	sub	sp, #20
 802889c:	af00      	add	r7, sp, #0
 802889e:	6078      	str	r0, [r7, #4]
 80288a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	681b      	ldr	r3, [r3, #0]
 80288a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	4a40      	ldr	r2, [pc, #256]	; (80289ac <TIM_Base_SetConfig+0x114>)
 80288ac:	4293      	cmp	r3, r2
 80288ae:	d013      	beq.n	80288d8 <TIM_Base_SetConfig+0x40>
 80288b0:	687b      	ldr	r3, [r7, #4]
 80288b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80288b6:	d00f      	beq.n	80288d8 <TIM_Base_SetConfig+0x40>
 80288b8:	687b      	ldr	r3, [r7, #4]
 80288ba:	4a3d      	ldr	r2, [pc, #244]	; (80289b0 <TIM_Base_SetConfig+0x118>)
 80288bc:	4293      	cmp	r3, r2
 80288be:	d00b      	beq.n	80288d8 <TIM_Base_SetConfig+0x40>
 80288c0:	687b      	ldr	r3, [r7, #4]
 80288c2:	4a3c      	ldr	r2, [pc, #240]	; (80289b4 <TIM_Base_SetConfig+0x11c>)
 80288c4:	4293      	cmp	r3, r2
 80288c6:	d007      	beq.n	80288d8 <TIM_Base_SetConfig+0x40>
 80288c8:	687b      	ldr	r3, [r7, #4]
 80288ca:	4a3b      	ldr	r2, [pc, #236]	; (80289b8 <TIM_Base_SetConfig+0x120>)
 80288cc:	4293      	cmp	r3, r2
 80288ce:	d003      	beq.n	80288d8 <TIM_Base_SetConfig+0x40>
 80288d0:	687b      	ldr	r3, [r7, #4]
 80288d2:	4a3a      	ldr	r2, [pc, #232]	; (80289bc <TIM_Base_SetConfig+0x124>)
 80288d4:	4293      	cmp	r3, r2
 80288d6:	d108      	bne.n	80288ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80288d8:	68fb      	ldr	r3, [r7, #12]
 80288da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80288de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80288e0:	683b      	ldr	r3, [r7, #0]
 80288e2:	685b      	ldr	r3, [r3, #4]
 80288e4:	68fa      	ldr	r2, [r7, #12]
 80288e6:	4313      	orrs	r3, r2
 80288e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80288ea:	687b      	ldr	r3, [r7, #4]
 80288ec:	4a2f      	ldr	r2, [pc, #188]	; (80289ac <TIM_Base_SetConfig+0x114>)
 80288ee:	4293      	cmp	r3, r2
 80288f0:	d02b      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 80288f2:	687b      	ldr	r3, [r7, #4]
 80288f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80288f8:	d027      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 80288fa:	687b      	ldr	r3, [r7, #4]
 80288fc:	4a2c      	ldr	r2, [pc, #176]	; (80289b0 <TIM_Base_SetConfig+0x118>)
 80288fe:	4293      	cmp	r3, r2
 8028900:	d023      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	4a2b      	ldr	r2, [pc, #172]	; (80289b4 <TIM_Base_SetConfig+0x11c>)
 8028906:	4293      	cmp	r3, r2
 8028908:	d01f      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 802890a:	687b      	ldr	r3, [r7, #4]
 802890c:	4a2a      	ldr	r2, [pc, #168]	; (80289b8 <TIM_Base_SetConfig+0x120>)
 802890e:	4293      	cmp	r3, r2
 8028910:	d01b      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 8028912:	687b      	ldr	r3, [r7, #4]
 8028914:	4a29      	ldr	r2, [pc, #164]	; (80289bc <TIM_Base_SetConfig+0x124>)
 8028916:	4293      	cmp	r3, r2
 8028918:	d017      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	4a28      	ldr	r2, [pc, #160]	; (80289c0 <TIM_Base_SetConfig+0x128>)
 802891e:	4293      	cmp	r3, r2
 8028920:	d013      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 8028922:	687b      	ldr	r3, [r7, #4]
 8028924:	4a27      	ldr	r2, [pc, #156]	; (80289c4 <TIM_Base_SetConfig+0x12c>)
 8028926:	4293      	cmp	r3, r2
 8028928:	d00f      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	4a26      	ldr	r2, [pc, #152]	; (80289c8 <TIM_Base_SetConfig+0x130>)
 802892e:	4293      	cmp	r3, r2
 8028930:	d00b      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 8028932:	687b      	ldr	r3, [r7, #4]
 8028934:	4a25      	ldr	r2, [pc, #148]	; (80289cc <TIM_Base_SetConfig+0x134>)
 8028936:	4293      	cmp	r3, r2
 8028938:	d007      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	4a24      	ldr	r2, [pc, #144]	; (80289d0 <TIM_Base_SetConfig+0x138>)
 802893e:	4293      	cmp	r3, r2
 8028940:	d003      	beq.n	802894a <TIM_Base_SetConfig+0xb2>
 8028942:	687b      	ldr	r3, [r7, #4]
 8028944:	4a23      	ldr	r2, [pc, #140]	; (80289d4 <TIM_Base_SetConfig+0x13c>)
 8028946:	4293      	cmp	r3, r2
 8028948:	d108      	bne.n	802895c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802894a:	68fb      	ldr	r3, [r7, #12]
 802894c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8028952:	683b      	ldr	r3, [r7, #0]
 8028954:	68db      	ldr	r3, [r3, #12]
 8028956:	68fa      	ldr	r2, [r7, #12]
 8028958:	4313      	orrs	r3, r2
 802895a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802895c:	68fb      	ldr	r3, [r7, #12]
 802895e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8028962:	683b      	ldr	r3, [r7, #0]
 8028964:	695b      	ldr	r3, [r3, #20]
 8028966:	4313      	orrs	r3, r2
 8028968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802896a:	687b      	ldr	r3, [r7, #4]
 802896c:	68fa      	ldr	r2, [r7, #12]
 802896e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8028970:	683b      	ldr	r3, [r7, #0]
 8028972:	689a      	ldr	r2, [r3, #8]
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8028978:	683b      	ldr	r3, [r7, #0]
 802897a:	681a      	ldr	r2, [r3, #0]
 802897c:	687b      	ldr	r3, [r7, #4]
 802897e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8028980:	687b      	ldr	r3, [r7, #4]
 8028982:	4a0a      	ldr	r2, [pc, #40]	; (80289ac <TIM_Base_SetConfig+0x114>)
 8028984:	4293      	cmp	r3, r2
 8028986:	d003      	beq.n	8028990 <TIM_Base_SetConfig+0xf8>
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	4a0c      	ldr	r2, [pc, #48]	; (80289bc <TIM_Base_SetConfig+0x124>)
 802898c:	4293      	cmp	r3, r2
 802898e:	d103      	bne.n	8028998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8028990:	683b      	ldr	r3, [r7, #0]
 8028992:	691a      	ldr	r2, [r3, #16]
 8028994:	687b      	ldr	r3, [r7, #4]
 8028996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8028998:	687b      	ldr	r3, [r7, #4]
 802899a:	2201      	movs	r2, #1
 802899c:	615a      	str	r2, [r3, #20]
}
 802899e:	bf00      	nop
 80289a0:	3714      	adds	r7, #20
 80289a2:	46bd      	mov	sp, r7
 80289a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289a8:	4770      	bx	lr
 80289aa:	bf00      	nop
 80289ac:	40010000 	.word	0x40010000
 80289b0:	40000400 	.word	0x40000400
 80289b4:	40000800 	.word	0x40000800
 80289b8:	40000c00 	.word	0x40000c00
 80289bc:	40010400 	.word	0x40010400
 80289c0:	40014000 	.word	0x40014000
 80289c4:	40014400 	.word	0x40014400
 80289c8:	40014800 	.word	0x40014800
 80289cc:	40001800 	.word	0x40001800
 80289d0:	40001c00 	.word	0x40001c00
 80289d4:	40002000 	.word	0x40002000

080289d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80289d8:	b480      	push	{r7}
 80289da:	b087      	sub	sp, #28
 80289dc:	af00      	add	r7, sp, #0
 80289de:	60f8      	str	r0, [r7, #12]
 80289e0:	60b9      	str	r1, [r7, #8]
 80289e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80289e4:	68fb      	ldr	r3, [r7, #12]
 80289e6:	6a1b      	ldr	r3, [r3, #32]
 80289e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80289ea:	68fb      	ldr	r3, [r7, #12]
 80289ec:	6a1b      	ldr	r3, [r3, #32]
 80289ee:	f023 0201 	bic.w	r2, r3, #1
 80289f2:	68fb      	ldr	r3, [r7, #12]
 80289f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80289f6:	68fb      	ldr	r3, [r7, #12]
 80289f8:	699b      	ldr	r3, [r3, #24]
 80289fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80289fc:	693b      	ldr	r3, [r7, #16]
 80289fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8028a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8028a04:	687b      	ldr	r3, [r7, #4]
 8028a06:	011b      	lsls	r3, r3, #4
 8028a08:	693a      	ldr	r2, [r7, #16]
 8028a0a:	4313      	orrs	r3, r2
 8028a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8028a0e:	697b      	ldr	r3, [r7, #20]
 8028a10:	f023 030a 	bic.w	r3, r3, #10
 8028a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8028a16:	697a      	ldr	r2, [r7, #20]
 8028a18:	68bb      	ldr	r3, [r7, #8]
 8028a1a:	4313      	orrs	r3, r2
 8028a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	693a      	ldr	r2, [r7, #16]
 8028a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028a24:	68fb      	ldr	r3, [r7, #12]
 8028a26:	697a      	ldr	r2, [r7, #20]
 8028a28:	621a      	str	r2, [r3, #32]
}
 8028a2a:	bf00      	nop
 8028a2c:	371c      	adds	r7, #28
 8028a2e:	46bd      	mov	sp, r7
 8028a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a34:	4770      	bx	lr

08028a36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028a36:	b480      	push	{r7}
 8028a38:	b087      	sub	sp, #28
 8028a3a:	af00      	add	r7, sp, #0
 8028a3c:	60f8      	str	r0, [r7, #12]
 8028a3e:	60b9      	str	r1, [r7, #8]
 8028a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	6a1b      	ldr	r3, [r3, #32]
 8028a46:	f023 0210 	bic.w	r2, r3, #16
 8028a4a:	68fb      	ldr	r3, [r7, #12]
 8028a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028a4e:	68fb      	ldr	r3, [r7, #12]
 8028a50:	699b      	ldr	r3, [r3, #24]
 8028a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8028a54:	68fb      	ldr	r3, [r7, #12]
 8028a56:	6a1b      	ldr	r3, [r3, #32]
 8028a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8028a5a:	697b      	ldr	r3, [r7, #20]
 8028a5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8028a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8028a62:	687b      	ldr	r3, [r7, #4]
 8028a64:	031b      	lsls	r3, r3, #12
 8028a66:	697a      	ldr	r2, [r7, #20]
 8028a68:	4313      	orrs	r3, r2
 8028a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8028a6c:	693b      	ldr	r3, [r7, #16]
 8028a6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8028a72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8028a74:	68bb      	ldr	r3, [r7, #8]
 8028a76:	011b      	lsls	r3, r3, #4
 8028a78:	693a      	ldr	r2, [r7, #16]
 8028a7a:	4313      	orrs	r3, r2
 8028a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	697a      	ldr	r2, [r7, #20]
 8028a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028a84:	68fb      	ldr	r3, [r7, #12]
 8028a86:	693a      	ldr	r2, [r7, #16]
 8028a88:	621a      	str	r2, [r3, #32]
}
 8028a8a:	bf00      	nop
 8028a8c:	371c      	adds	r7, #28
 8028a8e:	46bd      	mov	sp, r7
 8028a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a94:	4770      	bx	lr

08028a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8028a96:	b480      	push	{r7}
 8028a98:	b085      	sub	sp, #20
 8028a9a:	af00      	add	r7, sp, #0
 8028a9c:	6078      	str	r0, [r7, #4]
 8028a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8028aa0:	687b      	ldr	r3, [r7, #4]
 8028aa2:	689b      	ldr	r3, [r3, #8]
 8028aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8028aa6:	68fb      	ldr	r3, [r7, #12]
 8028aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8028aae:	683a      	ldr	r2, [r7, #0]
 8028ab0:	68fb      	ldr	r3, [r7, #12]
 8028ab2:	4313      	orrs	r3, r2
 8028ab4:	f043 0307 	orr.w	r3, r3, #7
 8028ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028aba:	687b      	ldr	r3, [r7, #4]
 8028abc:	68fa      	ldr	r2, [r7, #12]
 8028abe:	609a      	str	r2, [r3, #8]
}
 8028ac0:	bf00      	nop
 8028ac2:	3714      	adds	r7, #20
 8028ac4:	46bd      	mov	sp, r7
 8028ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028aca:	4770      	bx	lr

08028acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028acc:	b480      	push	{r7}
 8028ace:	b087      	sub	sp, #28
 8028ad0:	af00      	add	r7, sp, #0
 8028ad2:	60f8      	str	r0, [r7, #12]
 8028ad4:	60b9      	str	r1, [r7, #8]
 8028ad6:	607a      	str	r2, [r7, #4]
 8028ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028ada:	68fb      	ldr	r3, [r7, #12]
 8028adc:	689b      	ldr	r3, [r3, #8]
 8028ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028ae0:	697b      	ldr	r3, [r7, #20]
 8028ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028ae8:	683b      	ldr	r3, [r7, #0]
 8028aea:	021a      	lsls	r2, r3, #8
 8028aec:	687b      	ldr	r3, [r7, #4]
 8028aee:	431a      	orrs	r2, r3
 8028af0:	68bb      	ldr	r3, [r7, #8]
 8028af2:	4313      	orrs	r3, r2
 8028af4:	697a      	ldr	r2, [r7, #20]
 8028af6:	4313      	orrs	r3, r2
 8028af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	697a      	ldr	r2, [r7, #20]
 8028afe:	609a      	str	r2, [r3, #8]
}
 8028b00:	bf00      	nop
 8028b02:	371c      	adds	r7, #28
 8028b04:	46bd      	mov	sp, r7
 8028b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b0a:	4770      	bx	lr

08028b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028b0c:	b480      	push	{r7}
 8028b0e:	b085      	sub	sp, #20
 8028b10:	af00      	add	r7, sp, #0
 8028b12:	6078      	str	r0, [r7, #4]
 8028b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028b16:	687b      	ldr	r3, [r7, #4]
 8028b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028b1c:	2b01      	cmp	r3, #1
 8028b1e:	d101      	bne.n	8028b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8028b20:	2302      	movs	r3, #2
 8028b22:	e05a      	b.n	8028bda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028b24:	687b      	ldr	r3, [r7, #4]
 8028b26:	2201      	movs	r2, #1
 8028b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	2202      	movs	r2, #2
 8028b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028b34:	687b      	ldr	r3, [r7, #4]
 8028b36:	681b      	ldr	r3, [r3, #0]
 8028b38:	685b      	ldr	r3, [r3, #4]
 8028b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028b3c:	687b      	ldr	r3, [r7, #4]
 8028b3e:	681b      	ldr	r3, [r3, #0]
 8028b40:	689b      	ldr	r3, [r3, #8]
 8028b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028b44:	68fb      	ldr	r3, [r7, #12]
 8028b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028b4c:	683b      	ldr	r3, [r7, #0]
 8028b4e:	681b      	ldr	r3, [r3, #0]
 8028b50:	68fa      	ldr	r2, [r7, #12]
 8028b52:	4313      	orrs	r3, r2
 8028b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8028b56:	687b      	ldr	r3, [r7, #4]
 8028b58:	681b      	ldr	r3, [r3, #0]
 8028b5a:	68fa      	ldr	r2, [r7, #12]
 8028b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028b5e:	687b      	ldr	r3, [r7, #4]
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	4a21      	ldr	r2, [pc, #132]	; (8028be8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8028b64:	4293      	cmp	r3, r2
 8028b66:	d022      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b68:	687b      	ldr	r3, [r7, #4]
 8028b6a:	681b      	ldr	r3, [r3, #0]
 8028b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028b70:	d01d      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b72:	687b      	ldr	r3, [r7, #4]
 8028b74:	681b      	ldr	r3, [r3, #0]
 8028b76:	4a1d      	ldr	r2, [pc, #116]	; (8028bec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8028b78:	4293      	cmp	r3, r2
 8028b7a:	d018      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b7c:	687b      	ldr	r3, [r7, #4]
 8028b7e:	681b      	ldr	r3, [r3, #0]
 8028b80:	4a1b      	ldr	r2, [pc, #108]	; (8028bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8028b82:	4293      	cmp	r3, r2
 8028b84:	d013      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b86:	687b      	ldr	r3, [r7, #4]
 8028b88:	681b      	ldr	r3, [r3, #0]
 8028b8a:	4a1a      	ldr	r2, [pc, #104]	; (8028bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8028b8c:	4293      	cmp	r3, r2
 8028b8e:	d00e      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b90:	687b      	ldr	r3, [r7, #4]
 8028b92:	681b      	ldr	r3, [r3, #0]
 8028b94:	4a18      	ldr	r2, [pc, #96]	; (8028bf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8028b96:	4293      	cmp	r3, r2
 8028b98:	d009      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b9a:	687b      	ldr	r3, [r7, #4]
 8028b9c:	681b      	ldr	r3, [r3, #0]
 8028b9e:	4a17      	ldr	r2, [pc, #92]	; (8028bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8028ba0:	4293      	cmp	r3, r2
 8028ba2:	d004      	beq.n	8028bae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028ba4:	687b      	ldr	r3, [r7, #4]
 8028ba6:	681b      	ldr	r3, [r3, #0]
 8028ba8:	4a15      	ldr	r2, [pc, #84]	; (8028c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8028baa:	4293      	cmp	r3, r2
 8028bac:	d10c      	bne.n	8028bc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8028bae:	68bb      	ldr	r3, [r7, #8]
 8028bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028bb6:	683b      	ldr	r3, [r7, #0]
 8028bb8:	685b      	ldr	r3, [r3, #4]
 8028bba:	68ba      	ldr	r2, [r7, #8]
 8028bbc:	4313      	orrs	r3, r2
 8028bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028bc0:	687b      	ldr	r3, [r7, #4]
 8028bc2:	681b      	ldr	r3, [r3, #0]
 8028bc4:	68ba      	ldr	r2, [r7, #8]
 8028bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028bc8:	687b      	ldr	r3, [r7, #4]
 8028bca:	2201      	movs	r2, #1
 8028bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028bd0:	687b      	ldr	r3, [r7, #4]
 8028bd2:	2200      	movs	r2, #0
 8028bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028bd8:	2300      	movs	r3, #0
}
 8028bda:	4618      	mov	r0, r3
 8028bdc:	3714      	adds	r7, #20
 8028bde:	46bd      	mov	sp, r7
 8028be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028be4:	4770      	bx	lr
 8028be6:	bf00      	nop
 8028be8:	40010000 	.word	0x40010000
 8028bec:	40000400 	.word	0x40000400
 8028bf0:	40000800 	.word	0x40000800
 8028bf4:	40000c00 	.word	0x40000c00
 8028bf8:	40010400 	.word	0x40010400
 8028bfc:	40014000 	.word	0x40014000
 8028c00:	40001800 	.word	0x40001800

08028c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028c04:	b480      	push	{r7}
 8028c06:	b083      	sub	sp, #12
 8028c08:	af00      	add	r7, sp, #0
 8028c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028c0c:	bf00      	nop
 8028c0e:	370c      	adds	r7, #12
 8028c10:	46bd      	mov	sp, r7
 8028c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c16:	4770      	bx	lr

08028c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028c18:	b480      	push	{r7}
 8028c1a:	b083      	sub	sp, #12
 8028c1c:	af00      	add	r7, sp, #0
 8028c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028c20:	bf00      	nop
 8028c22:	370c      	adds	r7, #12
 8028c24:	46bd      	mov	sp, r7
 8028c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c2a:	4770      	bx	lr

08028c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028c2c:	b580      	push	{r7, lr}
 8028c2e:	b082      	sub	sp, #8
 8028c30:	af00      	add	r7, sp, #0
 8028c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028c34:	687b      	ldr	r3, [r7, #4]
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	d101      	bne.n	8028c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028c3a:	2301      	movs	r3, #1
 8028c3c:	e03f      	b.n	8028cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028c3e:	687b      	ldr	r3, [r7, #4]
 8028c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028c44:	b2db      	uxtb	r3, r3
 8028c46:	2b00      	cmp	r3, #0
 8028c48:	d106      	bne.n	8028c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028c4a:	687b      	ldr	r3, [r7, #4]
 8028c4c:	2200      	movs	r2, #0
 8028c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028c52:	6878      	ldr	r0, [r7, #4]
 8028c54:	f7f8 fd68 	bl	8021728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028c58:	687b      	ldr	r3, [r7, #4]
 8028c5a:	2224      	movs	r2, #36	; 0x24
 8028c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8028c60:	687b      	ldr	r3, [r7, #4]
 8028c62:	681b      	ldr	r3, [r3, #0]
 8028c64:	68da      	ldr	r2, [r3, #12]
 8028c66:	687b      	ldr	r3, [r7, #4]
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8028c70:	6878      	ldr	r0, [r7, #4]
 8028c72:	f000 fddf 	bl	8029834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028c76:	687b      	ldr	r3, [r7, #4]
 8028c78:	681b      	ldr	r3, [r3, #0]
 8028c7a:	691a      	ldr	r2, [r3, #16]
 8028c7c:	687b      	ldr	r3, [r7, #4]
 8028c7e:	681b      	ldr	r3, [r3, #0]
 8028c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8028c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028c86:	687b      	ldr	r3, [r7, #4]
 8028c88:	681b      	ldr	r3, [r3, #0]
 8028c8a:	695a      	ldr	r2, [r3, #20]
 8028c8c:	687b      	ldr	r3, [r7, #4]
 8028c8e:	681b      	ldr	r3, [r3, #0]
 8028c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8028c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8028c96:	687b      	ldr	r3, [r7, #4]
 8028c98:	681b      	ldr	r3, [r3, #0]
 8028c9a:	68da      	ldr	r2, [r3, #12]
 8028c9c:	687b      	ldr	r3, [r7, #4]
 8028c9e:	681b      	ldr	r3, [r3, #0]
 8028ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028ca6:	687b      	ldr	r3, [r7, #4]
 8028ca8:	2200      	movs	r2, #0
 8028caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8028cac:	687b      	ldr	r3, [r7, #4]
 8028cae:	2220      	movs	r2, #32
 8028cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	2220      	movs	r2, #32
 8028cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028cbc:	2300      	movs	r3, #0
}
 8028cbe:	4618      	mov	r0, r3
 8028cc0:	3708      	adds	r7, #8
 8028cc2:	46bd      	mov	sp, r7
 8028cc4:	bd80      	pop	{r7, pc}

08028cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028cc6:	b580      	push	{r7, lr}
 8028cc8:	b08a      	sub	sp, #40	; 0x28
 8028cca:	af02      	add	r7, sp, #8
 8028ccc:	60f8      	str	r0, [r7, #12]
 8028cce:	60b9      	str	r1, [r7, #8]
 8028cd0:	603b      	str	r3, [r7, #0]
 8028cd2:	4613      	mov	r3, r2
 8028cd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8028cd6:	2300      	movs	r3, #0
 8028cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028ce0:	b2db      	uxtb	r3, r3
 8028ce2:	2b20      	cmp	r3, #32
 8028ce4:	d17c      	bne.n	8028de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8028ce6:	68bb      	ldr	r3, [r7, #8]
 8028ce8:	2b00      	cmp	r3, #0
 8028cea:	d002      	beq.n	8028cf2 <HAL_UART_Transmit+0x2c>
 8028cec:	88fb      	ldrh	r3, [r7, #6]
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	d101      	bne.n	8028cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8028cf2:	2301      	movs	r3, #1
 8028cf4:	e075      	b.n	8028de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028cf6:	68fb      	ldr	r3, [r7, #12]
 8028cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028cfc:	2b01      	cmp	r3, #1
 8028cfe:	d101      	bne.n	8028d04 <HAL_UART_Transmit+0x3e>
 8028d00:	2302      	movs	r3, #2
 8028d02:	e06e      	b.n	8028de2 <HAL_UART_Transmit+0x11c>
 8028d04:	68fb      	ldr	r3, [r7, #12]
 8028d06:	2201      	movs	r2, #1
 8028d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028d0c:	68fb      	ldr	r3, [r7, #12]
 8028d0e:	2200      	movs	r2, #0
 8028d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028d12:	68fb      	ldr	r3, [r7, #12]
 8028d14:	2221      	movs	r2, #33	; 0x21
 8028d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028d1a:	f7fa fa2d 	bl	8023178 <HAL_GetTick>
 8028d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	88fa      	ldrh	r2, [r7, #6]
 8028d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028d26:	68fb      	ldr	r3, [r7, #12]
 8028d28:	88fa      	ldrh	r2, [r7, #6]
 8028d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028d2c:	68fb      	ldr	r3, [r7, #12]
 8028d2e:	689b      	ldr	r3, [r3, #8]
 8028d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028d34:	d108      	bne.n	8028d48 <HAL_UART_Transmit+0x82>
 8028d36:	68fb      	ldr	r3, [r7, #12]
 8028d38:	691b      	ldr	r3, [r3, #16]
 8028d3a:	2b00      	cmp	r3, #0
 8028d3c:	d104      	bne.n	8028d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8028d3e:	2300      	movs	r3, #0
 8028d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8028d42:	68bb      	ldr	r3, [r7, #8]
 8028d44:	61bb      	str	r3, [r7, #24]
 8028d46:	e003      	b.n	8028d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8028d48:	68bb      	ldr	r3, [r7, #8]
 8028d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028d4c:	2300      	movs	r3, #0
 8028d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	2200      	movs	r2, #0
 8028d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8028d58:	e02a      	b.n	8028db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028d5a:	683b      	ldr	r3, [r7, #0]
 8028d5c:	9300      	str	r3, [sp, #0]
 8028d5e:	697b      	ldr	r3, [r7, #20]
 8028d60:	2200      	movs	r2, #0
 8028d62:	2180      	movs	r1, #128	; 0x80
 8028d64:	68f8      	ldr	r0, [r7, #12]
 8028d66:	f000 fb1f 	bl	80293a8 <UART_WaitOnFlagUntilTimeout>
 8028d6a:	4603      	mov	r3, r0
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d001      	beq.n	8028d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8028d70:	2303      	movs	r3, #3
 8028d72:	e036      	b.n	8028de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8028d74:	69fb      	ldr	r3, [r7, #28]
 8028d76:	2b00      	cmp	r3, #0
 8028d78:	d10b      	bne.n	8028d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8028d7a:	69bb      	ldr	r3, [r7, #24]
 8028d7c:	881b      	ldrh	r3, [r3, #0]
 8028d7e:	461a      	mov	r2, r3
 8028d80:	68fb      	ldr	r3, [r7, #12]
 8028d82:	681b      	ldr	r3, [r3, #0]
 8028d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8028d8a:	69bb      	ldr	r3, [r7, #24]
 8028d8c:	3302      	adds	r3, #2
 8028d8e:	61bb      	str	r3, [r7, #24]
 8028d90:	e007      	b.n	8028da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8028d92:	69fb      	ldr	r3, [r7, #28]
 8028d94:	781a      	ldrb	r2, [r3, #0]
 8028d96:	68fb      	ldr	r3, [r7, #12]
 8028d98:	681b      	ldr	r3, [r3, #0]
 8028d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8028d9c:	69fb      	ldr	r3, [r7, #28]
 8028d9e:	3301      	adds	r3, #1
 8028da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028da6:	b29b      	uxth	r3, r3
 8028da8:	3b01      	subs	r3, #1
 8028daa:	b29a      	uxth	r2, r3
 8028dac:	68fb      	ldr	r3, [r7, #12]
 8028dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8028db0:	68fb      	ldr	r3, [r7, #12]
 8028db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028db4:	b29b      	uxth	r3, r3
 8028db6:	2b00      	cmp	r3, #0
 8028db8:	d1cf      	bne.n	8028d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028dba:	683b      	ldr	r3, [r7, #0]
 8028dbc:	9300      	str	r3, [sp, #0]
 8028dbe:	697b      	ldr	r3, [r7, #20]
 8028dc0:	2200      	movs	r2, #0
 8028dc2:	2140      	movs	r1, #64	; 0x40
 8028dc4:	68f8      	ldr	r0, [r7, #12]
 8028dc6:	f000 faef 	bl	80293a8 <UART_WaitOnFlagUntilTimeout>
 8028dca:	4603      	mov	r3, r0
 8028dcc:	2b00      	cmp	r3, #0
 8028dce:	d001      	beq.n	8028dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8028dd0:	2303      	movs	r3, #3
 8028dd2:	e006      	b.n	8028de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028dd4:	68fb      	ldr	r3, [r7, #12]
 8028dd6:	2220      	movs	r2, #32
 8028dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8028ddc:	2300      	movs	r3, #0
 8028dde:	e000      	b.n	8028de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8028de0:	2302      	movs	r3, #2
  }
}
 8028de2:	4618      	mov	r0, r3
 8028de4:	3720      	adds	r7, #32
 8028de6:	46bd      	mov	sp, r7
 8028de8:	bd80      	pop	{r7, pc}

08028dea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8028dea:	b580      	push	{r7, lr}
 8028dec:	b084      	sub	sp, #16
 8028dee:	af00      	add	r7, sp, #0
 8028df0:	60f8      	str	r0, [r7, #12]
 8028df2:	60b9      	str	r1, [r7, #8]
 8028df4:	4613      	mov	r3, r2
 8028df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028df8:	68fb      	ldr	r3, [r7, #12]
 8028dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028dfe:	b2db      	uxtb	r3, r3
 8028e00:	2b20      	cmp	r3, #32
 8028e02:	d11d      	bne.n	8028e40 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8028e04:	68bb      	ldr	r3, [r7, #8]
 8028e06:	2b00      	cmp	r3, #0
 8028e08:	d002      	beq.n	8028e10 <HAL_UART_Receive_IT+0x26>
 8028e0a:	88fb      	ldrh	r3, [r7, #6]
 8028e0c:	2b00      	cmp	r3, #0
 8028e0e:	d101      	bne.n	8028e14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8028e10:	2301      	movs	r3, #1
 8028e12:	e016      	b.n	8028e42 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028e14:	68fb      	ldr	r3, [r7, #12]
 8028e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028e1a:	2b01      	cmp	r3, #1
 8028e1c:	d101      	bne.n	8028e22 <HAL_UART_Receive_IT+0x38>
 8028e1e:	2302      	movs	r3, #2
 8028e20:	e00f      	b.n	8028e42 <HAL_UART_Receive_IT+0x58>
 8028e22:	68fb      	ldr	r3, [r7, #12]
 8028e24:	2201      	movs	r2, #1
 8028e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028e2a:	68fb      	ldr	r3, [r7, #12]
 8028e2c:	2200      	movs	r2, #0
 8028e2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8028e30:	88fb      	ldrh	r3, [r7, #6]
 8028e32:	461a      	mov	r2, r3
 8028e34:	68b9      	ldr	r1, [r7, #8]
 8028e36:	68f8      	ldr	r0, [r7, #12]
 8028e38:	f000 fb24 	bl	8029484 <UART_Start_Receive_IT>
 8028e3c:	4603      	mov	r3, r0
 8028e3e:	e000      	b.n	8028e42 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8028e40:	2302      	movs	r3, #2
  }
}
 8028e42:	4618      	mov	r0, r3
 8028e44:	3710      	adds	r7, #16
 8028e46:	46bd      	mov	sp, r7
 8028e48:	bd80      	pop	{r7, pc}
	...

08028e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8028e4c:	b580      	push	{r7, lr}
 8028e4e:	b0ba      	sub	sp, #232	; 0xe8
 8028e50:	af00      	add	r7, sp, #0
 8028e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	681b      	ldr	r3, [r3, #0]
 8028e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028e5e:	687b      	ldr	r3, [r7, #4]
 8028e60:	681b      	ldr	r3, [r3, #0]
 8028e62:	68db      	ldr	r3, [r3, #12]
 8028e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	681b      	ldr	r3, [r3, #0]
 8028e6c:	695b      	ldr	r3, [r3, #20]
 8028e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8028e72:	2300      	movs	r3, #0
 8028e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8028e78:	2300      	movs	r3, #0
 8028e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8028e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e82:	f003 030f 	and.w	r3, r3, #15
 8028e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8028e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028e8e:	2b00      	cmp	r3, #0
 8028e90:	d10f      	bne.n	8028eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e96:	f003 0320 	and.w	r3, r3, #32
 8028e9a:	2b00      	cmp	r3, #0
 8028e9c:	d009      	beq.n	8028eb2 <HAL_UART_IRQHandler+0x66>
 8028e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028ea2:	f003 0320 	and.w	r3, r3, #32
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d003      	beq.n	8028eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8028eaa:	6878      	ldr	r0, [r7, #4]
 8028eac:	f000 fc07 	bl	80296be <UART_Receive_IT>
      return;
 8028eb0:	e256      	b.n	8029360 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8028eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	f000 80de 	beq.w	8029078 <HAL_UART_IRQHandler+0x22c>
 8028ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028ec0:	f003 0301 	and.w	r3, r3, #1
 8028ec4:	2b00      	cmp	r3, #0
 8028ec6:	d106      	bne.n	8028ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8028ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028ecc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8028ed0:	2b00      	cmp	r3, #0
 8028ed2:	f000 80d1 	beq.w	8029078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8028ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028eda:	f003 0301 	and.w	r3, r3, #1
 8028ede:	2b00      	cmp	r3, #0
 8028ee0:	d00b      	beq.n	8028efa <HAL_UART_IRQHandler+0xae>
 8028ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028eea:	2b00      	cmp	r3, #0
 8028eec:	d005      	beq.n	8028efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028ef2:	f043 0201 	orr.w	r2, r3, #1
 8028ef6:	687b      	ldr	r3, [r7, #4]
 8028ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028efe:	f003 0304 	and.w	r3, r3, #4
 8028f02:	2b00      	cmp	r3, #0
 8028f04:	d00b      	beq.n	8028f1e <HAL_UART_IRQHandler+0xd2>
 8028f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028f0a:	f003 0301 	and.w	r3, r3, #1
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	d005      	beq.n	8028f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f16:	f043 0202 	orr.w	r2, r3, #2
 8028f1a:	687b      	ldr	r3, [r7, #4]
 8028f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028f22:	f003 0302 	and.w	r3, r3, #2
 8028f26:	2b00      	cmp	r3, #0
 8028f28:	d00b      	beq.n	8028f42 <HAL_UART_IRQHandler+0xf6>
 8028f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028f2e:	f003 0301 	and.w	r3, r3, #1
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	d005      	beq.n	8028f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8028f36:	687b      	ldr	r3, [r7, #4]
 8028f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f3a:	f043 0204 	orr.w	r2, r3, #4
 8028f3e:	687b      	ldr	r3, [r7, #4]
 8028f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8028f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028f46:	f003 0308 	and.w	r3, r3, #8
 8028f4a:	2b00      	cmp	r3, #0
 8028f4c:	d011      	beq.n	8028f72 <HAL_UART_IRQHandler+0x126>
 8028f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028f52:	f003 0320 	and.w	r3, r3, #32
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	d105      	bne.n	8028f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8028f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028f5e:	f003 0301 	and.w	r3, r3, #1
 8028f62:	2b00      	cmp	r3, #0
 8028f64:	d005      	beq.n	8028f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f6a:	f043 0208 	orr.w	r2, r3, #8
 8028f6e:	687b      	ldr	r3, [r7, #4]
 8028f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028f72:	687b      	ldr	r3, [r7, #4]
 8028f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	f000 81ed 	beq.w	8029356 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028f80:	f003 0320 	and.w	r3, r3, #32
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	d008      	beq.n	8028f9a <HAL_UART_IRQHandler+0x14e>
 8028f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028f8c:	f003 0320 	and.w	r3, r3, #32
 8028f90:	2b00      	cmp	r3, #0
 8028f92:	d002      	beq.n	8028f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8028f94:	6878      	ldr	r0, [r7, #4]
 8028f96:	f000 fb92 	bl	80296be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8028f9a:	687b      	ldr	r3, [r7, #4]
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	695b      	ldr	r3, [r3, #20]
 8028fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028fa4:	2b40      	cmp	r3, #64	; 0x40
 8028fa6:	bf0c      	ite	eq
 8028fa8:	2301      	moveq	r3, #1
 8028faa:	2300      	movne	r3, #0
 8028fac:	b2db      	uxtb	r3, r3
 8028fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028fb6:	f003 0308 	and.w	r3, r3, #8
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	d103      	bne.n	8028fc6 <HAL_UART_IRQHandler+0x17a>
 8028fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8028fc2:	2b00      	cmp	r3, #0
 8028fc4:	d04f      	beq.n	8029066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8028fc6:	6878      	ldr	r0, [r7, #4]
 8028fc8:	f000 fa9a 	bl	8029500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028fcc:	687b      	ldr	r3, [r7, #4]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	695b      	ldr	r3, [r3, #20]
 8028fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028fd6:	2b40      	cmp	r3, #64	; 0x40
 8028fd8:	d141      	bne.n	802905e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028fda:	687b      	ldr	r3, [r7, #4]
 8028fdc:	681b      	ldr	r3, [r3, #0]
 8028fde:	3314      	adds	r3, #20
 8028fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028fe8:	e853 3f00 	ldrex	r3, [r3]
 8028fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8028ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8028ffc:	687b      	ldr	r3, [r7, #4]
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	3314      	adds	r3, #20
 8029002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802900a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802900e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029016:	e841 2300 	strex	r3, r2, [r1]
 802901a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802901e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029022:	2b00      	cmp	r3, #0
 8029024:	d1d9      	bne.n	8028fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8029026:	687b      	ldr	r3, [r7, #4]
 8029028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802902a:	2b00      	cmp	r3, #0
 802902c:	d013      	beq.n	8029056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802902e:	687b      	ldr	r3, [r7, #4]
 8029030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029032:	4a7d      	ldr	r2, [pc, #500]	; (8029228 <HAL_UART_IRQHandler+0x3dc>)
 8029034:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029036:	687b      	ldr	r3, [r7, #4]
 8029038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802903a:	4618      	mov	r0, r3
 802903c:	f7fa fb46 	bl	80236cc <HAL_DMA_Abort_IT>
 8029040:	4603      	mov	r3, r0
 8029042:	2b00      	cmp	r3, #0
 8029044:	d016      	beq.n	8029074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029046:	687b      	ldr	r3, [r7, #4]
 8029048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802904a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802904c:	687a      	ldr	r2, [r7, #4]
 802904e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029050:	4610      	mov	r0, r2
 8029052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029054:	e00e      	b.n	8029074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029056:	6878      	ldr	r0, [r7, #4]
 8029058:	f000 f990 	bl	802937c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802905c:	e00a      	b.n	8029074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802905e:	6878      	ldr	r0, [r7, #4]
 8029060:	f000 f98c 	bl	802937c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029064:	e006      	b.n	8029074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029066:	6878      	ldr	r0, [r7, #4]
 8029068:	f000 f988 	bl	802937c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	2200      	movs	r2, #0
 8029070:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029072:	e170      	b.n	8029356 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029074:	bf00      	nop
    return;
 8029076:	e16e      	b.n	8029356 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029078:	687b      	ldr	r3, [r7, #4]
 802907a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802907c:	2b01      	cmp	r3, #1
 802907e:	f040 814a 	bne.w	8029316 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029086:	f003 0310 	and.w	r3, r3, #16
 802908a:	2b00      	cmp	r3, #0
 802908c:	f000 8143 	beq.w	8029316 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029094:	f003 0310 	and.w	r3, r3, #16
 8029098:	2b00      	cmp	r3, #0
 802909a:	f000 813c 	beq.w	8029316 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802909e:	2300      	movs	r3, #0
 80290a0:	60bb      	str	r3, [r7, #8]
 80290a2:	687b      	ldr	r3, [r7, #4]
 80290a4:	681b      	ldr	r3, [r3, #0]
 80290a6:	681b      	ldr	r3, [r3, #0]
 80290a8:	60bb      	str	r3, [r7, #8]
 80290aa:	687b      	ldr	r3, [r7, #4]
 80290ac:	681b      	ldr	r3, [r3, #0]
 80290ae:	685b      	ldr	r3, [r3, #4]
 80290b0:	60bb      	str	r3, [r7, #8]
 80290b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	681b      	ldr	r3, [r3, #0]
 80290b8:	695b      	ldr	r3, [r3, #20]
 80290ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80290be:	2b40      	cmp	r3, #64	; 0x40
 80290c0:	f040 80b4 	bne.w	802922c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80290c4:	687b      	ldr	r3, [r7, #4]
 80290c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	685b      	ldr	r3, [r3, #4]
 80290cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80290d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80290d4:	2b00      	cmp	r3, #0
 80290d6:	f000 8140 	beq.w	802935a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80290da:	687b      	ldr	r3, [r7, #4]
 80290dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80290de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80290e2:	429a      	cmp	r2, r3
 80290e4:	f080 8139 	bcs.w	802935a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80290ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80290f0:	687b      	ldr	r3, [r7, #4]
 80290f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290f4:	69db      	ldr	r3, [r3, #28]
 80290f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80290fa:	f000 8088 	beq.w	802920e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	330c      	adds	r3, #12
 8029104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802910c:	e853 3f00 	ldrex	r3, [r3]
 8029110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802911c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029120:	687b      	ldr	r3, [r7, #4]
 8029122:	681b      	ldr	r3, [r3, #0]
 8029124:	330c      	adds	r3, #12
 8029126:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802912a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802912e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029132:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802913a:	e841 2300 	strex	r3, r2, [r1]
 802913e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029146:	2b00      	cmp	r3, #0
 8029148:	d1d9      	bne.n	80290fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802914a:	687b      	ldr	r3, [r7, #4]
 802914c:	681b      	ldr	r3, [r3, #0]
 802914e:	3314      	adds	r3, #20
 8029150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029154:	e853 3f00 	ldrex	r3, [r3]
 8029158:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802915a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802915c:	f023 0301 	bic.w	r3, r3, #1
 8029160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029164:	687b      	ldr	r3, [r7, #4]
 8029166:	681b      	ldr	r3, [r3, #0]
 8029168:	3314      	adds	r3, #20
 802916a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802916e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029172:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029174:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802917a:	e841 2300 	strex	r3, r2, [r1]
 802917e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029182:	2b00      	cmp	r3, #0
 8029184:	d1e1      	bne.n	802914a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029186:	687b      	ldr	r3, [r7, #4]
 8029188:	681b      	ldr	r3, [r3, #0]
 802918a:	3314      	adds	r3, #20
 802918c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802918e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029190:	e853 3f00 	ldrex	r3, [r3]
 8029194:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802919c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	3314      	adds	r3, #20
 80291a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80291aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80291ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80291b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80291b2:	e841 2300 	strex	r3, r2, [r1]
 80291b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80291b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80291ba:	2b00      	cmp	r3, #0
 80291bc:	d1e3      	bne.n	8029186 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80291be:	687b      	ldr	r3, [r7, #4]
 80291c0:	2220      	movs	r2, #32
 80291c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80291c6:	687b      	ldr	r3, [r7, #4]
 80291c8:	2200      	movs	r2, #0
 80291ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	681b      	ldr	r3, [r3, #0]
 80291d0:	330c      	adds	r3, #12
 80291d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80291d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80291d6:	e853 3f00 	ldrex	r3, [r3]
 80291da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80291dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80291de:	f023 0310 	bic.w	r3, r3, #16
 80291e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	681b      	ldr	r3, [r3, #0]
 80291ea:	330c      	adds	r3, #12
 80291ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80291f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80291f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80291f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80291f8:	e841 2300 	strex	r3, r2, [r1]
 80291fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80291fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029200:	2b00      	cmp	r3, #0
 8029202:	d1e3      	bne.n	80291cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029204:	687b      	ldr	r3, [r7, #4]
 8029206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029208:	4618      	mov	r0, r3
 802920a:	f7fa f9ef 	bl	80235ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802920e:	687b      	ldr	r3, [r7, #4]
 8029210:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029212:	687b      	ldr	r3, [r7, #4]
 8029214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029216:	b29b      	uxth	r3, r3
 8029218:	1ad3      	subs	r3, r2, r3
 802921a:	b29b      	uxth	r3, r3
 802921c:	4619      	mov	r1, r3
 802921e:	6878      	ldr	r0, [r7, #4]
 8029220:	f000 f8b6 	bl	8029390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029224:	e099      	b.n	802935a <HAL_UART_IRQHandler+0x50e>
 8029226:	bf00      	nop
 8029228:	080295c7 	.word	0x080295c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802922c:	687b      	ldr	r3, [r7, #4]
 802922e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029230:	687b      	ldr	r3, [r7, #4]
 8029232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029234:	b29b      	uxth	r3, r3
 8029236:	1ad3      	subs	r3, r2, r3
 8029238:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029240:	b29b      	uxth	r3, r3
 8029242:	2b00      	cmp	r3, #0
 8029244:	f000 808b 	beq.w	802935e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8029248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802924c:	2b00      	cmp	r3, #0
 802924e:	f000 8086 	beq.w	802935e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029252:	687b      	ldr	r3, [r7, #4]
 8029254:	681b      	ldr	r3, [r3, #0]
 8029256:	330c      	adds	r3, #12
 8029258:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802925c:	e853 3f00 	ldrex	r3, [r3]
 8029260:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802926c:	687b      	ldr	r3, [r7, #4]
 802926e:	681b      	ldr	r3, [r3, #0]
 8029270:	330c      	adds	r3, #12
 8029272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029276:	647a      	str	r2, [r7, #68]	; 0x44
 8029278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802927a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802927c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802927e:	e841 2300 	strex	r3, r2, [r1]
 8029282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029286:	2b00      	cmp	r3, #0
 8029288:	d1e3      	bne.n	8029252 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	681b      	ldr	r3, [r3, #0]
 802928e:	3314      	adds	r3, #20
 8029290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029294:	e853 3f00 	ldrex	r3, [r3]
 8029298:	623b      	str	r3, [r7, #32]
   return(result);
 802929a:	6a3b      	ldr	r3, [r7, #32]
 802929c:	f023 0301 	bic.w	r3, r3, #1
 80292a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	681b      	ldr	r3, [r3, #0]
 80292a8:	3314      	adds	r3, #20
 80292aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80292ae:	633a      	str	r2, [r7, #48]	; 0x30
 80292b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80292b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80292b6:	e841 2300 	strex	r3, r2, [r1]
 80292ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80292bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80292be:	2b00      	cmp	r3, #0
 80292c0:	d1e3      	bne.n	802928a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80292c2:	687b      	ldr	r3, [r7, #4]
 80292c4:	2220      	movs	r2, #32
 80292c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	2200      	movs	r2, #0
 80292ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80292d0:	687b      	ldr	r3, [r7, #4]
 80292d2:	681b      	ldr	r3, [r3, #0]
 80292d4:	330c      	adds	r3, #12
 80292d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80292d8:	693b      	ldr	r3, [r7, #16]
 80292da:	e853 3f00 	ldrex	r3, [r3]
 80292de:	60fb      	str	r3, [r7, #12]
   return(result);
 80292e0:	68fb      	ldr	r3, [r7, #12]
 80292e2:	f023 0310 	bic.w	r3, r3, #16
 80292e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	681b      	ldr	r3, [r3, #0]
 80292ee:	330c      	adds	r3, #12
 80292f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80292f4:	61fa      	str	r2, [r7, #28]
 80292f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80292f8:	69b9      	ldr	r1, [r7, #24]
 80292fa:	69fa      	ldr	r2, [r7, #28]
 80292fc:	e841 2300 	strex	r3, r2, [r1]
 8029300:	617b      	str	r3, [r7, #20]
   return(result);
 8029302:	697b      	ldr	r3, [r7, #20]
 8029304:	2b00      	cmp	r3, #0
 8029306:	d1e3      	bne.n	80292d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802930c:	4619      	mov	r1, r3
 802930e:	6878      	ldr	r0, [r7, #4]
 8029310:	f000 f83e 	bl	8029390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029314:	e023      	b.n	802935e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802931e:	2b00      	cmp	r3, #0
 8029320:	d009      	beq.n	8029336 <HAL_UART_IRQHandler+0x4ea>
 8029322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802932a:	2b00      	cmp	r3, #0
 802932c:	d003      	beq.n	8029336 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802932e:	6878      	ldr	r0, [r7, #4]
 8029330:	f000 f95d 	bl	80295ee <UART_Transmit_IT>
    return;
 8029334:	e014      	b.n	8029360 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8029336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802933a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802933e:	2b00      	cmp	r3, #0
 8029340:	d00e      	beq.n	8029360 <HAL_UART_IRQHandler+0x514>
 8029342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802934a:	2b00      	cmp	r3, #0
 802934c:	d008      	beq.n	8029360 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802934e:	6878      	ldr	r0, [r7, #4]
 8029350:	f000 f99d 	bl	802968e <UART_EndTransmit_IT>
    return;
 8029354:	e004      	b.n	8029360 <HAL_UART_IRQHandler+0x514>
    return;
 8029356:	bf00      	nop
 8029358:	e002      	b.n	8029360 <HAL_UART_IRQHandler+0x514>
      return;
 802935a:	bf00      	nop
 802935c:	e000      	b.n	8029360 <HAL_UART_IRQHandler+0x514>
      return;
 802935e:	bf00      	nop
  }
}
 8029360:	37e8      	adds	r7, #232	; 0xe8
 8029362:	46bd      	mov	sp, r7
 8029364:	bd80      	pop	{r7, pc}
 8029366:	bf00      	nop

08029368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029368:	b480      	push	{r7}
 802936a:	b083      	sub	sp, #12
 802936c:	af00      	add	r7, sp, #0
 802936e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029370:	bf00      	nop
 8029372:	370c      	adds	r7, #12
 8029374:	46bd      	mov	sp, r7
 8029376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802937a:	4770      	bx	lr

0802937c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802937c:	b480      	push	{r7}
 802937e:	b083      	sub	sp, #12
 8029380:	af00      	add	r7, sp, #0
 8029382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029384:	bf00      	nop
 8029386:	370c      	adds	r7, #12
 8029388:	46bd      	mov	sp, r7
 802938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802938e:	4770      	bx	lr

08029390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029390:	b480      	push	{r7}
 8029392:	b083      	sub	sp, #12
 8029394:	af00      	add	r7, sp, #0
 8029396:	6078      	str	r0, [r7, #4]
 8029398:	460b      	mov	r3, r1
 802939a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802939c:	bf00      	nop
 802939e:	370c      	adds	r7, #12
 80293a0:	46bd      	mov	sp, r7
 80293a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293a6:	4770      	bx	lr

080293a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80293a8:	b580      	push	{r7, lr}
 80293aa:	b090      	sub	sp, #64	; 0x40
 80293ac:	af00      	add	r7, sp, #0
 80293ae:	60f8      	str	r0, [r7, #12]
 80293b0:	60b9      	str	r1, [r7, #8]
 80293b2:	603b      	str	r3, [r7, #0]
 80293b4:	4613      	mov	r3, r2
 80293b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80293b8:	e050      	b.n	802945c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80293ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80293bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80293c0:	d04c      	beq.n	802945c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80293c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80293c4:	2b00      	cmp	r3, #0
 80293c6:	d007      	beq.n	80293d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80293c8:	f7f9 fed6 	bl	8023178 <HAL_GetTick>
 80293cc:	4602      	mov	r2, r0
 80293ce:	683b      	ldr	r3, [r7, #0]
 80293d0:	1ad3      	subs	r3, r2, r3
 80293d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80293d4:	429a      	cmp	r2, r3
 80293d6:	d241      	bcs.n	802945c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80293d8:	68fb      	ldr	r3, [r7, #12]
 80293da:	681b      	ldr	r3, [r3, #0]
 80293dc:	330c      	adds	r3, #12
 80293de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80293e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80293e2:	e853 3f00 	ldrex	r3, [r3]
 80293e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80293e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80293ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80293ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80293f0:	68fb      	ldr	r3, [r7, #12]
 80293f2:	681b      	ldr	r3, [r3, #0]
 80293f4:	330c      	adds	r3, #12
 80293f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80293f8:	637a      	str	r2, [r7, #52]	; 0x34
 80293fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80293fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80293fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029400:	e841 2300 	strex	r3, r2, [r1]
 8029404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029408:	2b00      	cmp	r3, #0
 802940a:	d1e5      	bne.n	80293d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802940c:	68fb      	ldr	r3, [r7, #12]
 802940e:	681b      	ldr	r3, [r3, #0]
 8029410:	3314      	adds	r3, #20
 8029412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029414:	697b      	ldr	r3, [r7, #20]
 8029416:	e853 3f00 	ldrex	r3, [r3]
 802941a:	613b      	str	r3, [r7, #16]
   return(result);
 802941c:	693b      	ldr	r3, [r7, #16]
 802941e:	f023 0301 	bic.w	r3, r3, #1
 8029422:	63bb      	str	r3, [r7, #56]	; 0x38
 8029424:	68fb      	ldr	r3, [r7, #12]
 8029426:	681b      	ldr	r3, [r3, #0]
 8029428:	3314      	adds	r3, #20
 802942a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802942c:	623a      	str	r2, [r7, #32]
 802942e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029430:	69f9      	ldr	r1, [r7, #28]
 8029432:	6a3a      	ldr	r2, [r7, #32]
 8029434:	e841 2300 	strex	r3, r2, [r1]
 8029438:	61bb      	str	r3, [r7, #24]
   return(result);
 802943a:	69bb      	ldr	r3, [r7, #24]
 802943c:	2b00      	cmp	r3, #0
 802943e:	d1e5      	bne.n	802940c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029440:	68fb      	ldr	r3, [r7, #12]
 8029442:	2220      	movs	r2, #32
 8029444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029448:	68fb      	ldr	r3, [r7, #12]
 802944a:	2220      	movs	r2, #32
 802944c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029450:	68fb      	ldr	r3, [r7, #12]
 8029452:	2200      	movs	r2, #0
 8029454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8029458:	2303      	movs	r3, #3
 802945a:	e00f      	b.n	802947c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802945c:	68fb      	ldr	r3, [r7, #12]
 802945e:	681b      	ldr	r3, [r3, #0]
 8029460:	681a      	ldr	r2, [r3, #0]
 8029462:	68bb      	ldr	r3, [r7, #8]
 8029464:	4013      	ands	r3, r2
 8029466:	68ba      	ldr	r2, [r7, #8]
 8029468:	429a      	cmp	r2, r3
 802946a:	bf0c      	ite	eq
 802946c:	2301      	moveq	r3, #1
 802946e:	2300      	movne	r3, #0
 8029470:	b2db      	uxtb	r3, r3
 8029472:	461a      	mov	r2, r3
 8029474:	79fb      	ldrb	r3, [r7, #7]
 8029476:	429a      	cmp	r2, r3
 8029478:	d09f      	beq.n	80293ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802947a:	2300      	movs	r3, #0
}
 802947c:	4618      	mov	r0, r3
 802947e:	3740      	adds	r7, #64	; 0x40
 8029480:	46bd      	mov	sp, r7
 8029482:	bd80      	pop	{r7, pc}

08029484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029484:	b480      	push	{r7}
 8029486:	b085      	sub	sp, #20
 8029488:	af00      	add	r7, sp, #0
 802948a:	60f8      	str	r0, [r7, #12]
 802948c:	60b9      	str	r1, [r7, #8]
 802948e:	4613      	mov	r3, r2
 8029490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029492:	68fb      	ldr	r3, [r7, #12]
 8029494:	68ba      	ldr	r2, [r7, #8]
 8029496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029498:	68fb      	ldr	r3, [r7, #12]
 802949a:	88fa      	ldrh	r2, [r7, #6]
 802949c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 802949e:	68fb      	ldr	r3, [r7, #12]
 80294a0:	88fa      	ldrh	r2, [r7, #6]
 80294a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80294a4:	68fb      	ldr	r3, [r7, #12]
 80294a6:	2200      	movs	r2, #0
 80294a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80294aa:	68fb      	ldr	r3, [r7, #12]
 80294ac:	2222      	movs	r2, #34	; 0x22
 80294ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80294b2:	68fb      	ldr	r3, [r7, #12]
 80294b4:	2200      	movs	r2, #0
 80294b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80294ba:	68fb      	ldr	r3, [r7, #12]
 80294bc:	691b      	ldr	r3, [r3, #16]
 80294be:	2b00      	cmp	r3, #0
 80294c0:	d007      	beq.n	80294d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80294c2:	68fb      	ldr	r3, [r7, #12]
 80294c4:	681b      	ldr	r3, [r3, #0]
 80294c6:	68da      	ldr	r2, [r3, #12]
 80294c8:	68fb      	ldr	r3, [r7, #12]
 80294ca:	681b      	ldr	r3, [r3, #0]
 80294cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80294d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80294d2:	68fb      	ldr	r3, [r7, #12]
 80294d4:	681b      	ldr	r3, [r3, #0]
 80294d6:	695a      	ldr	r2, [r3, #20]
 80294d8:	68fb      	ldr	r3, [r7, #12]
 80294da:	681b      	ldr	r3, [r3, #0]
 80294dc:	f042 0201 	orr.w	r2, r2, #1
 80294e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80294e2:	68fb      	ldr	r3, [r7, #12]
 80294e4:	681b      	ldr	r3, [r3, #0]
 80294e6:	68da      	ldr	r2, [r3, #12]
 80294e8:	68fb      	ldr	r3, [r7, #12]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	f042 0220 	orr.w	r2, r2, #32
 80294f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80294f2:	2300      	movs	r3, #0
}
 80294f4:	4618      	mov	r0, r3
 80294f6:	3714      	adds	r7, #20
 80294f8:	46bd      	mov	sp, r7
 80294fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294fe:	4770      	bx	lr

08029500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8029500:	b480      	push	{r7}
 8029502:	b095      	sub	sp, #84	; 0x54
 8029504:	af00      	add	r7, sp, #0
 8029506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	681b      	ldr	r3, [r3, #0]
 802950c:	330c      	adds	r3, #12
 802950e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029512:	e853 3f00 	ldrex	r3, [r3]
 8029516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8029518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802951a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802951e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	330c      	adds	r3, #12
 8029526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029528:	643a      	str	r2, [r7, #64]	; 0x40
 802952a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802952c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802952e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029530:	e841 2300 	strex	r3, r2, [r1]
 8029534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8029536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029538:	2b00      	cmp	r3, #0
 802953a:	d1e5      	bne.n	8029508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802953c:	687b      	ldr	r3, [r7, #4]
 802953e:	681b      	ldr	r3, [r3, #0]
 8029540:	3314      	adds	r3, #20
 8029542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029544:	6a3b      	ldr	r3, [r7, #32]
 8029546:	e853 3f00 	ldrex	r3, [r3]
 802954a:	61fb      	str	r3, [r7, #28]
   return(result);
 802954c:	69fb      	ldr	r3, [r7, #28]
 802954e:	f023 0301 	bic.w	r3, r3, #1
 8029552:	64bb      	str	r3, [r7, #72]	; 0x48
 8029554:	687b      	ldr	r3, [r7, #4]
 8029556:	681b      	ldr	r3, [r3, #0]
 8029558:	3314      	adds	r3, #20
 802955a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802955c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802955e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8029562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029564:	e841 2300 	strex	r3, r2, [r1]
 8029568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802956c:	2b00      	cmp	r3, #0
 802956e:	d1e5      	bne.n	802953c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029574:	2b01      	cmp	r3, #1
 8029576:	d119      	bne.n	80295ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	681b      	ldr	r3, [r3, #0]
 802957c:	330c      	adds	r3, #12
 802957e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029580:	68fb      	ldr	r3, [r7, #12]
 8029582:	e853 3f00 	ldrex	r3, [r3]
 8029586:	60bb      	str	r3, [r7, #8]
   return(result);
 8029588:	68bb      	ldr	r3, [r7, #8]
 802958a:	f023 0310 	bic.w	r3, r3, #16
 802958e:	647b      	str	r3, [r7, #68]	; 0x44
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	681b      	ldr	r3, [r3, #0]
 8029594:	330c      	adds	r3, #12
 8029596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029598:	61ba      	str	r2, [r7, #24]
 802959a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802959c:	6979      	ldr	r1, [r7, #20]
 802959e:	69ba      	ldr	r2, [r7, #24]
 80295a0:	e841 2300 	strex	r3, r2, [r1]
 80295a4:	613b      	str	r3, [r7, #16]
   return(result);
 80295a6:	693b      	ldr	r3, [r7, #16]
 80295a8:	2b00      	cmp	r3, #0
 80295aa:	d1e5      	bne.n	8029578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	2220      	movs	r2, #32
 80295b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80295b4:	687b      	ldr	r3, [r7, #4]
 80295b6:	2200      	movs	r2, #0
 80295b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80295ba:	bf00      	nop
 80295bc:	3754      	adds	r7, #84	; 0x54
 80295be:	46bd      	mov	sp, r7
 80295c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295c4:	4770      	bx	lr

080295c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80295c6:	b580      	push	{r7, lr}
 80295c8:	b084      	sub	sp, #16
 80295ca:	af00      	add	r7, sp, #0
 80295cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80295ce:	687b      	ldr	r3, [r7, #4]
 80295d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80295d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80295d4:	68fb      	ldr	r3, [r7, #12]
 80295d6:	2200      	movs	r2, #0
 80295d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80295da:	68fb      	ldr	r3, [r7, #12]
 80295dc:	2200      	movs	r2, #0
 80295de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80295e0:	68f8      	ldr	r0, [r7, #12]
 80295e2:	f7ff fecb 	bl	802937c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80295e6:	bf00      	nop
 80295e8:	3710      	adds	r7, #16
 80295ea:	46bd      	mov	sp, r7
 80295ec:	bd80      	pop	{r7, pc}

080295ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80295ee:	b480      	push	{r7}
 80295f0:	b085      	sub	sp, #20
 80295f2:	af00      	add	r7, sp, #0
 80295f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80295fc:	b2db      	uxtb	r3, r3
 80295fe:	2b21      	cmp	r3, #33	; 0x21
 8029600:	d13e      	bne.n	8029680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	689b      	ldr	r3, [r3, #8]
 8029606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802960a:	d114      	bne.n	8029636 <UART_Transmit_IT+0x48>
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	691b      	ldr	r3, [r3, #16]
 8029610:	2b00      	cmp	r3, #0
 8029612:	d110      	bne.n	8029636 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	6a1b      	ldr	r3, [r3, #32]
 8029618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802961a:	68fb      	ldr	r3, [r7, #12]
 802961c:	881b      	ldrh	r3, [r3, #0]
 802961e:	461a      	mov	r2, r3
 8029620:	687b      	ldr	r3, [r7, #4]
 8029622:	681b      	ldr	r3, [r3, #0]
 8029624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8029628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	6a1b      	ldr	r3, [r3, #32]
 802962e:	1c9a      	adds	r2, r3, #2
 8029630:	687b      	ldr	r3, [r7, #4]
 8029632:	621a      	str	r2, [r3, #32]
 8029634:	e008      	b.n	8029648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	6a1b      	ldr	r3, [r3, #32]
 802963a:	1c59      	adds	r1, r3, #1
 802963c:	687a      	ldr	r2, [r7, #4]
 802963e:	6211      	str	r1, [r2, #32]
 8029640:	781a      	ldrb	r2, [r3, #0]
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802964c:	b29b      	uxth	r3, r3
 802964e:	3b01      	subs	r3, #1
 8029650:	b29b      	uxth	r3, r3
 8029652:	687a      	ldr	r2, [r7, #4]
 8029654:	4619      	mov	r1, r3
 8029656:	84d1      	strh	r1, [r2, #38]	; 0x26
 8029658:	2b00      	cmp	r3, #0
 802965a:	d10f      	bne.n	802967c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802965c:	687b      	ldr	r3, [r7, #4]
 802965e:	681b      	ldr	r3, [r3, #0]
 8029660:	68da      	ldr	r2, [r3, #12]
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	681b      	ldr	r3, [r3, #0]
 8029666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802966a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	681b      	ldr	r3, [r3, #0]
 8029670:	68da      	ldr	r2, [r3, #12]
 8029672:	687b      	ldr	r3, [r7, #4]
 8029674:	681b      	ldr	r3, [r3, #0]
 8029676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802967a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802967c:	2300      	movs	r3, #0
 802967e:	e000      	b.n	8029682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8029680:	2302      	movs	r3, #2
  }
}
 8029682:	4618      	mov	r0, r3
 8029684:	3714      	adds	r7, #20
 8029686:	46bd      	mov	sp, r7
 8029688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802968c:	4770      	bx	lr

0802968e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802968e:	b580      	push	{r7, lr}
 8029690:	b082      	sub	sp, #8
 8029692:	af00      	add	r7, sp, #0
 8029694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8029696:	687b      	ldr	r3, [r7, #4]
 8029698:	681b      	ldr	r3, [r3, #0]
 802969a:	68da      	ldr	r2, [r3, #12]
 802969c:	687b      	ldr	r3, [r7, #4]
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80296a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80296a6:	687b      	ldr	r3, [r7, #4]
 80296a8:	2220      	movs	r2, #32
 80296aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80296ae:	6878      	ldr	r0, [r7, #4]
 80296b0:	f7ff fe5a 	bl	8029368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80296b4:	2300      	movs	r3, #0
}
 80296b6:	4618      	mov	r0, r3
 80296b8:	3708      	adds	r7, #8
 80296ba:	46bd      	mov	sp, r7
 80296bc:	bd80      	pop	{r7, pc}

080296be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80296be:	b580      	push	{r7, lr}
 80296c0:	b08c      	sub	sp, #48	; 0x30
 80296c2:	af00      	add	r7, sp, #0
 80296c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80296c6:	687b      	ldr	r3, [r7, #4]
 80296c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80296cc:	b2db      	uxtb	r3, r3
 80296ce:	2b22      	cmp	r3, #34	; 0x22
 80296d0:	f040 80ab 	bne.w	802982a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80296d4:	687b      	ldr	r3, [r7, #4]
 80296d6:	689b      	ldr	r3, [r3, #8]
 80296d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80296dc:	d117      	bne.n	802970e <UART_Receive_IT+0x50>
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	691b      	ldr	r3, [r3, #16]
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	d113      	bne.n	802970e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80296e6:	2300      	movs	r3, #0
 80296e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80296f0:	687b      	ldr	r3, [r7, #4]
 80296f2:	681b      	ldr	r3, [r3, #0]
 80296f4:	685b      	ldr	r3, [r3, #4]
 80296f6:	b29b      	uxth	r3, r3
 80296f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80296fc:	b29a      	uxth	r2, r3
 80296fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8029702:	687b      	ldr	r3, [r7, #4]
 8029704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029706:	1c9a      	adds	r2, r3, #2
 8029708:	687b      	ldr	r3, [r7, #4]
 802970a:	629a      	str	r2, [r3, #40]	; 0x28
 802970c:	e026      	b.n	802975c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802970e:	687b      	ldr	r3, [r7, #4]
 8029710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8029714:	2300      	movs	r3, #0
 8029716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	689b      	ldr	r3, [r3, #8]
 802971c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029720:	d007      	beq.n	8029732 <UART_Receive_IT+0x74>
 8029722:	687b      	ldr	r3, [r7, #4]
 8029724:	689b      	ldr	r3, [r3, #8]
 8029726:	2b00      	cmp	r3, #0
 8029728:	d10a      	bne.n	8029740 <UART_Receive_IT+0x82>
 802972a:	687b      	ldr	r3, [r7, #4]
 802972c:	691b      	ldr	r3, [r3, #16]
 802972e:	2b00      	cmp	r3, #0
 8029730:	d106      	bne.n	8029740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8029732:	687b      	ldr	r3, [r7, #4]
 8029734:	681b      	ldr	r3, [r3, #0]
 8029736:	685b      	ldr	r3, [r3, #4]
 8029738:	b2da      	uxtb	r2, r3
 802973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802973c:	701a      	strb	r2, [r3, #0]
 802973e:	e008      	b.n	8029752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8029740:	687b      	ldr	r3, [r7, #4]
 8029742:	681b      	ldr	r3, [r3, #0]
 8029744:	685b      	ldr	r3, [r3, #4]
 8029746:	b2db      	uxtb	r3, r3
 8029748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802974c:	b2da      	uxtb	r2, r3
 802974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8029752:	687b      	ldr	r3, [r7, #4]
 8029754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029756:	1c5a      	adds	r2, r3, #1
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802975c:	687b      	ldr	r3, [r7, #4]
 802975e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029760:	b29b      	uxth	r3, r3
 8029762:	3b01      	subs	r3, #1
 8029764:	b29b      	uxth	r3, r3
 8029766:	687a      	ldr	r2, [r7, #4]
 8029768:	4619      	mov	r1, r3
 802976a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802976c:	2b00      	cmp	r3, #0
 802976e:	d15a      	bne.n	8029826 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8029770:	687b      	ldr	r3, [r7, #4]
 8029772:	681b      	ldr	r3, [r3, #0]
 8029774:	68da      	ldr	r2, [r3, #12]
 8029776:	687b      	ldr	r3, [r7, #4]
 8029778:	681b      	ldr	r3, [r3, #0]
 802977a:	f022 0220 	bic.w	r2, r2, #32
 802977e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	681b      	ldr	r3, [r3, #0]
 8029784:	68da      	ldr	r2, [r3, #12]
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802978e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029790:	687b      	ldr	r3, [r7, #4]
 8029792:	681b      	ldr	r3, [r3, #0]
 8029794:	695a      	ldr	r2, [r3, #20]
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	681b      	ldr	r3, [r3, #0]
 802979a:	f022 0201 	bic.w	r2, r2, #1
 802979e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	2220      	movs	r2, #32
 80297a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80297ac:	2b01      	cmp	r3, #1
 80297ae:	d135      	bne.n	802981c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	2200      	movs	r2, #0
 80297b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80297b6:	687b      	ldr	r3, [r7, #4]
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	330c      	adds	r3, #12
 80297bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80297be:	697b      	ldr	r3, [r7, #20]
 80297c0:	e853 3f00 	ldrex	r3, [r3]
 80297c4:	613b      	str	r3, [r7, #16]
   return(result);
 80297c6:	693b      	ldr	r3, [r7, #16]
 80297c8:	f023 0310 	bic.w	r3, r3, #16
 80297cc:	627b      	str	r3, [r7, #36]	; 0x24
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	330c      	adds	r3, #12
 80297d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297d6:	623a      	str	r2, [r7, #32]
 80297d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80297da:	69f9      	ldr	r1, [r7, #28]
 80297dc:	6a3a      	ldr	r2, [r7, #32]
 80297de:	e841 2300 	strex	r3, r2, [r1]
 80297e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80297e4:	69bb      	ldr	r3, [r7, #24]
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	d1e5      	bne.n	80297b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	681b      	ldr	r3, [r3, #0]
 80297ee:	681b      	ldr	r3, [r3, #0]
 80297f0:	f003 0310 	and.w	r3, r3, #16
 80297f4:	2b10      	cmp	r3, #16
 80297f6:	d10a      	bne.n	802980e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80297f8:	2300      	movs	r3, #0
 80297fa:	60fb      	str	r3, [r7, #12]
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	681b      	ldr	r3, [r3, #0]
 8029800:	681b      	ldr	r3, [r3, #0]
 8029802:	60fb      	str	r3, [r7, #12]
 8029804:	687b      	ldr	r3, [r7, #4]
 8029806:	681b      	ldr	r3, [r3, #0]
 8029808:	685b      	ldr	r3, [r3, #4]
 802980a:	60fb      	str	r3, [r7, #12]
 802980c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029812:	4619      	mov	r1, r3
 8029814:	6878      	ldr	r0, [r7, #4]
 8029816:	f7ff fdbb 	bl	8029390 <HAL_UARTEx_RxEventCallback>
 802981a:	e002      	b.n	8029822 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802981c:	6878      	ldr	r0, [r7, #4]
 802981e:	f7f7 fb6f 	bl	8020f00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8029822:	2300      	movs	r3, #0
 8029824:	e002      	b.n	802982c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8029826:	2300      	movs	r3, #0
 8029828:	e000      	b.n	802982c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802982a:	2302      	movs	r3, #2
  }
}
 802982c:	4618      	mov	r0, r3
 802982e:	3730      	adds	r7, #48	; 0x30
 8029830:	46bd      	mov	sp, r7
 8029832:	bd80      	pop	{r7, pc}

08029834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8029834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8029838:	b0c0      	sub	sp, #256	; 0x100
 802983a:	af00      	add	r7, sp, #0
 802983c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8029840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029844:	681b      	ldr	r3, [r3, #0]
 8029846:	691b      	ldr	r3, [r3, #16]
 8029848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802984c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029850:	68d9      	ldr	r1, [r3, #12]
 8029852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029856:	681a      	ldr	r2, [r3, #0]
 8029858:	ea40 0301 	orr.w	r3, r0, r1
 802985c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802985e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029862:	689a      	ldr	r2, [r3, #8]
 8029864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029868:	691b      	ldr	r3, [r3, #16]
 802986a:	431a      	orrs	r2, r3
 802986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029870:	695b      	ldr	r3, [r3, #20]
 8029872:	431a      	orrs	r2, r3
 8029874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029878:	69db      	ldr	r3, [r3, #28]
 802987a:	4313      	orrs	r3, r2
 802987c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8029880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	68db      	ldr	r3, [r3, #12]
 8029888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802988c:	f021 010c 	bic.w	r1, r1, #12
 8029890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029894:	681a      	ldr	r2, [r3, #0]
 8029896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802989a:	430b      	orrs	r3, r1
 802989c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802989e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298a2:	681b      	ldr	r3, [r3, #0]
 80298a4:	695b      	ldr	r3, [r3, #20]
 80298a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80298aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298ae:	6999      	ldr	r1, [r3, #24]
 80298b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298b4:	681a      	ldr	r2, [r3, #0]
 80298b6:	ea40 0301 	orr.w	r3, r0, r1
 80298ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80298bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298c0:	681a      	ldr	r2, [r3, #0]
 80298c2:	4b8f      	ldr	r3, [pc, #572]	; (8029b00 <UART_SetConfig+0x2cc>)
 80298c4:	429a      	cmp	r2, r3
 80298c6:	d005      	beq.n	80298d4 <UART_SetConfig+0xa0>
 80298c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298cc:	681a      	ldr	r2, [r3, #0]
 80298ce:	4b8d      	ldr	r3, [pc, #564]	; (8029b04 <UART_SetConfig+0x2d0>)
 80298d0:	429a      	cmp	r2, r3
 80298d2:	d104      	bne.n	80298de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80298d4:	f7fd fcb2 	bl	802723c <HAL_RCC_GetPCLK2Freq>
 80298d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80298dc:	e003      	b.n	80298e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80298de:	f7fd fc99 	bl	8027214 <HAL_RCC_GetPCLK1Freq>
 80298e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80298e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298ea:	69db      	ldr	r3, [r3, #28]
 80298ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80298f0:	f040 810c 	bne.w	8029b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80298f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80298f8:	2200      	movs	r2, #0
 80298fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80298fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8029906:	4622      	mov	r2, r4
 8029908:	462b      	mov	r3, r5
 802990a:	1891      	adds	r1, r2, r2
 802990c:	65b9      	str	r1, [r7, #88]	; 0x58
 802990e:	415b      	adcs	r3, r3
 8029910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8029916:	4621      	mov	r1, r4
 8029918:	eb12 0801 	adds.w	r8, r2, r1
 802991c:	4629      	mov	r1, r5
 802991e:	eb43 0901 	adc.w	r9, r3, r1
 8029922:	f04f 0200 	mov.w	r2, #0
 8029926:	f04f 0300 	mov.w	r3, #0
 802992a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802992e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8029932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8029936:	4690      	mov	r8, r2
 8029938:	4699      	mov	r9, r3
 802993a:	4623      	mov	r3, r4
 802993c:	eb18 0303 	adds.w	r3, r8, r3
 8029940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8029944:	462b      	mov	r3, r5
 8029946:	eb49 0303 	adc.w	r3, r9, r3
 802994a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802994e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029952:	685b      	ldr	r3, [r3, #4]
 8029954:	2200      	movs	r2, #0
 8029956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802995a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802995e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8029962:	460b      	mov	r3, r1
 8029964:	18db      	adds	r3, r3, r3
 8029966:	653b      	str	r3, [r7, #80]	; 0x50
 8029968:	4613      	mov	r3, r2
 802996a:	eb42 0303 	adc.w	r3, r2, r3
 802996e:	657b      	str	r3, [r7, #84]	; 0x54
 8029970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8029974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8029978:	f7f6 fc8a 	bl	8020290 <__aeabi_uldivmod>
 802997c:	4602      	mov	r2, r0
 802997e:	460b      	mov	r3, r1
 8029980:	4b61      	ldr	r3, [pc, #388]	; (8029b08 <UART_SetConfig+0x2d4>)
 8029982:	fba3 2302 	umull	r2, r3, r3, r2
 8029986:	095b      	lsrs	r3, r3, #5
 8029988:	011c      	lsls	r4, r3, #4
 802998a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802998e:	2200      	movs	r2, #0
 8029990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8029998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802999c:	4642      	mov	r2, r8
 802999e:	464b      	mov	r3, r9
 80299a0:	1891      	adds	r1, r2, r2
 80299a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80299a4:	415b      	adcs	r3, r3
 80299a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80299a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80299ac:	4641      	mov	r1, r8
 80299ae:	eb12 0a01 	adds.w	sl, r2, r1
 80299b2:	4649      	mov	r1, r9
 80299b4:	eb43 0b01 	adc.w	fp, r3, r1
 80299b8:	f04f 0200 	mov.w	r2, #0
 80299bc:	f04f 0300 	mov.w	r3, #0
 80299c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80299c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80299c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80299cc:	4692      	mov	sl, r2
 80299ce:	469b      	mov	fp, r3
 80299d0:	4643      	mov	r3, r8
 80299d2:	eb1a 0303 	adds.w	r3, sl, r3
 80299d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80299da:	464b      	mov	r3, r9
 80299dc:	eb4b 0303 	adc.w	r3, fp, r3
 80299e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80299e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80299e8:	685b      	ldr	r3, [r3, #4]
 80299ea:	2200      	movs	r2, #0
 80299ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80299f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80299f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80299f8:	460b      	mov	r3, r1
 80299fa:	18db      	adds	r3, r3, r3
 80299fc:	643b      	str	r3, [r7, #64]	; 0x40
 80299fe:	4613      	mov	r3, r2
 8029a00:	eb42 0303 	adc.w	r3, r2, r3
 8029a04:	647b      	str	r3, [r7, #68]	; 0x44
 8029a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8029a0e:	f7f6 fc3f 	bl	8020290 <__aeabi_uldivmod>
 8029a12:	4602      	mov	r2, r0
 8029a14:	460b      	mov	r3, r1
 8029a16:	4611      	mov	r1, r2
 8029a18:	4b3b      	ldr	r3, [pc, #236]	; (8029b08 <UART_SetConfig+0x2d4>)
 8029a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8029a1e:	095b      	lsrs	r3, r3, #5
 8029a20:	2264      	movs	r2, #100	; 0x64
 8029a22:	fb02 f303 	mul.w	r3, r2, r3
 8029a26:	1acb      	subs	r3, r1, r3
 8029a28:	00db      	lsls	r3, r3, #3
 8029a2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029a2e:	4b36      	ldr	r3, [pc, #216]	; (8029b08 <UART_SetConfig+0x2d4>)
 8029a30:	fba3 2302 	umull	r2, r3, r3, r2
 8029a34:	095b      	lsrs	r3, r3, #5
 8029a36:	005b      	lsls	r3, r3, #1
 8029a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029a3c:	441c      	add	r4, r3
 8029a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029a42:	2200      	movs	r2, #0
 8029a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029a48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8029a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8029a50:	4642      	mov	r2, r8
 8029a52:	464b      	mov	r3, r9
 8029a54:	1891      	adds	r1, r2, r2
 8029a56:	63b9      	str	r1, [r7, #56]	; 0x38
 8029a58:	415b      	adcs	r3, r3
 8029a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8029a60:	4641      	mov	r1, r8
 8029a62:	1851      	adds	r1, r2, r1
 8029a64:	6339      	str	r1, [r7, #48]	; 0x30
 8029a66:	4649      	mov	r1, r9
 8029a68:	414b      	adcs	r3, r1
 8029a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8029a6c:	f04f 0200 	mov.w	r2, #0
 8029a70:	f04f 0300 	mov.w	r3, #0
 8029a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8029a78:	4659      	mov	r1, fp
 8029a7a:	00cb      	lsls	r3, r1, #3
 8029a7c:	4651      	mov	r1, sl
 8029a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029a82:	4651      	mov	r1, sl
 8029a84:	00ca      	lsls	r2, r1, #3
 8029a86:	4610      	mov	r0, r2
 8029a88:	4619      	mov	r1, r3
 8029a8a:	4603      	mov	r3, r0
 8029a8c:	4642      	mov	r2, r8
 8029a8e:	189b      	adds	r3, r3, r2
 8029a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029a94:	464b      	mov	r3, r9
 8029a96:	460a      	mov	r2, r1
 8029a98:	eb42 0303 	adc.w	r3, r2, r3
 8029a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029aa4:	685b      	ldr	r3, [r3, #4]
 8029aa6:	2200      	movs	r2, #0
 8029aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029aac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8029ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8029ab4:	460b      	mov	r3, r1
 8029ab6:	18db      	adds	r3, r3, r3
 8029ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8029aba:	4613      	mov	r3, r2
 8029abc:	eb42 0303 	adc.w	r3, r2, r3
 8029ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8029ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8029aca:	f7f6 fbe1 	bl	8020290 <__aeabi_uldivmod>
 8029ace:	4602      	mov	r2, r0
 8029ad0:	460b      	mov	r3, r1
 8029ad2:	4b0d      	ldr	r3, [pc, #52]	; (8029b08 <UART_SetConfig+0x2d4>)
 8029ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8029ad8:	095b      	lsrs	r3, r3, #5
 8029ada:	2164      	movs	r1, #100	; 0x64
 8029adc:	fb01 f303 	mul.w	r3, r1, r3
 8029ae0:	1ad3      	subs	r3, r2, r3
 8029ae2:	00db      	lsls	r3, r3, #3
 8029ae4:	3332      	adds	r3, #50	; 0x32
 8029ae6:	4a08      	ldr	r2, [pc, #32]	; (8029b08 <UART_SetConfig+0x2d4>)
 8029ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8029aec:	095b      	lsrs	r3, r3, #5
 8029aee:	f003 0207 	and.w	r2, r3, #7
 8029af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029af6:	681b      	ldr	r3, [r3, #0]
 8029af8:	4422      	add	r2, r4
 8029afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8029afc:	e105      	b.n	8029d0a <UART_SetConfig+0x4d6>
 8029afe:	bf00      	nop
 8029b00:	40011000 	.word	0x40011000
 8029b04:	40011400 	.word	0x40011400
 8029b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029b10:	2200      	movs	r2, #0
 8029b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8029b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8029b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8029b1e:	4642      	mov	r2, r8
 8029b20:	464b      	mov	r3, r9
 8029b22:	1891      	adds	r1, r2, r2
 8029b24:	6239      	str	r1, [r7, #32]
 8029b26:	415b      	adcs	r3, r3
 8029b28:	627b      	str	r3, [r7, #36]	; 0x24
 8029b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029b2e:	4641      	mov	r1, r8
 8029b30:	1854      	adds	r4, r2, r1
 8029b32:	4649      	mov	r1, r9
 8029b34:	eb43 0501 	adc.w	r5, r3, r1
 8029b38:	f04f 0200 	mov.w	r2, #0
 8029b3c:	f04f 0300 	mov.w	r3, #0
 8029b40:	00eb      	lsls	r3, r5, #3
 8029b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029b46:	00e2      	lsls	r2, r4, #3
 8029b48:	4614      	mov	r4, r2
 8029b4a:	461d      	mov	r5, r3
 8029b4c:	4643      	mov	r3, r8
 8029b4e:	18e3      	adds	r3, r4, r3
 8029b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8029b54:	464b      	mov	r3, r9
 8029b56:	eb45 0303 	adc.w	r3, r5, r3
 8029b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b62:	685b      	ldr	r3, [r3, #4]
 8029b64:	2200      	movs	r2, #0
 8029b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029b6e:	f04f 0200 	mov.w	r2, #0
 8029b72:	f04f 0300 	mov.w	r3, #0
 8029b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8029b7a:	4629      	mov	r1, r5
 8029b7c:	008b      	lsls	r3, r1, #2
 8029b7e:	4621      	mov	r1, r4
 8029b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029b84:	4621      	mov	r1, r4
 8029b86:	008a      	lsls	r2, r1, #2
 8029b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8029b8c:	f7f6 fb80 	bl	8020290 <__aeabi_uldivmod>
 8029b90:	4602      	mov	r2, r0
 8029b92:	460b      	mov	r3, r1
 8029b94:	4b60      	ldr	r3, [pc, #384]	; (8029d18 <UART_SetConfig+0x4e4>)
 8029b96:	fba3 2302 	umull	r2, r3, r3, r2
 8029b9a:	095b      	lsrs	r3, r3, #5
 8029b9c:	011c      	lsls	r4, r3, #4
 8029b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029ba2:	2200      	movs	r2, #0
 8029ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029ba8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8029bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8029bb0:	4642      	mov	r2, r8
 8029bb2:	464b      	mov	r3, r9
 8029bb4:	1891      	adds	r1, r2, r2
 8029bb6:	61b9      	str	r1, [r7, #24]
 8029bb8:	415b      	adcs	r3, r3
 8029bba:	61fb      	str	r3, [r7, #28]
 8029bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029bc0:	4641      	mov	r1, r8
 8029bc2:	1851      	adds	r1, r2, r1
 8029bc4:	6139      	str	r1, [r7, #16]
 8029bc6:	4649      	mov	r1, r9
 8029bc8:	414b      	adcs	r3, r1
 8029bca:	617b      	str	r3, [r7, #20]
 8029bcc:	f04f 0200 	mov.w	r2, #0
 8029bd0:	f04f 0300 	mov.w	r3, #0
 8029bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029bd8:	4659      	mov	r1, fp
 8029bda:	00cb      	lsls	r3, r1, #3
 8029bdc:	4651      	mov	r1, sl
 8029bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029be2:	4651      	mov	r1, sl
 8029be4:	00ca      	lsls	r2, r1, #3
 8029be6:	4610      	mov	r0, r2
 8029be8:	4619      	mov	r1, r3
 8029bea:	4603      	mov	r3, r0
 8029bec:	4642      	mov	r2, r8
 8029bee:	189b      	adds	r3, r3, r2
 8029bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029bf4:	464b      	mov	r3, r9
 8029bf6:	460a      	mov	r2, r1
 8029bf8:	eb42 0303 	adc.w	r3, r2, r3
 8029bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029c04:	685b      	ldr	r3, [r3, #4]
 8029c06:	2200      	movs	r2, #0
 8029c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8029c0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8029c0c:	f04f 0200 	mov.w	r2, #0
 8029c10:	f04f 0300 	mov.w	r3, #0
 8029c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8029c18:	4649      	mov	r1, r9
 8029c1a:	008b      	lsls	r3, r1, #2
 8029c1c:	4641      	mov	r1, r8
 8029c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029c22:	4641      	mov	r1, r8
 8029c24:	008a      	lsls	r2, r1, #2
 8029c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8029c2a:	f7f6 fb31 	bl	8020290 <__aeabi_uldivmod>
 8029c2e:	4602      	mov	r2, r0
 8029c30:	460b      	mov	r3, r1
 8029c32:	4b39      	ldr	r3, [pc, #228]	; (8029d18 <UART_SetConfig+0x4e4>)
 8029c34:	fba3 1302 	umull	r1, r3, r3, r2
 8029c38:	095b      	lsrs	r3, r3, #5
 8029c3a:	2164      	movs	r1, #100	; 0x64
 8029c3c:	fb01 f303 	mul.w	r3, r1, r3
 8029c40:	1ad3      	subs	r3, r2, r3
 8029c42:	011b      	lsls	r3, r3, #4
 8029c44:	3332      	adds	r3, #50	; 0x32
 8029c46:	4a34      	ldr	r2, [pc, #208]	; (8029d18 <UART_SetConfig+0x4e4>)
 8029c48:	fba2 2303 	umull	r2, r3, r2, r3
 8029c4c:	095b      	lsrs	r3, r3, #5
 8029c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029c52:	441c      	add	r4, r3
 8029c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029c58:	2200      	movs	r2, #0
 8029c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8029c5c:	677a      	str	r2, [r7, #116]	; 0x74
 8029c5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8029c62:	4642      	mov	r2, r8
 8029c64:	464b      	mov	r3, r9
 8029c66:	1891      	adds	r1, r2, r2
 8029c68:	60b9      	str	r1, [r7, #8]
 8029c6a:	415b      	adcs	r3, r3
 8029c6c:	60fb      	str	r3, [r7, #12]
 8029c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029c72:	4641      	mov	r1, r8
 8029c74:	1851      	adds	r1, r2, r1
 8029c76:	6039      	str	r1, [r7, #0]
 8029c78:	4649      	mov	r1, r9
 8029c7a:	414b      	adcs	r3, r1
 8029c7c:	607b      	str	r3, [r7, #4]
 8029c7e:	f04f 0200 	mov.w	r2, #0
 8029c82:	f04f 0300 	mov.w	r3, #0
 8029c86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029c8a:	4659      	mov	r1, fp
 8029c8c:	00cb      	lsls	r3, r1, #3
 8029c8e:	4651      	mov	r1, sl
 8029c90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029c94:	4651      	mov	r1, sl
 8029c96:	00ca      	lsls	r2, r1, #3
 8029c98:	4610      	mov	r0, r2
 8029c9a:	4619      	mov	r1, r3
 8029c9c:	4603      	mov	r3, r0
 8029c9e:	4642      	mov	r2, r8
 8029ca0:	189b      	adds	r3, r3, r2
 8029ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8029ca4:	464b      	mov	r3, r9
 8029ca6:	460a      	mov	r2, r1
 8029ca8:	eb42 0303 	adc.w	r3, r2, r3
 8029cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029cb2:	685b      	ldr	r3, [r3, #4]
 8029cb4:	2200      	movs	r2, #0
 8029cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8029cb8:	667a      	str	r2, [r7, #100]	; 0x64
 8029cba:	f04f 0200 	mov.w	r2, #0
 8029cbe:	f04f 0300 	mov.w	r3, #0
 8029cc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8029cc6:	4649      	mov	r1, r9
 8029cc8:	008b      	lsls	r3, r1, #2
 8029cca:	4641      	mov	r1, r8
 8029ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029cd0:	4641      	mov	r1, r8
 8029cd2:	008a      	lsls	r2, r1, #2
 8029cd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8029cd8:	f7f6 fada 	bl	8020290 <__aeabi_uldivmod>
 8029cdc:	4602      	mov	r2, r0
 8029cde:	460b      	mov	r3, r1
 8029ce0:	4b0d      	ldr	r3, [pc, #52]	; (8029d18 <UART_SetConfig+0x4e4>)
 8029ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8029ce6:	095b      	lsrs	r3, r3, #5
 8029ce8:	2164      	movs	r1, #100	; 0x64
 8029cea:	fb01 f303 	mul.w	r3, r1, r3
 8029cee:	1ad3      	subs	r3, r2, r3
 8029cf0:	011b      	lsls	r3, r3, #4
 8029cf2:	3332      	adds	r3, #50	; 0x32
 8029cf4:	4a08      	ldr	r2, [pc, #32]	; (8029d18 <UART_SetConfig+0x4e4>)
 8029cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8029cfa:	095b      	lsrs	r3, r3, #5
 8029cfc:	f003 020f 	and.w	r2, r3, #15
 8029d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029d04:	681b      	ldr	r3, [r3, #0]
 8029d06:	4422      	add	r2, r4
 8029d08:	609a      	str	r2, [r3, #8]
}
 8029d0a:	bf00      	nop
 8029d0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8029d10:	46bd      	mov	sp, r7
 8029d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029d16:	bf00      	nop
 8029d18:	51eb851f 	.word	0x51eb851f

08029d1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029d1c:	b480      	push	{r7}
 8029d1e:	b083      	sub	sp, #12
 8029d20:	af00      	add	r7, sp, #0
 8029d22:	6078      	str	r0, [r7, #4]
 8029d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8029d26:	683b      	ldr	r3, [r7, #0]
 8029d28:	681b      	ldr	r3, [r3, #0]
 8029d2a:	2b00      	cmp	r3, #0
 8029d2c:	d123      	bne.n	8029d76 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	681b      	ldr	r3, [r3, #0]
 8029d32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029d3a:	683a      	ldr	r2, [r7, #0]
 8029d3c:	6851      	ldr	r1, [r2, #4]
 8029d3e:	683a      	ldr	r2, [r7, #0]
 8029d40:	6892      	ldr	r2, [r2, #8]
 8029d42:	4311      	orrs	r1, r2
 8029d44:	683a      	ldr	r2, [r7, #0]
 8029d46:	68d2      	ldr	r2, [r2, #12]
 8029d48:	4311      	orrs	r1, r2
 8029d4a:	683a      	ldr	r2, [r7, #0]
 8029d4c:	6912      	ldr	r2, [r2, #16]
 8029d4e:	4311      	orrs	r1, r2
 8029d50:	683a      	ldr	r2, [r7, #0]
 8029d52:	6952      	ldr	r2, [r2, #20]
 8029d54:	4311      	orrs	r1, r2
 8029d56:	683a      	ldr	r2, [r7, #0]
 8029d58:	6992      	ldr	r2, [r2, #24]
 8029d5a:	4311      	orrs	r1, r2
 8029d5c:	683a      	ldr	r2, [r7, #0]
 8029d5e:	69d2      	ldr	r2, [r2, #28]
 8029d60:	4311      	orrs	r1, r2
 8029d62:	683a      	ldr	r2, [r7, #0]
 8029d64:	6a12      	ldr	r2, [r2, #32]
 8029d66:	4311      	orrs	r1, r2
 8029d68:	683a      	ldr	r2, [r7, #0]
 8029d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8029d6c:	430a      	orrs	r2, r1
 8029d6e:	431a      	orrs	r2, r3
 8029d70:	687b      	ldr	r3, [r7, #4]
 8029d72:	601a      	str	r2, [r3, #0]
 8029d74:	e028      	b.n	8029dc8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029d76:	687b      	ldr	r3, [r7, #4]
 8029d78:	681b      	ldr	r3, [r3, #0]
 8029d7a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8029d7e:	683b      	ldr	r3, [r7, #0]
 8029d80:	69d9      	ldr	r1, [r3, #28]
 8029d82:	683b      	ldr	r3, [r7, #0]
 8029d84:	6a1b      	ldr	r3, [r3, #32]
 8029d86:	4319      	orrs	r1, r3
 8029d88:	683b      	ldr	r3, [r7, #0]
 8029d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029d8c:	430b      	orrs	r3, r1
 8029d8e:	431a      	orrs	r2, r3
 8029d90:	687b      	ldr	r3, [r7, #4]
 8029d92:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8029d94:	687b      	ldr	r3, [r7, #4]
 8029d96:	685b      	ldr	r3, [r3, #4]
 8029d98:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029da0:	683a      	ldr	r2, [r7, #0]
 8029da2:	6851      	ldr	r1, [r2, #4]
 8029da4:	683a      	ldr	r2, [r7, #0]
 8029da6:	6892      	ldr	r2, [r2, #8]
 8029da8:	4311      	orrs	r1, r2
 8029daa:	683a      	ldr	r2, [r7, #0]
 8029dac:	68d2      	ldr	r2, [r2, #12]
 8029dae:	4311      	orrs	r1, r2
 8029db0:	683a      	ldr	r2, [r7, #0]
 8029db2:	6912      	ldr	r2, [r2, #16]
 8029db4:	4311      	orrs	r1, r2
 8029db6:	683a      	ldr	r2, [r7, #0]
 8029db8:	6952      	ldr	r2, [r2, #20]
 8029dba:	4311      	orrs	r1, r2
 8029dbc:	683a      	ldr	r2, [r7, #0]
 8029dbe:	6992      	ldr	r2, [r2, #24]
 8029dc0:	430a      	orrs	r2, r1
 8029dc2:	431a      	orrs	r2, r3
 8029dc4:	687b      	ldr	r3, [r7, #4]
 8029dc6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8029dc8:	2300      	movs	r3, #0
}
 8029dca:	4618      	mov	r0, r3
 8029dcc:	370c      	adds	r7, #12
 8029dce:	46bd      	mov	sp, r7
 8029dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dd4:	4770      	bx	lr

08029dd6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8029dd6:	b480      	push	{r7}
 8029dd8:	b085      	sub	sp, #20
 8029dda:	af00      	add	r7, sp, #0
 8029ddc:	60f8      	str	r0, [r7, #12]
 8029dde:	60b9      	str	r1, [r7, #8]
 8029de0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8029de2:	687b      	ldr	r3, [r7, #4]
 8029de4:	2b00      	cmp	r3, #0
 8029de6:	d128      	bne.n	8029e3a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029de8:	68fb      	ldr	r3, [r7, #12]
 8029dea:	689b      	ldr	r3, [r3, #8]
 8029dec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029df0:	68bb      	ldr	r3, [r7, #8]
 8029df2:	681b      	ldr	r3, [r3, #0]
 8029df4:	1e59      	subs	r1, r3, #1
 8029df6:	68bb      	ldr	r3, [r7, #8]
 8029df8:	685b      	ldr	r3, [r3, #4]
 8029dfa:	3b01      	subs	r3, #1
 8029dfc:	011b      	lsls	r3, r3, #4
 8029dfe:	4319      	orrs	r1, r3
 8029e00:	68bb      	ldr	r3, [r7, #8]
 8029e02:	689b      	ldr	r3, [r3, #8]
 8029e04:	3b01      	subs	r3, #1
 8029e06:	021b      	lsls	r3, r3, #8
 8029e08:	4319      	orrs	r1, r3
 8029e0a:	68bb      	ldr	r3, [r7, #8]
 8029e0c:	68db      	ldr	r3, [r3, #12]
 8029e0e:	3b01      	subs	r3, #1
 8029e10:	031b      	lsls	r3, r3, #12
 8029e12:	4319      	orrs	r1, r3
 8029e14:	68bb      	ldr	r3, [r7, #8]
 8029e16:	691b      	ldr	r3, [r3, #16]
 8029e18:	3b01      	subs	r3, #1
 8029e1a:	041b      	lsls	r3, r3, #16
 8029e1c:	4319      	orrs	r1, r3
 8029e1e:	68bb      	ldr	r3, [r7, #8]
 8029e20:	695b      	ldr	r3, [r3, #20]
 8029e22:	3b01      	subs	r3, #1
 8029e24:	051b      	lsls	r3, r3, #20
 8029e26:	4319      	orrs	r1, r3
 8029e28:	68bb      	ldr	r3, [r7, #8]
 8029e2a:	699b      	ldr	r3, [r3, #24]
 8029e2c:	3b01      	subs	r3, #1
 8029e2e:	061b      	lsls	r3, r3, #24
 8029e30:	430b      	orrs	r3, r1
 8029e32:	431a      	orrs	r2, r3
 8029e34:	68fb      	ldr	r3, [r7, #12]
 8029e36:	609a      	str	r2, [r3, #8]
 8029e38:	e02f      	b.n	8029e9a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029e3a:	68fb      	ldr	r3, [r7, #12]
 8029e3c:	689b      	ldr	r3, [r3, #8]
 8029e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029e46:	68ba      	ldr	r2, [r7, #8]
 8029e48:	68d2      	ldr	r2, [r2, #12]
 8029e4a:	3a01      	subs	r2, #1
 8029e4c:	0311      	lsls	r1, r2, #12
 8029e4e:	68ba      	ldr	r2, [r7, #8]
 8029e50:	6952      	ldr	r2, [r2, #20]
 8029e52:	3a01      	subs	r2, #1
 8029e54:	0512      	lsls	r2, r2, #20
 8029e56:	430a      	orrs	r2, r1
 8029e58:	431a      	orrs	r2, r3
 8029e5a:	68fb      	ldr	r3, [r7, #12]
 8029e5c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8029e5e:	68fb      	ldr	r3, [r7, #12]
 8029e60:	68db      	ldr	r3, [r3, #12]
 8029e62:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029e66:	68bb      	ldr	r3, [r7, #8]
 8029e68:	681b      	ldr	r3, [r3, #0]
 8029e6a:	1e59      	subs	r1, r3, #1
 8029e6c:	68bb      	ldr	r3, [r7, #8]
 8029e6e:	685b      	ldr	r3, [r3, #4]
 8029e70:	3b01      	subs	r3, #1
 8029e72:	011b      	lsls	r3, r3, #4
 8029e74:	4319      	orrs	r1, r3
 8029e76:	68bb      	ldr	r3, [r7, #8]
 8029e78:	689b      	ldr	r3, [r3, #8]
 8029e7a:	3b01      	subs	r3, #1
 8029e7c:	021b      	lsls	r3, r3, #8
 8029e7e:	4319      	orrs	r1, r3
 8029e80:	68bb      	ldr	r3, [r7, #8]
 8029e82:	691b      	ldr	r3, [r3, #16]
 8029e84:	3b01      	subs	r3, #1
 8029e86:	041b      	lsls	r3, r3, #16
 8029e88:	4319      	orrs	r1, r3
 8029e8a:	68bb      	ldr	r3, [r7, #8]
 8029e8c:	699b      	ldr	r3, [r3, #24]
 8029e8e:	3b01      	subs	r3, #1
 8029e90:	061b      	lsls	r3, r3, #24
 8029e92:	430b      	orrs	r3, r1
 8029e94:	431a      	orrs	r2, r3
 8029e96:	68fb      	ldr	r3, [r7, #12]
 8029e98:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8029e9a:	2300      	movs	r3, #0
}
 8029e9c:	4618      	mov	r0, r3
 8029e9e:	3714      	adds	r7, #20
 8029ea0:	46bd      	mov	sp, r7
 8029ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ea6:	4770      	bx	lr

08029ea8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029ea8:	b580      	push	{r7, lr}
 8029eaa:	b086      	sub	sp, #24
 8029eac:	af00      	add	r7, sp, #0
 8029eae:	60f8      	str	r0, [r7, #12]
 8029eb0:	60b9      	str	r1, [r7, #8]
 8029eb2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8029eb4:	2300      	movs	r3, #0
 8029eb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8029eb8:	68fb      	ldr	r3, [r7, #12]
 8029eba:	691b      	ldr	r3, [r3, #16]
 8029ebc:	0d9b      	lsrs	r3, r3, #22
 8029ebe:	059b      	lsls	r3, r3, #22
 8029ec0:	68ba      	ldr	r2, [r7, #8]
 8029ec2:	6811      	ldr	r1, [r2, #0]
 8029ec4:	68ba      	ldr	r2, [r7, #8]
 8029ec6:	6852      	ldr	r2, [r2, #4]
 8029ec8:	4311      	orrs	r1, r2
 8029eca:	68ba      	ldr	r2, [r7, #8]
 8029ecc:	6892      	ldr	r2, [r2, #8]
 8029ece:	3a01      	subs	r2, #1
 8029ed0:	0152      	lsls	r2, r2, #5
 8029ed2:	4311      	orrs	r1, r2
 8029ed4:	68ba      	ldr	r2, [r7, #8]
 8029ed6:	68d2      	ldr	r2, [r2, #12]
 8029ed8:	0252      	lsls	r2, r2, #9
 8029eda:	430a      	orrs	r2, r1
 8029edc:	431a      	orrs	r2, r3
 8029ede:	68fb      	ldr	r3, [r7, #12]
 8029ee0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8029ee2:	f7f9 f949 	bl	8023178 <HAL_GetTick>
 8029ee6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029ee8:	e010      	b.n	8029f0c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029ef0:	d00c      	beq.n	8029f0c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8029ef2:	687b      	ldr	r3, [r7, #4]
 8029ef4:	2b00      	cmp	r3, #0
 8029ef6:	d007      	beq.n	8029f08 <FMC_SDRAM_SendCommand+0x60>
 8029ef8:	f7f9 f93e 	bl	8023178 <HAL_GetTick>
 8029efc:	4602      	mov	r2, r0
 8029efe:	697b      	ldr	r3, [r7, #20]
 8029f00:	1ad3      	subs	r3, r2, r3
 8029f02:	687a      	ldr	r2, [r7, #4]
 8029f04:	429a      	cmp	r2, r3
 8029f06:	d201      	bcs.n	8029f0c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8029f08:	2303      	movs	r3, #3
 8029f0a:	e006      	b.n	8029f1a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029f0c:	68fb      	ldr	r3, [r7, #12]
 8029f0e:	699b      	ldr	r3, [r3, #24]
 8029f10:	f003 0320 	and.w	r3, r3, #32
 8029f14:	2b20      	cmp	r3, #32
 8029f16:	d0e8      	beq.n	8029eea <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8029f18:	2300      	movs	r3, #0
}
 8029f1a:	4618      	mov	r0, r3
 8029f1c:	3718      	adds	r7, #24
 8029f1e:	46bd      	mov	sp, r7
 8029f20:	bd80      	pop	{r7, pc}

08029f22 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8029f22:	b480      	push	{r7}
 8029f24:	b083      	sub	sp, #12
 8029f26:	af00      	add	r7, sp, #0
 8029f28:	6078      	str	r0, [r7, #4]
 8029f2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8029f2c:	687b      	ldr	r3, [r7, #4]
 8029f2e:	695b      	ldr	r3, [r3, #20]
 8029f30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8029f34:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8029f38:	683a      	ldr	r2, [r7, #0]
 8029f3a:	0052      	lsls	r2, r2, #1
 8029f3c:	431a      	orrs	r2, r3
 8029f3e:	687b      	ldr	r3, [r7, #4]
 8029f40:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8029f42:	2300      	movs	r3, #0
}
 8029f44:	4618      	mov	r0, r3
 8029f46:	370c      	adds	r7, #12
 8029f48:	46bd      	mov	sp, r7
 8029f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f4e:	4770      	bx	lr

08029f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029f50:	b084      	sub	sp, #16
 8029f52:	b580      	push	{r7, lr}
 8029f54:	b084      	sub	sp, #16
 8029f56:	af00      	add	r7, sp, #0
 8029f58:	6078      	str	r0, [r7, #4]
 8029f5a:	f107 001c 	add.w	r0, r7, #28
 8029f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029f64:	2b01      	cmp	r3, #1
 8029f66:	d122      	bne.n	8029fae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029f68:	687b      	ldr	r3, [r7, #4]
 8029f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	68db      	ldr	r3, [r3, #12]
 8029f78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8029f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029f80:	687a      	ldr	r2, [r7, #4]
 8029f82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029f84:	687b      	ldr	r3, [r7, #4]
 8029f86:	68db      	ldr	r3, [r3, #12]
 8029f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029f8c:	687b      	ldr	r3, [r7, #4]
 8029f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f92:	2b01      	cmp	r3, #1
 8029f94:	d105      	bne.n	8029fa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	68db      	ldr	r3, [r3, #12]
 8029f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8029f9e:	687b      	ldr	r3, [r7, #4]
 8029fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029fa2:	6878      	ldr	r0, [r7, #4]
 8029fa4:	f000 f9c0 	bl	802a328 <USB_CoreReset>
 8029fa8:	4603      	mov	r3, r0
 8029faa:	73fb      	strb	r3, [r7, #15]
 8029fac:	e01a      	b.n	8029fe4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8029fae:	687b      	ldr	r3, [r7, #4]
 8029fb0:	68db      	ldr	r3, [r3, #12]
 8029fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8029fb6:	687b      	ldr	r3, [r7, #4]
 8029fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029fba:	6878      	ldr	r0, [r7, #4]
 8029fbc:	f000 f9b4 	bl	802a328 <USB_CoreReset>
 8029fc0:	4603      	mov	r3, r0
 8029fc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8029fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029fc6:	2b00      	cmp	r3, #0
 8029fc8:	d106      	bne.n	8029fd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029fca:	687b      	ldr	r3, [r7, #4]
 8029fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029fce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029fd2:	687b      	ldr	r3, [r7, #4]
 8029fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8029fd6:	e005      	b.n	8029fe4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029fd8:	687b      	ldr	r3, [r7, #4]
 8029fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8029fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029fe6:	2b01      	cmp	r3, #1
 8029fe8:	d10b      	bne.n	802a002 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8029fea:	687b      	ldr	r3, [r7, #4]
 8029fec:	689b      	ldr	r3, [r3, #8]
 8029fee:	f043 0206 	orr.w	r2, r3, #6
 8029ff2:	687b      	ldr	r3, [r7, #4]
 8029ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8029ff6:	687b      	ldr	r3, [r7, #4]
 8029ff8:	689b      	ldr	r3, [r3, #8]
 8029ffa:	f043 0220 	orr.w	r2, r3, #32
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802a002:	7bfb      	ldrb	r3, [r7, #15]
}
 802a004:	4618      	mov	r0, r3
 802a006:	3710      	adds	r7, #16
 802a008:	46bd      	mov	sp, r7
 802a00a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a00e:	b004      	add	sp, #16
 802a010:	4770      	bx	lr

0802a012 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a012:	b480      	push	{r7}
 802a014:	b083      	sub	sp, #12
 802a016:	af00      	add	r7, sp, #0
 802a018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	689b      	ldr	r3, [r3, #8]
 802a01e:	f043 0201 	orr.w	r2, r3, #1
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a026:	2300      	movs	r3, #0
}
 802a028:	4618      	mov	r0, r3
 802a02a:	370c      	adds	r7, #12
 802a02c:	46bd      	mov	sp, r7
 802a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a032:	4770      	bx	lr

0802a034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a034:	b480      	push	{r7}
 802a036:	b083      	sub	sp, #12
 802a038:	af00      	add	r7, sp, #0
 802a03a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802a03c:	687b      	ldr	r3, [r7, #4]
 802a03e:	689b      	ldr	r3, [r3, #8]
 802a040:	f023 0201 	bic.w	r2, r3, #1
 802a044:	687b      	ldr	r3, [r7, #4]
 802a046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a048:	2300      	movs	r3, #0
}
 802a04a:	4618      	mov	r0, r3
 802a04c:	370c      	adds	r7, #12
 802a04e:	46bd      	mov	sp, r7
 802a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a054:	4770      	bx	lr

0802a056 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802a056:	b580      	push	{r7, lr}
 802a058:	b084      	sub	sp, #16
 802a05a:	af00      	add	r7, sp, #0
 802a05c:	6078      	str	r0, [r7, #4]
 802a05e:	460b      	mov	r3, r1
 802a060:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802a062:	2300      	movs	r3, #0
 802a064:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	68db      	ldr	r3, [r3, #12]
 802a06a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802a06e:	687b      	ldr	r3, [r7, #4]
 802a070:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802a072:	78fb      	ldrb	r3, [r7, #3]
 802a074:	2b01      	cmp	r3, #1
 802a076:	d115      	bne.n	802a0a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	68db      	ldr	r3, [r3, #12]
 802a07c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a084:	2001      	movs	r0, #1
 802a086:	f7f9 f883 	bl	8023190 <HAL_Delay>
      ms++;
 802a08a:	68fb      	ldr	r3, [r7, #12]
 802a08c:	3301      	adds	r3, #1
 802a08e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802a090:	6878      	ldr	r0, [r7, #4]
 802a092:	f000 f93a 	bl	802a30a <USB_GetMode>
 802a096:	4603      	mov	r3, r0
 802a098:	2b01      	cmp	r3, #1
 802a09a:	d01e      	beq.n	802a0da <USB_SetCurrentMode+0x84>
 802a09c:	68fb      	ldr	r3, [r7, #12]
 802a09e:	2b31      	cmp	r3, #49	; 0x31
 802a0a0:	d9f0      	bls.n	802a084 <USB_SetCurrentMode+0x2e>
 802a0a2:	e01a      	b.n	802a0da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802a0a4:	78fb      	ldrb	r3, [r7, #3]
 802a0a6:	2b00      	cmp	r3, #0
 802a0a8:	d115      	bne.n	802a0d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	68db      	ldr	r3, [r3, #12]
 802a0ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a0b6:	2001      	movs	r0, #1
 802a0b8:	f7f9 f86a 	bl	8023190 <HAL_Delay>
      ms++;
 802a0bc:	68fb      	ldr	r3, [r7, #12]
 802a0be:	3301      	adds	r3, #1
 802a0c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802a0c2:	6878      	ldr	r0, [r7, #4]
 802a0c4:	f000 f921 	bl	802a30a <USB_GetMode>
 802a0c8:	4603      	mov	r3, r0
 802a0ca:	2b00      	cmp	r3, #0
 802a0cc:	d005      	beq.n	802a0da <USB_SetCurrentMode+0x84>
 802a0ce:	68fb      	ldr	r3, [r7, #12]
 802a0d0:	2b31      	cmp	r3, #49	; 0x31
 802a0d2:	d9f0      	bls.n	802a0b6 <USB_SetCurrentMode+0x60>
 802a0d4:	e001      	b.n	802a0da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802a0d6:	2301      	movs	r3, #1
 802a0d8:	e005      	b.n	802a0e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	2b32      	cmp	r3, #50	; 0x32
 802a0de:	d101      	bne.n	802a0e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802a0e0:	2301      	movs	r3, #1
 802a0e2:	e000      	b.n	802a0e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802a0e4:	2300      	movs	r3, #0
}
 802a0e6:	4618      	mov	r0, r3
 802a0e8:	3710      	adds	r7, #16
 802a0ea:	46bd      	mov	sp, r7
 802a0ec:	bd80      	pop	{r7, pc}
	...

0802a0f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a0f0:	b480      	push	{r7}
 802a0f2:	b085      	sub	sp, #20
 802a0f4:	af00      	add	r7, sp, #0
 802a0f6:	6078      	str	r0, [r7, #4]
 802a0f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802a0fa:	2300      	movs	r3, #0
 802a0fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a0fe:	68fb      	ldr	r3, [r7, #12]
 802a100:	3301      	adds	r3, #1
 802a102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a104:	68fb      	ldr	r3, [r7, #12]
 802a106:	4a13      	ldr	r2, [pc, #76]	; (802a154 <USB_FlushTxFifo+0x64>)
 802a108:	4293      	cmp	r3, r2
 802a10a:	d901      	bls.n	802a110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802a10c:	2303      	movs	r3, #3
 802a10e:	e01b      	b.n	802a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a110:	687b      	ldr	r3, [r7, #4]
 802a112:	691b      	ldr	r3, [r3, #16]
 802a114:	2b00      	cmp	r3, #0
 802a116:	daf2      	bge.n	802a0fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802a118:	2300      	movs	r3, #0
 802a11a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a11c:	683b      	ldr	r3, [r7, #0]
 802a11e:	019b      	lsls	r3, r3, #6
 802a120:	f043 0220 	orr.w	r2, r3, #32
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a128:	68fb      	ldr	r3, [r7, #12]
 802a12a:	3301      	adds	r3, #1
 802a12c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a12e:	68fb      	ldr	r3, [r7, #12]
 802a130:	4a08      	ldr	r2, [pc, #32]	; (802a154 <USB_FlushTxFifo+0x64>)
 802a132:	4293      	cmp	r3, r2
 802a134:	d901      	bls.n	802a13a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802a136:	2303      	movs	r3, #3
 802a138:	e006      	b.n	802a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	691b      	ldr	r3, [r3, #16]
 802a13e:	f003 0320 	and.w	r3, r3, #32
 802a142:	2b20      	cmp	r3, #32
 802a144:	d0f0      	beq.n	802a128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802a146:	2300      	movs	r3, #0
}
 802a148:	4618      	mov	r0, r3
 802a14a:	3714      	adds	r7, #20
 802a14c:	46bd      	mov	sp, r7
 802a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a152:	4770      	bx	lr
 802a154:	00030d40 	.word	0x00030d40

0802a158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a158:	b480      	push	{r7}
 802a15a:	b085      	sub	sp, #20
 802a15c:	af00      	add	r7, sp, #0
 802a15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a160:	2300      	movs	r3, #0
 802a162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a164:	68fb      	ldr	r3, [r7, #12]
 802a166:	3301      	adds	r3, #1
 802a168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a16a:	68fb      	ldr	r3, [r7, #12]
 802a16c:	4a11      	ldr	r2, [pc, #68]	; (802a1b4 <USB_FlushRxFifo+0x5c>)
 802a16e:	4293      	cmp	r3, r2
 802a170:	d901      	bls.n	802a176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802a172:	2303      	movs	r3, #3
 802a174:	e018      	b.n	802a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a176:	687b      	ldr	r3, [r7, #4]
 802a178:	691b      	ldr	r3, [r3, #16]
 802a17a:	2b00      	cmp	r3, #0
 802a17c:	daf2      	bge.n	802a164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802a17e:	2300      	movs	r3, #0
 802a180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	2210      	movs	r2, #16
 802a186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a188:	68fb      	ldr	r3, [r7, #12]
 802a18a:	3301      	adds	r3, #1
 802a18c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a18e:	68fb      	ldr	r3, [r7, #12]
 802a190:	4a08      	ldr	r2, [pc, #32]	; (802a1b4 <USB_FlushRxFifo+0x5c>)
 802a192:	4293      	cmp	r3, r2
 802a194:	d901      	bls.n	802a19a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802a196:	2303      	movs	r3, #3
 802a198:	e006      	b.n	802a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a19a:	687b      	ldr	r3, [r7, #4]
 802a19c:	691b      	ldr	r3, [r3, #16]
 802a19e:	f003 0310 	and.w	r3, r3, #16
 802a1a2:	2b10      	cmp	r3, #16
 802a1a4:	d0f0      	beq.n	802a188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802a1a6:	2300      	movs	r3, #0
}
 802a1a8:	4618      	mov	r0, r3
 802a1aa:	3714      	adds	r7, #20
 802a1ac:	46bd      	mov	sp, r7
 802a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1b2:	4770      	bx	lr
 802a1b4:	00030d40 	.word	0x00030d40

0802a1b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802a1b8:	b480      	push	{r7}
 802a1ba:	b089      	sub	sp, #36	; 0x24
 802a1bc:	af00      	add	r7, sp, #0
 802a1be:	60f8      	str	r0, [r7, #12]
 802a1c0:	60b9      	str	r1, [r7, #8]
 802a1c2:	4611      	mov	r1, r2
 802a1c4:	461a      	mov	r2, r3
 802a1c6:	460b      	mov	r3, r1
 802a1c8:	71fb      	strb	r3, [r7, #7]
 802a1ca:	4613      	mov	r3, r2
 802a1cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a1ce:	68fb      	ldr	r3, [r7, #12]
 802a1d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802a1d2:	68bb      	ldr	r3, [r7, #8]
 802a1d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802a1d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d123      	bne.n	802a226 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802a1de:	88bb      	ldrh	r3, [r7, #4]
 802a1e0:	3303      	adds	r3, #3
 802a1e2:	089b      	lsrs	r3, r3, #2
 802a1e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802a1e6:	2300      	movs	r3, #0
 802a1e8:	61bb      	str	r3, [r7, #24]
 802a1ea:	e018      	b.n	802a21e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802a1ec:	79fb      	ldrb	r3, [r7, #7]
 802a1ee:	031a      	lsls	r2, r3, #12
 802a1f0:	697b      	ldr	r3, [r7, #20]
 802a1f2:	4413      	add	r3, r2
 802a1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a1f8:	461a      	mov	r2, r3
 802a1fa:	69fb      	ldr	r3, [r7, #28]
 802a1fc:	681b      	ldr	r3, [r3, #0]
 802a1fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 802a200:	69fb      	ldr	r3, [r7, #28]
 802a202:	3301      	adds	r3, #1
 802a204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a206:	69fb      	ldr	r3, [r7, #28]
 802a208:	3301      	adds	r3, #1
 802a20a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a20c:	69fb      	ldr	r3, [r7, #28]
 802a20e:	3301      	adds	r3, #1
 802a210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a212:	69fb      	ldr	r3, [r7, #28]
 802a214:	3301      	adds	r3, #1
 802a216:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802a218:	69bb      	ldr	r3, [r7, #24]
 802a21a:	3301      	adds	r3, #1
 802a21c:	61bb      	str	r3, [r7, #24]
 802a21e:	69ba      	ldr	r2, [r7, #24]
 802a220:	693b      	ldr	r3, [r7, #16]
 802a222:	429a      	cmp	r2, r3
 802a224:	d3e2      	bcc.n	802a1ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802a226:	2300      	movs	r3, #0
}
 802a228:	4618      	mov	r0, r3
 802a22a:	3724      	adds	r7, #36	; 0x24
 802a22c:	46bd      	mov	sp, r7
 802a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a232:	4770      	bx	lr

0802a234 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802a234:	b480      	push	{r7}
 802a236:	b08b      	sub	sp, #44	; 0x2c
 802a238:	af00      	add	r7, sp, #0
 802a23a:	60f8      	str	r0, [r7, #12]
 802a23c:	60b9      	str	r1, [r7, #8]
 802a23e:	4613      	mov	r3, r2
 802a240:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a242:	68fb      	ldr	r3, [r7, #12]
 802a244:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802a246:	68bb      	ldr	r3, [r7, #8]
 802a248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802a24a:	88fb      	ldrh	r3, [r7, #6]
 802a24c:	089b      	lsrs	r3, r3, #2
 802a24e:	b29b      	uxth	r3, r3
 802a250:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802a252:	88fb      	ldrh	r3, [r7, #6]
 802a254:	f003 0303 	and.w	r3, r3, #3
 802a258:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802a25a:	2300      	movs	r3, #0
 802a25c:	623b      	str	r3, [r7, #32]
 802a25e:	e014      	b.n	802a28a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802a260:	69bb      	ldr	r3, [r7, #24]
 802a262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a266:	681a      	ldr	r2, [r3, #0]
 802a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a26a:	601a      	str	r2, [r3, #0]
    pDest++;
 802a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a26e:	3301      	adds	r3, #1
 802a270:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a274:	3301      	adds	r3, #1
 802a276:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a27a:	3301      	adds	r3, #1
 802a27c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a280:	3301      	adds	r3, #1
 802a282:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802a284:	6a3b      	ldr	r3, [r7, #32]
 802a286:	3301      	adds	r3, #1
 802a288:	623b      	str	r3, [r7, #32]
 802a28a:	6a3a      	ldr	r2, [r7, #32]
 802a28c:	697b      	ldr	r3, [r7, #20]
 802a28e:	429a      	cmp	r2, r3
 802a290:	d3e6      	bcc.n	802a260 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802a292:	8bfb      	ldrh	r3, [r7, #30]
 802a294:	2b00      	cmp	r3, #0
 802a296:	d01e      	beq.n	802a2d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802a298:	2300      	movs	r3, #0
 802a29a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802a29c:	69bb      	ldr	r3, [r7, #24]
 802a29e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a2a2:	461a      	mov	r2, r3
 802a2a4:	f107 0310 	add.w	r3, r7, #16
 802a2a8:	6812      	ldr	r2, [r2, #0]
 802a2aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802a2ac:	693a      	ldr	r2, [r7, #16]
 802a2ae:	6a3b      	ldr	r3, [r7, #32]
 802a2b0:	b2db      	uxtb	r3, r3
 802a2b2:	00db      	lsls	r3, r3, #3
 802a2b4:	fa22 f303 	lsr.w	r3, r2, r3
 802a2b8:	b2da      	uxtb	r2, r3
 802a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a2bc:	701a      	strb	r2, [r3, #0]
      i++;
 802a2be:	6a3b      	ldr	r3, [r7, #32]
 802a2c0:	3301      	adds	r3, #1
 802a2c2:	623b      	str	r3, [r7, #32]
      pDest++;
 802a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a2c6:	3301      	adds	r3, #1
 802a2c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802a2ca:	8bfb      	ldrh	r3, [r7, #30]
 802a2cc:	3b01      	subs	r3, #1
 802a2ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802a2d0:	8bfb      	ldrh	r3, [r7, #30]
 802a2d2:	2b00      	cmp	r3, #0
 802a2d4:	d1ea      	bne.n	802a2ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a2d8:	4618      	mov	r0, r3
 802a2da:	372c      	adds	r7, #44	; 0x2c
 802a2dc:	46bd      	mov	sp, r7
 802a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2e2:	4770      	bx	lr

0802a2e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802a2e4:	b480      	push	{r7}
 802a2e6:	b085      	sub	sp, #20
 802a2e8:	af00      	add	r7, sp, #0
 802a2ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802a2ec:	687b      	ldr	r3, [r7, #4]
 802a2ee:	695b      	ldr	r3, [r3, #20]
 802a2f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802a2f2:	687b      	ldr	r3, [r7, #4]
 802a2f4:	699b      	ldr	r3, [r3, #24]
 802a2f6:	68fa      	ldr	r2, [r7, #12]
 802a2f8:	4013      	ands	r3, r2
 802a2fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802a2fc:	68fb      	ldr	r3, [r7, #12]
}
 802a2fe:	4618      	mov	r0, r3
 802a300:	3714      	adds	r7, #20
 802a302:	46bd      	mov	sp, r7
 802a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a308:	4770      	bx	lr

0802a30a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802a30a:	b480      	push	{r7}
 802a30c:	b083      	sub	sp, #12
 802a30e:	af00      	add	r7, sp, #0
 802a310:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802a312:	687b      	ldr	r3, [r7, #4]
 802a314:	695b      	ldr	r3, [r3, #20]
 802a316:	f003 0301 	and.w	r3, r3, #1
}
 802a31a:	4618      	mov	r0, r3
 802a31c:	370c      	adds	r7, #12
 802a31e:	46bd      	mov	sp, r7
 802a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a324:	4770      	bx	lr
	...

0802a328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802a328:	b480      	push	{r7}
 802a32a:	b085      	sub	sp, #20
 802a32c:	af00      	add	r7, sp, #0
 802a32e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a330:	2300      	movs	r3, #0
 802a332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a334:	68fb      	ldr	r3, [r7, #12]
 802a336:	3301      	adds	r3, #1
 802a338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a33a:	68fb      	ldr	r3, [r7, #12]
 802a33c:	4a13      	ldr	r2, [pc, #76]	; (802a38c <USB_CoreReset+0x64>)
 802a33e:	4293      	cmp	r3, r2
 802a340:	d901      	bls.n	802a346 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802a342:	2303      	movs	r3, #3
 802a344:	e01b      	b.n	802a37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	691b      	ldr	r3, [r3, #16]
 802a34a:	2b00      	cmp	r3, #0
 802a34c:	daf2      	bge.n	802a334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802a34e:	2300      	movs	r3, #0
 802a350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802a352:	687b      	ldr	r3, [r7, #4]
 802a354:	691b      	ldr	r3, [r3, #16]
 802a356:	f043 0201 	orr.w	r2, r3, #1
 802a35a:	687b      	ldr	r3, [r7, #4]
 802a35c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a35e:	68fb      	ldr	r3, [r7, #12]
 802a360:	3301      	adds	r3, #1
 802a362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a364:	68fb      	ldr	r3, [r7, #12]
 802a366:	4a09      	ldr	r2, [pc, #36]	; (802a38c <USB_CoreReset+0x64>)
 802a368:	4293      	cmp	r3, r2
 802a36a:	d901      	bls.n	802a370 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802a36c:	2303      	movs	r3, #3
 802a36e:	e006      	b.n	802a37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802a370:	687b      	ldr	r3, [r7, #4]
 802a372:	691b      	ldr	r3, [r3, #16]
 802a374:	f003 0301 	and.w	r3, r3, #1
 802a378:	2b01      	cmp	r3, #1
 802a37a:	d0f0      	beq.n	802a35e <USB_CoreReset+0x36>

  return HAL_OK;
 802a37c:	2300      	movs	r3, #0
}
 802a37e:	4618      	mov	r0, r3
 802a380:	3714      	adds	r7, #20
 802a382:	46bd      	mov	sp, r7
 802a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a388:	4770      	bx	lr
 802a38a:	bf00      	nop
 802a38c:	00030d40 	.word	0x00030d40

0802a390 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a390:	b084      	sub	sp, #16
 802a392:	b580      	push	{r7, lr}
 802a394:	b086      	sub	sp, #24
 802a396:	af00      	add	r7, sp, #0
 802a398:	6078      	str	r0, [r7, #4]
 802a39a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802a39e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802a3a2:	2300      	movs	r3, #0
 802a3a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a3a6:	687b      	ldr	r3, [r7, #4]
 802a3a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802a3aa:	68fb      	ldr	r3, [r7, #12]
 802a3ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802a3b0:	461a      	mov	r2, r3
 802a3b2:	2300      	movs	r3, #0
 802a3b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802a3b6:	687b      	ldr	r3, [r7, #4]
 802a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a3ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802a3c2:	687b      	ldr	r3, [r7, #4]
 802a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a3c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802a3ca:	687b      	ldr	r3, [r7, #4]
 802a3cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802a3ce:	687b      	ldr	r3, [r7, #4]
 802a3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a3d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802a3d6:	687b      	ldr	r3, [r7, #4]
 802a3d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a3da:	687b      	ldr	r3, [r7, #4]
 802a3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a3e2:	2b00      	cmp	r3, #0
 802a3e4:	d018      	beq.n	802a418 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a3e8:	2b01      	cmp	r3, #1
 802a3ea:	d10a      	bne.n	802a402 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802a3ec:	68fb      	ldr	r3, [r7, #12]
 802a3ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a3f2:	681b      	ldr	r3, [r3, #0]
 802a3f4:	68fa      	ldr	r2, [r7, #12]
 802a3f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a3fa:	f043 0304 	orr.w	r3, r3, #4
 802a3fe:	6013      	str	r3, [r2, #0]
 802a400:	e014      	b.n	802a42c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a402:	68fb      	ldr	r3, [r7, #12]
 802a404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a408:	681b      	ldr	r3, [r3, #0]
 802a40a:	68fa      	ldr	r2, [r7, #12]
 802a40c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a410:	f023 0304 	bic.w	r3, r3, #4
 802a414:	6013      	str	r3, [r2, #0]
 802a416:	e009      	b.n	802a42c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a418:	68fb      	ldr	r3, [r7, #12]
 802a41a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a41e:	681b      	ldr	r3, [r3, #0]
 802a420:	68fa      	ldr	r2, [r7, #12]
 802a422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a426:	f023 0304 	bic.w	r3, r3, #4
 802a42a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a42c:	2110      	movs	r1, #16
 802a42e:	6878      	ldr	r0, [r7, #4]
 802a430:	f7ff fe5e 	bl	802a0f0 <USB_FlushTxFifo>
 802a434:	4603      	mov	r3, r0
 802a436:	2b00      	cmp	r3, #0
 802a438:	d001      	beq.n	802a43e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802a43a:	2301      	movs	r3, #1
 802a43c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a43e:	6878      	ldr	r0, [r7, #4]
 802a440:	f7ff fe8a 	bl	802a158 <USB_FlushRxFifo>
 802a444:	4603      	mov	r3, r0
 802a446:	2b00      	cmp	r3, #0
 802a448:	d001      	beq.n	802a44e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802a44a:	2301      	movs	r3, #1
 802a44c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802a44e:	2300      	movs	r3, #0
 802a450:	613b      	str	r3, [r7, #16]
 802a452:	e015      	b.n	802a480 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802a454:	693b      	ldr	r3, [r7, #16]
 802a456:	015a      	lsls	r2, r3, #5
 802a458:	68fb      	ldr	r3, [r7, #12]
 802a45a:	4413      	add	r3, r2
 802a45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a460:	461a      	mov	r2, r3
 802a462:	f04f 33ff 	mov.w	r3, #4294967295
 802a466:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802a468:	693b      	ldr	r3, [r7, #16]
 802a46a:	015a      	lsls	r2, r3, #5
 802a46c:	68fb      	ldr	r3, [r7, #12]
 802a46e:	4413      	add	r3, r2
 802a470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a474:	461a      	mov	r2, r3
 802a476:	2300      	movs	r3, #0
 802a478:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802a47a:	693b      	ldr	r3, [r7, #16]
 802a47c:	3301      	adds	r3, #1
 802a47e:	613b      	str	r3, [r7, #16]
 802a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a482:	693a      	ldr	r2, [r7, #16]
 802a484:	429a      	cmp	r2, r3
 802a486:	d3e5      	bcc.n	802a454 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a488:	687b      	ldr	r3, [r7, #4]
 802a48a:	2200      	movs	r2, #0
 802a48c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a48e:	687b      	ldr	r3, [r7, #4]
 802a490:	f04f 32ff 	mov.w	r2, #4294967295
 802a494:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a496:	687b      	ldr	r3, [r7, #4]
 802a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a49e:	2b00      	cmp	r3, #0
 802a4a0:	d00b      	beq.n	802a4ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802a4a2:	687b      	ldr	r3, [r7, #4]
 802a4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 802a4a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	4a13      	ldr	r2, [pc, #76]	; (802a4fc <USB_HostInit+0x16c>)
 802a4ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802a4b0:	687b      	ldr	r3, [r7, #4]
 802a4b2:	4a13      	ldr	r2, [pc, #76]	; (802a500 <USB_HostInit+0x170>)
 802a4b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802a4b8:	e009      	b.n	802a4ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802a4ba:	687b      	ldr	r3, [r7, #4]
 802a4bc:	2280      	movs	r2, #128	; 0x80
 802a4be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802a4c0:	687b      	ldr	r3, [r7, #4]
 802a4c2:	4a10      	ldr	r2, [pc, #64]	; (802a504 <USB_HostInit+0x174>)
 802a4c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	4a0f      	ldr	r2, [pc, #60]	; (802a508 <USB_HostInit+0x178>)
 802a4ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a4d0:	2b00      	cmp	r3, #0
 802a4d2:	d105      	bne.n	802a4e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a4d4:	687b      	ldr	r3, [r7, #4]
 802a4d6:	699b      	ldr	r3, [r3, #24]
 802a4d8:	f043 0210 	orr.w	r2, r3, #16
 802a4dc:	687b      	ldr	r3, [r7, #4]
 802a4de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802a4e0:	687b      	ldr	r3, [r7, #4]
 802a4e2:	699a      	ldr	r2, [r3, #24]
 802a4e4:	4b09      	ldr	r3, [pc, #36]	; (802a50c <USB_HostInit+0x17c>)
 802a4e6:	4313      	orrs	r3, r2
 802a4e8:	687a      	ldr	r2, [r7, #4]
 802a4ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802a4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 802a4ee:	4618      	mov	r0, r3
 802a4f0:	3718      	adds	r7, #24
 802a4f2:	46bd      	mov	sp, r7
 802a4f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a4f8:	b004      	add	sp, #16
 802a4fa:	4770      	bx	lr
 802a4fc:	01000200 	.word	0x01000200
 802a500:	00e00300 	.word	0x00e00300
 802a504:	00600080 	.word	0x00600080
 802a508:	004000e0 	.word	0x004000e0
 802a50c:	a3200008 	.word	0xa3200008

0802a510 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802a510:	b480      	push	{r7}
 802a512:	b085      	sub	sp, #20
 802a514:	af00      	add	r7, sp, #0
 802a516:	6078      	str	r0, [r7, #4]
 802a518:	460b      	mov	r3, r1
 802a51a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a51c:	687b      	ldr	r3, [r7, #4]
 802a51e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802a520:	68fb      	ldr	r3, [r7, #12]
 802a522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a526:	681b      	ldr	r3, [r3, #0]
 802a528:	68fa      	ldr	r2, [r7, #12]
 802a52a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a52e:	f023 0303 	bic.w	r3, r3, #3
 802a532:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802a534:	68fb      	ldr	r3, [r7, #12]
 802a536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a53a:	681a      	ldr	r2, [r3, #0]
 802a53c:	78fb      	ldrb	r3, [r7, #3]
 802a53e:	f003 0303 	and.w	r3, r3, #3
 802a542:	68f9      	ldr	r1, [r7, #12]
 802a544:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a548:	4313      	orrs	r3, r2
 802a54a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802a54c:	78fb      	ldrb	r3, [r7, #3]
 802a54e:	2b01      	cmp	r3, #1
 802a550:	d107      	bne.n	802a562 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802a552:	68fb      	ldr	r3, [r7, #12]
 802a554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a558:	461a      	mov	r2, r3
 802a55a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802a55e:	6053      	str	r3, [r2, #4]
 802a560:	e009      	b.n	802a576 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802a562:	78fb      	ldrb	r3, [r7, #3]
 802a564:	2b02      	cmp	r3, #2
 802a566:	d106      	bne.n	802a576 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802a568:	68fb      	ldr	r3, [r7, #12]
 802a56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a56e:	461a      	mov	r2, r3
 802a570:	f241 7370 	movw	r3, #6000	; 0x1770
 802a574:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802a576:	2300      	movs	r3, #0
}
 802a578:	4618      	mov	r0, r3
 802a57a:	3714      	adds	r7, #20
 802a57c:	46bd      	mov	sp, r7
 802a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a582:	4770      	bx	lr

0802a584 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802a584:	b580      	push	{r7, lr}
 802a586:	b084      	sub	sp, #16
 802a588:	af00      	add	r7, sp, #0
 802a58a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a58c:	687b      	ldr	r3, [r7, #4]
 802a58e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802a590:	2300      	movs	r3, #0
 802a592:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a594:	68fb      	ldr	r3, [r7, #12]
 802a596:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a59a:	681b      	ldr	r3, [r3, #0]
 802a59c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a59e:	68bb      	ldr	r3, [r7, #8]
 802a5a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a5a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802a5a6:	68bb      	ldr	r3, [r7, #8]
 802a5a8:	68fa      	ldr	r2, [r7, #12]
 802a5aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a5ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a5b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802a5b4:	2064      	movs	r0, #100	; 0x64
 802a5b6:	f7f8 fdeb 	bl	8023190 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802a5ba:	68bb      	ldr	r3, [r7, #8]
 802a5bc:	68fa      	ldr	r2, [r7, #12]
 802a5be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a5c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a5c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802a5c8:	200a      	movs	r0, #10
 802a5ca:	f7f8 fde1 	bl	8023190 <HAL_Delay>

  return HAL_OK;
 802a5ce:	2300      	movs	r3, #0
}
 802a5d0:	4618      	mov	r0, r3
 802a5d2:	3710      	adds	r7, #16
 802a5d4:	46bd      	mov	sp, r7
 802a5d6:	bd80      	pop	{r7, pc}

0802a5d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802a5d8:	b480      	push	{r7}
 802a5da:	b085      	sub	sp, #20
 802a5dc:	af00      	add	r7, sp, #0
 802a5de:	6078      	str	r0, [r7, #4]
 802a5e0:	460b      	mov	r3, r1
 802a5e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a5e4:	687b      	ldr	r3, [r7, #4]
 802a5e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a5e8:	2300      	movs	r3, #0
 802a5ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a5ec:	68fb      	ldr	r3, [r7, #12]
 802a5ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a5f2:	681b      	ldr	r3, [r3, #0]
 802a5f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a5f6:	68bb      	ldr	r3, [r7, #8]
 802a5f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a5fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802a5fe:	68bb      	ldr	r3, [r7, #8]
 802a600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a604:	2b00      	cmp	r3, #0
 802a606:	d109      	bne.n	802a61c <USB_DriveVbus+0x44>
 802a608:	78fb      	ldrb	r3, [r7, #3]
 802a60a:	2b01      	cmp	r3, #1
 802a60c:	d106      	bne.n	802a61c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802a60e:	68bb      	ldr	r3, [r7, #8]
 802a610:	68fa      	ldr	r2, [r7, #12]
 802a612:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a61a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802a61c:	68bb      	ldr	r3, [r7, #8]
 802a61e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a626:	d109      	bne.n	802a63c <USB_DriveVbus+0x64>
 802a628:	78fb      	ldrb	r3, [r7, #3]
 802a62a:	2b00      	cmp	r3, #0
 802a62c:	d106      	bne.n	802a63c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802a62e:	68bb      	ldr	r3, [r7, #8]
 802a630:	68fa      	ldr	r2, [r7, #12]
 802a632:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a63a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802a63c:	2300      	movs	r3, #0
}
 802a63e:	4618      	mov	r0, r3
 802a640:	3714      	adds	r7, #20
 802a642:	46bd      	mov	sp, r7
 802a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a648:	4770      	bx	lr

0802a64a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a64a:	b480      	push	{r7}
 802a64c:	b085      	sub	sp, #20
 802a64e:	af00      	add	r7, sp, #0
 802a650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a652:	687b      	ldr	r3, [r7, #4]
 802a654:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a656:	2300      	movs	r3, #0
 802a658:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a65a:	68fb      	ldr	r3, [r7, #12]
 802a65c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a660:	681b      	ldr	r3, [r3, #0]
 802a662:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802a664:	68bb      	ldr	r3, [r7, #8]
 802a666:	0c5b      	lsrs	r3, r3, #17
 802a668:	f003 0303 	and.w	r3, r3, #3
}
 802a66c:	4618      	mov	r0, r3
 802a66e:	3714      	adds	r7, #20
 802a670:	46bd      	mov	sp, r7
 802a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a676:	4770      	bx	lr

0802a678 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802a678:	b480      	push	{r7}
 802a67a:	b085      	sub	sp, #20
 802a67c:	af00      	add	r7, sp, #0
 802a67e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a680:	687b      	ldr	r3, [r7, #4]
 802a682:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802a684:	68fb      	ldr	r3, [r7, #12]
 802a686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a68a:	689b      	ldr	r3, [r3, #8]
 802a68c:	b29b      	uxth	r3, r3
}
 802a68e:	4618      	mov	r0, r3
 802a690:	3714      	adds	r7, #20
 802a692:	46bd      	mov	sp, r7
 802a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a698:	4770      	bx	lr
	...

0802a69c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802a69c:	b580      	push	{r7, lr}
 802a69e:	b088      	sub	sp, #32
 802a6a0:	af00      	add	r7, sp, #0
 802a6a2:	6078      	str	r0, [r7, #4]
 802a6a4:	4608      	mov	r0, r1
 802a6a6:	4611      	mov	r1, r2
 802a6a8:	461a      	mov	r2, r3
 802a6aa:	4603      	mov	r3, r0
 802a6ac:	70fb      	strb	r3, [r7, #3]
 802a6ae:	460b      	mov	r3, r1
 802a6b0:	70bb      	strb	r3, [r7, #2]
 802a6b2:	4613      	mov	r3, r2
 802a6b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802a6b6:	2300      	movs	r3, #0
 802a6b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a6ba:	687b      	ldr	r3, [r7, #4]
 802a6bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802a6be:	78fb      	ldrb	r3, [r7, #3]
 802a6c0:	015a      	lsls	r2, r3, #5
 802a6c2:	693b      	ldr	r3, [r7, #16]
 802a6c4:	4413      	add	r3, r2
 802a6c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a6ca:	461a      	mov	r2, r3
 802a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 802a6d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802a6d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a6d6:	2b03      	cmp	r3, #3
 802a6d8:	d87e      	bhi.n	802a7d8 <USB_HC_Init+0x13c>
 802a6da:	a201      	add	r2, pc, #4	; (adr r2, 802a6e0 <USB_HC_Init+0x44>)
 802a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a6e0:	0802a6f1 	.word	0x0802a6f1
 802a6e4:	0802a79b 	.word	0x0802a79b
 802a6e8:	0802a6f1 	.word	0x0802a6f1
 802a6ec:	0802a75d 	.word	0x0802a75d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a6f0:	78fb      	ldrb	r3, [r7, #3]
 802a6f2:	015a      	lsls	r2, r3, #5
 802a6f4:	693b      	ldr	r3, [r7, #16]
 802a6f6:	4413      	add	r3, r2
 802a6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a6fc:	461a      	mov	r2, r3
 802a6fe:	f240 439d 	movw	r3, #1181	; 0x49d
 802a702:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802a704:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a708:	2b00      	cmp	r3, #0
 802a70a:	da10      	bge.n	802a72e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a70c:	78fb      	ldrb	r3, [r7, #3]
 802a70e:	015a      	lsls	r2, r3, #5
 802a710:	693b      	ldr	r3, [r7, #16]
 802a712:	4413      	add	r3, r2
 802a714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a718:	68db      	ldr	r3, [r3, #12]
 802a71a:	78fa      	ldrb	r2, [r7, #3]
 802a71c:	0151      	lsls	r1, r2, #5
 802a71e:	693a      	ldr	r2, [r7, #16]
 802a720:	440a      	add	r2, r1
 802a722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a72a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802a72c:	e057      	b.n	802a7de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802a72e:	687b      	ldr	r3, [r7, #4]
 802a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a736:	2b00      	cmp	r3, #0
 802a738:	d051      	beq.n	802a7de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802a73a:	78fb      	ldrb	r3, [r7, #3]
 802a73c:	015a      	lsls	r2, r3, #5
 802a73e:	693b      	ldr	r3, [r7, #16]
 802a740:	4413      	add	r3, r2
 802a742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a746:	68db      	ldr	r3, [r3, #12]
 802a748:	78fa      	ldrb	r2, [r7, #3]
 802a74a:	0151      	lsls	r1, r2, #5
 802a74c:	693a      	ldr	r2, [r7, #16]
 802a74e:	440a      	add	r2, r1
 802a750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a754:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802a758:	60d3      	str	r3, [r2, #12]
      break;
 802a75a:	e040      	b.n	802a7de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a75c:	78fb      	ldrb	r3, [r7, #3]
 802a75e:	015a      	lsls	r2, r3, #5
 802a760:	693b      	ldr	r3, [r7, #16]
 802a762:	4413      	add	r3, r2
 802a764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a768:	461a      	mov	r2, r3
 802a76a:	f240 639d 	movw	r3, #1693	; 0x69d
 802a76e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a774:	2b00      	cmp	r3, #0
 802a776:	da34      	bge.n	802a7e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a778:	78fb      	ldrb	r3, [r7, #3]
 802a77a:	015a      	lsls	r2, r3, #5
 802a77c:	693b      	ldr	r3, [r7, #16]
 802a77e:	4413      	add	r3, r2
 802a780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a784:	68db      	ldr	r3, [r3, #12]
 802a786:	78fa      	ldrb	r2, [r7, #3]
 802a788:	0151      	lsls	r1, r2, #5
 802a78a:	693a      	ldr	r2, [r7, #16]
 802a78c:	440a      	add	r2, r1
 802a78e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a796:	60d3      	str	r3, [r2, #12]
      }

      break;
 802a798:	e023      	b.n	802a7e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a79a:	78fb      	ldrb	r3, [r7, #3]
 802a79c:	015a      	lsls	r2, r3, #5
 802a79e:	693b      	ldr	r3, [r7, #16]
 802a7a0:	4413      	add	r3, r2
 802a7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a7a6:	461a      	mov	r2, r3
 802a7a8:	f240 2325 	movw	r3, #549	; 0x225
 802a7ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a7ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a7b2:	2b00      	cmp	r3, #0
 802a7b4:	da17      	bge.n	802a7e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802a7b6:	78fb      	ldrb	r3, [r7, #3]
 802a7b8:	015a      	lsls	r2, r3, #5
 802a7ba:	693b      	ldr	r3, [r7, #16]
 802a7bc:	4413      	add	r3, r2
 802a7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a7c2:	68db      	ldr	r3, [r3, #12]
 802a7c4:	78fa      	ldrb	r2, [r7, #3]
 802a7c6:	0151      	lsls	r1, r2, #5
 802a7c8:	693a      	ldr	r2, [r7, #16]
 802a7ca:	440a      	add	r2, r1
 802a7cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a7d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802a7d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 802a7d6:	e006      	b.n	802a7e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802a7d8:	2301      	movs	r3, #1
 802a7da:	77fb      	strb	r3, [r7, #31]
      break;
 802a7dc:	e004      	b.n	802a7e8 <USB_HC_Init+0x14c>
      break;
 802a7de:	bf00      	nop
 802a7e0:	e002      	b.n	802a7e8 <USB_HC_Init+0x14c>
      break;
 802a7e2:	bf00      	nop
 802a7e4:	e000      	b.n	802a7e8 <USB_HC_Init+0x14c>
      break;
 802a7e6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802a7e8:	78fb      	ldrb	r3, [r7, #3]
 802a7ea:	015a      	lsls	r2, r3, #5
 802a7ec:	693b      	ldr	r3, [r7, #16]
 802a7ee:	4413      	add	r3, r2
 802a7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a7f4:	68db      	ldr	r3, [r3, #12]
 802a7f6:	78fa      	ldrb	r2, [r7, #3]
 802a7f8:	0151      	lsls	r1, r2, #5
 802a7fa:	693a      	ldr	r2, [r7, #16]
 802a7fc:	440a      	add	r2, r1
 802a7fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a802:	f043 0302 	orr.w	r3, r3, #2
 802a806:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802a808:	693b      	ldr	r3, [r7, #16]
 802a80a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a80e:	699a      	ldr	r2, [r3, #24]
 802a810:	78fb      	ldrb	r3, [r7, #3]
 802a812:	f003 030f 	and.w	r3, r3, #15
 802a816:	2101      	movs	r1, #1
 802a818:	fa01 f303 	lsl.w	r3, r1, r3
 802a81c:	6939      	ldr	r1, [r7, #16]
 802a81e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a822:	4313      	orrs	r3, r2
 802a824:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802a826:	687b      	ldr	r3, [r7, #4]
 802a828:	699b      	ldr	r3, [r3, #24]
 802a82a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802a82e:	687b      	ldr	r3, [r7, #4]
 802a830:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802a832:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a836:	2b00      	cmp	r3, #0
 802a838:	da03      	bge.n	802a842 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802a83a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a83e:	61bb      	str	r3, [r7, #24]
 802a840:	e001      	b.n	802a846 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802a842:	2300      	movs	r3, #0
 802a844:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802a846:	6878      	ldr	r0, [r7, #4]
 802a848:	f7ff feff 	bl	802a64a <USB_GetHostSpeed>
 802a84c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802a84e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a852:	2b02      	cmp	r3, #2
 802a854:	d106      	bne.n	802a864 <USB_HC_Init+0x1c8>
 802a856:	68fb      	ldr	r3, [r7, #12]
 802a858:	2b02      	cmp	r3, #2
 802a85a:	d003      	beq.n	802a864 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802a85c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802a860:	617b      	str	r3, [r7, #20]
 802a862:	e001      	b.n	802a868 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802a864:	2300      	movs	r3, #0
 802a866:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a868:	787b      	ldrb	r3, [r7, #1]
 802a86a:	059b      	lsls	r3, r3, #22
 802a86c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a870:	78bb      	ldrb	r3, [r7, #2]
 802a872:	02db      	lsls	r3, r3, #11
 802a874:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a878:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a87a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a87e:	049b      	lsls	r3, r3, #18
 802a880:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a884:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a886:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802a888:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a88c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a88e:	69bb      	ldr	r3, [r7, #24]
 802a890:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a892:	78fb      	ldrb	r3, [r7, #3]
 802a894:	0159      	lsls	r1, r3, #5
 802a896:	693b      	ldr	r3, [r7, #16]
 802a898:	440b      	add	r3, r1
 802a89a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a89e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a8a0:	697b      	ldr	r3, [r7, #20]
 802a8a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a8a4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802a8a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a8aa:	2b03      	cmp	r3, #3
 802a8ac:	d003      	beq.n	802a8b6 <USB_HC_Init+0x21a>
 802a8ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a8b2:	2b01      	cmp	r3, #1
 802a8b4:	d10f      	bne.n	802a8d6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802a8b6:	78fb      	ldrb	r3, [r7, #3]
 802a8b8:	015a      	lsls	r2, r3, #5
 802a8ba:	693b      	ldr	r3, [r7, #16]
 802a8bc:	4413      	add	r3, r2
 802a8be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8c2:	681b      	ldr	r3, [r3, #0]
 802a8c4:	78fa      	ldrb	r2, [r7, #3]
 802a8c6:	0151      	lsls	r1, r2, #5
 802a8c8:	693a      	ldr	r2, [r7, #16]
 802a8ca:	440a      	add	r2, r1
 802a8cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a8d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a8d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802a8d6:	7ffb      	ldrb	r3, [r7, #31]
}
 802a8d8:	4618      	mov	r0, r3
 802a8da:	3720      	adds	r7, #32
 802a8dc:	46bd      	mov	sp, r7
 802a8de:	bd80      	pop	{r7, pc}

0802a8e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802a8e0:	b580      	push	{r7, lr}
 802a8e2:	b08c      	sub	sp, #48	; 0x30
 802a8e4:	af02      	add	r7, sp, #8
 802a8e6:	60f8      	str	r0, [r7, #12]
 802a8e8:	60b9      	str	r1, [r7, #8]
 802a8ea:	4613      	mov	r3, r2
 802a8ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a8ee:	68fb      	ldr	r3, [r7, #12]
 802a8f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802a8f2:	68bb      	ldr	r3, [r7, #8]
 802a8f4:	785b      	ldrb	r3, [r3, #1]
 802a8f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802a8f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a8fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802a8fe:	68fb      	ldr	r3, [r7, #12]
 802a900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a906:	2b00      	cmp	r3, #0
 802a908:	d02d      	beq.n	802a966 <USB_HC_StartXfer+0x86>
 802a90a:	68bb      	ldr	r3, [r7, #8]
 802a90c:	791b      	ldrb	r3, [r3, #4]
 802a90e:	2b00      	cmp	r3, #0
 802a910:	d129      	bne.n	802a966 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802a912:	79fb      	ldrb	r3, [r7, #7]
 802a914:	2b01      	cmp	r3, #1
 802a916:	d117      	bne.n	802a948 <USB_HC_StartXfer+0x68>
 802a918:	68bb      	ldr	r3, [r7, #8]
 802a91a:	79db      	ldrb	r3, [r3, #7]
 802a91c:	2b00      	cmp	r3, #0
 802a91e:	d003      	beq.n	802a928 <USB_HC_StartXfer+0x48>
 802a920:	68bb      	ldr	r3, [r7, #8]
 802a922:	79db      	ldrb	r3, [r3, #7]
 802a924:	2b02      	cmp	r3, #2
 802a926:	d10f      	bne.n	802a948 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802a928:	69fb      	ldr	r3, [r7, #28]
 802a92a:	015a      	lsls	r2, r3, #5
 802a92c:	6a3b      	ldr	r3, [r7, #32]
 802a92e:	4413      	add	r3, r2
 802a930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a934:	68db      	ldr	r3, [r3, #12]
 802a936:	69fa      	ldr	r2, [r7, #28]
 802a938:	0151      	lsls	r1, r2, #5
 802a93a:	6a3a      	ldr	r2, [r7, #32]
 802a93c:	440a      	add	r2, r1
 802a93e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a946:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802a948:	79fb      	ldrb	r3, [r7, #7]
 802a94a:	2b00      	cmp	r3, #0
 802a94c:	d10b      	bne.n	802a966 <USB_HC_StartXfer+0x86>
 802a94e:	68bb      	ldr	r3, [r7, #8]
 802a950:	795b      	ldrb	r3, [r3, #5]
 802a952:	2b01      	cmp	r3, #1
 802a954:	d107      	bne.n	802a966 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802a956:	68bb      	ldr	r3, [r7, #8]
 802a958:	785b      	ldrb	r3, [r3, #1]
 802a95a:	4619      	mov	r1, r3
 802a95c:	68f8      	ldr	r0, [r7, #12]
 802a95e:	f000 fa0f 	bl	802ad80 <USB_DoPing>
      return HAL_OK;
 802a962:	2300      	movs	r3, #0
 802a964:	e0f8      	b.n	802ab58 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802a966:	68bb      	ldr	r3, [r7, #8]
 802a968:	695b      	ldr	r3, [r3, #20]
 802a96a:	2b00      	cmp	r3, #0
 802a96c:	d018      	beq.n	802a9a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802a96e:	68bb      	ldr	r3, [r7, #8]
 802a970:	695b      	ldr	r3, [r3, #20]
 802a972:	68ba      	ldr	r2, [r7, #8]
 802a974:	8912      	ldrh	r2, [r2, #8]
 802a976:	4413      	add	r3, r2
 802a978:	3b01      	subs	r3, #1
 802a97a:	68ba      	ldr	r2, [r7, #8]
 802a97c:	8912      	ldrh	r2, [r2, #8]
 802a97e:	fbb3 f3f2 	udiv	r3, r3, r2
 802a982:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802a984:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802a986:	8b7b      	ldrh	r3, [r7, #26]
 802a988:	429a      	cmp	r2, r3
 802a98a:	d90b      	bls.n	802a9a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802a98c:	8b7b      	ldrh	r3, [r7, #26]
 802a98e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a992:	68ba      	ldr	r2, [r7, #8]
 802a994:	8912      	ldrh	r2, [r2, #8]
 802a996:	fb03 f202 	mul.w	r2, r3, r2
 802a99a:	68bb      	ldr	r3, [r7, #8]
 802a99c:	611a      	str	r2, [r3, #16]
 802a99e:	e001      	b.n	802a9a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802a9a0:	2301      	movs	r3, #1
 802a9a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802a9a4:	68bb      	ldr	r3, [r7, #8]
 802a9a6:	78db      	ldrb	r3, [r3, #3]
 802a9a8:	2b00      	cmp	r3, #0
 802a9aa:	d007      	beq.n	802a9bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a9ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a9ae:	68ba      	ldr	r2, [r7, #8]
 802a9b0:	8912      	ldrh	r2, [r2, #8]
 802a9b2:	fb03 f202 	mul.w	r2, r3, r2
 802a9b6:	68bb      	ldr	r3, [r7, #8]
 802a9b8:	611a      	str	r2, [r3, #16]
 802a9ba:	e003      	b.n	802a9c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802a9bc:	68bb      	ldr	r3, [r7, #8]
 802a9be:	695a      	ldr	r2, [r3, #20]
 802a9c0:	68bb      	ldr	r3, [r7, #8]
 802a9c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a9c4:	68bb      	ldr	r3, [r7, #8]
 802a9c6:	691b      	ldr	r3, [r3, #16]
 802a9c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a9cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a9ce:	04d9      	lsls	r1, r3, #19
 802a9d0:	4b63      	ldr	r3, [pc, #396]	; (802ab60 <USB_HC_StartXfer+0x280>)
 802a9d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a9d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802a9d6:	68bb      	ldr	r3, [r7, #8]
 802a9d8:	7a9b      	ldrb	r3, [r3, #10]
 802a9da:	075b      	lsls	r3, r3, #29
 802a9dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a9e0:	69f9      	ldr	r1, [r7, #28]
 802a9e2:	0148      	lsls	r0, r1, #5
 802a9e4:	6a39      	ldr	r1, [r7, #32]
 802a9e6:	4401      	add	r1, r0
 802a9e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a9ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a9ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802a9f0:	79fb      	ldrb	r3, [r7, #7]
 802a9f2:	2b00      	cmp	r3, #0
 802a9f4:	d009      	beq.n	802aa0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802a9f6:	68bb      	ldr	r3, [r7, #8]
 802a9f8:	68d9      	ldr	r1, [r3, #12]
 802a9fa:	69fb      	ldr	r3, [r7, #28]
 802a9fc:	015a      	lsls	r2, r3, #5
 802a9fe:	6a3b      	ldr	r3, [r7, #32]
 802aa00:	4413      	add	r3, r2
 802aa02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa06:	460a      	mov	r2, r1
 802aa08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802aa0a:	6a3b      	ldr	r3, [r7, #32]
 802aa0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aa10:	689b      	ldr	r3, [r3, #8]
 802aa12:	f003 0301 	and.w	r3, r3, #1
 802aa16:	2b00      	cmp	r3, #0
 802aa18:	bf0c      	ite	eq
 802aa1a:	2301      	moveq	r3, #1
 802aa1c:	2300      	movne	r3, #0
 802aa1e:	b2db      	uxtb	r3, r3
 802aa20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802aa22:	69fb      	ldr	r3, [r7, #28]
 802aa24:	015a      	lsls	r2, r3, #5
 802aa26:	6a3b      	ldr	r3, [r7, #32]
 802aa28:	4413      	add	r3, r2
 802aa2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa2e:	681b      	ldr	r3, [r3, #0]
 802aa30:	69fa      	ldr	r2, [r7, #28]
 802aa32:	0151      	lsls	r1, r2, #5
 802aa34:	6a3a      	ldr	r2, [r7, #32]
 802aa36:	440a      	add	r2, r1
 802aa38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802aa40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802aa42:	69fb      	ldr	r3, [r7, #28]
 802aa44:	015a      	lsls	r2, r3, #5
 802aa46:	6a3b      	ldr	r3, [r7, #32]
 802aa48:	4413      	add	r3, r2
 802aa4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa4e:	681a      	ldr	r2, [r3, #0]
 802aa50:	7e7b      	ldrb	r3, [r7, #25]
 802aa52:	075b      	lsls	r3, r3, #29
 802aa54:	69f9      	ldr	r1, [r7, #28]
 802aa56:	0148      	lsls	r0, r1, #5
 802aa58:	6a39      	ldr	r1, [r7, #32]
 802aa5a:	4401      	add	r1, r0
 802aa5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802aa60:	4313      	orrs	r3, r2
 802aa62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802aa64:	69fb      	ldr	r3, [r7, #28]
 802aa66:	015a      	lsls	r2, r3, #5
 802aa68:	6a3b      	ldr	r3, [r7, #32]
 802aa6a:	4413      	add	r3, r2
 802aa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa70:	681b      	ldr	r3, [r3, #0]
 802aa72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802aa74:	693b      	ldr	r3, [r7, #16]
 802aa76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802aa7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802aa7c:	68bb      	ldr	r3, [r7, #8]
 802aa7e:	78db      	ldrb	r3, [r3, #3]
 802aa80:	2b00      	cmp	r3, #0
 802aa82:	d004      	beq.n	802aa8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802aa84:	693b      	ldr	r3, [r7, #16]
 802aa86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802aa8a:	613b      	str	r3, [r7, #16]
 802aa8c:	e003      	b.n	802aa96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802aa8e:	693b      	ldr	r3, [r7, #16]
 802aa90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802aa94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802aa96:	693b      	ldr	r3, [r7, #16]
 802aa98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aa9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802aa9e:	69fb      	ldr	r3, [r7, #28]
 802aaa0:	015a      	lsls	r2, r3, #5
 802aaa2:	6a3b      	ldr	r3, [r7, #32]
 802aaa4:	4413      	add	r3, r2
 802aaa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aaaa:	461a      	mov	r2, r3
 802aaac:	693b      	ldr	r3, [r7, #16]
 802aaae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802aab0:	79fb      	ldrb	r3, [r7, #7]
 802aab2:	2b00      	cmp	r3, #0
 802aab4:	d001      	beq.n	802aaba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802aab6:	2300      	movs	r3, #0
 802aab8:	e04e      	b.n	802ab58 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802aaba:	68bb      	ldr	r3, [r7, #8]
 802aabc:	78db      	ldrb	r3, [r3, #3]
 802aabe:	2b00      	cmp	r3, #0
 802aac0:	d149      	bne.n	802ab56 <USB_HC_StartXfer+0x276>
 802aac2:	68bb      	ldr	r3, [r7, #8]
 802aac4:	695b      	ldr	r3, [r3, #20]
 802aac6:	2b00      	cmp	r3, #0
 802aac8:	d045      	beq.n	802ab56 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802aaca:	68bb      	ldr	r3, [r7, #8]
 802aacc:	79db      	ldrb	r3, [r3, #7]
 802aace:	2b03      	cmp	r3, #3
 802aad0:	d830      	bhi.n	802ab34 <USB_HC_StartXfer+0x254>
 802aad2:	a201      	add	r2, pc, #4	; (adr r2, 802aad8 <USB_HC_StartXfer+0x1f8>)
 802aad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802aad8:	0802aae9 	.word	0x0802aae9
 802aadc:	0802ab0d 	.word	0x0802ab0d
 802aae0:	0802aae9 	.word	0x0802aae9
 802aae4:	0802ab0d 	.word	0x0802ab0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802aae8:	68bb      	ldr	r3, [r7, #8]
 802aaea:	695b      	ldr	r3, [r3, #20]
 802aaec:	3303      	adds	r3, #3
 802aaee:	089b      	lsrs	r3, r3, #2
 802aaf0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802aaf2:	8afa      	ldrh	r2, [r7, #22]
 802aaf4:	68fb      	ldr	r3, [r7, #12]
 802aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802aaf8:	b29b      	uxth	r3, r3
 802aafa:	429a      	cmp	r2, r3
 802aafc:	d91c      	bls.n	802ab38 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802aafe:	68fb      	ldr	r3, [r7, #12]
 802ab00:	699b      	ldr	r3, [r3, #24]
 802ab02:	f043 0220 	orr.w	r2, r3, #32
 802ab06:	68fb      	ldr	r3, [r7, #12]
 802ab08:	619a      	str	r2, [r3, #24]
        }
        break;
 802ab0a:	e015      	b.n	802ab38 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802ab0c:	68bb      	ldr	r3, [r7, #8]
 802ab0e:	695b      	ldr	r3, [r3, #20]
 802ab10:	3303      	adds	r3, #3
 802ab12:	089b      	lsrs	r3, r3, #2
 802ab14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802ab16:	8afa      	ldrh	r2, [r7, #22]
 802ab18:	6a3b      	ldr	r3, [r7, #32]
 802ab1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ab1e:	691b      	ldr	r3, [r3, #16]
 802ab20:	b29b      	uxth	r3, r3
 802ab22:	429a      	cmp	r2, r3
 802ab24:	d90a      	bls.n	802ab3c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802ab26:	68fb      	ldr	r3, [r7, #12]
 802ab28:	699b      	ldr	r3, [r3, #24]
 802ab2a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802ab2e:	68fb      	ldr	r3, [r7, #12]
 802ab30:	619a      	str	r2, [r3, #24]
        }
        break;
 802ab32:	e003      	b.n	802ab3c <USB_HC_StartXfer+0x25c>

      default:
        break;
 802ab34:	bf00      	nop
 802ab36:	e002      	b.n	802ab3e <USB_HC_StartXfer+0x25e>
        break;
 802ab38:	bf00      	nop
 802ab3a:	e000      	b.n	802ab3e <USB_HC_StartXfer+0x25e>
        break;
 802ab3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802ab3e:	68bb      	ldr	r3, [r7, #8]
 802ab40:	68d9      	ldr	r1, [r3, #12]
 802ab42:	68bb      	ldr	r3, [r7, #8]
 802ab44:	785a      	ldrb	r2, [r3, #1]
 802ab46:	68bb      	ldr	r3, [r7, #8]
 802ab48:	695b      	ldr	r3, [r3, #20]
 802ab4a:	b29b      	uxth	r3, r3
 802ab4c:	2000      	movs	r0, #0
 802ab4e:	9000      	str	r0, [sp, #0]
 802ab50:	68f8      	ldr	r0, [r7, #12]
 802ab52:	f7ff fb31 	bl	802a1b8 <USB_WritePacket>
  }

  return HAL_OK;
 802ab56:	2300      	movs	r3, #0
}
 802ab58:	4618      	mov	r0, r3
 802ab5a:	3728      	adds	r7, #40	; 0x28
 802ab5c:	46bd      	mov	sp, r7
 802ab5e:	bd80      	pop	{r7, pc}
 802ab60:	1ff80000 	.word	0x1ff80000

0802ab64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab64:	b480      	push	{r7}
 802ab66:	b085      	sub	sp, #20
 802ab68:	af00      	add	r7, sp, #0
 802ab6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ab6c:	687b      	ldr	r3, [r7, #4]
 802ab6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802ab70:	68fb      	ldr	r3, [r7, #12]
 802ab72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ab76:	695b      	ldr	r3, [r3, #20]
 802ab78:	b29b      	uxth	r3, r3
}
 802ab7a:	4618      	mov	r0, r3
 802ab7c:	3714      	adds	r7, #20
 802ab7e:	46bd      	mov	sp, r7
 802ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab84:	4770      	bx	lr

0802ab86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802ab86:	b480      	push	{r7}
 802ab88:	b089      	sub	sp, #36	; 0x24
 802ab8a:	af00      	add	r7, sp, #0
 802ab8c:	6078      	str	r0, [r7, #4]
 802ab8e:	460b      	mov	r3, r1
 802ab90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ab92:	687b      	ldr	r3, [r7, #4]
 802ab94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802ab96:	78fb      	ldrb	r3, [r7, #3]
 802ab98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802ab9a:	2300      	movs	r3, #0
 802ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802ab9e:	69bb      	ldr	r3, [r7, #24]
 802aba0:	015a      	lsls	r2, r3, #5
 802aba2:	69fb      	ldr	r3, [r7, #28]
 802aba4:	4413      	add	r3, r2
 802aba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abaa:	681b      	ldr	r3, [r3, #0]
 802abac:	0c9b      	lsrs	r3, r3, #18
 802abae:	f003 0303 	and.w	r3, r3, #3
 802abb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802abb4:	69bb      	ldr	r3, [r7, #24]
 802abb6:	015a      	lsls	r2, r3, #5
 802abb8:	69fb      	ldr	r3, [r7, #28]
 802abba:	4413      	add	r3, r2
 802abbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abc0:	681b      	ldr	r3, [r3, #0]
 802abc2:	0fdb      	lsrs	r3, r3, #31
 802abc4:	f003 0301 	and.w	r3, r3, #1
 802abc8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802abca:	687b      	ldr	r3, [r7, #4]
 802abcc:	689b      	ldr	r3, [r3, #8]
 802abce:	f003 0320 	and.w	r3, r3, #32
 802abd2:	2b20      	cmp	r3, #32
 802abd4:	d104      	bne.n	802abe0 <USB_HC_Halt+0x5a>
 802abd6:	693b      	ldr	r3, [r7, #16]
 802abd8:	2b00      	cmp	r3, #0
 802abda:	d101      	bne.n	802abe0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802abdc:	2300      	movs	r3, #0
 802abde:	e0c8      	b.n	802ad72 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802abe0:	697b      	ldr	r3, [r7, #20]
 802abe2:	2b00      	cmp	r3, #0
 802abe4:	d002      	beq.n	802abec <USB_HC_Halt+0x66>
 802abe6:	697b      	ldr	r3, [r7, #20]
 802abe8:	2b02      	cmp	r3, #2
 802abea:	d163      	bne.n	802acb4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802abec:	69bb      	ldr	r3, [r7, #24]
 802abee:	015a      	lsls	r2, r3, #5
 802abf0:	69fb      	ldr	r3, [r7, #28]
 802abf2:	4413      	add	r3, r2
 802abf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abf8:	681b      	ldr	r3, [r3, #0]
 802abfa:	69ba      	ldr	r2, [r7, #24]
 802abfc:	0151      	lsls	r1, r2, #5
 802abfe:	69fa      	ldr	r2, [r7, #28]
 802ac00:	440a      	add	r2, r1
 802ac02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ac0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ac0c:	687b      	ldr	r3, [r7, #4]
 802ac0e:	689b      	ldr	r3, [r3, #8]
 802ac10:	f003 0320 	and.w	r3, r3, #32
 802ac14:	2b00      	cmp	r3, #0
 802ac16:	f040 80ab 	bne.w	802ad70 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802ac1a:	687b      	ldr	r3, [r7, #4]
 802ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ac1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802ac22:	2b00      	cmp	r3, #0
 802ac24:	d133      	bne.n	802ac8e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802ac26:	69bb      	ldr	r3, [r7, #24]
 802ac28:	015a      	lsls	r2, r3, #5
 802ac2a:	69fb      	ldr	r3, [r7, #28]
 802ac2c:	4413      	add	r3, r2
 802ac2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac32:	681b      	ldr	r3, [r3, #0]
 802ac34:	69ba      	ldr	r2, [r7, #24]
 802ac36:	0151      	lsls	r1, r2, #5
 802ac38:	69fa      	ldr	r2, [r7, #28]
 802ac3a:	440a      	add	r2, r1
 802ac3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ac44:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ac46:	69bb      	ldr	r3, [r7, #24]
 802ac48:	015a      	lsls	r2, r3, #5
 802ac4a:	69fb      	ldr	r3, [r7, #28]
 802ac4c:	4413      	add	r3, r2
 802ac4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac52:	681b      	ldr	r3, [r3, #0]
 802ac54:	69ba      	ldr	r2, [r7, #24]
 802ac56:	0151      	lsls	r1, r2, #5
 802ac58:	69fa      	ldr	r2, [r7, #28]
 802ac5a:	440a      	add	r2, r1
 802ac5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ac64:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802ac66:	68fb      	ldr	r3, [r7, #12]
 802ac68:	3301      	adds	r3, #1
 802ac6a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802ac6c:	68fb      	ldr	r3, [r7, #12]
 802ac6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ac72:	d81d      	bhi.n	802acb0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ac74:	69bb      	ldr	r3, [r7, #24]
 802ac76:	015a      	lsls	r2, r3, #5
 802ac78:	69fb      	ldr	r3, [r7, #28]
 802ac7a:	4413      	add	r3, r2
 802ac7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac80:	681b      	ldr	r3, [r3, #0]
 802ac82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ac86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ac8a:	d0ec      	beq.n	802ac66 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ac8c:	e070      	b.n	802ad70 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ac8e:	69bb      	ldr	r3, [r7, #24]
 802ac90:	015a      	lsls	r2, r3, #5
 802ac92:	69fb      	ldr	r3, [r7, #28]
 802ac94:	4413      	add	r3, r2
 802ac96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac9a:	681b      	ldr	r3, [r3, #0]
 802ac9c:	69ba      	ldr	r2, [r7, #24]
 802ac9e:	0151      	lsls	r1, r2, #5
 802aca0:	69fa      	ldr	r2, [r7, #28]
 802aca2:	440a      	add	r2, r1
 802aca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aca8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802acac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802acae:	e05f      	b.n	802ad70 <USB_HC_Halt+0x1ea>
            break;
 802acb0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802acb2:	e05d      	b.n	802ad70 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802acb4:	69bb      	ldr	r3, [r7, #24]
 802acb6:	015a      	lsls	r2, r3, #5
 802acb8:	69fb      	ldr	r3, [r7, #28]
 802acba:	4413      	add	r3, r2
 802acbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acc0:	681b      	ldr	r3, [r3, #0]
 802acc2:	69ba      	ldr	r2, [r7, #24]
 802acc4:	0151      	lsls	r1, r2, #5
 802acc6:	69fa      	ldr	r2, [r7, #28]
 802acc8:	440a      	add	r2, r1
 802acca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802acce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802acd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802acd4:	69fb      	ldr	r3, [r7, #28]
 802acd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802acda:	691b      	ldr	r3, [r3, #16]
 802acdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802ace0:	2b00      	cmp	r3, #0
 802ace2:	d133      	bne.n	802ad4c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802ace4:	69bb      	ldr	r3, [r7, #24]
 802ace6:	015a      	lsls	r2, r3, #5
 802ace8:	69fb      	ldr	r3, [r7, #28]
 802acea:	4413      	add	r3, r2
 802acec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acf0:	681b      	ldr	r3, [r3, #0]
 802acf2:	69ba      	ldr	r2, [r7, #24]
 802acf4:	0151      	lsls	r1, r2, #5
 802acf6:	69fa      	ldr	r2, [r7, #28]
 802acf8:	440a      	add	r2, r1
 802acfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802acfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ad02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ad04:	69bb      	ldr	r3, [r7, #24]
 802ad06:	015a      	lsls	r2, r3, #5
 802ad08:	69fb      	ldr	r3, [r7, #28]
 802ad0a:	4413      	add	r3, r2
 802ad0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad10:	681b      	ldr	r3, [r3, #0]
 802ad12:	69ba      	ldr	r2, [r7, #24]
 802ad14:	0151      	lsls	r1, r2, #5
 802ad16:	69fa      	ldr	r2, [r7, #28]
 802ad18:	440a      	add	r2, r1
 802ad1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ad1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ad22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802ad24:	68fb      	ldr	r3, [r7, #12]
 802ad26:	3301      	adds	r3, #1
 802ad28:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802ad2a:	68fb      	ldr	r3, [r7, #12]
 802ad2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ad30:	d81d      	bhi.n	802ad6e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ad32:	69bb      	ldr	r3, [r7, #24]
 802ad34:	015a      	lsls	r2, r3, #5
 802ad36:	69fb      	ldr	r3, [r7, #28]
 802ad38:	4413      	add	r3, r2
 802ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad3e:	681b      	ldr	r3, [r3, #0]
 802ad40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ad44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ad48:	d0ec      	beq.n	802ad24 <USB_HC_Halt+0x19e>
 802ad4a:	e011      	b.n	802ad70 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ad4c:	69bb      	ldr	r3, [r7, #24]
 802ad4e:	015a      	lsls	r2, r3, #5
 802ad50:	69fb      	ldr	r3, [r7, #28]
 802ad52:	4413      	add	r3, r2
 802ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad58:	681b      	ldr	r3, [r3, #0]
 802ad5a:	69ba      	ldr	r2, [r7, #24]
 802ad5c:	0151      	lsls	r1, r2, #5
 802ad5e:	69fa      	ldr	r2, [r7, #28]
 802ad60:	440a      	add	r2, r1
 802ad62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ad66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ad6a:	6013      	str	r3, [r2, #0]
 802ad6c:	e000      	b.n	802ad70 <USB_HC_Halt+0x1ea>
          break;
 802ad6e:	bf00      	nop
    }
  }

  return HAL_OK;
 802ad70:	2300      	movs	r3, #0
}
 802ad72:	4618      	mov	r0, r3
 802ad74:	3724      	adds	r7, #36	; 0x24
 802ad76:	46bd      	mov	sp, r7
 802ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad7c:	4770      	bx	lr
	...

0802ad80 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802ad80:	b480      	push	{r7}
 802ad82:	b087      	sub	sp, #28
 802ad84:	af00      	add	r7, sp, #0
 802ad86:	6078      	str	r0, [r7, #4]
 802ad88:	460b      	mov	r3, r1
 802ad8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad8c:	687b      	ldr	r3, [r7, #4]
 802ad8e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802ad90:	78fb      	ldrb	r3, [r7, #3]
 802ad92:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802ad94:	2301      	movs	r3, #1
 802ad96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802ad98:	68fb      	ldr	r3, [r7, #12]
 802ad9a:	04da      	lsls	r2, r3, #19
 802ad9c:	4b15      	ldr	r3, [pc, #84]	; (802adf4 <USB_DoPing+0x74>)
 802ad9e:	4013      	ands	r3, r2
 802ada0:	693a      	ldr	r2, [r7, #16]
 802ada2:	0151      	lsls	r1, r2, #5
 802ada4:	697a      	ldr	r2, [r7, #20]
 802ada6:	440a      	add	r2, r1
 802ada8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802adac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802adb0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802adb2:	693b      	ldr	r3, [r7, #16]
 802adb4:	015a      	lsls	r2, r3, #5
 802adb6:	697b      	ldr	r3, [r7, #20]
 802adb8:	4413      	add	r3, r2
 802adba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802adbe:	681b      	ldr	r3, [r3, #0]
 802adc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802adc2:	68bb      	ldr	r3, [r7, #8]
 802adc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802adc8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802adca:	68bb      	ldr	r3, [r7, #8]
 802adcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802add0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802add2:	693b      	ldr	r3, [r7, #16]
 802add4:	015a      	lsls	r2, r3, #5
 802add6:	697b      	ldr	r3, [r7, #20]
 802add8:	4413      	add	r3, r2
 802adda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802adde:	461a      	mov	r2, r3
 802ade0:	68bb      	ldr	r3, [r7, #8]
 802ade2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802ade4:	2300      	movs	r3, #0
}
 802ade6:	4618      	mov	r0, r3
 802ade8:	371c      	adds	r7, #28
 802adea:	46bd      	mov	sp, r7
 802adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802adf0:	4770      	bx	lr
 802adf2:	bf00      	nop
 802adf4:	1ff80000 	.word	0x1ff80000

0802adf8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802adf8:	b580      	push	{r7, lr}
 802adfa:	b088      	sub	sp, #32
 802adfc:	af00      	add	r7, sp, #0
 802adfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802ae00:	2300      	movs	r3, #0
 802ae02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ae04:	687b      	ldr	r3, [r7, #4]
 802ae06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802ae08:	2300      	movs	r3, #0
 802ae0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802ae0c:	6878      	ldr	r0, [r7, #4]
 802ae0e:	f7ff f911 	bl	802a034 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802ae12:	2110      	movs	r1, #16
 802ae14:	6878      	ldr	r0, [r7, #4]
 802ae16:	f7ff f96b 	bl	802a0f0 <USB_FlushTxFifo>
 802ae1a:	4603      	mov	r3, r0
 802ae1c:	2b00      	cmp	r3, #0
 802ae1e:	d001      	beq.n	802ae24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802ae20:	2301      	movs	r3, #1
 802ae22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802ae24:	6878      	ldr	r0, [r7, #4]
 802ae26:	f7ff f997 	bl	802a158 <USB_FlushRxFifo>
 802ae2a:	4603      	mov	r3, r0
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	d001      	beq.n	802ae34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802ae30:	2301      	movs	r3, #1
 802ae32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802ae34:	2300      	movs	r3, #0
 802ae36:	61bb      	str	r3, [r7, #24]
 802ae38:	e01f      	b.n	802ae7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802ae3a:	69bb      	ldr	r3, [r7, #24]
 802ae3c:	015a      	lsls	r2, r3, #5
 802ae3e:	697b      	ldr	r3, [r7, #20]
 802ae40:	4413      	add	r3, r2
 802ae42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae46:	681b      	ldr	r3, [r3, #0]
 802ae48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802ae4a:	693b      	ldr	r3, [r7, #16]
 802ae4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ae50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802ae52:	693b      	ldr	r3, [r7, #16]
 802ae54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ae58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802ae5a:	693b      	ldr	r3, [r7, #16]
 802ae5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802ae60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802ae62:	69bb      	ldr	r3, [r7, #24]
 802ae64:	015a      	lsls	r2, r3, #5
 802ae66:	697b      	ldr	r3, [r7, #20]
 802ae68:	4413      	add	r3, r2
 802ae6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae6e:	461a      	mov	r2, r3
 802ae70:	693b      	ldr	r3, [r7, #16]
 802ae72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802ae74:	69bb      	ldr	r3, [r7, #24]
 802ae76:	3301      	adds	r3, #1
 802ae78:	61bb      	str	r3, [r7, #24]
 802ae7a:	69bb      	ldr	r3, [r7, #24]
 802ae7c:	2b0f      	cmp	r3, #15
 802ae7e:	d9dc      	bls.n	802ae3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802ae80:	2300      	movs	r3, #0
 802ae82:	61bb      	str	r3, [r7, #24]
 802ae84:	e034      	b.n	802aef0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802ae86:	69bb      	ldr	r3, [r7, #24]
 802ae88:	015a      	lsls	r2, r3, #5
 802ae8a:	697b      	ldr	r3, [r7, #20]
 802ae8c:	4413      	add	r3, r2
 802ae8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae92:	681b      	ldr	r3, [r3, #0]
 802ae94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802ae96:	693b      	ldr	r3, [r7, #16]
 802ae98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ae9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802ae9e:	693b      	ldr	r3, [r7, #16]
 802aea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aea4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802aea6:	693b      	ldr	r3, [r7, #16]
 802aea8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802aeac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802aeae:	69bb      	ldr	r3, [r7, #24]
 802aeb0:	015a      	lsls	r2, r3, #5
 802aeb2:	697b      	ldr	r3, [r7, #20]
 802aeb4:	4413      	add	r3, r2
 802aeb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aeba:	461a      	mov	r2, r3
 802aebc:	693b      	ldr	r3, [r7, #16]
 802aebe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802aec0:	68fb      	ldr	r3, [r7, #12]
 802aec2:	3301      	adds	r3, #1
 802aec4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802aec6:	68fb      	ldr	r3, [r7, #12]
 802aec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802aecc:	d80c      	bhi.n	802aee8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802aece:	69bb      	ldr	r3, [r7, #24]
 802aed0:	015a      	lsls	r2, r3, #5
 802aed2:	697b      	ldr	r3, [r7, #20]
 802aed4:	4413      	add	r3, r2
 802aed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aeda:	681b      	ldr	r3, [r3, #0]
 802aedc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802aee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802aee4:	d0ec      	beq.n	802aec0 <USB_StopHost+0xc8>
 802aee6:	e000      	b.n	802aeea <USB_StopHost+0xf2>
        break;
 802aee8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802aeea:	69bb      	ldr	r3, [r7, #24]
 802aeec:	3301      	adds	r3, #1
 802aeee:	61bb      	str	r3, [r7, #24]
 802aef0:	69bb      	ldr	r3, [r7, #24]
 802aef2:	2b0f      	cmp	r3, #15
 802aef4:	d9c7      	bls.n	802ae86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802aef6:	697b      	ldr	r3, [r7, #20]
 802aef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aefc:	461a      	mov	r2, r3
 802aefe:	f04f 33ff 	mov.w	r3, #4294967295
 802af02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802af04:	687b      	ldr	r3, [r7, #4]
 802af06:	f04f 32ff 	mov.w	r2, #4294967295
 802af0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802af0c:	6878      	ldr	r0, [r7, #4]
 802af0e:	f7ff f880 	bl	802a012 <USB_EnableGlobalInt>

  return ret;
 802af12:	7ffb      	ldrb	r3, [r7, #31]
}
 802af14:	4618      	mov	r0, r3
 802af16:	3720      	adds	r7, #32
 802af18:	46bd      	mov	sp, r7
 802af1a:	bd80      	pop	{r7, pc}

0802af1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802af1c:	b590      	push	{r4, r7, lr}
 802af1e:	b089      	sub	sp, #36	; 0x24
 802af20:	af04      	add	r7, sp, #16
 802af22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802af24:	2301      	movs	r3, #1
 802af26:	2202      	movs	r2, #2
 802af28:	2102      	movs	r1, #2
 802af2a:	6878      	ldr	r0, [r7, #4]
 802af2c:	f000 fc66 	bl	802b7fc <USBH_FindInterface>
 802af30:	4603      	mov	r3, r0
 802af32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802af34:	7bfb      	ldrb	r3, [r7, #15]
 802af36:	2bff      	cmp	r3, #255	; 0xff
 802af38:	d002      	beq.n	802af40 <USBH_CDC_InterfaceInit+0x24>
 802af3a:	7bfb      	ldrb	r3, [r7, #15]
 802af3c:	2b01      	cmp	r3, #1
 802af3e:	d901      	bls.n	802af44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802af40:	2302      	movs	r3, #2
 802af42:	e13d      	b.n	802b1c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802af44:	7bfb      	ldrb	r3, [r7, #15]
 802af46:	4619      	mov	r1, r3
 802af48:	6878      	ldr	r0, [r7, #4]
 802af4a:	f000 fc3b 	bl	802b7c4 <USBH_SelectInterface>
 802af4e:	4603      	mov	r3, r0
 802af50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802af52:	7bbb      	ldrb	r3, [r7, #14]
 802af54:	2b00      	cmp	r3, #0
 802af56:	d001      	beq.n	802af5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802af58:	2302      	movs	r3, #2
 802af5a:	e131      	b.n	802b1c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802af5c:	687b      	ldr	r3, [r7, #4]
 802af5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802af62:	2050      	movs	r0, #80	; 0x50
 802af64:	f002 fb00 	bl	802d568 <malloc>
 802af68:	4603      	mov	r3, r0
 802af6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802af6c:	687b      	ldr	r3, [r7, #4]
 802af6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802af72:	69db      	ldr	r3, [r3, #28]
 802af74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802af76:	68bb      	ldr	r3, [r7, #8]
 802af78:	2b00      	cmp	r3, #0
 802af7a:	d101      	bne.n	802af80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802af7c:	2302      	movs	r3, #2
 802af7e:	e11f      	b.n	802b1c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802af80:	2250      	movs	r2, #80	; 0x50
 802af82:	2100      	movs	r1, #0
 802af84:	68b8      	ldr	r0, [r7, #8]
 802af86:	f002 faff 	bl	802d588 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802af8a:	7bfb      	ldrb	r3, [r7, #15]
 802af8c:	687a      	ldr	r2, [r7, #4]
 802af8e:	211a      	movs	r1, #26
 802af90:	fb01 f303 	mul.w	r3, r1, r3
 802af94:	4413      	add	r3, r2
 802af96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802af9a:	781b      	ldrb	r3, [r3, #0]
 802af9c:	b25b      	sxtb	r3, r3
 802af9e:	2b00      	cmp	r3, #0
 802afa0:	da15      	bge.n	802afce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802afa2:	7bfb      	ldrb	r3, [r7, #15]
 802afa4:	687a      	ldr	r2, [r7, #4]
 802afa6:	211a      	movs	r1, #26
 802afa8:	fb01 f303 	mul.w	r3, r1, r3
 802afac:	4413      	add	r3, r2
 802afae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802afb2:	781a      	ldrb	r2, [r3, #0]
 802afb4:	68bb      	ldr	r3, [r7, #8]
 802afb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802afb8:	7bfb      	ldrb	r3, [r7, #15]
 802afba:	687a      	ldr	r2, [r7, #4]
 802afbc:	211a      	movs	r1, #26
 802afbe:	fb01 f303 	mul.w	r3, r1, r3
 802afc2:	4413      	add	r3, r2
 802afc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802afc8:	881a      	ldrh	r2, [r3, #0]
 802afca:	68bb      	ldr	r3, [r7, #8]
 802afcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802afce:	68bb      	ldr	r3, [r7, #8]
 802afd0:	785b      	ldrb	r3, [r3, #1]
 802afd2:	4619      	mov	r1, r3
 802afd4:	6878      	ldr	r0, [r7, #4]
 802afd6:	f001 ff2c 	bl	802ce32 <USBH_AllocPipe>
 802afda:	4603      	mov	r3, r0
 802afdc:	461a      	mov	r2, r3
 802afde:	68bb      	ldr	r3, [r7, #8]
 802afe0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802afe2:	68bb      	ldr	r3, [r7, #8]
 802afe4:	7819      	ldrb	r1, [r3, #0]
 802afe6:	68bb      	ldr	r3, [r7, #8]
 802afe8:	7858      	ldrb	r0, [r3, #1]
 802afea:	687b      	ldr	r3, [r7, #4]
 802afec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802aff6:	68ba      	ldr	r2, [r7, #8]
 802aff8:	8952      	ldrh	r2, [r2, #10]
 802affa:	9202      	str	r2, [sp, #8]
 802affc:	2203      	movs	r2, #3
 802affe:	9201      	str	r2, [sp, #4]
 802b000:	9300      	str	r3, [sp, #0]
 802b002:	4623      	mov	r3, r4
 802b004:	4602      	mov	r2, r0
 802b006:	6878      	ldr	r0, [r7, #4]
 802b008:	f001 fee4 	bl	802cdd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802b00c:	68bb      	ldr	r3, [r7, #8]
 802b00e:	781b      	ldrb	r3, [r3, #0]
 802b010:	2200      	movs	r2, #0
 802b012:	4619      	mov	r1, r3
 802b014:	6878      	ldr	r0, [r7, #4]
 802b016:	f002 f9f9 	bl	802d40c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802b01a:	2300      	movs	r3, #0
 802b01c:	2200      	movs	r2, #0
 802b01e:	210a      	movs	r1, #10
 802b020:	6878      	ldr	r0, [r7, #4]
 802b022:	f000 fbeb 	bl	802b7fc <USBH_FindInterface>
 802b026:	4603      	mov	r3, r0
 802b028:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b02a:	7bfb      	ldrb	r3, [r7, #15]
 802b02c:	2bff      	cmp	r3, #255	; 0xff
 802b02e:	d002      	beq.n	802b036 <USBH_CDC_InterfaceInit+0x11a>
 802b030:	7bfb      	ldrb	r3, [r7, #15]
 802b032:	2b01      	cmp	r3, #1
 802b034:	d901      	bls.n	802b03a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b036:	2302      	movs	r3, #2
 802b038:	e0c2      	b.n	802b1c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b03a:	7bfb      	ldrb	r3, [r7, #15]
 802b03c:	687a      	ldr	r2, [r7, #4]
 802b03e:	211a      	movs	r1, #26
 802b040:	fb01 f303 	mul.w	r3, r1, r3
 802b044:	4413      	add	r3, r2
 802b046:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b04a:	781b      	ldrb	r3, [r3, #0]
 802b04c:	b25b      	sxtb	r3, r3
 802b04e:	2b00      	cmp	r3, #0
 802b050:	da16      	bge.n	802b080 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b052:	7bfb      	ldrb	r3, [r7, #15]
 802b054:	687a      	ldr	r2, [r7, #4]
 802b056:	211a      	movs	r1, #26
 802b058:	fb01 f303 	mul.w	r3, r1, r3
 802b05c:	4413      	add	r3, r2
 802b05e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b062:	781a      	ldrb	r2, [r3, #0]
 802b064:	68bb      	ldr	r3, [r7, #8]
 802b066:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b068:	7bfb      	ldrb	r3, [r7, #15]
 802b06a:	687a      	ldr	r2, [r7, #4]
 802b06c:	211a      	movs	r1, #26
 802b06e:	fb01 f303 	mul.w	r3, r1, r3
 802b072:	4413      	add	r3, r2
 802b074:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b078:	881a      	ldrh	r2, [r3, #0]
 802b07a:	68bb      	ldr	r3, [r7, #8]
 802b07c:	835a      	strh	r2, [r3, #26]
 802b07e:	e015      	b.n	802b0ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b080:	7bfb      	ldrb	r3, [r7, #15]
 802b082:	687a      	ldr	r2, [r7, #4]
 802b084:	211a      	movs	r1, #26
 802b086:	fb01 f303 	mul.w	r3, r1, r3
 802b08a:	4413      	add	r3, r2
 802b08c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b090:	781a      	ldrb	r2, [r3, #0]
 802b092:	68bb      	ldr	r3, [r7, #8]
 802b094:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b096:	7bfb      	ldrb	r3, [r7, #15]
 802b098:	687a      	ldr	r2, [r7, #4]
 802b09a:	211a      	movs	r1, #26
 802b09c:	fb01 f303 	mul.w	r3, r1, r3
 802b0a0:	4413      	add	r3, r2
 802b0a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b0a6:	881a      	ldrh	r2, [r3, #0]
 802b0a8:	68bb      	ldr	r3, [r7, #8]
 802b0aa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802b0ac:	7bfb      	ldrb	r3, [r7, #15]
 802b0ae:	687a      	ldr	r2, [r7, #4]
 802b0b0:	211a      	movs	r1, #26
 802b0b2:	fb01 f303 	mul.w	r3, r1, r3
 802b0b6:	4413      	add	r3, r2
 802b0b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b0bc:	781b      	ldrb	r3, [r3, #0]
 802b0be:	b25b      	sxtb	r3, r3
 802b0c0:	2b00      	cmp	r3, #0
 802b0c2:	da16      	bge.n	802b0f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b0c4:	7bfb      	ldrb	r3, [r7, #15]
 802b0c6:	687a      	ldr	r2, [r7, #4]
 802b0c8:	211a      	movs	r1, #26
 802b0ca:	fb01 f303 	mul.w	r3, r1, r3
 802b0ce:	4413      	add	r3, r2
 802b0d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b0d4:	781a      	ldrb	r2, [r3, #0]
 802b0d6:	68bb      	ldr	r3, [r7, #8]
 802b0d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b0da:	7bfb      	ldrb	r3, [r7, #15]
 802b0dc:	687a      	ldr	r2, [r7, #4]
 802b0de:	211a      	movs	r1, #26
 802b0e0:	fb01 f303 	mul.w	r3, r1, r3
 802b0e4:	4413      	add	r3, r2
 802b0e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b0ea:	881a      	ldrh	r2, [r3, #0]
 802b0ec:	68bb      	ldr	r3, [r7, #8]
 802b0ee:	835a      	strh	r2, [r3, #26]
 802b0f0:	e015      	b.n	802b11e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b0f2:	7bfb      	ldrb	r3, [r7, #15]
 802b0f4:	687a      	ldr	r2, [r7, #4]
 802b0f6:	211a      	movs	r1, #26
 802b0f8:	fb01 f303 	mul.w	r3, r1, r3
 802b0fc:	4413      	add	r3, r2
 802b0fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b102:	781a      	ldrb	r2, [r3, #0]
 802b104:	68bb      	ldr	r3, [r7, #8]
 802b106:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b108:	7bfb      	ldrb	r3, [r7, #15]
 802b10a:	687a      	ldr	r2, [r7, #4]
 802b10c:	211a      	movs	r1, #26
 802b10e:	fb01 f303 	mul.w	r3, r1, r3
 802b112:	4413      	add	r3, r2
 802b114:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b118:	881a      	ldrh	r2, [r3, #0]
 802b11a:	68bb      	ldr	r3, [r7, #8]
 802b11c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802b11e:	68bb      	ldr	r3, [r7, #8]
 802b120:	7b9b      	ldrb	r3, [r3, #14]
 802b122:	4619      	mov	r1, r3
 802b124:	6878      	ldr	r0, [r7, #4]
 802b126:	f001 fe84 	bl	802ce32 <USBH_AllocPipe>
 802b12a:	4603      	mov	r3, r0
 802b12c:	461a      	mov	r2, r3
 802b12e:	68bb      	ldr	r3, [r7, #8]
 802b130:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802b132:	68bb      	ldr	r3, [r7, #8]
 802b134:	7bdb      	ldrb	r3, [r3, #15]
 802b136:	4619      	mov	r1, r3
 802b138:	6878      	ldr	r0, [r7, #4]
 802b13a:	f001 fe7a 	bl	802ce32 <USBH_AllocPipe>
 802b13e:	4603      	mov	r3, r0
 802b140:	461a      	mov	r2, r3
 802b142:	68bb      	ldr	r3, [r7, #8]
 802b144:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802b146:	68bb      	ldr	r3, [r7, #8]
 802b148:	7b59      	ldrb	r1, [r3, #13]
 802b14a:	68bb      	ldr	r3, [r7, #8]
 802b14c:	7b98      	ldrb	r0, [r3, #14]
 802b14e:	687b      	ldr	r3, [r7, #4]
 802b150:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b154:	687b      	ldr	r3, [r7, #4]
 802b156:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b15a:	68ba      	ldr	r2, [r7, #8]
 802b15c:	8b12      	ldrh	r2, [r2, #24]
 802b15e:	9202      	str	r2, [sp, #8]
 802b160:	2202      	movs	r2, #2
 802b162:	9201      	str	r2, [sp, #4]
 802b164:	9300      	str	r3, [sp, #0]
 802b166:	4623      	mov	r3, r4
 802b168:	4602      	mov	r2, r0
 802b16a:	6878      	ldr	r0, [r7, #4]
 802b16c:	f001 fe32 	bl	802cdd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802b170:	68bb      	ldr	r3, [r7, #8]
 802b172:	7b19      	ldrb	r1, [r3, #12]
 802b174:	68bb      	ldr	r3, [r7, #8]
 802b176:	7bd8      	ldrb	r0, [r3, #15]
 802b178:	687b      	ldr	r3, [r7, #4]
 802b17a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b17e:	687b      	ldr	r3, [r7, #4]
 802b180:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b184:	68ba      	ldr	r2, [r7, #8]
 802b186:	8b52      	ldrh	r2, [r2, #26]
 802b188:	9202      	str	r2, [sp, #8]
 802b18a:	2202      	movs	r2, #2
 802b18c:	9201      	str	r2, [sp, #4]
 802b18e:	9300      	str	r3, [sp, #0]
 802b190:	4623      	mov	r3, r4
 802b192:	4602      	mov	r2, r0
 802b194:	6878      	ldr	r0, [r7, #4]
 802b196:	f001 fe1d 	bl	802cdd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802b19a:	68bb      	ldr	r3, [r7, #8]
 802b19c:	2200      	movs	r2, #0
 802b19e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802b1a2:	68bb      	ldr	r3, [r7, #8]
 802b1a4:	7b5b      	ldrb	r3, [r3, #13]
 802b1a6:	2200      	movs	r2, #0
 802b1a8:	4619      	mov	r1, r3
 802b1aa:	6878      	ldr	r0, [r7, #4]
 802b1ac:	f002 f92e 	bl	802d40c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802b1b0:	68bb      	ldr	r3, [r7, #8]
 802b1b2:	7b1b      	ldrb	r3, [r3, #12]
 802b1b4:	2200      	movs	r2, #0
 802b1b6:	4619      	mov	r1, r3
 802b1b8:	6878      	ldr	r0, [r7, #4]
 802b1ba:	f002 f927 	bl	802d40c <USBH_LL_SetToggle>

  return USBH_OK;
 802b1be:	2300      	movs	r3, #0
}
 802b1c0:	4618      	mov	r0, r3
 802b1c2:	3714      	adds	r7, #20
 802b1c4:	46bd      	mov	sp, r7
 802b1c6:	bd90      	pop	{r4, r7, pc}

0802b1c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802b1c8:	b580      	push	{r7, lr}
 802b1ca:	b084      	sub	sp, #16
 802b1cc:	af00      	add	r7, sp, #0
 802b1ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b1d0:	687b      	ldr	r3, [r7, #4]
 802b1d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1d6:	69db      	ldr	r3, [r3, #28]
 802b1d8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802b1da:	68fb      	ldr	r3, [r7, #12]
 802b1dc:	781b      	ldrb	r3, [r3, #0]
 802b1de:	2b00      	cmp	r3, #0
 802b1e0:	d00e      	beq.n	802b200 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b1e2:	68fb      	ldr	r3, [r7, #12]
 802b1e4:	781b      	ldrb	r3, [r3, #0]
 802b1e6:	4619      	mov	r1, r3
 802b1e8:	6878      	ldr	r0, [r7, #4]
 802b1ea:	f001 fe12 	bl	802ce12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b1ee:	68fb      	ldr	r3, [r7, #12]
 802b1f0:	781b      	ldrb	r3, [r3, #0]
 802b1f2:	4619      	mov	r1, r3
 802b1f4:	6878      	ldr	r0, [r7, #4]
 802b1f6:	f001 fe3d 	bl	802ce74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802b1fa:	68fb      	ldr	r3, [r7, #12]
 802b1fc:	2200      	movs	r2, #0
 802b1fe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802b200:	68fb      	ldr	r3, [r7, #12]
 802b202:	7b1b      	ldrb	r3, [r3, #12]
 802b204:	2b00      	cmp	r3, #0
 802b206:	d00e      	beq.n	802b226 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802b208:	68fb      	ldr	r3, [r7, #12]
 802b20a:	7b1b      	ldrb	r3, [r3, #12]
 802b20c:	4619      	mov	r1, r3
 802b20e:	6878      	ldr	r0, [r7, #4]
 802b210:	f001 fdff 	bl	802ce12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802b214:	68fb      	ldr	r3, [r7, #12]
 802b216:	7b1b      	ldrb	r3, [r3, #12]
 802b218:	4619      	mov	r1, r3
 802b21a:	6878      	ldr	r0, [r7, #4]
 802b21c:	f001 fe2a 	bl	802ce74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802b220:	68fb      	ldr	r3, [r7, #12]
 802b222:	2200      	movs	r2, #0
 802b224:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802b226:	68fb      	ldr	r3, [r7, #12]
 802b228:	7b5b      	ldrb	r3, [r3, #13]
 802b22a:	2b00      	cmp	r3, #0
 802b22c:	d00e      	beq.n	802b24c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b22e:	68fb      	ldr	r3, [r7, #12]
 802b230:	7b5b      	ldrb	r3, [r3, #13]
 802b232:	4619      	mov	r1, r3
 802b234:	6878      	ldr	r0, [r7, #4]
 802b236:	f001 fdec 	bl	802ce12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b23a:	68fb      	ldr	r3, [r7, #12]
 802b23c:	7b5b      	ldrb	r3, [r3, #13]
 802b23e:	4619      	mov	r1, r3
 802b240:	6878      	ldr	r0, [r7, #4]
 802b242:	f001 fe17 	bl	802ce74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802b246:	68fb      	ldr	r3, [r7, #12]
 802b248:	2200      	movs	r2, #0
 802b24a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b252:	69db      	ldr	r3, [r3, #28]
 802b254:	2b00      	cmp	r3, #0
 802b256:	d00b      	beq.n	802b270 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802b258:	687b      	ldr	r3, [r7, #4]
 802b25a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b25e:	69db      	ldr	r3, [r3, #28]
 802b260:	4618      	mov	r0, r3
 802b262:	f002 f989 	bl	802d578 <free>
    phost->pActiveClass->pData = 0U;
 802b266:	687b      	ldr	r3, [r7, #4]
 802b268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b26c:	2200      	movs	r2, #0
 802b26e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802b270:	2300      	movs	r3, #0
}
 802b272:	4618      	mov	r0, r3
 802b274:	3710      	adds	r7, #16
 802b276:	46bd      	mov	sp, r7
 802b278:	bd80      	pop	{r7, pc}

0802b27a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802b27a:	b580      	push	{r7, lr}
 802b27c:	b084      	sub	sp, #16
 802b27e:	af00      	add	r7, sp, #0
 802b280:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b282:	687b      	ldr	r3, [r7, #4]
 802b284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b288:	69db      	ldr	r3, [r3, #28]
 802b28a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802b28c:	68fb      	ldr	r3, [r7, #12]
 802b28e:	3340      	adds	r3, #64	; 0x40
 802b290:	4619      	mov	r1, r3
 802b292:	6878      	ldr	r0, [r7, #4]
 802b294:	f000 f8b1 	bl	802b3fa <GetLineCoding>
 802b298:	4603      	mov	r3, r0
 802b29a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802b29c:	7afb      	ldrb	r3, [r7, #11]
 802b29e:	2b00      	cmp	r3, #0
 802b2a0:	d105      	bne.n	802b2ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802b2a2:	687b      	ldr	r3, [r7, #4]
 802b2a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b2a8:	2102      	movs	r1, #2
 802b2aa:	6878      	ldr	r0, [r7, #4]
 802b2ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802b2ae:	7afb      	ldrb	r3, [r7, #11]
}
 802b2b0:	4618      	mov	r0, r3
 802b2b2:	3710      	adds	r7, #16
 802b2b4:	46bd      	mov	sp, r7
 802b2b6:	bd80      	pop	{r7, pc}

0802b2b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802b2b8:	b580      	push	{r7, lr}
 802b2ba:	b084      	sub	sp, #16
 802b2bc:	af00      	add	r7, sp, #0
 802b2be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802b2c0:	2301      	movs	r3, #1
 802b2c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802b2c4:	2300      	movs	r3, #0
 802b2c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b2c8:	687b      	ldr	r3, [r7, #4]
 802b2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b2ce:	69db      	ldr	r3, [r3, #28]
 802b2d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802b2d2:	68bb      	ldr	r3, [r7, #8]
 802b2d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802b2d8:	2b04      	cmp	r3, #4
 802b2da:	d877      	bhi.n	802b3cc <USBH_CDC_Process+0x114>
 802b2dc:	a201      	add	r2, pc, #4	; (adr r2, 802b2e4 <USBH_CDC_Process+0x2c>)
 802b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b2e2:	bf00      	nop
 802b2e4:	0802b2f9 	.word	0x0802b2f9
 802b2e8:	0802b2ff 	.word	0x0802b2ff
 802b2ec:	0802b32f 	.word	0x0802b32f
 802b2f0:	0802b3a3 	.word	0x0802b3a3
 802b2f4:	0802b3b1 	.word	0x0802b3b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802b2f8:	2300      	movs	r3, #0
 802b2fa:	73fb      	strb	r3, [r7, #15]
      break;
 802b2fc:	e06d      	b.n	802b3da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802b2fe:	68bb      	ldr	r3, [r7, #8]
 802b300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b302:	4619      	mov	r1, r3
 802b304:	6878      	ldr	r0, [r7, #4]
 802b306:	f000 f897 	bl	802b438 <SetLineCoding>
 802b30a:	4603      	mov	r3, r0
 802b30c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b30e:	7bbb      	ldrb	r3, [r7, #14]
 802b310:	2b00      	cmp	r3, #0
 802b312:	d104      	bne.n	802b31e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802b314:	68bb      	ldr	r3, [r7, #8]
 802b316:	2202      	movs	r2, #2
 802b318:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b31c:	e058      	b.n	802b3d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802b31e:	7bbb      	ldrb	r3, [r7, #14]
 802b320:	2b01      	cmp	r3, #1
 802b322:	d055      	beq.n	802b3d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b324:	68bb      	ldr	r3, [r7, #8]
 802b326:	2204      	movs	r2, #4
 802b328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b32c:	e050      	b.n	802b3d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802b32e:	68bb      	ldr	r3, [r7, #8]
 802b330:	3340      	adds	r3, #64	; 0x40
 802b332:	4619      	mov	r1, r3
 802b334:	6878      	ldr	r0, [r7, #4]
 802b336:	f000 f860 	bl	802b3fa <GetLineCoding>
 802b33a:	4603      	mov	r3, r0
 802b33c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b33e:	7bbb      	ldrb	r3, [r7, #14]
 802b340:	2b00      	cmp	r3, #0
 802b342:	d126      	bne.n	802b392 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802b344:	68bb      	ldr	r3, [r7, #8]
 802b346:	2200      	movs	r2, #0
 802b348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b34c:	68bb      	ldr	r3, [r7, #8]
 802b34e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802b352:	68bb      	ldr	r3, [r7, #8]
 802b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b356:	791b      	ldrb	r3, [r3, #4]
 802b358:	429a      	cmp	r2, r3
 802b35a:	d13b      	bne.n	802b3d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b35c:	68bb      	ldr	r3, [r7, #8]
 802b35e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802b362:	68bb      	ldr	r3, [r7, #8]
 802b364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b366:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b368:	429a      	cmp	r2, r3
 802b36a:	d133      	bne.n	802b3d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b36c:	68bb      	ldr	r3, [r7, #8]
 802b36e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802b372:	68bb      	ldr	r3, [r7, #8]
 802b374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b376:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b378:	429a      	cmp	r2, r3
 802b37a:	d12b      	bne.n	802b3d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802b37c:	68bb      	ldr	r3, [r7, #8]
 802b37e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b380:	68bb      	ldr	r3, [r7, #8]
 802b382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b384:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b386:	429a      	cmp	r2, r3
 802b388:	d124      	bne.n	802b3d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802b38a:	6878      	ldr	r0, [r7, #4]
 802b38c:	f000 f958 	bl	802b640 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b390:	e020      	b.n	802b3d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802b392:	7bbb      	ldrb	r3, [r7, #14]
 802b394:	2b01      	cmp	r3, #1
 802b396:	d01d      	beq.n	802b3d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b398:	68bb      	ldr	r3, [r7, #8]
 802b39a:	2204      	movs	r2, #4
 802b39c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b3a0:	e018      	b.n	802b3d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802b3a2:	6878      	ldr	r0, [r7, #4]
 802b3a4:	f000 f867 	bl	802b476 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802b3a8:	6878      	ldr	r0, [r7, #4]
 802b3aa:	f000 f8da 	bl	802b562 <CDC_ProcessReception>
      break;
 802b3ae:	e014      	b.n	802b3da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802b3b0:	2100      	movs	r1, #0
 802b3b2:	6878      	ldr	r0, [r7, #4]
 802b3b4:	f000 ffef 	bl	802c396 <USBH_ClrFeature>
 802b3b8:	4603      	mov	r3, r0
 802b3ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b3bc:	7bbb      	ldrb	r3, [r7, #14]
 802b3be:	2b00      	cmp	r3, #0
 802b3c0:	d10a      	bne.n	802b3d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802b3c2:	68bb      	ldr	r3, [r7, #8]
 802b3c4:	2200      	movs	r2, #0
 802b3c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802b3ca:	e005      	b.n	802b3d8 <USBH_CDC_Process+0x120>

    default:
      break;
 802b3cc:	bf00      	nop
 802b3ce:	e004      	b.n	802b3da <USBH_CDC_Process+0x122>
      break;
 802b3d0:	bf00      	nop
 802b3d2:	e002      	b.n	802b3da <USBH_CDC_Process+0x122>
      break;
 802b3d4:	bf00      	nop
 802b3d6:	e000      	b.n	802b3da <USBH_CDC_Process+0x122>
      break;
 802b3d8:	bf00      	nop

  }

  return status;
 802b3da:	7bfb      	ldrb	r3, [r7, #15]
}
 802b3dc:	4618      	mov	r0, r3
 802b3de:	3710      	adds	r7, #16
 802b3e0:	46bd      	mov	sp, r7
 802b3e2:	bd80      	pop	{r7, pc}

0802b3e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802b3e4:	b480      	push	{r7}
 802b3e6:	b083      	sub	sp, #12
 802b3e8:	af00      	add	r7, sp, #0
 802b3ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802b3ec:	2300      	movs	r3, #0
}
 802b3ee:	4618      	mov	r0, r3
 802b3f0:	370c      	adds	r7, #12
 802b3f2:	46bd      	mov	sp, r7
 802b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3f8:	4770      	bx	lr

0802b3fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802b3fa:	b580      	push	{r7, lr}
 802b3fc:	b082      	sub	sp, #8
 802b3fe:	af00      	add	r7, sp, #0
 802b400:	6078      	str	r0, [r7, #4]
 802b402:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802b404:	687b      	ldr	r3, [r7, #4]
 802b406:	22a1      	movs	r2, #161	; 0xa1
 802b408:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802b40a:	687b      	ldr	r3, [r7, #4]
 802b40c:	2221      	movs	r2, #33	; 0x21
 802b40e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b410:	687b      	ldr	r3, [r7, #4]
 802b412:	2200      	movs	r2, #0
 802b414:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802b416:	687b      	ldr	r3, [r7, #4]
 802b418:	2200      	movs	r2, #0
 802b41a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b41c:	687b      	ldr	r3, [r7, #4]
 802b41e:	2207      	movs	r2, #7
 802b420:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b422:	683b      	ldr	r3, [r7, #0]
 802b424:	2207      	movs	r2, #7
 802b426:	4619      	mov	r1, r3
 802b428:	6878      	ldr	r0, [r7, #4]
 802b42a:	f001 fa81 	bl	802c930 <USBH_CtlReq>
 802b42e:	4603      	mov	r3, r0
}
 802b430:	4618      	mov	r0, r3
 802b432:	3708      	adds	r7, #8
 802b434:	46bd      	mov	sp, r7
 802b436:	bd80      	pop	{r7, pc}

0802b438 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802b438:	b580      	push	{r7, lr}
 802b43a:	b082      	sub	sp, #8
 802b43c:	af00      	add	r7, sp, #0
 802b43e:	6078      	str	r0, [r7, #4]
 802b440:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802b442:	687b      	ldr	r3, [r7, #4]
 802b444:	2221      	movs	r2, #33	; 0x21
 802b446:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802b448:	687b      	ldr	r3, [r7, #4]
 802b44a:	2220      	movs	r2, #32
 802b44c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b44e:	687b      	ldr	r3, [r7, #4]
 802b450:	2200      	movs	r2, #0
 802b452:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802b454:	687b      	ldr	r3, [r7, #4]
 802b456:	2200      	movs	r2, #0
 802b458:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b45a:	687b      	ldr	r3, [r7, #4]
 802b45c:	2207      	movs	r2, #7
 802b45e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b460:	683b      	ldr	r3, [r7, #0]
 802b462:	2207      	movs	r2, #7
 802b464:	4619      	mov	r1, r3
 802b466:	6878      	ldr	r0, [r7, #4]
 802b468:	f001 fa62 	bl	802c930 <USBH_CtlReq>
 802b46c:	4603      	mov	r3, r0
}
 802b46e:	4618      	mov	r0, r3
 802b470:	3708      	adds	r7, #8
 802b472:	46bd      	mov	sp, r7
 802b474:	bd80      	pop	{r7, pc}

0802b476 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802b476:	b580      	push	{r7, lr}
 802b478:	b086      	sub	sp, #24
 802b47a:	af02      	add	r7, sp, #8
 802b47c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b47e:	687b      	ldr	r3, [r7, #4]
 802b480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b484:	69db      	ldr	r3, [r3, #28]
 802b486:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b488:	2300      	movs	r3, #0
 802b48a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802b48c:	68fb      	ldr	r3, [r7, #12]
 802b48e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802b492:	2b01      	cmp	r3, #1
 802b494:	d002      	beq.n	802b49c <CDC_ProcessTransmission+0x26>
 802b496:	2b02      	cmp	r3, #2
 802b498:	d023      	beq.n	802b4e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802b49a:	e05e      	b.n	802b55a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b49c:	68fb      	ldr	r3, [r7, #12]
 802b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b4a0:	68fa      	ldr	r2, [r7, #12]
 802b4a2:	8b12      	ldrh	r2, [r2, #24]
 802b4a4:	4293      	cmp	r3, r2
 802b4a6:	d90b      	bls.n	802b4c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802b4a8:	68fb      	ldr	r3, [r7, #12]
 802b4aa:	69d9      	ldr	r1, [r3, #28]
 802b4ac:	68fb      	ldr	r3, [r7, #12]
 802b4ae:	8b1a      	ldrh	r2, [r3, #24]
 802b4b0:	68fb      	ldr	r3, [r7, #12]
 802b4b2:	7b5b      	ldrb	r3, [r3, #13]
 802b4b4:	2001      	movs	r0, #1
 802b4b6:	9000      	str	r0, [sp, #0]
 802b4b8:	6878      	ldr	r0, [r7, #4]
 802b4ba:	f001 fc48 	bl	802cd4e <USBH_BulkSendData>
 802b4be:	e00b      	b.n	802b4d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802b4c0:	68fb      	ldr	r3, [r7, #12]
 802b4c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802b4c4:	68fb      	ldr	r3, [r7, #12]
 802b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802b4c8:	b29a      	uxth	r2, r3
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	7b5b      	ldrb	r3, [r3, #13]
 802b4ce:	2001      	movs	r0, #1
 802b4d0:	9000      	str	r0, [sp, #0]
 802b4d2:	6878      	ldr	r0, [r7, #4]
 802b4d4:	f001 fc3b 	bl	802cd4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802b4d8:	68fb      	ldr	r3, [r7, #12]
 802b4da:	2202      	movs	r2, #2
 802b4dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b4e0:	e03b      	b.n	802b55a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802b4e2:	68fb      	ldr	r3, [r7, #12]
 802b4e4:	7b5b      	ldrb	r3, [r3, #13]
 802b4e6:	4619      	mov	r1, r3
 802b4e8:	6878      	ldr	r0, [r7, #4]
 802b4ea:	f001 ff65 	bl	802d3b8 <USBH_LL_GetURBState>
 802b4ee:	4603      	mov	r3, r0
 802b4f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802b4f2:	7afb      	ldrb	r3, [r7, #11]
 802b4f4:	2b01      	cmp	r3, #1
 802b4f6:	d128      	bne.n	802b54a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b4f8:	68fb      	ldr	r3, [r7, #12]
 802b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b4fc:	68fa      	ldr	r2, [r7, #12]
 802b4fe:	8b12      	ldrh	r2, [r2, #24]
 802b500:	4293      	cmp	r3, r2
 802b502:	d90e      	bls.n	802b522 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802b504:	68fb      	ldr	r3, [r7, #12]
 802b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b508:	68fa      	ldr	r2, [r7, #12]
 802b50a:	8b12      	ldrh	r2, [r2, #24]
 802b50c:	1a9a      	subs	r2, r3, r2
 802b50e:	68fb      	ldr	r3, [r7, #12]
 802b510:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802b512:	68fb      	ldr	r3, [r7, #12]
 802b514:	69db      	ldr	r3, [r3, #28]
 802b516:	68fa      	ldr	r2, [r7, #12]
 802b518:	8b12      	ldrh	r2, [r2, #24]
 802b51a:	441a      	add	r2, r3
 802b51c:	68fb      	ldr	r3, [r7, #12]
 802b51e:	61da      	str	r2, [r3, #28]
 802b520:	e002      	b.n	802b528 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802b522:	68fb      	ldr	r3, [r7, #12]
 802b524:	2200      	movs	r2, #0
 802b526:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802b528:	68fb      	ldr	r3, [r7, #12]
 802b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b52c:	2b00      	cmp	r3, #0
 802b52e:	d004      	beq.n	802b53a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b530:	68fb      	ldr	r3, [r7, #12]
 802b532:	2201      	movs	r2, #1
 802b534:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b538:	e00e      	b.n	802b558 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802b53a:	68fb      	ldr	r3, [r7, #12]
 802b53c:	2200      	movs	r2, #0
 802b53e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802b542:	6878      	ldr	r0, [r7, #4]
 802b544:	f000 f868 	bl	802b618 <USBH_CDC_TransmitCallback>
      break;
 802b548:	e006      	b.n	802b558 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802b54a:	7afb      	ldrb	r3, [r7, #11]
 802b54c:	2b02      	cmp	r3, #2
 802b54e:	d103      	bne.n	802b558 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b550:	68fb      	ldr	r3, [r7, #12]
 802b552:	2201      	movs	r2, #1
 802b554:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b558:	bf00      	nop
  }
}
 802b55a:	bf00      	nop
 802b55c:	3710      	adds	r7, #16
 802b55e:	46bd      	mov	sp, r7
 802b560:	bd80      	pop	{r7, pc}

0802b562 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802b562:	b580      	push	{r7, lr}
 802b564:	b086      	sub	sp, #24
 802b566:	af00      	add	r7, sp, #0
 802b568:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b56a:	687b      	ldr	r3, [r7, #4]
 802b56c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b570:	69db      	ldr	r3, [r3, #28]
 802b572:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b574:	2300      	movs	r3, #0
 802b576:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802b578:	697b      	ldr	r3, [r7, #20]
 802b57a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802b57e:	2b03      	cmp	r3, #3
 802b580:	d002      	beq.n	802b588 <CDC_ProcessReception+0x26>
 802b582:	2b04      	cmp	r3, #4
 802b584:	d00e      	beq.n	802b5a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802b586:	e043      	b.n	802b610 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802b588:	697b      	ldr	r3, [r7, #20]
 802b58a:	6a19      	ldr	r1, [r3, #32]
 802b58c:	697b      	ldr	r3, [r7, #20]
 802b58e:	8b5a      	ldrh	r2, [r3, #26]
 802b590:	697b      	ldr	r3, [r7, #20]
 802b592:	7b1b      	ldrb	r3, [r3, #12]
 802b594:	6878      	ldr	r0, [r7, #4]
 802b596:	f001 fbff 	bl	802cd98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802b59a:	697b      	ldr	r3, [r7, #20]
 802b59c:	2204      	movs	r2, #4
 802b59e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b5a2:	e035      	b.n	802b610 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802b5a4:	697b      	ldr	r3, [r7, #20]
 802b5a6:	7b1b      	ldrb	r3, [r3, #12]
 802b5a8:	4619      	mov	r1, r3
 802b5aa:	6878      	ldr	r0, [r7, #4]
 802b5ac:	f001 ff04 	bl	802d3b8 <USBH_LL_GetURBState>
 802b5b0:	4603      	mov	r3, r0
 802b5b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802b5b4:	7cfb      	ldrb	r3, [r7, #19]
 802b5b6:	2b01      	cmp	r3, #1
 802b5b8:	d129      	bne.n	802b60e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802b5ba:	697b      	ldr	r3, [r7, #20]
 802b5bc:	7b1b      	ldrb	r3, [r3, #12]
 802b5be:	4619      	mov	r1, r3
 802b5c0:	6878      	ldr	r0, [r7, #4]
 802b5c2:	f001 fe67 	bl	802d294 <USBH_LL_GetLastXferSize>
 802b5c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802b5c8:	697b      	ldr	r3, [r7, #20]
 802b5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b5cc:	68fa      	ldr	r2, [r7, #12]
 802b5ce:	429a      	cmp	r2, r3
 802b5d0:	d016      	beq.n	802b600 <CDC_ProcessReception+0x9e>
 802b5d2:	697b      	ldr	r3, [r7, #20]
 802b5d4:	8b5b      	ldrh	r3, [r3, #26]
 802b5d6:	461a      	mov	r2, r3
 802b5d8:	68fb      	ldr	r3, [r7, #12]
 802b5da:	4293      	cmp	r3, r2
 802b5dc:	d910      	bls.n	802b600 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802b5de:	697b      	ldr	r3, [r7, #20]
 802b5e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b5e2:	68fb      	ldr	r3, [r7, #12]
 802b5e4:	1ad2      	subs	r2, r2, r3
 802b5e6:	697b      	ldr	r3, [r7, #20]
 802b5e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802b5ea:	697b      	ldr	r3, [r7, #20]
 802b5ec:	6a1a      	ldr	r2, [r3, #32]
 802b5ee:	68fb      	ldr	r3, [r7, #12]
 802b5f0:	441a      	add	r2, r3
 802b5f2:	697b      	ldr	r3, [r7, #20]
 802b5f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802b5f6:	697b      	ldr	r3, [r7, #20]
 802b5f8:	2203      	movs	r2, #3
 802b5fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b5fe:	e006      	b.n	802b60e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802b600:	697b      	ldr	r3, [r7, #20]
 802b602:	2200      	movs	r2, #0
 802b604:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802b608:	6878      	ldr	r0, [r7, #4]
 802b60a:	f000 f80f 	bl	802b62c <USBH_CDC_ReceiveCallback>
      break;
 802b60e:	bf00      	nop
  }
}
 802b610:	bf00      	nop
 802b612:	3718      	adds	r7, #24
 802b614:	46bd      	mov	sp, r7
 802b616:	bd80      	pop	{r7, pc}

0802b618 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802b618:	b480      	push	{r7}
 802b61a:	b083      	sub	sp, #12
 802b61c:	af00      	add	r7, sp, #0
 802b61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b620:	bf00      	nop
 802b622:	370c      	adds	r7, #12
 802b624:	46bd      	mov	sp, r7
 802b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b62a:	4770      	bx	lr

0802b62c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802b62c:	b480      	push	{r7}
 802b62e:	b083      	sub	sp, #12
 802b630:	af00      	add	r7, sp, #0
 802b632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b634:	bf00      	nop
 802b636:	370c      	adds	r7, #12
 802b638:	46bd      	mov	sp, r7
 802b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b63e:	4770      	bx	lr

0802b640 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802b640:	b480      	push	{r7}
 802b642:	b083      	sub	sp, #12
 802b644:	af00      	add	r7, sp, #0
 802b646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b648:	bf00      	nop
 802b64a:	370c      	adds	r7, #12
 802b64c:	46bd      	mov	sp, r7
 802b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b652:	4770      	bx	lr

0802b654 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802b654:	b580      	push	{r7, lr}
 802b656:	b084      	sub	sp, #16
 802b658:	af00      	add	r7, sp, #0
 802b65a:	60f8      	str	r0, [r7, #12]
 802b65c:	60b9      	str	r1, [r7, #8]
 802b65e:	4613      	mov	r3, r2
 802b660:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802b662:	68fb      	ldr	r3, [r7, #12]
 802b664:	2b00      	cmp	r3, #0
 802b666:	d101      	bne.n	802b66c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802b668:	2302      	movs	r3, #2
 802b66a:	e029      	b.n	802b6c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802b66c:	68fb      	ldr	r3, [r7, #12]
 802b66e:	79fa      	ldrb	r2, [r7, #7]
 802b670:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802b674:	68fb      	ldr	r3, [r7, #12]
 802b676:	2200      	movs	r2, #0
 802b678:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802b67c:	68fb      	ldr	r3, [r7, #12]
 802b67e:	2200      	movs	r2, #0
 802b680:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802b684:	68f8      	ldr	r0, [r7, #12]
 802b686:	f000 f81f 	bl	802b6c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802b68a:	68fb      	ldr	r3, [r7, #12]
 802b68c:	2200      	movs	r2, #0
 802b68e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802b692:	68fb      	ldr	r3, [r7, #12]
 802b694:	2200      	movs	r2, #0
 802b696:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b69a:	68fb      	ldr	r3, [r7, #12]
 802b69c:	2200      	movs	r2, #0
 802b69e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b6a2:	68fb      	ldr	r3, [r7, #12]
 802b6a4:	2200      	movs	r2, #0
 802b6a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802b6aa:	68bb      	ldr	r3, [r7, #8]
 802b6ac:	2b00      	cmp	r3, #0
 802b6ae:	d003      	beq.n	802b6b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802b6b0:	68fb      	ldr	r3, [r7, #12]
 802b6b2:	68ba      	ldr	r2, [r7, #8]
 802b6b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802b6b8:	68f8      	ldr	r0, [r7, #12]
 802b6ba:	f001 fd2d 	bl	802d118 <USBH_LL_Init>

  return USBH_OK;
 802b6be:	2300      	movs	r3, #0
}
 802b6c0:	4618      	mov	r0, r3
 802b6c2:	3710      	adds	r7, #16
 802b6c4:	46bd      	mov	sp, r7
 802b6c6:	bd80      	pop	{r7, pc}

0802b6c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802b6c8:	b480      	push	{r7}
 802b6ca:	b085      	sub	sp, #20
 802b6cc:	af00      	add	r7, sp, #0
 802b6ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802b6d0:	2300      	movs	r3, #0
 802b6d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b6d4:	2300      	movs	r3, #0
 802b6d6:	60fb      	str	r3, [r7, #12]
 802b6d8:	e009      	b.n	802b6ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802b6da:	687a      	ldr	r2, [r7, #4]
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	33e0      	adds	r3, #224	; 0xe0
 802b6e0:	009b      	lsls	r3, r3, #2
 802b6e2:	4413      	add	r3, r2
 802b6e4:	2200      	movs	r2, #0
 802b6e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b6e8:	68fb      	ldr	r3, [r7, #12]
 802b6ea:	3301      	adds	r3, #1
 802b6ec:	60fb      	str	r3, [r7, #12]
 802b6ee:	68fb      	ldr	r3, [r7, #12]
 802b6f0:	2b0f      	cmp	r3, #15
 802b6f2:	d9f2      	bls.n	802b6da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b6f4:	2300      	movs	r3, #0
 802b6f6:	60fb      	str	r3, [r7, #12]
 802b6f8:	e009      	b.n	802b70e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802b6fa:	687a      	ldr	r2, [r7, #4]
 802b6fc:	68fb      	ldr	r3, [r7, #12]
 802b6fe:	4413      	add	r3, r2
 802b700:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b704:	2200      	movs	r2, #0
 802b706:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b708:	68fb      	ldr	r3, [r7, #12]
 802b70a:	3301      	adds	r3, #1
 802b70c:	60fb      	str	r3, [r7, #12]
 802b70e:	68fb      	ldr	r3, [r7, #12]
 802b710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b714:	d3f1      	bcc.n	802b6fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802b716:	687b      	ldr	r3, [r7, #4]
 802b718:	2200      	movs	r2, #0
 802b71a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802b71c:	687b      	ldr	r3, [r7, #4]
 802b71e:	2200      	movs	r2, #0
 802b720:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	2201      	movs	r2, #1
 802b726:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802b728:	687b      	ldr	r3, [r7, #4]
 802b72a:	2200      	movs	r2, #0
 802b72c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802b730:	687b      	ldr	r3, [r7, #4]
 802b732:	2201      	movs	r2, #1
 802b734:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802b736:	687b      	ldr	r3, [r7, #4]
 802b738:	2240      	movs	r2, #64	; 0x40
 802b73a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	2200      	movs	r2, #0
 802b740:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802b742:	687b      	ldr	r3, [r7, #4]
 802b744:	2200      	movs	r2, #0
 802b746:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802b74a:	687b      	ldr	r3, [r7, #4]
 802b74c:	2201      	movs	r2, #1
 802b74e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	2200      	movs	r2, #0
 802b756:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802b75a:	687b      	ldr	r3, [r7, #4]
 802b75c:	2200      	movs	r2, #0
 802b75e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802b762:	2300      	movs	r3, #0
}
 802b764:	4618      	mov	r0, r3
 802b766:	3714      	adds	r7, #20
 802b768:	46bd      	mov	sp, r7
 802b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b76e:	4770      	bx	lr

0802b770 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802b770:	b480      	push	{r7}
 802b772:	b085      	sub	sp, #20
 802b774:	af00      	add	r7, sp, #0
 802b776:	6078      	str	r0, [r7, #4]
 802b778:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802b77a:	2300      	movs	r3, #0
 802b77c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802b77e:	683b      	ldr	r3, [r7, #0]
 802b780:	2b00      	cmp	r3, #0
 802b782:	d016      	beq.n	802b7b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802b784:	687b      	ldr	r3, [r7, #4]
 802b786:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d10e      	bne.n	802b7ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802b78e:	687b      	ldr	r3, [r7, #4]
 802b790:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b794:	1c59      	adds	r1, r3, #1
 802b796:	687a      	ldr	r2, [r7, #4]
 802b798:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802b79c:	687a      	ldr	r2, [r7, #4]
 802b79e:	33de      	adds	r3, #222	; 0xde
 802b7a0:	6839      	ldr	r1, [r7, #0]
 802b7a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802b7a6:	2300      	movs	r3, #0
 802b7a8:	73fb      	strb	r3, [r7, #15]
 802b7aa:	e004      	b.n	802b7b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802b7ac:	2302      	movs	r3, #2
 802b7ae:	73fb      	strb	r3, [r7, #15]
 802b7b0:	e001      	b.n	802b7b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802b7b2:	2302      	movs	r3, #2
 802b7b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 802b7b8:	4618      	mov	r0, r3
 802b7ba:	3714      	adds	r7, #20
 802b7bc:	46bd      	mov	sp, r7
 802b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7c2:	4770      	bx	lr

0802b7c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802b7c4:	b480      	push	{r7}
 802b7c6:	b085      	sub	sp, #20
 802b7c8:	af00      	add	r7, sp, #0
 802b7ca:	6078      	str	r0, [r7, #4]
 802b7cc:	460b      	mov	r3, r1
 802b7ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802b7d0:	2300      	movs	r3, #0
 802b7d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802b7d4:	687b      	ldr	r3, [r7, #4]
 802b7d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802b7da:	78fa      	ldrb	r2, [r7, #3]
 802b7dc:	429a      	cmp	r2, r3
 802b7de:	d204      	bcs.n	802b7ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802b7e0:	687b      	ldr	r3, [r7, #4]
 802b7e2:	78fa      	ldrb	r2, [r7, #3]
 802b7e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802b7e8:	e001      	b.n	802b7ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802b7ea:	2302      	movs	r3, #2
 802b7ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 802b7f0:	4618      	mov	r0, r3
 802b7f2:	3714      	adds	r7, #20
 802b7f4:	46bd      	mov	sp, r7
 802b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7fa:	4770      	bx	lr

0802b7fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802b7fc:	b480      	push	{r7}
 802b7fe:	b087      	sub	sp, #28
 802b800:	af00      	add	r7, sp, #0
 802b802:	6078      	str	r0, [r7, #4]
 802b804:	4608      	mov	r0, r1
 802b806:	4611      	mov	r1, r2
 802b808:	461a      	mov	r2, r3
 802b80a:	4603      	mov	r3, r0
 802b80c:	70fb      	strb	r3, [r7, #3]
 802b80e:	460b      	mov	r3, r1
 802b810:	70bb      	strb	r3, [r7, #2]
 802b812:	4613      	mov	r3, r2
 802b814:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802b816:	2300      	movs	r3, #0
 802b818:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802b81a:	2300      	movs	r3, #0
 802b81c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802b81e:	687b      	ldr	r3, [r7, #4]
 802b820:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802b824:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b826:	e025      	b.n	802b874 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802b828:	7dfb      	ldrb	r3, [r7, #23]
 802b82a:	221a      	movs	r2, #26
 802b82c:	fb02 f303 	mul.w	r3, r2, r3
 802b830:	3308      	adds	r3, #8
 802b832:	68fa      	ldr	r2, [r7, #12]
 802b834:	4413      	add	r3, r2
 802b836:	3302      	adds	r3, #2
 802b838:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b83a:	693b      	ldr	r3, [r7, #16]
 802b83c:	795b      	ldrb	r3, [r3, #5]
 802b83e:	78fa      	ldrb	r2, [r7, #3]
 802b840:	429a      	cmp	r2, r3
 802b842:	d002      	beq.n	802b84a <USBH_FindInterface+0x4e>
 802b844:	78fb      	ldrb	r3, [r7, #3]
 802b846:	2bff      	cmp	r3, #255	; 0xff
 802b848:	d111      	bne.n	802b86e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b84a:	693b      	ldr	r3, [r7, #16]
 802b84c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b84e:	78ba      	ldrb	r2, [r7, #2]
 802b850:	429a      	cmp	r2, r3
 802b852:	d002      	beq.n	802b85a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b854:	78bb      	ldrb	r3, [r7, #2]
 802b856:	2bff      	cmp	r3, #255	; 0xff
 802b858:	d109      	bne.n	802b86e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b85a:	693b      	ldr	r3, [r7, #16]
 802b85c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b85e:	787a      	ldrb	r2, [r7, #1]
 802b860:	429a      	cmp	r2, r3
 802b862:	d002      	beq.n	802b86a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b864:	787b      	ldrb	r3, [r7, #1]
 802b866:	2bff      	cmp	r3, #255	; 0xff
 802b868:	d101      	bne.n	802b86e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802b86a:	7dfb      	ldrb	r3, [r7, #23]
 802b86c:	e006      	b.n	802b87c <USBH_FindInterface+0x80>
    }
    if_ix++;
 802b86e:	7dfb      	ldrb	r3, [r7, #23]
 802b870:	3301      	adds	r3, #1
 802b872:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b874:	7dfb      	ldrb	r3, [r7, #23]
 802b876:	2b01      	cmp	r3, #1
 802b878:	d9d6      	bls.n	802b828 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802b87a:	23ff      	movs	r3, #255	; 0xff
}
 802b87c:	4618      	mov	r0, r3
 802b87e:	371c      	adds	r7, #28
 802b880:	46bd      	mov	sp, r7
 802b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b886:	4770      	bx	lr

0802b888 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802b888:	b580      	push	{r7, lr}
 802b88a:	b082      	sub	sp, #8
 802b88c:	af00      	add	r7, sp, #0
 802b88e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802b890:	6878      	ldr	r0, [r7, #4]
 802b892:	f001 fc87 	bl	802d1a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802b896:	2101      	movs	r1, #1
 802b898:	6878      	ldr	r0, [r7, #4]
 802b89a:	f001 fda0 	bl	802d3de <USBH_LL_DriverVBUS>

  return USBH_OK;
 802b89e:	2300      	movs	r3, #0
}
 802b8a0:	4618      	mov	r0, r3
 802b8a2:	3708      	adds	r7, #8
 802b8a4:	46bd      	mov	sp, r7
 802b8a6:	bd80      	pop	{r7, pc}

0802b8a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802b8a8:	b580      	push	{r7, lr}
 802b8aa:	b088      	sub	sp, #32
 802b8ac:	af04      	add	r7, sp, #16
 802b8ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802b8b0:	2302      	movs	r3, #2
 802b8b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802b8b4:	2300      	movs	r3, #0
 802b8b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802b8be:	b2db      	uxtb	r3, r3
 802b8c0:	2b01      	cmp	r3, #1
 802b8c2:	d102      	bne.n	802b8ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802b8c4:	687b      	ldr	r3, [r7, #4]
 802b8c6:	2203      	movs	r2, #3
 802b8c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	781b      	ldrb	r3, [r3, #0]
 802b8ce:	b2db      	uxtb	r3, r3
 802b8d0:	2b0b      	cmp	r3, #11
 802b8d2:	f200 81be 	bhi.w	802bc52 <USBH_Process+0x3aa>
 802b8d6:	a201      	add	r2, pc, #4	; (adr r2, 802b8dc <USBH_Process+0x34>)
 802b8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b8dc:	0802b90d 	.word	0x0802b90d
 802b8e0:	0802b93f 	.word	0x0802b93f
 802b8e4:	0802b9a7 	.word	0x0802b9a7
 802b8e8:	0802bbed 	.word	0x0802bbed
 802b8ec:	0802bc53 	.word	0x0802bc53
 802b8f0:	0802ba4b 	.word	0x0802ba4b
 802b8f4:	0802bb93 	.word	0x0802bb93
 802b8f8:	0802ba81 	.word	0x0802ba81
 802b8fc:	0802baa1 	.word	0x0802baa1
 802b900:	0802bac1 	.word	0x0802bac1
 802b904:	0802bb05 	.word	0x0802bb05
 802b908:	0802bbd5 	.word	0x0802bbd5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802b90c:	687b      	ldr	r3, [r7, #4]
 802b90e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802b912:	b2db      	uxtb	r3, r3
 802b914:	2b00      	cmp	r3, #0
 802b916:	f000 819e 	beq.w	802bc56 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	2201      	movs	r2, #1
 802b91e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802b920:	20c8      	movs	r0, #200	; 0xc8
 802b922:	f001 fda3 	bl	802d46c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802b926:	6878      	ldr	r0, [r7, #4]
 802b928:	f001 fc99 	bl	802d25e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802b92c:	687b      	ldr	r3, [r7, #4]
 802b92e:	2200      	movs	r2, #0
 802b930:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802b934:	687b      	ldr	r3, [r7, #4]
 802b936:	2200      	movs	r2, #0
 802b938:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b93c:	e18b      	b.n	802bc56 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802b93e:	687b      	ldr	r3, [r7, #4]
 802b940:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802b944:	2b01      	cmp	r3, #1
 802b946:	d107      	bne.n	802b958 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	2200      	movs	r2, #0
 802b94c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802b950:	687b      	ldr	r3, [r7, #4]
 802b952:	2202      	movs	r2, #2
 802b954:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b956:	e18d      	b.n	802bc74 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802b958:	687b      	ldr	r3, [r7, #4]
 802b95a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b95e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b962:	d914      	bls.n	802b98e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b96a:	3301      	adds	r3, #1
 802b96c:	b2da      	uxtb	r2, r3
 802b96e:	687b      	ldr	r3, [r7, #4]
 802b970:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b97a:	2b03      	cmp	r3, #3
 802b97c:	d903      	bls.n	802b986 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802b97e:	687b      	ldr	r3, [r7, #4]
 802b980:	220d      	movs	r2, #13
 802b982:	701a      	strb	r2, [r3, #0]
      break;
 802b984:	e176      	b.n	802bc74 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	2200      	movs	r2, #0
 802b98a:	701a      	strb	r2, [r3, #0]
      break;
 802b98c:	e172      	b.n	802bc74 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802b98e:	687b      	ldr	r3, [r7, #4]
 802b990:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b994:	f103 020a 	add.w	r2, r3, #10
 802b998:	687b      	ldr	r3, [r7, #4]
 802b99a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802b99e:	200a      	movs	r0, #10
 802b9a0:	f001 fd64 	bl	802d46c <USBH_Delay>
      break;
 802b9a4:	e166      	b.n	802bc74 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b9ac:	2b00      	cmp	r3, #0
 802b9ae:	d005      	beq.n	802b9bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802b9b0:	687b      	ldr	r3, [r7, #4]
 802b9b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b9b6:	2104      	movs	r1, #4
 802b9b8:	6878      	ldr	r0, [r7, #4]
 802b9ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802b9bc:	2064      	movs	r0, #100	; 0x64
 802b9be:	f001 fd55 	bl	802d46c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802b9c2:	6878      	ldr	r0, [r7, #4]
 802b9c4:	f001 fc24 	bl	802d210 <USBH_LL_GetSpeed>
 802b9c8:	4603      	mov	r3, r0
 802b9ca:	461a      	mov	r2, r3
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802b9d2:	687b      	ldr	r3, [r7, #4]
 802b9d4:	2205      	movs	r2, #5
 802b9d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802b9d8:	2100      	movs	r1, #0
 802b9da:	6878      	ldr	r0, [r7, #4]
 802b9dc:	f001 fa29 	bl	802ce32 <USBH_AllocPipe>
 802b9e0:	4603      	mov	r3, r0
 802b9e2:	461a      	mov	r2, r3
 802b9e4:	687b      	ldr	r3, [r7, #4]
 802b9e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802b9e8:	2180      	movs	r1, #128	; 0x80
 802b9ea:	6878      	ldr	r0, [r7, #4]
 802b9ec:	f001 fa21 	bl	802ce32 <USBH_AllocPipe>
 802b9f0:	4603      	mov	r3, r0
 802b9f2:	461a      	mov	r2, r3
 802b9f4:	687b      	ldr	r3, [r7, #4]
 802b9f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802b9f8:	687b      	ldr	r3, [r7, #4]
 802b9fa:	7919      	ldrb	r1, [r3, #4]
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ba02:	687b      	ldr	r3, [r7, #4]
 802ba04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802ba08:	687a      	ldr	r2, [r7, #4]
 802ba0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802ba0c:	b292      	uxth	r2, r2
 802ba0e:	9202      	str	r2, [sp, #8]
 802ba10:	2200      	movs	r2, #0
 802ba12:	9201      	str	r2, [sp, #4]
 802ba14:	9300      	str	r3, [sp, #0]
 802ba16:	4603      	mov	r3, r0
 802ba18:	2280      	movs	r2, #128	; 0x80
 802ba1a:	6878      	ldr	r0, [r7, #4]
 802ba1c:	f001 f9da 	bl	802cdd4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	7959      	ldrb	r1, [r3, #5]
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802ba30:	687a      	ldr	r2, [r7, #4]
 802ba32:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802ba34:	b292      	uxth	r2, r2
 802ba36:	9202      	str	r2, [sp, #8]
 802ba38:	2200      	movs	r2, #0
 802ba3a:	9201      	str	r2, [sp, #4]
 802ba3c:	9300      	str	r3, [sp, #0]
 802ba3e:	4603      	mov	r3, r0
 802ba40:	2200      	movs	r2, #0
 802ba42:	6878      	ldr	r0, [r7, #4]
 802ba44:	f001 f9c6 	bl	802cdd4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ba48:	e114      	b.n	802bc74 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802ba4a:	6878      	ldr	r0, [r7, #4]
 802ba4c:	f000 f918 	bl	802bc80 <USBH_HandleEnum>
 802ba50:	4603      	mov	r3, r0
 802ba52:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802ba54:	7bbb      	ldrb	r3, [r7, #14]
 802ba56:	b2db      	uxtb	r3, r3
 802ba58:	2b00      	cmp	r3, #0
 802ba5a:	f040 80fe 	bne.w	802bc5a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802ba5e:	687b      	ldr	r3, [r7, #4]
 802ba60:	2200      	movs	r2, #0
 802ba62:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802ba66:	687b      	ldr	r3, [r7, #4]
 802ba68:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802ba6c:	2b01      	cmp	r3, #1
 802ba6e:	d103      	bne.n	802ba78 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802ba70:	687b      	ldr	r3, [r7, #4]
 802ba72:	2208      	movs	r2, #8
 802ba74:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ba76:	e0f0      	b.n	802bc5a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802ba78:	687b      	ldr	r3, [r7, #4]
 802ba7a:	2207      	movs	r2, #7
 802ba7c:	701a      	strb	r2, [r3, #0]
      break;
 802ba7e:	e0ec      	b.n	802bc5a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ba86:	2b00      	cmp	r3, #0
 802ba88:	f000 80e9 	beq.w	802bc5e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802ba8c:	687b      	ldr	r3, [r7, #4]
 802ba8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ba92:	2101      	movs	r1, #1
 802ba94:	6878      	ldr	r0, [r7, #4]
 802ba96:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	2208      	movs	r2, #8
 802ba9c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802ba9e:	e0de      	b.n	802bc5e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802baa0:	687b      	ldr	r3, [r7, #4]
 802baa2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802baa6:	b29b      	uxth	r3, r3
 802baa8:	4619      	mov	r1, r3
 802baaa:	6878      	ldr	r0, [r7, #4]
 802baac:	f000 fc2c 	bl	802c308 <USBH_SetCfg>
 802bab0:	4603      	mov	r3, r0
 802bab2:	2b00      	cmp	r3, #0
 802bab4:	f040 80d5 	bne.w	802bc62 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802bab8:	687b      	ldr	r3, [r7, #4]
 802baba:	2209      	movs	r2, #9
 802babc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802babe:	e0d0      	b.n	802bc62 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802bac0:	687b      	ldr	r3, [r7, #4]
 802bac2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802bac6:	f003 0320 	and.w	r3, r3, #32
 802baca:	2b00      	cmp	r3, #0
 802bacc:	d016      	beq.n	802bafc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802bace:	2101      	movs	r1, #1
 802bad0:	6878      	ldr	r0, [r7, #4]
 802bad2:	f000 fc3c 	bl	802c34e <USBH_SetFeature>
 802bad6:	4603      	mov	r3, r0
 802bad8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bada:	7bbb      	ldrb	r3, [r7, #14]
 802badc:	b2db      	uxtb	r3, r3
 802bade:	2b00      	cmp	r3, #0
 802bae0:	d103      	bne.n	802baea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802bae2:	687b      	ldr	r3, [r7, #4]
 802bae4:	220a      	movs	r2, #10
 802bae6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bae8:	e0bd      	b.n	802bc66 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802baea:	7bbb      	ldrb	r3, [r7, #14]
 802baec:	b2db      	uxtb	r3, r3
 802baee:	2b03      	cmp	r3, #3
 802baf0:	f040 80b9 	bne.w	802bc66 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802baf4:	687b      	ldr	r3, [r7, #4]
 802baf6:	220a      	movs	r2, #10
 802baf8:	701a      	strb	r2, [r3, #0]
      break;
 802bafa:	e0b4      	b.n	802bc66 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802bafc:	687b      	ldr	r3, [r7, #4]
 802bafe:	220a      	movs	r2, #10
 802bb00:	701a      	strb	r2, [r3, #0]
      break;
 802bb02:	e0b0      	b.n	802bc66 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802bb04:	687b      	ldr	r3, [r7, #4]
 802bb06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802bb0a:	2b00      	cmp	r3, #0
 802bb0c:	f000 80ad 	beq.w	802bc6a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	2200      	movs	r2, #0
 802bb14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bb18:	2300      	movs	r3, #0
 802bb1a:	73fb      	strb	r3, [r7, #15]
 802bb1c:	e016      	b.n	802bb4c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802bb1e:	7bfa      	ldrb	r2, [r7, #15]
 802bb20:	687b      	ldr	r3, [r7, #4]
 802bb22:	32de      	adds	r2, #222	; 0xde
 802bb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802bb28:	791a      	ldrb	r2, [r3, #4]
 802bb2a:	687b      	ldr	r3, [r7, #4]
 802bb2c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802bb30:	429a      	cmp	r2, r3
 802bb32:	d108      	bne.n	802bb46 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802bb34:	7bfa      	ldrb	r2, [r7, #15]
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	32de      	adds	r2, #222	; 0xde
 802bb3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bb3e:	687b      	ldr	r3, [r7, #4]
 802bb40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802bb44:	e005      	b.n	802bb52 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bb46:	7bfb      	ldrb	r3, [r7, #15]
 802bb48:	3301      	adds	r3, #1
 802bb4a:	73fb      	strb	r3, [r7, #15]
 802bb4c:	7bfb      	ldrb	r3, [r7, #15]
 802bb4e:	2b00      	cmp	r3, #0
 802bb50:	d0e5      	beq.n	802bb1e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802bb52:	687b      	ldr	r3, [r7, #4]
 802bb54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb58:	2b00      	cmp	r3, #0
 802bb5a:	d016      	beq.n	802bb8a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802bb5c:	687b      	ldr	r3, [r7, #4]
 802bb5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb62:	689b      	ldr	r3, [r3, #8]
 802bb64:	6878      	ldr	r0, [r7, #4]
 802bb66:	4798      	blx	r3
 802bb68:	4603      	mov	r3, r0
 802bb6a:	2b00      	cmp	r3, #0
 802bb6c:	d109      	bne.n	802bb82 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802bb6e:	687b      	ldr	r3, [r7, #4]
 802bb70:	2206      	movs	r2, #6
 802bb72:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802bb74:	687b      	ldr	r3, [r7, #4]
 802bb76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bb7a:	2103      	movs	r1, #3
 802bb7c:	6878      	ldr	r0, [r7, #4]
 802bb7e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bb80:	e073      	b.n	802bc6a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802bb82:	687b      	ldr	r3, [r7, #4]
 802bb84:	220d      	movs	r2, #13
 802bb86:	701a      	strb	r2, [r3, #0]
      break;
 802bb88:	e06f      	b.n	802bc6a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802bb8a:	687b      	ldr	r3, [r7, #4]
 802bb8c:	220d      	movs	r2, #13
 802bb8e:	701a      	strb	r2, [r3, #0]
      break;
 802bb90:	e06b      	b.n	802bc6a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802bb92:	687b      	ldr	r3, [r7, #4]
 802bb94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb98:	2b00      	cmp	r3, #0
 802bb9a:	d017      	beq.n	802bbcc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802bb9c:	687b      	ldr	r3, [r7, #4]
 802bb9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bba2:	691b      	ldr	r3, [r3, #16]
 802bba4:	6878      	ldr	r0, [r7, #4]
 802bba6:	4798      	blx	r3
 802bba8:	4603      	mov	r3, r0
 802bbaa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bbac:	7bbb      	ldrb	r3, [r7, #14]
 802bbae:	b2db      	uxtb	r3, r3
 802bbb0:	2b00      	cmp	r3, #0
 802bbb2:	d103      	bne.n	802bbbc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802bbb4:	687b      	ldr	r3, [r7, #4]
 802bbb6:	220b      	movs	r2, #11
 802bbb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bbba:	e058      	b.n	802bc6e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802bbbc:	7bbb      	ldrb	r3, [r7, #14]
 802bbbe:	b2db      	uxtb	r3, r3
 802bbc0:	2b02      	cmp	r3, #2
 802bbc2:	d154      	bne.n	802bc6e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802bbc4:	687b      	ldr	r3, [r7, #4]
 802bbc6:	220d      	movs	r2, #13
 802bbc8:	701a      	strb	r2, [r3, #0]
      break;
 802bbca:	e050      	b.n	802bc6e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802bbcc:	687b      	ldr	r3, [r7, #4]
 802bbce:	220d      	movs	r2, #13
 802bbd0:	701a      	strb	r2, [r3, #0]
      break;
 802bbd2:	e04c      	b.n	802bc6e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802bbd4:	687b      	ldr	r3, [r7, #4]
 802bbd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bbda:	2b00      	cmp	r3, #0
 802bbdc:	d049      	beq.n	802bc72 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bbe4:	695b      	ldr	r3, [r3, #20]
 802bbe6:	6878      	ldr	r0, [r7, #4]
 802bbe8:	4798      	blx	r3
      }
      break;
 802bbea:	e042      	b.n	802bc72 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	2200      	movs	r2, #0
 802bbf0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802bbf4:	6878      	ldr	r0, [r7, #4]
 802bbf6:	f7ff fd67 	bl	802b6c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802bbfa:	687b      	ldr	r3, [r7, #4]
 802bbfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bc00:	2b00      	cmp	r3, #0
 802bc02:	d009      	beq.n	802bc18 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802bc04:	687b      	ldr	r3, [r7, #4]
 802bc06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bc0a:	68db      	ldr	r3, [r3, #12]
 802bc0c:	6878      	ldr	r0, [r7, #4]
 802bc0e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802bc10:	687b      	ldr	r3, [r7, #4]
 802bc12:	2200      	movs	r2, #0
 802bc14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802bc18:	687b      	ldr	r3, [r7, #4]
 802bc1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc1e:	2b00      	cmp	r3, #0
 802bc20:	d005      	beq.n	802bc2e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802bc22:	687b      	ldr	r3, [r7, #4]
 802bc24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc28:	2105      	movs	r1, #5
 802bc2a:	6878      	ldr	r0, [r7, #4]
 802bc2c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802bc2e:	687b      	ldr	r3, [r7, #4]
 802bc30:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802bc34:	b2db      	uxtb	r3, r3
 802bc36:	2b01      	cmp	r3, #1
 802bc38:	d107      	bne.n	802bc4a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802bc3a:	687b      	ldr	r3, [r7, #4]
 802bc3c:	2200      	movs	r2, #0
 802bc3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802bc42:	6878      	ldr	r0, [r7, #4]
 802bc44:	f7ff fe20 	bl	802b888 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bc48:	e014      	b.n	802bc74 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802bc4a:	6878      	ldr	r0, [r7, #4]
 802bc4c:	f001 faaa 	bl	802d1a4 <USBH_LL_Start>
      break;
 802bc50:	e010      	b.n	802bc74 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802bc52:	bf00      	nop
 802bc54:	e00e      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc56:	bf00      	nop
 802bc58:	e00c      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc5a:	bf00      	nop
 802bc5c:	e00a      	b.n	802bc74 <USBH_Process+0x3cc>
    break;
 802bc5e:	bf00      	nop
 802bc60:	e008      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc62:	bf00      	nop
 802bc64:	e006      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc66:	bf00      	nop
 802bc68:	e004      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc6a:	bf00      	nop
 802bc6c:	e002      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc6e:	bf00      	nop
 802bc70:	e000      	b.n	802bc74 <USBH_Process+0x3cc>
      break;
 802bc72:	bf00      	nop
  }
  return USBH_OK;
 802bc74:	2300      	movs	r3, #0
}
 802bc76:	4618      	mov	r0, r3
 802bc78:	3710      	adds	r7, #16
 802bc7a:	46bd      	mov	sp, r7
 802bc7c:	bd80      	pop	{r7, pc}
 802bc7e:	bf00      	nop

0802bc80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802bc80:	b580      	push	{r7, lr}
 802bc82:	b088      	sub	sp, #32
 802bc84:	af04      	add	r7, sp, #16
 802bc86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802bc88:	2301      	movs	r3, #1
 802bc8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802bc8c:	2301      	movs	r3, #1
 802bc8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802bc90:	687b      	ldr	r3, [r7, #4]
 802bc92:	785b      	ldrb	r3, [r3, #1]
 802bc94:	2b07      	cmp	r3, #7
 802bc96:	f200 81c1 	bhi.w	802c01c <USBH_HandleEnum+0x39c>
 802bc9a:	a201      	add	r2, pc, #4	; (adr r2, 802bca0 <USBH_HandleEnum+0x20>)
 802bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bca0:	0802bcc1 	.word	0x0802bcc1
 802bca4:	0802bd7f 	.word	0x0802bd7f
 802bca8:	0802bde9 	.word	0x0802bde9
 802bcac:	0802be77 	.word	0x0802be77
 802bcb0:	0802bee1 	.word	0x0802bee1
 802bcb4:	0802bf51 	.word	0x0802bf51
 802bcb8:	0802bf97 	.word	0x0802bf97
 802bcbc:	0802bfdd 	.word	0x0802bfdd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802bcc0:	2108      	movs	r1, #8
 802bcc2:	6878      	ldr	r0, [r7, #4]
 802bcc4:	f000 fa50 	bl	802c168 <USBH_Get_DevDesc>
 802bcc8:	4603      	mov	r3, r0
 802bcca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bccc:	7bbb      	ldrb	r3, [r7, #14]
 802bcce:	2b00      	cmp	r3, #0
 802bcd0:	d130      	bne.n	802bd34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802bcd2:	687b      	ldr	r3, [r7, #4]
 802bcd4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802bcd8:	687b      	ldr	r3, [r7, #4]
 802bcda:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	2201      	movs	r2, #1
 802bce0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bce2:	687b      	ldr	r3, [r7, #4]
 802bce4:	7919      	ldrb	r1, [r3, #4]
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bcec:	687b      	ldr	r3, [r7, #4]
 802bcee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bcf2:	687a      	ldr	r2, [r7, #4]
 802bcf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bcf6:	b292      	uxth	r2, r2
 802bcf8:	9202      	str	r2, [sp, #8]
 802bcfa:	2200      	movs	r2, #0
 802bcfc:	9201      	str	r2, [sp, #4]
 802bcfe:	9300      	str	r3, [sp, #0]
 802bd00:	4603      	mov	r3, r0
 802bd02:	2280      	movs	r2, #128	; 0x80
 802bd04:	6878      	ldr	r0, [r7, #4]
 802bd06:	f001 f865 	bl	802cdd4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bd0a:	687b      	ldr	r3, [r7, #4]
 802bd0c:	7959      	ldrb	r1, [r3, #5]
 802bd0e:	687b      	ldr	r3, [r7, #4]
 802bd10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bd14:	687b      	ldr	r3, [r7, #4]
 802bd16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bd1a:	687a      	ldr	r2, [r7, #4]
 802bd1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bd1e:	b292      	uxth	r2, r2
 802bd20:	9202      	str	r2, [sp, #8]
 802bd22:	2200      	movs	r2, #0
 802bd24:	9201      	str	r2, [sp, #4]
 802bd26:	9300      	str	r3, [sp, #0]
 802bd28:	4603      	mov	r3, r0
 802bd2a:	2200      	movs	r2, #0
 802bd2c:	6878      	ldr	r0, [r7, #4]
 802bd2e:	f001 f851 	bl	802cdd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bd32:	e175      	b.n	802c020 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bd34:	7bbb      	ldrb	r3, [r7, #14]
 802bd36:	2b03      	cmp	r3, #3
 802bd38:	f040 8172 	bne.w	802c020 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802bd3c:	687b      	ldr	r3, [r7, #4]
 802bd3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bd42:	3301      	adds	r3, #1
 802bd44:	b2da      	uxtb	r2, r3
 802bd46:	687b      	ldr	r3, [r7, #4]
 802bd48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bd4c:	687b      	ldr	r3, [r7, #4]
 802bd4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bd52:	2b03      	cmp	r3, #3
 802bd54:	d903      	bls.n	802bd5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802bd56:	687b      	ldr	r3, [r7, #4]
 802bd58:	220d      	movs	r2, #13
 802bd5a:	701a      	strb	r2, [r3, #0]
      break;
 802bd5c:	e160      	b.n	802c020 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bd5e:	687b      	ldr	r3, [r7, #4]
 802bd60:	795b      	ldrb	r3, [r3, #5]
 802bd62:	4619      	mov	r1, r3
 802bd64:	6878      	ldr	r0, [r7, #4]
 802bd66:	f001 f885 	bl	802ce74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bd6a:	687b      	ldr	r3, [r7, #4]
 802bd6c:	791b      	ldrb	r3, [r3, #4]
 802bd6e:	4619      	mov	r1, r3
 802bd70:	6878      	ldr	r0, [r7, #4]
 802bd72:	f001 f87f 	bl	802ce74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802bd76:	687b      	ldr	r3, [r7, #4]
 802bd78:	2200      	movs	r2, #0
 802bd7a:	701a      	strb	r2, [r3, #0]
      break;
 802bd7c:	e150      	b.n	802c020 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802bd7e:	2112      	movs	r1, #18
 802bd80:	6878      	ldr	r0, [r7, #4]
 802bd82:	f000 f9f1 	bl	802c168 <USBH_Get_DevDesc>
 802bd86:	4603      	mov	r3, r0
 802bd88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bd8a:	7bbb      	ldrb	r3, [r7, #14]
 802bd8c:	2b00      	cmp	r3, #0
 802bd8e:	d103      	bne.n	802bd98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802bd90:	687b      	ldr	r3, [r7, #4]
 802bd92:	2202      	movs	r2, #2
 802bd94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bd96:	e145      	b.n	802c024 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bd98:	7bbb      	ldrb	r3, [r7, #14]
 802bd9a:	2b03      	cmp	r3, #3
 802bd9c:	f040 8142 	bne.w	802c024 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802bda0:	687b      	ldr	r3, [r7, #4]
 802bda2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bda6:	3301      	adds	r3, #1
 802bda8:	b2da      	uxtb	r2, r3
 802bdaa:	687b      	ldr	r3, [r7, #4]
 802bdac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bdb6:	2b03      	cmp	r3, #3
 802bdb8:	d903      	bls.n	802bdc2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802bdba:	687b      	ldr	r3, [r7, #4]
 802bdbc:	220d      	movs	r2, #13
 802bdbe:	701a      	strb	r2, [r3, #0]
      break;
 802bdc0:	e130      	b.n	802c024 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bdc2:	687b      	ldr	r3, [r7, #4]
 802bdc4:	795b      	ldrb	r3, [r3, #5]
 802bdc6:	4619      	mov	r1, r3
 802bdc8:	6878      	ldr	r0, [r7, #4]
 802bdca:	f001 f853 	bl	802ce74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	791b      	ldrb	r3, [r3, #4]
 802bdd2:	4619      	mov	r1, r3
 802bdd4:	6878      	ldr	r0, [r7, #4]
 802bdd6:	f001 f84d 	bl	802ce74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bdda:	687b      	ldr	r3, [r7, #4]
 802bddc:	2200      	movs	r2, #0
 802bdde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bde0:	687b      	ldr	r3, [r7, #4]
 802bde2:	2200      	movs	r2, #0
 802bde4:	701a      	strb	r2, [r3, #0]
      break;
 802bde6:	e11d      	b.n	802c024 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802bde8:	2101      	movs	r1, #1
 802bdea:	6878      	ldr	r0, [r7, #4]
 802bdec:	f000 fa68 	bl	802c2c0 <USBH_SetAddress>
 802bdf0:	4603      	mov	r3, r0
 802bdf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bdf4:	7bbb      	ldrb	r3, [r7, #14]
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d132      	bne.n	802be60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802bdfa:	2002      	movs	r0, #2
 802bdfc:	f001 fb36 	bl	802d46c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802be00:	687b      	ldr	r3, [r7, #4]
 802be02:	2201      	movs	r2, #1
 802be04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802be08:	687b      	ldr	r3, [r7, #4]
 802be0a:	2203      	movs	r2, #3
 802be0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802be0e:	687b      	ldr	r3, [r7, #4]
 802be10:	7919      	ldrb	r1, [r3, #4]
 802be12:	687b      	ldr	r3, [r7, #4]
 802be14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802be18:	687b      	ldr	r3, [r7, #4]
 802be1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802be1e:	687a      	ldr	r2, [r7, #4]
 802be20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802be22:	b292      	uxth	r2, r2
 802be24:	9202      	str	r2, [sp, #8]
 802be26:	2200      	movs	r2, #0
 802be28:	9201      	str	r2, [sp, #4]
 802be2a:	9300      	str	r3, [sp, #0]
 802be2c:	4603      	mov	r3, r0
 802be2e:	2280      	movs	r2, #128	; 0x80
 802be30:	6878      	ldr	r0, [r7, #4]
 802be32:	f000 ffcf 	bl	802cdd4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802be36:	687b      	ldr	r3, [r7, #4]
 802be38:	7959      	ldrb	r1, [r3, #5]
 802be3a:	687b      	ldr	r3, [r7, #4]
 802be3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802be40:	687b      	ldr	r3, [r7, #4]
 802be42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802be46:	687a      	ldr	r2, [r7, #4]
 802be48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802be4a:	b292      	uxth	r2, r2
 802be4c:	9202      	str	r2, [sp, #8]
 802be4e:	2200      	movs	r2, #0
 802be50:	9201      	str	r2, [sp, #4]
 802be52:	9300      	str	r3, [sp, #0]
 802be54:	4603      	mov	r3, r0
 802be56:	2200      	movs	r2, #0
 802be58:	6878      	ldr	r0, [r7, #4]
 802be5a:	f000 ffbb 	bl	802cdd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802be5e:	e0e3      	b.n	802c028 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802be60:	7bbb      	ldrb	r3, [r7, #14]
 802be62:	2b03      	cmp	r3, #3
 802be64:	f040 80e0 	bne.w	802c028 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802be68:	687b      	ldr	r3, [r7, #4]
 802be6a:	220d      	movs	r2, #13
 802be6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802be6e:	687b      	ldr	r3, [r7, #4]
 802be70:	2200      	movs	r2, #0
 802be72:	705a      	strb	r2, [r3, #1]
      break;
 802be74:	e0d8      	b.n	802c028 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802be76:	2109      	movs	r1, #9
 802be78:	6878      	ldr	r0, [r7, #4]
 802be7a:	f000 f99d 	bl	802c1b8 <USBH_Get_CfgDesc>
 802be7e:	4603      	mov	r3, r0
 802be80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802be82:	7bbb      	ldrb	r3, [r7, #14]
 802be84:	2b00      	cmp	r3, #0
 802be86:	d103      	bne.n	802be90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802be88:	687b      	ldr	r3, [r7, #4]
 802be8a:	2204      	movs	r2, #4
 802be8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802be8e:	e0cd      	b.n	802c02c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802be90:	7bbb      	ldrb	r3, [r7, #14]
 802be92:	2b03      	cmp	r3, #3
 802be94:	f040 80ca 	bne.w	802c02c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802be98:	687b      	ldr	r3, [r7, #4]
 802be9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802be9e:	3301      	adds	r3, #1
 802bea0:	b2da      	uxtb	r2, r3
 802bea2:	687b      	ldr	r3, [r7, #4]
 802bea4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bea8:	687b      	ldr	r3, [r7, #4]
 802beaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802beae:	2b03      	cmp	r3, #3
 802beb0:	d903      	bls.n	802beba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	220d      	movs	r2, #13
 802beb6:	701a      	strb	r2, [r3, #0]
      break;
 802beb8:	e0b8      	b.n	802c02c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802beba:	687b      	ldr	r3, [r7, #4]
 802bebc:	795b      	ldrb	r3, [r3, #5]
 802bebe:	4619      	mov	r1, r3
 802bec0:	6878      	ldr	r0, [r7, #4]
 802bec2:	f000 ffd7 	bl	802ce74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bec6:	687b      	ldr	r3, [r7, #4]
 802bec8:	791b      	ldrb	r3, [r3, #4]
 802beca:	4619      	mov	r1, r3
 802becc:	6878      	ldr	r0, [r7, #4]
 802bece:	f000 ffd1 	bl	802ce74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bed2:	687b      	ldr	r3, [r7, #4]
 802bed4:	2200      	movs	r2, #0
 802bed6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bed8:	687b      	ldr	r3, [r7, #4]
 802beda:	2200      	movs	r2, #0
 802bedc:	701a      	strb	r2, [r3, #0]
      break;
 802bede:	e0a5      	b.n	802c02c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802bee0:	687b      	ldr	r3, [r7, #4]
 802bee2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802bee6:	4619      	mov	r1, r3
 802bee8:	6878      	ldr	r0, [r7, #4]
 802beea:	f000 f965 	bl	802c1b8 <USBH_Get_CfgDesc>
 802beee:	4603      	mov	r3, r0
 802bef0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bef2:	7bbb      	ldrb	r3, [r7, #14]
 802bef4:	2b00      	cmp	r3, #0
 802bef6:	d103      	bne.n	802bf00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802bef8:	687b      	ldr	r3, [r7, #4]
 802befa:	2205      	movs	r2, #5
 802befc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802befe:	e097      	b.n	802c030 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bf00:	7bbb      	ldrb	r3, [r7, #14]
 802bf02:	2b03      	cmp	r3, #3
 802bf04:	f040 8094 	bne.w	802c030 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802bf08:	687b      	ldr	r3, [r7, #4]
 802bf0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bf0e:	3301      	adds	r3, #1
 802bf10:	b2da      	uxtb	r2, r3
 802bf12:	687b      	ldr	r3, [r7, #4]
 802bf14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bf18:	687b      	ldr	r3, [r7, #4]
 802bf1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bf1e:	2b03      	cmp	r3, #3
 802bf20:	d903      	bls.n	802bf2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802bf22:	687b      	ldr	r3, [r7, #4]
 802bf24:	220d      	movs	r2, #13
 802bf26:	701a      	strb	r2, [r3, #0]
      break;
 802bf28:	e082      	b.n	802c030 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bf2a:	687b      	ldr	r3, [r7, #4]
 802bf2c:	795b      	ldrb	r3, [r3, #5]
 802bf2e:	4619      	mov	r1, r3
 802bf30:	6878      	ldr	r0, [r7, #4]
 802bf32:	f000 ff9f 	bl	802ce74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bf36:	687b      	ldr	r3, [r7, #4]
 802bf38:	791b      	ldrb	r3, [r3, #4]
 802bf3a:	4619      	mov	r1, r3
 802bf3c:	6878      	ldr	r0, [r7, #4]
 802bf3e:	f000 ff99 	bl	802ce74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bf42:	687b      	ldr	r3, [r7, #4]
 802bf44:	2200      	movs	r2, #0
 802bf46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bf48:	687b      	ldr	r3, [r7, #4]
 802bf4a:	2200      	movs	r2, #0
 802bf4c:	701a      	strb	r2, [r3, #0]
      break;
 802bf4e:	e06f      	b.n	802c030 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802bf50:	687b      	ldr	r3, [r7, #4]
 802bf52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802bf56:	2b00      	cmp	r3, #0
 802bf58:	d019      	beq.n	802bf8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802bf5a:	687b      	ldr	r3, [r7, #4]
 802bf5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802bf60:	687b      	ldr	r3, [r7, #4]
 802bf62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802bf66:	23ff      	movs	r3, #255	; 0xff
 802bf68:	6878      	ldr	r0, [r7, #4]
 802bf6a:	f000 f949 	bl	802c200 <USBH_Get_StringDesc>
 802bf6e:	4603      	mov	r3, r0
 802bf70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bf72:	7bbb      	ldrb	r3, [r7, #14]
 802bf74:	2b00      	cmp	r3, #0
 802bf76:	d103      	bne.n	802bf80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bf78:	687b      	ldr	r3, [r7, #4]
 802bf7a:	2206      	movs	r2, #6
 802bf7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bf7e:	e059      	b.n	802c034 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bf80:	7bbb      	ldrb	r3, [r7, #14]
 802bf82:	2b03      	cmp	r3, #3
 802bf84:	d156      	bne.n	802c034 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bf86:	687b      	ldr	r3, [r7, #4]
 802bf88:	2206      	movs	r2, #6
 802bf8a:	705a      	strb	r2, [r3, #1]
      break;
 802bf8c:	e052      	b.n	802c034 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bf8e:	687b      	ldr	r3, [r7, #4]
 802bf90:	2206      	movs	r2, #6
 802bf92:	705a      	strb	r2, [r3, #1]
      break;
 802bf94:	e04e      	b.n	802c034 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802bf96:	687b      	ldr	r3, [r7, #4]
 802bf98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802bf9c:	2b00      	cmp	r3, #0
 802bf9e:	d019      	beq.n	802bfd4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bfa0:	687b      	ldr	r3, [r7, #4]
 802bfa2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802bfa6:	687b      	ldr	r3, [r7, #4]
 802bfa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bfac:	23ff      	movs	r3, #255	; 0xff
 802bfae:	6878      	ldr	r0, [r7, #4]
 802bfb0:	f000 f926 	bl	802c200 <USBH_Get_StringDesc>
 802bfb4:	4603      	mov	r3, r0
 802bfb6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bfb8:	7bbb      	ldrb	r3, [r7, #14]
 802bfba:	2b00      	cmp	r3, #0
 802bfbc:	d103      	bne.n	802bfc6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bfbe:	687b      	ldr	r3, [r7, #4]
 802bfc0:	2207      	movs	r2, #7
 802bfc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bfc4:	e038      	b.n	802c038 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bfc6:	7bbb      	ldrb	r3, [r7, #14]
 802bfc8:	2b03      	cmp	r3, #3
 802bfca:	d135      	bne.n	802c038 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bfcc:	687b      	ldr	r3, [r7, #4]
 802bfce:	2207      	movs	r2, #7
 802bfd0:	705a      	strb	r2, [r3, #1]
      break;
 802bfd2:	e031      	b.n	802c038 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bfd4:	687b      	ldr	r3, [r7, #4]
 802bfd6:	2207      	movs	r2, #7
 802bfd8:	705a      	strb	r2, [r3, #1]
      break;
 802bfda:	e02d      	b.n	802c038 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802bfe2:	2b00      	cmp	r3, #0
 802bfe4:	d017      	beq.n	802c016 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802bfec:	687b      	ldr	r3, [r7, #4]
 802bfee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bff2:	23ff      	movs	r3, #255	; 0xff
 802bff4:	6878      	ldr	r0, [r7, #4]
 802bff6:	f000 f903 	bl	802c200 <USBH_Get_StringDesc>
 802bffa:	4603      	mov	r3, r0
 802bffc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bffe:	7bbb      	ldrb	r3, [r7, #14]
 802c000:	2b00      	cmp	r3, #0
 802c002:	d102      	bne.n	802c00a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802c004:	2300      	movs	r3, #0
 802c006:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802c008:	e018      	b.n	802c03c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c00a:	7bbb      	ldrb	r3, [r7, #14]
 802c00c:	2b03      	cmp	r3, #3
 802c00e:	d115      	bne.n	802c03c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802c010:	2300      	movs	r3, #0
 802c012:	73fb      	strb	r3, [r7, #15]
      break;
 802c014:	e012      	b.n	802c03c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802c016:	2300      	movs	r3, #0
 802c018:	73fb      	strb	r3, [r7, #15]
      break;
 802c01a:	e00f      	b.n	802c03c <USBH_HandleEnum+0x3bc>

    default:
      break;
 802c01c:	bf00      	nop
 802c01e:	e00e      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c020:	bf00      	nop
 802c022:	e00c      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c024:	bf00      	nop
 802c026:	e00a      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c028:	bf00      	nop
 802c02a:	e008      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c02c:	bf00      	nop
 802c02e:	e006      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c030:	bf00      	nop
 802c032:	e004      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c034:	bf00      	nop
 802c036:	e002      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c038:	bf00      	nop
 802c03a:	e000      	b.n	802c03e <USBH_HandleEnum+0x3be>
      break;
 802c03c:	bf00      	nop
  }
  return Status;
 802c03e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c040:	4618      	mov	r0, r3
 802c042:	3710      	adds	r7, #16
 802c044:	46bd      	mov	sp, r7
 802c046:	bd80      	pop	{r7, pc}

0802c048 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802c048:	b480      	push	{r7}
 802c04a:	b083      	sub	sp, #12
 802c04c:	af00      	add	r7, sp, #0
 802c04e:	6078      	str	r0, [r7, #4]
 802c050:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802c052:	687b      	ldr	r3, [r7, #4]
 802c054:	683a      	ldr	r2, [r7, #0]
 802c056:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802c05a:	bf00      	nop
 802c05c:	370c      	adds	r7, #12
 802c05e:	46bd      	mov	sp, r7
 802c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c064:	4770      	bx	lr

0802c066 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802c066:	b580      	push	{r7, lr}
 802c068:	b082      	sub	sp, #8
 802c06a:	af00      	add	r7, sp, #0
 802c06c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c074:	1c5a      	adds	r2, r3, #1
 802c076:	687b      	ldr	r3, [r7, #4]
 802c078:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802c07c:	6878      	ldr	r0, [r7, #4]
 802c07e:	f000 f804 	bl	802c08a <USBH_HandleSof>
}
 802c082:	bf00      	nop
 802c084:	3708      	adds	r7, #8
 802c086:	46bd      	mov	sp, r7
 802c088:	bd80      	pop	{r7, pc}

0802c08a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802c08a:	b580      	push	{r7, lr}
 802c08c:	b082      	sub	sp, #8
 802c08e:	af00      	add	r7, sp, #0
 802c090:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802c092:	687b      	ldr	r3, [r7, #4]
 802c094:	781b      	ldrb	r3, [r3, #0]
 802c096:	b2db      	uxtb	r3, r3
 802c098:	2b0b      	cmp	r3, #11
 802c09a:	d10a      	bne.n	802c0b2 <USBH_HandleSof+0x28>
 802c09c:	687b      	ldr	r3, [r7, #4]
 802c09e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c0a2:	2b00      	cmp	r3, #0
 802c0a4:	d005      	beq.n	802c0b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802c0a6:	687b      	ldr	r3, [r7, #4]
 802c0a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c0ac:	699b      	ldr	r3, [r3, #24]
 802c0ae:	6878      	ldr	r0, [r7, #4]
 802c0b0:	4798      	blx	r3
  }
}
 802c0b2:	bf00      	nop
 802c0b4:	3708      	adds	r7, #8
 802c0b6:	46bd      	mov	sp, r7
 802c0b8:	bd80      	pop	{r7, pc}

0802c0ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802c0ba:	b480      	push	{r7}
 802c0bc:	b083      	sub	sp, #12
 802c0be:	af00      	add	r7, sp, #0
 802c0c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802c0c2:	687b      	ldr	r3, [r7, #4]
 802c0c4:	2201      	movs	r2, #1
 802c0c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802c0ca:	bf00      	nop
}
 802c0cc:	370c      	adds	r7, #12
 802c0ce:	46bd      	mov	sp, r7
 802c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0d4:	4770      	bx	lr

0802c0d6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802c0d6:	b480      	push	{r7}
 802c0d8:	b083      	sub	sp, #12
 802c0da:	af00      	add	r7, sp, #0
 802c0dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802c0de:	687b      	ldr	r3, [r7, #4]
 802c0e0:	2200      	movs	r2, #0
 802c0e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802c0e6:	bf00      	nop
}
 802c0e8:	370c      	adds	r7, #12
 802c0ea:	46bd      	mov	sp, r7
 802c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0f0:	4770      	bx	lr

0802c0f2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802c0f2:	b480      	push	{r7}
 802c0f4:	b083      	sub	sp, #12
 802c0f6:	af00      	add	r7, sp, #0
 802c0f8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802c0fa:	687b      	ldr	r3, [r7, #4]
 802c0fc:	2201      	movs	r2, #1
 802c0fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c102:	687b      	ldr	r3, [r7, #4]
 802c104:	2200      	movs	r2, #0
 802c106:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c10a:	687b      	ldr	r3, [r7, #4]
 802c10c:	2200      	movs	r2, #0
 802c10e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c112:	2300      	movs	r3, #0
}
 802c114:	4618      	mov	r0, r3
 802c116:	370c      	adds	r7, #12
 802c118:	46bd      	mov	sp, r7
 802c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c11e:	4770      	bx	lr

0802c120 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802c120:	b580      	push	{r7, lr}
 802c122:	b082      	sub	sp, #8
 802c124:	af00      	add	r7, sp, #0
 802c126:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802c128:	687b      	ldr	r3, [r7, #4]
 802c12a:	2201      	movs	r2, #1
 802c12c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802c130:	687b      	ldr	r3, [r7, #4]
 802c132:	2200      	movs	r2, #0
 802c134:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802c138:	687b      	ldr	r3, [r7, #4]
 802c13a:	2200      	movs	r2, #0
 802c13c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802c140:	6878      	ldr	r0, [r7, #4]
 802c142:	f001 f84a 	bl	802d1da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c146:	687b      	ldr	r3, [r7, #4]
 802c148:	791b      	ldrb	r3, [r3, #4]
 802c14a:	4619      	mov	r1, r3
 802c14c:	6878      	ldr	r0, [r7, #4]
 802c14e:	f000 fe91 	bl	802ce74 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c152:	687b      	ldr	r3, [r7, #4]
 802c154:	795b      	ldrb	r3, [r3, #5]
 802c156:	4619      	mov	r1, r3
 802c158:	6878      	ldr	r0, [r7, #4]
 802c15a:	f000 fe8b 	bl	802ce74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c15e:	2300      	movs	r3, #0
}
 802c160:	4618      	mov	r0, r3
 802c162:	3708      	adds	r7, #8
 802c164:	46bd      	mov	sp, r7
 802c166:	bd80      	pop	{r7, pc}

0802c168 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802c168:	b580      	push	{r7, lr}
 802c16a:	b086      	sub	sp, #24
 802c16c:	af02      	add	r7, sp, #8
 802c16e:	6078      	str	r0, [r7, #4]
 802c170:	460b      	mov	r3, r1
 802c172:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802c174:	687b      	ldr	r3, [r7, #4]
 802c176:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c17a:	78fb      	ldrb	r3, [r7, #3]
 802c17c:	b29b      	uxth	r3, r3
 802c17e:	9300      	str	r3, [sp, #0]
 802c180:	4613      	mov	r3, r2
 802c182:	f44f 7280 	mov.w	r2, #256	; 0x100
 802c186:	2100      	movs	r1, #0
 802c188:	6878      	ldr	r0, [r7, #4]
 802c18a:	f000 f864 	bl	802c256 <USBH_GetDescriptor>
 802c18e:	4603      	mov	r3, r0
 802c190:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802c192:	7bfb      	ldrb	r3, [r7, #15]
 802c194:	2b00      	cmp	r3, #0
 802c196:	d10a      	bne.n	802c1ae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802c198:	687b      	ldr	r3, [r7, #4]
 802c19a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802c19e:	687b      	ldr	r3, [r7, #4]
 802c1a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c1a4:	78fa      	ldrb	r2, [r7, #3]
 802c1a6:	b292      	uxth	r2, r2
 802c1a8:	4619      	mov	r1, r3
 802c1aa:	f000 f918 	bl	802c3de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 802c1b0:	4618      	mov	r0, r3
 802c1b2:	3710      	adds	r7, #16
 802c1b4:	46bd      	mov	sp, r7
 802c1b6:	bd80      	pop	{r7, pc}

0802c1b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802c1b8:	b580      	push	{r7, lr}
 802c1ba:	b086      	sub	sp, #24
 802c1bc:	af02      	add	r7, sp, #8
 802c1be:	6078      	str	r0, [r7, #4]
 802c1c0:	460b      	mov	r3, r1
 802c1c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802c1c4:	687b      	ldr	r3, [r7, #4]
 802c1c6:	331c      	adds	r3, #28
 802c1c8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802c1ca:	887b      	ldrh	r3, [r7, #2]
 802c1cc:	9300      	str	r3, [sp, #0]
 802c1ce:	68bb      	ldr	r3, [r7, #8]
 802c1d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802c1d4:	2100      	movs	r1, #0
 802c1d6:	6878      	ldr	r0, [r7, #4]
 802c1d8:	f000 f83d 	bl	802c256 <USBH_GetDescriptor>
 802c1dc:	4603      	mov	r3, r0
 802c1de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802c1e0:	7bfb      	ldrb	r3, [r7, #15]
 802c1e2:	2b00      	cmp	r3, #0
 802c1e4:	d107      	bne.n	802c1f6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802c1e6:	887b      	ldrh	r3, [r7, #2]
 802c1e8:	461a      	mov	r2, r3
 802c1ea:	68b9      	ldr	r1, [r7, #8]
 802c1ec:	6878      	ldr	r0, [r7, #4]
 802c1ee:	f000 f987 	bl	802c500 <USBH_ParseCfgDesc>
 802c1f2:	4603      	mov	r3, r0
 802c1f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 802c1f8:	4618      	mov	r0, r3
 802c1fa:	3710      	adds	r7, #16
 802c1fc:	46bd      	mov	sp, r7
 802c1fe:	bd80      	pop	{r7, pc}

0802c200 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802c200:	b580      	push	{r7, lr}
 802c202:	b088      	sub	sp, #32
 802c204:	af02      	add	r7, sp, #8
 802c206:	60f8      	str	r0, [r7, #12]
 802c208:	607a      	str	r2, [r7, #4]
 802c20a:	461a      	mov	r2, r3
 802c20c:	460b      	mov	r3, r1
 802c20e:	72fb      	strb	r3, [r7, #11]
 802c210:	4613      	mov	r3, r2
 802c212:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802c214:	7afb      	ldrb	r3, [r7, #11]
 802c216:	b29b      	uxth	r3, r3
 802c218:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802c21c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802c21e:	68fb      	ldr	r3, [r7, #12]
 802c220:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c224:	893b      	ldrh	r3, [r7, #8]
 802c226:	9300      	str	r3, [sp, #0]
 802c228:	460b      	mov	r3, r1
 802c22a:	2100      	movs	r1, #0
 802c22c:	68f8      	ldr	r0, [r7, #12]
 802c22e:	f000 f812 	bl	802c256 <USBH_GetDescriptor>
 802c232:	4603      	mov	r3, r0
 802c234:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802c236:	7dfb      	ldrb	r3, [r7, #23]
 802c238:	2b00      	cmp	r3, #0
 802c23a:	d107      	bne.n	802c24c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802c23c:	68fb      	ldr	r3, [r7, #12]
 802c23e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c242:	893a      	ldrh	r2, [r7, #8]
 802c244:	6879      	ldr	r1, [r7, #4]
 802c246:	4618      	mov	r0, r3
 802c248:	f000 fb24 	bl	802c894 <USBH_ParseStringDesc>
  }

  return status;
 802c24c:	7dfb      	ldrb	r3, [r7, #23]
}
 802c24e:	4618      	mov	r0, r3
 802c250:	3718      	adds	r7, #24
 802c252:	46bd      	mov	sp, r7
 802c254:	bd80      	pop	{r7, pc}

0802c256 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802c256:	b580      	push	{r7, lr}
 802c258:	b084      	sub	sp, #16
 802c25a:	af00      	add	r7, sp, #0
 802c25c:	60f8      	str	r0, [r7, #12]
 802c25e:	607b      	str	r3, [r7, #4]
 802c260:	460b      	mov	r3, r1
 802c262:	72fb      	strb	r3, [r7, #11]
 802c264:	4613      	mov	r3, r2
 802c266:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802c268:	68fb      	ldr	r3, [r7, #12]
 802c26a:	789b      	ldrb	r3, [r3, #2]
 802c26c:	2b01      	cmp	r3, #1
 802c26e:	d11c      	bne.n	802c2aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802c270:	7afb      	ldrb	r3, [r7, #11]
 802c272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c276:	b2da      	uxtb	r2, r3
 802c278:	68fb      	ldr	r3, [r7, #12]
 802c27a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802c27c:	68fb      	ldr	r3, [r7, #12]
 802c27e:	2206      	movs	r2, #6
 802c280:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802c282:	68fb      	ldr	r3, [r7, #12]
 802c284:	893a      	ldrh	r2, [r7, #8]
 802c286:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802c288:	893b      	ldrh	r3, [r7, #8]
 802c28a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c28e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c292:	d104      	bne.n	802c29e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802c294:	68fb      	ldr	r3, [r7, #12]
 802c296:	f240 4209 	movw	r2, #1033	; 0x409
 802c29a:	829a      	strh	r2, [r3, #20]
 802c29c:	e002      	b.n	802c2a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802c29e:	68fb      	ldr	r3, [r7, #12]
 802c2a0:	2200      	movs	r2, #0
 802c2a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802c2a4:	68fb      	ldr	r3, [r7, #12]
 802c2a6:	8b3a      	ldrh	r2, [r7, #24]
 802c2a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802c2aa:	8b3b      	ldrh	r3, [r7, #24]
 802c2ac:	461a      	mov	r2, r3
 802c2ae:	6879      	ldr	r1, [r7, #4]
 802c2b0:	68f8      	ldr	r0, [r7, #12]
 802c2b2:	f000 fb3d 	bl	802c930 <USBH_CtlReq>
 802c2b6:	4603      	mov	r3, r0
}
 802c2b8:	4618      	mov	r0, r3
 802c2ba:	3710      	adds	r7, #16
 802c2bc:	46bd      	mov	sp, r7
 802c2be:	bd80      	pop	{r7, pc}

0802c2c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802c2c0:	b580      	push	{r7, lr}
 802c2c2:	b082      	sub	sp, #8
 802c2c4:	af00      	add	r7, sp, #0
 802c2c6:	6078      	str	r0, [r7, #4]
 802c2c8:	460b      	mov	r3, r1
 802c2ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c2cc:	687b      	ldr	r3, [r7, #4]
 802c2ce:	789b      	ldrb	r3, [r3, #2]
 802c2d0:	2b01      	cmp	r3, #1
 802c2d2:	d10f      	bne.n	802c2f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802c2d4:	687b      	ldr	r3, [r7, #4]
 802c2d6:	2200      	movs	r2, #0
 802c2d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802c2da:	687b      	ldr	r3, [r7, #4]
 802c2dc:	2205      	movs	r2, #5
 802c2de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802c2e0:	78fb      	ldrb	r3, [r7, #3]
 802c2e2:	b29a      	uxth	r2, r3
 802c2e4:	687b      	ldr	r3, [r7, #4]
 802c2e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c2e8:	687b      	ldr	r3, [r7, #4]
 802c2ea:	2200      	movs	r2, #0
 802c2ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c2ee:	687b      	ldr	r3, [r7, #4]
 802c2f0:	2200      	movs	r2, #0
 802c2f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c2f4:	2200      	movs	r2, #0
 802c2f6:	2100      	movs	r1, #0
 802c2f8:	6878      	ldr	r0, [r7, #4]
 802c2fa:	f000 fb19 	bl	802c930 <USBH_CtlReq>
 802c2fe:	4603      	mov	r3, r0
}
 802c300:	4618      	mov	r0, r3
 802c302:	3708      	adds	r7, #8
 802c304:	46bd      	mov	sp, r7
 802c306:	bd80      	pop	{r7, pc}

0802c308 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802c308:	b580      	push	{r7, lr}
 802c30a:	b082      	sub	sp, #8
 802c30c:	af00      	add	r7, sp, #0
 802c30e:	6078      	str	r0, [r7, #4]
 802c310:	460b      	mov	r3, r1
 802c312:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	789b      	ldrb	r3, [r3, #2]
 802c318:	2b01      	cmp	r3, #1
 802c31a:	d10e      	bne.n	802c33a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c31c:	687b      	ldr	r3, [r7, #4]
 802c31e:	2200      	movs	r2, #0
 802c320:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802c322:	687b      	ldr	r3, [r7, #4]
 802c324:	2209      	movs	r2, #9
 802c326:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802c328:	687b      	ldr	r3, [r7, #4]
 802c32a:	887a      	ldrh	r2, [r7, #2]
 802c32c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c32e:	687b      	ldr	r3, [r7, #4]
 802c330:	2200      	movs	r2, #0
 802c332:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	2200      	movs	r2, #0
 802c338:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c33a:	2200      	movs	r2, #0
 802c33c:	2100      	movs	r1, #0
 802c33e:	6878      	ldr	r0, [r7, #4]
 802c340:	f000 faf6 	bl	802c930 <USBH_CtlReq>
 802c344:	4603      	mov	r3, r0
}
 802c346:	4618      	mov	r0, r3
 802c348:	3708      	adds	r7, #8
 802c34a:	46bd      	mov	sp, r7
 802c34c:	bd80      	pop	{r7, pc}

0802c34e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802c34e:	b580      	push	{r7, lr}
 802c350:	b082      	sub	sp, #8
 802c352:	af00      	add	r7, sp, #0
 802c354:	6078      	str	r0, [r7, #4]
 802c356:	460b      	mov	r3, r1
 802c358:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c35a:	687b      	ldr	r3, [r7, #4]
 802c35c:	789b      	ldrb	r3, [r3, #2]
 802c35e:	2b01      	cmp	r3, #1
 802c360:	d10f      	bne.n	802c382 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c362:	687b      	ldr	r3, [r7, #4]
 802c364:	2200      	movs	r2, #0
 802c366:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802c368:	687b      	ldr	r3, [r7, #4]
 802c36a:	2203      	movs	r2, #3
 802c36c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802c36e:	78fb      	ldrb	r3, [r7, #3]
 802c370:	b29a      	uxth	r2, r3
 802c372:	687b      	ldr	r3, [r7, #4]
 802c374:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c376:	687b      	ldr	r3, [r7, #4]
 802c378:	2200      	movs	r2, #0
 802c37a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c37c:	687b      	ldr	r3, [r7, #4]
 802c37e:	2200      	movs	r2, #0
 802c380:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c382:	2200      	movs	r2, #0
 802c384:	2100      	movs	r1, #0
 802c386:	6878      	ldr	r0, [r7, #4]
 802c388:	f000 fad2 	bl	802c930 <USBH_CtlReq>
 802c38c:	4603      	mov	r3, r0
}
 802c38e:	4618      	mov	r0, r3
 802c390:	3708      	adds	r7, #8
 802c392:	46bd      	mov	sp, r7
 802c394:	bd80      	pop	{r7, pc}

0802c396 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802c396:	b580      	push	{r7, lr}
 802c398:	b082      	sub	sp, #8
 802c39a:	af00      	add	r7, sp, #0
 802c39c:	6078      	str	r0, [r7, #4]
 802c39e:	460b      	mov	r3, r1
 802c3a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	789b      	ldrb	r3, [r3, #2]
 802c3a6:	2b01      	cmp	r3, #1
 802c3a8:	d10f      	bne.n	802c3ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802c3aa:	687b      	ldr	r3, [r7, #4]
 802c3ac:	2202      	movs	r2, #2
 802c3ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802c3b0:	687b      	ldr	r3, [r7, #4]
 802c3b2:	2201      	movs	r2, #1
 802c3b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	2200      	movs	r2, #0
 802c3ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802c3bc:	78fb      	ldrb	r3, [r7, #3]
 802c3be:	b29a      	uxth	r2, r3
 802c3c0:	687b      	ldr	r3, [r7, #4]
 802c3c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c3c4:	687b      	ldr	r3, [r7, #4]
 802c3c6:	2200      	movs	r2, #0
 802c3c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802c3ca:	2200      	movs	r2, #0
 802c3cc:	2100      	movs	r1, #0
 802c3ce:	6878      	ldr	r0, [r7, #4]
 802c3d0:	f000 faae 	bl	802c930 <USBH_CtlReq>
 802c3d4:	4603      	mov	r3, r0
}
 802c3d6:	4618      	mov	r0, r3
 802c3d8:	3708      	adds	r7, #8
 802c3da:	46bd      	mov	sp, r7
 802c3dc:	bd80      	pop	{r7, pc}

0802c3de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802c3de:	b480      	push	{r7}
 802c3e0:	b085      	sub	sp, #20
 802c3e2:	af00      	add	r7, sp, #0
 802c3e4:	60f8      	str	r0, [r7, #12]
 802c3e6:	60b9      	str	r1, [r7, #8]
 802c3e8:	4613      	mov	r3, r2
 802c3ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802c3ec:	68bb      	ldr	r3, [r7, #8]
 802c3ee:	781a      	ldrb	r2, [r3, #0]
 802c3f0:	68fb      	ldr	r3, [r7, #12]
 802c3f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802c3f4:	68bb      	ldr	r3, [r7, #8]
 802c3f6:	785a      	ldrb	r2, [r3, #1]
 802c3f8:	68fb      	ldr	r3, [r7, #12]
 802c3fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802c3fc:	68bb      	ldr	r3, [r7, #8]
 802c3fe:	3302      	adds	r3, #2
 802c400:	781b      	ldrb	r3, [r3, #0]
 802c402:	b29a      	uxth	r2, r3
 802c404:	68bb      	ldr	r3, [r7, #8]
 802c406:	3303      	adds	r3, #3
 802c408:	781b      	ldrb	r3, [r3, #0]
 802c40a:	b29b      	uxth	r3, r3
 802c40c:	021b      	lsls	r3, r3, #8
 802c40e:	b29b      	uxth	r3, r3
 802c410:	4313      	orrs	r3, r2
 802c412:	b29a      	uxth	r2, r3
 802c414:	68fb      	ldr	r3, [r7, #12]
 802c416:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802c418:	68bb      	ldr	r3, [r7, #8]
 802c41a:	791a      	ldrb	r2, [r3, #4]
 802c41c:	68fb      	ldr	r3, [r7, #12]
 802c41e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802c420:	68bb      	ldr	r3, [r7, #8]
 802c422:	795a      	ldrb	r2, [r3, #5]
 802c424:	68fb      	ldr	r3, [r7, #12]
 802c426:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802c428:	68bb      	ldr	r3, [r7, #8]
 802c42a:	799a      	ldrb	r2, [r3, #6]
 802c42c:	68fb      	ldr	r3, [r7, #12]
 802c42e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802c430:	68bb      	ldr	r3, [r7, #8]
 802c432:	79da      	ldrb	r2, [r3, #7]
 802c434:	68fb      	ldr	r3, [r7, #12]
 802c436:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802c438:	68fb      	ldr	r3, [r7, #12]
 802c43a:	79db      	ldrb	r3, [r3, #7]
 802c43c:	2b20      	cmp	r3, #32
 802c43e:	dc11      	bgt.n	802c464 <USBH_ParseDevDesc+0x86>
 802c440:	2b08      	cmp	r3, #8
 802c442:	db16      	blt.n	802c472 <USBH_ParseDevDesc+0x94>
 802c444:	3b08      	subs	r3, #8
 802c446:	2201      	movs	r2, #1
 802c448:	fa02 f303 	lsl.w	r3, r2, r3
 802c44c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802c450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c454:	2b00      	cmp	r3, #0
 802c456:	bf14      	ite	ne
 802c458:	2301      	movne	r3, #1
 802c45a:	2300      	moveq	r3, #0
 802c45c:	b2db      	uxtb	r3, r3
 802c45e:	2b00      	cmp	r3, #0
 802c460:	d102      	bne.n	802c468 <USBH_ParseDevDesc+0x8a>
 802c462:	e006      	b.n	802c472 <USBH_ParseDevDesc+0x94>
 802c464:	2b40      	cmp	r3, #64	; 0x40
 802c466:	d104      	bne.n	802c472 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802c468:	68fb      	ldr	r3, [r7, #12]
 802c46a:	79da      	ldrb	r2, [r3, #7]
 802c46c:	68fb      	ldr	r3, [r7, #12]
 802c46e:	71da      	strb	r2, [r3, #7]
      break;
 802c470:	e003      	b.n	802c47a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802c472:	68fb      	ldr	r3, [r7, #12]
 802c474:	2240      	movs	r2, #64	; 0x40
 802c476:	71da      	strb	r2, [r3, #7]
      break;
 802c478:	bf00      	nop
  }

  if (length > 8U)
 802c47a:	88fb      	ldrh	r3, [r7, #6]
 802c47c:	2b08      	cmp	r3, #8
 802c47e:	d939      	bls.n	802c4f4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802c480:	68bb      	ldr	r3, [r7, #8]
 802c482:	3308      	adds	r3, #8
 802c484:	781b      	ldrb	r3, [r3, #0]
 802c486:	b29a      	uxth	r2, r3
 802c488:	68bb      	ldr	r3, [r7, #8]
 802c48a:	3309      	adds	r3, #9
 802c48c:	781b      	ldrb	r3, [r3, #0]
 802c48e:	b29b      	uxth	r3, r3
 802c490:	021b      	lsls	r3, r3, #8
 802c492:	b29b      	uxth	r3, r3
 802c494:	4313      	orrs	r3, r2
 802c496:	b29a      	uxth	r2, r3
 802c498:	68fb      	ldr	r3, [r7, #12]
 802c49a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802c49c:	68bb      	ldr	r3, [r7, #8]
 802c49e:	330a      	adds	r3, #10
 802c4a0:	781b      	ldrb	r3, [r3, #0]
 802c4a2:	b29a      	uxth	r2, r3
 802c4a4:	68bb      	ldr	r3, [r7, #8]
 802c4a6:	330b      	adds	r3, #11
 802c4a8:	781b      	ldrb	r3, [r3, #0]
 802c4aa:	b29b      	uxth	r3, r3
 802c4ac:	021b      	lsls	r3, r3, #8
 802c4ae:	b29b      	uxth	r3, r3
 802c4b0:	4313      	orrs	r3, r2
 802c4b2:	b29a      	uxth	r2, r3
 802c4b4:	68fb      	ldr	r3, [r7, #12]
 802c4b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802c4b8:	68bb      	ldr	r3, [r7, #8]
 802c4ba:	330c      	adds	r3, #12
 802c4bc:	781b      	ldrb	r3, [r3, #0]
 802c4be:	b29a      	uxth	r2, r3
 802c4c0:	68bb      	ldr	r3, [r7, #8]
 802c4c2:	330d      	adds	r3, #13
 802c4c4:	781b      	ldrb	r3, [r3, #0]
 802c4c6:	b29b      	uxth	r3, r3
 802c4c8:	021b      	lsls	r3, r3, #8
 802c4ca:	b29b      	uxth	r3, r3
 802c4cc:	4313      	orrs	r3, r2
 802c4ce:	b29a      	uxth	r2, r3
 802c4d0:	68fb      	ldr	r3, [r7, #12]
 802c4d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802c4d4:	68bb      	ldr	r3, [r7, #8]
 802c4d6:	7b9a      	ldrb	r2, [r3, #14]
 802c4d8:	68fb      	ldr	r3, [r7, #12]
 802c4da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802c4dc:	68bb      	ldr	r3, [r7, #8]
 802c4de:	7bda      	ldrb	r2, [r3, #15]
 802c4e0:	68fb      	ldr	r3, [r7, #12]
 802c4e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802c4e4:	68bb      	ldr	r3, [r7, #8]
 802c4e6:	7c1a      	ldrb	r2, [r3, #16]
 802c4e8:	68fb      	ldr	r3, [r7, #12]
 802c4ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802c4ec:	68bb      	ldr	r3, [r7, #8]
 802c4ee:	7c5a      	ldrb	r2, [r3, #17]
 802c4f0:	68fb      	ldr	r3, [r7, #12]
 802c4f2:	745a      	strb	r2, [r3, #17]
  }
}
 802c4f4:	bf00      	nop
 802c4f6:	3714      	adds	r7, #20
 802c4f8:	46bd      	mov	sp, r7
 802c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4fe:	4770      	bx	lr

0802c500 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802c500:	b580      	push	{r7, lr}
 802c502:	b08c      	sub	sp, #48	; 0x30
 802c504:	af00      	add	r7, sp, #0
 802c506:	60f8      	str	r0, [r7, #12]
 802c508:	60b9      	str	r1, [r7, #8]
 802c50a:	4613      	mov	r3, r2
 802c50c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802c50e:	68fb      	ldr	r3, [r7, #12]
 802c510:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c514:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802c516:	2300      	movs	r3, #0
 802c518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802c51c:	68bb      	ldr	r3, [r7, #8]
 802c51e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802c520:	2300      	movs	r3, #0
 802c522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802c526:	2300      	movs	r3, #0
 802c528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802c52c:	68bb      	ldr	r3, [r7, #8]
 802c52e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802c530:	68bb      	ldr	r3, [r7, #8]
 802c532:	781a      	ldrb	r2, [r3, #0]
 802c534:	6a3b      	ldr	r3, [r7, #32]
 802c536:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802c538:	68bb      	ldr	r3, [r7, #8]
 802c53a:	785a      	ldrb	r2, [r3, #1]
 802c53c:	6a3b      	ldr	r3, [r7, #32]
 802c53e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802c540:	68bb      	ldr	r3, [r7, #8]
 802c542:	3302      	adds	r3, #2
 802c544:	781b      	ldrb	r3, [r3, #0]
 802c546:	b29a      	uxth	r2, r3
 802c548:	68bb      	ldr	r3, [r7, #8]
 802c54a:	3303      	adds	r3, #3
 802c54c:	781b      	ldrb	r3, [r3, #0]
 802c54e:	b29b      	uxth	r3, r3
 802c550:	021b      	lsls	r3, r3, #8
 802c552:	b29b      	uxth	r3, r3
 802c554:	4313      	orrs	r3, r2
 802c556:	b29b      	uxth	r3, r3
 802c558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c55c:	bf28      	it	cs
 802c55e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802c562:	b29a      	uxth	r2, r3
 802c564:	6a3b      	ldr	r3, [r7, #32]
 802c566:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802c568:	68bb      	ldr	r3, [r7, #8]
 802c56a:	791a      	ldrb	r2, [r3, #4]
 802c56c:	6a3b      	ldr	r3, [r7, #32]
 802c56e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802c570:	68bb      	ldr	r3, [r7, #8]
 802c572:	795a      	ldrb	r2, [r3, #5]
 802c574:	6a3b      	ldr	r3, [r7, #32]
 802c576:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802c578:	68bb      	ldr	r3, [r7, #8]
 802c57a:	799a      	ldrb	r2, [r3, #6]
 802c57c:	6a3b      	ldr	r3, [r7, #32]
 802c57e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802c580:	68bb      	ldr	r3, [r7, #8]
 802c582:	79da      	ldrb	r2, [r3, #7]
 802c584:	6a3b      	ldr	r3, [r7, #32]
 802c586:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802c588:	68bb      	ldr	r3, [r7, #8]
 802c58a:	7a1a      	ldrb	r2, [r3, #8]
 802c58c:	6a3b      	ldr	r3, [r7, #32]
 802c58e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802c590:	6a3b      	ldr	r3, [r7, #32]
 802c592:	781b      	ldrb	r3, [r3, #0]
 802c594:	2b09      	cmp	r3, #9
 802c596:	d002      	beq.n	802c59e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802c598:	6a3b      	ldr	r3, [r7, #32]
 802c59a:	2209      	movs	r2, #9
 802c59c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802c59e:	88fb      	ldrh	r3, [r7, #6]
 802c5a0:	2b09      	cmp	r3, #9
 802c5a2:	f240 809d 	bls.w	802c6e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802c5a6:	2309      	movs	r3, #9
 802c5a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c5aa:	2300      	movs	r3, #0
 802c5ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c5ae:	e081      	b.n	802c6b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c5b0:	f107 0316 	add.w	r3, r7, #22
 802c5b4:	4619      	mov	r1, r3
 802c5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c5b8:	f000 f99f 	bl	802c8fa <USBH_GetNextDesc>
 802c5bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5c0:	785b      	ldrb	r3, [r3, #1]
 802c5c2:	2b04      	cmp	r3, #4
 802c5c4:	d176      	bne.n	802c6b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5c8:	781b      	ldrb	r3, [r3, #0]
 802c5ca:	2b09      	cmp	r3, #9
 802c5cc:	d002      	beq.n	802c5d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5d0:	2209      	movs	r2, #9
 802c5d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802c5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c5d8:	221a      	movs	r2, #26
 802c5da:	fb02 f303 	mul.w	r3, r2, r3
 802c5de:	3308      	adds	r3, #8
 802c5e0:	6a3a      	ldr	r2, [r7, #32]
 802c5e2:	4413      	add	r3, r2
 802c5e4:	3302      	adds	r3, #2
 802c5e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802c5e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c5ea:	69f8      	ldr	r0, [r7, #28]
 802c5ec:	f000 f87e 	bl	802c6ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802c5f0:	2300      	movs	r3, #0
 802c5f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802c5f6:	2300      	movs	r3, #0
 802c5f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c5fa:	e043      	b.n	802c684 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c5fc:	f107 0316 	add.w	r3, r7, #22
 802c600:	4619      	mov	r1, r3
 802c602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c604:	f000 f979 	bl	802c8fa <USBH_GetNextDesc>
 802c608:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c60c:	785b      	ldrb	r3, [r3, #1]
 802c60e:	2b05      	cmp	r3, #5
 802c610:	d138      	bne.n	802c684 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802c612:	69fb      	ldr	r3, [r7, #28]
 802c614:	795b      	ldrb	r3, [r3, #5]
 802c616:	2b01      	cmp	r3, #1
 802c618:	d10f      	bne.n	802c63a <USBH_ParseCfgDesc+0x13a>
 802c61a:	69fb      	ldr	r3, [r7, #28]
 802c61c:	799b      	ldrb	r3, [r3, #6]
 802c61e:	2b02      	cmp	r3, #2
 802c620:	d10b      	bne.n	802c63a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c622:	69fb      	ldr	r3, [r7, #28]
 802c624:	79db      	ldrb	r3, [r3, #7]
 802c626:	2b00      	cmp	r3, #0
 802c628:	d10f      	bne.n	802c64a <USBH_ParseCfgDesc+0x14a>
 802c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c62c:	781b      	ldrb	r3, [r3, #0]
 802c62e:	2b09      	cmp	r3, #9
 802c630:	d00b      	beq.n	802c64a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802c632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c634:	2209      	movs	r2, #9
 802c636:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c638:	e007      	b.n	802c64a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c63c:	781b      	ldrb	r3, [r3, #0]
 802c63e:	2b07      	cmp	r3, #7
 802c640:	d004      	beq.n	802c64c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c644:	2207      	movs	r2, #7
 802c646:	701a      	strb	r2, [r3, #0]
 802c648:	e000      	b.n	802c64c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c64a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c650:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c654:	3201      	adds	r2, #1
 802c656:	00d2      	lsls	r2, r2, #3
 802c658:	211a      	movs	r1, #26
 802c65a:	fb01 f303 	mul.w	r3, r1, r3
 802c65e:	4413      	add	r3, r2
 802c660:	3308      	adds	r3, #8
 802c662:	6a3a      	ldr	r2, [r7, #32]
 802c664:	4413      	add	r3, r2
 802c666:	3304      	adds	r3, #4
 802c668:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802c66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c66c:	69b9      	ldr	r1, [r7, #24]
 802c66e:	68f8      	ldr	r0, [r7, #12]
 802c670:	f000 f86b 	bl	802c74a <USBH_ParseEPDesc>
 802c674:	4603      	mov	r3, r0
 802c676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802c67a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c67e:	3301      	adds	r3, #1
 802c680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c684:	69fb      	ldr	r3, [r7, #28]
 802c686:	791b      	ldrb	r3, [r3, #4]
 802c688:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c68c:	429a      	cmp	r2, r3
 802c68e:	d204      	bcs.n	802c69a <USBH_ParseCfgDesc+0x19a>
 802c690:	6a3b      	ldr	r3, [r7, #32]
 802c692:	885a      	ldrh	r2, [r3, #2]
 802c694:	8afb      	ldrh	r3, [r7, #22]
 802c696:	429a      	cmp	r2, r3
 802c698:	d8b0      	bhi.n	802c5fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802c69a:	69fb      	ldr	r3, [r7, #28]
 802c69c:	791b      	ldrb	r3, [r3, #4]
 802c69e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c6a2:	429a      	cmp	r2, r3
 802c6a4:	d201      	bcs.n	802c6aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802c6a6:	2303      	movs	r3, #3
 802c6a8:	e01c      	b.n	802c6e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802c6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c6ae:	3301      	adds	r3, #1
 802c6b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c6b8:	2b01      	cmp	r3, #1
 802c6ba:	d805      	bhi.n	802c6c8 <USBH_ParseCfgDesc+0x1c8>
 802c6bc:	6a3b      	ldr	r3, [r7, #32]
 802c6be:	885a      	ldrh	r2, [r3, #2]
 802c6c0:	8afb      	ldrh	r3, [r7, #22]
 802c6c2:	429a      	cmp	r2, r3
 802c6c4:	f63f af74 	bhi.w	802c5b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802c6c8:	6a3b      	ldr	r3, [r7, #32]
 802c6ca:	791b      	ldrb	r3, [r3, #4]
 802c6cc:	2b02      	cmp	r3, #2
 802c6ce:	bf28      	it	cs
 802c6d0:	2302      	movcs	r3, #2
 802c6d2:	b2db      	uxtb	r3, r3
 802c6d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c6d8:	429a      	cmp	r2, r3
 802c6da:	d201      	bcs.n	802c6e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802c6dc:	2303      	movs	r3, #3
 802c6de:	e001      	b.n	802c6e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802c6e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c6e4:	4618      	mov	r0, r3
 802c6e6:	3730      	adds	r7, #48	; 0x30
 802c6e8:	46bd      	mov	sp, r7
 802c6ea:	bd80      	pop	{r7, pc}

0802c6ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802c6ec:	b480      	push	{r7}
 802c6ee:	b083      	sub	sp, #12
 802c6f0:	af00      	add	r7, sp, #0
 802c6f2:	6078      	str	r0, [r7, #4]
 802c6f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802c6f6:	683b      	ldr	r3, [r7, #0]
 802c6f8:	781a      	ldrb	r2, [r3, #0]
 802c6fa:	687b      	ldr	r3, [r7, #4]
 802c6fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802c6fe:	683b      	ldr	r3, [r7, #0]
 802c700:	785a      	ldrb	r2, [r3, #1]
 802c702:	687b      	ldr	r3, [r7, #4]
 802c704:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802c706:	683b      	ldr	r3, [r7, #0]
 802c708:	789a      	ldrb	r2, [r3, #2]
 802c70a:	687b      	ldr	r3, [r7, #4]
 802c70c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802c70e:	683b      	ldr	r3, [r7, #0]
 802c710:	78da      	ldrb	r2, [r3, #3]
 802c712:	687b      	ldr	r3, [r7, #4]
 802c714:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802c716:	683b      	ldr	r3, [r7, #0]
 802c718:	791a      	ldrb	r2, [r3, #4]
 802c71a:	687b      	ldr	r3, [r7, #4]
 802c71c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802c71e:	683b      	ldr	r3, [r7, #0]
 802c720:	795a      	ldrb	r2, [r3, #5]
 802c722:	687b      	ldr	r3, [r7, #4]
 802c724:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802c726:	683b      	ldr	r3, [r7, #0]
 802c728:	799a      	ldrb	r2, [r3, #6]
 802c72a:	687b      	ldr	r3, [r7, #4]
 802c72c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802c72e:	683b      	ldr	r3, [r7, #0]
 802c730:	79da      	ldrb	r2, [r3, #7]
 802c732:	687b      	ldr	r3, [r7, #4]
 802c734:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802c736:	683b      	ldr	r3, [r7, #0]
 802c738:	7a1a      	ldrb	r2, [r3, #8]
 802c73a:	687b      	ldr	r3, [r7, #4]
 802c73c:	721a      	strb	r2, [r3, #8]
}
 802c73e:	bf00      	nop
 802c740:	370c      	adds	r7, #12
 802c742:	46bd      	mov	sp, r7
 802c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c748:	4770      	bx	lr

0802c74a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802c74a:	b480      	push	{r7}
 802c74c:	b087      	sub	sp, #28
 802c74e:	af00      	add	r7, sp, #0
 802c750:	60f8      	str	r0, [r7, #12]
 802c752:	60b9      	str	r1, [r7, #8]
 802c754:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802c756:	2300      	movs	r3, #0
 802c758:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802c75a:	687b      	ldr	r3, [r7, #4]
 802c75c:	781a      	ldrb	r2, [r3, #0]
 802c75e:	68bb      	ldr	r3, [r7, #8]
 802c760:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802c762:	687b      	ldr	r3, [r7, #4]
 802c764:	785a      	ldrb	r2, [r3, #1]
 802c766:	68bb      	ldr	r3, [r7, #8]
 802c768:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802c76a:	687b      	ldr	r3, [r7, #4]
 802c76c:	789a      	ldrb	r2, [r3, #2]
 802c76e:	68bb      	ldr	r3, [r7, #8]
 802c770:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802c772:	687b      	ldr	r3, [r7, #4]
 802c774:	78da      	ldrb	r2, [r3, #3]
 802c776:	68bb      	ldr	r3, [r7, #8]
 802c778:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802c77a:	687b      	ldr	r3, [r7, #4]
 802c77c:	3304      	adds	r3, #4
 802c77e:	781b      	ldrb	r3, [r3, #0]
 802c780:	b29a      	uxth	r2, r3
 802c782:	687b      	ldr	r3, [r7, #4]
 802c784:	3305      	adds	r3, #5
 802c786:	781b      	ldrb	r3, [r3, #0]
 802c788:	b29b      	uxth	r3, r3
 802c78a:	021b      	lsls	r3, r3, #8
 802c78c:	b29b      	uxth	r3, r3
 802c78e:	4313      	orrs	r3, r2
 802c790:	b29a      	uxth	r2, r3
 802c792:	68bb      	ldr	r3, [r7, #8]
 802c794:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802c796:	687b      	ldr	r3, [r7, #4]
 802c798:	799a      	ldrb	r2, [r3, #6]
 802c79a:	68bb      	ldr	r3, [r7, #8]
 802c79c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802c79e:	68bb      	ldr	r3, [r7, #8]
 802c7a0:	889b      	ldrh	r3, [r3, #4]
 802c7a2:	2b00      	cmp	r3, #0
 802c7a4:	d102      	bne.n	802c7ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802c7a6:	2303      	movs	r3, #3
 802c7a8:	75fb      	strb	r3, [r7, #23]
 802c7aa:	e033      	b.n	802c814 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802c7ac:	68bb      	ldr	r3, [r7, #8]
 802c7ae:	889b      	ldrh	r3, [r3, #4]
 802c7b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c7b4:	f023 0307 	bic.w	r3, r3, #7
 802c7b8:	b29a      	uxth	r2, r3
 802c7ba:	68bb      	ldr	r3, [r7, #8]
 802c7bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802c7be:	68bb      	ldr	r3, [r7, #8]
 802c7c0:	889b      	ldrh	r3, [r3, #4]
 802c7c2:	b21a      	sxth	r2, r3
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	3304      	adds	r3, #4
 802c7c8:	781b      	ldrb	r3, [r3, #0]
 802c7ca:	b299      	uxth	r1, r3
 802c7cc:	687b      	ldr	r3, [r7, #4]
 802c7ce:	3305      	adds	r3, #5
 802c7d0:	781b      	ldrb	r3, [r3, #0]
 802c7d2:	b29b      	uxth	r3, r3
 802c7d4:	021b      	lsls	r3, r3, #8
 802c7d6:	b29b      	uxth	r3, r3
 802c7d8:	430b      	orrs	r3, r1
 802c7da:	b29b      	uxth	r3, r3
 802c7dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802c7e0:	2b00      	cmp	r3, #0
 802c7e2:	d110      	bne.n	802c806 <USBH_ParseEPDesc+0xbc>
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	3304      	adds	r3, #4
 802c7e8:	781b      	ldrb	r3, [r3, #0]
 802c7ea:	b299      	uxth	r1, r3
 802c7ec:	687b      	ldr	r3, [r7, #4]
 802c7ee:	3305      	adds	r3, #5
 802c7f0:	781b      	ldrb	r3, [r3, #0]
 802c7f2:	b29b      	uxth	r3, r3
 802c7f4:	021b      	lsls	r3, r3, #8
 802c7f6:	b29b      	uxth	r3, r3
 802c7f8:	430b      	orrs	r3, r1
 802c7fa:	b29b      	uxth	r3, r3
 802c7fc:	b21b      	sxth	r3, r3
 802c7fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802c802:	b21b      	sxth	r3, r3
 802c804:	e001      	b.n	802c80a <USBH_ParseEPDesc+0xc0>
 802c806:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c80a:	4313      	orrs	r3, r2
 802c80c:	b21b      	sxth	r3, r3
 802c80e:	b29a      	uxth	r2, r3
 802c810:	68bb      	ldr	r3, [r7, #8]
 802c812:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802c814:	68fb      	ldr	r3, [r7, #12]
 802c816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802c81a:	2b00      	cmp	r3, #0
 802c81c:	d116      	bne.n	802c84c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c81e:	68bb      	ldr	r3, [r7, #8]
 802c820:	78db      	ldrb	r3, [r3, #3]
 802c822:	f003 0303 	and.w	r3, r3, #3
 802c826:	2b01      	cmp	r3, #1
 802c828:	d005      	beq.n	802c836 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802c82a:	68bb      	ldr	r3, [r7, #8]
 802c82c:	78db      	ldrb	r3, [r3, #3]
 802c82e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c832:	2b03      	cmp	r3, #3
 802c834:	d127      	bne.n	802c886 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c836:	68bb      	ldr	r3, [r7, #8]
 802c838:	799b      	ldrb	r3, [r3, #6]
 802c83a:	2b00      	cmp	r3, #0
 802c83c:	d003      	beq.n	802c846 <USBH_ParseEPDesc+0xfc>
 802c83e:	68bb      	ldr	r3, [r7, #8]
 802c840:	799b      	ldrb	r3, [r3, #6]
 802c842:	2b10      	cmp	r3, #16
 802c844:	d91f      	bls.n	802c886 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c846:	2303      	movs	r3, #3
 802c848:	75fb      	strb	r3, [r7, #23]
 802c84a:	e01c      	b.n	802c886 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802c84c:	68bb      	ldr	r3, [r7, #8]
 802c84e:	78db      	ldrb	r3, [r3, #3]
 802c850:	f003 0303 	and.w	r3, r3, #3
 802c854:	2b01      	cmp	r3, #1
 802c856:	d10a      	bne.n	802c86e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c858:	68bb      	ldr	r3, [r7, #8]
 802c85a:	799b      	ldrb	r3, [r3, #6]
 802c85c:	2b00      	cmp	r3, #0
 802c85e:	d003      	beq.n	802c868 <USBH_ParseEPDesc+0x11e>
 802c860:	68bb      	ldr	r3, [r7, #8]
 802c862:	799b      	ldrb	r3, [r3, #6]
 802c864:	2b10      	cmp	r3, #16
 802c866:	d90e      	bls.n	802c886 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c868:	2303      	movs	r3, #3
 802c86a:	75fb      	strb	r3, [r7, #23]
 802c86c:	e00b      	b.n	802c886 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802c86e:	68bb      	ldr	r3, [r7, #8]
 802c870:	78db      	ldrb	r3, [r3, #3]
 802c872:	f003 0303 	and.w	r3, r3, #3
 802c876:	2b03      	cmp	r3, #3
 802c878:	d105      	bne.n	802c886 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802c87a:	68bb      	ldr	r3, [r7, #8]
 802c87c:	799b      	ldrb	r3, [r3, #6]
 802c87e:	2b00      	cmp	r3, #0
 802c880:	d101      	bne.n	802c886 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c882:	2303      	movs	r3, #3
 802c884:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802c886:	7dfb      	ldrb	r3, [r7, #23]
}
 802c888:	4618      	mov	r0, r3
 802c88a:	371c      	adds	r7, #28
 802c88c:	46bd      	mov	sp, r7
 802c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c892:	4770      	bx	lr

0802c894 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802c894:	b480      	push	{r7}
 802c896:	b087      	sub	sp, #28
 802c898:	af00      	add	r7, sp, #0
 802c89a:	60f8      	str	r0, [r7, #12]
 802c89c:	60b9      	str	r1, [r7, #8]
 802c89e:	4613      	mov	r3, r2
 802c8a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802c8a2:	68fb      	ldr	r3, [r7, #12]
 802c8a4:	3301      	adds	r3, #1
 802c8a6:	781b      	ldrb	r3, [r3, #0]
 802c8a8:	2b03      	cmp	r3, #3
 802c8aa:	d120      	bne.n	802c8ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802c8ac:	68fb      	ldr	r3, [r7, #12]
 802c8ae:	781b      	ldrb	r3, [r3, #0]
 802c8b0:	1e9a      	subs	r2, r3, #2
 802c8b2:	88fb      	ldrh	r3, [r7, #6]
 802c8b4:	4293      	cmp	r3, r2
 802c8b6:	bf28      	it	cs
 802c8b8:	4613      	movcs	r3, r2
 802c8ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802c8bc:	68fb      	ldr	r3, [r7, #12]
 802c8be:	3302      	adds	r3, #2
 802c8c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802c8c2:	2300      	movs	r3, #0
 802c8c4:	82fb      	strh	r3, [r7, #22]
 802c8c6:	e00b      	b.n	802c8e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802c8c8:	8afb      	ldrh	r3, [r7, #22]
 802c8ca:	68fa      	ldr	r2, [r7, #12]
 802c8cc:	4413      	add	r3, r2
 802c8ce:	781a      	ldrb	r2, [r3, #0]
 802c8d0:	68bb      	ldr	r3, [r7, #8]
 802c8d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 802c8d4:	68bb      	ldr	r3, [r7, #8]
 802c8d6:	3301      	adds	r3, #1
 802c8d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802c8da:	8afb      	ldrh	r3, [r7, #22]
 802c8dc:	3302      	adds	r3, #2
 802c8de:	82fb      	strh	r3, [r7, #22]
 802c8e0:	8afa      	ldrh	r2, [r7, #22]
 802c8e2:	8abb      	ldrh	r3, [r7, #20]
 802c8e4:	429a      	cmp	r2, r3
 802c8e6:	d3ef      	bcc.n	802c8c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802c8e8:	68bb      	ldr	r3, [r7, #8]
 802c8ea:	2200      	movs	r2, #0
 802c8ec:	701a      	strb	r2, [r3, #0]
  }
}
 802c8ee:	bf00      	nop
 802c8f0:	371c      	adds	r7, #28
 802c8f2:	46bd      	mov	sp, r7
 802c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8f8:	4770      	bx	lr

0802c8fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802c8fa:	b480      	push	{r7}
 802c8fc:	b085      	sub	sp, #20
 802c8fe:	af00      	add	r7, sp, #0
 802c900:	6078      	str	r0, [r7, #4]
 802c902:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802c904:	683b      	ldr	r3, [r7, #0]
 802c906:	881a      	ldrh	r2, [r3, #0]
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	781b      	ldrb	r3, [r3, #0]
 802c90c:	b29b      	uxth	r3, r3
 802c90e:	4413      	add	r3, r2
 802c910:	b29a      	uxth	r2, r3
 802c912:	683b      	ldr	r3, [r7, #0]
 802c914:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802c916:	687b      	ldr	r3, [r7, #4]
 802c918:	781b      	ldrb	r3, [r3, #0]
 802c91a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802c91c:	687b      	ldr	r3, [r7, #4]
 802c91e:	4413      	add	r3, r2
 802c920:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802c922:	68fb      	ldr	r3, [r7, #12]
}
 802c924:	4618      	mov	r0, r3
 802c926:	3714      	adds	r7, #20
 802c928:	46bd      	mov	sp, r7
 802c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c92e:	4770      	bx	lr

0802c930 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802c930:	b580      	push	{r7, lr}
 802c932:	b086      	sub	sp, #24
 802c934:	af00      	add	r7, sp, #0
 802c936:	60f8      	str	r0, [r7, #12]
 802c938:	60b9      	str	r1, [r7, #8]
 802c93a:	4613      	mov	r3, r2
 802c93c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802c93e:	2301      	movs	r3, #1
 802c940:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802c942:	68fb      	ldr	r3, [r7, #12]
 802c944:	789b      	ldrb	r3, [r3, #2]
 802c946:	2b01      	cmp	r3, #1
 802c948:	d002      	beq.n	802c950 <USBH_CtlReq+0x20>
 802c94a:	2b02      	cmp	r3, #2
 802c94c:	d00f      	beq.n	802c96e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802c94e:	e027      	b.n	802c9a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802c950:	68fb      	ldr	r3, [r7, #12]
 802c952:	68ba      	ldr	r2, [r7, #8]
 802c954:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802c956:	68fb      	ldr	r3, [r7, #12]
 802c958:	88fa      	ldrh	r2, [r7, #6]
 802c95a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802c95c:	68fb      	ldr	r3, [r7, #12]
 802c95e:	2201      	movs	r2, #1
 802c960:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802c962:	68fb      	ldr	r3, [r7, #12]
 802c964:	2202      	movs	r2, #2
 802c966:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802c968:	2301      	movs	r3, #1
 802c96a:	75fb      	strb	r3, [r7, #23]
      break;
 802c96c:	e018      	b.n	802c9a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802c96e:	68f8      	ldr	r0, [r7, #12]
 802c970:	f000 f81c 	bl	802c9ac <USBH_HandleControl>
 802c974:	4603      	mov	r3, r0
 802c976:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802c978:	7dfb      	ldrb	r3, [r7, #23]
 802c97a:	2b00      	cmp	r3, #0
 802c97c:	d002      	beq.n	802c984 <USBH_CtlReq+0x54>
 802c97e:	7dfb      	ldrb	r3, [r7, #23]
 802c980:	2b03      	cmp	r3, #3
 802c982:	d106      	bne.n	802c992 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802c984:	68fb      	ldr	r3, [r7, #12]
 802c986:	2201      	movs	r2, #1
 802c988:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802c98a:	68fb      	ldr	r3, [r7, #12]
 802c98c:	2200      	movs	r2, #0
 802c98e:	761a      	strb	r2, [r3, #24]
      break;
 802c990:	e005      	b.n	802c99e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802c992:	7dfb      	ldrb	r3, [r7, #23]
 802c994:	2b02      	cmp	r3, #2
 802c996:	d102      	bne.n	802c99e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802c998:	68fb      	ldr	r3, [r7, #12]
 802c99a:	2201      	movs	r2, #1
 802c99c:	709a      	strb	r2, [r3, #2]
      break;
 802c99e:	bf00      	nop
  }
  return status;
 802c9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 802c9a2:	4618      	mov	r0, r3
 802c9a4:	3718      	adds	r7, #24
 802c9a6:	46bd      	mov	sp, r7
 802c9a8:	bd80      	pop	{r7, pc}
	...

0802c9ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802c9ac:	b580      	push	{r7, lr}
 802c9ae:	b086      	sub	sp, #24
 802c9b0:	af02      	add	r7, sp, #8
 802c9b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802c9b4:	2301      	movs	r3, #1
 802c9b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c9b8:	2300      	movs	r3, #0
 802c9ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802c9bc:	687b      	ldr	r3, [r7, #4]
 802c9be:	7e1b      	ldrb	r3, [r3, #24]
 802c9c0:	3b01      	subs	r3, #1
 802c9c2:	2b0a      	cmp	r3, #10
 802c9c4:	f200 8156 	bhi.w	802cc74 <USBH_HandleControl+0x2c8>
 802c9c8:	a201      	add	r2, pc, #4	; (adr r2, 802c9d0 <USBH_HandleControl+0x24>)
 802c9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c9ce:	bf00      	nop
 802c9d0:	0802c9fd 	.word	0x0802c9fd
 802c9d4:	0802ca17 	.word	0x0802ca17
 802c9d8:	0802ca81 	.word	0x0802ca81
 802c9dc:	0802caa7 	.word	0x0802caa7
 802c9e0:	0802cadf 	.word	0x0802cadf
 802c9e4:	0802cb09 	.word	0x0802cb09
 802c9e8:	0802cb5b 	.word	0x0802cb5b
 802c9ec:	0802cb7d 	.word	0x0802cb7d
 802c9f0:	0802cbb9 	.word	0x0802cbb9
 802c9f4:	0802cbdf 	.word	0x0802cbdf
 802c9f8:	0802cc1d 	.word	0x0802cc1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802c9fc:	687b      	ldr	r3, [r7, #4]
 802c9fe:	f103 0110 	add.w	r1, r3, #16
 802ca02:	687b      	ldr	r3, [r7, #4]
 802ca04:	795b      	ldrb	r3, [r3, #5]
 802ca06:	461a      	mov	r2, r3
 802ca08:	6878      	ldr	r0, [r7, #4]
 802ca0a:	f000 f943 	bl	802cc94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802ca0e:	687b      	ldr	r3, [r7, #4]
 802ca10:	2202      	movs	r2, #2
 802ca12:	761a      	strb	r2, [r3, #24]
      break;
 802ca14:	e139      	b.n	802cc8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802ca16:	687b      	ldr	r3, [r7, #4]
 802ca18:	795b      	ldrb	r3, [r3, #5]
 802ca1a:	4619      	mov	r1, r3
 802ca1c:	6878      	ldr	r0, [r7, #4]
 802ca1e:	f000 fccb 	bl	802d3b8 <USBH_LL_GetURBState>
 802ca22:	4603      	mov	r3, r0
 802ca24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802ca26:	7bbb      	ldrb	r3, [r7, #14]
 802ca28:	2b01      	cmp	r3, #1
 802ca2a:	d11e      	bne.n	802ca6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802ca2c:	687b      	ldr	r3, [r7, #4]
 802ca2e:	7c1b      	ldrb	r3, [r3, #16]
 802ca30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802ca34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802ca36:	687b      	ldr	r3, [r7, #4]
 802ca38:	8adb      	ldrh	r3, [r3, #22]
 802ca3a:	2b00      	cmp	r3, #0
 802ca3c:	d00a      	beq.n	802ca54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802ca3e:	7b7b      	ldrb	r3, [r7, #13]
 802ca40:	2b80      	cmp	r3, #128	; 0x80
 802ca42:	d103      	bne.n	802ca4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802ca44:	687b      	ldr	r3, [r7, #4]
 802ca46:	2203      	movs	r2, #3
 802ca48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ca4a:	e115      	b.n	802cc78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	2205      	movs	r2, #5
 802ca50:	761a      	strb	r2, [r3, #24]
      break;
 802ca52:	e111      	b.n	802cc78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802ca54:	7b7b      	ldrb	r3, [r7, #13]
 802ca56:	2b80      	cmp	r3, #128	; 0x80
 802ca58:	d103      	bne.n	802ca62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802ca5a:	687b      	ldr	r3, [r7, #4]
 802ca5c:	2209      	movs	r2, #9
 802ca5e:	761a      	strb	r2, [r3, #24]
      break;
 802ca60:	e10a      	b.n	802cc78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802ca62:	687b      	ldr	r3, [r7, #4]
 802ca64:	2207      	movs	r2, #7
 802ca66:	761a      	strb	r2, [r3, #24]
      break;
 802ca68:	e106      	b.n	802cc78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802ca6a:	7bbb      	ldrb	r3, [r7, #14]
 802ca6c:	2b04      	cmp	r3, #4
 802ca6e:	d003      	beq.n	802ca78 <USBH_HandleControl+0xcc>
 802ca70:	7bbb      	ldrb	r3, [r7, #14]
 802ca72:	2b02      	cmp	r3, #2
 802ca74:	f040 8100 	bne.w	802cc78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802ca78:	687b      	ldr	r3, [r7, #4]
 802ca7a:	220b      	movs	r2, #11
 802ca7c:	761a      	strb	r2, [r3, #24]
      break;
 802ca7e:	e0fb      	b.n	802cc78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802ca80:	687b      	ldr	r3, [r7, #4]
 802ca82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802ca86:	b29a      	uxth	r2, r3
 802ca88:	687b      	ldr	r3, [r7, #4]
 802ca8a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802ca8c:	687b      	ldr	r3, [r7, #4]
 802ca8e:	6899      	ldr	r1, [r3, #8]
 802ca90:	687b      	ldr	r3, [r7, #4]
 802ca92:	899a      	ldrh	r2, [r3, #12]
 802ca94:	687b      	ldr	r3, [r7, #4]
 802ca96:	791b      	ldrb	r3, [r3, #4]
 802ca98:	6878      	ldr	r0, [r7, #4]
 802ca9a:	f000 f93a 	bl	802cd12 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802ca9e:	687b      	ldr	r3, [r7, #4]
 802caa0:	2204      	movs	r2, #4
 802caa2:	761a      	strb	r2, [r3, #24]
      break;
 802caa4:	e0f1      	b.n	802cc8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802caa6:	687b      	ldr	r3, [r7, #4]
 802caa8:	791b      	ldrb	r3, [r3, #4]
 802caaa:	4619      	mov	r1, r3
 802caac:	6878      	ldr	r0, [r7, #4]
 802caae:	f000 fc83 	bl	802d3b8 <USBH_LL_GetURBState>
 802cab2:	4603      	mov	r3, r0
 802cab4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802cab6:	7bbb      	ldrb	r3, [r7, #14]
 802cab8:	2b01      	cmp	r3, #1
 802caba:	d102      	bne.n	802cac2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802cabc:	687b      	ldr	r3, [r7, #4]
 802cabe:	2209      	movs	r2, #9
 802cac0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802cac2:	7bbb      	ldrb	r3, [r7, #14]
 802cac4:	2b05      	cmp	r3, #5
 802cac6:	d102      	bne.n	802cace <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802cac8:	2303      	movs	r3, #3
 802caca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cacc:	e0d6      	b.n	802cc7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802cace:	7bbb      	ldrb	r3, [r7, #14]
 802cad0:	2b04      	cmp	r3, #4
 802cad2:	f040 80d3 	bne.w	802cc7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802cad6:	687b      	ldr	r3, [r7, #4]
 802cad8:	220b      	movs	r2, #11
 802cada:	761a      	strb	r2, [r3, #24]
      break;
 802cadc:	e0ce      	b.n	802cc7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	6899      	ldr	r1, [r3, #8]
 802cae2:	687b      	ldr	r3, [r7, #4]
 802cae4:	899a      	ldrh	r2, [r3, #12]
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	795b      	ldrb	r3, [r3, #5]
 802caea:	2001      	movs	r0, #1
 802caec:	9000      	str	r0, [sp, #0]
 802caee:	6878      	ldr	r0, [r7, #4]
 802caf0:	f000 f8ea 	bl	802ccc8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802caf4:	687b      	ldr	r3, [r7, #4]
 802caf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cafa:	b29a      	uxth	r2, r3
 802cafc:	687b      	ldr	r3, [r7, #4]
 802cafe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802cb00:	687b      	ldr	r3, [r7, #4]
 802cb02:	2206      	movs	r2, #6
 802cb04:	761a      	strb	r2, [r3, #24]
      break;
 802cb06:	e0c0      	b.n	802cc8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cb08:	687b      	ldr	r3, [r7, #4]
 802cb0a:	795b      	ldrb	r3, [r3, #5]
 802cb0c:	4619      	mov	r1, r3
 802cb0e:	6878      	ldr	r0, [r7, #4]
 802cb10:	f000 fc52 	bl	802d3b8 <USBH_LL_GetURBState>
 802cb14:	4603      	mov	r3, r0
 802cb16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cb18:	7bbb      	ldrb	r3, [r7, #14]
 802cb1a:	2b01      	cmp	r3, #1
 802cb1c:	d103      	bne.n	802cb26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802cb1e:	687b      	ldr	r3, [r7, #4]
 802cb20:	2207      	movs	r2, #7
 802cb22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cb24:	e0ac      	b.n	802cc80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802cb26:	7bbb      	ldrb	r3, [r7, #14]
 802cb28:	2b05      	cmp	r3, #5
 802cb2a:	d105      	bne.n	802cb38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802cb2c:	687b      	ldr	r3, [r7, #4]
 802cb2e:	220c      	movs	r2, #12
 802cb30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802cb32:	2303      	movs	r3, #3
 802cb34:	73fb      	strb	r3, [r7, #15]
      break;
 802cb36:	e0a3      	b.n	802cc80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cb38:	7bbb      	ldrb	r3, [r7, #14]
 802cb3a:	2b02      	cmp	r3, #2
 802cb3c:	d103      	bne.n	802cb46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802cb3e:	687b      	ldr	r3, [r7, #4]
 802cb40:	2205      	movs	r2, #5
 802cb42:	761a      	strb	r2, [r3, #24]
      break;
 802cb44:	e09c      	b.n	802cc80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802cb46:	7bbb      	ldrb	r3, [r7, #14]
 802cb48:	2b04      	cmp	r3, #4
 802cb4a:	f040 8099 	bne.w	802cc80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802cb4e:	687b      	ldr	r3, [r7, #4]
 802cb50:	220b      	movs	r2, #11
 802cb52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802cb54:	2302      	movs	r3, #2
 802cb56:	73fb      	strb	r3, [r7, #15]
      break;
 802cb58:	e092      	b.n	802cc80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802cb5a:	687b      	ldr	r3, [r7, #4]
 802cb5c:	791b      	ldrb	r3, [r3, #4]
 802cb5e:	2200      	movs	r2, #0
 802cb60:	2100      	movs	r1, #0
 802cb62:	6878      	ldr	r0, [r7, #4]
 802cb64:	f000 f8d5 	bl	802cd12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cb6e:	b29a      	uxth	r2, r3
 802cb70:	687b      	ldr	r3, [r7, #4]
 802cb72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802cb74:	687b      	ldr	r3, [r7, #4]
 802cb76:	2208      	movs	r2, #8
 802cb78:	761a      	strb	r2, [r3, #24]

      break;
 802cb7a:	e086      	b.n	802cc8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802cb7c:	687b      	ldr	r3, [r7, #4]
 802cb7e:	791b      	ldrb	r3, [r3, #4]
 802cb80:	4619      	mov	r1, r3
 802cb82:	6878      	ldr	r0, [r7, #4]
 802cb84:	f000 fc18 	bl	802d3b8 <USBH_LL_GetURBState>
 802cb88:	4603      	mov	r3, r0
 802cb8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cb8c:	7bbb      	ldrb	r3, [r7, #14]
 802cb8e:	2b01      	cmp	r3, #1
 802cb90:	d105      	bne.n	802cb9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802cb92:	687b      	ldr	r3, [r7, #4]
 802cb94:	220d      	movs	r2, #13
 802cb96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802cb98:	2300      	movs	r3, #0
 802cb9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cb9c:	e072      	b.n	802cc84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802cb9e:	7bbb      	ldrb	r3, [r7, #14]
 802cba0:	2b04      	cmp	r3, #4
 802cba2:	d103      	bne.n	802cbac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802cba4:	687b      	ldr	r3, [r7, #4]
 802cba6:	220b      	movs	r2, #11
 802cba8:	761a      	strb	r2, [r3, #24]
      break;
 802cbaa:	e06b      	b.n	802cc84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802cbac:	7bbb      	ldrb	r3, [r7, #14]
 802cbae:	2b05      	cmp	r3, #5
 802cbb0:	d168      	bne.n	802cc84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802cbb2:	2303      	movs	r3, #3
 802cbb4:	73fb      	strb	r3, [r7, #15]
      break;
 802cbb6:	e065      	b.n	802cc84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	795b      	ldrb	r3, [r3, #5]
 802cbbc:	2201      	movs	r2, #1
 802cbbe:	9200      	str	r2, [sp, #0]
 802cbc0:	2200      	movs	r2, #0
 802cbc2:	2100      	movs	r1, #0
 802cbc4:	6878      	ldr	r0, [r7, #4]
 802cbc6:	f000 f87f 	bl	802ccc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cbca:	687b      	ldr	r3, [r7, #4]
 802cbcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cbd0:	b29a      	uxth	r2, r3
 802cbd2:	687b      	ldr	r3, [r7, #4]
 802cbd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802cbd6:	687b      	ldr	r3, [r7, #4]
 802cbd8:	220a      	movs	r2, #10
 802cbda:	761a      	strb	r2, [r3, #24]
      break;
 802cbdc:	e055      	b.n	802cc8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cbde:	687b      	ldr	r3, [r7, #4]
 802cbe0:	795b      	ldrb	r3, [r3, #5]
 802cbe2:	4619      	mov	r1, r3
 802cbe4:	6878      	ldr	r0, [r7, #4]
 802cbe6:	f000 fbe7 	bl	802d3b8 <USBH_LL_GetURBState>
 802cbea:	4603      	mov	r3, r0
 802cbec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802cbee:	7bbb      	ldrb	r3, [r7, #14]
 802cbf0:	2b01      	cmp	r3, #1
 802cbf2:	d105      	bne.n	802cc00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802cbf4:	2300      	movs	r3, #0
 802cbf6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802cbf8:	687b      	ldr	r3, [r7, #4]
 802cbfa:	220d      	movs	r2, #13
 802cbfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cbfe:	e043      	b.n	802cc88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cc00:	7bbb      	ldrb	r3, [r7, #14]
 802cc02:	2b02      	cmp	r3, #2
 802cc04:	d103      	bne.n	802cc0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802cc06:	687b      	ldr	r3, [r7, #4]
 802cc08:	2209      	movs	r2, #9
 802cc0a:	761a      	strb	r2, [r3, #24]
      break;
 802cc0c:	e03c      	b.n	802cc88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802cc0e:	7bbb      	ldrb	r3, [r7, #14]
 802cc10:	2b04      	cmp	r3, #4
 802cc12:	d139      	bne.n	802cc88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802cc14:	687b      	ldr	r3, [r7, #4]
 802cc16:	220b      	movs	r2, #11
 802cc18:	761a      	strb	r2, [r3, #24]
      break;
 802cc1a:	e035      	b.n	802cc88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802cc1c:	687b      	ldr	r3, [r7, #4]
 802cc1e:	7e5b      	ldrb	r3, [r3, #25]
 802cc20:	3301      	adds	r3, #1
 802cc22:	b2da      	uxtb	r2, r3
 802cc24:	687b      	ldr	r3, [r7, #4]
 802cc26:	765a      	strb	r2, [r3, #25]
 802cc28:	687b      	ldr	r3, [r7, #4]
 802cc2a:	7e5b      	ldrb	r3, [r3, #25]
 802cc2c:	2b02      	cmp	r3, #2
 802cc2e:	d806      	bhi.n	802cc3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802cc30:	687b      	ldr	r3, [r7, #4]
 802cc32:	2201      	movs	r2, #1
 802cc34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	2201      	movs	r2, #1
 802cc3a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802cc3c:	e025      	b.n	802cc8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802cc3e:	687b      	ldr	r3, [r7, #4]
 802cc40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802cc44:	2106      	movs	r1, #6
 802cc46:	6878      	ldr	r0, [r7, #4]
 802cc48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802cc4a:	687b      	ldr	r3, [r7, #4]
 802cc4c:	2200      	movs	r2, #0
 802cc4e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cc50:	687b      	ldr	r3, [r7, #4]
 802cc52:	795b      	ldrb	r3, [r3, #5]
 802cc54:	4619      	mov	r1, r3
 802cc56:	6878      	ldr	r0, [r7, #4]
 802cc58:	f000 f90c 	bl	802ce74 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cc5c:	687b      	ldr	r3, [r7, #4]
 802cc5e:	791b      	ldrb	r3, [r3, #4]
 802cc60:	4619      	mov	r1, r3
 802cc62:	6878      	ldr	r0, [r7, #4]
 802cc64:	f000 f906 	bl	802ce74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802cc68:	687b      	ldr	r3, [r7, #4]
 802cc6a:	2200      	movs	r2, #0
 802cc6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802cc6e:	2302      	movs	r3, #2
 802cc70:	73fb      	strb	r3, [r7, #15]
      break;
 802cc72:	e00a      	b.n	802cc8a <USBH_HandleControl+0x2de>

    default:
      break;
 802cc74:	bf00      	nop
 802cc76:	e008      	b.n	802cc8a <USBH_HandleControl+0x2de>
      break;
 802cc78:	bf00      	nop
 802cc7a:	e006      	b.n	802cc8a <USBH_HandleControl+0x2de>
      break;
 802cc7c:	bf00      	nop
 802cc7e:	e004      	b.n	802cc8a <USBH_HandleControl+0x2de>
      break;
 802cc80:	bf00      	nop
 802cc82:	e002      	b.n	802cc8a <USBH_HandleControl+0x2de>
      break;
 802cc84:	bf00      	nop
 802cc86:	e000      	b.n	802cc8a <USBH_HandleControl+0x2de>
      break;
 802cc88:	bf00      	nop
  }

  return status;
 802cc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 802cc8c:	4618      	mov	r0, r3
 802cc8e:	3710      	adds	r7, #16
 802cc90:	46bd      	mov	sp, r7
 802cc92:	bd80      	pop	{r7, pc}

0802cc94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802cc94:	b580      	push	{r7, lr}
 802cc96:	b088      	sub	sp, #32
 802cc98:	af04      	add	r7, sp, #16
 802cc9a:	60f8      	str	r0, [r7, #12]
 802cc9c:	60b9      	str	r1, [r7, #8]
 802cc9e:	4613      	mov	r3, r2
 802cca0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cca2:	79f9      	ldrb	r1, [r7, #7]
 802cca4:	2300      	movs	r3, #0
 802cca6:	9303      	str	r3, [sp, #12]
 802cca8:	2308      	movs	r3, #8
 802ccaa:	9302      	str	r3, [sp, #8]
 802ccac:	68bb      	ldr	r3, [r7, #8]
 802ccae:	9301      	str	r3, [sp, #4]
 802ccb0:	2300      	movs	r3, #0
 802ccb2:	9300      	str	r3, [sp, #0]
 802ccb4:	2300      	movs	r3, #0
 802ccb6:	2200      	movs	r2, #0
 802ccb8:	68f8      	ldr	r0, [r7, #12]
 802ccba:	f000 fb4c 	bl	802d356 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802ccbe:	2300      	movs	r3, #0
}
 802ccc0:	4618      	mov	r0, r3
 802ccc2:	3710      	adds	r7, #16
 802ccc4:	46bd      	mov	sp, r7
 802ccc6:	bd80      	pop	{r7, pc}

0802ccc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802ccc8:	b580      	push	{r7, lr}
 802ccca:	b088      	sub	sp, #32
 802cccc:	af04      	add	r7, sp, #16
 802ccce:	60f8      	str	r0, [r7, #12]
 802ccd0:	60b9      	str	r1, [r7, #8]
 802ccd2:	4611      	mov	r1, r2
 802ccd4:	461a      	mov	r2, r3
 802ccd6:	460b      	mov	r3, r1
 802ccd8:	80fb      	strh	r3, [r7, #6]
 802ccda:	4613      	mov	r3, r2
 802ccdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ccde:	68fb      	ldr	r3, [r7, #12]
 802cce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cce4:	2b00      	cmp	r3, #0
 802cce6:	d001      	beq.n	802ccec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802cce8:	2300      	movs	r3, #0
 802ccea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ccec:	7979      	ldrb	r1, [r7, #5]
 802ccee:	7e3b      	ldrb	r3, [r7, #24]
 802ccf0:	9303      	str	r3, [sp, #12]
 802ccf2:	88fb      	ldrh	r3, [r7, #6]
 802ccf4:	9302      	str	r3, [sp, #8]
 802ccf6:	68bb      	ldr	r3, [r7, #8]
 802ccf8:	9301      	str	r3, [sp, #4]
 802ccfa:	2301      	movs	r3, #1
 802ccfc:	9300      	str	r3, [sp, #0]
 802ccfe:	2300      	movs	r3, #0
 802cd00:	2200      	movs	r2, #0
 802cd02:	68f8      	ldr	r0, [r7, #12]
 802cd04:	f000 fb27 	bl	802d356 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802cd08:	2300      	movs	r3, #0
}
 802cd0a:	4618      	mov	r0, r3
 802cd0c:	3710      	adds	r7, #16
 802cd0e:	46bd      	mov	sp, r7
 802cd10:	bd80      	pop	{r7, pc}

0802cd12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802cd12:	b580      	push	{r7, lr}
 802cd14:	b088      	sub	sp, #32
 802cd16:	af04      	add	r7, sp, #16
 802cd18:	60f8      	str	r0, [r7, #12]
 802cd1a:	60b9      	str	r1, [r7, #8]
 802cd1c:	4611      	mov	r1, r2
 802cd1e:	461a      	mov	r2, r3
 802cd20:	460b      	mov	r3, r1
 802cd22:	80fb      	strh	r3, [r7, #6]
 802cd24:	4613      	mov	r3, r2
 802cd26:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cd28:	7979      	ldrb	r1, [r7, #5]
 802cd2a:	2300      	movs	r3, #0
 802cd2c:	9303      	str	r3, [sp, #12]
 802cd2e:	88fb      	ldrh	r3, [r7, #6]
 802cd30:	9302      	str	r3, [sp, #8]
 802cd32:	68bb      	ldr	r3, [r7, #8]
 802cd34:	9301      	str	r3, [sp, #4]
 802cd36:	2301      	movs	r3, #1
 802cd38:	9300      	str	r3, [sp, #0]
 802cd3a:	2300      	movs	r3, #0
 802cd3c:	2201      	movs	r2, #1
 802cd3e:	68f8      	ldr	r0, [r7, #12]
 802cd40:	f000 fb09 	bl	802d356 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cd44:	2300      	movs	r3, #0

}
 802cd46:	4618      	mov	r0, r3
 802cd48:	3710      	adds	r7, #16
 802cd4a:	46bd      	mov	sp, r7
 802cd4c:	bd80      	pop	{r7, pc}

0802cd4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802cd4e:	b580      	push	{r7, lr}
 802cd50:	b088      	sub	sp, #32
 802cd52:	af04      	add	r7, sp, #16
 802cd54:	60f8      	str	r0, [r7, #12]
 802cd56:	60b9      	str	r1, [r7, #8]
 802cd58:	4611      	mov	r1, r2
 802cd5a:	461a      	mov	r2, r3
 802cd5c:	460b      	mov	r3, r1
 802cd5e:	80fb      	strh	r3, [r7, #6]
 802cd60:	4613      	mov	r3, r2
 802cd62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802cd64:	68fb      	ldr	r3, [r7, #12]
 802cd66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cd6a:	2b00      	cmp	r3, #0
 802cd6c:	d001      	beq.n	802cd72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802cd6e:	2300      	movs	r3, #0
 802cd70:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cd72:	7979      	ldrb	r1, [r7, #5]
 802cd74:	7e3b      	ldrb	r3, [r7, #24]
 802cd76:	9303      	str	r3, [sp, #12]
 802cd78:	88fb      	ldrh	r3, [r7, #6]
 802cd7a:	9302      	str	r3, [sp, #8]
 802cd7c:	68bb      	ldr	r3, [r7, #8]
 802cd7e:	9301      	str	r3, [sp, #4]
 802cd80:	2301      	movs	r3, #1
 802cd82:	9300      	str	r3, [sp, #0]
 802cd84:	2302      	movs	r3, #2
 802cd86:	2200      	movs	r2, #0
 802cd88:	68f8      	ldr	r0, [r7, #12]
 802cd8a:	f000 fae4 	bl	802d356 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802cd8e:	2300      	movs	r3, #0
}
 802cd90:	4618      	mov	r0, r3
 802cd92:	3710      	adds	r7, #16
 802cd94:	46bd      	mov	sp, r7
 802cd96:	bd80      	pop	{r7, pc}

0802cd98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802cd98:	b580      	push	{r7, lr}
 802cd9a:	b088      	sub	sp, #32
 802cd9c:	af04      	add	r7, sp, #16
 802cd9e:	60f8      	str	r0, [r7, #12]
 802cda0:	60b9      	str	r1, [r7, #8]
 802cda2:	4611      	mov	r1, r2
 802cda4:	461a      	mov	r2, r3
 802cda6:	460b      	mov	r3, r1
 802cda8:	80fb      	strh	r3, [r7, #6]
 802cdaa:	4613      	mov	r3, r2
 802cdac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cdae:	7979      	ldrb	r1, [r7, #5]
 802cdb0:	2300      	movs	r3, #0
 802cdb2:	9303      	str	r3, [sp, #12]
 802cdb4:	88fb      	ldrh	r3, [r7, #6]
 802cdb6:	9302      	str	r3, [sp, #8]
 802cdb8:	68bb      	ldr	r3, [r7, #8]
 802cdba:	9301      	str	r3, [sp, #4]
 802cdbc:	2301      	movs	r3, #1
 802cdbe:	9300      	str	r3, [sp, #0]
 802cdc0:	2302      	movs	r3, #2
 802cdc2:	2201      	movs	r2, #1
 802cdc4:	68f8      	ldr	r0, [r7, #12]
 802cdc6:	f000 fac6 	bl	802d356 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cdca:	2300      	movs	r3, #0
}
 802cdcc:	4618      	mov	r0, r3
 802cdce:	3710      	adds	r7, #16
 802cdd0:	46bd      	mov	sp, r7
 802cdd2:	bd80      	pop	{r7, pc}

0802cdd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802cdd4:	b580      	push	{r7, lr}
 802cdd6:	b086      	sub	sp, #24
 802cdd8:	af04      	add	r7, sp, #16
 802cdda:	6078      	str	r0, [r7, #4]
 802cddc:	4608      	mov	r0, r1
 802cdde:	4611      	mov	r1, r2
 802cde0:	461a      	mov	r2, r3
 802cde2:	4603      	mov	r3, r0
 802cde4:	70fb      	strb	r3, [r7, #3]
 802cde6:	460b      	mov	r3, r1
 802cde8:	70bb      	strb	r3, [r7, #2]
 802cdea:	4613      	mov	r3, r2
 802cdec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802cdee:	7878      	ldrb	r0, [r7, #1]
 802cdf0:	78ba      	ldrb	r2, [r7, #2]
 802cdf2:	78f9      	ldrb	r1, [r7, #3]
 802cdf4:	8b3b      	ldrh	r3, [r7, #24]
 802cdf6:	9302      	str	r3, [sp, #8]
 802cdf8:	7d3b      	ldrb	r3, [r7, #20]
 802cdfa:	9301      	str	r3, [sp, #4]
 802cdfc:	7c3b      	ldrb	r3, [r7, #16]
 802cdfe:	9300      	str	r3, [sp, #0]
 802ce00:	4603      	mov	r3, r0
 802ce02:	6878      	ldr	r0, [r7, #4]
 802ce04:	f000 fa59 	bl	802d2ba <USBH_LL_OpenPipe>

  return USBH_OK;
 802ce08:	2300      	movs	r3, #0
}
 802ce0a:	4618      	mov	r0, r3
 802ce0c:	3708      	adds	r7, #8
 802ce0e:	46bd      	mov	sp, r7
 802ce10:	bd80      	pop	{r7, pc}

0802ce12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802ce12:	b580      	push	{r7, lr}
 802ce14:	b082      	sub	sp, #8
 802ce16:	af00      	add	r7, sp, #0
 802ce18:	6078      	str	r0, [r7, #4]
 802ce1a:	460b      	mov	r3, r1
 802ce1c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802ce1e:	78fb      	ldrb	r3, [r7, #3]
 802ce20:	4619      	mov	r1, r3
 802ce22:	6878      	ldr	r0, [r7, #4]
 802ce24:	f000 fa78 	bl	802d318 <USBH_LL_ClosePipe>

  return USBH_OK;
 802ce28:	2300      	movs	r3, #0
}
 802ce2a:	4618      	mov	r0, r3
 802ce2c:	3708      	adds	r7, #8
 802ce2e:	46bd      	mov	sp, r7
 802ce30:	bd80      	pop	{r7, pc}

0802ce32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802ce32:	b580      	push	{r7, lr}
 802ce34:	b084      	sub	sp, #16
 802ce36:	af00      	add	r7, sp, #0
 802ce38:	6078      	str	r0, [r7, #4]
 802ce3a:	460b      	mov	r3, r1
 802ce3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802ce3e:	6878      	ldr	r0, [r7, #4]
 802ce40:	f000 f836 	bl	802ceb0 <USBH_GetFreePipe>
 802ce44:	4603      	mov	r3, r0
 802ce46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802ce48:	89fb      	ldrh	r3, [r7, #14]
 802ce4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ce4e:	4293      	cmp	r3, r2
 802ce50:	d00a      	beq.n	802ce68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802ce52:	78fa      	ldrb	r2, [r7, #3]
 802ce54:	89fb      	ldrh	r3, [r7, #14]
 802ce56:	f003 030f 	and.w	r3, r3, #15
 802ce5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ce5e:	6879      	ldr	r1, [r7, #4]
 802ce60:	33e0      	adds	r3, #224	; 0xe0
 802ce62:	009b      	lsls	r3, r3, #2
 802ce64:	440b      	add	r3, r1
 802ce66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802ce68:	89fb      	ldrh	r3, [r7, #14]
 802ce6a:	b2db      	uxtb	r3, r3
}
 802ce6c:	4618      	mov	r0, r3
 802ce6e:	3710      	adds	r7, #16
 802ce70:	46bd      	mov	sp, r7
 802ce72:	bd80      	pop	{r7, pc}

0802ce74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802ce74:	b480      	push	{r7}
 802ce76:	b083      	sub	sp, #12
 802ce78:	af00      	add	r7, sp, #0
 802ce7a:	6078      	str	r0, [r7, #4]
 802ce7c:	460b      	mov	r3, r1
 802ce7e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802ce80:	78fb      	ldrb	r3, [r7, #3]
 802ce82:	2b0f      	cmp	r3, #15
 802ce84:	d80d      	bhi.n	802cea2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802ce86:	78fb      	ldrb	r3, [r7, #3]
 802ce88:	687a      	ldr	r2, [r7, #4]
 802ce8a:	33e0      	adds	r3, #224	; 0xe0
 802ce8c:	009b      	lsls	r3, r3, #2
 802ce8e:	4413      	add	r3, r2
 802ce90:	685a      	ldr	r2, [r3, #4]
 802ce92:	78fb      	ldrb	r3, [r7, #3]
 802ce94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802ce98:	6879      	ldr	r1, [r7, #4]
 802ce9a:	33e0      	adds	r3, #224	; 0xe0
 802ce9c:	009b      	lsls	r3, r3, #2
 802ce9e:	440b      	add	r3, r1
 802cea0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802cea2:	2300      	movs	r3, #0
}
 802cea4:	4618      	mov	r0, r3
 802cea6:	370c      	adds	r7, #12
 802cea8:	46bd      	mov	sp, r7
 802ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ceae:	4770      	bx	lr

0802ceb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802ceb0:	b480      	push	{r7}
 802ceb2:	b085      	sub	sp, #20
 802ceb4:	af00      	add	r7, sp, #0
 802ceb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802ceb8:	2300      	movs	r3, #0
 802ceba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802cebc:	2300      	movs	r3, #0
 802cebe:	73fb      	strb	r3, [r7, #15]
 802cec0:	e00f      	b.n	802cee2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802cec2:	7bfb      	ldrb	r3, [r7, #15]
 802cec4:	687a      	ldr	r2, [r7, #4]
 802cec6:	33e0      	adds	r3, #224	; 0xe0
 802cec8:	009b      	lsls	r3, r3, #2
 802ceca:	4413      	add	r3, r2
 802cecc:	685b      	ldr	r3, [r3, #4]
 802cece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ced2:	2b00      	cmp	r3, #0
 802ced4:	d102      	bne.n	802cedc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802ced6:	7bfb      	ldrb	r3, [r7, #15]
 802ced8:	b29b      	uxth	r3, r3
 802ceda:	e007      	b.n	802ceec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802cedc:	7bfb      	ldrb	r3, [r7, #15]
 802cede:	3301      	adds	r3, #1
 802cee0:	73fb      	strb	r3, [r7, #15]
 802cee2:	7bfb      	ldrb	r3, [r7, #15]
 802cee4:	2b0f      	cmp	r3, #15
 802cee6:	d9ec      	bls.n	802cec2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802cee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802ceec:	4618      	mov	r0, r3
 802ceee:	3714      	adds	r7, #20
 802cef0:	46bd      	mov	sp, r7
 802cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cef6:	4770      	bx	lr

0802cef8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802cef8:	b580      	push	{r7, lr}
 802cefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802cefc:	2200      	movs	r2, #0
 802cefe:	490e      	ldr	r1, [pc, #56]	; (802cf38 <MX_USB_HOST_Init+0x40>)
 802cf00:	480e      	ldr	r0, [pc, #56]	; (802cf3c <MX_USB_HOST_Init+0x44>)
 802cf02:	f7fe fba7 	bl	802b654 <USBH_Init>
 802cf06:	4603      	mov	r3, r0
 802cf08:	2b00      	cmp	r3, #0
 802cf0a:	d001      	beq.n	802cf10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802cf0c:	f7f3 ffb8 	bl	8020e80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802cf10:	490b      	ldr	r1, [pc, #44]	; (802cf40 <MX_USB_HOST_Init+0x48>)
 802cf12:	480a      	ldr	r0, [pc, #40]	; (802cf3c <MX_USB_HOST_Init+0x44>)
 802cf14:	f7fe fc2c 	bl	802b770 <USBH_RegisterClass>
 802cf18:	4603      	mov	r3, r0
 802cf1a:	2b00      	cmp	r3, #0
 802cf1c:	d001      	beq.n	802cf22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802cf1e:	f7f3 ffaf 	bl	8020e80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802cf22:	4806      	ldr	r0, [pc, #24]	; (802cf3c <MX_USB_HOST_Init+0x44>)
 802cf24:	f7fe fcb0 	bl	802b888 <USBH_Start>
 802cf28:	4603      	mov	r3, r0
 802cf2a:	2b00      	cmp	r3, #0
 802cf2c:	d001      	beq.n	802cf32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802cf2e:	f7f3 ffa7 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802cf32:	bf00      	nop
 802cf34:	bd80      	pop	{r7, pc}
 802cf36:	bf00      	nop
 802cf38:	0802cf59 	.word	0x0802cf59
 802cf3c:	20000ac4 	.word	0x20000ac4
 802cf40:	2000005c 	.word	0x2000005c

0802cf44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802cf44:	b580      	push	{r7, lr}
 802cf46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802cf48:	4802      	ldr	r0, [pc, #8]	; (802cf54 <MX_USB_HOST_Process+0x10>)
 802cf4a:	f7fe fcad 	bl	802b8a8 <USBH_Process>
}
 802cf4e:	bf00      	nop
 802cf50:	bd80      	pop	{r7, pc}
 802cf52:	bf00      	nop
 802cf54:	20000ac4 	.word	0x20000ac4

0802cf58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802cf58:	b480      	push	{r7}
 802cf5a:	b083      	sub	sp, #12
 802cf5c:	af00      	add	r7, sp, #0
 802cf5e:	6078      	str	r0, [r7, #4]
 802cf60:	460b      	mov	r3, r1
 802cf62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802cf64:	78fb      	ldrb	r3, [r7, #3]
 802cf66:	3b01      	subs	r3, #1
 802cf68:	2b04      	cmp	r3, #4
 802cf6a:	d819      	bhi.n	802cfa0 <USBH_UserProcess+0x48>
 802cf6c:	a201      	add	r2, pc, #4	; (adr r2, 802cf74 <USBH_UserProcess+0x1c>)
 802cf6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cf72:	bf00      	nop
 802cf74:	0802cfa1 	.word	0x0802cfa1
 802cf78:	0802cf91 	.word	0x0802cf91
 802cf7c:	0802cfa1 	.word	0x0802cfa1
 802cf80:	0802cf99 	.word	0x0802cf99
 802cf84:	0802cf89 	.word	0x0802cf89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802cf88:	4b09      	ldr	r3, [pc, #36]	; (802cfb0 <USBH_UserProcess+0x58>)
 802cf8a:	2203      	movs	r2, #3
 802cf8c:	701a      	strb	r2, [r3, #0]
  break;
 802cf8e:	e008      	b.n	802cfa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802cf90:	4b07      	ldr	r3, [pc, #28]	; (802cfb0 <USBH_UserProcess+0x58>)
 802cf92:	2202      	movs	r2, #2
 802cf94:	701a      	strb	r2, [r3, #0]
  break;
 802cf96:	e004      	b.n	802cfa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802cf98:	4b05      	ldr	r3, [pc, #20]	; (802cfb0 <USBH_UserProcess+0x58>)
 802cf9a:	2201      	movs	r2, #1
 802cf9c:	701a      	strb	r2, [r3, #0]
  break;
 802cf9e:	e000      	b.n	802cfa2 <USBH_UserProcess+0x4a>

  default:
  break;
 802cfa0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802cfa2:	bf00      	nop
 802cfa4:	370c      	adds	r7, #12
 802cfa6:	46bd      	mov	sp, r7
 802cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfac:	4770      	bx	lr
 802cfae:	bf00      	nop
 802cfb0:	20000e9c 	.word	0x20000e9c

0802cfb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802cfb4:	b580      	push	{r7, lr}
 802cfb6:	b08a      	sub	sp, #40	; 0x28
 802cfb8:	af00      	add	r7, sp, #0
 802cfba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802cfbc:	f107 0314 	add.w	r3, r7, #20
 802cfc0:	2200      	movs	r2, #0
 802cfc2:	601a      	str	r2, [r3, #0]
 802cfc4:	605a      	str	r2, [r3, #4]
 802cfc6:	609a      	str	r2, [r3, #8]
 802cfc8:	60da      	str	r2, [r3, #12]
 802cfca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802cfcc:	687b      	ldr	r3, [r7, #4]
 802cfce:	681b      	ldr	r3, [r3, #0]
 802cfd0:	4a24      	ldr	r2, [pc, #144]	; (802d064 <HAL_HCD_MspInit+0xb0>)
 802cfd2:	4293      	cmp	r3, r2
 802cfd4:	d141      	bne.n	802d05a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802cfd6:	2300      	movs	r3, #0
 802cfd8:	613b      	str	r3, [r7, #16]
 802cfda:	4b23      	ldr	r3, [pc, #140]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802cfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cfde:	4a22      	ldr	r2, [pc, #136]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802cfe0:	f043 0302 	orr.w	r3, r3, #2
 802cfe4:	6313      	str	r3, [r2, #48]	; 0x30
 802cfe6:	4b20      	ldr	r3, [pc, #128]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802cfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cfea:	f003 0302 	and.w	r3, r3, #2
 802cfee:	613b      	str	r3, [r7, #16]
 802cff0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802cff2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802cff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802cff8:	2302      	movs	r3, #2
 802cffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802cffc:	2300      	movs	r3, #0
 802cffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802d000:	2300      	movs	r3, #0
 802d002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802d004:	230c      	movs	r3, #12
 802d006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802d008:	f107 0314 	add.w	r3, r7, #20
 802d00c:	4619      	mov	r1, r3
 802d00e:	4817      	ldr	r0, [pc, #92]	; (802d06c <HAL_HCD_MspInit+0xb8>)
 802d010:	f7f6 ffcc 	bl	8023fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802d014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802d018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802d01a:	2300      	movs	r3, #0
 802d01c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d01e:	2300      	movs	r3, #0
 802d020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802d022:	f107 0314 	add.w	r3, r7, #20
 802d026:	4619      	mov	r1, r3
 802d028:	4810      	ldr	r0, [pc, #64]	; (802d06c <HAL_HCD_MspInit+0xb8>)
 802d02a:	f7f6 ffbf 	bl	8023fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802d02e:	2300      	movs	r3, #0
 802d030:	60fb      	str	r3, [r7, #12]
 802d032:	4b0d      	ldr	r3, [pc, #52]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802d034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d036:	4a0c      	ldr	r2, [pc, #48]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802d038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d03c:	6313      	str	r3, [r2, #48]	; 0x30
 802d03e:	4b0a      	ldr	r3, [pc, #40]	; (802d068 <HAL_HCD_MspInit+0xb4>)
 802d040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802d046:	60fb      	str	r3, [r7, #12]
 802d048:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802d04a:	2200      	movs	r2, #0
 802d04c:	2100      	movs	r1, #0
 802d04e:	204d      	movs	r0, #77	; 0x4d
 802d050:	f7f6 f97a 	bl	8023348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802d054:	204d      	movs	r0, #77	; 0x4d
 802d056:	f7f6 f993 	bl	8023380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802d05a:	bf00      	nop
 802d05c:	3728      	adds	r7, #40	; 0x28
 802d05e:	46bd      	mov	sp, r7
 802d060:	bd80      	pop	{r7, pc}
 802d062:	bf00      	nop
 802d064:	40040000 	.word	0x40040000
 802d068:	40023800 	.word	0x40023800
 802d06c:	40020400 	.word	0x40020400

0802d070 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802d070:	b580      	push	{r7, lr}
 802d072:	b082      	sub	sp, #8
 802d074:	af00      	add	r7, sp, #0
 802d076:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802d078:	687b      	ldr	r3, [r7, #4]
 802d07a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d07e:	4618      	mov	r0, r3
 802d080:	f7fe fff1 	bl	802c066 <USBH_LL_IncTimer>
}
 802d084:	bf00      	nop
 802d086:	3708      	adds	r7, #8
 802d088:	46bd      	mov	sp, r7
 802d08a:	bd80      	pop	{r7, pc}

0802d08c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d08c:	b580      	push	{r7, lr}
 802d08e:	b082      	sub	sp, #8
 802d090:	af00      	add	r7, sp, #0
 802d092:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802d094:	687b      	ldr	r3, [r7, #4]
 802d096:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d09a:	4618      	mov	r0, r3
 802d09c:	f7ff f829 	bl	802c0f2 <USBH_LL_Connect>
}
 802d0a0:	bf00      	nop
 802d0a2:	3708      	adds	r7, #8
 802d0a4:	46bd      	mov	sp, r7
 802d0a6:	bd80      	pop	{r7, pc}

0802d0a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d0a8:	b580      	push	{r7, lr}
 802d0aa:	b082      	sub	sp, #8
 802d0ac:	af00      	add	r7, sp, #0
 802d0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802d0b0:	687b      	ldr	r3, [r7, #4]
 802d0b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d0b6:	4618      	mov	r0, r3
 802d0b8:	f7ff f832 	bl	802c120 <USBH_LL_Disconnect>
}
 802d0bc:	bf00      	nop
 802d0be:	3708      	adds	r7, #8
 802d0c0:	46bd      	mov	sp, r7
 802d0c2:	bd80      	pop	{r7, pc}

0802d0c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802d0c4:	b480      	push	{r7}
 802d0c6:	b083      	sub	sp, #12
 802d0c8:	af00      	add	r7, sp, #0
 802d0ca:	6078      	str	r0, [r7, #4]
 802d0cc:	460b      	mov	r3, r1
 802d0ce:	70fb      	strb	r3, [r7, #3]
 802d0d0:	4613      	mov	r3, r2
 802d0d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802d0d4:	bf00      	nop
 802d0d6:	370c      	adds	r7, #12
 802d0d8:	46bd      	mov	sp, r7
 802d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d0de:	4770      	bx	lr

0802d0e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d0e0:	b580      	push	{r7, lr}
 802d0e2:	b082      	sub	sp, #8
 802d0e4:	af00      	add	r7, sp, #0
 802d0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802d0e8:	687b      	ldr	r3, [r7, #4]
 802d0ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d0ee:	4618      	mov	r0, r3
 802d0f0:	f7fe ffe3 	bl	802c0ba <USBH_LL_PortEnabled>
}
 802d0f4:	bf00      	nop
 802d0f6:	3708      	adds	r7, #8
 802d0f8:	46bd      	mov	sp, r7
 802d0fa:	bd80      	pop	{r7, pc}

0802d0fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d0fc:	b580      	push	{r7, lr}
 802d0fe:	b082      	sub	sp, #8
 802d100:	af00      	add	r7, sp, #0
 802d102:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802d104:	687b      	ldr	r3, [r7, #4]
 802d106:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d10a:	4618      	mov	r0, r3
 802d10c:	f7fe ffe3 	bl	802c0d6 <USBH_LL_PortDisabled>
}
 802d110:	bf00      	nop
 802d112:	3708      	adds	r7, #8
 802d114:	46bd      	mov	sp, r7
 802d116:	bd80      	pop	{r7, pc}

0802d118 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802d118:	b580      	push	{r7, lr}
 802d11a:	b082      	sub	sp, #8
 802d11c:	af00      	add	r7, sp, #0
 802d11e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802d120:	687b      	ldr	r3, [r7, #4]
 802d122:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d126:	2b00      	cmp	r3, #0
 802d128:	d132      	bne.n	802d190 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802d12a:	4a1c      	ldr	r2, [pc, #112]	; (802d19c <USBH_LL_Init+0x84>)
 802d12c:	687b      	ldr	r3, [r7, #4]
 802d12e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802d132:	687b      	ldr	r3, [r7, #4]
 802d134:	4a19      	ldr	r2, [pc, #100]	; (802d19c <USBH_LL_Init+0x84>)
 802d136:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802d13a:	4b18      	ldr	r3, [pc, #96]	; (802d19c <USBH_LL_Init+0x84>)
 802d13c:	4a18      	ldr	r2, [pc, #96]	; (802d1a0 <USBH_LL_Init+0x88>)
 802d13e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802d140:	4b16      	ldr	r3, [pc, #88]	; (802d19c <USBH_LL_Init+0x84>)
 802d142:	220c      	movs	r2, #12
 802d144:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802d146:	4b15      	ldr	r3, [pc, #84]	; (802d19c <USBH_LL_Init+0x84>)
 802d148:	2201      	movs	r2, #1
 802d14a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802d14c:	4b13      	ldr	r3, [pc, #76]	; (802d19c <USBH_LL_Init+0x84>)
 802d14e:	2200      	movs	r2, #0
 802d150:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802d152:	4b12      	ldr	r3, [pc, #72]	; (802d19c <USBH_LL_Init+0x84>)
 802d154:	2202      	movs	r2, #2
 802d156:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802d158:	4b10      	ldr	r3, [pc, #64]	; (802d19c <USBH_LL_Init+0x84>)
 802d15a:	2200      	movs	r2, #0
 802d15c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802d15e:	4b0f      	ldr	r3, [pc, #60]	; (802d19c <USBH_LL_Init+0x84>)
 802d160:	2200      	movs	r2, #0
 802d162:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802d164:	4b0d      	ldr	r3, [pc, #52]	; (802d19c <USBH_LL_Init+0x84>)
 802d166:	2200      	movs	r2, #0
 802d168:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802d16a:	4b0c      	ldr	r3, [pc, #48]	; (802d19c <USBH_LL_Init+0x84>)
 802d16c:	2200      	movs	r2, #0
 802d16e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802d170:	480a      	ldr	r0, [pc, #40]	; (802d19c <USBH_LL_Init+0x84>)
 802d172:	f7f7 fa05 	bl	8024580 <HAL_HCD_Init>
 802d176:	4603      	mov	r3, r0
 802d178:	2b00      	cmp	r3, #0
 802d17a:	d001      	beq.n	802d180 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802d17c:	f7f3 fe80 	bl	8020e80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802d180:	4806      	ldr	r0, [pc, #24]	; (802d19c <USBH_LL_Init+0x84>)
 802d182:	f7f7 fde8 	bl	8024d56 <HAL_HCD_GetCurrentFrame>
 802d186:	4603      	mov	r3, r0
 802d188:	4619      	mov	r1, r3
 802d18a:	6878      	ldr	r0, [r7, #4]
 802d18c:	f7fe ff5c 	bl	802c048 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802d190:	2300      	movs	r3, #0
}
 802d192:	4618      	mov	r0, r3
 802d194:	3708      	adds	r7, #8
 802d196:	46bd      	mov	sp, r7
 802d198:	bd80      	pop	{r7, pc}
 802d19a:	bf00      	nop
 802d19c:	20000ea0 	.word	0x20000ea0
 802d1a0:	40040000 	.word	0x40040000

0802d1a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802d1a4:	b580      	push	{r7, lr}
 802d1a6:	b084      	sub	sp, #16
 802d1a8:	af00      	add	r7, sp, #0
 802d1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d1ac:	2300      	movs	r3, #0
 802d1ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d1b0:	2300      	movs	r3, #0
 802d1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802d1b4:	687b      	ldr	r3, [r7, #4]
 802d1b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d1ba:	4618      	mov	r0, r3
 802d1bc:	f7f7 fd55 	bl	8024c6a <HAL_HCD_Start>
 802d1c0:	4603      	mov	r3, r0
 802d1c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d1c4:	7bfb      	ldrb	r3, [r7, #15]
 802d1c6:	4618      	mov	r0, r3
 802d1c8:	f000 f95c 	bl	802d484 <USBH_Get_USB_Status>
 802d1cc:	4603      	mov	r3, r0
 802d1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 802d1d2:	4618      	mov	r0, r3
 802d1d4:	3710      	adds	r7, #16
 802d1d6:	46bd      	mov	sp, r7
 802d1d8:	bd80      	pop	{r7, pc}

0802d1da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802d1da:	b580      	push	{r7, lr}
 802d1dc:	b084      	sub	sp, #16
 802d1de:	af00      	add	r7, sp, #0
 802d1e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d1e2:	2300      	movs	r3, #0
 802d1e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d1e6:	2300      	movs	r3, #0
 802d1e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802d1ea:	687b      	ldr	r3, [r7, #4]
 802d1ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d1f0:	4618      	mov	r0, r3
 802d1f2:	f7f7 fd5d 	bl	8024cb0 <HAL_HCD_Stop>
 802d1f6:	4603      	mov	r3, r0
 802d1f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d1fa:	7bfb      	ldrb	r3, [r7, #15]
 802d1fc:	4618      	mov	r0, r3
 802d1fe:	f000 f941 	bl	802d484 <USBH_Get_USB_Status>
 802d202:	4603      	mov	r3, r0
 802d204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d206:	7bbb      	ldrb	r3, [r7, #14]
}
 802d208:	4618      	mov	r0, r3
 802d20a:	3710      	adds	r7, #16
 802d20c:	46bd      	mov	sp, r7
 802d20e:	bd80      	pop	{r7, pc}

0802d210 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802d210:	b580      	push	{r7, lr}
 802d212:	b084      	sub	sp, #16
 802d214:	af00      	add	r7, sp, #0
 802d216:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802d218:	2301      	movs	r3, #1
 802d21a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802d21c:	687b      	ldr	r3, [r7, #4]
 802d21e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d222:	4618      	mov	r0, r3
 802d224:	f7f7 fda5 	bl	8024d72 <HAL_HCD_GetCurrentSpeed>
 802d228:	4603      	mov	r3, r0
 802d22a:	2b02      	cmp	r3, #2
 802d22c:	d00c      	beq.n	802d248 <USBH_LL_GetSpeed+0x38>
 802d22e:	2b02      	cmp	r3, #2
 802d230:	d80d      	bhi.n	802d24e <USBH_LL_GetSpeed+0x3e>
 802d232:	2b00      	cmp	r3, #0
 802d234:	d002      	beq.n	802d23c <USBH_LL_GetSpeed+0x2c>
 802d236:	2b01      	cmp	r3, #1
 802d238:	d003      	beq.n	802d242 <USBH_LL_GetSpeed+0x32>
 802d23a:	e008      	b.n	802d24e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802d23c:	2300      	movs	r3, #0
 802d23e:	73fb      	strb	r3, [r7, #15]
    break;
 802d240:	e008      	b.n	802d254 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802d242:	2301      	movs	r3, #1
 802d244:	73fb      	strb	r3, [r7, #15]
    break;
 802d246:	e005      	b.n	802d254 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802d248:	2302      	movs	r3, #2
 802d24a:	73fb      	strb	r3, [r7, #15]
    break;
 802d24c:	e002      	b.n	802d254 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802d24e:	2301      	movs	r3, #1
 802d250:	73fb      	strb	r3, [r7, #15]
    break;
 802d252:	bf00      	nop
  }
  return  speed;
 802d254:	7bfb      	ldrb	r3, [r7, #15]
}
 802d256:	4618      	mov	r0, r3
 802d258:	3710      	adds	r7, #16
 802d25a:	46bd      	mov	sp, r7
 802d25c:	bd80      	pop	{r7, pc}

0802d25e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802d25e:	b580      	push	{r7, lr}
 802d260:	b084      	sub	sp, #16
 802d262:	af00      	add	r7, sp, #0
 802d264:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d266:	2300      	movs	r3, #0
 802d268:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d26a:	2300      	movs	r3, #0
 802d26c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802d26e:	687b      	ldr	r3, [r7, #4]
 802d270:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d274:	4618      	mov	r0, r3
 802d276:	f7f7 fd38 	bl	8024cea <HAL_HCD_ResetPort>
 802d27a:	4603      	mov	r3, r0
 802d27c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d27e:	7bfb      	ldrb	r3, [r7, #15]
 802d280:	4618      	mov	r0, r3
 802d282:	f000 f8ff 	bl	802d484 <USBH_Get_USB_Status>
 802d286:	4603      	mov	r3, r0
 802d288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d28a:	7bbb      	ldrb	r3, [r7, #14]
}
 802d28c:	4618      	mov	r0, r3
 802d28e:	3710      	adds	r7, #16
 802d290:	46bd      	mov	sp, r7
 802d292:	bd80      	pop	{r7, pc}

0802d294 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d294:	b580      	push	{r7, lr}
 802d296:	b082      	sub	sp, #8
 802d298:	af00      	add	r7, sp, #0
 802d29a:	6078      	str	r0, [r7, #4]
 802d29c:	460b      	mov	r3, r1
 802d29e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802d2a0:	687b      	ldr	r3, [r7, #4]
 802d2a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d2a6:	78fa      	ldrb	r2, [r7, #3]
 802d2a8:	4611      	mov	r1, r2
 802d2aa:	4618      	mov	r0, r3
 802d2ac:	f7f7 fd3f 	bl	8024d2e <HAL_HCD_HC_GetXferCount>
 802d2b0:	4603      	mov	r3, r0
}
 802d2b2:	4618      	mov	r0, r3
 802d2b4:	3708      	adds	r7, #8
 802d2b6:	46bd      	mov	sp, r7
 802d2b8:	bd80      	pop	{r7, pc}

0802d2ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d2ba:	b590      	push	{r4, r7, lr}
 802d2bc:	b089      	sub	sp, #36	; 0x24
 802d2be:	af04      	add	r7, sp, #16
 802d2c0:	6078      	str	r0, [r7, #4]
 802d2c2:	4608      	mov	r0, r1
 802d2c4:	4611      	mov	r1, r2
 802d2c6:	461a      	mov	r2, r3
 802d2c8:	4603      	mov	r3, r0
 802d2ca:	70fb      	strb	r3, [r7, #3]
 802d2cc:	460b      	mov	r3, r1
 802d2ce:	70bb      	strb	r3, [r7, #2]
 802d2d0:	4613      	mov	r3, r2
 802d2d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d2d4:	2300      	movs	r3, #0
 802d2d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d2d8:	2300      	movs	r3, #0
 802d2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802d2dc:	687b      	ldr	r3, [r7, #4]
 802d2de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d2e2:	787c      	ldrb	r4, [r7, #1]
 802d2e4:	78ba      	ldrb	r2, [r7, #2]
 802d2e6:	78f9      	ldrb	r1, [r7, #3]
 802d2e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d2ea:	9302      	str	r3, [sp, #8]
 802d2ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d2f0:	9301      	str	r3, [sp, #4]
 802d2f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d2f6:	9300      	str	r3, [sp, #0]
 802d2f8:	4623      	mov	r3, r4
 802d2fa:	f7f7 f9a3 	bl	8024644 <HAL_HCD_HC_Init>
 802d2fe:	4603      	mov	r3, r0
 802d300:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802d302:	7bfb      	ldrb	r3, [r7, #15]
 802d304:	4618      	mov	r0, r3
 802d306:	f000 f8bd 	bl	802d484 <USBH_Get_USB_Status>
 802d30a:	4603      	mov	r3, r0
 802d30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d30e:	7bbb      	ldrb	r3, [r7, #14]
}
 802d310:	4618      	mov	r0, r3
 802d312:	3714      	adds	r7, #20
 802d314:	46bd      	mov	sp, r7
 802d316:	bd90      	pop	{r4, r7, pc}

0802d318 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d318:	b580      	push	{r7, lr}
 802d31a:	b084      	sub	sp, #16
 802d31c:	af00      	add	r7, sp, #0
 802d31e:	6078      	str	r0, [r7, #4]
 802d320:	460b      	mov	r3, r1
 802d322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d324:	2300      	movs	r3, #0
 802d326:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d328:	2300      	movs	r3, #0
 802d32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802d32c:	687b      	ldr	r3, [r7, #4]
 802d32e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d332:	78fa      	ldrb	r2, [r7, #3]
 802d334:	4611      	mov	r1, r2
 802d336:	4618      	mov	r0, r3
 802d338:	f7f7 fa13 	bl	8024762 <HAL_HCD_HC_Halt>
 802d33c:	4603      	mov	r3, r0
 802d33e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d340:	7bfb      	ldrb	r3, [r7, #15]
 802d342:	4618      	mov	r0, r3
 802d344:	f000 f89e 	bl	802d484 <USBH_Get_USB_Status>
 802d348:	4603      	mov	r3, r0
 802d34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d34c:	7bbb      	ldrb	r3, [r7, #14]
}
 802d34e:	4618      	mov	r0, r3
 802d350:	3710      	adds	r7, #16
 802d352:	46bd      	mov	sp, r7
 802d354:	bd80      	pop	{r7, pc}

0802d356 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802d356:	b590      	push	{r4, r7, lr}
 802d358:	b089      	sub	sp, #36	; 0x24
 802d35a:	af04      	add	r7, sp, #16
 802d35c:	6078      	str	r0, [r7, #4]
 802d35e:	4608      	mov	r0, r1
 802d360:	4611      	mov	r1, r2
 802d362:	461a      	mov	r2, r3
 802d364:	4603      	mov	r3, r0
 802d366:	70fb      	strb	r3, [r7, #3]
 802d368:	460b      	mov	r3, r1
 802d36a:	70bb      	strb	r3, [r7, #2]
 802d36c:	4613      	mov	r3, r2
 802d36e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d370:	2300      	movs	r3, #0
 802d372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d374:	2300      	movs	r3, #0
 802d376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802d378:	687b      	ldr	r3, [r7, #4]
 802d37a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d37e:	787c      	ldrb	r4, [r7, #1]
 802d380:	78ba      	ldrb	r2, [r7, #2]
 802d382:	78f9      	ldrb	r1, [r7, #3]
 802d384:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802d388:	9303      	str	r3, [sp, #12]
 802d38a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d38c:	9302      	str	r3, [sp, #8]
 802d38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d390:	9301      	str	r3, [sp, #4]
 802d392:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d396:	9300      	str	r3, [sp, #0]
 802d398:	4623      	mov	r3, r4
 802d39a:	f7f7 fa05 	bl	80247a8 <HAL_HCD_HC_SubmitRequest>
 802d39e:	4603      	mov	r3, r0
 802d3a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802d3a2:	7bfb      	ldrb	r3, [r7, #15]
 802d3a4:	4618      	mov	r0, r3
 802d3a6:	f000 f86d 	bl	802d484 <USBH_Get_USB_Status>
 802d3aa:	4603      	mov	r3, r0
 802d3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 802d3b0:	4618      	mov	r0, r3
 802d3b2:	3714      	adds	r7, #20
 802d3b4:	46bd      	mov	sp, r7
 802d3b6:	bd90      	pop	{r4, r7, pc}

0802d3b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d3b8:	b580      	push	{r7, lr}
 802d3ba:	b082      	sub	sp, #8
 802d3bc:	af00      	add	r7, sp, #0
 802d3be:	6078      	str	r0, [r7, #4]
 802d3c0:	460b      	mov	r3, r1
 802d3c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802d3c4:	687b      	ldr	r3, [r7, #4]
 802d3c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d3ca:	78fa      	ldrb	r2, [r7, #3]
 802d3cc:	4611      	mov	r1, r2
 802d3ce:	4618      	mov	r0, r3
 802d3d0:	f7f7 fc99 	bl	8024d06 <HAL_HCD_HC_GetURBState>
 802d3d4:	4603      	mov	r3, r0
}
 802d3d6:	4618      	mov	r0, r3
 802d3d8:	3708      	adds	r7, #8
 802d3da:	46bd      	mov	sp, r7
 802d3dc:	bd80      	pop	{r7, pc}

0802d3de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802d3de:	b580      	push	{r7, lr}
 802d3e0:	b082      	sub	sp, #8
 802d3e2:	af00      	add	r7, sp, #0
 802d3e4:	6078      	str	r0, [r7, #4]
 802d3e6:	460b      	mov	r3, r1
 802d3e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802d3ea:	687b      	ldr	r3, [r7, #4]
 802d3ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d3f0:	2b00      	cmp	r3, #0
 802d3f2:	d103      	bne.n	802d3fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802d3f4:	78fb      	ldrb	r3, [r7, #3]
 802d3f6:	4618      	mov	r0, r3
 802d3f8:	f000 f870 	bl	802d4dc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802d3fc:	20c8      	movs	r0, #200	; 0xc8
 802d3fe:	f7f5 fec7 	bl	8023190 <HAL_Delay>
  return USBH_OK;
 802d402:	2300      	movs	r3, #0
}
 802d404:	4618      	mov	r0, r3
 802d406:	3708      	adds	r7, #8
 802d408:	46bd      	mov	sp, r7
 802d40a:	bd80      	pop	{r7, pc}

0802d40c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802d40c:	b480      	push	{r7}
 802d40e:	b085      	sub	sp, #20
 802d410:	af00      	add	r7, sp, #0
 802d412:	6078      	str	r0, [r7, #4]
 802d414:	460b      	mov	r3, r1
 802d416:	70fb      	strb	r3, [r7, #3]
 802d418:	4613      	mov	r3, r2
 802d41a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802d41c:	687b      	ldr	r3, [r7, #4]
 802d41e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d422:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802d424:	78fb      	ldrb	r3, [r7, #3]
 802d426:	68fa      	ldr	r2, [r7, #12]
 802d428:	212c      	movs	r1, #44	; 0x2c
 802d42a:	fb01 f303 	mul.w	r3, r1, r3
 802d42e:	4413      	add	r3, r2
 802d430:	333b      	adds	r3, #59	; 0x3b
 802d432:	781b      	ldrb	r3, [r3, #0]
 802d434:	2b00      	cmp	r3, #0
 802d436:	d009      	beq.n	802d44c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802d438:	78fb      	ldrb	r3, [r7, #3]
 802d43a:	68fa      	ldr	r2, [r7, #12]
 802d43c:	212c      	movs	r1, #44	; 0x2c
 802d43e:	fb01 f303 	mul.w	r3, r1, r3
 802d442:	4413      	add	r3, r2
 802d444:	3354      	adds	r3, #84	; 0x54
 802d446:	78ba      	ldrb	r2, [r7, #2]
 802d448:	701a      	strb	r2, [r3, #0]
 802d44a:	e008      	b.n	802d45e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802d44c:	78fb      	ldrb	r3, [r7, #3]
 802d44e:	68fa      	ldr	r2, [r7, #12]
 802d450:	212c      	movs	r1, #44	; 0x2c
 802d452:	fb01 f303 	mul.w	r3, r1, r3
 802d456:	4413      	add	r3, r2
 802d458:	3355      	adds	r3, #85	; 0x55
 802d45a:	78ba      	ldrb	r2, [r7, #2]
 802d45c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802d45e:	2300      	movs	r3, #0
}
 802d460:	4618      	mov	r0, r3
 802d462:	3714      	adds	r7, #20
 802d464:	46bd      	mov	sp, r7
 802d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d46a:	4770      	bx	lr

0802d46c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802d46c:	b580      	push	{r7, lr}
 802d46e:	b082      	sub	sp, #8
 802d470:	af00      	add	r7, sp, #0
 802d472:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802d474:	6878      	ldr	r0, [r7, #4]
 802d476:	f7f5 fe8b 	bl	8023190 <HAL_Delay>
}
 802d47a:	bf00      	nop
 802d47c:	3708      	adds	r7, #8
 802d47e:	46bd      	mov	sp, r7
 802d480:	bd80      	pop	{r7, pc}
	...

0802d484 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802d484:	b480      	push	{r7}
 802d486:	b085      	sub	sp, #20
 802d488:	af00      	add	r7, sp, #0
 802d48a:	4603      	mov	r3, r0
 802d48c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d48e:	2300      	movs	r3, #0
 802d490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802d492:	79fb      	ldrb	r3, [r7, #7]
 802d494:	2b03      	cmp	r3, #3
 802d496:	d817      	bhi.n	802d4c8 <USBH_Get_USB_Status+0x44>
 802d498:	a201      	add	r2, pc, #4	; (adr r2, 802d4a0 <USBH_Get_USB_Status+0x1c>)
 802d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d49e:	bf00      	nop
 802d4a0:	0802d4b1 	.word	0x0802d4b1
 802d4a4:	0802d4b7 	.word	0x0802d4b7
 802d4a8:	0802d4bd 	.word	0x0802d4bd
 802d4ac:	0802d4c3 	.word	0x0802d4c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802d4b0:	2300      	movs	r3, #0
 802d4b2:	73fb      	strb	r3, [r7, #15]
    break;
 802d4b4:	e00b      	b.n	802d4ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802d4b6:	2302      	movs	r3, #2
 802d4b8:	73fb      	strb	r3, [r7, #15]
    break;
 802d4ba:	e008      	b.n	802d4ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802d4bc:	2301      	movs	r3, #1
 802d4be:	73fb      	strb	r3, [r7, #15]
    break;
 802d4c0:	e005      	b.n	802d4ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802d4c2:	2302      	movs	r3, #2
 802d4c4:	73fb      	strb	r3, [r7, #15]
    break;
 802d4c6:	e002      	b.n	802d4ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802d4c8:	2302      	movs	r3, #2
 802d4ca:	73fb      	strb	r3, [r7, #15]
    break;
 802d4cc:	bf00      	nop
  }
  return usb_status;
 802d4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 802d4d0:	4618      	mov	r0, r3
 802d4d2:	3714      	adds	r7, #20
 802d4d4:	46bd      	mov	sp, r7
 802d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4da:	4770      	bx	lr

0802d4dc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802d4dc:	b580      	push	{r7, lr}
 802d4de:	b084      	sub	sp, #16
 802d4e0:	af00      	add	r7, sp, #0
 802d4e2:	4603      	mov	r3, r0
 802d4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802d4e6:	79fb      	ldrb	r3, [r7, #7]
 802d4e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802d4ea:	79fb      	ldrb	r3, [r7, #7]
 802d4ec:	2b00      	cmp	r3, #0
 802d4ee:	d102      	bne.n	802d4f6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802d4f0:	2301      	movs	r3, #1
 802d4f2:	73fb      	strb	r3, [r7, #15]
 802d4f4:	e001      	b.n	802d4fa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802d4f6:	2300      	movs	r3, #0
 802d4f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802d4fa:	7bfb      	ldrb	r3, [r7, #15]
 802d4fc:	461a      	mov	r2, r3
 802d4fe:	2110      	movs	r1, #16
 802d500:	4803      	ldr	r0, [pc, #12]	; (802d510 <MX_DriverVbusHS+0x34>)
 802d502:	f7f7 f80b 	bl	802451c <HAL_GPIO_WritePin>
}
 802d506:	bf00      	nop
 802d508:	3710      	adds	r7, #16
 802d50a:	46bd      	mov	sp, r7
 802d50c:	bd80      	pop	{r7, pc}
 802d50e:	bf00      	nop
 802d510:	40020800 	.word	0x40020800

0802d514 <__errno>:
 802d514:	4b01      	ldr	r3, [pc, #4]	; (802d51c <__errno+0x8>)
 802d516:	6818      	ldr	r0, [r3, #0]
 802d518:	4770      	bx	lr
 802d51a:	bf00      	nop
 802d51c:	2000007c 	.word	0x2000007c

0802d520 <__libc_init_array>:
 802d520:	b570      	push	{r4, r5, r6, lr}
 802d522:	4d0d      	ldr	r5, [pc, #52]	; (802d558 <__libc_init_array+0x38>)
 802d524:	4c0d      	ldr	r4, [pc, #52]	; (802d55c <__libc_init_array+0x3c>)
 802d526:	1b64      	subs	r4, r4, r5
 802d528:	10a4      	asrs	r4, r4, #2
 802d52a:	2600      	movs	r6, #0
 802d52c:	42a6      	cmp	r6, r4
 802d52e:	d109      	bne.n	802d544 <__libc_init_array+0x24>
 802d530:	4d0b      	ldr	r5, [pc, #44]	; (802d560 <__libc_init_array+0x40>)
 802d532:	4c0c      	ldr	r4, [pc, #48]	; (802d564 <__libc_init_array+0x44>)
 802d534:	f001 fa10 	bl	802e958 <_init>
 802d538:	1b64      	subs	r4, r4, r5
 802d53a:	10a4      	asrs	r4, r4, #2
 802d53c:	2600      	movs	r6, #0
 802d53e:	42a6      	cmp	r6, r4
 802d540:	d105      	bne.n	802d54e <__libc_init_array+0x2e>
 802d542:	bd70      	pop	{r4, r5, r6, pc}
 802d544:	f855 3b04 	ldr.w	r3, [r5], #4
 802d548:	4798      	blx	r3
 802d54a:	3601      	adds	r6, #1
 802d54c:	e7ee      	b.n	802d52c <__libc_init_array+0xc>
 802d54e:	f855 3b04 	ldr.w	r3, [r5], #4
 802d552:	4798      	blx	r3
 802d554:	3601      	adds	r6, #1
 802d556:	e7f2      	b.n	802d53e <__libc_init_array+0x1e>
 802d558:	08030e2c 	.word	0x08030e2c
 802d55c:	08030e2c 	.word	0x08030e2c
 802d560:	08030e2c 	.word	0x08030e2c
 802d564:	08030e30 	.word	0x08030e30

0802d568 <malloc>:
 802d568:	4b02      	ldr	r3, [pc, #8]	; (802d574 <malloc+0xc>)
 802d56a:	4601      	mov	r1, r0
 802d56c:	6818      	ldr	r0, [r3, #0]
 802d56e:	f000 b87f 	b.w	802d670 <_malloc_r>
 802d572:	bf00      	nop
 802d574:	2000007c 	.word	0x2000007c

0802d578 <free>:
 802d578:	4b02      	ldr	r3, [pc, #8]	; (802d584 <free+0xc>)
 802d57a:	4601      	mov	r1, r0
 802d57c:	6818      	ldr	r0, [r3, #0]
 802d57e:	f000 b80b 	b.w	802d598 <_free_r>
 802d582:	bf00      	nop
 802d584:	2000007c 	.word	0x2000007c

0802d588 <memset>:
 802d588:	4402      	add	r2, r0
 802d58a:	4603      	mov	r3, r0
 802d58c:	4293      	cmp	r3, r2
 802d58e:	d100      	bne.n	802d592 <memset+0xa>
 802d590:	4770      	bx	lr
 802d592:	f803 1b01 	strb.w	r1, [r3], #1
 802d596:	e7f9      	b.n	802d58c <memset+0x4>

0802d598 <_free_r>:
 802d598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d59a:	2900      	cmp	r1, #0
 802d59c:	d044      	beq.n	802d628 <_free_r+0x90>
 802d59e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d5a2:	9001      	str	r0, [sp, #4]
 802d5a4:	2b00      	cmp	r3, #0
 802d5a6:	f1a1 0404 	sub.w	r4, r1, #4
 802d5aa:	bfb8      	it	lt
 802d5ac:	18e4      	addlt	r4, r4, r3
 802d5ae:	f000 fc71 	bl	802de94 <__malloc_lock>
 802d5b2:	4a1e      	ldr	r2, [pc, #120]	; (802d62c <_free_r+0x94>)
 802d5b4:	9801      	ldr	r0, [sp, #4]
 802d5b6:	6813      	ldr	r3, [r2, #0]
 802d5b8:	b933      	cbnz	r3, 802d5c8 <_free_r+0x30>
 802d5ba:	6063      	str	r3, [r4, #4]
 802d5bc:	6014      	str	r4, [r2, #0]
 802d5be:	b003      	add	sp, #12
 802d5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d5c4:	f000 bc6c 	b.w	802dea0 <__malloc_unlock>
 802d5c8:	42a3      	cmp	r3, r4
 802d5ca:	d908      	bls.n	802d5de <_free_r+0x46>
 802d5cc:	6825      	ldr	r5, [r4, #0]
 802d5ce:	1961      	adds	r1, r4, r5
 802d5d0:	428b      	cmp	r3, r1
 802d5d2:	bf01      	itttt	eq
 802d5d4:	6819      	ldreq	r1, [r3, #0]
 802d5d6:	685b      	ldreq	r3, [r3, #4]
 802d5d8:	1949      	addeq	r1, r1, r5
 802d5da:	6021      	streq	r1, [r4, #0]
 802d5dc:	e7ed      	b.n	802d5ba <_free_r+0x22>
 802d5de:	461a      	mov	r2, r3
 802d5e0:	685b      	ldr	r3, [r3, #4]
 802d5e2:	b10b      	cbz	r3, 802d5e8 <_free_r+0x50>
 802d5e4:	42a3      	cmp	r3, r4
 802d5e6:	d9fa      	bls.n	802d5de <_free_r+0x46>
 802d5e8:	6811      	ldr	r1, [r2, #0]
 802d5ea:	1855      	adds	r5, r2, r1
 802d5ec:	42a5      	cmp	r5, r4
 802d5ee:	d10b      	bne.n	802d608 <_free_r+0x70>
 802d5f0:	6824      	ldr	r4, [r4, #0]
 802d5f2:	4421      	add	r1, r4
 802d5f4:	1854      	adds	r4, r2, r1
 802d5f6:	42a3      	cmp	r3, r4
 802d5f8:	6011      	str	r1, [r2, #0]
 802d5fa:	d1e0      	bne.n	802d5be <_free_r+0x26>
 802d5fc:	681c      	ldr	r4, [r3, #0]
 802d5fe:	685b      	ldr	r3, [r3, #4]
 802d600:	6053      	str	r3, [r2, #4]
 802d602:	4421      	add	r1, r4
 802d604:	6011      	str	r1, [r2, #0]
 802d606:	e7da      	b.n	802d5be <_free_r+0x26>
 802d608:	d902      	bls.n	802d610 <_free_r+0x78>
 802d60a:	230c      	movs	r3, #12
 802d60c:	6003      	str	r3, [r0, #0]
 802d60e:	e7d6      	b.n	802d5be <_free_r+0x26>
 802d610:	6825      	ldr	r5, [r4, #0]
 802d612:	1961      	adds	r1, r4, r5
 802d614:	428b      	cmp	r3, r1
 802d616:	bf04      	itt	eq
 802d618:	6819      	ldreq	r1, [r3, #0]
 802d61a:	685b      	ldreq	r3, [r3, #4]
 802d61c:	6063      	str	r3, [r4, #4]
 802d61e:	bf04      	itt	eq
 802d620:	1949      	addeq	r1, r1, r5
 802d622:	6021      	streq	r1, [r4, #0]
 802d624:	6054      	str	r4, [r2, #4]
 802d626:	e7ca      	b.n	802d5be <_free_r+0x26>
 802d628:	b003      	add	sp, #12
 802d62a:	bd30      	pop	{r4, r5, pc}
 802d62c:	200011a4 	.word	0x200011a4

0802d630 <sbrk_aligned>:
 802d630:	b570      	push	{r4, r5, r6, lr}
 802d632:	4e0e      	ldr	r6, [pc, #56]	; (802d66c <sbrk_aligned+0x3c>)
 802d634:	460c      	mov	r4, r1
 802d636:	6831      	ldr	r1, [r6, #0]
 802d638:	4605      	mov	r5, r0
 802d63a:	b911      	cbnz	r1, 802d642 <sbrk_aligned+0x12>
 802d63c:	f000 f91a 	bl	802d874 <_sbrk_r>
 802d640:	6030      	str	r0, [r6, #0]
 802d642:	4621      	mov	r1, r4
 802d644:	4628      	mov	r0, r5
 802d646:	f000 f915 	bl	802d874 <_sbrk_r>
 802d64a:	1c43      	adds	r3, r0, #1
 802d64c:	d00a      	beq.n	802d664 <sbrk_aligned+0x34>
 802d64e:	1cc4      	adds	r4, r0, #3
 802d650:	f024 0403 	bic.w	r4, r4, #3
 802d654:	42a0      	cmp	r0, r4
 802d656:	d007      	beq.n	802d668 <sbrk_aligned+0x38>
 802d658:	1a21      	subs	r1, r4, r0
 802d65a:	4628      	mov	r0, r5
 802d65c:	f000 f90a 	bl	802d874 <_sbrk_r>
 802d660:	3001      	adds	r0, #1
 802d662:	d101      	bne.n	802d668 <sbrk_aligned+0x38>
 802d664:	f04f 34ff 	mov.w	r4, #4294967295
 802d668:	4620      	mov	r0, r4
 802d66a:	bd70      	pop	{r4, r5, r6, pc}
 802d66c:	200011a8 	.word	0x200011a8

0802d670 <_malloc_r>:
 802d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d674:	1ccd      	adds	r5, r1, #3
 802d676:	f025 0503 	bic.w	r5, r5, #3
 802d67a:	3508      	adds	r5, #8
 802d67c:	2d0c      	cmp	r5, #12
 802d67e:	bf38      	it	cc
 802d680:	250c      	movcc	r5, #12
 802d682:	2d00      	cmp	r5, #0
 802d684:	4607      	mov	r7, r0
 802d686:	db01      	blt.n	802d68c <_malloc_r+0x1c>
 802d688:	42a9      	cmp	r1, r5
 802d68a:	d905      	bls.n	802d698 <_malloc_r+0x28>
 802d68c:	230c      	movs	r3, #12
 802d68e:	603b      	str	r3, [r7, #0]
 802d690:	2600      	movs	r6, #0
 802d692:	4630      	mov	r0, r6
 802d694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d698:	4e2e      	ldr	r6, [pc, #184]	; (802d754 <_malloc_r+0xe4>)
 802d69a:	f000 fbfb 	bl	802de94 <__malloc_lock>
 802d69e:	6833      	ldr	r3, [r6, #0]
 802d6a0:	461c      	mov	r4, r3
 802d6a2:	bb34      	cbnz	r4, 802d6f2 <_malloc_r+0x82>
 802d6a4:	4629      	mov	r1, r5
 802d6a6:	4638      	mov	r0, r7
 802d6a8:	f7ff ffc2 	bl	802d630 <sbrk_aligned>
 802d6ac:	1c43      	adds	r3, r0, #1
 802d6ae:	4604      	mov	r4, r0
 802d6b0:	d14d      	bne.n	802d74e <_malloc_r+0xde>
 802d6b2:	6834      	ldr	r4, [r6, #0]
 802d6b4:	4626      	mov	r6, r4
 802d6b6:	2e00      	cmp	r6, #0
 802d6b8:	d140      	bne.n	802d73c <_malloc_r+0xcc>
 802d6ba:	6823      	ldr	r3, [r4, #0]
 802d6bc:	4631      	mov	r1, r6
 802d6be:	4638      	mov	r0, r7
 802d6c0:	eb04 0803 	add.w	r8, r4, r3
 802d6c4:	f000 f8d6 	bl	802d874 <_sbrk_r>
 802d6c8:	4580      	cmp	r8, r0
 802d6ca:	d13a      	bne.n	802d742 <_malloc_r+0xd2>
 802d6cc:	6821      	ldr	r1, [r4, #0]
 802d6ce:	3503      	adds	r5, #3
 802d6d0:	1a6d      	subs	r5, r5, r1
 802d6d2:	f025 0503 	bic.w	r5, r5, #3
 802d6d6:	3508      	adds	r5, #8
 802d6d8:	2d0c      	cmp	r5, #12
 802d6da:	bf38      	it	cc
 802d6dc:	250c      	movcc	r5, #12
 802d6de:	4629      	mov	r1, r5
 802d6e0:	4638      	mov	r0, r7
 802d6e2:	f7ff ffa5 	bl	802d630 <sbrk_aligned>
 802d6e6:	3001      	adds	r0, #1
 802d6e8:	d02b      	beq.n	802d742 <_malloc_r+0xd2>
 802d6ea:	6823      	ldr	r3, [r4, #0]
 802d6ec:	442b      	add	r3, r5
 802d6ee:	6023      	str	r3, [r4, #0]
 802d6f0:	e00e      	b.n	802d710 <_malloc_r+0xa0>
 802d6f2:	6822      	ldr	r2, [r4, #0]
 802d6f4:	1b52      	subs	r2, r2, r5
 802d6f6:	d41e      	bmi.n	802d736 <_malloc_r+0xc6>
 802d6f8:	2a0b      	cmp	r2, #11
 802d6fa:	d916      	bls.n	802d72a <_malloc_r+0xba>
 802d6fc:	1961      	adds	r1, r4, r5
 802d6fe:	42a3      	cmp	r3, r4
 802d700:	6025      	str	r5, [r4, #0]
 802d702:	bf18      	it	ne
 802d704:	6059      	strne	r1, [r3, #4]
 802d706:	6863      	ldr	r3, [r4, #4]
 802d708:	bf08      	it	eq
 802d70a:	6031      	streq	r1, [r6, #0]
 802d70c:	5162      	str	r2, [r4, r5]
 802d70e:	604b      	str	r3, [r1, #4]
 802d710:	4638      	mov	r0, r7
 802d712:	f104 060b 	add.w	r6, r4, #11
 802d716:	f000 fbc3 	bl	802dea0 <__malloc_unlock>
 802d71a:	f026 0607 	bic.w	r6, r6, #7
 802d71e:	1d23      	adds	r3, r4, #4
 802d720:	1af2      	subs	r2, r6, r3
 802d722:	d0b6      	beq.n	802d692 <_malloc_r+0x22>
 802d724:	1b9b      	subs	r3, r3, r6
 802d726:	50a3      	str	r3, [r4, r2]
 802d728:	e7b3      	b.n	802d692 <_malloc_r+0x22>
 802d72a:	6862      	ldr	r2, [r4, #4]
 802d72c:	42a3      	cmp	r3, r4
 802d72e:	bf0c      	ite	eq
 802d730:	6032      	streq	r2, [r6, #0]
 802d732:	605a      	strne	r2, [r3, #4]
 802d734:	e7ec      	b.n	802d710 <_malloc_r+0xa0>
 802d736:	4623      	mov	r3, r4
 802d738:	6864      	ldr	r4, [r4, #4]
 802d73a:	e7b2      	b.n	802d6a2 <_malloc_r+0x32>
 802d73c:	4634      	mov	r4, r6
 802d73e:	6876      	ldr	r6, [r6, #4]
 802d740:	e7b9      	b.n	802d6b6 <_malloc_r+0x46>
 802d742:	230c      	movs	r3, #12
 802d744:	603b      	str	r3, [r7, #0]
 802d746:	4638      	mov	r0, r7
 802d748:	f000 fbaa 	bl	802dea0 <__malloc_unlock>
 802d74c:	e7a1      	b.n	802d692 <_malloc_r+0x22>
 802d74e:	6025      	str	r5, [r4, #0]
 802d750:	e7de      	b.n	802d710 <_malloc_r+0xa0>
 802d752:	bf00      	nop
 802d754:	200011a4 	.word	0x200011a4

0802d758 <iprintf>:
 802d758:	b40f      	push	{r0, r1, r2, r3}
 802d75a:	4b0a      	ldr	r3, [pc, #40]	; (802d784 <iprintf+0x2c>)
 802d75c:	b513      	push	{r0, r1, r4, lr}
 802d75e:	681c      	ldr	r4, [r3, #0]
 802d760:	b124      	cbz	r4, 802d76c <iprintf+0x14>
 802d762:	69a3      	ldr	r3, [r4, #24]
 802d764:	b913      	cbnz	r3, 802d76c <iprintf+0x14>
 802d766:	4620      	mov	r0, r4
 802d768:	f000 fa8e 	bl	802dc88 <__sinit>
 802d76c:	ab05      	add	r3, sp, #20
 802d76e:	9a04      	ldr	r2, [sp, #16]
 802d770:	68a1      	ldr	r1, [r4, #8]
 802d772:	9301      	str	r3, [sp, #4]
 802d774:	4620      	mov	r0, r4
 802d776:	f000 fd1f 	bl	802e1b8 <_vfiprintf_r>
 802d77a:	b002      	add	sp, #8
 802d77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d780:	b004      	add	sp, #16
 802d782:	4770      	bx	lr
 802d784:	2000007c 	.word	0x2000007c

0802d788 <_puts_r>:
 802d788:	b570      	push	{r4, r5, r6, lr}
 802d78a:	460e      	mov	r6, r1
 802d78c:	4605      	mov	r5, r0
 802d78e:	b118      	cbz	r0, 802d798 <_puts_r+0x10>
 802d790:	6983      	ldr	r3, [r0, #24]
 802d792:	b90b      	cbnz	r3, 802d798 <_puts_r+0x10>
 802d794:	f000 fa78 	bl	802dc88 <__sinit>
 802d798:	69ab      	ldr	r3, [r5, #24]
 802d79a:	68ac      	ldr	r4, [r5, #8]
 802d79c:	b913      	cbnz	r3, 802d7a4 <_puts_r+0x1c>
 802d79e:	4628      	mov	r0, r5
 802d7a0:	f000 fa72 	bl	802dc88 <__sinit>
 802d7a4:	4b2c      	ldr	r3, [pc, #176]	; (802d858 <_puts_r+0xd0>)
 802d7a6:	429c      	cmp	r4, r3
 802d7a8:	d120      	bne.n	802d7ec <_puts_r+0x64>
 802d7aa:	686c      	ldr	r4, [r5, #4]
 802d7ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d7ae:	07db      	lsls	r3, r3, #31
 802d7b0:	d405      	bmi.n	802d7be <_puts_r+0x36>
 802d7b2:	89a3      	ldrh	r3, [r4, #12]
 802d7b4:	0598      	lsls	r0, r3, #22
 802d7b6:	d402      	bmi.n	802d7be <_puts_r+0x36>
 802d7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d7ba:	f000 fb03 	bl	802ddc4 <__retarget_lock_acquire_recursive>
 802d7be:	89a3      	ldrh	r3, [r4, #12]
 802d7c0:	0719      	lsls	r1, r3, #28
 802d7c2:	d51d      	bpl.n	802d800 <_puts_r+0x78>
 802d7c4:	6923      	ldr	r3, [r4, #16]
 802d7c6:	b1db      	cbz	r3, 802d800 <_puts_r+0x78>
 802d7c8:	3e01      	subs	r6, #1
 802d7ca:	68a3      	ldr	r3, [r4, #8]
 802d7cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802d7d0:	3b01      	subs	r3, #1
 802d7d2:	60a3      	str	r3, [r4, #8]
 802d7d4:	bb39      	cbnz	r1, 802d826 <_puts_r+0x9e>
 802d7d6:	2b00      	cmp	r3, #0
 802d7d8:	da38      	bge.n	802d84c <_puts_r+0xc4>
 802d7da:	4622      	mov	r2, r4
 802d7dc:	210a      	movs	r1, #10
 802d7de:	4628      	mov	r0, r5
 802d7e0:	f000 f878 	bl	802d8d4 <__swbuf_r>
 802d7e4:	3001      	adds	r0, #1
 802d7e6:	d011      	beq.n	802d80c <_puts_r+0x84>
 802d7e8:	250a      	movs	r5, #10
 802d7ea:	e011      	b.n	802d810 <_puts_r+0x88>
 802d7ec:	4b1b      	ldr	r3, [pc, #108]	; (802d85c <_puts_r+0xd4>)
 802d7ee:	429c      	cmp	r4, r3
 802d7f0:	d101      	bne.n	802d7f6 <_puts_r+0x6e>
 802d7f2:	68ac      	ldr	r4, [r5, #8]
 802d7f4:	e7da      	b.n	802d7ac <_puts_r+0x24>
 802d7f6:	4b1a      	ldr	r3, [pc, #104]	; (802d860 <_puts_r+0xd8>)
 802d7f8:	429c      	cmp	r4, r3
 802d7fa:	bf08      	it	eq
 802d7fc:	68ec      	ldreq	r4, [r5, #12]
 802d7fe:	e7d5      	b.n	802d7ac <_puts_r+0x24>
 802d800:	4621      	mov	r1, r4
 802d802:	4628      	mov	r0, r5
 802d804:	f000 f8b8 	bl	802d978 <__swsetup_r>
 802d808:	2800      	cmp	r0, #0
 802d80a:	d0dd      	beq.n	802d7c8 <_puts_r+0x40>
 802d80c:	f04f 35ff 	mov.w	r5, #4294967295
 802d810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d812:	07da      	lsls	r2, r3, #31
 802d814:	d405      	bmi.n	802d822 <_puts_r+0x9a>
 802d816:	89a3      	ldrh	r3, [r4, #12]
 802d818:	059b      	lsls	r3, r3, #22
 802d81a:	d402      	bmi.n	802d822 <_puts_r+0x9a>
 802d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d81e:	f000 fad2 	bl	802ddc6 <__retarget_lock_release_recursive>
 802d822:	4628      	mov	r0, r5
 802d824:	bd70      	pop	{r4, r5, r6, pc}
 802d826:	2b00      	cmp	r3, #0
 802d828:	da04      	bge.n	802d834 <_puts_r+0xac>
 802d82a:	69a2      	ldr	r2, [r4, #24]
 802d82c:	429a      	cmp	r2, r3
 802d82e:	dc06      	bgt.n	802d83e <_puts_r+0xb6>
 802d830:	290a      	cmp	r1, #10
 802d832:	d004      	beq.n	802d83e <_puts_r+0xb6>
 802d834:	6823      	ldr	r3, [r4, #0]
 802d836:	1c5a      	adds	r2, r3, #1
 802d838:	6022      	str	r2, [r4, #0]
 802d83a:	7019      	strb	r1, [r3, #0]
 802d83c:	e7c5      	b.n	802d7ca <_puts_r+0x42>
 802d83e:	4622      	mov	r2, r4
 802d840:	4628      	mov	r0, r5
 802d842:	f000 f847 	bl	802d8d4 <__swbuf_r>
 802d846:	3001      	adds	r0, #1
 802d848:	d1bf      	bne.n	802d7ca <_puts_r+0x42>
 802d84a:	e7df      	b.n	802d80c <_puts_r+0x84>
 802d84c:	6823      	ldr	r3, [r4, #0]
 802d84e:	250a      	movs	r5, #10
 802d850:	1c5a      	adds	r2, r3, #1
 802d852:	6022      	str	r2, [r4, #0]
 802d854:	701d      	strb	r5, [r3, #0]
 802d856:	e7db      	b.n	802d810 <_puts_r+0x88>
 802d858:	08030db0 	.word	0x08030db0
 802d85c:	08030dd0 	.word	0x08030dd0
 802d860:	08030d90 	.word	0x08030d90

0802d864 <puts>:
 802d864:	4b02      	ldr	r3, [pc, #8]	; (802d870 <puts+0xc>)
 802d866:	4601      	mov	r1, r0
 802d868:	6818      	ldr	r0, [r3, #0]
 802d86a:	f7ff bf8d 	b.w	802d788 <_puts_r>
 802d86e:	bf00      	nop
 802d870:	2000007c 	.word	0x2000007c

0802d874 <_sbrk_r>:
 802d874:	b538      	push	{r3, r4, r5, lr}
 802d876:	4d06      	ldr	r5, [pc, #24]	; (802d890 <_sbrk_r+0x1c>)
 802d878:	2300      	movs	r3, #0
 802d87a:	4604      	mov	r4, r0
 802d87c:	4608      	mov	r0, r1
 802d87e:	602b      	str	r3, [r5, #0]
 802d880:	f7f4 f9ee 	bl	8021c60 <_sbrk>
 802d884:	1c43      	adds	r3, r0, #1
 802d886:	d102      	bne.n	802d88e <_sbrk_r+0x1a>
 802d888:	682b      	ldr	r3, [r5, #0]
 802d88a:	b103      	cbz	r3, 802d88e <_sbrk_r+0x1a>
 802d88c:	6023      	str	r3, [r4, #0]
 802d88e:	bd38      	pop	{r3, r4, r5, pc}
 802d890:	200011b0 	.word	0x200011b0

0802d894 <siprintf>:
 802d894:	b40e      	push	{r1, r2, r3}
 802d896:	b500      	push	{lr}
 802d898:	b09c      	sub	sp, #112	; 0x70
 802d89a:	ab1d      	add	r3, sp, #116	; 0x74
 802d89c:	9002      	str	r0, [sp, #8]
 802d89e:	9006      	str	r0, [sp, #24]
 802d8a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d8a4:	4809      	ldr	r0, [pc, #36]	; (802d8cc <siprintf+0x38>)
 802d8a6:	9107      	str	r1, [sp, #28]
 802d8a8:	9104      	str	r1, [sp, #16]
 802d8aa:	4909      	ldr	r1, [pc, #36]	; (802d8d0 <siprintf+0x3c>)
 802d8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 802d8b0:	9105      	str	r1, [sp, #20]
 802d8b2:	6800      	ldr	r0, [r0, #0]
 802d8b4:	9301      	str	r3, [sp, #4]
 802d8b6:	a902      	add	r1, sp, #8
 802d8b8:	f000 fb54 	bl	802df64 <_svfiprintf_r>
 802d8bc:	9b02      	ldr	r3, [sp, #8]
 802d8be:	2200      	movs	r2, #0
 802d8c0:	701a      	strb	r2, [r3, #0]
 802d8c2:	b01c      	add	sp, #112	; 0x70
 802d8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 802d8c8:	b003      	add	sp, #12
 802d8ca:	4770      	bx	lr
 802d8cc:	2000007c 	.word	0x2000007c
 802d8d0:	ffff0208 	.word	0xffff0208

0802d8d4 <__swbuf_r>:
 802d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d8d6:	460e      	mov	r6, r1
 802d8d8:	4614      	mov	r4, r2
 802d8da:	4605      	mov	r5, r0
 802d8dc:	b118      	cbz	r0, 802d8e6 <__swbuf_r+0x12>
 802d8de:	6983      	ldr	r3, [r0, #24]
 802d8e0:	b90b      	cbnz	r3, 802d8e6 <__swbuf_r+0x12>
 802d8e2:	f000 f9d1 	bl	802dc88 <__sinit>
 802d8e6:	4b21      	ldr	r3, [pc, #132]	; (802d96c <__swbuf_r+0x98>)
 802d8e8:	429c      	cmp	r4, r3
 802d8ea:	d12b      	bne.n	802d944 <__swbuf_r+0x70>
 802d8ec:	686c      	ldr	r4, [r5, #4]
 802d8ee:	69a3      	ldr	r3, [r4, #24]
 802d8f0:	60a3      	str	r3, [r4, #8]
 802d8f2:	89a3      	ldrh	r3, [r4, #12]
 802d8f4:	071a      	lsls	r2, r3, #28
 802d8f6:	d52f      	bpl.n	802d958 <__swbuf_r+0x84>
 802d8f8:	6923      	ldr	r3, [r4, #16]
 802d8fa:	b36b      	cbz	r3, 802d958 <__swbuf_r+0x84>
 802d8fc:	6923      	ldr	r3, [r4, #16]
 802d8fe:	6820      	ldr	r0, [r4, #0]
 802d900:	1ac0      	subs	r0, r0, r3
 802d902:	6963      	ldr	r3, [r4, #20]
 802d904:	b2f6      	uxtb	r6, r6
 802d906:	4283      	cmp	r3, r0
 802d908:	4637      	mov	r7, r6
 802d90a:	dc04      	bgt.n	802d916 <__swbuf_r+0x42>
 802d90c:	4621      	mov	r1, r4
 802d90e:	4628      	mov	r0, r5
 802d910:	f000 f926 	bl	802db60 <_fflush_r>
 802d914:	bb30      	cbnz	r0, 802d964 <__swbuf_r+0x90>
 802d916:	68a3      	ldr	r3, [r4, #8]
 802d918:	3b01      	subs	r3, #1
 802d91a:	60a3      	str	r3, [r4, #8]
 802d91c:	6823      	ldr	r3, [r4, #0]
 802d91e:	1c5a      	adds	r2, r3, #1
 802d920:	6022      	str	r2, [r4, #0]
 802d922:	701e      	strb	r6, [r3, #0]
 802d924:	6963      	ldr	r3, [r4, #20]
 802d926:	3001      	adds	r0, #1
 802d928:	4283      	cmp	r3, r0
 802d92a:	d004      	beq.n	802d936 <__swbuf_r+0x62>
 802d92c:	89a3      	ldrh	r3, [r4, #12]
 802d92e:	07db      	lsls	r3, r3, #31
 802d930:	d506      	bpl.n	802d940 <__swbuf_r+0x6c>
 802d932:	2e0a      	cmp	r6, #10
 802d934:	d104      	bne.n	802d940 <__swbuf_r+0x6c>
 802d936:	4621      	mov	r1, r4
 802d938:	4628      	mov	r0, r5
 802d93a:	f000 f911 	bl	802db60 <_fflush_r>
 802d93e:	b988      	cbnz	r0, 802d964 <__swbuf_r+0x90>
 802d940:	4638      	mov	r0, r7
 802d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d944:	4b0a      	ldr	r3, [pc, #40]	; (802d970 <__swbuf_r+0x9c>)
 802d946:	429c      	cmp	r4, r3
 802d948:	d101      	bne.n	802d94e <__swbuf_r+0x7a>
 802d94a:	68ac      	ldr	r4, [r5, #8]
 802d94c:	e7cf      	b.n	802d8ee <__swbuf_r+0x1a>
 802d94e:	4b09      	ldr	r3, [pc, #36]	; (802d974 <__swbuf_r+0xa0>)
 802d950:	429c      	cmp	r4, r3
 802d952:	bf08      	it	eq
 802d954:	68ec      	ldreq	r4, [r5, #12]
 802d956:	e7ca      	b.n	802d8ee <__swbuf_r+0x1a>
 802d958:	4621      	mov	r1, r4
 802d95a:	4628      	mov	r0, r5
 802d95c:	f000 f80c 	bl	802d978 <__swsetup_r>
 802d960:	2800      	cmp	r0, #0
 802d962:	d0cb      	beq.n	802d8fc <__swbuf_r+0x28>
 802d964:	f04f 37ff 	mov.w	r7, #4294967295
 802d968:	e7ea      	b.n	802d940 <__swbuf_r+0x6c>
 802d96a:	bf00      	nop
 802d96c:	08030db0 	.word	0x08030db0
 802d970:	08030dd0 	.word	0x08030dd0
 802d974:	08030d90 	.word	0x08030d90

0802d978 <__swsetup_r>:
 802d978:	4b32      	ldr	r3, [pc, #200]	; (802da44 <__swsetup_r+0xcc>)
 802d97a:	b570      	push	{r4, r5, r6, lr}
 802d97c:	681d      	ldr	r5, [r3, #0]
 802d97e:	4606      	mov	r6, r0
 802d980:	460c      	mov	r4, r1
 802d982:	b125      	cbz	r5, 802d98e <__swsetup_r+0x16>
 802d984:	69ab      	ldr	r3, [r5, #24]
 802d986:	b913      	cbnz	r3, 802d98e <__swsetup_r+0x16>
 802d988:	4628      	mov	r0, r5
 802d98a:	f000 f97d 	bl	802dc88 <__sinit>
 802d98e:	4b2e      	ldr	r3, [pc, #184]	; (802da48 <__swsetup_r+0xd0>)
 802d990:	429c      	cmp	r4, r3
 802d992:	d10f      	bne.n	802d9b4 <__swsetup_r+0x3c>
 802d994:	686c      	ldr	r4, [r5, #4]
 802d996:	89a3      	ldrh	r3, [r4, #12]
 802d998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d99c:	0719      	lsls	r1, r3, #28
 802d99e:	d42c      	bmi.n	802d9fa <__swsetup_r+0x82>
 802d9a0:	06dd      	lsls	r5, r3, #27
 802d9a2:	d411      	bmi.n	802d9c8 <__swsetup_r+0x50>
 802d9a4:	2309      	movs	r3, #9
 802d9a6:	6033      	str	r3, [r6, #0]
 802d9a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d9ac:	81a3      	strh	r3, [r4, #12]
 802d9ae:	f04f 30ff 	mov.w	r0, #4294967295
 802d9b2:	e03e      	b.n	802da32 <__swsetup_r+0xba>
 802d9b4:	4b25      	ldr	r3, [pc, #148]	; (802da4c <__swsetup_r+0xd4>)
 802d9b6:	429c      	cmp	r4, r3
 802d9b8:	d101      	bne.n	802d9be <__swsetup_r+0x46>
 802d9ba:	68ac      	ldr	r4, [r5, #8]
 802d9bc:	e7eb      	b.n	802d996 <__swsetup_r+0x1e>
 802d9be:	4b24      	ldr	r3, [pc, #144]	; (802da50 <__swsetup_r+0xd8>)
 802d9c0:	429c      	cmp	r4, r3
 802d9c2:	bf08      	it	eq
 802d9c4:	68ec      	ldreq	r4, [r5, #12]
 802d9c6:	e7e6      	b.n	802d996 <__swsetup_r+0x1e>
 802d9c8:	0758      	lsls	r0, r3, #29
 802d9ca:	d512      	bpl.n	802d9f2 <__swsetup_r+0x7a>
 802d9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d9ce:	b141      	cbz	r1, 802d9e2 <__swsetup_r+0x6a>
 802d9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d9d4:	4299      	cmp	r1, r3
 802d9d6:	d002      	beq.n	802d9de <__swsetup_r+0x66>
 802d9d8:	4630      	mov	r0, r6
 802d9da:	f7ff fddd 	bl	802d598 <_free_r>
 802d9de:	2300      	movs	r3, #0
 802d9e0:	6363      	str	r3, [r4, #52]	; 0x34
 802d9e2:	89a3      	ldrh	r3, [r4, #12]
 802d9e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d9e8:	81a3      	strh	r3, [r4, #12]
 802d9ea:	2300      	movs	r3, #0
 802d9ec:	6063      	str	r3, [r4, #4]
 802d9ee:	6923      	ldr	r3, [r4, #16]
 802d9f0:	6023      	str	r3, [r4, #0]
 802d9f2:	89a3      	ldrh	r3, [r4, #12]
 802d9f4:	f043 0308 	orr.w	r3, r3, #8
 802d9f8:	81a3      	strh	r3, [r4, #12]
 802d9fa:	6923      	ldr	r3, [r4, #16]
 802d9fc:	b94b      	cbnz	r3, 802da12 <__swsetup_r+0x9a>
 802d9fe:	89a3      	ldrh	r3, [r4, #12]
 802da00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802da04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802da08:	d003      	beq.n	802da12 <__swsetup_r+0x9a>
 802da0a:	4621      	mov	r1, r4
 802da0c:	4630      	mov	r0, r6
 802da0e:	f000 fa01 	bl	802de14 <__smakebuf_r>
 802da12:	89a0      	ldrh	r0, [r4, #12]
 802da14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da18:	f010 0301 	ands.w	r3, r0, #1
 802da1c:	d00a      	beq.n	802da34 <__swsetup_r+0xbc>
 802da1e:	2300      	movs	r3, #0
 802da20:	60a3      	str	r3, [r4, #8]
 802da22:	6963      	ldr	r3, [r4, #20]
 802da24:	425b      	negs	r3, r3
 802da26:	61a3      	str	r3, [r4, #24]
 802da28:	6923      	ldr	r3, [r4, #16]
 802da2a:	b943      	cbnz	r3, 802da3e <__swsetup_r+0xc6>
 802da2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802da30:	d1ba      	bne.n	802d9a8 <__swsetup_r+0x30>
 802da32:	bd70      	pop	{r4, r5, r6, pc}
 802da34:	0781      	lsls	r1, r0, #30
 802da36:	bf58      	it	pl
 802da38:	6963      	ldrpl	r3, [r4, #20]
 802da3a:	60a3      	str	r3, [r4, #8]
 802da3c:	e7f4      	b.n	802da28 <__swsetup_r+0xb0>
 802da3e:	2000      	movs	r0, #0
 802da40:	e7f7      	b.n	802da32 <__swsetup_r+0xba>
 802da42:	bf00      	nop
 802da44:	2000007c 	.word	0x2000007c
 802da48:	08030db0 	.word	0x08030db0
 802da4c:	08030dd0 	.word	0x08030dd0
 802da50:	08030d90 	.word	0x08030d90

0802da54 <__sflush_r>:
 802da54:	898a      	ldrh	r2, [r1, #12]
 802da56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802da5a:	4605      	mov	r5, r0
 802da5c:	0710      	lsls	r0, r2, #28
 802da5e:	460c      	mov	r4, r1
 802da60:	d458      	bmi.n	802db14 <__sflush_r+0xc0>
 802da62:	684b      	ldr	r3, [r1, #4]
 802da64:	2b00      	cmp	r3, #0
 802da66:	dc05      	bgt.n	802da74 <__sflush_r+0x20>
 802da68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802da6a:	2b00      	cmp	r3, #0
 802da6c:	dc02      	bgt.n	802da74 <__sflush_r+0x20>
 802da6e:	2000      	movs	r0, #0
 802da70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802da74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802da76:	2e00      	cmp	r6, #0
 802da78:	d0f9      	beq.n	802da6e <__sflush_r+0x1a>
 802da7a:	2300      	movs	r3, #0
 802da7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802da80:	682f      	ldr	r7, [r5, #0]
 802da82:	602b      	str	r3, [r5, #0]
 802da84:	d032      	beq.n	802daec <__sflush_r+0x98>
 802da86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802da88:	89a3      	ldrh	r3, [r4, #12]
 802da8a:	075a      	lsls	r2, r3, #29
 802da8c:	d505      	bpl.n	802da9a <__sflush_r+0x46>
 802da8e:	6863      	ldr	r3, [r4, #4]
 802da90:	1ac0      	subs	r0, r0, r3
 802da92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802da94:	b10b      	cbz	r3, 802da9a <__sflush_r+0x46>
 802da96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802da98:	1ac0      	subs	r0, r0, r3
 802da9a:	2300      	movs	r3, #0
 802da9c:	4602      	mov	r2, r0
 802da9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802daa0:	6a21      	ldr	r1, [r4, #32]
 802daa2:	4628      	mov	r0, r5
 802daa4:	47b0      	blx	r6
 802daa6:	1c43      	adds	r3, r0, #1
 802daa8:	89a3      	ldrh	r3, [r4, #12]
 802daaa:	d106      	bne.n	802daba <__sflush_r+0x66>
 802daac:	6829      	ldr	r1, [r5, #0]
 802daae:	291d      	cmp	r1, #29
 802dab0:	d82c      	bhi.n	802db0c <__sflush_r+0xb8>
 802dab2:	4a2a      	ldr	r2, [pc, #168]	; (802db5c <__sflush_r+0x108>)
 802dab4:	40ca      	lsrs	r2, r1
 802dab6:	07d6      	lsls	r6, r2, #31
 802dab8:	d528      	bpl.n	802db0c <__sflush_r+0xb8>
 802daba:	2200      	movs	r2, #0
 802dabc:	6062      	str	r2, [r4, #4]
 802dabe:	04d9      	lsls	r1, r3, #19
 802dac0:	6922      	ldr	r2, [r4, #16]
 802dac2:	6022      	str	r2, [r4, #0]
 802dac4:	d504      	bpl.n	802dad0 <__sflush_r+0x7c>
 802dac6:	1c42      	adds	r2, r0, #1
 802dac8:	d101      	bne.n	802dace <__sflush_r+0x7a>
 802daca:	682b      	ldr	r3, [r5, #0]
 802dacc:	b903      	cbnz	r3, 802dad0 <__sflush_r+0x7c>
 802dace:	6560      	str	r0, [r4, #84]	; 0x54
 802dad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dad2:	602f      	str	r7, [r5, #0]
 802dad4:	2900      	cmp	r1, #0
 802dad6:	d0ca      	beq.n	802da6e <__sflush_r+0x1a>
 802dad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dadc:	4299      	cmp	r1, r3
 802dade:	d002      	beq.n	802dae6 <__sflush_r+0x92>
 802dae0:	4628      	mov	r0, r5
 802dae2:	f7ff fd59 	bl	802d598 <_free_r>
 802dae6:	2000      	movs	r0, #0
 802dae8:	6360      	str	r0, [r4, #52]	; 0x34
 802daea:	e7c1      	b.n	802da70 <__sflush_r+0x1c>
 802daec:	6a21      	ldr	r1, [r4, #32]
 802daee:	2301      	movs	r3, #1
 802daf0:	4628      	mov	r0, r5
 802daf2:	47b0      	blx	r6
 802daf4:	1c41      	adds	r1, r0, #1
 802daf6:	d1c7      	bne.n	802da88 <__sflush_r+0x34>
 802daf8:	682b      	ldr	r3, [r5, #0]
 802dafa:	2b00      	cmp	r3, #0
 802dafc:	d0c4      	beq.n	802da88 <__sflush_r+0x34>
 802dafe:	2b1d      	cmp	r3, #29
 802db00:	d001      	beq.n	802db06 <__sflush_r+0xb2>
 802db02:	2b16      	cmp	r3, #22
 802db04:	d101      	bne.n	802db0a <__sflush_r+0xb6>
 802db06:	602f      	str	r7, [r5, #0]
 802db08:	e7b1      	b.n	802da6e <__sflush_r+0x1a>
 802db0a:	89a3      	ldrh	r3, [r4, #12]
 802db0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802db10:	81a3      	strh	r3, [r4, #12]
 802db12:	e7ad      	b.n	802da70 <__sflush_r+0x1c>
 802db14:	690f      	ldr	r7, [r1, #16]
 802db16:	2f00      	cmp	r7, #0
 802db18:	d0a9      	beq.n	802da6e <__sflush_r+0x1a>
 802db1a:	0793      	lsls	r3, r2, #30
 802db1c:	680e      	ldr	r6, [r1, #0]
 802db1e:	bf08      	it	eq
 802db20:	694b      	ldreq	r3, [r1, #20]
 802db22:	600f      	str	r7, [r1, #0]
 802db24:	bf18      	it	ne
 802db26:	2300      	movne	r3, #0
 802db28:	eba6 0807 	sub.w	r8, r6, r7
 802db2c:	608b      	str	r3, [r1, #8]
 802db2e:	f1b8 0f00 	cmp.w	r8, #0
 802db32:	dd9c      	ble.n	802da6e <__sflush_r+0x1a>
 802db34:	6a21      	ldr	r1, [r4, #32]
 802db36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802db38:	4643      	mov	r3, r8
 802db3a:	463a      	mov	r2, r7
 802db3c:	4628      	mov	r0, r5
 802db3e:	47b0      	blx	r6
 802db40:	2800      	cmp	r0, #0
 802db42:	dc06      	bgt.n	802db52 <__sflush_r+0xfe>
 802db44:	89a3      	ldrh	r3, [r4, #12]
 802db46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802db4a:	81a3      	strh	r3, [r4, #12]
 802db4c:	f04f 30ff 	mov.w	r0, #4294967295
 802db50:	e78e      	b.n	802da70 <__sflush_r+0x1c>
 802db52:	4407      	add	r7, r0
 802db54:	eba8 0800 	sub.w	r8, r8, r0
 802db58:	e7e9      	b.n	802db2e <__sflush_r+0xda>
 802db5a:	bf00      	nop
 802db5c:	20400001 	.word	0x20400001

0802db60 <_fflush_r>:
 802db60:	b538      	push	{r3, r4, r5, lr}
 802db62:	690b      	ldr	r3, [r1, #16]
 802db64:	4605      	mov	r5, r0
 802db66:	460c      	mov	r4, r1
 802db68:	b913      	cbnz	r3, 802db70 <_fflush_r+0x10>
 802db6a:	2500      	movs	r5, #0
 802db6c:	4628      	mov	r0, r5
 802db6e:	bd38      	pop	{r3, r4, r5, pc}
 802db70:	b118      	cbz	r0, 802db7a <_fflush_r+0x1a>
 802db72:	6983      	ldr	r3, [r0, #24]
 802db74:	b90b      	cbnz	r3, 802db7a <_fflush_r+0x1a>
 802db76:	f000 f887 	bl	802dc88 <__sinit>
 802db7a:	4b14      	ldr	r3, [pc, #80]	; (802dbcc <_fflush_r+0x6c>)
 802db7c:	429c      	cmp	r4, r3
 802db7e:	d11b      	bne.n	802dbb8 <_fflush_r+0x58>
 802db80:	686c      	ldr	r4, [r5, #4]
 802db82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802db86:	2b00      	cmp	r3, #0
 802db88:	d0ef      	beq.n	802db6a <_fflush_r+0xa>
 802db8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802db8c:	07d0      	lsls	r0, r2, #31
 802db8e:	d404      	bmi.n	802db9a <_fflush_r+0x3a>
 802db90:	0599      	lsls	r1, r3, #22
 802db92:	d402      	bmi.n	802db9a <_fflush_r+0x3a>
 802db94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802db96:	f000 f915 	bl	802ddc4 <__retarget_lock_acquire_recursive>
 802db9a:	4628      	mov	r0, r5
 802db9c:	4621      	mov	r1, r4
 802db9e:	f7ff ff59 	bl	802da54 <__sflush_r>
 802dba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802dba4:	07da      	lsls	r2, r3, #31
 802dba6:	4605      	mov	r5, r0
 802dba8:	d4e0      	bmi.n	802db6c <_fflush_r+0xc>
 802dbaa:	89a3      	ldrh	r3, [r4, #12]
 802dbac:	059b      	lsls	r3, r3, #22
 802dbae:	d4dd      	bmi.n	802db6c <_fflush_r+0xc>
 802dbb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dbb2:	f000 f908 	bl	802ddc6 <__retarget_lock_release_recursive>
 802dbb6:	e7d9      	b.n	802db6c <_fflush_r+0xc>
 802dbb8:	4b05      	ldr	r3, [pc, #20]	; (802dbd0 <_fflush_r+0x70>)
 802dbba:	429c      	cmp	r4, r3
 802dbbc:	d101      	bne.n	802dbc2 <_fflush_r+0x62>
 802dbbe:	68ac      	ldr	r4, [r5, #8]
 802dbc0:	e7df      	b.n	802db82 <_fflush_r+0x22>
 802dbc2:	4b04      	ldr	r3, [pc, #16]	; (802dbd4 <_fflush_r+0x74>)
 802dbc4:	429c      	cmp	r4, r3
 802dbc6:	bf08      	it	eq
 802dbc8:	68ec      	ldreq	r4, [r5, #12]
 802dbca:	e7da      	b.n	802db82 <_fflush_r+0x22>
 802dbcc:	08030db0 	.word	0x08030db0
 802dbd0:	08030dd0 	.word	0x08030dd0
 802dbd4:	08030d90 	.word	0x08030d90

0802dbd8 <std>:
 802dbd8:	2300      	movs	r3, #0
 802dbda:	b510      	push	{r4, lr}
 802dbdc:	4604      	mov	r4, r0
 802dbde:	e9c0 3300 	strd	r3, r3, [r0]
 802dbe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dbe6:	6083      	str	r3, [r0, #8]
 802dbe8:	8181      	strh	r1, [r0, #12]
 802dbea:	6643      	str	r3, [r0, #100]	; 0x64
 802dbec:	81c2      	strh	r2, [r0, #14]
 802dbee:	6183      	str	r3, [r0, #24]
 802dbf0:	4619      	mov	r1, r3
 802dbf2:	2208      	movs	r2, #8
 802dbf4:	305c      	adds	r0, #92	; 0x5c
 802dbf6:	f7ff fcc7 	bl	802d588 <memset>
 802dbfa:	4b05      	ldr	r3, [pc, #20]	; (802dc10 <std+0x38>)
 802dbfc:	6263      	str	r3, [r4, #36]	; 0x24
 802dbfe:	4b05      	ldr	r3, [pc, #20]	; (802dc14 <std+0x3c>)
 802dc00:	62a3      	str	r3, [r4, #40]	; 0x28
 802dc02:	4b05      	ldr	r3, [pc, #20]	; (802dc18 <std+0x40>)
 802dc04:	62e3      	str	r3, [r4, #44]	; 0x2c
 802dc06:	4b05      	ldr	r3, [pc, #20]	; (802dc1c <std+0x44>)
 802dc08:	6224      	str	r4, [r4, #32]
 802dc0a:	6323      	str	r3, [r4, #48]	; 0x30
 802dc0c:	bd10      	pop	{r4, pc}
 802dc0e:	bf00      	nop
 802dc10:	0802e741 	.word	0x0802e741
 802dc14:	0802e763 	.word	0x0802e763
 802dc18:	0802e79b 	.word	0x0802e79b
 802dc1c:	0802e7bf 	.word	0x0802e7bf

0802dc20 <_cleanup_r>:
 802dc20:	4901      	ldr	r1, [pc, #4]	; (802dc28 <_cleanup_r+0x8>)
 802dc22:	f000 b8af 	b.w	802dd84 <_fwalk_reent>
 802dc26:	bf00      	nop
 802dc28:	0802db61 	.word	0x0802db61

0802dc2c <__sfmoreglue>:
 802dc2c:	b570      	push	{r4, r5, r6, lr}
 802dc2e:	2268      	movs	r2, #104	; 0x68
 802dc30:	1e4d      	subs	r5, r1, #1
 802dc32:	4355      	muls	r5, r2
 802dc34:	460e      	mov	r6, r1
 802dc36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802dc3a:	f7ff fd19 	bl	802d670 <_malloc_r>
 802dc3e:	4604      	mov	r4, r0
 802dc40:	b140      	cbz	r0, 802dc54 <__sfmoreglue+0x28>
 802dc42:	2100      	movs	r1, #0
 802dc44:	e9c0 1600 	strd	r1, r6, [r0]
 802dc48:	300c      	adds	r0, #12
 802dc4a:	60a0      	str	r0, [r4, #8]
 802dc4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802dc50:	f7ff fc9a 	bl	802d588 <memset>
 802dc54:	4620      	mov	r0, r4
 802dc56:	bd70      	pop	{r4, r5, r6, pc}

0802dc58 <__sfp_lock_acquire>:
 802dc58:	4801      	ldr	r0, [pc, #4]	; (802dc60 <__sfp_lock_acquire+0x8>)
 802dc5a:	f000 b8b3 	b.w	802ddc4 <__retarget_lock_acquire_recursive>
 802dc5e:	bf00      	nop
 802dc60:	200011ad 	.word	0x200011ad

0802dc64 <__sfp_lock_release>:
 802dc64:	4801      	ldr	r0, [pc, #4]	; (802dc6c <__sfp_lock_release+0x8>)
 802dc66:	f000 b8ae 	b.w	802ddc6 <__retarget_lock_release_recursive>
 802dc6a:	bf00      	nop
 802dc6c:	200011ad 	.word	0x200011ad

0802dc70 <__sinit_lock_acquire>:
 802dc70:	4801      	ldr	r0, [pc, #4]	; (802dc78 <__sinit_lock_acquire+0x8>)
 802dc72:	f000 b8a7 	b.w	802ddc4 <__retarget_lock_acquire_recursive>
 802dc76:	bf00      	nop
 802dc78:	200011ae 	.word	0x200011ae

0802dc7c <__sinit_lock_release>:
 802dc7c:	4801      	ldr	r0, [pc, #4]	; (802dc84 <__sinit_lock_release+0x8>)
 802dc7e:	f000 b8a2 	b.w	802ddc6 <__retarget_lock_release_recursive>
 802dc82:	bf00      	nop
 802dc84:	200011ae 	.word	0x200011ae

0802dc88 <__sinit>:
 802dc88:	b510      	push	{r4, lr}
 802dc8a:	4604      	mov	r4, r0
 802dc8c:	f7ff fff0 	bl	802dc70 <__sinit_lock_acquire>
 802dc90:	69a3      	ldr	r3, [r4, #24]
 802dc92:	b11b      	cbz	r3, 802dc9c <__sinit+0x14>
 802dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dc98:	f7ff bff0 	b.w	802dc7c <__sinit_lock_release>
 802dc9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802dca0:	6523      	str	r3, [r4, #80]	; 0x50
 802dca2:	4b13      	ldr	r3, [pc, #76]	; (802dcf0 <__sinit+0x68>)
 802dca4:	4a13      	ldr	r2, [pc, #76]	; (802dcf4 <__sinit+0x6c>)
 802dca6:	681b      	ldr	r3, [r3, #0]
 802dca8:	62a2      	str	r2, [r4, #40]	; 0x28
 802dcaa:	42a3      	cmp	r3, r4
 802dcac:	bf04      	itt	eq
 802dcae:	2301      	moveq	r3, #1
 802dcb0:	61a3      	streq	r3, [r4, #24]
 802dcb2:	4620      	mov	r0, r4
 802dcb4:	f000 f820 	bl	802dcf8 <__sfp>
 802dcb8:	6060      	str	r0, [r4, #4]
 802dcba:	4620      	mov	r0, r4
 802dcbc:	f000 f81c 	bl	802dcf8 <__sfp>
 802dcc0:	60a0      	str	r0, [r4, #8]
 802dcc2:	4620      	mov	r0, r4
 802dcc4:	f000 f818 	bl	802dcf8 <__sfp>
 802dcc8:	2200      	movs	r2, #0
 802dcca:	60e0      	str	r0, [r4, #12]
 802dccc:	2104      	movs	r1, #4
 802dcce:	6860      	ldr	r0, [r4, #4]
 802dcd0:	f7ff ff82 	bl	802dbd8 <std>
 802dcd4:	68a0      	ldr	r0, [r4, #8]
 802dcd6:	2201      	movs	r2, #1
 802dcd8:	2109      	movs	r1, #9
 802dcda:	f7ff ff7d 	bl	802dbd8 <std>
 802dcde:	68e0      	ldr	r0, [r4, #12]
 802dce0:	2202      	movs	r2, #2
 802dce2:	2112      	movs	r1, #18
 802dce4:	f7ff ff78 	bl	802dbd8 <std>
 802dce8:	2301      	movs	r3, #1
 802dcea:	61a3      	str	r3, [r4, #24]
 802dcec:	e7d2      	b.n	802dc94 <__sinit+0xc>
 802dcee:	bf00      	nop
 802dcf0:	08030d8c 	.word	0x08030d8c
 802dcf4:	0802dc21 	.word	0x0802dc21

0802dcf8 <__sfp>:
 802dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dcfa:	4607      	mov	r7, r0
 802dcfc:	f7ff ffac 	bl	802dc58 <__sfp_lock_acquire>
 802dd00:	4b1e      	ldr	r3, [pc, #120]	; (802dd7c <__sfp+0x84>)
 802dd02:	681e      	ldr	r6, [r3, #0]
 802dd04:	69b3      	ldr	r3, [r6, #24]
 802dd06:	b913      	cbnz	r3, 802dd0e <__sfp+0x16>
 802dd08:	4630      	mov	r0, r6
 802dd0a:	f7ff ffbd 	bl	802dc88 <__sinit>
 802dd0e:	3648      	adds	r6, #72	; 0x48
 802dd10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802dd14:	3b01      	subs	r3, #1
 802dd16:	d503      	bpl.n	802dd20 <__sfp+0x28>
 802dd18:	6833      	ldr	r3, [r6, #0]
 802dd1a:	b30b      	cbz	r3, 802dd60 <__sfp+0x68>
 802dd1c:	6836      	ldr	r6, [r6, #0]
 802dd1e:	e7f7      	b.n	802dd10 <__sfp+0x18>
 802dd20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802dd24:	b9d5      	cbnz	r5, 802dd5c <__sfp+0x64>
 802dd26:	4b16      	ldr	r3, [pc, #88]	; (802dd80 <__sfp+0x88>)
 802dd28:	60e3      	str	r3, [r4, #12]
 802dd2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802dd2e:	6665      	str	r5, [r4, #100]	; 0x64
 802dd30:	f000 f847 	bl	802ddc2 <__retarget_lock_init_recursive>
 802dd34:	f7ff ff96 	bl	802dc64 <__sfp_lock_release>
 802dd38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802dd3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802dd40:	6025      	str	r5, [r4, #0]
 802dd42:	61a5      	str	r5, [r4, #24]
 802dd44:	2208      	movs	r2, #8
 802dd46:	4629      	mov	r1, r5
 802dd48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802dd4c:	f7ff fc1c 	bl	802d588 <memset>
 802dd50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802dd54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802dd58:	4620      	mov	r0, r4
 802dd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dd5c:	3468      	adds	r4, #104	; 0x68
 802dd5e:	e7d9      	b.n	802dd14 <__sfp+0x1c>
 802dd60:	2104      	movs	r1, #4
 802dd62:	4638      	mov	r0, r7
 802dd64:	f7ff ff62 	bl	802dc2c <__sfmoreglue>
 802dd68:	4604      	mov	r4, r0
 802dd6a:	6030      	str	r0, [r6, #0]
 802dd6c:	2800      	cmp	r0, #0
 802dd6e:	d1d5      	bne.n	802dd1c <__sfp+0x24>
 802dd70:	f7ff ff78 	bl	802dc64 <__sfp_lock_release>
 802dd74:	230c      	movs	r3, #12
 802dd76:	603b      	str	r3, [r7, #0]
 802dd78:	e7ee      	b.n	802dd58 <__sfp+0x60>
 802dd7a:	bf00      	nop
 802dd7c:	08030d8c 	.word	0x08030d8c
 802dd80:	ffff0001 	.word	0xffff0001

0802dd84 <_fwalk_reent>:
 802dd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dd88:	4606      	mov	r6, r0
 802dd8a:	4688      	mov	r8, r1
 802dd8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802dd90:	2700      	movs	r7, #0
 802dd92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802dd96:	f1b9 0901 	subs.w	r9, r9, #1
 802dd9a:	d505      	bpl.n	802dda8 <_fwalk_reent+0x24>
 802dd9c:	6824      	ldr	r4, [r4, #0]
 802dd9e:	2c00      	cmp	r4, #0
 802dda0:	d1f7      	bne.n	802dd92 <_fwalk_reent+0xe>
 802dda2:	4638      	mov	r0, r7
 802dda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dda8:	89ab      	ldrh	r3, [r5, #12]
 802ddaa:	2b01      	cmp	r3, #1
 802ddac:	d907      	bls.n	802ddbe <_fwalk_reent+0x3a>
 802ddae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ddb2:	3301      	adds	r3, #1
 802ddb4:	d003      	beq.n	802ddbe <_fwalk_reent+0x3a>
 802ddb6:	4629      	mov	r1, r5
 802ddb8:	4630      	mov	r0, r6
 802ddba:	47c0      	blx	r8
 802ddbc:	4307      	orrs	r7, r0
 802ddbe:	3568      	adds	r5, #104	; 0x68
 802ddc0:	e7e9      	b.n	802dd96 <_fwalk_reent+0x12>

0802ddc2 <__retarget_lock_init_recursive>:
 802ddc2:	4770      	bx	lr

0802ddc4 <__retarget_lock_acquire_recursive>:
 802ddc4:	4770      	bx	lr

0802ddc6 <__retarget_lock_release_recursive>:
 802ddc6:	4770      	bx	lr

0802ddc8 <__swhatbuf_r>:
 802ddc8:	b570      	push	{r4, r5, r6, lr}
 802ddca:	460e      	mov	r6, r1
 802ddcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ddd0:	2900      	cmp	r1, #0
 802ddd2:	b096      	sub	sp, #88	; 0x58
 802ddd4:	4614      	mov	r4, r2
 802ddd6:	461d      	mov	r5, r3
 802ddd8:	da08      	bge.n	802ddec <__swhatbuf_r+0x24>
 802ddda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802ddde:	2200      	movs	r2, #0
 802dde0:	602a      	str	r2, [r5, #0]
 802dde2:	061a      	lsls	r2, r3, #24
 802dde4:	d410      	bmi.n	802de08 <__swhatbuf_r+0x40>
 802dde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ddea:	e00e      	b.n	802de0a <__swhatbuf_r+0x42>
 802ddec:	466a      	mov	r2, sp
 802ddee:	f000 fd0d 	bl	802e80c <_fstat_r>
 802ddf2:	2800      	cmp	r0, #0
 802ddf4:	dbf1      	blt.n	802ddda <__swhatbuf_r+0x12>
 802ddf6:	9a01      	ldr	r2, [sp, #4]
 802ddf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ddfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802de00:	425a      	negs	r2, r3
 802de02:	415a      	adcs	r2, r3
 802de04:	602a      	str	r2, [r5, #0]
 802de06:	e7ee      	b.n	802dde6 <__swhatbuf_r+0x1e>
 802de08:	2340      	movs	r3, #64	; 0x40
 802de0a:	2000      	movs	r0, #0
 802de0c:	6023      	str	r3, [r4, #0]
 802de0e:	b016      	add	sp, #88	; 0x58
 802de10:	bd70      	pop	{r4, r5, r6, pc}
	...

0802de14 <__smakebuf_r>:
 802de14:	898b      	ldrh	r3, [r1, #12]
 802de16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802de18:	079d      	lsls	r5, r3, #30
 802de1a:	4606      	mov	r6, r0
 802de1c:	460c      	mov	r4, r1
 802de1e:	d507      	bpl.n	802de30 <__smakebuf_r+0x1c>
 802de20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802de24:	6023      	str	r3, [r4, #0]
 802de26:	6123      	str	r3, [r4, #16]
 802de28:	2301      	movs	r3, #1
 802de2a:	6163      	str	r3, [r4, #20]
 802de2c:	b002      	add	sp, #8
 802de2e:	bd70      	pop	{r4, r5, r6, pc}
 802de30:	ab01      	add	r3, sp, #4
 802de32:	466a      	mov	r2, sp
 802de34:	f7ff ffc8 	bl	802ddc8 <__swhatbuf_r>
 802de38:	9900      	ldr	r1, [sp, #0]
 802de3a:	4605      	mov	r5, r0
 802de3c:	4630      	mov	r0, r6
 802de3e:	f7ff fc17 	bl	802d670 <_malloc_r>
 802de42:	b948      	cbnz	r0, 802de58 <__smakebuf_r+0x44>
 802de44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802de48:	059a      	lsls	r2, r3, #22
 802de4a:	d4ef      	bmi.n	802de2c <__smakebuf_r+0x18>
 802de4c:	f023 0303 	bic.w	r3, r3, #3
 802de50:	f043 0302 	orr.w	r3, r3, #2
 802de54:	81a3      	strh	r3, [r4, #12]
 802de56:	e7e3      	b.n	802de20 <__smakebuf_r+0xc>
 802de58:	4b0d      	ldr	r3, [pc, #52]	; (802de90 <__smakebuf_r+0x7c>)
 802de5a:	62b3      	str	r3, [r6, #40]	; 0x28
 802de5c:	89a3      	ldrh	r3, [r4, #12]
 802de5e:	6020      	str	r0, [r4, #0]
 802de60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802de64:	81a3      	strh	r3, [r4, #12]
 802de66:	9b00      	ldr	r3, [sp, #0]
 802de68:	6163      	str	r3, [r4, #20]
 802de6a:	9b01      	ldr	r3, [sp, #4]
 802de6c:	6120      	str	r0, [r4, #16]
 802de6e:	b15b      	cbz	r3, 802de88 <__smakebuf_r+0x74>
 802de70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802de74:	4630      	mov	r0, r6
 802de76:	f000 fcdb 	bl	802e830 <_isatty_r>
 802de7a:	b128      	cbz	r0, 802de88 <__smakebuf_r+0x74>
 802de7c:	89a3      	ldrh	r3, [r4, #12]
 802de7e:	f023 0303 	bic.w	r3, r3, #3
 802de82:	f043 0301 	orr.w	r3, r3, #1
 802de86:	81a3      	strh	r3, [r4, #12]
 802de88:	89a0      	ldrh	r0, [r4, #12]
 802de8a:	4305      	orrs	r5, r0
 802de8c:	81a5      	strh	r5, [r4, #12]
 802de8e:	e7cd      	b.n	802de2c <__smakebuf_r+0x18>
 802de90:	0802dc21 	.word	0x0802dc21

0802de94 <__malloc_lock>:
 802de94:	4801      	ldr	r0, [pc, #4]	; (802de9c <__malloc_lock+0x8>)
 802de96:	f7ff bf95 	b.w	802ddc4 <__retarget_lock_acquire_recursive>
 802de9a:	bf00      	nop
 802de9c:	200011ac 	.word	0x200011ac

0802dea0 <__malloc_unlock>:
 802dea0:	4801      	ldr	r0, [pc, #4]	; (802dea8 <__malloc_unlock+0x8>)
 802dea2:	f7ff bf90 	b.w	802ddc6 <__retarget_lock_release_recursive>
 802dea6:	bf00      	nop
 802dea8:	200011ac 	.word	0x200011ac

0802deac <__ssputs_r>:
 802deac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802deb0:	688e      	ldr	r6, [r1, #8]
 802deb2:	429e      	cmp	r6, r3
 802deb4:	4682      	mov	sl, r0
 802deb6:	460c      	mov	r4, r1
 802deb8:	4690      	mov	r8, r2
 802deba:	461f      	mov	r7, r3
 802debc:	d838      	bhi.n	802df30 <__ssputs_r+0x84>
 802debe:	898a      	ldrh	r2, [r1, #12]
 802dec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802dec4:	d032      	beq.n	802df2c <__ssputs_r+0x80>
 802dec6:	6825      	ldr	r5, [r4, #0]
 802dec8:	6909      	ldr	r1, [r1, #16]
 802deca:	eba5 0901 	sub.w	r9, r5, r1
 802dece:	6965      	ldr	r5, [r4, #20]
 802ded0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ded4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ded8:	3301      	adds	r3, #1
 802deda:	444b      	add	r3, r9
 802dedc:	106d      	asrs	r5, r5, #1
 802dede:	429d      	cmp	r5, r3
 802dee0:	bf38      	it	cc
 802dee2:	461d      	movcc	r5, r3
 802dee4:	0553      	lsls	r3, r2, #21
 802dee6:	d531      	bpl.n	802df4c <__ssputs_r+0xa0>
 802dee8:	4629      	mov	r1, r5
 802deea:	f7ff fbc1 	bl	802d670 <_malloc_r>
 802deee:	4606      	mov	r6, r0
 802def0:	b950      	cbnz	r0, 802df08 <__ssputs_r+0x5c>
 802def2:	230c      	movs	r3, #12
 802def4:	f8ca 3000 	str.w	r3, [sl]
 802def8:	89a3      	ldrh	r3, [r4, #12]
 802defa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802defe:	81a3      	strh	r3, [r4, #12]
 802df00:	f04f 30ff 	mov.w	r0, #4294967295
 802df04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802df08:	6921      	ldr	r1, [r4, #16]
 802df0a:	464a      	mov	r2, r9
 802df0c:	f000 fcb2 	bl	802e874 <memcpy>
 802df10:	89a3      	ldrh	r3, [r4, #12]
 802df12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802df16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802df1a:	81a3      	strh	r3, [r4, #12]
 802df1c:	6126      	str	r6, [r4, #16]
 802df1e:	6165      	str	r5, [r4, #20]
 802df20:	444e      	add	r6, r9
 802df22:	eba5 0509 	sub.w	r5, r5, r9
 802df26:	6026      	str	r6, [r4, #0]
 802df28:	60a5      	str	r5, [r4, #8]
 802df2a:	463e      	mov	r6, r7
 802df2c:	42be      	cmp	r6, r7
 802df2e:	d900      	bls.n	802df32 <__ssputs_r+0x86>
 802df30:	463e      	mov	r6, r7
 802df32:	6820      	ldr	r0, [r4, #0]
 802df34:	4632      	mov	r2, r6
 802df36:	4641      	mov	r1, r8
 802df38:	f000 fcaa 	bl	802e890 <memmove>
 802df3c:	68a3      	ldr	r3, [r4, #8]
 802df3e:	1b9b      	subs	r3, r3, r6
 802df40:	60a3      	str	r3, [r4, #8]
 802df42:	6823      	ldr	r3, [r4, #0]
 802df44:	4433      	add	r3, r6
 802df46:	6023      	str	r3, [r4, #0]
 802df48:	2000      	movs	r0, #0
 802df4a:	e7db      	b.n	802df04 <__ssputs_r+0x58>
 802df4c:	462a      	mov	r2, r5
 802df4e:	f000 fcb9 	bl	802e8c4 <_realloc_r>
 802df52:	4606      	mov	r6, r0
 802df54:	2800      	cmp	r0, #0
 802df56:	d1e1      	bne.n	802df1c <__ssputs_r+0x70>
 802df58:	6921      	ldr	r1, [r4, #16]
 802df5a:	4650      	mov	r0, sl
 802df5c:	f7ff fb1c 	bl	802d598 <_free_r>
 802df60:	e7c7      	b.n	802def2 <__ssputs_r+0x46>
	...

0802df64 <_svfiprintf_r>:
 802df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df68:	4698      	mov	r8, r3
 802df6a:	898b      	ldrh	r3, [r1, #12]
 802df6c:	061b      	lsls	r3, r3, #24
 802df6e:	b09d      	sub	sp, #116	; 0x74
 802df70:	4607      	mov	r7, r0
 802df72:	460d      	mov	r5, r1
 802df74:	4614      	mov	r4, r2
 802df76:	d50e      	bpl.n	802df96 <_svfiprintf_r+0x32>
 802df78:	690b      	ldr	r3, [r1, #16]
 802df7a:	b963      	cbnz	r3, 802df96 <_svfiprintf_r+0x32>
 802df7c:	2140      	movs	r1, #64	; 0x40
 802df7e:	f7ff fb77 	bl	802d670 <_malloc_r>
 802df82:	6028      	str	r0, [r5, #0]
 802df84:	6128      	str	r0, [r5, #16]
 802df86:	b920      	cbnz	r0, 802df92 <_svfiprintf_r+0x2e>
 802df88:	230c      	movs	r3, #12
 802df8a:	603b      	str	r3, [r7, #0]
 802df8c:	f04f 30ff 	mov.w	r0, #4294967295
 802df90:	e0d1      	b.n	802e136 <_svfiprintf_r+0x1d2>
 802df92:	2340      	movs	r3, #64	; 0x40
 802df94:	616b      	str	r3, [r5, #20]
 802df96:	2300      	movs	r3, #0
 802df98:	9309      	str	r3, [sp, #36]	; 0x24
 802df9a:	2320      	movs	r3, #32
 802df9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802dfa0:	f8cd 800c 	str.w	r8, [sp, #12]
 802dfa4:	2330      	movs	r3, #48	; 0x30
 802dfa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e150 <_svfiprintf_r+0x1ec>
 802dfaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802dfae:	f04f 0901 	mov.w	r9, #1
 802dfb2:	4623      	mov	r3, r4
 802dfb4:	469a      	mov	sl, r3
 802dfb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dfba:	b10a      	cbz	r2, 802dfc0 <_svfiprintf_r+0x5c>
 802dfbc:	2a25      	cmp	r2, #37	; 0x25
 802dfbe:	d1f9      	bne.n	802dfb4 <_svfiprintf_r+0x50>
 802dfc0:	ebba 0b04 	subs.w	fp, sl, r4
 802dfc4:	d00b      	beq.n	802dfde <_svfiprintf_r+0x7a>
 802dfc6:	465b      	mov	r3, fp
 802dfc8:	4622      	mov	r2, r4
 802dfca:	4629      	mov	r1, r5
 802dfcc:	4638      	mov	r0, r7
 802dfce:	f7ff ff6d 	bl	802deac <__ssputs_r>
 802dfd2:	3001      	adds	r0, #1
 802dfd4:	f000 80aa 	beq.w	802e12c <_svfiprintf_r+0x1c8>
 802dfd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802dfda:	445a      	add	r2, fp
 802dfdc:	9209      	str	r2, [sp, #36]	; 0x24
 802dfde:	f89a 3000 	ldrb.w	r3, [sl]
 802dfe2:	2b00      	cmp	r3, #0
 802dfe4:	f000 80a2 	beq.w	802e12c <_svfiprintf_r+0x1c8>
 802dfe8:	2300      	movs	r3, #0
 802dfea:	f04f 32ff 	mov.w	r2, #4294967295
 802dfee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802dff2:	f10a 0a01 	add.w	sl, sl, #1
 802dff6:	9304      	str	r3, [sp, #16]
 802dff8:	9307      	str	r3, [sp, #28]
 802dffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802dffe:	931a      	str	r3, [sp, #104]	; 0x68
 802e000:	4654      	mov	r4, sl
 802e002:	2205      	movs	r2, #5
 802e004:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e008:	4851      	ldr	r0, [pc, #324]	; (802e150 <_svfiprintf_r+0x1ec>)
 802e00a:	f7f2 f8f1 	bl	80201f0 <memchr>
 802e00e:	9a04      	ldr	r2, [sp, #16]
 802e010:	b9d8      	cbnz	r0, 802e04a <_svfiprintf_r+0xe6>
 802e012:	06d0      	lsls	r0, r2, #27
 802e014:	bf44      	itt	mi
 802e016:	2320      	movmi	r3, #32
 802e018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e01c:	0711      	lsls	r1, r2, #28
 802e01e:	bf44      	itt	mi
 802e020:	232b      	movmi	r3, #43	; 0x2b
 802e022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e026:	f89a 3000 	ldrb.w	r3, [sl]
 802e02a:	2b2a      	cmp	r3, #42	; 0x2a
 802e02c:	d015      	beq.n	802e05a <_svfiprintf_r+0xf6>
 802e02e:	9a07      	ldr	r2, [sp, #28]
 802e030:	4654      	mov	r4, sl
 802e032:	2000      	movs	r0, #0
 802e034:	f04f 0c0a 	mov.w	ip, #10
 802e038:	4621      	mov	r1, r4
 802e03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e03e:	3b30      	subs	r3, #48	; 0x30
 802e040:	2b09      	cmp	r3, #9
 802e042:	d94e      	bls.n	802e0e2 <_svfiprintf_r+0x17e>
 802e044:	b1b0      	cbz	r0, 802e074 <_svfiprintf_r+0x110>
 802e046:	9207      	str	r2, [sp, #28]
 802e048:	e014      	b.n	802e074 <_svfiprintf_r+0x110>
 802e04a:	eba0 0308 	sub.w	r3, r0, r8
 802e04e:	fa09 f303 	lsl.w	r3, r9, r3
 802e052:	4313      	orrs	r3, r2
 802e054:	9304      	str	r3, [sp, #16]
 802e056:	46a2      	mov	sl, r4
 802e058:	e7d2      	b.n	802e000 <_svfiprintf_r+0x9c>
 802e05a:	9b03      	ldr	r3, [sp, #12]
 802e05c:	1d19      	adds	r1, r3, #4
 802e05e:	681b      	ldr	r3, [r3, #0]
 802e060:	9103      	str	r1, [sp, #12]
 802e062:	2b00      	cmp	r3, #0
 802e064:	bfbb      	ittet	lt
 802e066:	425b      	neglt	r3, r3
 802e068:	f042 0202 	orrlt.w	r2, r2, #2
 802e06c:	9307      	strge	r3, [sp, #28]
 802e06e:	9307      	strlt	r3, [sp, #28]
 802e070:	bfb8      	it	lt
 802e072:	9204      	strlt	r2, [sp, #16]
 802e074:	7823      	ldrb	r3, [r4, #0]
 802e076:	2b2e      	cmp	r3, #46	; 0x2e
 802e078:	d10c      	bne.n	802e094 <_svfiprintf_r+0x130>
 802e07a:	7863      	ldrb	r3, [r4, #1]
 802e07c:	2b2a      	cmp	r3, #42	; 0x2a
 802e07e:	d135      	bne.n	802e0ec <_svfiprintf_r+0x188>
 802e080:	9b03      	ldr	r3, [sp, #12]
 802e082:	1d1a      	adds	r2, r3, #4
 802e084:	681b      	ldr	r3, [r3, #0]
 802e086:	9203      	str	r2, [sp, #12]
 802e088:	2b00      	cmp	r3, #0
 802e08a:	bfb8      	it	lt
 802e08c:	f04f 33ff 	movlt.w	r3, #4294967295
 802e090:	3402      	adds	r4, #2
 802e092:	9305      	str	r3, [sp, #20]
 802e094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e160 <_svfiprintf_r+0x1fc>
 802e098:	7821      	ldrb	r1, [r4, #0]
 802e09a:	2203      	movs	r2, #3
 802e09c:	4650      	mov	r0, sl
 802e09e:	f7f2 f8a7 	bl	80201f0 <memchr>
 802e0a2:	b140      	cbz	r0, 802e0b6 <_svfiprintf_r+0x152>
 802e0a4:	2340      	movs	r3, #64	; 0x40
 802e0a6:	eba0 000a 	sub.w	r0, r0, sl
 802e0aa:	fa03 f000 	lsl.w	r0, r3, r0
 802e0ae:	9b04      	ldr	r3, [sp, #16]
 802e0b0:	4303      	orrs	r3, r0
 802e0b2:	3401      	adds	r4, #1
 802e0b4:	9304      	str	r3, [sp, #16]
 802e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e0ba:	4826      	ldr	r0, [pc, #152]	; (802e154 <_svfiprintf_r+0x1f0>)
 802e0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e0c0:	2206      	movs	r2, #6
 802e0c2:	f7f2 f895 	bl	80201f0 <memchr>
 802e0c6:	2800      	cmp	r0, #0
 802e0c8:	d038      	beq.n	802e13c <_svfiprintf_r+0x1d8>
 802e0ca:	4b23      	ldr	r3, [pc, #140]	; (802e158 <_svfiprintf_r+0x1f4>)
 802e0cc:	bb1b      	cbnz	r3, 802e116 <_svfiprintf_r+0x1b2>
 802e0ce:	9b03      	ldr	r3, [sp, #12]
 802e0d0:	3307      	adds	r3, #7
 802e0d2:	f023 0307 	bic.w	r3, r3, #7
 802e0d6:	3308      	adds	r3, #8
 802e0d8:	9303      	str	r3, [sp, #12]
 802e0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e0dc:	4433      	add	r3, r6
 802e0de:	9309      	str	r3, [sp, #36]	; 0x24
 802e0e0:	e767      	b.n	802dfb2 <_svfiprintf_r+0x4e>
 802e0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 802e0e6:	460c      	mov	r4, r1
 802e0e8:	2001      	movs	r0, #1
 802e0ea:	e7a5      	b.n	802e038 <_svfiprintf_r+0xd4>
 802e0ec:	2300      	movs	r3, #0
 802e0ee:	3401      	adds	r4, #1
 802e0f0:	9305      	str	r3, [sp, #20]
 802e0f2:	4619      	mov	r1, r3
 802e0f4:	f04f 0c0a 	mov.w	ip, #10
 802e0f8:	4620      	mov	r0, r4
 802e0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e0fe:	3a30      	subs	r2, #48	; 0x30
 802e100:	2a09      	cmp	r2, #9
 802e102:	d903      	bls.n	802e10c <_svfiprintf_r+0x1a8>
 802e104:	2b00      	cmp	r3, #0
 802e106:	d0c5      	beq.n	802e094 <_svfiprintf_r+0x130>
 802e108:	9105      	str	r1, [sp, #20]
 802e10a:	e7c3      	b.n	802e094 <_svfiprintf_r+0x130>
 802e10c:	fb0c 2101 	mla	r1, ip, r1, r2
 802e110:	4604      	mov	r4, r0
 802e112:	2301      	movs	r3, #1
 802e114:	e7f0      	b.n	802e0f8 <_svfiprintf_r+0x194>
 802e116:	ab03      	add	r3, sp, #12
 802e118:	9300      	str	r3, [sp, #0]
 802e11a:	462a      	mov	r2, r5
 802e11c:	4b0f      	ldr	r3, [pc, #60]	; (802e15c <_svfiprintf_r+0x1f8>)
 802e11e:	a904      	add	r1, sp, #16
 802e120:	4638      	mov	r0, r7
 802e122:	f3af 8000 	nop.w
 802e126:	1c42      	adds	r2, r0, #1
 802e128:	4606      	mov	r6, r0
 802e12a:	d1d6      	bne.n	802e0da <_svfiprintf_r+0x176>
 802e12c:	89ab      	ldrh	r3, [r5, #12]
 802e12e:	065b      	lsls	r3, r3, #25
 802e130:	f53f af2c 	bmi.w	802df8c <_svfiprintf_r+0x28>
 802e134:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e136:	b01d      	add	sp, #116	; 0x74
 802e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e13c:	ab03      	add	r3, sp, #12
 802e13e:	9300      	str	r3, [sp, #0]
 802e140:	462a      	mov	r2, r5
 802e142:	4b06      	ldr	r3, [pc, #24]	; (802e15c <_svfiprintf_r+0x1f8>)
 802e144:	a904      	add	r1, sp, #16
 802e146:	4638      	mov	r0, r7
 802e148:	f000 f9d4 	bl	802e4f4 <_printf_i>
 802e14c:	e7eb      	b.n	802e126 <_svfiprintf_r+0x1c2>
 802e14e:	bf00      	nop
 802e150:	08030df0 	.word	0x08030df0
 802e154:	08030dfa 	.word	0x08030dfa
 802e158:	00000000 	.word	0x00000000
 802e15c:	0802dead 	.word	0x0802dead
 802e160:	08030df6 	.word	0x08030df6

0802e164 <__sfputc_r>:
 802e164:	6893      	ldr	r3, [r2, #8]
 802e166:	3b01      	subs	r3, #1
 802e168:	2b00      	cmp	r3, #0
 802e16a:	b410      	push	{r4}
 802e16c:	6093      	str	r3, [r2, #8]
 802e16e:	da08      	bge.n	802e182 <__sfputc_r+0x1e>
 802e170:	6994      	ldr	r4, [r2, #24]
 802e172:	42a3      	cmp	r3, r4
 802e174:	db01      	blt.n	802e17a <__sfputc_r+0x16>
 802e176:	290a      	cmp	r1, #10
 802e178:	d103      	bne.n	802e182 <__sfputc_r+0x1e>
 802e17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e17e:	f7ff bba9 	b.w	802d8d4 <__swbuf_r>
 802e182:	6813      	ldr	r3, [r2, #0]
 802e184:	1c58      	adds	r0, r3, #1
 802e186:	6010      	str	r0, [r2, #0]
 802e188:	7019      	strb	r1, [r3, #0]
 802e18a:	4608      	mov	r0, r1
 802e18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e190:	4770      	bx	lr

0802e192 <__sfputs_r>:
 802e192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e194:	4606      	mov	r6, r0
 802e196:	460f      	mov	r7, r1
 802e198:	4614      	mov	r4, r2
 802e19a:	18d5      	adds	r5, r2, r3
 802e19c:	42ac      	cmp	r4, r5
 802e19e:	d101      	bne.n	802e1a4 <__sfputs_r+0x12>
 802e1a0:	2000      	movs	r0, #0
 802e1a2:	e007      	b.n	802e1b4 <__sfputs_r+0x22>
 802e1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e1a8:	463a      	mov	r2, r7
 802e1aa:	4630      	mov	r0, r6
 802e1ac:	f7ff ffda 	bl	802e164 <__sfputc_r>
 802e1b0:	1c43      	adds	r3, r0, #1
 802e1b2:	d1f3      	bne.n	802e19c <__sfputs_r+0xa>
 802e1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e1b8 <_vfiprintf_r>:
 802e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e1bc:	460d      	mov	r5, r1
 802e1be:	b09d      	sub	sp, #116	; 0x74
 802e1c0:	4614      	mov	r4, r2
 802e1c2:	4698      	mov	r8, r3
 802e1c4:	4606      	mov	r6, r0
 802e1c6:	b118      	cbz	r0, 802e1d0 <_vfiprintf_r+0x18>
 802e1c8:	6983      	ldr	r3, [r0, #24]
 802e1ca:	b90b      	cbnz	r3, 802e1d0 <_vfiprintf_r+0x18>
 802e1cc:	f7ff fd5c 	bl	802dc88 <__sinit>
 802e1d0:	4b89      	ldr	r3, [pc, #548]	; (802e3f8 <_vfiprintf_r+0x240>)
 802e1d2:	429d      	cmp	r5, r3
 802e1d4:	d11b      	bne.n	802e20e <_vfiprintf_r+0x56>
 802e1d6:	6875      	ldr	r5, [r6, #4]
 802e1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e1da:	07d9      	lsls	r1, r3, #31
 802e1dc:	d405      	bmi.n	802e1ea <_vfiprintf_r+0x32>
 802e1de:	89ab      	ldrh	r3, [r5, #12]
 802e1e0:	059a      	lsls	r2, r3, #22
 802e1e2:	d402      	bmi.n	802e1ea <_vfiprintf_r+0x32>
 802e1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e1e6:	f7ff fded 	bl	802ddc4 <__retarget_lock_acquire_recursive>
 802e1ea:	89ab      	ldrh	r3, [r5, #12]
 802e1ec:	071b      	lsls	r3, r3, #28
 802e1ee:	d501      	bpl.n	802e1f4 <_vfiprintf_r+0x3c>
 802e1f0:	692b      	ldr	r3, [r5, #16]
 802e1f2:	b9eb      	cbnz	r3, 802e230 <_vfiprintf_r+0x78>
 802e1f4:	4629      	mov	r1, r5
 802e1f6:	4630      	mov	r0, r6
 802e1f8:	f7ff fbbe 	bl	802d978 <__swsetup_r>
 802e1fc:	b1c0      	cbz	r0, 802e230 <_vfiprintf_r+0x78>
 802e1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e200:	07dc      	lsls	r4, r3, #31
 802e202:	d50e      	bpl.n	802e222 <_vfiprintf_r+0x6a>
 802e204:	f04f 30ff 	mov.w	r0, #4294967295
 802e208:	b01d      	add	sp, #116	; 0x74
 802e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e20e:	4b7b      	ldr	r3, [pc, #492]	; (802e3fc <_vfiprintf_r+0x244>)
 802e210:	429d      	cmp	r5, r3
 802e212:	d101      	bne.n	802e218 <_vfiprintf_r+0x60>
 802e214:	68b5      	ldr	r5, [r6, #8]
 802e216:	e7df      	b.n	802e1d8 <_vfiprintf_r+0x20>
 802e218:	4b79      	ldr	r3, [pc, #484]	; (802e400 <_vfiprintf_r+0x248>)
 802e21a:	429d      	cmp	r5, r3
 802e21c:	bf08      	it	eq
 802e21e:	68f5      	ldreq	r5, [r6, #12]
 802e220:	e7da      	b.n	802e1d8 <_vfiprintf_r+0x20>
 802e222:	89ab      	ldrh	r3, [r5, #12]
 802e224:	0598      	lsls	r0, r3, #22
 802e226:	d4ed      	bmi.n	802e204 <_vfiprintf_r+0x4c>
 802e228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e22a:	f7ff fdcc 	bl	802ddc6 <__retarget_lock_release_recursive>
 802e22e:	e7e9      	b.n	802e204 <_vfiprintf_r+0x4c>
 802e230:	2300      	movs	r3, #0
 802e232:	9309      	str	r3, [sp, #36]	; 0x24
 802e234:	2320      	movs	r3, #32
 802e236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e23a:	f8cd 800c 	str.w	r8, [sp, #12]
 802e23e:	2330      	movs	r3, #48	; 0x30
 802e240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e404 <_vfiprintf_r+0x24c>
 802e244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e248:	f04f 0901 	mov.w	r9, #1
 802e24c:	4623      	mov	r3, r4
 802e24e:	469a      	mov	sl, r3
 802e250:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e254:	b10a      	cbz	r2, 802e25a <_vfiprintf_r+0xa2>
 802e256:	2a25      	cmp	r2, #37	; 0x25
 802e258:	d1f9      	bne.n	802e24e <_vfiprintf_r+0x96>
 802e25a:	ebba 0b04 	subs.w	fp, sl, r4
 802e25e:	d00b      	beq.n	802e278 <_vfiprintf_r+0xc0>
 802e260:	465b      	mov	r3, fp
 802e262:	4622      	mov	r2, r4
 802e264:	4629      	mov	r1, r5
 802e266:	4630      	mov	r0, r6
 802e268:	f7ff ff93 	bl	802e192 <__sfputs_r>
 802e26c:	3001      	adds	r0, #1
 802e26e:	f000 80aa 	beq.w	802e3c6 <_vfiprintf_r+0x20e>
 802e272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e274:	445a      	add	r2, fp
 802e276:	9209      	str	r2, [sp, #36]	; 0x24
 802e278:	f89a 3000 	ldrb.w	r3, [sl]
 802e27c:	2b00      	cmp	r3, #0
 802e27e:	f000 80a2 	beq.w	802e3c6 <_vfiprintf_r+0x20e>
 802e282:	2300      	movs	r3, #0
 802e284:	f04f 32ff 	mov.w	r2, #4294967295
 802e288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e28c:	f10a 0a01 	add.w	sl, sl, #1
 802e290:	9304      	str	r3, [sp, #16]
 802e292:	9307      	str	r3, [sp, #28]
 802e294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e298:	931a      	str	r3, [sp, #104]	; 0x68
 802e29a:	4654      	mov	r4, sl
 802e29c:	2205      	movs	r2, #5
 802e29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e2a2:	4858      	ldr	r0, [pc, #352]	; (802e404 <_vfiprintf_r+0x24c>)
 802e2a4:	f7f1 ffa4 	bl	80201f0 <memchr>
 802e2a8:	9a04      	ldr	r2, [sp, #16]
 802e2aa:	b9d8      	cbnz	r0, 802e2e4 <_vfiprintf_r+0x12c>
 802e2ac:	06d1      	lsls	r1, r2, #27
 802e2ae:	bf44      	itt	mi
 802e2b0:	2320      	movmi	r3, #32
 802e2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e2b6:	0713      	lsls	r3, r2, #28
 802e2b8:	bf44      	itt	mi
 802e2ba:	232b      	movmi	r3, #43	; 0x2b
 802e2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e2c0:	f89a 3000 	ldrb.w	r3, [sl]
 802e2c4:	2b2a      	cmp	r3, #42	; 0x2a
 802e2c6:	d015      	beq.n	802e2f4 <_vfiprintf_r+0x13c>
 802e2c8:	9a07      	ldr	r2, [sp, #28]
 802e2ca:	4654      	mov	r4, sl
 802e2cc:	2000      	movs	r0, #0
 802e2ce:	f04f 0c0a 	mov.w	ip, #10
 802e2d2:	4621      	mov	r1, r4
 802e2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e2d8:	3b30      	subs	r3, #48	; 0x30
 802e2da:	2b09      	cmp	r3, #9
 802e2dc:	d94e      	bls.n	802e37c <_vfiprintf_r+0x1c4>
 802e2de:	b1b0      	cbz	r0, 802e30e <_vfiprintf_r+0x156>
 802e2e0:	9207      	str	r2, [sp, #28]
 802e2e2:	e014      	b.n	802e30e <_vfiprintf_r+0x156>
 802e2e4:	eba0 0308 	sub.w	r3, r0, r8
 802e2e8:	fa09 f303 	lsl.w	r3, r9, r3
 802e2ec:	4313      	orrs	r3, r2
 802e2ee:	9304      	str	r3, [sp, #16]
 802e2f0:	46a2      	mov	sl, r4
 802e2f2:	e7d2      	b.n	802e29a <_vfiprintf_r+0xe2>
 802e2f4:	9b03      	ldr	r3, [sp, #12]
 802e2f6:	1d19      	adds	r1, r3, #4
 802e2f8:	681b      	ldr	r3, [r3, #0]
 802e2fa:	9103      	str	r1, [sp, #12]
 802e2fc:	2b00      	cmp	r3, #0
 802e2fe:	bfbb      	ittet	lt
 802e300:	425b      	neglt	r3, r3
 802e302:	f042 0202 	orrlt.w	r2, r2, #2
 802e306:	9307      	strge	r3, [sp, #28]
 802e308:	9307      	strlt	r3, [sp, #28]
 802e30a:	bfb8      	it	lt
 802e30c:	9204      	strlt	r2, [sp, #16]
 802e30e:	7823      	ldrb	r3, [r4, #0]
 802e310:	2b2e      	cmp	r3, #46	; 0x2e
 802e312:	d10c      	bne.n	802e32e <_vfiprintf_r+0x176>
 802e314:	7863      	ldrb	r3, [r4, #1]
 802e316:	2b2a      	cmp	r3, #42	; 0x2a
 802e318:	d135      	bne.n	802e386 <_vfiprintf_r+0x1ce>
 802e31a:	9b03      	ldr	r3, [sp, #12]
 802e31c:	1d1a      	adds	r2, r3, #4
 802e31e:	681b      	ldr	r3, [r3, #0]
 802e320:	9203      	str	r2, [sp, #12]
 802e322:	2b00      	cmp	r3, #0
 802e324:	bfb8      	it	lt
 802e326:	f04f 33ff 	movlt.w	r3, #4294967295
 802e32a:	3402      	adds	r4, #2
 802e32c:	9305      	str	r3, [sp, #20]
 802e32e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e414 <_vfiprintf_r+0x25c>
 802e332:	7821      	ldrb	r1, [r4, #0]
 802e334:	2203      	movs	r2, #3
 802e336:	4650      	mov	r0, sl
 802e338:	f7f1 ff5a 	bl	80201f0 <memchr>
 802e33c:	b140      	cbz	r0, 802e350 <_vfiprintf_r+0x198>
 802e33e:	2340      	movs	r3, #64	; 0x40
 802e340:	eba0 000a 	sub.w	r0, r0, sl
 802e344:	fa03 f000 	lsl.w	r0, r3, r0
 802e348:	9b04      	ldr	r3, [sp, #16]
 802e34a:	4303      	orrs	r3, r0
 802e34c:	3401      	adds	r4, #1
 802e34e:	9304      	str	r3, [sp, #16]
 802e350:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e354:	482c      	ldr	r0, [pc, #176]	; (802e408 <_vfiprintf_r+0x250>)
 802e356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e35a:	2206      	movs	r2, #6
 802e35c:	f7f1 ff48 	bl	80201f0 <memchr>
 802e360:	2800      	cmp	r0, #0
 802e362:	d03f      	beq.n	802e3e4 <_vfiprintf_r+0x22c>
 802e364:	4b29      	ldr	r3, [pc, #164]	; (802e40c <_vfiprintf_r+0x254>)
 802e366:	bb1b      	cbnz	r3, 802e3b0 <_vfiprintf_r+0x1f8>
 802e368:	9b03      	ldr	r3, [sp, #12]
 802e36a:	3307      	adds	r3, #7
 802e36c:	f023 0307 	bic.w	r3, r3, #7
 802e370:	3308      	adds	r3, #8
 802e372:	9303      	str	r3, [sp, #12]
 802e374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e376:	443b      	add	r3, r7
 802e378:	9309      	str	r3, [sp, #36]	; 0x24
 802e37a:	e767      	b.n	802e24c <_vfiprintf_r+0x94>
 802e37c:	fb0c 3202 	mla	r2, ip, r2, r3
 802e380:	460c      	mov	r4, r1
 802e382:	2001      	movs	r0, #1
 802e384:	e7a5      	b.n	802e2d2 <_vfiprintf_r+0x11a>
 802e386:	2300      	movs	r3, #0
 802e388:	3401      	adds	r4, #1
 802e38a:	9305      	str	r3, [sp, #20]
 802e38c:	4619      	mov	r1, r3
 802e38e:	f04f 0c0a 	mov.w	ip, #10
 802e392:	4620      	mov	r0, r4
 802e394:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e398:	3a30      	subs	r2, #48	; 0x30
 802e39a:	2a09      	cmp	r2, #9
 802e39c:	d903      	bls.n	802e3a6 <_vfiprintf_r+0x1ee>
 802e39e:	2b00      	cmp	r3, #0
 802e3a0:	d0c5      	beq.n	802e32e <_vfiprintf_r+0x176>
 802e3a2:	9105      	str	r1, [sp, #20]
 802e3a4:	e7c3      	b.n	802e32e <_vfiprintf_r+0x176>
 802e3a6:	fb0c 2101 	mla	r1, ip, r1, r2
 802e3aa:	4604      	mov	r4, r0
 802e3ac:	2301      	movs	r3, #1
 802e3ae:	e7f0      	b.n	802e392 <_vfiprintf_r+0x1da>
 802e3b0:	ab03      	add	r3, sp, #12
 802e3b2:	9300      	str	r3, [sp, #0]
 802e3b4:	462a      	mov	r2, r5
 802e3b6:	4b16      	ldr	r3, [pc, #88]	; (802e410 <_vfiprintf_r+0x258>)
 802e3b8:	a904      	add	r1, sp, #16
 802e3ba:	4630      	mov	r0, r6
 802e3bc:	f3af 8000 	nop.w
 802e3c0:	4607      	mov	r7, r0
 802e3c2:	1c78      	adds	r0, r7, #1
 802e3c4:	d1d6      	bne.n	802e374 <_vfiprintf_r+0x1bc>
 802e3c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e3c8:	07d9      	lsls	r1, r3, #31
 802e3ca:	d405      	bmi.n	802e3d8 <_vfiprintf_r+0x220>
 802e3cc:	89ab      	ldrh	r3, [r5, #12]
 802e3ce:	059a      	lsls	r2, r3, #22
 802e3d0:	d402      	bmi.n	802e3d8 <_vfiprintf_r+0x220>
 802e3d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e3d4:	f7ff fcf7 	bl	802ddc6 <__retarget_lock_release_recursive>
 802e3d8:	89ab      	ldrh	r3, [r5, #12]
 802e3da:	065b      	lsls	r3, r3, #25
 802e3dc:	f53f af12 	bmi.w	802e204 <_vfiprintf_r+0x4c>
 802e3e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e3e2:	e711      	b.n	802e208 <_vfiprintf_r+0x50>
 802e3e4:	ab03      	add	r3, sp, #12
 802e3e6:	9300      	str	r3, [sp, #0]
 802e3e8:	462a      	mov	r2, r5
 802e3ea:	4b09      	ldr	r3, [pc, #36]	; (802e410 <_vfiprintf_r+0x258>)
 802e3ec:	a904      	add	r1, sp, #16
 802e3ee:	4630      	mov	r0, r6
 802e3f0:	f000 f880 	bl	802e4f4 <_printf_i>
 802e3f4:	e7e4      	b.n	802e3c0 <_vfiprintf_r+0x208>
 802e3f6:	bf00      	nop
 802e3f8:	08030db0 	.word	0x08030db0
 802e3fc:	08030dd0 	.word	0x08030dd0
 802e400:	08030d90 	.word	0x08030d90
 802e404:	08030df0 	.word	0x08030df0
 802e408:	08030dfa 	.word	0x08030dfa
 802e40c:	00000000 	.word	0x00000000
 802e410:	0802e193 	.word	0x0802e193
 802e414:	08030df6 	.word	0x08030df6

0802e418 <_printf_common>:
 802e418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e41c:	4616      	mov	r6, r2
 802e41e:	4699      	mov	r9, r3
 802e420:	688a      	ldr	r2, [r1, #8]
 802e422:	690b      	ldr	r3, [r1, #16]
 802e424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e428:	4293      	cmp	r3, r2
 802e42a:	bfb8      	it	lt
 802e42c:	4613      	movlt	r3, r2
 802e42e:	6033      	str	r3, [r6, #0]
 802e430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e434:	4607      	mov	r7, r0
 802e436:	460c      	mov	r4, r1
 802e438:	b10a      	cbz	r2, 802e43e <_printf_common+0x26>
 802e43a:	3301      	adds	r3, #1
 802e43c:	6033      	str	r3, [r6, #0]
 802e43e:	6823      	ldr	r3, [r4, #0]
 802e440:	0699      	lsls	r1, r3, #26
 802e442:	bf42      	ittt	mi
 802e444:	6833      	ldrmi	r3, [r6, #0]
 802e446:	3302      	addmi	r3, #2
 802e448:	6033      	strmi	r3, [r6, #0]
 802e44a:	6825      	ldr	r5, [r4, #0]
 802e44c:	f015 0506 	ands.w	r5, r5, #6
 802e450:	d106      	bne.n	802e460 <_printf_common+0x48>
 802e452:	f104 0a19 	add.w	sl, r4, #25
 802e456:	68e3      	ldr	r3, [r4, #12]
 802e458:	6832      	ldr	r2, [r6, #0]
 802e45a:	1a9b      	subs	r3, r3, r2
 802e45c:	42ab      	cmp	r3, r5
 802e45e:	dc26      	bgt.n	802e4ae <_printf_common+0x96>
 802e460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e464:	1e13      	subs	r3, r2, #0
 802e466:	6822      	ldr	r2, [r4, #0]
 802e468:	bf18      	it	ne
 802e46a:	2301      	movne	r3, #1
 802e46c:	0692      	lsls	r2, r2, #26
 802e46e:	d42b      	bmi.n	802e4c8 <_printf_common+0xb0>
 802e470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e474:	4649      	mov	r1, r9
 802e476:	4638      	mov	r0, r7
 802e478:	47c0      	blx	r8
 802e47a:	3001      	adds	r0, #1
 802e47c:	d01e      	beq.n	802e4bc <_printf_common+0xa4>
 802e47e:	6823      	ldr	r3, [r4, #0]
 802e480:	68e5      	ldr	r5, [r4, #12]
 802e482:	6832      	ldr	r2, [r6, #0]
 802e484:	f003 0306 	and.w	r3, r3, #6
 802e488:	2b04      	cmp	r3, #4
 802e48a:	bf08      	it	eq
 802e48c:	1aad      	subeq	r5, r5, r2
 802e48e:	68a3      	ldr	r3, [r4, #8]
 802e490:	6922      	ldr	r2, [r4, #16]
 802e492:	bf0c      	ite	eq
 802e494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e498:	2500      	movne	r5, #0
 802e49a:	4293      	cmp	r3, r2
 802e49c:	bfc4      	itt	gt
 802e49e:	1a9b      	subgt	r3, r3, r2
 802e4a0:	18ed      	addgt	r5, r5, r3
 802e4a2:	2600      	movs	r6, #0
 802e4a4:	341a      	adds	r4, #26
 802e4a6:	42b5      	cmp	r5, r6
 802e4a8:	d11a      	bne.n	802e4e0 <_printf_common+0xc8>
 802e4aa:	2000      	movs	r0, #0
 802e4ac:	e008      	b.n	802e4c0 <_printf_common+0xa8>
 802e4ae:	2301      	movs	r3, #1
 802e4b0:	4652      	mov	r2, sl
 802e4b2:	4649      	mov	r1, r9
 802e4b4:	4638      	mov	r0, r7
 802e4b6:	47c0      	blx	r8
 802e4b8:	3001      	adds	r0, #1
 802e4ba:	d103      	bne.n	802e4c4 <_printf_common+0xac>
 802e4bc:	f04f 30ff 	mov.w	r0, #4294967295
 802e4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e4c4:	3501      	adds	r5, #1
 802e4c6:	e7c6      	b.n	802e456 <_printf_common+0x3e>
 802e4c8:	18e1      	adds	r1, r4, r3
 802e4ca:	1c5a      	adds	r2, r3, #1
 802e4cc:	2030      	movs	r0, #48	; 0x30
 802e4ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e4d2:	4422      	add	r2, r4
 802e4d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e4d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e4dc:	3302      	adds	r3, #2
 802e4de:	e7c7      	b.n	802e470 <_printf_common+0x58>
 802e4e0:	2301      	movs	r3, #1
 802e4e2:	4622      	mov	r2, r4
 802e4e4:	4649      	mov	r1, r9
 802e4e6:	4638      	mov	r0, r7
 802e4e8:	47c0      	blx	r8
 802e4ea:	3001      	adds	r0, #1
 802e4ec:	d0e6      	beq.n	802e4bc <_printf_common+0xa4>
 802e4ee:	3601      	adds	r6, #1
 802e4f0:	e7d9      	b.n	802e4a6 <_printf_common+0x8e>
	...

0802e4f4 <_printf_i>:
 802e4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e4f8:	7e0f      	ldrb	r7, [r1, #24]
 802e4fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e4fc:	2f78      	cmp	r7, #120	; 0x78
 802e4fe:	4691      	mov	r9, r2
 802e500:	4680      	mov	r8, r0
 802e502:	460c      	mov	r4, r1
 802e504:	469a      	mov	sl, r3
 802e506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e50a:	d807      	bhi.n	802e51c <_printf_i+0x28>
 802e50c:	2f62      	cmp	r7, #98	; 0x62
 802e50e:	d80a      	bhi.n	802e526 <_printf_i+0x32>
 802e510:	2f00      	cmp	r7, #0
 802e512:	f000 80d8 	beq.w	802e6c6 <_printf_i+0x1d2>
 802e516:	2f58      	cmp	r7, #88	; 0x58
 802e518:	f000 80a3 	beq.w	802e662 <_printf_i+0x16e>
 802e51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e524:	e03a      	b.n	802e59c <_printf_i+0xa8>
 802e526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e52a:	2b15      	cmp	r3, #21
 802e52c:	d8f6      	bhi.n	802e51c <_printf_i+0x28>
 802e52e:	a101      	add	r1, pc, #4	; (adr r1, 802e534 <_printf_i+0x40>)
 802e530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e534:	0802e58d 	.word	0x0802e58d
 802e538:	0802e5a1 	.word	0x0802e5a1
 802e53c:	0802e51d 	.word	0x0802e51d
 802e540:	0802e51d 	.word	0x0802e51d
 802e544:	0802e51d 	.word	0x0802e51d
 802e548:	0802e51d 	.word	0x0802e51d
 802e54c:	0802e5a1 	.word	0x0802e5a1
 802e550:	0802e51d 	.word	0x0802e51d
 802e554:	0802e51d 	.word	0x0802e51d
 802e558:	0802e51d 	.word	0x0802e51d
 802e55c:	0802e51d 	.word	0x0802e51d
 802e560:	0802e6ad 	.word	0x0802e6ad
 802e564:	0802e5d1 	.word	0x0802e5d1
 802e568:	0802e68f 	.word	0x0802e68f
 802e56c:	0802e51d 	.word	0x0802e51d
 802e570:	0802e51d 	.word	0x0802e51d
 802e574:	0802e6cf 	.word	0x0802e6cf
 802e578:	0802e51d 	.word	0x0802e51d
 802e57c:	0802e5d1 	.word	0x0802e5d1
 802e580:	0802e51d 	.word	0x0802e51d
 802e584:	0802e51d 	.word	0x0802e51d
 802e588:	0802e697 	.word	0x0802e697
 802e58c:	682b      	ldr	r3, [r5, #0]
 802e58e:	1d1a      	adds	r2, r3, #4
 802e590:	681b      	ldr	r3, [r3, #0]
 802e592:	602a      	str	r2, [r5, #0]
 802e594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e59c:	2301      	movs	r3, #1
 802e59e:	e0a3      	b.n	802e6e8 <_printf_i+0x1f4>
 802e5a0:	6820      	ldr	r0, [r4, #0]
 802e5a2:	6829      	ldr	r1, [r5, #0]
 802e5a4:	0606      	lsls	r6, r0, #24
 802e5a6:	f101 0304 	add.w	r3, r1, #4
 802e5aa:	d50a      	bpl.n	802e5c2 <_printf_i+0xce>
 802e5ac:	680e      	ldr	r6, [r1, #0]
 802e5ae:	602b      	str	r3, [r5, #0]
 802e5b0:	2e00      	cmp	r6, #0
 802e5b2:	da03      	bge.n	802e5bc <_printf_i+0xc8>
 802e5b4:	232d      	movs	r3, #45	; 0x2d
 802e5b6:	4276      	negs	r6, r6
 802e5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e5bc:	485e      	ldr	r0, [pc, #376]	; (802e738 <_printf_i+0x244>)
 802e5be:	230a      	movs	r3, #10
 802e5c0:	e019      	b.n	802e5f6 <_printf_i+0x102>
 802e5c2:	680e      	ldr	r6, [r1, #0]
 802e5c4:	602b      	str	r3, [r5, #0]
 802e5c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e5ca:	bf18      	it	ne
 802e5cc:	b236      	sxthne	r6, r6
 802e5ce:	e7ef      	b.n	802e5b0 <_printf_i+0xbc>
 802e5d0:	682b      	ldr	r3, [r5, #0]
 802e5d2:	6820      	ldr	r0, [r4, #0]
 802e5d4:	1d19      	adds	r1, r3, #4
 802e5d6:	6029      	str	r1, [r5, #0]
 802e5d8:	0601      	lsls	r1, r0, #24
 802e5da:	d501      	bpl.n	802e5e0 <_printf_i+0xec>
 802e5dc:	681e      	ldr	r6, [r3, #0]
 802e5de:	e002      	b.n	802e5e6 <_printf_i+0xf2>
 802e5e0:	0646      	lsls	r6, r0, #25
 802e5e2:	d5fb      	bpl.n	802e5dc <_printf_i+0xe8>
 802e5e4:	881e      	ldrh	r6, [r3, #0]
 802e5e6:	4854      	ldr	r0, [pc, #336]	; (802e738 <_printf_i+0x244>)
 802e5e8:	2f6f      	cmp	r7, #111	; 0x6f
 802e5ea:	bf0c      	ite	eq
 802e5ec:	2308      	moveq	r3, #8
 802e5ee:	230a      	movne	r3, #10
 802e5f0:	2100      	movs	r1, #0
 802e5f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e5f6:	6865      	ldr	r5, [r4, #4]
 802e5f8:	60a5      	str	r5, [r4, #8]
 802e5fa:	2d00      	cmp	r5, #0
 802e5fc:	bfa2      	ittt	ge
 802e5fe:	6821      	ldrge	r1, [r4, #0]
 802e600:	f021 0104 	bicge.w	r1, r1, #4
 802e604:	6021      	strge	r1, [r4, #0]
 802e606:	b90e      	cbnz	r6, 802e60c <_printf_i+0x118>
 802e608:	2d00      	cmp	r5, #0
 802e60a:	d04d      	beq.n	802e6a8 <_printf_i+0x1b4>
 802e60c:	4615      	mov	r5, r2
 802e60e:	fbb6 f1f3 	udiv	r1, r6, r3
 802e612:	fb03 6711 	mls	r7, r3, r1, r6
 802e616:	5dc7      	ldrb	r7, [r0, r7]
 802e618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e61c:	4637      	mov	r7, r6
 802e61e:	42bb      	cmp	r3, r7
 802e620:	460e      	mov	r6, r1
 802e622:	d9f4      	bls.n	802e60e <_printf_i+0x11a>
 802e624:	2b08      	cmp	r3, #8
 802e626:	d10b      	bne.n	802e640 <_printf_i+0x14c>
 802e628:	6823      	ldr	r3, [r4, #0]
 802e62a:	07de      	lsls	r6, r3, #31
 802e62c:	d508      	bpl.n	802e640 <_printf_i+0x14c>
 802e62e:	6923      	ldr	r3, [r4, #16]
 802e630:	6861      	ldr	r1, [r4, #4]
 802e632:	4299      	cmp	r1, r3
 802e634:	bfde      	ittt	le
 802e636:	2330      	movle	r3, #48	; 0x30
 802e638:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e63c:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e640:	1b52      	subs	r2, r2, r5
 802e642:	6122      	str	r2, [r4, #16]
 802e644:	f8cd a000 	str.w	sl, [sp]
 802e648:	464b      	mov	r3, r9
 802e64a:	aa03      	add	r2, sp, #12
 802e64c:	4621      	mov	r1, r4
 802e64e:	4640      	mov	r0, r8
 802e650:	f7ff fee2 	bl	802e418 <_printf_common>
 802e654:	3001      	adds	r0, #1
 802e656:	d14c      	bne.n	802e6f2 <_printf_i+0x1fe>
 802e658:	f04f 30ff 	mov.w	r0, #4294967295
 802e65c:	b004      	add	sp, #16
 802e65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e662:	4835      	ldr	r0, [pc, #212]	; (802e738 <_printf_i+0x244>)
 802e664:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802e668:	6829      	ldr	r1, [r5, #0]
 802e66a:	6823      	ldr	r3, [r4, #0]
 802e66c:	f851 6b04 	ldr.w	r6, [r1], #4
 802e670:	6029      	str	r1, [r5, #0]
 802e672:	061d      	lsls	r5, r3, #24
 802e674:	d514      	bpl.n	802e6a0 <_printf_i+0x1ac>
 802e676:	07df      	lsls	r7, r3, #31
 802e678:	bf44      	itt	mi
 802e67a:	f043 0320 	orrmi.w	r3, r3, #32
 802e67e:	6023      	strmi	r3, [r4, #0]
 802e680:	b91e      	cbnz	r6, 802e68a <_printf_i+0x196>
 802e682:	6823      	ldr	r3, [r4, #0]
 802e684:	f023 0320 	bic.w	r3, r3, #32
 802e688:	6023      	str	r3, [r4, #0]
 802e68a:	2310      	movs	r3, #16
 802e68c:	e7b0      	b.n	802e5f0 <_printf_i+0xfc>
 802e68e:	6823      	ldr	r3, [r4, #0]
 802e690:	f043 0320 	orr.w	r3, r3, #32
 802e694:	6023      	str	r3, [r4, #0]
 802e696:	2378      	movs	r3, #120	; 0x78
 802e698:	4828      	ldr	r0, [pc, #160]	; (802e73c <_printf_i+0x248>)
 802e69a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e69e:	e7e3      	b.n	802e668 <_printf_i+0x174>
 802e6a0:	0659      	lsls	r1, r3, #25
 802e6a2:	bf48      	it	mi
 802e6a4:	b2b6      	uxthmi	r6, r6
 802e6a6:	e7e6      	b.n	802e676 <_printf_i+0x182>
 802e6a8:	4615      	mov	r5, r2
 802e6aa:	e7bb      	b.n	802e624 <_printf_i+0x130>
 802e6ac:	682b      	ldr	r3, [r5, #0]
 802e6ae:	6826      	ldr	r6, [r4, #0]
 802e6b0:	6961      	ldr	r1, [r4, #20]
 802e6b2:	1d18      	adds	r0, r3, #4
 802e6b4:	6028      	str	r0, [r5, #0]
 802e6b6:	0635      	lsls	r5, r6, #24
 802e6b8:	681b      	ldr	r3, [r3, #0]
 802e6ba:	d501      	bpl.n	802e6c0 <_printf_i+0x1cc>
 802e6bc:	6019      	str	r1, [r3, #0]
 802e6be:	e002      	b.n	802e6c6 <_printf_i+0x1d2>
 802e6c0:	0670      	lsls	r0, r6, #25
 802e6c2:	d5fb      	bpl.n	802e6bc <_printf_i+0x1c8>
 802e6c4:	8019      	strh	r1, [r3, #0]
 802e6c6:	2300      	movs	r3, #0
 802e6c8:	6123      	str	r3, [r4, #16]
 802e6ca:	4615      	mov	r5, r2
 802e6cc:	e7ba      	b.n	802e644 <_printf_i+0x150>
 802e6ce:	682b      	ldr	r3, [r5, #0]
 802e6d0:	1d1a      	adds	r2, r3, #4
 802e6d2:	602a      	str	r2, [r5, #0]
 802e6d4:	681d      	ldr	r5, [r3, #0]
 802e6d6:	6862      	ldr	r2, [r4, #4]
 802e6d8:	2100      	movs	r1, #0
 802e6da:	4628      	mov	r0, r5
 802e6dc:	f7f1 fd88 	bl	80201f0 <memchr>
 802e6e0:	b108      	cbz	r0, 802e6e6 <_printf_i+0x1f2>
 802e6e2:	1b40      	subs	r0, r0, r5
 802e6e4:	6060      	str	r0, [r4, #4]
 802e6e6:	6863      	ldr	r3, [r4, #4]
 802e6e8:	6123      	str	r3, [r4, #16]
 802e6ea:	2300      	movs	r3, #0
 802e6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e6f0:	e7a8      	b.n	802e644 <_printf_i+0x150>
 802e6f2:	6923      	ldr	r3, [r4, #16]
 802e6f4:	462a      	mov	r2, r5
 802e6f6:	4649      	mov	r1, r9
 802e6f8:	4640      	mov	r0, r8
 802e6fa:	47d0      	blx	sl
 802e6fc:	3001      	adds	r0, #1
 802e6fe:	d0ab      	beq.n	802e658 <_printf_i+0x164>
 802e700:	6823      	ldr	r3, [r4, #0]
 802e702:	079b      	lsls	r3, r3, #30
 802e704:	d413      	bmi.n	802e72e <_printf_i+0x23a>
 802e706:	68e0      	ldr	r0, [r4, #12]
 802e708:	9b03      	ldr	r3, [sp, #12]
 802e70a:	4298      	cmp	r0, r3
 802e70c:	bfb8      	it	lt
 802e70e:	4618      	movlt	r0, r3
 802e710:	e7a4      	b.n	802e65c <_printf_i+0x168>
 802e712:	2301      	movs	r3, #1
 802e714:	4632      	mov	r2, r6
 802e716:	4649      	mov	r1, r9
 802e718:	4640      	mov	r0, r8
 802e71a:	47d0      	blx	sl
 802e71c:	3001      	adds	r0, #1
 802e71e:	d09b      	beq.n	802e658 <_printf_i+0x164>
 802e720:	3501      	adds	r5, #1
 802e722:	68e3      	ldr	r3, [r4, #12]
 802e724:	9903      	ldr	r1, [sp, #12]
 802e726:	1a5b      	subs	r3, r3, r1
 802e728:	42ab      	cmp	r3, r5
 802e72a:	dcf2      	bgt.n	802e712 <_printf_i+0x21e>
 802e72c:	e7eb      	b.n	802e706 <_printf_i+0x212>
 802e72e:	2500      	movs	r5, #0
 802e730:	f104 0619 	add.w	r6, r4, #25
 802e734:	e7f5      	b.n	802e722 <_printf_i+0x22e>
 802e736:	bf00      	nop
 802e738:	08030e01 	.word	0x08030e01
 802e73c:	08030e12 	.word	0x08030e12

0802e740 <__sread>:
 802e740:	b510      	push	{r4, lr}
 802e742:	460c      	mov	r4, r1
 802e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e748:	f000 f8ec 	bl	802e924 <_read_r>
 802e74c:	2800      	cmp	r0, #0
 802e74e:	bfab      	itete	ge
 802e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e752:	89a3      	ldrhlt	r3, [r4, #12]
 802e754:	181b      	addge	r3, r3, r0
 802e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e75a:	bfac      	ite	ge
 802e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 802e75e:	81a3      	strhlt	r3, [r4, #12]
 802e760:	bd10      	pop	{r4, pc}

0802e762 <__swrite>:
 802e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e766:	461f      	mov	r7, r3
 802e768:	898b      	ldrh	r3, [r1, #12]
 802e76a:	05db      	lsls	r3, r3, #23
 802e76c:	4605      	mov	r5, r0
 802e76e:	460c      	mov	r4, r1
 802e770:	4616      	mov	r6, r2
 802e772:	d505      	bpl.n	802e780 <__swrite+0x1e>
 802e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e778:	2302      	movs	r3, #2
 802e77a:	2200      	movs	r2, #0
 802e77c:	f000 f868 	bl	802e850 <_lseek_r>
 802e780:	89a3      	ldrh	r3, [r4, #12]
 802e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e78a:	81a3      	strh	r3, [r4, #12]
 802e78c:	4632      	mov	r2, r6
 802e78e:	463b      	mov	r3, r7
 802e790:	4628      	mov	r0, r5
 802e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e796:	f000 b817 	b.w	802e7c8 <_write_r>

0802e79a <__sseek>:
 802e79a:	b510      	push	{r4, lr}
 802e79c:	460c      	mov	r4, r1
 802e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e7a2:	f000 f855 	bl	802e850 <_lseek_r>
 802e7a6:	1c43      	adds	r3, r0, #1
 802e7a8:	89a3      	ldrh	r3, [r4, #12]
 802e7aa:	bf15      	itete	ne
 802e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 802e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e7b6:	81a3      	strheq	r3, [r4, #12]
 802e7b8:	bf18      	it	ne
 802e7ba:	81a3      	strhne	r3, [r4, #12]
 802e7bc:	bd10      	pop	{r4, pc}

0802e7be <__sclose>:
 802e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e7c2:	f000 b813 	b.w	802e7ec <_close_r>
	...

0802e7c8 <_write_r>:
 802e7c8:	b538      	push	{r3, r4, r5, lr}
 802e7ca:	4d07      	ldr	r5, [pc, #28]	; (802e7e8 <_write_r+0x20>)
 802e7cc:	4604      	mov	r4, r0
 802e7ce:	4608      	mov	r0, r1
 802e7d0:	4611      	mov	r1, r2
 802e7d2:	2200      	movs	r2, #0
 802e7d4:	602a      	str	r2, [r5, #0]
 802e7d6:	461a      	mov	r2, r3
 802e7d8:	f7f3 f9f2 	bl	8021bc0 <_write>
 802e7dc:	1c43      	adds	r3, r0, #1
 802e7de:	d102      	bne.n	802e7e6 <_write_r+0x1e>
 802e7e0:	682b      	ldr	r3, [r5, #0]
 802e7e2:	b103      	cbz	r3, 802e7e6 <_write_r+0x1e>
 802e7e4:	6023      	str	r3, [r4, #0]
 802e7e6:	bd38      	pop	{r3, r4, r5, pc}
 802e7e8:	200011b0 	.word	0x200011b0

0802e7ec <_close_r>:
 802e7ec:	b538      	push	{r3, r4, r5, lr}
 802e7ee:	4d06      	ldr	r5, [pc, #24]	; (802e808 <_close_r+0x1c>)
 802e7f0:	2300      	movs	r3, #0
 802e7f2:	4604      	mov	r4, r0
 802e7f4:	4608      	mov	r0, r1
 802e7f6:	602b      	str	r3, [r5, #0]
 802e7f8:	f7f3 f9fe 	bl	8021bf8 <_close>
 802e7fc:	1c43      	adds	r3, r0, #1
 802e7fe:	d102      	bne.n	802e806 <_close_r+0x1a>
 802e800:	682b      	ldr	r3, [r5, #0]
 802e802:	b103      	cbz	r3, 802e806 <_close_r+0x1a>
 802e804:	6023      	str	r3, [r4, #0]
 802e806:	bd38      	pop	{r3, r4, r5, pc}
 802e808:	200011b0 	.word	0x200011b0

0802e80c <_fstat_r>:
 802e80c:	b538      	push	{r3, r4, r5, lr}
 802e80e:	4d07      	ldr	r5, [pc, #28]	; (802e82c <_fstat_r+0x20>)
 802e810:	2300      	movs	r3, #0
 802e812:	4604      	mov	r4, r0
 802e814:	4608      	mov	r0, r1
 802e816:	4611      	mov	r1, r2
 802e818:	602b      	str	r3, [r5, #0]
 802e81a:	f7f3 f9f9 	bl	8021c10 <_fstat>
 802e81e:	1c43      	adds	r3, r0, #1
 802e820:	d102      	bne.n	802e828 <_fstat_r+0x1c>
 802e822:	682b      	ldr	r3, [r5, #0]
 802e824:	b103      	cbz	r3, 802e828 <_fstat_r+0x1c>
 802e826:	6023      	str	r3, [r4, #0]
 802e828:	bd38      	pop	{r3, r4, r5, pc}
 802e82a:	bf00      	nop
 802e82c:	200011b0 	.word	0x200011b0

0802e830 <_isatty_r>:
 802e830:	b538      	push	{r3, r4, r5, lr}
 802e832:	4d06      	ldr	r5, [pc, #24]	; (802e84c <_isatty_r+0x1c>)
 802e834:	2300      	movs	r3, #0
 802e836:	4604      	mov	r4, r0
 802e838:	4608      	mov	r0, r1
 802e83a:	602b      	str	r3, [r5, #0]
 802e83c:	f7f3 f9f8 	bl	8021c30 <_isatty>
 802e840:	1c43      	adds	r3, r0, #1
 802e842:	d102      	bne.n	802e84a <_isatty_r+0x1a>
 802e844:	682b      	ldr	r3, [r5, #0]
 802e846:	b103      	cbz	r3, 802e84a <_isatty_r+0x1a>
 802e848:	6023      	str	r3, [r4, #0]
 802e84a:	bd38      	pop	{r3, r4, r5, pc}
 802e84c:	200011b0 	.word	0x200011b0

0802e850 <_lseek_r>:
 802e850:	b538      	push	{r3, r4, r5, lr}
 802e852:	4d07      	ldr	r5, [pc, #28]	; (802e870 <_lseek_r+0x20>)
 802e854:	4604      	mov	r4, r0
 802e856:	4608      	mov	r0, r1
 802e858:	4611      	mov	r1, r2
 802e85a:	2200      	movs	r2, #0
 802e85c:	602a      	str	r2, [r5, #0]
 802e85e:	461a      	mov	r2, r3
 802e860:	f7f3 f9f1 	bl	8021c46 <_lseek>
 802e864:	1c43      	adds	r3, r0, #1
 802e866:	d102      	bne.n	802e86e <_lseek_r+0x1e>
 802e868:	682b      	ldr	r3, [r5, #0]
 802e86a:	b103      	cbz	r3, 802e86e <_lseek_r+0x1e>
 802e86c:	6023      	str	r3, [r4, #0]
 802e86e:	bd38      	pop	{r3, r4, r5, pc}
 802e870:	200011b0 	.word	0x200011b0

0802e874 <memcpy>:
 802e874:	440a      	add	r2, r1
 802e876:	4291      	cmp	r1, r2
 802e878:	f100 33ff 	add.w	r3, r0, #4294967295
 802e87c:	d100      	bne.n	802e880 <memcpy+0xc>
 802e87e:	4770      	bx	lr
 802e880:	b510      	push	{r4, lr}
 802e882:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e886:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e88a:	4291      	cmp	r1, r2
 802e88c:	d1f9      	bne.n	802e882 <memcpy+0xe>
 802e88e:	bd10      	pop	{r4, pc}

0802e890 <memmove>:
 802e890:	4288      	cmp	r0, r1
 802e892:	b510      	push	{r4, lr}
 802e894:	eb01 0402 	add.w	r4, r1, r2
 802e898:	d902      	bls.n	802e8a0 <memmove+0x10>
 802e89a:	4284      	cmp	r4, r0
 802e89c:	4623      	mov	r3, r4
 802e89e:	d807      	bhi.n	802e8b0 <memmove+0x20>
 802e8a0:	1e43      	subs	r3, r0, #1
 802e8a2:	42a1      	cmp	r1, r4
 802e8a4:	d008      	beq.n	802e8b8 <memmove+0x28>
 802e8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e8aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e8ae:	e7f8      	b.n	802e8a2 <memmove+0x12>
 802e8b0:	4402      	add	r2, r0
 802e8b2:	4601      	mov	r1, r0
 802e8b4:	428a      	cmp	r2, r1
 802e8b6:	d100      	bne.n	802e8ba <memmove+0x2a>
 802e8b8:	bd10      	pop	{r4, pc}
 802e8ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e8be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e8c2:	e7f7      	b.n	802e8b4 <memmove+0x24>

0802e8c4 <_realloc_r>:
 802e8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e8c8:	4680      	mov	r8, r0
 802e8ca:	4614      	mov	r4, r2
 802e8cc:	460e      	mov	r6, r1
 802e8ce:	b921      	cbnz	r1, 802e8da <_realloc_r+0x16>
 802e8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e8d4:	4611      	mov	r1, r2
 802e8d6:	f7fe becb 	b.w	802d670 <_malloc_r>
 802e8da:	b92a      	cbnz	r2, 802e8e8 <_realloc_r+0x24>
 802e8dc:	f7fe fe5c 	bl	802d598 <_free_r>
 802e8e0:	4625      	mov	r5, r4
 802e8e2:	4628      	mov	r0, r5
 802e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e8e8:	f000 f82e 	bl	802e948 <_malloc_usable_size_r>
 802e8ec:	4284      	cmp	r4, r0
 802e8ee:	4607      	mov	r7, r0
 802e8f0:	d802      	bhi.n	802e8f8 <_realloc_r+0x34>
 802e8f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802e8f6:	d812      	bhi.n	802e91e <_realloc_r+0x5a>
 802e8f8:	4621      	mov	r1, r4
 802e8fa:	4640      	mov	r0, r8
 802e8fc:	f7fe feb8 	bl	802d670 <_malloc_r>
 802e900:	4605      	mov	r5, r0
 802e902:	2800      	cmp	r0, #0
 802e904:	d0ed      	beq.n	802e8e2 <_realloc_r+0x1e>
 802e906:	42bc      	cmp	r4, r7
 802e908:	4622      	mov	r2, r4
 802e90a:	4631      	mov	r1, r6
 802e90c:	bf28      	it	cs
 802e90e:	463a      	movcs	r2, r7
 802e910:	f7ff ffb0 	bl	802e874 <memcpy>
 802e914:	4631      	mov	r1, r6
 802e916:	4640      	mov	r0, r8
 802e918:	f7fe fe3e 	bl	802d598 <_free_r>
 802e91c:	e7e1      	b.n	802e8e2 <_realloc_r+0x1e>
 802e91e:	4635      	mov	r5, r6
 802e920:	e7df      	b.n	802e8e2 <_realloc_r+0x1e>
	...

0802e924 <_read_r>:
 802e924:	b538      	push	{r3, r4, r5, lr}
 802e926:	4d07      	ldr	r5, [pc, #28]	; (802e944 <_read_r+0x20>)
 802e928:	4604      	mov	r4, r0
 802e92a:	4608      	mov	r0, r1
 802e92c:	4611      	mov	r1, r2
 802e92e:	2200      	movs	r2, #0
 802e930:	602a      	str	r2, [r5, #0]
 802e932:	461a      	mov	r2, r3
 802e934:	f7f3 f927 	bl	8021b86 <_read>
 802e938:	1c43      	adds	r3, r0, #1
 802e93a:	d102      	bne.n	802e942 <_read_r+0x1e>
 802e93c:	682b      	ldr	r3, [r5, #0]
 802e93e:	b103      	cbz	r3, 802e942 <_read_r+0x1e>
 802e940:	6023      	str	r3, [r4, #0]
 802e942:	bd38      	pop	{r3, r4, r5, pc}
 802e944:	200011b0 	.word	0x200011b0

0802e948 <_malloc_usable_size_r>:
 802e948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e94c:	1f18      	subs	r0, r3, #4
 802e94e:	2b00      	cmp	r3, #0
 802e950:	bfbc      	itt	lt
 802e952:	580b      	ldrlt	r3, [r1, r0]
 802e954:	18c0      	addlt	r0, r0, r3
 802e956:	4770      	bx	lr

0802e958 <_init>:
 802e958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e95a:	bf00      	nop
 802e95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e95e:	bc08      	pop	{r3}
 802e960:	469e      	mov	lr, r3
 802e962:	4770      	bx	lr

0802e964 <_fini>:
 802e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e966:	bf00      	nop
 802e968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e96a:	bc08      	pop	{r3}
 802e96c:	469e      	mov	lr, r3
 802e96e:	4770      	bx	lr
