
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf10  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cadc  0800cadc  0001cadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae4  0800cae4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800caec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000e3c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ed0  20000ed0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265d8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052e1  00000000  00000000  0004669c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d78  00000000  00000000  0004d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b135  00000000  00000000  0004f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027ac1  00000000  00000000  0007a745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed9db  00000000  00000000  000a2206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018fbe1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c9c  00000000  00000000  0018fc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c0a8 	.word	0x0800c0a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c0a8 	.word	0x0800c0a8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f002 f803 	bl	80025a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f895 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb2f 	bl	8000c04 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f8fd 	bl	80007a4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f90f 	bl	80007cc <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 fad9 	bl	8000b64 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f93d 	bl	8000830 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f97b 	bl	80008b0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9f9 	bl	80009b0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 fa2d 	bl	8000a1c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 faa5 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f00a fa1b 	bl	800aa00 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa77 	bl	8000abc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4833      	ldr	r0, [pc, #204]	; (80006a4 <main+0x110>)
 80005d6:	f003 f801 	bl	80035dc <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <main+0x114>)
 80005e2:	f00a fe3d 	bl	800b260 <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <main+0x118>)
 80005e8:	60bb      	str	r3, [r7, #8]
  bool goto_ota_mode = false;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

  switch(cfg->reboot_cause)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	d00c      	beq.n	8000612 <main+0x7e>
 80005f8:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 80005fc:	d019      	beq.n	8000632 <main+0x9e>
 80005fe:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000602:	d825      	bhi.n	8000650 <main+0xbc>
 8000604:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 8000608:	d009      	beq.n	800061e <main+0x8a>
 800060a:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 800060e:	d00a      	beq.n	8000626 <main+0x92>
 8000610:	e01e      	b.n	8000650 <main+0xbc>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\nNo Configuration was found\r\n");
 8000612:	4827      	ldr	r0, [pc, #156]	; (80006b0 <main+0x11c>)
 8000614:	f00a feaa 	bl	800b36c <puts>
		  goto_ota_mode = true;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
	  }
	  break;
 800061c:	e018      	b.n	8000650 <main+0xbc>

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot\r\n");
 800061e:	4825      	ldr	r0, [pc, #148]	; (80006b4 <main+0x120>)
 8000620:	f00a fea4 	bl	800b36c <puts>
	  }
	  break;
 8000624:	e014      	b.n	8000650 <main+0xbc>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 8000626:	4824      	ldr	r0, [pc, #144]	; (80006b8 <main+0x124>)
 8000628:	f00a fea0 	bl	800b36c <puts>
		  goto_ota_mode = true;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
	  }
	  break;
 8000630:	e00e      	b.n	8000650 <main+0xbc>

	  case OTA_LOAD_PREV_APP:
	  {
		  HAL_StatusTypeDef ret;
		  printf("Update Unsuccessful, Back to previous APP if Available\r\n");
 8000632:	4822      	ldr	r0, [pc, #136]	; (80006bc <main+0x128>)
 8000634:	f00a fe9a 	bl	800b36c <puts>
		  ret = restore_old_version();
 8000638:	f001 f92e 	bl	8001898 <restore_old_version>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
		  if (ret == HAL_OK)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <main+0xba>
		  {
			  printf("Updated Successfully!!!Rebooting...");
 8000646:	481e      	ldr	r0, [pc, #120]	; (80006c0 <main+0x12c>)
 8000648:	f00a fe0a 	bl	800b260 <iprintf>
		  }



	  }
	  break;
 800064c:	e000      	b.n	8000650 <main+0xbc>
			  while(1);
 800064e:	e7fe      	b.n	800064e <main+0xba>
  }

  do
  {
	  if (goto_ota_mode){
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d01f      	beq.n	8000696 <main+0x102>
		printf("OTA Update Requested...\r\n");
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <main+0x130>)
 8000658:	f00a fe88 	bl	800b36c <puts>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4810      	ldr	r0, [pc, #64]	; (80006a4 <main+0x110>)
 8000664:	f002 ffba 	bl	80035dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <main+0x110>)
 8000670:	f002 ffb4 	bl	80035dc <HAL_GPIO_WritePin>
		go_to_ota_app(&huart5);
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <main+0x134>)
 8000676:	f000 fc1b 	bl	8000eb0 <go_to_ota_app>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <main+0x110>)
 8000682:	f002 ffab 	bl	80035dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0x110>)
 800068e:	f002 ffa5 	bl	80035dc <HAL_GPIO_WritePin>
		goto_ota_mode = false;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
	  }
  }while(false);

  // Validate application
  app_validation();
 8000696:	f001 f803 	bl	80016a0 <app_validation>

  // Jump to Application
  go_to_application();
 800069a:	f000 fbd5 	bl	8000e48 <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800069e:	f00a f9d5 	bl	800aa4c <MX_USB_HOST_Process>
 80006a2:	e7fc      	b.n	800069e <main+0x10a>
 80006a4:	40021800 	.word	0x40021800
 80006a8:	0800c0c0 	.word	0x0800c0c0
 80006ac:	08010000 	.word	0x08010000
 80006b0:	0800c0e0 	.word	0x0800c0e0
 80006b4:	0800c110 	.word	0x0800c110
 80006b8:	0800c120 	.word	0x0800c120
 80006bc:	0800c13c 	.word	0x0800c13c
 80006c0:	0800c174 	.word	0x0800c174
 80006c4:	0800c198 	.word	0x0800c198
 80006c8:	20000294 	.word	0x20000294

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00a fcd8 	bl	800b090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a28      	ldr	r2, [pc, #160]	; (800079c <SystemClock_Config+0xd0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xd4>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000740:	2310      	movs	r3, #16
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000744:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074e:	2307      	movs	r3, #7
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f88c 	bl	8005874 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000762:	f000 fb9f 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000772:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f005 faed 	bl	8005d64 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000790:	f000 fb88 	bl	8000ea4 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3750      	adds	r7, #80	; 0x50
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CRC_Init+0x20>)
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <MX_CRC_Init+0x24>)
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_CRC_Init+0x20>)
 80007b0:	f002 f85b 	bl	800286a <HAL_CRC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ba:	f000 fb73 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b0 	.word	0x200000b0
 80007c8:	40023000 	.word	0x40023000

080007cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <MX_DMA2D_Init+0x60>)
 80007d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_DMA2D_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_DMA2D_Init+0x5c>)
 8000802:	f002 f84e 	bl	80028a2 <HAL_DMA2D_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800080c:	f000 fb4a 	bl	8000ea4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000810:	2101      	movs	r1, #1
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_DMA2D_Init+0x5c>)
 8000814:	f002 f99e 	bl	8002b54 <HAL_DMA2D_ConfigLayer>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800081e:	f000 fb41 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000b8 	.word	0x200000b8
 800082c:	4002b000 	.word	0x4002b000

08000830 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_I2C3_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_I2C3_Init+0x74>)
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <MX_I2C3_Init+0x7c>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_I2C3_Init+0x74>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_I2C3_Init+0x74>)
 800086e:	f004 fad9 	bl	8004e24 <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 fb14 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000880:	f004 fc14 	bl	80050ac <HAL_I2CEx_ConfigAnalogFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800088a:	f000 fb0b 	bl	8000ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000892:	f004 fc47 	bl	8005124 <HAL_I2CEx_ConfigDigitalFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 fb02 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000f8 	.word	0x200000f8
 80008a8:	40005c00 	.word	0x40005c00
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2234      	movs	r2, #52	; 0x34
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f00a fbe7 	bl	800b090 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008c4:	4a39      	ldr	r2, [pc, #228]	; (80009ac <MX_LTDC_Init+0xfc>)
 80008c6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008e0:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008e2:	2209      	movs	r2, #9
 80008e4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008ee:	221d      	movs	r2, #29
 80008f0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_LTDC_Init+0xf8>)
 80008fa:	f240 120d 	movw	r2, #269	; 0x10d
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <MX_LTDC_Init+0xf8>)
 8000902:	f240 1243 	movw	r2, #323	; 0x143
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_LTDC_Init+0xf8>)
 800090a:	f240 1217 	movw	r2, #279	; 0x117
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_LTDC_Init+0xf8>)
 8000912:	f240 1247 	movw	r2, #327	; 0x147
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_LTDC_Init+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_LTDC_Init+0xf8>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_LTDC_Init+0xf8>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000930:	481d      	ldr	r0, [pc, #116]	; (80009a8 <MX_LTDC_Init+0xf8>)
 8000932:	f004 fc37 	bl	80051a4 <HAL_LTDC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800093c:	f000 fab2 	bl	8000ea4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000944:	23f0      	movs	r3, #240	; 0xf0
 8000946:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800094c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000950:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000956:	23ff      	movs	r3, #255	; 0xff
 8000958:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800095e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000962:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000968:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800096e:	23f0      	movs	r3, #240	; 0xf0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000972:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_LTDC_Init+0xf8>)
 8000992:	f004 fd99 	bl	80054c8 <HAL_LTDC_ConfigLayer>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800099c:	f000 fa82 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3738      	adds	r7, #56	; 0x38
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000014c 	.word	0x2000014c
 80009ac:	40016800 	.word	0x40016800

080009b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_SPI5_Init+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009e4:	2218      	movs	r2, #24
 80009e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_SPI5_Init+0x64>)
 80009fc:	220a      	movs	r2, #10
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_SPI5_Init+0x64>)
 8000a02:	f005 fdf5 	bl	80065f0 <HAL_SPI_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a0c:	f000 fa4a 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200001f4 	.word	0x200001f4
 8000a18:	40015000 	.word	0x40015000

08000a1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <MX_TIM1_Init+0x9c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a66:	f005 fe4c 	bl	8006702 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a70:	f000 fa18 	bl	8000ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a82:	f006 f805 	bl	8006a90 <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a8c:	f000 fa0a 	bl	8000ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_TIM1_Init+0x98>)
 8000a9e:	f006 fa21 	bl	8006ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000aa8:	f000 f9fc 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000024c 	.word	0x2000024c
 8000ab8:	40010000 	.word	0x40010000

08000abc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_UART5_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_UART5_Init+0x4c>)
 8000af4:	f006 fa86 	bl	8007004 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 f9d1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000294 	.word	0x20000294
 8000b0c:	40005000 	.word	0x40005000

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART1_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b48:	f006 fa5c 	bl	8007004 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f9a7 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002d8 	.word	0x200002d8
 8000b60:	40011000 	.word	0x40011000

08000b64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b7e:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <MX_FMC_Init+0x9c>)
 8000b80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b90:	2204      	movs	r2, #4
 8000b92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b96:	2210      	movs	r2, #16
 8000b98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_FMC_Init+0x98>)
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_FMC_Init+0x98>)
 8000ba2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ba6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_FMC_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_FMC_Init+0x98>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_FMC_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_FMC_Init+0x98>)
 8000bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_FMC_Init+0x98>)
 8000be6:	f005 fccf 	bl	8006588 <HAL_SDRAM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bf0:	f000 f958 	bl	8000ea4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000031c 	.word	0x2000031c
 8000c00:	a0000140 	.word	0xa0000140

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	; 0x38
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	4b7b      	ldr	r3, [pc, #492]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b78      	ldr	r3, [pc, #480]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	4b74      	ldr	r3, [pc, #464]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a73      	ldr	r2, [pc, #460]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b71      	ldr	r3, [pc, #452]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a6c      	ldr	r2, [pc, #432]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a65      	ldr	r2, [pc, #404]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b5f      	ldr	r3, [pc, #380]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a5e      	ldr	r2, [pc, #376]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b5c      	ldr	r3, [pc, #368]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a50      	ldr	r2, [pc, #320]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b4e      	ldr	r3, [pc, #312]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <MX_GPIO_Init+0x208>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2116      	movs	r1, #22
 8000cfe:	4844      	ldr	r0, [pc, #272]	; (8000e10 <MX_GPIO_Init+0x20c>)
 8000d00:	f002 fc6c 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4842      	ldr	r0, [pc, #264]	; (8000e14 <MX_GPIO_Init+0x210>)
 8000d0a:	f002 fc67 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d14:	4840      	ldr	r0, [pc, #256]	; (8000e18 <MX_GPIO_Init+0x214>)
 8000d16:	f002 fc61 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d20:	483e      	ldr	r0, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x218>)
 8000d22:	f002 fc5b 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d26:	2316      	movs	r3, #22
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <MX_GPIO_Init+0x20c>)
 8000d3e:	f002 faa1 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d42:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <MX_GPIO_Init+0x210>)
 8000d5a:	f002 fa93 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <MX_GPIO_Init+0x210>)
 8000d76:	f002 fa85 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_GPIO_Init+0x20c>)
 8000d90:	f002 fa78 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	481e      	ldr	r0, [pc, #120]	; (8000e20 <MX_GPIO_Init+0x21c>)
 8000da8:	f002 fa6c 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MX_GPIO_Init+0x214>)
 8000dc2:	f002 fa5f 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <MX_GPIO_Init+0x214>)
 8000de0:	f002 fa50 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000de4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_GPIO_Init+0x218>)
 8000dfe:	f002 fa41 	bl	8003284 <HAL_GPIO_Init>

}
 8000e02:	bf00      	nop
 8000e04:	3738      	adds	r7, #56	; 0x38
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	40020400 	.word	0x40020400

08000e24 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e2c:	1d39      	adds	r1, r7, #4
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	2201      	movs	r2, #1
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <__io_putchar+0x20>)
 8000e36:	f006 f932 	bl	800709e <HAL_UART_Transmit>
	return ch;
 8000e3a:	687b      	ldr	r3, [r7, #4]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200002d8 	.word	0x200002d8

08000e48 <go_to_application>:

static void go_to_application (void){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <go_to_application+0x2c>)
 8000e50:	f00a fa8c 	bl	800b36c <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (OTA_APP_FLASH_ADDR + 4));
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <go_to_application+0x30>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (OTA_APP_FLASH_ADDR)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <go_to_application+0x34>)
 8000e62:	f002 fbbb 	bl	80035dc <HAL_GPIO_WritePin>

	app_reset_handler();
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4798      	blx	r3
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800c1b4 	.word	0x0800c1b4
 8000e78:	08020004 	.word	0x08020004
 8000e7c:	40021800 	.word	0x40021800

08000e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e92:	f001 fba9 	bl	80025e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40001000 	.word	0x40001000

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	e7fe      	b.n	8000eac <Error_Handler+0x8>
	...

08000eb0 <go_to_ota_app>:
 * @param hurat uart handler receive ota
 * @param backup should back up?
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <go_to_ota_app+0x40>)
 8000eba:	f00a fa57 	bl	800b36c <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f81e 	bl	8000f00 <ota_download_and_flash>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <go_to_ota_app+0x2c>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <go_to_ota_app+0x44>)
 8000ecc:	f00a fa4e 	bl	800b36c <puts>
      printf("Reboot...\r\n");
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <go_to_ota_app+0x48>)
 8000ed2:	f00a fa4b 	bl	800b36c <puts>
      HAL_NVIC_SystemReset();
 8000ed6:	f001 fcc4 	bl	8002862 <HAL_NVIC_SystemReset>
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_NVIC_SystemReset();
    }
}
 8000eda:	e004      	b.n	8000ee6 <go_to_ota_app+0x36>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <go_to_ota_app+0x4c>)
 8000ede:	f00a fa45 	bl	800b36c <puts>
      HAL_NVIC_SystemReset();
 8000ee2:	f001 fcbe 	bl	8002862 <HAL_NVIC_SystemReset>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0800c1d4 	.word	0x0800c1d4
 8000ef4:	0800c1f4 	.word	0x0800c1f4
 8000ef8:	0800c214 	.word	0x0800c214
 8000efc:	0800c220 	.word	0x0800c220

08000f00 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8000f0c:	4820      	ldr	r0, [pc, #128]	; (8000f90 <ota_download_and_flash+0x90>)
 8000f0e:	f00a fa2d 	bl	800b36c <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <ota_download_and_flash+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <ota_download_and_flash+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <ota_download_and_flash+0x9c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <ota_download_and_flash+0xa0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8000f2a:	f240 4209 	movw	r2, #1033	; 0x409
 8000f2e:	2100      	movs	r1, #0
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <ota_download_and_flash+0xa4>)
 8000f32:	f00a f8ad 	bl	800b090 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8000f36:	f240 4209 	movw	r2, #1033	; 0x409
 8000f3a:	491a      	ldr	r1, [pc, #104]	; (8000fa4 <ota_download_and_flash+0xa4>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f835 	bl	8000fac <ota_receive_chunk>
 8000f42:	4603      	mov	r3, r0
 8000f44:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8000f4c:	89bb      	ldrh	r3, [r7, #12]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <ota_download_and_flash+0xa4>)
 8000f52:	f000 f90d 	bl	8001170 <ota_process_data>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <ota_download_and_flash+0xa8>)
 8000f68:	f00a fa00 	bl	800b36c <puts>
			ota_send_resp(huart, OTA_NACK);
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fd5c 	bl	8001a2c <ota_send_resp>
			break;
 8000f74:	e007      	b.n	8000f86 <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8000f76:	2100      	movs	r1, #0
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fd57 	bl	8001a2c <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <ota_download_and_flash+0xa0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1d1      	bne.n	8000f2a <ota_download_and_flash+0x2a>

	return ret;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800c24c 	.word	0x0800c24c
 8000f94:	20000354 	.word	0x20000354
 8000f98:	2000035c 	.word	0x2000035c
 8000f9c:	20000358 	.word	0x20000358
 8000fa0:	20000350 	.word	0x20000350
 8000fa4:	20000360 	.word	0x20000360
 8000fa8:	0800c268 	.word	0x0800c268

08000fac <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8000fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	18d1      	adds	r1, r2, r3
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f006 f8f5 	bl	80071c2 <HAL_UART_Receive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8000fdc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 809c 	bne.w	800111e <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 8000fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2baa      	cmp	r3, #170	; 0xaa
 8000ff6:	f040 8094 	bne.w	8001122 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8000ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	84ba      	strh	r2, [r7, #36]	; 0x24
 8001000:	461a      	mov	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1899      	adds	r1, r3, r2
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	2201      	movs	r2, #1
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f006 f8d8 	bl	80071c2 <HAL_UART_Receive>
 8001012:	4603      	mov	r3, r0
 8001014:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8001016:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 8083 	bne.w	8001126 <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8001020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	18d1      	adds	r1, r2, r3
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2202      	movs	r2, #2
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f006 f8c8 	bl	80071c2 <HAL_UART_Receive>
 8001032:	4603      	mov	r3, r0
 8001034:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8001036:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800103a:	2b00      	cmp	r3, #0
 800103c:	d175      	bne.n	800112a <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 800103e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 8001048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104a:	3302      	adds	r3, #2
 800104c:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 800104e:	2300      	movs	r3, #0
 8001050:	847b      	strh	r3, [r7, #34]	; 0x22
 8001052:	e014      	b.n	800107e <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8001054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	84ba      	strh	r2, [r7, #36]	; 0x24
 800105a:	461a      	mov	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1899      	adds	r1, r3, r2
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2201      	movs	r2, #1
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f006 f8ab 	bl	80071c2 <HAL_UART_Receive>
 800106c:	4603      	mov	r3, r0
 800106e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 8001070:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 8001078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800107a:	3301      	adds	r3, #1
 800107c:	847b      	strh	r3, [r7, #34]	; 0x22
 800107e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	429a      	cmp	r2, r3
 8001084:	d3e6      	bcc.n	8001054 <ota_receive_chunk+0xa8>
 8001086:	e000      	b.n	800108a <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 8001088:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 800108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14d      	bne.n	800112e <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8001092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	18d1      	adds	r1, r2, r3
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2204      	movs	r2, #4
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f006 f88f 	bl	80071c2 <HAL_UART_Receive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010a8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d140      	bne.n	8001132 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 80010b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
		index +=4u;
 80010ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010bc:	3304      	adds	r3, #4
 80010be:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 80010c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	18d1      	adds	r1, r2, r3
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	2201      	movs	r2, #1
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f006 f878 	bl	80071c2 <HAL_UART_Receive>
 80010d2:	4603      	mov	r3, r0
 80010d4:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d12b      	bne.n	8001136 <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 80010de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	84ba      	strh	r2, [r7, #36]	; 0x24
 80010e4:	461a      	mov	r2, r3
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2bbb      	cmp	r3, #187	; 0xbb
 80010ee:	d002      	beq.n	80010f6 <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80010f4:	e020      	b.n	8001138 <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3304      	adds	r3, #4
 80010fa:	8afa      	ldrh	r2, [r7, #22]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fcc0 	bl	8001a84 <ota_calcCRC>
 8001104:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	429a      	cmp	r2, r3
 800110c:	d014      	beq.n	8001138 <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	69f9      	ldr	r1, [r7, #28]
 8001112:	4815      	ldr	r0, [pc, #84]	; (8001168 <ota_receive_chunk+0x1bc>)
 8001114:	f00a f8a4 	bl	800b260 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 8001118:	2301      	movs	r3, #1
 800111a:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 800111c:	e00c      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 800111e:	bf00      	nop
 8001120:	e00a      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 8001122:	bf00      	nop
 8001124:	e008      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 8001126:	bf00      	nop
 8001128:	e006      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 800112a:	bf00      	nop
 800112c:	e004      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 800112e:	bf00      	nop
 8001130:	e002      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 8001132:	bf00      	nop
 8001134:	e000      	b.n	8001138 <ota_receive_chunk+0x18c>
			break;
 8001136:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 8001138:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 8001140:	2300      	movs	r3, #0
 8001142:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 8001144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	429a      	cmp	r2, r3
 800114a:	d907      	bls.n	800115c <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <ota_receive_chunk+0x1c0>)
 8001154:	f00a f884 	bl	800b260 <iprintf>
															  	  max_len, index );
		index = 0u;
 8001158:	2300      	movs	r3, #0
 800115a:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 800115c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800115e:	4618      	mov	r0, r3
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800c278 	.word	0x0800c278
 800116c:	0800c2b8 	.word	0x0800c2b8

08001170 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b097      	sub	sp, #92	; 0x5c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 800117c:	2301      	movs	r3, #1
 800117e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		if( (buf== NULL) || (len == 0u))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 8154 	beq.w	8001432 <ota_process_data+0x2c2>
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 8150 	beq.w	8001432 <ota_process_data+0x2c2>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	653b      	str	r3, [r7, #80]	; 0x50
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 8001196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 800119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f000 8147 	beq.w	8001436 <ota_process_data+0x2c6>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 80011a8:	4bac      	ldr	r3, [pc, #688]	; (800145c <ota_process_data+0x2ec>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	f200 813c 	bhi.w	800142a <ota_process_data+0x2ba>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <ota_process_data+0x48>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080011cd 	.word	0x080011cd
 80011bc:	080011db 	.word	0x080011db
 80011c0:	08001207 	.word	0x08001207
 80011c4:	08001243 	.word	0x08001243
 80011c8:	08001377 	.word	0x08001377
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 80011cc:	48a4      	ldr	r0, [pc, #656]	; (8001460 <ota_process_data+0x2f0>)
 80011ce:	f00a f8cd 	bl	800b36c <puts>
				ret = OTA_EX_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80011d8:	e13a      	b.n	8001450 <ota_process_data+0x2e0>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 8129 	bne.w	800143a <ota_process_data+0x2ca>
				{
					if( cmd->cmd == OTA_CMD_START)
 80011e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ea:	791b      	ldrb	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 8124 	bne.w	800143a <ota_process_data+0x2ca>
					{
						printf("Received OTA Start command\r\n");
 80011f2:	489c      	ldr	r0, [pc, #624]	; (8001464 <ota_process_data+0x2f4>)
 80011f4:	f00a f8ba 	bl	800b36c <puts>
						ota_state = OTA_STATE_HEADER;
 80011f8:	4b98      	ldr	r3, [pc, #608]	; (800145c <ota_process_data+0x2ec>)
 80011fa:	2202      	movs	r2, #2
 80011fc:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 8001204:	e119      	b.n	800143a <ota_process_data+0x2ca>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	785b      	ldrb	r3, [r3, #1]
 800120e:	2b02      	cmp	r3, #2
 8001210:	f040 8115 	bne.w	800143e <ota_process_data+0x2ce>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8001214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a93      	ldr	r2, [pc, #588]	; (8001468 <ota_process_data+0x2f8>)
 800121a:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 800121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a92      	ldr	r2, [pc, #584]	; (800146c <ota_process_data+0x2fc>)
 8001222:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8001224:	4b90      	ldr	r3, [pc, #576]	; (8001468 <ota_process_data+0x2f8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a90      	ldr	r2, [pc, #576]	; (800146c <ota_process_data+0x2fc>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4890      	ldr	r0, [pc, #576]	; (8001470 <ota_process_data+0x300>)
 8001230:	f00a f816 	bl	800b260 <iprintf>
													ota_fw_total_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 8001234:	4b89      	ldr	r3, [pc, #548]	; (800145c <ota_process_data+0x2ec>)
 8001236:	2203      	movs	r2, #3
 8001238:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				}
			}
			break;
 8001240:	e0fd      	b.n	800143e <ota_process_data+0x2ce>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
				uint16_t			data_len = data->data_len;
 8001246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001248:	789a      	ldrb	r2, [r3, #2]
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	4313      	orrs	r3, r2
 8001250:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 800125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 80ef 	bne.w	8001442 <ota_process_data+0x2d2>

					bool is_first_block = false;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

					if( ota_fw_received_size == 0){
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <ota_process_data+0x304>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d15a      	bne.n	8001328 <ota_process_data+0x1b8>
						// This is the first block
						is_first_block = true;
 8001272:	2301      	movs	r3, #1
 8001274:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

						/* Read the configuration */
						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8001278:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <ota_process_data+0x308>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461c      	mov	r4, r3
 800127e:	f107 0608 	add.w	r6, r7, #8
 8001282:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001286:	4635      	mov	r5, r6
 8001288:	4623      	mov	r3, r4
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001294:	3410      	adds	r4, #16
 8001296:	3610      	adds	r6, #16
 8001298:	4564      	cmp	r4, ip
 800129a:	d1f4      	bne.n	8001286 <ota_process_data+0x116>

						cfg.backup_table.is_this_slot_not_valid = 1u;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						cfg.backup_table.is_this_slot_active 	= 0u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						/* write back the updated config */
			            ret = write_cfg_to_flash( &cfg );
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f97b 	bl	80015a8 <write_cfg_to_flash>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 80012b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f040 80c2 	bne.w	8001446 <ota_process_data+0x2d6>
			            {
			              break;
			            }

						if( cfg.reboot_cause == OTA_UPDATE_APP)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 80012c8:	d112      	bne.n	80012f0 <ota_process_data+0x180>
						{
							printf("Backing up from previous FW version\r\n");
 80012ca:	486c      	ldr	r0, [pc, #432]	; (800147c <ota_process_data+0x30c>)
 80012cc:	f00a f84e 	bl	800b36c <puts>
							ex = backup_old_version();
 80012d0:	f000 fa66 	bl	80017a0 <backup_old_version>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

							if (ex != HAL_OK){
 80012da:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <ota_process_data+0x17a>
								printf("Unsuccessful Backup \r\n");
 80012e2:	4867      	ldr	r0, [pc, #412]	; (8001480 <ota_process_data+0x310>)
 80012e4:	f00a f842 	bl	800b36c <puts>
								break;
 80012e8:	e0b2      	b.n	8001450 <ota_process_data+0x2e0>
							}
							printf("Done!!!\r\n");
 80012ea:	4866      	ldr	r0, [pc, #408]	; (8001484 <ota_process_data+0x314>)
 80012ec:	f00a f83e 	bl	800b36c <puts>
						}

						cfg.backup_table.fw_crc 				= cfg.app_table.fw_crc;
 80012f0:	f8d7 3012 	ldr.w	r3, [r7, #18]
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
						cfg.backup_table.fw_size				= cfg.app_table.fw_size;
 80012f6:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
						cfg.backup_table.is_this_slot_active 	= 1u;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						cfg.backup_table.is_this_slot_not_valid = 0u;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* Reboot cause set to LOAD_PREV_APP so that if an error occurs*/
						cfg.reboot_cause = OTA_LOAD_PREV_APP;
 8001308:	f04f 33ef 	mov.w	r3, #4025479151	; 0xefefefef
 800130c:	60bb      	str	r3, [r7, #8]

						/* write back the updated configuration */
			            ret = write_cfg_to_flash( &cfg );
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f948 	bl	80015a8 <write_cfg_to_flash>
 8001318:	4603      	mov	r3, r0
 800131a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 800131e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8091 	bne.w	800144a <ota_process_data+0x2da>
			            }

					}

					/* Write the chunk to the Flash */
					ex = write_data_to_flash(buf+4, data_len, is_first_block);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3304      	adds	r3, #4
 800132c:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001330:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f8b3 	bl	80014a0 <write_data_to_flash>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					if( ex == HAL_OK)
 8001340:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001344:	2b00      	cmp	r3, #0
 8001346:	d17c      	bne.n	8001442 <ota_process_data+0x2d2>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <ota_process_data+0x304>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	0a99      	lsrs	r1, r3, #10
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <ota_process_data+0x2f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0a9b      	lsrs	r3, r3, #10
 8001354:	461a      	mov	r2, r3
 8001356:	484c      	ldr	r0, [pc, #304]	; (8001488 <ota_process_data+0x318>)
 8001358:	f009 ff82 	bl	800b260 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <ota_process_data+0x304>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b41      	ldr	r3, [pc, #260]	; (8001468 <ota_process_data+0x2f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d302      	bcc.n	800136e <ota_process_data+0x1fe>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <ota_process_data+0x2ec>)
 800136a:	2204      	movs	r2, #4
 800136c:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 8001374:	e065      	b.n	8001442 <ota_process_data+0x2d2>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	64fb      	str	r3, [r7, #76]	; 0x4c

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 800137a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d165      	bne.n	800144e <ota_process_data+0x2de>
				{
					if( cmd->cmd )
 8001382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d061      	beq.n	800144e <ota_process_data+0x2de>
					{
						printf("Received OTA END COMMAND\r\n");
 800138a:	4840      	ldr	r0, [pc, #256]	; (800148c <ota_process_data+0x31c>)
 800138c:	f009 ffee 	bl	800b36c <puts>

						printf("Validating the received Binary....\r\n");
 8001390:	483f      	ldr	r0, [pc, #252]	; (8001490 <ota_process_data+0x320>)
 8001392:	f009 ffeb 	bl	800b36c <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_APP_FLASH_ADDR
 8001396:	4b34      	ldr	r3, [pc, #208]	; (8001468 <ota_process_data+0x2f8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	483d      	ldr	r0, [pc, #244]	; (8001494 <ota_process_data+0x324>)
 800139e:	f000 fb71 	bl	8001a84 <ota_calcCRC>
 80013a2:	64b8      	str	r0, [r7, #72]	; 0x48
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <ota_process_data+0x2fc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d007      	beq.n	80013be <ota_process_data+0x24e>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <ota_process_data+0x2fc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <ota_process_data+0x328>)
 80013b8:	f009 ff52 	bl	800b260 <iprintf>
 80013bc:	e048      	b.n	8001450 <ota_process_data+0x2e0>
																			cal_crc, ota_fw_crc);
							break;
						}

						printf("Validated Successfully!\r\n");
 80013be:	4837      	ldr	r0, [pc, #220]	; (800149c <ota_process_data+0x32c>)
 80013c0:	f009 ffd4 	bl	800b36c <puts>


						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <ota_process_data+0x308>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461c      	mov	r4, r3
 80013ca:	f107 0608 	add.w	r6, r7, #8
 80013ce:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013d2:	4635      	mov	r5, r6
 80013d4:	4623      	mov	r3, r4
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	3410      	adds	r4, #16
 80013e2:	3610      	adds	r6, #16
 80013e4:	4564      	cmp	r4, ip
 80013e6:	d1f4      	bne.n	80013d2 <ota_process_data+0x262>

						// update information
						cfg.app_table.fw_crc					= cal_crc;
 80013e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ea:	f8c7 3012 	str.w	r3, [r7, #18]
						cfg.app_table.fw_size					= ota_fw_total_size;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <ota_process_data+0x2f8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8c7 300e 	str.w	r3, [r7, #14]
						cfg.app_table.is_this_slot_not_valid	= 0u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	733b      	strb	r3, [r7, #12]
						cfg.app_table.is_this_slot_active		= 0u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	737b      	strb	r3, [r7, #13]

						// update the reboot reason
						cfg.reboot_cause = OTA_NORMAL_BOOT;
 80013fe:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 8001402:	60bb      	str	r3, [r7, #8]

						// Write config to flash
						ret = write_cfg_to_flash( &cfg );
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f8cd 	bl	80015a8 <write_cfg_to_flash>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if( ret == OTA_EX_OK )
 8001414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001418:	2b00      	cmp	r3, #0
 800141a:	d118      	bne.n	800144e <ota_process_data+0x2de>
						{
							ota_state = OTA_STATE_IDLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <ota_process_data+0x2ec>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
							ret = OTA_EX_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						}
					}
				}
			}
			break;
 8001428:	e011      	b.n	800144e <ota_process_data+0x2de>

			default:
			{
				ret = OTA_EX_ERR;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8001430:	e00e      	b.n	8001450 <ota_process_data+0x2e0>
		};
 8001432:	bf00      	nop
 8001434:	e00c      	b.n	8001450 <ota_process_data+0x2e0>
				break;
 8001436:	bf00      	nop
 8001438:	e00a      	b.n	8001450 <ota_process_data+0x2e0>
			break;
 800143a:	bf00      	nop
 800143c:	e008      	b.n	8001450 <ota_process_data+0x2e0>
			break;
 800143e:	bf00      	nop
 8001440:	e006      	b.n	8001450 <ota_process_data+0x2e0>
			break;
 8001442:	bf00      	nop
 8001444:	e004      	b.n	8001450 <ota_process_data+0x2e0>
			              break;
 8001446:	bf00      	nop
 8001448:	e002      	b.n	8001450 <ota_process_data+0x2e0>
			              break;
 800144a:	bf00      	nop
 800144c:	e000      	b.n	8001450 <ota_process_data+0x2e0>
			break;
 800144e:	bf00      	nop
	}while(false);

	return ret;
 8001450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001454:	4618      	mov	r0, r3
 8001456:	375c      	adds	r7, #92	; 0x5c
 8001458:	46bd      	mov	sp, r7
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	20000350 	.word	0x20000350
 8001460:	0800c2fc 	.word	0x0800c2fc
 8001464:	0800c310 	.word	0x0800c310
 8001468:	20000354 	.word	0x20000354
 800146c:	20000358 	.word	0x20000358
 8001470:	0800c32c 	.word	0x0800c32c
 8001474:	2000035c 	.word	0x2000035c
 8001478:	20000000 	.word	0x20000000
 800147c:	0800c368 	.word	0x0800c368
 8001480:	0800c390 	.word	0x0800c390
 8001484:	0800c3a8 	.word	0x0800c3a8
 8001488:	0800c3b4 	.word	0x0800c3b4
 800148c:	0800c3c0 	.word	0x0800c3c0
 8001490:	0800c3dc 	.word	0x0800c3dc
 8001494:	08020000 	.word	0x08020000
 8001498:	0800c400 	.word	0x0800c400
 800149c:	0800c444 	.word	0x0800c444

080014a0 <write_data_to_flash>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_flash(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 80014b4:	f001 fc34 	bl	8002d20 <HAL_FLASH_Unlock>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 80014be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d15d      	bne.n	8001582 <write_data_to_flash+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01f      	beq.n	800150c <write_data_to_flash+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 80014cc:	4831      	ldr	r0, [pc, #196]	; (8001594 <write_data_to_flash+0xf4>)
 80014ce:	f009 ff4d 	bl	800b36c <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_APP_SECTOR;
 80014d6:	2305      	movs	r3, #5
 80014d8:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_APP_NB_SECTOR;
 80014da:	2307      	movs	r3, #7
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 80014de:	2302      	movs	r3, #2
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80014e2:	f107 0214 	add.w	r2, r7, #20
 80014e6:	f107 0318 	add.w	r3, r7, #24
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fd89 	bl	8003004 <HAL_FLASHEx_Erase>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 80014f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <write_data_to_flash+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	4619      	mov	r1, r3
 8001504:	4824      	ldr	r0, [pc, #144]	; (8001598 <write_data_to_flash+0xf8>)
 8001506:	f009 feab 	bl	800b260 <iprintf>
 800150a:	e03d      	b.n	8001588 <write_data_to_flash+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_APP_FLASH_ADDR;
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <write_data_to_flash+0xfc>)
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
 8001514:	e024      	b.n	8001560 <write_data_to_flash+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <write_data_to_flash+0x100>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 800151e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	461c      	mov	r4, r3
 800152c:	4615      	mov	r5, r2
 800152e:	4622      	mov	r2, r4
 8001530:	462b      	mov	r3, r5
 8001532:	2000      	movs	r0, #0
 8001534:	f001 fba0 	bl	8002c78 <HAL_FLASH_Program>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 800153e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <write_data_to_flash+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <write_data_to_flash+0x100>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <write_data_to_flash+0x100>)
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	e003      	b.n	800155a <write_data_to_flash+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 8001552:	4814      	ldr	r0, [pc, #80]	; (80015a4 <write_data_to_flash+0x104>)
 8001554:	f009 ff0a 	bl	800b36c <puts>
				break;
 8001558:	e006      	b.n	8001568 <write_data_to_flash+0xc8>
		for( int i = 0; i < data_len; i++)
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	3301      	adds	r3, #1
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8d6      	bhi.n	8001516 <write_data_to_flash+0x76>
			}
		}

		if( ret != HAL_OK )
 8001568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10a      	bne.n	8001586 <write_data_to_flash+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 8001570:	f001 fbf8 	bl	8002d64 <HAL_FLASH_Lock>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 800157a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800157e:	2b00      	cmp	r3, #0
 8001580:	e002      	b.n	8001588 <write_data_to_flash+0xe8>
			break;
 8001582:	bf00      	nop
 8001584:	e000      	b.n	8001588 <write_data_to_flash+0xe8>
			break;
 8001586:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 8001588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800158c:	4618      	mov	r0, r3
 800158e:	3738      	adds	r7, #56	; 0x38
 8001590:	46bd      	mov	sp, r7
 8001592:	bdb0      	pop	{r4, r5, r7, pc}
 8001594:	0800c460 	.word	0x0800c460
 8001598:	0800c484 	.word	0x0800c484
 800159c:	08020000 	.word	0x08020000
 80015a0:	2000035c 	.word	0x2000035c
 80015a4:	0800c4ac 	.word	0x0800c4ac

080015a8 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b08c      	sub	sp, #48	; 0x30
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d05f      	beq.n	800167c <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 80015bc:	f001 fbb0 	bl	8002d20 <HAL_FLASH_Unlock>
 80015c0:	4603      	mov	r3, r0
 80015c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d158      	bne.n	8001680 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295
 80015d2:	f001 fbd7 	bl	8002d84 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 80015da:	2304      	movs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <write_cfg_to_flash+0xf0>)
 80015e8:	2273      	movs	r2, #115	; 0x73
 80015ea:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80015ec:	f107 020c 	add.w	r2, r7, #12
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fd04 	bl	8003004 <HAL_FLASHEx_Erase>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 8001602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13c      	bne.n	8001684 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
 8001612:	e01f      	b.n	8001654 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800161a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2200      	movs	r2, #0
 800162a:	461c      	mov	r4, r3
 800162c:	4615      	mov	r5, r2
 800162e:	4622      	mov	r2, r4
 8001630:	462b      	mov	r3, r5
 8001632:	2000      	movs	r0, #0
 8001634:	f001 fb20 	bl	8002c78 <HAL_FLASH_Program>
 8001638:	4603      	mov	r3, r0
 800163a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 800163e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 8001646:	4815      	ldr	r0, [pc, #84]	; (800169c <write_cfg_to_flash+0xf4>)
 8001648:	f009 fe90 	bl	800b36c <puts>
				break;
 800164c:	e005      	b.n	800165a <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	3301      	adds	r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	2b2f      	cmp	r3, #47	; 0x2f
 8001658:	d9dc      	bls.n	8001614 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800165a:	f04f 30ff 	mov.w	r0, #4294967295
 800165e:	f001 fb91 	bl	8002d84 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10e      	bne.n	8001688 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 800166a:	f001 fb7b 	bl	8002d64 <HAL_FLASH_Lock>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8001674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001678:	2b00      	cmp	r3, #0
 800167a:	e006      	b.n	800168a <write_cfg_to_flash+0xe2>
			break;
 800167c:	bf00      	nop
 800167e:	e004      	b.n	800168a <write_cfg_to_flash+0xe2>
			break;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <write_cfg_to_flash+0xe2>
			break;
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <write_cfg_to_flash+0xe2>
	      break;
 8001688:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 800168a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800168e:	4618      	mov	r0, r3
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bdb0      	pop	{r4, r5, r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00
 800169c:	0800c4c0 	.word	0x0800c4c0

080016a0 <app_validation>:
 * @brief Validate Current APP in APP SLOT
 * @param none
 * @retval none
 */
void app_validation()
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b091      	sub	sp, #68	; 0x44
 80016a4:	af00      	add	r7, sp, #0
	bool is_app_updated = false;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_StatusTypeDef ret;

	/* read configuration */
	OTA_GNRL_CFG_ cfg;
	memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <app_validation+0xe4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	461c      	mov	r4, r3
 80016b2:	1d3e      	adds	r6, r7, #4
 80016b4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80016b8:	4635      	mov	r5, r6
 80016ba:	4623      	mov	r3, r4
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	3410      	adds	r4, #16
 80016c8:	3610      	adds	r6, #16
 80016ca:	4564      	cmp	r4, ip
 80016cc:	d1f4      	bne.n	80016b8 <app_validation+0x18>

	if(cfg.app_table.is_this_slot_active == 0)
 80016ce:	7a7b      	ldrb	r3, [r7, #9]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <app_validation+0x40>
	{
		printf("New Application found!\r\n");
 80016d4:	482c      	ldr	r0, [pc, #176]	; (8001788 <app_validation+0xe8>)
 80016d6:	f009 fe49 	bl	800b36c <puts>
		is_app_updated = true;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Validating
	printf("Validating...\r\n");
 80016e0:	482a      	ldr	r0, [pc, #168]	; (800178c <app_validation+0xec>)
 80016e2:	f009 fe43 	bl	800b36c <puts>

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80016e6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ea:	f001 fb4b 	bl	8002d84 <FLASH_WaitForLastOperation>

	// Check CRC
	uint32_t cal_data_crc = ota_calcCRC((uint8_t *)OTA_APP_FLASH_ADDR, cfg.app_table.fw_size);
 80016ee:	f8d7 300a 	ldr.w	r3, [r7, #10]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4826      	ldr	r0, [pc, #152]	; (8001790 <app_validation+0xf0>)
 80016f6:	f000 f9c5 	bl	8001a84 <ota_calcCRC>
 80016fa:	63b8      	str	r0, [r7, #56]	; 0x38

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f001 fb40 	bl	8002d84 <FLASH_WaitForLastOperation>

	// Verify the CRC
	if( cal_data_crc != cfg.app_table.fw_crc)
 8001704:	f8d7 300e 	ldr.w	r3, [r7, #14]
 8001708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800170a:	429a      	cmp	r2, r3
 800170c:	d01c      	beq.n	8001748 <app_validation+0xa8>
	{
		printf("CRC Mismatch!!! calc_crc = [0x%08lx], rec_crc = [0x%08lx]\r\nHALT...\r\n",
 800170e:	f8d7 300e 	ldr.w	r3, [r7, #14]
 8001712:	461a      	mov	r2, r3
 8001714:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001716:	481f      	ldr	r0, [pc, #124]	; (8001794 <app_validation+0xf4>)
 8001718:	f009 fda2 	bl	800b260 <iprintf>
										cal_data_crc, cfg.app_table.fw_crc);

		cfg.app_table.is_this_slot_not_valid = 1u;
 800171c:	2301      	movs	r3, #1
 800171e:	723b      	strb	r3, [r7, #8]
		cfg.reboot_cause = OTA_LOAD_PREV_APP;
 8001720:	f04f 33ef 	mov.w	r3, #4025479151	; 0xefefefef
 8001724:	607b      	str	r3, [r7, #4]

		ret = write_cfg_to_flash( &cfg );
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff3d 	bl	80015a8 <write_cfg_to_flash>
 800172e:	4603      	mov	r3, r0
 8001730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <app_validation+0xa4>
		{
			printf("Configuration Flash write Error\r\n");
 800173c:	4816      	ldr	r0, [pc, #88]	; (8001798 <app_validation+0xf8>)
 800173e:	f009 fe15 	bl	800b36c <puts>
			// HALT
			while(1);
 8001742:	e7fe      	b.n	8001742 <app_validation+0xa2>
		}

		// reset for loading previous app
		HAL_NVIC_SystemReset();
 8001744:	f001 f88d 	bl	8002862 <HAL_NVIC_SystemReset>

	}
	printf("Validation DONE!!!\r\n");
 8001748:	4814      	ldr	r0, [pc, #80]	; (800179c <app_validation+0xfc>)
 800174a:	f009 fe0f 	bl	800b36c <puts>

	if( is_app_updated ){
 800174e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001752:	2b00      	cmp	r3, #0
 8001754:	d011      	beq.n	800177a <app_validation+0xda>
		cfg.app_table.is_this_slot_active = 1u;
 8001756:	2301      	movs	r3, #1
 8001758:	727b      	strb	r3, [r7, #9]
		cfg.app_table.is_this_slot_not_valid = 0u;
 800175a:	2300      	movs	r3, #0
 800175c:	723b      	strb	r3, [r7, #8]

		ret = write_cfg_to_flash( &cfg );
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff21 	bl	80015a8 <write_cfg_to_flash>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 800176c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <app_validation+0xda>
		{
			printf("Configuration Flash write Error\r\n");
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <app_validation+0xf8>)
 8001776:	f009 fdf9 	bl	800b36c <puts>
		}

	}

}
 800177a:	bf00      	nop
 800177c:	3744      	adds	r7, #68	; 0x44
 800177e:	46bd      	mov	sp, r7
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	bf00      	nop
 8001784:	20000000 	.word	0x20000000
 8001788:	0800c4e0 	.word	0x0800c4e0
 800178c:	0800c4f8 	.word	0x0800c4f8
 8001790:	08020000 	.word	0x08020000
 8001794:	0800c508 	.word	0x0800c508
 8001798:	0800c550 	.word	0x0800c550
 800179c:	0800c574 	.word	0x0800c574

080017a0 <backup_old_version>:
 * @brief backup current APP slot to backup Slot
 * @param none
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef backup_old_version()
{
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		ret = HAL_FLASH_Unlock();
 80017ac:	f001 fab8 	bl	8002d20 <HAL_FLASH_Unlock>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80017b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d159      	bne.n	8001872 <backup_old_version+0xd2>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80017be:	f04f 30ff 	mov.w	r0, #4294967295
 80017c2:	f001 fadf 	bl	8002d84 <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
		EraseInitStruct.Sector			= OTA_SLOT_SECTOR;
 80017ca:	2311      	movs	r3, #17
 80017cc:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.NbSectors		= OTA_SLOT_NB_SECTOR;
 80017ce:	2307      	movs	r3, #7
 80017d0:	613b      	str	r3, [r7, #16]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80017d2:	2302      	movs	r3, #2
 80017d4:	617b      	str	r3, [r7, #20]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <backup_old_version+0xe8>)
 80017d8:	2273      	movs	r2, #115	; 0x73
 80017da:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80017dc:	463a      	mov	r2, r7
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fc0e 	bl	8003004 <HAL_FLASHEx_Erase>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80017ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13f      	bne.n	8001876 <backup_old_version+0xd6>
			break;
		}

		// TODO: Find a solution to write sector instead of byte
		// Write the old app
		OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <backup_old_version+0xec>)
 80017f8:	61fb      	str	r3, [r7, #28]
		uint8_t *data = (uint8_t *) OTA_APP_FLASH_ADDR;
 80017fa:	4b25      	ldr	r3, [pc, #148]	; (8001890 <backup_old_version+0xf0>)
 80017fc:	61bb      	str	r3, [r7, #24]
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	e01f      	b.n	8001844 <backup_old_version+0xa4>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f103 6101 	add.w	r1, r3, #135266304	; 0x8100000
 800180a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_SLOT_FLASH_ADDR + i,
									data[i]);
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2200      	movs	r2, #0
 800181a:	461c      	mov	r4, r3
 800181c:	4615      	mov	r5, r2
 800181e:	4622      	mov	r2, r4
 8001820:	462b      	mov	r3, r5
 8001822:	2000      	movs	r0, #0
 8001824:	f001 fa28 	bl	8002c78 <HAL_FLASH_Program>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( ret != HAL_OK )
 800182e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <backup_old_version+0x9e>
			{
				printf("Slot Flash Write Error\r\n");
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <backup_old_version+0xf4>)
 8001838:	f009 fd98 	bl	800b36c <puts>
				break;
 800183c:	e008      	b.n	8001850 <backup_old_version+0xb0>
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	3301      	adds	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3d9      	bcc.n	8001804 <backup_old_version+0x64>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f001 fa96 	bl	8002d84 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10c      	bne.n	800187a <backup_old_version+0xda>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8001860:	f001 fa80 	bl	8002d64 <HAL_FLASH_Lock>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    if( ret != HAL_OK )
 800186a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800186e:	2b00      	cmp	r3, #0
 8001870:	e004      	b.n	800187c <backup_old_version+0xdc>
			break;
 8001872:	bf00      	nop
 8001874:	e002      	b.n	800187c <backup_old_version+0xdc>
			break;
 8001876:	bf00      	nop
 8001878:	e000      	b.n	800187c <backup_old_version+0xdc>
	      break;
 800187a:	bf00      	nop
	    }


	}while(false);

	return ret;
 800187c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001880:	4618      	mov	r0, r3
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	40023c00 	.word	0x40023c00
 800188c:	08010000 	.word	0x08010000
 8001890:	08020000 	.word	0x08020000
 8001894:	0800c588 	.word	0x0800c588

08001898 <restore_old_version>:
/**
 * @brief Restore APP in backup slot
 */

HAL_StatusTypeDef restore_old_version()
{
 8001898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189c:	b097      	sub	sp, #92	; 0x5c
 800189e:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80018a6:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <restore_old_version+0x174>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461c      	mov	r4, r3
 80018ac:	463e      	mov	r6, r7
 80018ae:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80018b2:	4635      	mov	r5, r6
 80018b4:	4623      	mov	r3, r4
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c0:	3410      	adds	r4, #16
 80018c2:	3610      	adds	r6, #16
 80018c4:	4564      	cmp	r4, ip
 80018c6:	d1f4      	bne.n	80018b2 <restore_old_version+0x1a>

		if(cfg.app_table.is_this_slot_active != 1u)
 80018c8:	797b      	ldrb	r3, [r7, #5]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <restore_old_version+0x3e>
		{
			printf("No backup FW found\r\n");
 80018ce:	4850      	ldr	r0, [pc, #320]	; (8001a10 <restore_old_version+0x178>)
 80018d0:	f009 fd4c 	bl	800b36c <puts>
			break;
 80018d4:	e093      	b.n	80019fe <restore_old_version+0x166>
		}

		//Validate Backup
		printf("Validation DONE!!!\r\n");
 80018d6:	484f      	ldr	r0, [pc, #316]	; (8001a14 <restore_old_version+0x17c>)
 80018d8:	f009 fd48 	bl	800b36c <puts>
		uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR,
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4619      	mov	r1, r3
 80018e0:	484d      	ldr	r0, [pc, #308]	; (8001a18 <restore_old_version+0x180>)
 80018e2:	f000 f8cf 	bl	8001a84 <ota_calcCRC>
 80018e6:	64f8      	str	r0, [r7, #76]	; 0x4c
				 	 	 	 	 	 	 	 	 cfg.backup_table.fw_size);

		if( cal_crc != cfg.backup_table.fw_crc)
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d006      	beq.n	80018fe <restore_old_version+0x66>
		{
			printf("CRC Mismatch!!! cal_crc = [0x%08lx], rec_CRC = [0x%08lx]\r\n",
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	461a      	mov	r2, r3
 80018f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018f6:	4849      	ldr	r0, [pc, #292]	; (8001a1c <restore_old_version+0x184>)
 80018f8:	f009 fcb2 	bl	800b260 <iprintf>
												cal_crc,
												cfg.backup_table.fw_size);
			break;
 80018fc:	e07f      	b.n	80019fe <restore_old_version+0x166>
		}

		printf("Validation DONE!!!\r\nRestore...\r\n");
 80018fe:	4848      	ldr	r0, [pc, #288]	; (8001a20 <restore_old_version+0x188>)
 8001900:	f009 fd34 	bl	800b36c <puts>

		ret = HAL_FLASH_Unlock();
 8001904:	f001 fa0c 	bl	8002d20 <HAL_FLASH_Unlock>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if( ret != HAL_OK )
 800190e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001912:	2b00      	cmp	r3, #0
 8001914:	d16c      	bne.n	80019f0 <restore_old_version+0x158>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	f001 fa33 	bl	8002d84 <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
		EraseInitStruct.Sector			= OTA_APP_SECTOR;
 8001922:	2305      	movs	r3, #5
 8001924:	63fb      	str	r3, [r7, #60]	; 0x3c
		EraseInitStruct.NbSectors		= OTA_APP_NB_SECTOR;
 8001926:	2307      	movs	r3, #7
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 800192a:	2302      	movs	r3, #2
 800192c:	647b      	str	r3, [r7, #68]	; 0x44

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <restore_old_version+0x18c>)
 8001930:	2273      	movs	r2, #115	; 0x73
 8001932:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8001934:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fb60 	bl	8003004 <HAL_FLASHEx_Erase>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if( ret != HAL_OK )
 800194a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800194e:	2b00      	cmp	r3, #0
 8001950:	d150      	bne.n	80019f4 <restore_old_version+0x15c>
			break;
		}

		// TODO: Find a solution to write sector instead of byte
		// Write the old app
		uint8_t *data = (uint8_t *) OTA_SLOT_FLASH_ADDR;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <restore_old_version+0x180>)
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
		for( uint32_t i = 0u; i<cfg.backup_table.fw_size; i++ )
 8001956:	2300      	movs	r3, #0
 8001958:	653b      	str	r3, [r7, #80]	; 0x50
 800195a:	e01f      	b.n	800199c <restore_old_version+0x104>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800195c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800195e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001962:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_APP_FLASH_ADDR + i,
									data[i]);
 8001966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2200      	movs	r2, #0
 8001972:	4698      	mov	r8, r3
 8001974:	4691      	mov	r9, r2
 8001976:	4642      	mov	r2, r8
 8001978:	464b      	mov	r3, r9
 800197a:	2000      	movs	r0, #0
 800197c:	f001 f97c 	bl	8002c78 <HAL_FLASH_Program>
 8001980:	4603      	mov	r3, r0
 8001982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if( ret != HAL_OK )
 8001986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <restore_old_version+0xfe>
			{
				printf("APP Flash Write Error\r\n");
 800198e:	4826      	ldr	r0, [pc, #152]	; (8001a28 <restore_old_version+0x190>)
 8001990:	f009 fcec 	bl	800b36c <puts>
				break;
 8001994:	e006      	b.n	80019a4 <restore_old_version+0x10c>
		for( uint32_t i = 0u; i<cfg.backup_table.fw_size; i++ )
 8001996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001998:	3301      	adds	r3, #1
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3db      	bcc.n	800195c <restore_old_version+0xc4>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f001 f9ec 	bl	8002d84 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 80019ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d121      	bne.n	80019f8 <restore_old_version+0x160>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 80019b4:	f001 f9d6 	bl	8002d64 <HAL_FLASH_Lock>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    if( ret != HAL_OK )
 80019be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d11a      	bne.n	80019fc <restore_old_version+0x164>
	    }

	    // UPDATE APP Configuration

		// update information
		cfg.app_table.fw_crc					= cal_crc;
 80019c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c8:	f8c7 300a 	str.w	r3, [r7, #10]
		cfg.app_table.fw_size					= cfg.backup_table.fw_size;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f8c7 3006 	str.w	r3, [r7, #6]
		cfg.app_table.is_this_slot_not_valid	= 0u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	713b      	strb	r3, [r7, #4]
		cfg.app_table.is_this_slot_active		= 0u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	717b      	strb	r3, [r7, #5]

		// update the reboot reason
		cfg.reboot_cause = OTA_NORMAL_BOOT;
 80019da:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 80019de:	603b      	str	r3, [r7, #0]

		// Write configuration to flash
		ret = write_cfg_to_flash( &cfg );
 80019e0:	463b      	mov	r3, r7
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fde0 	bl	80015a8 <write_cfg_to_flash>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80019ee:	e006      	b.n	80019fe <restore_old_version+0x166>
			break;
 80019f0:	bf00      	nop
 80019f2:	e004      	b.n	80019fe <restore_old_version+0x166>
			break;
 80019f4:	bf00      	nop
 80019f6:	e002      	b.n	80019fe <restore_old_version+0x166>
	      break;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <restore_old_version+0x166>
	      break;
 80019fc:	bf00      	nop

	}while(false);

	return ret;
 80019fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	375c      	adds	r7, #92	; 0x5c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	0800c5a0 	.word	0x0800c5a0
 8001a14:	0800c574 	.word	0x0800c574
 8001a18:	08120000 	.word	0x08120000
 8001a1c:	0800c5b4 	.word	0x0800c5b4
 8001a20:	0800c5f0 	.word	0x0800c5f0
 8001a24:	40023c00 	.word	0x40023c00
 8001a28:	0800c610 	.word	0x0800c610

08001a2c <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	811a      	strh	r2, [r3, #8]
 8001a44:	23aa      	movs	r3, #170	; 0xaa
 8001a46:	733b      	strb	r3, [r7, #12]
 8001a48:	2303      	movs	r3, #3
 8001a4a:	737b      	strb	r3, [r7, #13]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	81fb      	strh	r3, [r7, #14]
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	743b      	strb	r3, [r7, #16]
 8001a54:	23bb      	movs	r3, #187	; 0xbb
 8001a56:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2101      	movs	r1, #1
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f80f 	bl	8001a84 <ota_calcCRC>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 8001a6c:	f107 010c 	add.w	r1, r7, #12
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	220a      	movs	r2, #10
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f005 fb11 	bl	800709e <HAL_UART_Transmit>

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e014      	b.n	8001ac4 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	0e1b      	lsrs	r3, r3, #24
 8001a9e:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	4053      	eors	r3, r2
 8001aac:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	021a      	lsls	r2, r3, #8
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4909      	ldr	r1, [pc, #36]	; (8001adc <ota_calcCRC+0x58>)
 8001ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001aba:	4053      	eors	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3e6      	bcc.n	8001a9a <ota_calcCRC+0x16>
    }
    return Checksum;
 8001acc:	697b      	ldr	r3, [r7, #20]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	0800c62c 	.word	0x0800c62c

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <HAL_MspInit+0x4c>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_CRC_MspInit+0x3c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10d      	bne.n	8001b5e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_CRC_MspInit+0x40>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_CRC_MspInit+0x40>)
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_CRC_MspInit+0x40>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023000 	.word	0x40023000
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_DMA2D_MspInit+0x48>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d115      	bne.n	8001bb2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_DMA2D_MspInit+0x4c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <HAL_DMA2D_MspInit+0x4c>)
 8001b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_DMA2D_MspInit+0x4c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	205a      	movs	r0, #90	; 0x5a
 8001ba8:	f000 fe31 	bl	800280e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bac:	205a      	movs	r0, #90	; 0x5a
 8001bae:	f000 fe4a 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	4002b000 	.word	0x4002b000
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_I2C_MspInit+0xc4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d14b      	bne.n	8001c7e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c30:	2304      	movs	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4815      	ldr	r0, [pc, #84]	; (8001c90 <HAL_I2C_MspInit+0xcc>)
 8001c3c:	f001 fb22 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c46:	2312      	movs	r3, #18
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c52:	2304      	movs	r3, #4
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <HAL_I2C_MspInit+0xd0>)
 8001c5e:	f001 fb11 	bl	8003284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_I2C_MspInit+0xc8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40005c00 	.word	0x40005c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020000 	.word	0x40020000

08001c98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b09a      	sub	sp, #104	; 0x68
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb4:	2230      	movs	r2, #48	; 0x30
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f009 f9e9 	bl	800b090 <memset>
  if(hltdc->Instance==LTDC)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a85      	ldr	r2, [pc, #532]	; (8001ed8 <HAL_LTDC_MspInit+0x240>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	f040 8102 	bne.w	8001ece <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8001cce:	2331      	movs	r3, #49	; 0x31
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fa92 	bl	8006208 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001cea:	f7ff f8db 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	4b7a      	ldr	r3, [pc, #488]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a79      	ldr	r2, [pc, #484]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001cf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b77      	ldr	r3, [pc, #476]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a72      	ldr	r2, [pc, #456]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a6b      	ldr	r2, [pc, #428]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b69      	ldr	r3, [pc, #420]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	4b65      	ldr	r3, [pc, #404]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a64      	ldr	r2, [pc, #400]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b62      	ldr	r3, [pc, #392]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b5e      	ldr	r3, [pc, #376]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a5d      	ldr	r2, [pc, #372]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a56      	ldr	r2, [pc, #344]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b54      	ldr	r3, [pc, #336]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b50      	ldr	r3, [pc, #320]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a4f      	ldr	r2, [pc, #316]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_LTDC_MspInit+0x244>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dc4:	230e      	movs	r3, #14
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4844      	ldr	r0, [pc, #272]	; (8001ee0 <HAL_LTDC_MspInit+0x248>)
 8001dd0:	f001 fa58 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001dd4:	f641 0358 	movw	r3, #6232	; 0x1858
 8001dd8:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001de6:	230e      	movs	r3, #14
 8001de8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dee:	4619      	mov	r1, r3
 8001df0:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <HAL_LTDC_MspInit+0x24c>)
 8001df2:	f001 fa47 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001df6:	2303      	movs	r3, #3
 8001df8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e06:	2309      	movs	r3, #9
 8001e08:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4835      	ldr	r0, [pc, #212]	; (8001ee8 <HAL_LTDC_MspInit+0x250>)
 8001e12:	f001 fa37 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e16:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e1a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e28:	230e      	movs	r3, #14
 8001e2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e30:	4619      	mov	r1, r3
 8001e32:	482d      	ldr	r0, [pc, #180]	; (8001ee8 <HAL_LTDC_MspInit+0x250>)
 8001e34:	f001 fa26 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e38:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e4a:	230e      	movs	r3, #14
 8001e4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e52:	4619      	mov	r1, r3
 8001e54:	4825      	ldr	r0, [pc, #148]	; (8001eec <HAL_LTDC_MspInit+0x254>)
 8001e56:	f001 fa15 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e5a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e5e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6c:	230e      	movs	r3, #14
 8001e6e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e74:	4619      	mov	r1, r3
 8001e76:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <HAL_LTDC_MspInit+0x258>)
 8001e78:	f001 fa04 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e7c:	2348      	movs	r3, #72	; 0x48
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e8c:	230e      	movs	r3, #14
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e94:	4619      	mov	r1, r3
 8001e96:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <HAL_LTDC_MspInit+0x25c>)
 8001e98:	f001 f9f4 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001eae:	2309      	movs	r3, #9
 8001eb0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <HAL_LTDC_MspInit+0x254>)
 8001eba:	f001 f9e3 	bl	8003284 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	2058      	movs	r0, #88	; 0x58
 8001ec4:	f000 fca3 	bl	800280e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ec8:	2058      	movs	r0, #88	; 0x58
 8001eca:	f000 fcbc 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3768      	adds	r7, #104	; 0x68
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40016800 	.word	0x40016800
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40021400 	.word	0x40021400
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00

08001ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_SPI_MspInit+0x84>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12c      	bne.n	8001f74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f52:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f64:	2305      	movs	r3, #5
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <HAL_SPI_MspInit+0x8c>)
 8001f70:	f001 f988 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40015000 	.word	0x40015000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021400 	.word	0x40021400

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d10d      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_TIM_Base_MspInit+0x40>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_UART_MspInit+0x128>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d14b      	bne.n	8002086 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a40      	ldr	r2, [pc, #256]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8001ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a39      	ldr	r2, [pc, #228]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a32      	ldr	r2, [pc, #200]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002054:	2308      	movs	r3, #8
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4827      	ldr	r0, [pc, #156]	; (80020fc <HAL_UART_MspInit+0x130>)
 8002060:	f001 f910 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002064:	2304      	movs	r3, #4
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002074:	2308      	movs	r3, #8
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4820      	ldr	r0, [pc, #128]	; (8002100 <HAL_UART_MspInit+0x134>)
 8002080:	f001 f900 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002084:	e031      	b.n	80020ea <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_UART_MspInit+0x138>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d12c      	bne.n	80020ea <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6453      	str	r3, [r2, #68]	; 0x44
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6313      	str	r3, [r2, #48]	; 0x30
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_UART_MspInit+0x12c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020da:	2307      	movs	r3, #7
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020e6:	f001 f8cd 	bl	8003284 <HAL_GPIO_Init>
}
 80020ea:	bf00      	nop
 80020ec:	3730      	adds	r7, #48	; 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40005000 	.word	0x40005000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40011000 	.word	0x40011000
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <HAL_FMC_MspInit+0x104>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d16f      	bne.n	8002208 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_FMC_MspInit+0x104>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_FMC_MspInit+0x108>)
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	4a37      	ldr	r2, [pc, #220]	; (8002214 <HAL_FMC_MspInit+0x108>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6393      	str	r3, [r2, #56]	; 0x38
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_FMC_MspInit+0x108>)
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800214a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800214e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800215c:	230c      	movs	r3, #12
 800215e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	482c      	ldr	r0, [pc, #176]	; (8002218 <HAL_FMC_MspInit+0x10c>)
 8002166:	f001 f88d 	bl	8003284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800216a:	2301      	movs	r3, #1
 800216c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800217a:	230c      	movs	r3, #12
 800217c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4826      	ldr	r0, [pc, #152]	; (800221c <HAL_FMC_MspInit+0x110>)
 8002184:	f001 f87e 	bl	8003284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002188:	f248 1333 	movw	r3, #33075	; 0x8133
 800218c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800219a:	230c      	movs	r3, #12
 800219c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	481f      	ldr	r0, [pc, #124]	; (8002220 <HAL_FMC_MspInit+0x114>)
 80021a4:	f001 f86e 	bl	8003284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80021a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021ac:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021ba:	230c      	movs	r3, #12
 80021bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4818      	ldr	r0, [pc, #96]	; (8002224 <HAL_FMC_MspInit+0x118>)
 80021c4:	f001 f85e 	bl	8003284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80021c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021cc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021da:	230c      	movs	r3, #12
 80021dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4811      	ldr	r0, [pc, #68]	; (8002228 <HAL_FMC_MspInit+0x11c>)
 80021e4:	f001 f84e 	bl	8003284 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80021e8:	2360      	movs	r3, #96	; 0x60
 80021ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021f8:	230c      	movs	r3, #12
 80021fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	480a      	ldr	r0, [pc, #40]	; (800222c <HAL_FMC_MspInit+0x120>)
 8002202:	f001 f83f 	bl	8003284 <HAL_GPIO_Init>
 8002206:	e000      	b.n	800220a <HAL_FMC_MspInit+0xfe>
    return;
 8002208:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000076c 	.word	0x2000076c
 8002214:	40023800 	.word	0x40023800
 8002218:	40021400 	.word	0x40021400
 800221c:	40020800 	.word	0x40020800
 8002220:	40021800 	.word	0x40021800
 8002224:	40021000 	.word	0x40021000
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40020400 	.word	0x40020400

08002230 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002238:	f7ff ff68 	bl	800210c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_InitTick+0xe4>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a32      	ldr	r2, [pc, #200]	; (8002328 <HAL_InitTick+0xe4>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_InitTick+0xe4>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002270:	f107 0210 	add.w	r2, r7, #16
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f003 ff92 	bl	80061a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800228a:	f003 ff63 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 800228e:	6378      	str	r0, [r7, #52]	; 0x34
 8002290:	e004      	b.n	800229c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002292:	f003 ff5f 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8002296:	4603      	mov	r3, r0
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <HAL_InitTick+0xe8>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	3b01      	subs	r3, #1
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_InitTick+0xec>)
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_InitTick+0xf0>)
 80022ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_InitTick+0xec>)
 80022b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_InitTick+0xec>)
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_InitTick+0xec>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_InitTick+0xec>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_InitTick+0xec>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022d0:	4817      	ldr	r0, [pc, #92]	; (8002330 <HAL_InitTick+0xec>)
 80022d2:	f004 fa16 	bl	8006702 <HAL_TIM_Base_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11b      	bne.n	800231c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <HAL_InitTick+0xec>)
 80022e6:	f004 fa5b 	bl	80067a0 <HAL_TIM_Base_Start_IT>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022f8:	2036      	movs	r0, #54	; 0x36
 80022fa:	f000 faa4 	bl	8002846 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d808      	bhi.n	8002316 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	2036      	movs	r0, #54	; 0x36
 800230a:	f000 fa80 	bl	800280e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_InitTick+0xf4>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e002      	b.n	800231c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800231c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002320:	4618      	mov	r0, r3
 8002322:	3738      	adds	r7, #56	; 0x38
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	431bde83 	.word	0x431bde83
 8002330:	20000770 	.word	0x20000770
 8002334:	40001000 	.word	0x40001000
 8002338:	20000008 	.word	0x20000008

0800233c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <NMI_Handler+0x4>

08002342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <TIM6_DAC_IRQHandler+0x10>)
 800239a:	f004 fa71 	bl	8006880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000770 	.word	0x20000770

080023a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <OTG_HS_IRQHandler+0x10>)
 80023ae:	f001 fb99 	bl	8003ae4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000bbc 	.word	0x20000bbc

080023bc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <LTDC_IRQHandler+0x10>)
 80023c2:	f002 ffbf 	bl	8005344 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000014c 	.word	0x2000014c

080023d0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA2D_IRQHandler+0x10>)
 80023d6:	f000 faad 	bl	8002934 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200000b8 	.word	0x200000b8

080023e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e00a      	b.n	800240c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f6:	f3af 8000 	nop.w
 80023fa:	4601      	mov	r1, r0
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	60ba      	str	r2, [r7, #8]
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	dbf0      	blt.n	80023f6 <_read+0x12>
  }

  return len;
 8002414:	687b      	ldr	r3, [r7, #4]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e009      	b.n	8002444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60ba      	str	r2, [r7, #8]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fcf3 	bl	8000e24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	3301      	adds	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	dbf1      	blt.n	8002430 <_write+0x12>
  }
  return len;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_close>:

int _close(int file)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247e:	605a      	str	r2, [r3, #4]
  return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_isatty>:

int _isatty(int file)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <_sbrk+0x5c>)
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <_sbrk+0x60>)
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <_sbrk+0x64>)
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <_sbrk+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <_sbrk+0x64>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d207      	bcs.n	8002500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f0:	f008 fd94 	bl	800b01c <__errno>
 80024f4:	4603      	mov	r3, r0
 80024f6:	220c      	movs	r2, #12
 80024f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e009      	b.n	8002514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <_sbrk+0x64>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <_sbrk+0x64>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <_sbrk+0x64>)
 8002510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20030000 	.word	0x20030000
 8002520:	00000400 	.word	0x00000400
 8002524:	200007b8 	.word	0x200007b8
 8002528:	20000ed0 	.word	0x20000ed0

0800252c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <SystemInit+0x20>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <SystemInit+0x20>)
 8002538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800253c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002588 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002556:	490e      	ldr	r1, [pc, #56]	; (8002590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002558:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800256c:	4c0b      	ldr	r4, [pc, #44]	; (800259c <LoopFillZerobss+0x26>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257a:	f7ff ffd7 	bl	800252c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257e:	f008 fd53 	bl	800b028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002582:	f7fe f807 	bl	8000594 <main>
  bx  lr    
 8002586:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002588:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800258c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002590:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002594:	0800caec 	.word	0x0800caec
  ldr r2, =_sbss
 8002598:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800259c:	20000ed0 	.word	0x20000ed0

080025a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a0:	e7fe      	b.n	80025a0 <ADC_IRQHandler>
	...

080025a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_Init+0x40>)
 80025ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_Init+0x40>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_Init+0x40>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f913 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d2:	200f      	movs	r0, #15
 80025d4:	f7ff fe36 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d8:	f7ff fa82 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00

080025e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_IncTick+0x20>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x24>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_IncTick+0x24>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c
 800260c:	200007bc 	.word	0x200007bc

08002610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_GetTick+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200007bc 	.word	0x200007bc

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff ffee 	bl	8002610 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d005      	beq.n	800264e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_Delay+0x44>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800264e:	bf00      	nop
 8002650:	f7ff ffde 	bl	8002610 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	d8f7      	bhi.n	8002650 <HAL_Delay+0x28>
  {
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000000c 	.word	0x2000000c

08002670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800268c:	4013      	ands	r3, r2
 800268e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <__NVIC_GetPriorityGrouping+0x18>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 0307 	and.w	r3, r3, #7
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db0b      	blt.n	80026fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	4907      	ldr	r1, [pc, #28]	; (800270c <__NVIC_EnableIRQ+0x38>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2001      	movs	r0, #1
 80026f6:	fa00 f202 	lsl.w	r2, r0, r2
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	; (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027d0:	f3bf 8f4f 	dsb	sy
}
 80027d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <__NVIC_SystemReset+0x24>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <__NVIC_SystemReset+0x24>)
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <__NVIC_SystemReset+0x28>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027e6:	f3bf 8f4f 	dsb	sy
}
 80027ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <__NVIC_SystemReset+0x20>
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	05fa0004 	.word	0x05fa0004

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff35 	bl	8002670 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff4a 	bl	80026b8 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff9a 	bl	8002764 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff69 	bl	8002710 <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff3d 	bl	80026d4 <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002866:	f7ff ffb1 	bl	80027cc <__NVIC_SystemReset>

0800286a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e00e      	b.n	800289a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	795b      	ldrb	r3, [r3, #5]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff f94f 	bl	8001b30 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e03b      	b.n	800292c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff f953 	bl	8001b74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	f023 0107 	bic.w	r1, r3, #7
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800290c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68d1      	ldr	r1, [r2, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d026      	beq.n	80029a4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d021      	beq.n	80029a4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2204      	movs	r2, #4
 8002988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d026      	beq.n	80029fc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	f043 0202 	orr.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2204      	movs	r2, #4
 80029e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d026      	beq.n	8002a54 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d021      	beq.n	8002a54 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2204      	movs	r2, #4
 8002a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d013      	beq.n	8002a86 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a76:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f853 	bl	8002b2c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d024      	beq.n	8002ada <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01f      	beq.n	8002ada <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01a      	beq.n	8002b24 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002afc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2210      	movs	r2, #16
 8002b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f80e 	bl	8002b40 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_DMA2D_ConfigLayer+0x20>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e079      	b.n	8002c68 <HAL_DMA2D_ConfigLayer+0x114>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	3318      	adds	r3, #24
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_DMA2D_ConfigLayer+0x120>)
 8002ba0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b0a      	cmp	r3, #10
 8002ba8:	d003      	beq.n	8002bb2 <HAL_DMA2D_ConfigLayer+0x5e>
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d107      	bne.n	8002bc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e005      	b.n	8002bce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d120      	bne.n	8002c16 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	ea02 0103 	and.w	r1, r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d003      	beq.n	8002c06 <HAL_DMA2D_ConfigLayer+0xb2>
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	d127      	bne.n	8002c56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
 8002c14:	e01f      	b.n	8002c56 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	ea02 0103 	and.w	r1, r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	d003      	beq.n	8002c48 <HAL_DMA2D_ConfigLayer+0xf4>
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b09      	cmp	r3, #9
 8002c46:	d106      	bne.n	8002c56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c54:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	ff03000f 	.word	0xff03000f

08002c78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_FLASH_Program+0xa0>)
 8002c8c:	7e1b      	ldrb	r3, [r3, #24]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_FLASH_Program+0x1e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e03b      	b.n	8002d0e <HAL_FLASH_Program+0x96>
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_FLASH_Program+0xa0>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ca0:	f000 f870 	bl	8002d84 <FLASH_WaitForLastOperation>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12b      	bne.n	8002d06 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002cb4:	783b      	ldrb	r3, [r7, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	68b8      	ldr	r0, [r7, #8]
 8002cba:	f000 f91b 	bl	8002ef4 <FLASH_Program_Byte>
 8002cbe:	e016      	b.n	8002cee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d105      	bne.n	8002cd2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002cc6:	883b      	ldrh	r3, [r7, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f000 f8ee 	bl	8002eac <FLASH_Program_HalfWord>
 8002cd0:	e00d      	b.n	8002cee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d105      	bne.n	8002ce4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68b8      	ldr	r0, [r7, #8]
 8002cde:	f000 f8c3 	bl	8002e68 <FLASH_Program_Word>
 8002ce2:	e004      	b.n	8002cee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce8:	68b8      	ldr	r0, [r7, #8]
 8002cea:	f000 f88b 	bl	8002e04 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cf2:	f000 f847 	bl	8002d84 <FLASH_WaitForLastOperation>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_FLASH_Program+0xa4>)
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <HAL_FLASH_Program+0xa4>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_FLASH_Program+0xa0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200007c0 	.word	0x200007c0
 8002d1c:	40023c00 	.word	0x40023c00

08002d20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_FLASH_Unlock+0x38>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0b      	bge.n	8002d4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_FLASH_Unlock+0x38>)
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_FLASH_Unlock+0x3c>)
 8002d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_FLASH_Unlock+0x38>)
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_FLASH_Unlock+0x40>)
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_FLASH_Unlock+0x38>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da01      	bge.n	8002d4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	40023c00 	.word	0x40023c00
 8002d5c:	45670123 	.word	0x45670123
 8002d60:	cdef89ab 	.word	0xcdef89ab

08002d64 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_FLASH_Lock+0x1c>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_FLASH_Lock+0x1c>)
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <FLASH_WaitForLastOperation+0x78>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d96:	f7ff fc3b 	bl	8002610 <HAL_GetTick>
 8002d9a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d9c:	e010      	b.n	8002dc0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d00c      	beq.n	8002dc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <FLASH_WaitForLastOperation+0x38>
 8002dac:	f7ff fc30 	bl	8002610 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d201      	bcs.n	8002dc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e019      	b.n	8002df4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <FLASH_WaitForLastOperation+0x7c>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e8      	bne.n	8002d9e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <FLASH_WaitForLastOperation+0x7c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <FLASH_WaitForLastOperation+0x7c>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <FLASH_WaitForLastOperation+0x7c>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002dea:	f000 f8a5 	bl	8002f38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
  
}  
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200007c0 	.word	0x200007c0
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <FLASH_Program_DoubleWord+0x60>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e3a:	f3bf 8f6f 	isb	sy
}
 8002e3e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	2300      	movs	r3, #0
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	3104      	adds	r1, #4
 8002e54:	4613      	mov	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <FLASH_Program_Word+0x40>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40023c00 	.word	0x40023c00

08002eac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <FLASH_Program_HalfWord+0x44>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	801a      	strh	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00

08002ef4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <FLASH_Program_Byte+0x40>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	701a      	strb	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f52:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f56:	2210      	movs	r2, #16
 8002f58:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	4a24      	ldr	r2, [pc, #144]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f70:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f74:	2220      	movs	r2, #32
 8002f76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002f8e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	4a15      	ldr	r2, [pc, #84]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f043 0320 	orr.w	r3, r3, #32
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <FLASH_SetErrorCode+0xc8>)
 8002fea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <FLASH_SetErrorCode+0xc4>)
 8002fee:	2202      	movs	r2, #2
 8002ff0:	60da      	str	r2, [r3, #12]
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40023c00 	.word	0x40023c00
 8003000:	200007c0 	.word	0x200007c0

08003004 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_FLASHEx_Erase+0xdc>)
 8003018:	7e1b      	ldrb	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_FLASHEx_Erase+0x1e>
 800301e:	2302      	movs	r3, #2
 8003020:	e05a      	b.n	80030d8 <HAL_FLASHEx_Erase+0xd4>
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_FLASHEx_Erase+0xdc>)
 8003024:	2201      	movs	r2, #1
 8003026:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800302c:	f7ff feaa 	bl	8002d84 <FLASH_WaitForLastOperation>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d14a      	bne.n	80030d0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d117      	bne.n	800307a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f846 	bl	80030e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800305c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003060:	f7ff fe90 	bl	8002d84 <FLASH_WaitForLastOperation>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_FLASHEx_Erase+0xe0>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_FLASHEx_Erase+0xe0>)
 800306e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003072:	f023 0304 	bic.w	r3, r3, #4
 8003076:	6113      	str	r3, [r2, #16]
 8003078:	e028      	b.n	80030cc <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	e01c      	b.n	80030bc <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 f866 	bl	800315c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003090:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003094:	f7ff fe76 	bl	8002d84 <FLASH_WaitForLastOperation>
 8003098:	4603      	mov	r3, r0
 800309a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_FLASHEx_Erase+0xe0>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_FLASHEx_Erase+0xe0>)
 80030a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80030a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	601a      	str	r2, [r3, #0]
          break;
 80030b4:	e00a      	b.n	80030cc <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3301      	adds	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3da      	bcc.n	8003082 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030cc:	f000 f894 	bl	80031f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_FLASHEx_Erase+0xdc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	761a      	strb	r2, [r3, #24]

  return status;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200007c0 	.word	0x200007c0
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <FLASH_MassErase+0x70>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4a17      	ldr	r2, [pc, #92]	; (8003158 <FLASH_MassErase+0x70>)
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d108      	bne.n	8003118 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <FLASH_MassErase+0x70>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	4a13      	ldr	r2, [pc, #76]	; (8003158 <FLASH_MassErase+0x70>)
 800310c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6113      	str	r3, [r2, #16]
 8003116:	e00f      	b.n	8003138 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <FLASH_MassErase+0x70>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <FLASH_MassErase+0x70>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6113      	str	r3, [r2, #16]
 800312a:	e005      	b.n	8003138 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <FLASH_MassErase+0x70>)
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <FLASH_MassErase+0x70>)
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <FLASH_MassErase+0x70>)
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	4313      	orrs	r3, r2
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <FLASH_MassErase+0x70>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6113      	str	r3, [r2, #16]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00

0800315c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e010      	b.n	800319a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d103      	bne.n	8003186 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800317e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e009      	b.n	800319a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d103      	bne.n	8003194 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800318c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e002      	b.n	800319a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003198:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b0b      	cmp	r3, #11
 800319e:	d902      	bls.n	80031a6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80031b2:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	490f      	ldr	r1, [pc, #60]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4313      	orrs	r3, r2
 80031d4:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031d6:	f043 0302 	orr.w	r3, r3, #2
 80031da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <FLASH_Erase_Sector+0x98>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	6113      	str	r3, [r2, #16]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40023c00 	.word	0x40023c00

080031f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <FLASH_FlushCaches+0x88>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <FLASH_FlushCaches+0x88>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <FLASH_FlushCaches+0x88>)
 800320e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003212:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <FLASH_FlushCaches+0x88>)
 800321a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b17      	ldr	r3, [pc, #92]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800322a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <FLASH_FlushCaches+0x88>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a13      	ldr	r2, [pc, #76]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003236:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <FLASH_FlushCaches+0x88>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d017      	beq.n	8003274 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <FLASH_FlushCaches+0x88>)
 800324a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <FLASH_FlushCaches+0x88>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <FLASH_FlushCaches+0x88>)
 8003262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003266:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <FLASH_FlushCaches+0x88>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <FLASH_FlushCaches+0x88>)
 800326e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003272:	6013      	str	r3, [r2, #0]
  }
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00

08003284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e177      	b.n	8003590 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f040 8166 	bne.w	800358a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d005      	beq.n	80032d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d130      	bne.n	8003338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0201 	and.w	r2, r3, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b03      	cmp	r3, #3
 8003342:	d017      	beq.n	8003374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d123      	bne.n	80033c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80c0 	beq.w	800358a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_GPIO_Init+0x324>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4a65      	ldr	r2, [pc, #404]	; (80035a8 <HAL_GPIO_Init+0x324>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_GPIO_Init+0x324>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003426:	4a61      	ldr	r2, [pc, #388]	; (80035ac <HAL_GPIO_Init+0x328>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a58      	ldr	r2, [pc, #352]	; (80035b0 <HAL_GPIO_Init+0x32c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d037      	beq.n	80034c2 <HAL_GPIO_Init+0x23e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_GPIO_Init+0x330>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d031      	beq.n	80034be <HAL_GPIO_Init+0x23a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a56      	ldr	r2, [pc, #344]	; (80035b8 <HAL_GPIO_Init+0x334>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <HAL_GPIO_Init+0x236>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a55      	ldr	r2, [pc, #340]	; (80035bc <HAL_GPIO_Init+0x338>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d025      	beq.n	80034b6 <HAL_GPIO_Init+0x232>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <HAL_GPIO_Init+0x33c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <HAL_GPIO_Init+0x22e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_GPIO_Init+0x340>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d019      	beq.n	80034ae <HAL_GPIO_Init+0x22a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	; (80035c8 <HAL_GPIO_Init+0x344>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_GPIO_Init+0x226>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a51      	ldr	r2, [pc, #324]	; (80035cc <HAL_GPIO_Init+0x348>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00d      	beq.n	80034a6 <HAL_GPIO_Init+0x222>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a50      	ldr	r2, [pc, #320]	; (80035d0 <HAL_GPIO_Init+0x34c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <HAL_GPIO_Init+0x21e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a4f      	ldr	r2, [pc, #316]	; (80035d4 <HAL_GPIO_Init+0x350>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_GPIO_Init+0x21a>
 800349a:	2309      	movs	r3, #9
 800349c:	e012      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 800349e:	230a      	movs	r3, #10
 80034a0:	e010      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034a2:	2308      	movs	r3, #8
 80034a4:	e00e      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e00c      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034aa:	2306      	movs	r3, #6
 80034ac:	e00a      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034ae:	2305      	movs	r3, #5
 80034b0:	e008      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034b2:	2304      	movs	r3, #4
 80034b4:	e006      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034b6:	2303      	movs	r3, #3
 80034b8:	e004      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e002      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_GPIO_Init+0x240>
 80034c2:	2300      	movs	r3, #0
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	4093      	lsls	r3, r2
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d4:	4935      	ldr	r1, [pc, #212]	; (80035ac <HAL_GPIO_Init+0x328>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_GPIO_Init+0x354>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003506:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <HAL_GPIO_Init+0x354>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800350c:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <HAL_GPIO_Init+0x354>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <HAL_GPIO_Init+0x354>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_GPIO_Init+0x354>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_GPIO_Init+0x354>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_GPIO_Init+0x354>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <HAL_GPIO_Init+0x354>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3301      	adds	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	f67f ae84 	bls.w	80032a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3724      	adds	r7, #36	; 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40020c00 	.word	0x40020c00
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40021400 	.word	0x40021400
 80035c8:	40021800 	.word	0x40021800
 80035cc:	40021c00 	.word	0x40021c00
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40022400 	.word	0x40022400
 80035d8:	40013c00 	.word	0x40013c00

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f8:	e003      	b.n	8003602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	041a      	lsls	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	619a      	str	r2, [r3, #24]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800360e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003610:	b08f      	sub	sp, #60	; 0x3c
 8003612:	af0a      	add	r7, sp, #40	; 0x28
 8003614:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e054      	b.n	80036ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f007 fa3e 	bl	800aabc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2203      	movs	r2, #3
 8003644:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fa6c 	bl	8007b3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	687e      	ldr	r6, [r7, #4]
 800366c:	466d      	mov	r5, sp
 800366e:	f106 0410 	add.w	r4, r6, #16
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003682:	1d33      	adds	r3, r6, #4
 8003684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	f004 f9e6 	bl	8007a58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fa63 	bl	8007b5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	687e      	ldr	r6, [r7, #4]
 80036a0:	466d      	mov	r5, sp
 80036a2:	f106 0410 	add.w	r4, r6, #16
 80036a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b6:	1d33      	adds	r3, r6, #4
 80036b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f004 fbec 	bl	8007e98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80036d2:	b590      	push	{r4, r7, lr}
 80036d4:	b089      	sub	sp, #36	; 0x24
 80036d6:	af04      	add	r7, sp, #16
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	461a      	mov	r2, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	70fb      	strb	r3, [r7, #3]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70bb      	strb	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_HCD_HC_Init+0x28>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e076      	b.n	80037e8 <HAL_HCD_HC_Init+0x116>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	212c      	movs	r1, #44	; 0x2c
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	4413      	add	r3, r2
 800370e:	333d      	adds	r3, #61	; 0x3d
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3338      	adds	r3, #56	; 0x38
 8003722:	787a      	ldrb	r2, [r7, #1]
 8003724:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3340      	adds	r3, #64	; 0x40
 8003734:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003736:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3339      	adds	r3, #57	; 0x39
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	333f      	adds	r3, #63	; 0x3f
 8003758:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800375c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	78ba      	ldrb	r2, [r7, #2]
 8003762:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003766:	b2d0      	uxtb	r0, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	333a      	adds	r3, #58	; 0x3a
 8003774:	4602      	mov	r2, r0
 8003776:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da09      	bge.n	8003794 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	333b      	adds	r3, #59	; 0x3b
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e008      	b.n	80037a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	212c      	movs	r1, #44	; 0x2c
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	4413      	add	r3, r2
 80037a0:	333b      	adds	r3, #59	; 0x3b
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	333c      	adds	r3, #60	; 0x3c
 80037b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	787c      	ldrb	r4, [r7, #1]
 80037c0:	78ba      	ldrb	r2, [r7, #2]
 80037c2:	78f9      	ldrb	r1, [r7, #3]
 80037c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037c6:	9302      	str	r3, [sp, #8]
 80037c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	4623      	mov	r3, r4
 80037d6:	f004 fce5 	bl	80081a4 <USB_HC_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}

080037f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_HCD_HC_Halt+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e00f      	b.n	800382e <HAL_HCD_HC_Halt+0x3e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f004 ff35 	bl	800868e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	70fb      	strb	r3, [r7, #3]
 800384a:	460b      	mov	r3, r1
 800384c:	70bb      	strb	r3, [r7, #2]
 800384e:	4613      	mov	r3, r2
 8003850:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	333b      	adds	r3, #59	; 0x3b
 8003860:	78ba      	ldrb	r2, [r7, #2]
 8003862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	333f      	adds	r3, #63	; 0x3f
 8003872:	787a      	ldrb	r2, [r7, #1]
 8003874:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003876:	7c3b      	ldrb	r3, [r7, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d112      	bne.n	80038a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3342      	adds	r3, #66	; 0x42
 800388a:	2203      	movs	r2, #3
 800388c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	333d      	adds	r3, #61	; 0x3d
 800389c:	7f3a      	ldrb	r2, [r7, #28]
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e008      	b.n	80038b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3342      	adds	r3, #66	; 0x42
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f200 80c6 	bhi.w	8003a48 <HAL_HCD_HC_SubmitRequest+0x210>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	08003a35 	.word	0x08003a35
 80038cc:	08003939 	.word	0x08003939
 80038d0:	080039b7 	.word	0x080039b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038d4:	7c3b      	ldrb	r3, [r7, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	f040 80b8 	bne.w	8003a4c <HAL_HCD_HC_SubmitRequest+0x214>
 80038dc:	78bb      	ldrb	r3, [r7, #2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 80b4 	bne.w	8003a4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80038e4:	8b3b      	ldrh	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d108      	bne.n	80038fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3355      	adds	r3, #85	; 0x55
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3355      	adds	r3, #85	; 0x55
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3342      	adds	r3, #66	; 0x42
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003922:	e093      	b.n	8003a4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3342      	adds	r3, #66	; 0x42
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	e089      	b.n	8003a4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003938:	78bb      	ldrb	r3, [r7, #2]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11d      	bne.n	800397a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	3355      	adds	r3, #85	; 0x55
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	212c      	movs	r1, #44	; 0x2c
 8003958:	fb01 f303 	mul.w	r3, r1, r3
 800395c:	4413      	add	r3, r2
 800395e:	3342      	adds	r3, #66	; 0x42
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003964:	e073      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3342      	adds	r3, #66	; 0x42
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
      break;
 8003978:	e069      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3354      	adds	r3, #84	; 0x54
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3342      	adds	r3, #66	; 0x42
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
      break;
 80039a0:	e055      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3342      	adds	r3, #66	; 0x42
 80039b0:	2202      	movs	r2, #2
 80039b2:	701a      	strb	r2, [r3, #0]
      break;
 80039b4:	e04b      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d11d      	bne.n	80039f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3355      	adds	r3, #85	; 0x55
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3342      	adds	r3, #66	; 0x42
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039e2:	e034      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3342      	adds	r3, #66	; 0x42
 80039f2:	2202      	movs	r2, #2
 80039f4:	701a      	strb	r2, [r3, #0]
      break;
 80039f6:	e02a      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3354      	adds	r3, #84	; 0x54
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	3342      	adds	r3, #66	; 0x42
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
      break;
 8003a1e:	e016      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3342      	adds	r3, #66	; 0x42
 8003a2e:	2202      	movs	r2, #2
 8003a30:	701a      	strb	r2, [r3, #0]
      break;
 8003a32:	e00c      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3342      	adds	r3, #66	; 0x42
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003a48:	bf00      	nop
 8003a4a:	e000      	b.n	8003a4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3344      	adds	r3, #68	; 0x44
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	8b3a      	ldrh	r2, [r7, #24]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	202c      	movs	r0, #44	; 0x2c
 8003a68:	fb00 f303 	mul.w	r3, r0, r3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334c      	adds	r3, #76	; 0x4c
 8003a70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3360      	adds	r3, #96	; 0x60
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3350      	adds	r3, #80	; 0x50
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3339      	adds	r3, #57	; 0x39
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	222c      	movs	r2, #44	; 0x2c
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	3338      	adds	r3, #56	; 0x38
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	18d1      	adds	r1, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f004 fc88 	bl	80083e8 <USB_HC_StartXfer>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop

08003ae4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 f989 	bl	8007e12 <USB_GetMode>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	f040 80f6 	bne.w	8003cf4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f004 f96d 	bl	8007dec <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80ec 	beq.w	8003cf2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 f964 	bl	8007dec <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b2e:	d104      	bne.n	8003b3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 f954 	bl	8007dec <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d104      	bne.n	8003b5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 f944 	bl	8007dec <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b6e:	d104      	bne.n	8003b7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f004 f934 	bl	8007dec <USB_ReadInterrupts>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d103      	bne.n	8003b96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2202      	movs	r2, #2
 8003b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 f926 	bl	8007dec <USB_ReadInterrupts>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003baa:	d11c      	bne.n	8003be6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bb4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	6938      	ldr	r0, [r7, #16]
 8003bca:	f004 f815 	bl	8007bf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bce:	6938      	ldr	r0, [r7, #16]
 8003bd0:	f004 f846 	bl	8007c60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 fa1c 	bl	8008018 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f006 ffe5 	bl	800abb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 f8fe 	bl	8007dec <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfa:	d102      	bne.n	8003c02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 f89e 	bl	8004d3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f004 f8f0 	bl	8007dec <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d106      	bne.n	8003c24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f006 ffae 	bl	800ab78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 f8df 	bl	8007dec <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d101      	bne.n	8003c3c <HAL_HCD_IRQHandler+0x158>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <HAL_HCD_IRQHandler+0x15a>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0210 	bic.w	r2, r2, #16
 8003c50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 ffa1 	bl	8004b9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0210 	orr.w	r2, r2, #16
 8003c66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f004 f8bd 	bl	8007dec <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c7c:	d13a      	bne.n	8003cf4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 fcf2 	bl	800866c <USB_HC_ReadInterrupt>
 8003c88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e025      	b.n	8003cdc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cba:	d106      	bne.n	8003cca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8ab 	bl	8003e1e <HCD_HC_IN_IRQHandler>
 8003cc8:	e005      	b.n	8003cd6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fbf9 	bl	80044c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3d4      	bcc.n	8003c90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	e000      	b.n	8003cf4 <HAL_HCD_IRQHandler+0x210>
      return;
 8003cf2:	bf00      	nop
    }
  }
}
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_HCD_Start+0x16>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e013      	b.n	8003d38 <HAL_HCD_Start+0x3e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 f9de 	bl	80080e0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fef6 	bl	8007b1a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_HCD_Stop+0x16>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e00d      	b.n	8003d72 <HAL_HCD_Stop+0x32>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 fdcc 	bl	8008900 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 f980 	bl	800808c <USB_ResetPort>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	212c      	movs	r1, #44	; 0x2c
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3360      	adds	r3, #96	; 0x60
 8003db0:	781b      	ldrb	r3, [r3, #0]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3350      	adds	r3, #80	; 0x50
 8003dd8:	681b      	ldr	r3, [r3, #0]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 f9c4 	bl	8008180 <USB_GetCurrentFrame>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f99f 	bl	8008152 <USB_GetHostSpeed>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d11a      	bne.n	8003e84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3361      	adds	r3, #97	; 0x61
 8003e6e:	2206      	movs	r2, #6
 8003e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f004 fc06 	bl	800868e <USB_HC_Halt>
 8003e82:	e0af      	b.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9a:	d11b      	bne.n	8003ed4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3361      	adds	r3, #97	; 0x61
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f004 fbde 	bl	800868e <USB_HC_Halt>
 8003ed2:	e087      	b.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d109      	bne.n	8003efe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2320      	movs	r3, #32
 8003efa:	6093      	str	r3, [r2, #8]
 8003efc:	e072      	b.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11a      	bne.n	8003f4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2308      	movs	r3, #8
 8003f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	212c      	movs	r1, #44	; 0x2c
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	4413      	add	r3, r2
 8003f32:	3361      	adds	r3, #97	; 0x61
 8003f34:	2205      	movs	r2, #5
 8003f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 fba3 	bl	800868e <USB_HC_Halt>
 8003f48:	e04c      	b.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d11b      	bne.n	8003f9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	3361      	adds	r3, #97	; 0x61
 8003f84:	2208      	movs	r2, #8
 8003f86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f004 fb7b 	bl	800868e <USB_HC_Halt>
 8003f98:	e024      	b.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d119      	bne.n	8003fe4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3361      	adds	r3, #97	; 0x61
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f004 fb55 	bl	800868e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d112      	bne.n	8004022 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f004 fb41 	bl	800868e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	461a      	mov	r2, r3
 800401a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004020:	e24e      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	f040 80df 	bne.w	80041f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d019      	beq.n	8004076 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3348      	adds	r3, #72	; 0x48
 8004050:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0159      	lsls	r1, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	440b      	add	r3, r1
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004064:	1ad2      	subs	r2, r2, r3
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	202c      	movs	r0, #44	; 0x2c
 800406c:	fb00 f303 	mul.w	r3, r0, r3
 8004070:	440b      	add	r3, r1
 8004072:	3350      	adds	r3, #80	; 0x50
 8004074:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	212c      	movs	r1, #44	; 0x2c
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3361      	adds	r3, #97	; 0x61
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	335c      	adds	r3, #92	; 0x5c
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	2301      	movs	r3, #1
 80040aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	212c      	movs	r1, #44	; 0x2c
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	333f      	adds	r3, #63	; 0x3f
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	212c      	movs	r1, #44	; 0x2c
 80040c6:	fb01 f303 	mul.w	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	333f      	adds	r3, #63	; 0x3f
 80040ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d111      	bne.n	80040f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 fad5 	bl	800868e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	461a      	mov	r2, r3
 80040f2:	2310      	movs	r3, #16
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e03a      	b.n	800416e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	333f      	adds	r3, #63	; 0x3f
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d009      	beq.n	8004120 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	333f      	adds	r3, #63	; 0x3f
 800411a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800411c:	2b01      	cmp	r3, #1
 800411e:	d126      	bne.n	800416e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	b2d9      	uxtb	r1, r3
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	202c      	movs	r0, #44	; 0x2c
 800415c:	fb00 f303 	mul.w	r3, r0, r3
 8004160:	4413      	add	r3, r2
 8004162:	3360      	adds	r3, #96	; 0x60
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f006 fd2f 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d12b      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3348      	adds	r3, #72	; 0x48
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	202c      	movs	r0, #44	; 0x2c
 800418c:	fb00 f202 	mul.w	r2, r0, r2
 8004190:	440a      	add	r2, r1
 8004192:	3240      	adds	r2, #64	; 0x40
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	fbb3 f3f2 	udiv	r3, r3, r2
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 818e 	beq.w	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3354      	adds	r3, #84	; 0x54
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2d8      	uxtb	r0, r3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	3354      	adds	r3, #84	; 0x54
 80041c8:	4602      	mov	r2, r0
 80041ca:	701a      	strb	r2, [r3, #0]
}
 80041cc:	e178      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3354      	adds	r3, #84	; 0x54
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2d8      	uxtb	r0, r3
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3354      	adds	r3, #84	; 0x54
 80041f2:	4602      	mov	r2, r0
 80041f4:	701a      	strb	r2, [r3, #0]
}
 80041f6:	e163      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	f040 80f6 	bne.w	80043fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3361      	adds	r3, #97	; 0x61
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d109      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3360      	adds	r3, #96	; 0x60
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e0c9      	b.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3361      	adds	r3, #97	; 0x61
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b05      	cmp	r3, #5
 800424a:	d109      	bne.n	8004260 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3360      	adds	r3, #96	; 0x60
 800425a:	2205      	movs	r2, #5
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e0b5      	b.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	3361      	adds	r3, #97	; 0x61
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d009      	beq.n	8004288 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3361      	adds	r3, #97	; 0x61
 8004282:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004284:	2b08      	cmp	r3, #8
 8004286:	d150      	bne.n	800432a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	335c      	adds	r3, #92	; 0x5c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	202c      	movs	r0, #44	; 0x2c
 80042a0:	fb00 f303 	mul.w	r3, r0, r3
 80042a4:	440b      	add	r3, r1
 80042a6:	335c      	adds	r3, #92	; 0x5c
 80042a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	335c      	adds	r3, #92	; 0x5c
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d912      	bls.n	80042e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	335c      	adds	r3, #92	; 0x5c
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3360      	adds	r3, #96	; 0x60
 80042de:	2204      	movs	r2, #4
 80042e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042e2:	e073      	b.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800430c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004314:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004328:	e050      	b.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	3361      	adds	r3, #97	; 0x61
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d122      	bne.n	8004384 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	3360      	adds	r3, #96	; 0x60
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004366:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800436e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e023      	b.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3361      	adds	r3, #97	; 0x61
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b07      	cmp	r3, #7
 8004396:	d119      	bne.n	80043cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	335c      	adds	r3, #92	; 0x5c
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	202c      	movs	r0, #44	; 0x2c
 80043b0:	fb00 f303 	mul.w	r3, r0, r3
 80043b4:	440b      	add	r3, r1
 80043b6:	335c      	adds	r3, #92	; 0x5c
 80043b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3360      	adds	r3, #96	; 0x60
 80043c8:	2204      	movs	r2, #4
 80043ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	461a      	mov	r2, r3
 80043da:	2302      	movs	r3, #2
 80043dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b2d9      	uxtb	r1, r3
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	fb00 f303 	mul.w	r3, r0, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3360      	adds	r3, #96	; 0x60
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f006 fbe9 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043fa:	e061      	b.n	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4413      	add	r3, r2
 8004404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b10      	cmp	r3, #16
 8004410:	d156      	bne.n	80044c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	333f      	adds	r3, #63	; 0x3f
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d111      	bne.n	800444a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	335c      	adds	r3, #92	; 0x5c
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f004 f923 	bl	800868e <USB_HC_Halt>
 8004448:	e031      	b.n	80044ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	212c      	movs	r1, #44	; 0x2c
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	4413      	add	r3, r2
 8004456:	333f      	adds	r3, #63	; 0x3f
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	333f      	adds	r3, #63	; 0x3f
 800446c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800446e:	2b02      	cmp	r3, #2
 8004470:	d11d      	bne.n	80044ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	335c      	adds	r3, #92	; 0x5c
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d110      	bne.n	80044ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3361      	adds	r3, #97	; 0x61
 800449a:	2203      	movs	r2, #3
 800449c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f004 f8f0 	bl	800868e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2310      	movs	r3, #16
 80044be:	6093      	str	r3, [r2, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d11a      	bne.n	800452e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	2304      	movs	r3, #4
 8004508:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3361      	adds	r3, #97	; 0x61
 8004518:	2206      	movs	r2, #6
 800451a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f004 f8b1 	bl	800868e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800452c:	e331      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b20      	cmp	r3, #32
 8004542:	d12e      	bne.n	80045a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	2320      	movs	r3, #32
 8004554:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	333d      	adds	r3, #61	; 0x3d
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 8313 	bne.w	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	333d      	adds	r3, #61	; 0x3d
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3360      	adds	r3, #96	; 0x60
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f004 f877 	bl	800868e <USB_HC_Halt>
}
 80045a0:	e2f7      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b8:	d112      	bne.n	80045e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	461a      	mov	r2, r3
 80045c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f004 f858 	bl	800868e <USB_HC_Halt>
}
 80045de:	e2d8      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d140      	bne.n	8004678 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	335c      	adds	r3, #92	; 0x5c
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d111      	bne.n	8004642 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	212c      	movs	r1, #44	; 0x2c
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	333d      	adds	r3, #61	; 0x3d
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463c:	461a      	mov	r2, r3
 800463e:	2340      	movs	r3, #64	; 0x40
 8004640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	2301      	movs	r3, #1
 8004652:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	212c      	movs	r1, #44	; 0x2c
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	4413      	add	r3, r2
 8004660:	3361      	adds	r3, #97	; 0x61
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f004 f80c 	bl	800868e <USB_HC_Halt>
}
 8004676:	e28c      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d12c      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	3361      	adds	r3, #97	; 0x61
 800469c:	2204      	movs	r2, #4
 800469e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	333d      	adds	r3, #61	; 0x3d
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 ffdd 	bl	800868e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	6093      	str	r3, [r2, #8]
}
 80046e6:	e254      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11a      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2308      	movs	r3, #8
 800470e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3361      	adds	r3, #97	; 0x61
 800471e:	2205      	movs	r2, #5
 8004720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f003 ffae 	bl	800868e <USB_HC_Halt>
}
 8004732:	e22e      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b10      	cmp	r3, #16
 8004748:	d140      	bne.n	80047cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	212c      	movs	r1, #44	; 0x2c
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	4413      	add	r3, r2
 8004756:	335c      	adds	r3, #92	; 0x5c
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	212c      	movs	r1, #44	; 0x2c
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	4413      	add	r3, r2
 8004768:	3361      	adds	r3, #97	; 0x61
 800476a:	2203      	movs	r2, #3
 800476c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	212c      	movs	r1, #44	; 0x2c
 8004774:	fb01 f303 	mul.w	r3, r1, r3
 8004778:	4413      	add	r3, r2
 800477a:	333d      	adds	r3, #61	; 0x3d
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d112      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	333c      	adds	r3, #60	; 0x3c
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d108      	bne.n	80047a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	333d      	adds	r3, #61	; 0x3d
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 ff6b 	bl	800868e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	461a      	mov	r2, r3
 80047c6:	2310      	movs	r3, #16
 80047c8:	6093      	str	r3, [r2, #8]
}
 80047ca:	e1e2      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d164      	bne.n	80048ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d111      	bne.n	800480e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	212c      	movs	r1, #44	; 0x2c
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	3361      	adds	r3, #97	; 0x61
 80047f8:	2206      	movs	r2, #6
 80047fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f003 ff41 	bl	800868e <USB_HC_Halt>
 800480c:	e044      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	335c      	adds	r3, #92	; 0x5c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	202c      	movs	r0, #44	; 0x2c
 8004826:	fb00 f303 	mul.w	r3, r0, r3
 800482a:	440b      	add	r3, r1
 800482c:	335c      	adds	r3, #92	; 0x5c
 800482e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	212c      	movs	r1, #44	; 0x2c
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	335c      	adds	r3, #92	; 0x5c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d920      	bls.n	8004886 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	335c      	adds	r3, #92	; 0x5c
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3360      	adds	r3, #96	; 0x60
 8004864:	2204      	movs	r2, #4
 8004866:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	b2d9      	uxtb	r1, r3
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	202c      	movs	r0, #44	; 0x2c
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	4413      	add	r3, r2
 8004878:	3360      	adds	r3, #96	; 0x60
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f006 f9a4 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004884:	e008      	b.n	8004898 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3360      	adds	r3, #96	; 0x60
 8004894:	2202      	movs	r2, #2
 8004896:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	461a      	mov	r2, r3
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	6093      	str	r3, [r2, #8]
}
 80048aa:	e172      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d11b      	bne.n	80048fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3361      	adds	r3, #97	; 0x61
 80048d2:	2208      	movs	r2, #8
 80048d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 fed4 	bl	800868e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f2:	461a      	mov	r2, r3
 80048f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f8:	6093      	str	r3, [r2, #8]
}
 80048fa:	e14a      	b.n	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	f040 813f 	bne.w	8004b92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3361      	adds	r3, #97	; 0x61
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d17d      	bne.n	8004a24 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3360      	adds	r3, #96	; 0x60
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	333f      	adds	r3, #63	; 0x3f
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d00a      	beq.n	8004964 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	333f      	adds	r3, #63	; 0x3f
 800495c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800495e:	2b03      	cmp	r3, #3
 8004960:	f040 8100 	bne.w	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d113      	bne.n	8004994 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	212c      	movs	r1, #44	; 0x2c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	3355      	adds	r3, #85	; 0x55
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f083 0301 	eor.w	r3, r3, #1
 8004980:	b2d8      	uxtb	r0, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3355      	adds	r3, #85	; 0x55
 8004990:	4602      	mov	r2, r0
 8004992:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 80e3 	bne.w	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	334c      	adds	r3, #76	; 0x4c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80d8 	beq.w	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	334c      	adds	r3, #76	; 0x4c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	202c      	movs	r0, #44	; 0x2c
 80049ca:	fb00 f202 	mul.w	r2, r0, r2
 80049ce:	440a      	add	r2, r1
 80049d0:	3240      	adds	r2, #64	; 0x40
 80049d2:	8812      	ldrh	r2, [r2, #0]
 80049d4:	4413      	add	r3, r2
 80049d6:	3b01      	subs	r3, #1
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	202c      	movs	r0, #44	; 0x2c
 80049de:	fb00 f202 	mul.w	r2, r0, r2
 80049e2:	440a      	add	r2, r1
 80049e4:	3240      	adds	r2, #64	; 0x40
 80049e6:	8812      	ldrh	r2, [r2, #0]
 80049e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80b5 	beq.w	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	3355      	adds	r3, #85	; 0x55
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	f083 0301 	eor.w	r3, r3, #1
 8004a0e:	b2d8      	uxtb	r0, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3355      	adds	r3, #85	; 0x55
 8004a1e:	4602      	mov	r2, r0
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e09f      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3361      	adds	r3, #97	; 0x61
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d109      	bne.n	8004a4c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3360      	adds	r3, #96	; 0x60
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e08b      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3361      	adds	r3, #97	; 0x61
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d109      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3360      	adds	r3, #96	; 0x60
 8004a6e:	2202      	movs	r2, #2
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e077      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3361      	adds	r3, #97	; 0x61
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d109      	bne.n	8004a9c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3360      	adds	r3, #96	; 0x60
 8004a96:	2205      	movs	r2, #5
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e063      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3361      	adds	r3, #97	; 0x61
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d009      	beq.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3361      	adds	r3, #97	; 0x61
 8004abe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d14f      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	335c      	adds	r3, #92	; 0x5c
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	202c      	movs	r0, #44	; 0x2c
 8004adc:	fb00 f303 	mul.w	r3, r0, r3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	335c      	adds	r3, #92	; 0x5c
 8004ae4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	335c      	adds	r3, #92	; 0x5c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d912      	bls.n	8004b20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	335c      	adds	r3, #92	; 0x5c
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3360      	adds	r3, #96	; 0x60
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e021      	b.n	8004b64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3360      	adds	r3, #96	; 0x60
 8004b2e:	2202      	movs	r2, #2
 8004b30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5e:	461a      	mov	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	461a      	mov	r2, r3
 8004b72:	2302      	movs	r3, #2
 8004b74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	b2d9      	uxtb	r1, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	202c      	movs	r0, #44	; 0x2c
 8004b80:	fb00 f303 	mul.w	r3, r0, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	3360      	adds	r3, #96	; 0x60
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f006 f81d 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b92:	bf00      	nop
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b08a      	sub	sp, #40	; 0x28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	0c5b      	lsrs	r3, r3, #17
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d004      	beq.n	8004be0 <HCD_RXQLVL_IRQHandler+0x46>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	f000 80a9 	beq.w	8004d30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bde:	e0aa      	b.n	8004d36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80a6 	beq.w	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3344      	adds	r3, #68	; 0x44
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 809b 	beq.w	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3350      	adds	r3, #80	; 0x50
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	441a      	add	r2, r3
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	202c      	movs	r0, #44	; 0x2c
 8004c18:	fb00 f303 	mul.w	r3, r0, r3
 8004c1c:	440b      	add	r3, r1
 8004c1e:	334c      	adds	r3, #76	; 0x4c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d87a      	bhi.n	8004d1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	212c      	movs	r1, #44	; 0x2c
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	3344      	adds	r3, #68	; 0x44
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f003 f87c 	bl	8007d3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3344      	adds	r3, #68	; 0x44
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	441a      	add	r2, r3
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	202c      	movs	r0, #44	; 0x2c
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	440b      	add	r3, r1
 8004c64:	3344      	adds	r3, #68	; 0x44
 8004c66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	212c      	movs	r1, #44	; 0x2c
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3350      	adds	r3, #80	; 0x50
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	441a      	add	r2, r3
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	202c      	movs	r0, #44	; 0x2c
 8004c82:	fb00 f303 	mul.w	r3, r0, r3
 8004c86:	440b      	add	r3, r1
 8004c88:	3350      	adds	r3, #80	; 0x50
 8004c8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	0cdb      	lsrs	r3, r3, #19
 8004c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3340      	adds	r3, #64	; 0x40
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d13c      	bne.n	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d039      	beq.n	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cd6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cde:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	461a      	mov	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3354      	adds	r3, #84	; 0x54
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f083 0301 	eor.w	r3, r3, #1
 8004d06:	b2d8      	uxtb	r0, r3
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	3354      	adds	r3, #84	; 0x54
 8004d16:	4602      	mov	r2, r0
 8004d18:	701a      	strb	r2, [r3, #0]
      break;
 8004d1a:	e00b      	b.n	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	3360      	adds	r3, #96	; 0x60
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	701a      	strb	r2, [r3, #0]
      break;
 8004d2e:	e001      	b.n	8004d34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d30:	bf00      	nop
 8004d32:	e000      	b.n	8004d36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d34:	bf00      	nop
  }
}
 8004d36:	bf00      	nop
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d10b      	bne.n	8004d8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f005 ff07 	bl	800ab94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 0302 	orr.w	r3, r3, #2
 8004d8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d132      	bne.n	8004dfe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f043 0308 	orr.w	r3, r3, #8
 8004d9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d126      	bne.n	8004df8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d113      	bne.n	8004dda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dbc:	d106      	bne.n	8004dcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f003 f927 	bl	8008018 <USB_InitFSLSPClkSel>
 8004dca:	e011      	b.n	8004df0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 f920 	bl	8008018 <USB_InitFSLSPClkSel>
 8004dd8:	e00a      	b.n	8004df0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d106      	bne.n	8004df0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de8:	461a      	mov	r2, r3
 8004dea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004dee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f005 fef9 	bl	800abe8 <HAL_HCD_PortEnabled_Callback>
 8004df6:	e002      	b.n	8004dfe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f005 ff03 	bl	800ac04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d103      	bne.n	8004e10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f043 0320 	orr.w	r3, r3, #32
 8004e0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e16:	461a      	mov	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6013      	str	r3, [r2, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e12b      	b.n	800508e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc feba 	bl	8001bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e88:	f001 f964 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8004e8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4a81      	ldr	r2, [pc, #516]	; (8005098 <HAL_I2C_Init+0x274>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d807      	bhi.n	8004ea8 <HAL_I2C_Init+0x84>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a80      	ldr	r2, [pc, #512]	; (800509c <HAL_I2C_Init+0x278>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bf94      	ite	ls
 8004ea0:	2301      	movls	r3, #1
 8004ea2:	2300      	movhi	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e006      	b.n	8004eb6 <HAL_I2C_Init+0x92>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a7d      	ldr	r2, [pc, #500]	; (80050a0 <HAL_I2C_Init+0x27c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bf94      	ite	ls
 8004eb0:	2301      	movls	r3, #1
 8004eb2:	2300      	movhi	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0e7      	b.n	800508e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <HAL_I2C_Init+0x280>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0c9b      	lsrs	r3, r3, #18
 8004ec8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a6a      	ldr	r2, [pc, #424]	; (8005098 <HAL_I2C_Init+0x274>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d802      	bhi.n	8004ef8 <HAL_I2C_Init+0xd4>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	e009      	b.n	8004f0c <HAL_I2C_Init+0xe8>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	4a69      	ldr	r2, [pc, #420]	; (80050a8 <HAL_I2C_Init+0x284>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	495c      	ldr	r1, [pc, #368]	; (8005098 <HAL_I2C_Init+0x274>)
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	d819      	bhi.n	8004f60 <HAL_I2C_Init+0x13c>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e59      	subs	r1, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f40:	400b      	ands	r3, r1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_I2C_Init+0x138>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1e59      	subs	r1, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5a:	e051      	b.n	8005000 <HAL_I2C_Init+0x1dc>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	e04f      	b.n	8005000 <HAL_I2C_Init+0x1dc>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d111      	bne.n	8004f8c <HAL_I2C_Init+0x168>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1e58      	subs	r0, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	440b      	add	r3, r1
 8004f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e012      	b.n	8004fb2 <HAL_I2C_Init+0x18e>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1e58      	subs	r0, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	0099      	lsls	r1, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Init+0x196>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e022      	b.n	8005000 <HAL_I2C_Init+0x1dc>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_I2C_Init+0x1bc>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1e58      	subs	r0, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	440b      	add	r3, r1
 8004fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fde:	e00f      	b.n	8005000 <HAL_I2C_Init+0x1dc>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1e58      	subs	r0, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	0099      	lsls	r1, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	6809      	ldr	r1, [r1, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800502e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6911      	ldr	r1, [r2, #16]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68d2      	ldr	r2, [r2, #12]
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695a      	ldr	r2, [r3, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	000186a0 	.word	0x000186a0
 800509c:	001e847f 	.word	0x001e847f
 80050a0:	003d08ff 	.word	0x003d08ff
 80050a4:	431bde83 	.word	0x431bde83
 80050a8:	10624dd3 	.word	0x10624dd3

080050ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d129      	bne.n	8005116 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0210 	bic.w	r2, r2, #16
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0201 	orr.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b20      	cmp	r3, #32
 800513c:	d12a      	bne.n	8005194 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2224      	movs	r2, #36	; 0x24
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800515e:	89fb      	ldrh	r3, [r7, #14]
 8005160:	f023 030f 	bic.w	r3, r3, #15
 8005164:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	89fb      	ldrh	r3, [r7, #14]
 800516c:	4313      	orrs	r3, r2
 800516e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	89fa      	ldrh	r2, [r7, #14]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005194:	2302      	movs	r3, #2
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e0bf      	b.n	8005336 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc fd64 	bl	8001c98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6899      	ldr	r1, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b4a      	ldr	r3, [pc, #296]	; (8005340 <HAL_LTDC_Init+0x19c>)
 8005218:	400b      	ands	r3, r1
 800521a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68d9      	ldr	r1, [r3, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <HAL_LTDC_Init+0x19c>)
 8005246:	400b      	ands	r3, r1
 8005248:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68d9      	ldr	r1, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6919      	ldr	r1, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b33      	ldr	r3, [pc, #204]	; (8005340 <HAL_LTDC_Init+0x19c>)
 8005274:	400b      	ands	r3, r1
 8005276:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	431a      	orrs	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6959      	ldr	r1, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_LTDC_Init+0x19c>)
 80052a2:	400b      	ands	r3, r1
 80052a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6959      	ldr	r1, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0206 	orr.w	r2, r2, #6
 8005312:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	f000f800 	.word	0xf000f800

08005344 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d023      	beq.n	80053ae <HAL_LTDC_IRQHandler+0x6a>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0204 	bic.w	r2, r2, #4
 800537e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2204      	movs	r2, #4
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800538e:	f043 0201 	orr.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2204      	movs	r2, #4
 800539c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f86f 	bl	800548c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d023      	beq.n	8005400 <HAL_LTDC_IRQHandler+0xbc>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01e      	beq.n	8005400 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0202 	bic.w	r2, r2, #2
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2202      	movs	r2, #2
 80053d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053e0:	f043 0202 	orr.w	r2, r3, #2
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f846 	bl	800548c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01b      	beq.n	8005442 <HAL_LTDC_IRQHandler+0xfe>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2201      	movs	r2, #1
 800542a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f82f 	bl	80054a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <HAL_LTDC_IRQHandler+0x140>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0208 	bic.w	r2, r2, #8
 8005464:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f818 	bl	80054b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_LTDC_ConfigLayer+0x1a>
 80054de:	2302      	movs	r3, #2
 80054e0:	e02c      	b.n	800553c <HAL_LTDC_ConfigLayer+0x74>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2134      	movs	r1, #52	; 0x34
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4614      	mov	r4, r2
 8005506:	461d      	mov	r5, r3
 8005508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800550e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f811 	bl	8005544 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bdb0      	pop	{r4, r5, r7, pc}

08005544 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005560:	4413      	add	r3, r2
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	01db      	lsls	r3, r3, #7
 8005570:	4413      	add	r3, r2
 8005572:	3384      	adds	r3, #132	; 0x84
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	4611      	mov	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	01d2      	lsls	r2, r2, #7
 8005580:	440a      	add	r2, r1
 8005582:	3284      	adds	r2, #132	; 0x84
 8005584:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005588:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800559a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800559c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4619      	mov	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	01db      	lsls	r3, r3, #7
 80055a8:	440b      	add	r3, r1
 80055aa:	3384      	adds	r3, #132	; 0x84
 80055ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c2:	4413      	add	r3, r2
 80055c4:	041b      	lsls	r3, r3, #16
 80055c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3384      	adds	r3, #132	; 0x84
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	4611      	mov	r1, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	01d2      	lsls	r2, r2, #7
 80055e2:	440a      	add	r2, r1
 80055e4:	3284      	adds	r2, #132	; 0x84
 80055e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fa:	4413      	add	r3, r2
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4619      	mov	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	01db      	lsls	r3, r3, #7
 8005608:	440b      	add	r3, r1
 800560a:	3384      	adds	r3, #132	; 0x84
 800560c:	4619      	mov	r1, r3
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4313      	orrs	r3, r2
 8005612:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	01db      	lsls	r3, r3, #7
 800561e:	4413      	add	r3, r2
 8005620:	3384      	adds	r3, #132	; 0x84
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	4611      	mov	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	01d2      	lsls	r2, r2, #7
 800562e:	440a      	add	r2, r1
 8005630:	3284      	adds	r2, #132	; 0x84
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	01db      	lsls	r3, r3, #7
 8005642:	4413      	add	r3, r2
 8005644:	3384      	adds	r3, #132	; 0x84
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	01db      	lsls	r3, r3, #7
 8005674:	4413      	add	r3, r2
 8005676:	3384      	adds	r3, #132	; 0x84
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	4413      	add	r3, r2
 8005686:	3384      	adds	r3, #132	; 0x84
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005694:	461a      	mov	r2, r3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	431a      	orrs	r2, r3
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4619      	mov	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	440b      	add	r3, r1
 80056aa:	3384      	adds	r3, #132	; 0x84
 80056ac:	4619      	mov	r1, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	01db      	lsls	r3, r3, #7
 80056be:	4413      	add	r3, r2
 80056c0:	3384      	adds	r3, #132	; 0x84
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	4611      	mov	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	01d2      	lsls	r2, r2, #7
 80056ce:	440a      	add	r2, r1
 80056d0:	3284      	adds	r2, #132	; 0x84
 80056d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	01db      	lsls	r3, r3, #7
 80056e2:	4413      	add	r3, r2
 80056e4:	3384      	adds	r3, #132	; 0x84
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	01db      	lsls	r3, r3, #7
 80056f8:	4413      	add	r3, r2
 80056fa:	3384      	adds	r3, #132	; 0x84
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	4611      	mov	r1, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	01d2      	lsls	r2, r2, #7
 8005708:	440a      	add	r2, r1
 800570a:	3284      	adds	r2, #132	; 0x84
 800570c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6809      	ldr	r1, [r1, #0]
 8005722:	4608      	mov	r0, r1
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	01c9      	lsls	r1, r1, #7
 8005728:	4401      	add	r1, r0
 800572a:	3184      	adds	r1, #132	; 0x84
 800572c:	4313      	orrs	r3, r2
 800572e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	01db      	lsls	r3, r3, #7
 800573a:	4413      	add	r3, r2
 800573c:	3384      	adds	r3, #132	; 0x84
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	; 0x84
 800574e:	461a      	mov	r2, r3
 8005750:	2300      	movs	r3, #0
 8005752:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4413      	add	r3, r2
 8005760:	3384      	adds	r3, #132	; 0x84
 8005762:	461a      	mov	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005772:	2304      	movs	r3, #4
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e01b      	b.n	80057b0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d102      	bne.n	8005786 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005780:	2303      	movs	r3, #3
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e014      	b.n	80057b0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d00b      	beq.n	80057a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005792:	2b02      	cmp	r3, #2
 8005794:	d007      	beq.n	80057a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800579a:	2b03      	cmp	r3, #3
 800579c:	d003      	beq.n	80057a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057a2:	2b07      	cmp	r3, #7
 80057a4:	d102      	bne.n	80057ac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80057a6:	2302      	movs	r3, #2
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e001      	b.n	80057b0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057ac:	2301      	movs	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	01db      	lsls	r3, r3, #7
 80057ba:	4413      	add	r3, r2
 80057bc:	3384      	adds	r3, #132	; 0x84
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	4611      	mov	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	01d2      	lsls	r2, r2, #7
 80057ca:	440a      	add	r2, r1
 80057cc:	3284      	adds	r2, #132	; 0x84
 80057ce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80057d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1acb      	subs	r3, r1, r3
 80057ea:	69f9      	ldr	r1, [r7, #28]
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	6809      	ldr	r1, [r1, #0]
 80057f6:	4608      	mov	r0, r1
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	01c9      	lsls	r1, r1, #7
 80057fc:	4401      	add	r1, r0
 80057fe:	3184      	adds	r1, #132	; 0x84
 8005800:	4313      	orrs	r3, r2
 8005802:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	01db      	lsls	r3, r3, #7
 800580e:	4413      	add	r3, r2
 8005810:	3384      	adds	r3, #132	; 0x84
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	4611      	mov	r1, r2
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	01d2      	lsls	r2, r2, #7
 800581e:	440a      	add	r2, r1
 8005820:	3284      	adds	r2, #132	; 0x84
 8005822:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005826:	f023 0307 	bic.w	r3, r3, #7
 800582a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	01db      	lsls	r3, r3, #7
 8005836:	4413      	add	r3, r2
 8005838:	3384      	adds	r3, #132	; 0x84
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	4413      	add	r3, r2
 800584e:	3384      	adds	r3, #132	; 0x84
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4611      	mov	r1, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	01d2      	lsls	r2, r2, #7
 800585c:	440a      	add	r2, r1
 800585e:	3284      	adds	r2, #132	; 0x84
 8005860:	f043 0301 	orr.w	r3, r3, #1
 8005864:	6013      	str	r3, [r2, #0]
}
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	; 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e267      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d075      	beq.n	800597e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005892:	4b88      	ldr	r3, [pc, #544]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	2b04      	cmp	r3, #4
 800589c:	d00c      	beq.n	80058b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800589e:	4b85      	ldr	r3, [pc, #532]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d112      	bne.n	80058d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058aa:	4b82      	ldr	r3, [pc, #520]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058b6:	d10b      	bne.n	80058d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	4b7e      	ldr	r3, [pc, #504]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05b      	beq.n	800597c <HAL_RCC_OscConfig+0x108>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d157      	bne.n	800597c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e242      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d8:	d106      	bne.n	80058e8 <HAL_RCC_OscConfig+0x74>
 80058da:	4b76      	ldr	r3, [pc, #472]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a75      	ldr	r2, [pc, #468]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e01d      	b.n	8005924 <HAL_RCC_OscConfig+0xb0>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f0:	d10c      	bne.n	800590c <HAL_RCC_OscConfig+0x98>
 80058f2:	4b70      	ldr	r3, [pc, #448]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a6f      	ldr	r2, [pc, #444]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	4b6d      	ldr	r3, [pc, #436]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6c      	ldr	r2, [pc, #432]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e00b      	b.n	8005924 <HAL_RCC_OscConfig+0xb0>
 800590c:	4b69      	ldr	r3, [pc, #420]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a68      	ldr	r2, [pc, #416]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b66      	ldr	r3, [pc, #408]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a65      	ldr	r2, [pc, #404]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800591e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d013      	beq.n	8005954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592c:	f7fc fe70 	bl	8002610 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005934:	f7fc fe6c 	bl	8002610 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b64      	cmp	r3, #100	; 0x64
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e207      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0xc0>
 8005952:	e014      	b.n	800597e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fc fe5c 	bl	8002610 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595c:	f7fc fe58 	bl	8002610 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1f3      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800596e:	4b51      	ldr	r3, [pc, #324]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0xe8>
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800597c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d063      	beq.n	8005a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800598a:	4b4a      	ldr	r3, [pc, #296]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005996:	4b47      	ldr	r3, [pc, #284]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d11c      	bne.n	80059dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059a2:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d116      	bne.n	80059dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_RCC_OscConfig+0x152>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e1c7      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c6:	4b3b      	ldr	r3, [pc, #236]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4937      	ldr	r1, [pc, #220]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	e03a      	b.n	8005a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059e4:	4b34      	ldr	r3, [pc, #208]	; (8005ab8 <HAL_RCC_OscConfig+0x244>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ea:	f7fc fe11 	bl	8002610 <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fc fe0d 	bl	8002610 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1a8      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a04:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0f0      	beq.n	80059f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4925      	ldr	r1, [pc, #148]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
 8005a24:	e015      	b.n	8005a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <HAL_RCC_OscConfig+0x244>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2c:	f7fc fdf0 	bl	8002610 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a34:	f7fc fdec 	bl	8002610 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e187      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a46:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d036      	beq.n	8005acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a66:	4b15      	ldr	r3, [pc, #84]	; (8005abc <HAL_RCC_OscConfig+0x248>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc fdd0 	bl	8002610 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fc fdcc 	bl	8002610 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e167      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <HAL_RCC_OscConfig+0x240>)
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x200>
 8005a92:	e01b      	b.n	8005acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_OscConfig+0x248>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fc fdb9 	bl	8002610 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa0:	e00e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa2:	f7fc fdb5 	bl	8002610 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d907      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e150      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	42470000 	.word	0x42470000
 8005abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac0:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ea      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8097 	beq.w	8005c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ade:	4b81      	ldr	r3, [pc, #516]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10f      	bne.n	8005b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	4b7d      	ldr	r3, [pc, #500]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4a7c      	ldr	r2, [pc, #496]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af8:	6413      	str	r3, [r2, #64]	; 0x40
 8005afa:	4b7a      	ldr	r3, [pc, #488]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0a:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d118      	bne.n	8005b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b16:	4b74      	ldr	r3, [pc, #464]	; (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a73      	ldr	r2, [pc, #460]	; (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b22:	f7fc fd75 	bl	8002610 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fc fd71 	bl	8002610 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e10c      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3c:	4b6a      	ldr	r3, [pc, #424]	; (8005ce8 <HAL_RCC_OscConfig+0x474>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCC_OscConfig+0x2ea>
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a63      	ldr	r2, [pc, #396]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5c:	e01c      	b.n	8005b98 <HAL_RCC_OscConfig+0x324>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x30c>
 8005b66:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	4a5e      	ldr	r2, [pc, #376]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	6713      	str	r3, [r2, #112]	; 0x70
 8005b72:	4b5c      	ldr	r3, [pc, #368]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a5b      	ldr	r2, [pc, #364]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7e:	e00b      	b.n	8005b98 <HAL_RCC_OscConfig+0x324>
 8005b80:	4b58      	ldr	r3, [pc, #352]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4a57      	ldr	r2, [pc, #348]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8c:	4b55      	ldr	r3, [pc, #340]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a54      	ldr	r2, [pc, #336]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005b92:	f023 0304 	bic.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fc fd36 	bl	8002610 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fc fd32 	bl	8002610 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e0cb      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbe:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ee      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x334>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bcc:	f7fc fd20 	bl	8002610 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fc fd1c 	bl	8002610 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e0b5      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bea:	4b3e      	ldr	r3, [pc, #248]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ee      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a1 	beq.w	8005d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d05c      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d141      	bne.n	8005caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c26:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_RCC_OscConfig+0x478>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fc fcf0 	bl	8002610 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fc fcec 	bl	8002610 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e087      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c46:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	491b      	ldr	r1, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_RCC_OscConfig+0x478>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c82:	f7fc fcc5 	bl	8002610 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8a:	f7fc fcc1 	bl	8002610 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e05c      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x416>
 8005ca8:	e054      	b.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <HAL_RCC_OscConfig+0x478>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fc fcae 	bl	8002610 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fc fcaa 	bl	8002610 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e045      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cca:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x444>
 8005cd6:	e03d      	b.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e038      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40007000 	.word	0x40007000
 8005cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HAL_RCC_OscConfig+0x4ec>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d028      	beq.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d121      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d11a      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d111      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800

08005d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0cc      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d78:	4b68      	ldr	r3, [pc, #416]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d90c      	bls.n	8005da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d86:	4b65      	ldr	r3, [pc, #404]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8e:	4b63      	ldr	r3, [pc, #396]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0b8      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d020      	beq.n	8005dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db8:	4b59      	ldr	r3, [pc, #356]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4a58      	ldr	r2, [pc, #352]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd0:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a52      	ldr	r2, [pc, #328]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b50      	ldr	r3, [pc, #320]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	494d      	ldr	r1, [pc, #308]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d044      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b47      	ldr	r3, [pc, #284]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d119      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e07f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d003      	beq.n	8005e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d107      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e22:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e06f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e32:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e067      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 0203 	bic.w	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4934      	ldr	r1, [pc, #208]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e54:	f7fc fbdc 	bl	8002610 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fc fbd8 	bl	8002610 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04f      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 020c 	and.w	r2, r3, #12
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1eb      	bne.n	8005e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d20c      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b20      	ldr	r3, [pc, #128]	; (8005f1c <HAL_RCC_ClockConfig+0x1b8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e032      	b.n	8005f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4916      	ldr	r1, [pc, #88]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	490e      	ldr	r1, [pc, #56]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eea:	f000 f821 	bl	8005f30 <HAL_RCC_GetSysClockFreq>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	490a      	ldr	r1, [pc, #40]	; (8005f24 <HAL_RCC_ClockConfig+0x1c0>)
 8005efc:	5ccb      	ldrb	r3, [r1, r3]
 8005efe:	fa22 f303 	lsr.w	r3, r2, r3
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <HAL_RCC_ClockConfig+0x1c4>)
 8005f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <HAL_RCC_ClockConfig+0x1c8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fc f99a 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40023c00 	.word	0x40023c00
 8005f20:	40023800 	.word	0x40023800
 8005f24:	0800ca2c 	.word	0x0800ca2c
 8005f28:	20000004 	.word	0x20000004
 8005f2c:	20000008 	.word	0x20000008

08005f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f34:	b094      	sub	sp, #80	; 0x50
 8005f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f40:	2300      	movs	r3, #0
 8005f42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f48:	4b79      	ldr	r3, [pc, #484]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d00d      	beq.n	8005f70 <HAL_RCC_GetSysClockFreq+0x40>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	f200 80e1 	bhi.w	800611c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_GetSysClockFreq+0x34>
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d003      	beq.n	8005f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005f62:	e0db      	b.n	800611c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f64:	4b73      	ldr	r3, [pc, #460]	; (8006134 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f68:	e0db      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f6a:	4b73      	ldr	r3, [pc, #460]	; (8006138 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f6e:	e0d8      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f70:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f7a:	4b6d      	ldr	r3, [pc, #436]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d063      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f86:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f04f 0000 	mov.w	r0, #0
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	0159      	lsls	r1, r3, #5
 8005fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fb4:	0150      	lsls	r0, r2, #5
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4621      	mov	r1, r4
 8005fbc:	1a51      	subs	r1, r2, r1
 8005fbe:	6139      	str	r1, [r7, #16]
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	018b      	lsls	r3, r1, #6
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fde:	4651      	mov	r1, sl
 8005fe0:	018a      	lsls	r2, r1, #6
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe8:	4659      	mov	r1, fp
 8005fea:	eb63 0901 	sbc.w	r9, r3, r1
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006002:	4690      	mov	r8, r2
 8006004:	4699      	mov	r9, r3
 8006006:	4623      	mov	r3, r4
 8006008:	eb18 0303 	adds.w	r3, r8, r3
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	462b      	mov	r3, r5
 8006010:	eb49 0303 	adc.w	r3, r9, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006022:	4629      	mov	r1, r5
 8006024:	024b      	lsls	r3, r1, #9
 8006026:	4621      	mov	r1, r4
 8006028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800602c:	4621      	mov	r1, r4
 800602e:	024a      	lsls	r2, r1, #9
 8006030:	4610      	mov	r0, r2
 8006032:	4619      	mov	r1, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006036:	2200      	movs	r2, #0
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
 800603a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800603c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006040:	f7fa f926 	bl	8000290 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800604c:	e058      	b.n	8006100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800604e:	4b38      	ldr	r3, [pc, #224]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	2200      	movs	r2, #0
 8006056:	4618      	mov	r0, r3
 8006058:	4611      	mov	r1, r2
 800605a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
 8006064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	f04f 0000 	mov.w	r0, #0
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	0159      	lsls	r1, r3, #5
 8006076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800607a:	0150      	lsls	r0, r2, #5
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4641      	mov	r1, r8
 8006082:	ebb2 0a01 	subs.w	sl, r2, r1
 8006086:	4649      	mov	r1, r9
 8006088:	eb63 0b01 	sbc.w	fp, r3, r1
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800609c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060a0:	ebb2 040a 	subs.w	r4, r2, sl
 80060a4:	eb63 050b 	sbc.w	r5, r3, fp
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	00eb      	lsls	r3, r5, #3
 80060b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060b6:	00e2      	lsls	r2, r4, #3
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	4643      	mov	r3, r8
 80060be:	18e3      	adds	r3, r4, r3
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	464b      	mov	r3, r9
 80060c4:	eb45 0303 	adc.w	r3, r5, r3
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060d6:	4629      	mov	r1, r5
 80060d8:	028b      	lsls	r3, r1, #10
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060e0:	4621      	mov	r1, r4
 80060e2:	028a      	lsls	r2, r1, #10
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ea:	2200      	movs	r2, #0
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	61fa      	str	r2, [r7, #28]
 80060f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f4:	f7fa f8cc 	bl	8000290 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4613      	mov	r3, r2
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_RCC_GetSysClockFreq+0x200>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	0c1b      	lsrs	r3, r3, #16
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	3301      	adds	r3, #1
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006114:	fbb2 f3f3 	udiv	r3, r2, r3
 8006118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800611a:	e002      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <HAL_RCC_GetSysClockFreq+0x204>)
 800611e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006124:	4618      	mov	r0, r3
 8006126:	3750      	adds	r7, #80	; 0x50
 8006128:	46bd      	mov	sp, r7
 800612a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612e:	bf00      	nop
 8006130:	40023800 	.word	0x40023800
 8006134:	00f42400 	.word	0x00f42400
 8006138:	007a1200 	.word	0x007a1200

0800613c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <HAL_RCC_GetHCLKFreq+0x14>)
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000004 	.word	0x20000004

08006154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006158:	f7ff fff0 	bl	800613c <HAL_RCC_GetHCLKFreq>
 800615c:	4602      	mov	r2, r0
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	0a9b      	lsrs	r3, r3, #10
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	4903      	ldr	r1, [pc, #12]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800616a:	5ccb      	ldrb	r3, [r1, r3]
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40023800 	.word	0x40023800
 8006178:	0800ca3c 	.word	0x0800ca3c

0800617c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006180:	f7ff ffdc 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8006184:	4602      	mov	r2, r0
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0b5b      	lsrs	r3, r3, #13
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	4903      	ldr	r1, [pc, #12]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006192:	5ccb      	ldrb	r3, [r1, r3]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	0800ca3c 	.word	0x0800ca3c

080061a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	220f      	movs	r2, #15
 80061b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0203 	and.w	r2, r3, #3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061cc:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <HAL_RCC_GetClockConfig+0x5c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <HAL_RCC_GetClockConfig+0x60>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800
 8006204:	40023c00 	.word	0x40023c00

08006208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10b      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006238:	2b00      	cmp	r3, #0
 800623a:	d075      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800623c:	4b91      	ldr	r3, [pc, #580]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006242:	f7fc f9e5 	bl	8002610 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006248:	e008      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800624a:	f7fc f9e1 	bl	8002610 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e189      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800625c:	4b8a      	ldr	r3, [pc, #552]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f0      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	019a      	lsls	r2, r3, #6
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	071b      	lsls	r3, r3, #28
 8006280:	4981      	ldr	r1, [pc, #516]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006294:	4b7c      	ldr	r3, [pc, #496]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	0f1b      	lsrs	r3, r3, #28
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	019a      	lsls	r2, r3, #6
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	431a      	orrs	r2, r3
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	071b      	lsls	r3, r3, #28
 80062b4:	4974      	ldr	r1, [pc, #464]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062bc:	4b72      	ldr	r3, [pc, #456]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c2:	f023 021f 	bic.w	r2, r3, #31
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	496e      	ldr	r1, [pc, #440]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	019a      	lsls	r2, r3, #6
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	071b      	lsls	r3, r3, #28
 80062f4:	4964      	ldr	r1, [pc, #400]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062fc:	4b61      	ldr	r3, [pc, #388]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006302:	f7fc f985 	bl	8002610 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006308:	e008      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800630a:	f7fc f981 	bl	8002610 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e129      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800631c:	4b5a      	ldr	r3, [pc, #360]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800633c:	2b00      	cmp	r3, #0
 800633e:	d079      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006340:	4b52      	ldr	r3, [pc, #328]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006346:	f7fc f963 	bl	8002610 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800634e:	f7fc f95f 	bl	8002610 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e107      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006360:	4b49      	ldr	r3, [pc, #292]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636c:	d0ef      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	d020      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800637a:	4b43      	ldr	r3, [pc, #268]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	0f1b      	lsrs	r3, r3, #28
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	019a      	lsls	r2, r3, #6
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	431a      	orrs	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	071b      	lsls	r3, r3, #28
 800639a:	493b      	ldr	r1, [pc, #236]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063a2:	4b39      	ldr	r3, [pc, #228]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	4934      	ldr	r1, [pc, #208]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01e      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063c8:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	0e1b      	lsrs	r3, r3, #24
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	019a      	lsls	r2, r3, #6
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	061b      	lsls	r3, r3, #24
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	071b      	lsls	r3, r3, #28
 80063e8:	4927      	ldr	r1, [pc, #156]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	4922      	ldr	r1, [pc, #136]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006406:	4b21      	ldr	r3, [pc, #132]	; (800648c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800640c:	f7fc f900 	bl	8002610 <HAL_GetTick>
 8006410:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006414:	f7fc f8fc 	bl	8002610 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0a4      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006432:	d1ef      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 808b 	beq.w	8006558 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	4a0f      	ldr	r2, [pc, #60]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006450:	6413      	str	r3, [r2, #64]	; 0x40
 8006452:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a0b      	ldr	r2, [pc, #44]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006468:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800646a:	f7fc f8d1 	bl	8002610 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006470:	e010      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006472:	f7fc f8cd 	bl	8002610 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d909      	bls.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e075      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006484:	42470068 	.word	0x42470068
 8006488:	40023800 	.word	0x40023800
 800648c:	42470070 	.word	0x42470070
 8006490:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006494:	4b38      	ldr	r3, [pc, #224]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0e8      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064a0:	4b36      	ldr	r3, [pc, #216]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d02f      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d028      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064be:	4b2f      	ldr	r3, [pc, #188]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064ce:	4b2c      	ldr	r3, [pc, #176]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064d4:	4a29      	ldr	r2, [pc, #164]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064da:	4b28      	ldr	r3, [pc, #160]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d114      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064e6:	f7fc f893 	bl	8002610 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ec:	e00a      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ee:	f7fc f88f 	bl	8002610 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d901      	bls.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e035      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006504:	4b1d      	ldr	r3, [pc, #116]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0ee      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800651c:	d10d      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800651e:	4b17      	ldr	r3, [pc, #92]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800652e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006532:	4912      	ldr	r1, [pc, #72]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006534:	4313      	orrs	r3, r2
 8006536:	608b      	str	r3, [r1, #8]
 8006538:	e005      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	4a0f      	ldr	r2, [pc, #60]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006540:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006544:	6093      	str	r3, [r2, #8]
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006552:	490a      	ldr	r1, [pc, #40]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006554:	4313      	orrs	r3, r2
 8006556:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800656c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40007000 	.word	0x40007000
 800657c:	40023800 	.word	0x40023800
 8006580:	42470e40 	.word	0x42470e40
 8006584:	424711e0 	.word	0x424711e0

08006588 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e025      	b.n	80065e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fb fe3d 	bl	8002230 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f001 f97f 	bl	80078cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	461a      	mov	r2, r3
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	f001 f9d4 	bl	8007986 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e07b      	b.n	80066fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006612:	d009      	beq.n	8006628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
 800661a:	e005      	b.n	8006628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb fc58 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ac:	ea42 0103 	orr.w	r1, r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	f003 0104 	and.w	r1, r3, #4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	f003 0210 	and.w	r2, r3, #16
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e041      	b.n	8006798 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d106      	bne.n	800672e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7fb fc2d 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3304      	adds	r3, #4
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fa95 	bl	8006c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d001      	beq.n	80067b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e04e      	b.n	8006856 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a23      	ldr	r2, [pc, #140]	; (8006864 <HAL_TIM_Base_Start_IT+0xc4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d022      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d01d      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <HAL_TIM_Base_Start_IT+0xc8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d018      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1e      	ldr	r2, [pc, #120]	; (800686c <HAL_TIM_Base_Start_IT+0xcc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1c      	ldr	r2, [pc, #112]	; (8006870 <HAL_TIM_Base_Start_IT+0xd0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00e      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <HAL_TIM_Base_Start_IT+0xd4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d009      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a19      	ldr	r2, [pc, #100]	; (8006878 <HAL_TIM_Base_Start_IT+0xd8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d004      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0x80>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a18      	ldr	r2, [pc, #96]	; (800687c <HAL_TIM_Base_Start_IT+0xdc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d111      	bne.n	8006844 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b06      	cmp	r3, #6
 8006830:	d010      	beq.n	8006854 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006842:	e007      	b.n	8006854 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40010000 	.word	0x40010000
 8006868:	40000400 	.word	0x40000400
 800686c:	40000800 	.word	0x40000800
 8006870:	40000c00 	.word	0x40000c00
 8006874:	40010400 	.word	0x40010400
 8006878:	40014000 	.word	0x40014000
 800687c:	40001800 	.word	0x40001800

08006880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b02      	cmp	r3, #2
 8006894:	d122      	bne.n	80068dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d11b      	bne.n	80068dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f06f 0202 	mvn.w	r2, #2
 80068ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9b5 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 80068c8:	e005      	b.n	80068d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9a7 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9b8 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d122      	bne.n	8006930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d11b      	bne.n	8006930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0204 	mvn.w	r2, #4
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2202      	movs	r2, #2
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f98b 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f97d 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f98e 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b08      	cmp	r3, #8
 800693c:	d122      	bne.n	8006984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d11b      	bne.n	8006984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0208 	mvn.w	r2, #8
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2204      	movs	r2, #4
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f961 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f953 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f964 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	2b10      	cmp	r3, #16
 8006990:	d122      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b10      	cmp	r3, #16
 800699e:	d11b      	bne.n	80069d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0210 	mvn.w	r2, #16
 80069a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2208      	movs	r2, #8
 80069ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f937 	bl	8006c32 <HAL_TIM_IC_CaptureCallback>
 80069c4:	e005      	b.n	80069d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f929 	bl	8006c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f93a 	bl	8006c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10e      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d107      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f06f 0201 	mvn.w	r2, #1
 80069fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fa3e 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b80      	cmp	r3, #128	; 0x80
 8006a10:	d10e      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1c:	2b80      	cmp	r3, #128	; 0x80
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fae0 	bl	8006ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d10e      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d107      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f8ff 	bl	8006c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0220 	mvn.w	r2, #32
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 faaa 	bl	8006fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_TIM_ConfigClockSource+0x1c>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e0b4      	b.n	8006c16 <HAL_TIM_ConfigClockSource+0x186>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae4:	d03e      	beq.n	8006b64 <HAL_TIM_ConfigClockSource+0xd4>
 8006ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aea:	f200 8087 	bhi.w	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	f000 8086 	beq.w	8006c02 <HAL_TIM_ConfigClockSource+0x172>
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afa:	d87f      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b70      	cmp	r3, #112	; 0x70
 8006afe:	d01a      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0xa6>
 8006b00:	2b70      	cmp	r3, #112	; 0x70
 8006b02:	d87b      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d050      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0x11a>
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d877      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b50      	cmp	r3, #80	; 0x50
 8006b0e:	d03c      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0xfa>
 8006b10:	2b50      	cmp	r3, #80	; 0x50
 8006b12:	d873      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d058      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0x13a>
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d86f      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b1c:	2b30      	cmp	r3, #48	; 0x30
 8006b1e:	d064      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15a>
 8006b20:	2b30      	cmp	r3, #48	; 0x30
 8006b22:	d86b      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d060      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15a>
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d867      	bhi.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05c      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15a>
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d05a      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0x15a>
 8006b34:	e062      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6899      	ldr	r1, [r3, #8]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f000 f9ad 	bl	8006ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	609a      	str	r2, [r3, #8]
      break;
 8006b62:	e04f      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6899      	ldr	r1, [r3, #8]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f000 f996 	bl	8006ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b86:	609a      	str	r2, [r3, #8]
      break;
 8006b88:	e03c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6859      	ldr	r1, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f000 f90a 	bl	8006db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2150      	movs	r1, #80	; 0x50
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 f963 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006ba8:	e02c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f000 f929 	bl	8006e0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2160      	movs	r1, #96	; 0x60
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 f953 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bc8:	e01c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6859      	ldr	r1, [r3, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 f8ea 	bl	8006db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f943 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006be8:	e00c      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 f93a 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006bfa:	e003      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006c00:	e000      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
	...

08006c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3d      	ldr	r2, [pc, #244]	; (8006d88 <TIM_Base_SetConfig+0x118>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3c      	ldr	r2, [pc, #240]	; (8006d8c <TIM_Base_SetConfig+0x11c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3b      	ldr	r2, [pc, #236]	; (8006d90 <TIM_Base_SetConfig+0x120>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3a      	ldr	r2, [pc, #232]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d108      	bne.n	8006cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2f      	ldr	r2, [pc, #188]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d02b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d027      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <TIM_Base_SetConfig+0x118>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d023      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <TIM_Base_SetConfig+0x11c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01f      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2a      	ldr	r2, [pc, #168]	; (8006d90 <TIM_Base_SetConfig+0x120>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a29      	ldr	r2, [pc, #164]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a28      	ldr	r2, [pc, #160]	; (8006d98 <TIM_Base_SetConfig+0x128>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a27      	ldr	r2, [pc, #156]	; (8006d9c <TIM_Base_SetConfig+0x12c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <TIM_Base_SetConfig+0x130>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <TIM_Base_SetConfig+0x134>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a24      	ldr	r2, [pc, #144]	; (8006da8 <TIM_Base_SetConfig+0x138>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <TIM_Base_SetConfig+0x13c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	; (8006d84 <TIM_Base_SetConfig+0x114>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0xf8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <TIM_Base_SetConfig+0x124>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800
 8006da4:	40001800 	.word	0x40001800
 8006da8:	40001c00 	.word	0x40001c00
 8006dac:	40002000 	.word	0x40002000

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0210 	bic.w	r2, r3, #16
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	e05a      	b.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d022      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f48:	d01d      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d018      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a18      	ldr	r2, [pc, #96]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a15      	ldr	r2, [pc, #84]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d10c      	bne.n	8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800
 8006fcc:	40000c00 	.word	0x40000c00
 8006fd0:	40010400 	.word	0x40010400
 8006fd4:	40014000 	.word	0x40014000
 8006fd8:	40001800 	.word	0x40001800

08006fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e03f      	b.n	8007096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa ffce 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2224      	movs	r2, #36	; 0x24
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9cb 	bl	80073e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691a      	ldr	r2, [r3, #16]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800705c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800706c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800707c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b08a      	sub	sp, #40	; 0x28
 80070a2:	af02      	add	r7, sp, #8
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	603b      	str	r3, [r7, #0]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d17c      	bne.n	80071b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <HAL_UART_Transmit+0x2c>
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e075      	b.n	80071ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Transmit+0x3e>
 80070d8:	2302      	movs	r3, #2
 80070da:	e06e      	b.n	80071ba <HAL_UART_Transmit+0x11c>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2221      	movs	r2, #33	; 0x21
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f2:	f7fb fa8d 	bl	8002610 <HAL_GetTick>
 80070f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d108      	bne.n	8007120 <HAL_UART_Transmit+0x82>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	e003      	b.n	8007128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007130:	e02a      	b.n	8007188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	2180      	movs	r1, #128	; 0x80
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f8e2 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e036      	b.n	80071ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	3302      	adds	r3, #2
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e007      	b.n	800717a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	3301      	adds	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1cf      	bne.n	8007132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2200      	movs	r2, #0
 800719a:	2140      	movs	r1, #64	; 0x40
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f8b2 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	e000      	b.n	80071ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
  }
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b08a      	sub	sp, #40	; 0x28
 80071c6:	af02      	add	r7, sp, #8
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b20      	cmp	r3, #32
 80071e0:	f040 808c 	bne.w	80072fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_UART_Receive+0x2e>
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e084      	b.n	80072fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_UART_Receive+0x40>
 80071fe:	2302      	movs	r3, #2
 8007200:	e07d      	b.n	80072fe <HAL_UART_Receive+0x13c>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2222      	movs	r2, #34	; 0x22
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800721e:	f7fb f9f7 	bl	8002610 <HAL_GetTick>
 8007222:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	88fa      	ldrh	r2, [r7, #6]
 800722e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d108      	bne.n	800724c <HAL_UART_Receive+0x8a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e003      	b.n	8007254 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800725c:	e043      	b.n	80072e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	2120      	movs	r1, #32
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f84c 	bl	8007306 <UART_WaitOnFlagUntilTimeout>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e042      	b.n	80072fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10c      	bne.n	8007298 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	b29b      	uxth	r3, r3
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	b29a      	uxth	r2, r3
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	3302      	adds	r3, #2
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e01f      	b.n	80072d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a0:	d007      	beq.n	80072b2 <HAL_UART_Receive+0xf0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <HAL_UART_Receive+0xfe>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e008      	b.n	80072d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	3301      	adds	r3, #1
 80072d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1b6      	bne.n	800725e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e000      	b.n	80072fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
  }
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b090      	sub	sp, #64	; 0x40
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007316:	e050      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d04c      	beq.n	80073ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0x30>
 8007326:	f7fb f973 	bl	8002610 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007332:	429a      	cmp	r2, r3
 8007334:	d241      	bcs.n	80073ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007356:	637a      	str	r2, [r7, #52]	; 0x34
 8007358:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800735c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e5      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3314      	adds	r3, #20
 8007370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	613b      	str	r3, [r7, #16]
   return(result);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800738a:	623a      	str	r2, [r7, #32]
 800738c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	69f9      	ldr	r1, [r7, #28]
 8007390:	6a3a      	ldr	r2, [r7, #32]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	61bb      	str	r3, [r7, #24]
   return(result);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e00f      	b.n	80073da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4013      	ands	r3, r2
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	bf0c      	ite	eq
 80073ca:	2301      	moveq	r3, #1
 80073cc:	2300      	movne	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d09f      	beq.n	8007318 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3740      	adds	r7, #64	; 0x40
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e8:	b0c0      	sub	sp, #256	; 0x100
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	68d9      	ldr	r1, [r3, #12]
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	ea40 0301 	orr.w	r3, r0, r1
 800740c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	431a      	orrs	r2, r3
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	431a      	orrs	r2, r3
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800743c:	f021 010c 	bic.w	r1, r1, #12
 8007440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800744a:	430b      	orrs	r3, r1
 800744c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800745a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745e:	6999      	ldr	r1, [r3, #24]
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	ea40 0301 	orr.w	r3, r0, r1
 800746a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	4b8f      	ldr	r3, [pc, #572]	; (80076b0 <UART_SetConfig+0x2cc>)
 8007474:	429a      	cmp	r2, r3
 8007476:	d005      	beq.n	8007484 <UART_SetConfig+0xa0>
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b8d      	ldr	r3, [pc, #564]	; (80076b4 <UART_SetConfig+0x2d0>)
 8007480:	429a      	cmp	r2, r3
 8007482:	d104      	bne.n	800748e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007484:	f7fe fe7a 	bl	800617c <HAL_RCC_GetPCLK2Freq>
 8007488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800748c:	e003      	b.n	8007496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800748e:	f7fe fe61 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8007492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a0:	f040 810c 	bne.w	80076bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	1891      	adds	r1, r2, r2
 80074bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80074be:	415b      	adcs	r3, r3
 80074c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074c6:	4621      	mov	r1, r4
 80074c8:	eb12 0801 	adds.w	r8, r2, r1
 80074cc:	4629      	mov	r1, r5
 80074ce:	eb43 0901 	adc.w	r9, r3, r1
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074e6:	4690      	mov	r8, r2
 80074e8:	4699      	mov	r9, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	eb18 0303 	adds.w	r3, r8, r3
 80074f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074f4:	462b      	mov	r3, r5
 80074f6:	eb49 0303 	adc.w	r3, r9, r3
 80074fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800750a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800750e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007512:	460b      	mov	r3, r1
 8007514:	18db      	adds	r3, r3, r3
 8007516:	653b      	str	r3, [r7, #80]	; 0x50
 8007518:	4613      	mov	r3, r2
 800751a:	eb42 0303 	adc.w	r3, r2, r3
 800751e:	657b      	str	r3, [r7, #84]	; 0x54
 8007520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007528:	f7f8 feb2 	bl	8000290 <__aeabi_uldivmod>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4b61      	ldr	r3, [pc, #388]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007532:	fba3 2302 	umull	r2, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	011c      	lsls	r4, r3, #4
 800753a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800753e:	2200      	movs	r2, #0
 8007540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800754c:	4642      	mov	r2, r8
 800754e:	464b      	mov	r3, r9
 8007550:	1891      	adds	r1, r2, r2
 8007552:	64b9      	str	r1, [r7, #72]	; 0x48
 8007554:	415b      	adcs	r3, r3
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800755c:	4641      	mov	r1, r8
 800755e:	eb12 0a01 	adds.w	sl, r2, r1
 8007562:	4649      	mov	r1, r9
 8007564:	eb43 0b01 	adc.w	fp, r3, r1
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800757c:	4692      	mov	sl, r2
 800757e:	469b      	mov	fp, r3
 8007580:	4643      	mov	r3, r8
 8007582:	eb1a 0303 	adds.w	r3, sl, r3
 8007586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800758a:	464b      	mov	r3, r9
 800758c:	eb4b 0303 	adc.w	r3, fp, r3
 8007590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075a8:	460b      	mov	r3, r1
 80075aa:	18db      	adds	r3, r3, r3
 80075ac:	643b      	str	r3, [r7, #64]	; 0x40
 80075ae:	4613      	mov	r3, r2
 80075b0:	eb42 0303 	adc.w	r3, r2, r3
 80075b4:	647b      	str	r3, [r7, #68]	; 0x44
 80075b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075be:	f7f8 fe67 	bl	8000290 <__aeabi_uldivmod>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	4b3b      	ldr	r3, [pc, #236]	; (80076b8 <UART_SetConfig+0x2d4>)
 80075ca:	fba3 2301 	umull	r2, r3, r3, r1
 80075ce:	095b      	lsrs	r3, r3, #5
 80075d0:	2264      	movs	r2, #100	; 0x64
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	1acb      	subs	r3, r1, r3
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075de:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <UART_SetConfig+0x2d4>)
 80075e0:	fba3 2302 	umull	r2, r3, r3, r2
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075ec:	441c      	add	r4, r3
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	63b9      	str	r1, [r7, #56]	; 0x38
 8007608:	415b      	adcs	r3, r3
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800760c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6339      	str	r1, [r7, #48]	; 0x30
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007644:	464b      	mov	r3, r9
 8007646:	460a      	mov	r2, r1
 8007648:	eb42 0303 	adc.w	r3, r2, r3
 800764c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800765c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007664:	460b      	mov	r3, r1
 8007666:	18db      	adds	r3, r3, r3
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
 800766a:	4613      	mov	r3, r2
 800766c:	eb42 0303 	adc.w	r3, r2, r3
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800767a:	f7f8 fe09 	bl	8000290 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007684:	fba3 1302 	umull	r1, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	2164      	movs	r1, #100	; 0x64
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	3332      	adds	r3, #50	; 0x32
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <UART_SetConfig+0x2d4>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f003 0207 	and.w	r2, r3, #7
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4422      	add	r2, r4
 80076aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076ac:	e105      	b.n	80078ba <UART_SetConfig+0x4d6>
 80076ae:	bf00      	nop
 80076b0:	40011000 	.word	0x40011000
 80076b4:	40011400 	.word	0x40011400
 80076b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076ce:	4642      	mov	r2, r8
 80076d0:	464b      	mov	r3, r9
 80076d2:	1891      	adds	r1, r2, r2
 80076d4:	6239      	str	r1, [r7, #32]
 80076d6:	415b      	adcs	r3, r3
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
 80076da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076de:	4641      	mov	r1, r8
 80076e0:	1854      	adds	r4, r2, r1
 80076e2:	4649      	mov	r1, r9
 80076e4:	eb43 0501 	adc.w	r5, r3, r1
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	00eb      	lsls	r3, r5, #3
 80076f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076f6:	00e2      	lsls	r2, r4, #3
 80076f8:	4614      	mov	r4, r2
 80076fa:	461d      	mov	r5, r3
 80076fc:	4643      	mov	r3, r8
 80076fe:	18e3      	adds	r3, r4, r3
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007704:	464b      	mov	r3, r9
 8007706:	eb45 0303 	adc.w	r3, r5, r3
 800770a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800771a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800772a:	4629      	mov	r1, r5
 800772c:	008b      	lsls	r3, r1, #2
 800772e:	4621      	mov	r1, r4
 8007730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007734:	4621      	mov	r1, r4
 8007736:	008a      	lsls	r2, r1, #2
 8007738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800773c:	f7f8 fda8 	bl	8000290 <__aeabi_uldivmod>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4b60      	ldr	r3, [pc, #384]	; (80078c8 <UART_SetConfig+0x4e4>)
 8007746:	fba3 2302 	umull	r2, r3, r3, r2
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	011c      	lsls	r4, r3, #4
 800774e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007752:	2200      	movs	r2, #0
 8007754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800775c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	1891      	adds	r1, r2, r2
 8007766:	61b9      	str	r1, [r7, #24]
 8007768:	415b      	adcs	r3, r3
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007770:	4641      	mov	r1, r8
 8007772:	1851      	adds	r1, r2, r1
 8007774:	6139      	str	r1, [r7, #16]
 8007776:	4649      	mov	r1, r9
 8007778:	414b      	adcs	r3, r1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007788:	4659      	mov	r1, fp
 800778a:	00cb      	lsls	r3, r1, #3
 800778c:	4651      	mov	r1, sl
 800778e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007792:	4651      	mov	r1, sl
 8007794:	00ca      	lsls	r2, r1, #3
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	4603      	mov	r3, r0
 800779c:	4642      	mov	r2, r8
 800779e:	189b      	adds	r3, r3, r2
 80077a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077a4:	464b      	mov	r3, r9
 80077a6:	460a      	mov	r2, r1
 80077a8:	eb42 0303 	adc.w	r3, r2, r3
 80077ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80077ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077c8:	4649      	mov	r1, r9
 80077ca:	008b      	lsls	r3, r1, #2
 80077cc:	4641      	mov	r1, r8
 80077ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d2:	4641      	mov	r1, r8
 80077d4:	008a      	lsls	r2, r1, #2
 80077d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077da:	f7f8 fd59 	bl	8000290 <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4b39      	ldr	r3, [pc, #228]	; (80078c8 <UART_SetConfig+0x4e4>)
 80077e4:	fba3 1302 	umull	r1, r3, r3, r2
 80077e8:	095b      	lsrs	r3, r3, #5
 80077ea:	2164      	movs	r1, #100	; 0x64
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	3332      	adds	r3, #50	; 0x32
 80077f6:	4a34      	ldr	r2, [pc, #208]	; (80078c8 <UART_SetConfig+0x4e4>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007802:	441c      	add	r4, r3
 8007804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007808:	2200      	movs	r2, #0
 800780a:	673b      	str	r3, [r7, #112]	; 0x70
 800780c:	677a      	str	r2, [r7, #116]	; 0x74
 800780e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007812:	4642      	mov	r2, r8
 8007814:	464b      	mov	r3, r9
 8007816:	1891      	adds	r1, r2, r2
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	415b      	adcs	r3, r3
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007822:	4641      	mov	r1, r8
 8007824:	1851      	adds	r1, r2, r1
 8007826:	6039      	str	r1, [r7, #0]
 8007828:	4649      	mov	r1, r9
 800782a:	414b      	adcs	r3, r1
 800782c:	607b      	str	r3, [r7, #4]
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800783a:	4659      	mov	r1, fp
 800783c:	00cb      	lsls	r3, r1, #3
 800783e:	4651      	mov	r1, sl
 8007840:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007844:	4651      	mov	r1, sl
 8007846:	00ca      	lsls	r2, r1, #3
 8007848:	4610      	mov	r0, r2
 800784a:	4619      	mov	r1, r3
 800784c:	4603      	mov	r3, r0
 800784e:	4642      	mov	r2, r8
 8007850:	189b      	adds	r3, r3, r2
 8007852:	66bb      	str	r3, [r7, #104]	; 0x68
 8007854:	464b      	mov	r3, r9
 8007856:	460a      	mov	r2, r1
 8007858:	eb42 0303 	adc.w	r3, r2, r3
 800785c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800785e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	663b      	str	r3, [r7, #96]	; 0x60
 8007868:	667a      	str	r2, [r7, #100]	; 0x64
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007876:	4649      	mov	r1, r9
 8007878:	008b      	lsls	r3, r1, #2
 800787a:	4641      	mov	r1, r8
 800787c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007880:	4641      	mov	r1, r8
 8007882:	008a      	lsls	r2, r1, #2
 8007884:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007888:	f7f8 fd02 	bl	8000290 <__aeabi_uldivmod>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4b0d      	ldr	r3, [pc, #52]	; (80078c8 <UART_SetConfig+0x4e4>)
 8007892:	fba3 1302 	umull	r1, r3, r3, r2
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	2164      	movs	r1, #100	; 0x64
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	3332      	adds	r3, #50	; 0x32
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <UART_SetConfig+0x4e4>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4422      	add	r2, r4
 80078b8:	609a      	str	r2, [r3, #8]
}
 80078ba:	bf00      	nop
 80078bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078c0:	46bd      	mov	sp, r7
 80078c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078c6:	bf00      	nop
 80078c8:	51eb851f 	.word	0x51eb851f

080078cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d123      	bne.n	8007926 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	6851      	ldr	r1, [r2, #4]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	6892      	ldr	r2, [r2, #8]
 80078f2:	4311      	orrs	r1, r2
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	68d2      	ldr	r2, [r2, #12]
 80078f8:	4311      	orrs	r1, r2
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	6912      	ldr	r2, [r2, #16]
 80078fe:	4311      	orrs	r1, r2
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	6952      	ldr	r2, [r2, #20]
 8007904:	4311      	orrs	r1, r2
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	6992      	ldr	r2, [r2, #24]
 800790a:	4311      	orrs	r1, r2
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	69d2      	ldr	r2, [r2, #28]
 8007910:	4311      	orrs	r1, r2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	6a12      	ldr	r2, [r2, #32]
 8007916:	4311      	orrs	r1, r2
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800791c:	430a      	orrs	r2, r1
 800791e:	431a      	orrs	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e028      	b.n	8007978 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	69d9      	ldr	r1, [r3, #28]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4319      	orrs	r1, r3
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	430b      	orrs	r3, r1
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800794c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	6851      	ldr	r1, [r2, #4]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	6892      	ldr	r2, [r2, #8]
 8007958:	4311      	orrs	r1, r2
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	68d2      	ldr	r2, [r2, #12]
 800795e:	4311      	orrs	r1, r2
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	6912      	ldr	r2, [r2, #16]
 8007964:	4311      	orrs	r1, r2
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	6952      	ldr	r2, [r2, #20]
 800796a:	4311      	orrs	r1, r2
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	6992      	ldr	r2, [r2, #24]
 8007970:	430a      	orrs	r2, r1
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d128      	bne.n	80079ea <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	1e59      	subs	r1, r3, #1
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	4319      	orrs	r1, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	4319      	orrs	r1, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	3b01      	subs	r3, #1
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	4319      	orrs	r1, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	041b      	lsls	r3, r3, #16
 80079cc:	4319      	orrs	r1, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	051b      	lsls	r3, r3, #20
 80079d6:	4319      	orrs	r1, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	3b01      	subs	r3, #1
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	430b      	orrs	r3, r1
 80079e2:	431a      	orrs	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	609a      	str	r2, [r3, #8]
 80079e8:	e02f      	b.n	8007a4a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	68d2      	ldr	r2, [r2, #12]
 80079fa:	3a01      	subs	r2, #1
 80079fc:	0311      	lsls	r1, r2, #12
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	6952      	ldr	r2, [r2, #20]
 8007a02:	3a01      	subs	r2, #1
 8007a04:	0512      	lsls	r2, r2, #20
 8007a06:	430a      	orrs	r2, r1
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	1e59      	subs	r1, r3, #1
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4319      	orrs	r1, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	4319      	orrs	r1, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	4319      	orrs	r1, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	430b      	orrs	r3, r1
 8007a44:	431a      	orrs	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a58:	b084      	sub	sp, #16
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	f107 001c 	add.w	r0, r7, #28
 8007a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d122      	bne.n	8007ab6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9c0 	bl	8007e30 <USB_CoreReset>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e01a      	b.n	8007aec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9b4 	bl	8007e30 <USB_CoreReset>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ade:	e005      	b.n	8007aec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d10b      	bne.n	8007b0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f043 0206 	orr.w	r2, r3, #6
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f043 0220 	orr.w	r2, r3, #32
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b16:	b004      	add	sp, #16
 8007b18:	4770      	bx	lr

08007b1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f043 0201 	orr.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f023 0201 	bic.w	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d115      	bne.n	8007bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	f7fa fd4b 	bl	8002628 <HAL_Delay>
      ms++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f93a 	bl	8007e12 <USB_GetMode>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d01e      	beq.n	8007be2 <USB_SetCurrentMode+0x84>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b31      	cmp	r3, #49	; 0x31
 8007ba8:	d9f0      	bls.n	8007b8c <USB_SetCurrentMode+0x2e>
 8007baa:	e01a      	b.n	8007be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d115      	bne.n	8007bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	f7fa fd32 	bl	8002628 <HAL_Delay>
      ms++;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f921 	bl	8007e12 <USB_GetMode>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <USB_SetCurrentMode+0x84>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b31      	cmp	r3, #49	; 0x31
 8007bda:	d9f0      	bls.n	8007bbe <USB_SetCurrentMode+0x60>
 8007bdc:	e001      	b.n	8007be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e005      	b.n	8007bee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b32      	cmp	r3, #50	; 0x32
 8007be6:	d101      	bne.n	8007bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <USB_FlushTxFifo+0x64>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e01b      	b.n	8007c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	daf2      	bge.n	8007c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	019b      	lsls	r3, r3, #6
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <USB_FlushTxFifo+0x64>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e006      	b.n	8007c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d0f0      	beq.n	8007c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <USB_FlushRxFifo+0x5c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d901      	bls.n	8007c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e018      	b.n	8007cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	daf2      	bge.n	8007c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <USB_FlushRxFifo+0x5c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d901      	bls.n	8007ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e006      	b.n	8007cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	2b10      	cmp	r3, #16
 8007cac:	d0f0      	beq.n	8007c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	00030d40 	.word	0x00030d40

08007cc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b089      	sub	sp, #36	; 0x24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	461a      	mov	r2, r3
 8007cce:	460b      	mov	r3, r1
 8007cd0:	71fb      	strb	r3, [r7, #7]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d123      	bne.n	8007d2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ce6:	88bb      	ldrh	r3, [r7, #4]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e018      	b.n	8007d26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	031a      	lsls	r2, r3, #12
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d00:	461a      	mov	r2, r3
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3301      	adds	r3, #1
 8007d12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	3301      	adds	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61bb      	str	r3, [r7, #24]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d3e2      	bcc.n	8007cf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3724      	adds	r7, #36	; 0x24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b08b      	sub	sp, #44	; 0x2c
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	089b      	lsrs	r3, r3, #2
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	f003 0303 	and.w	r3, r3, #3
 8007d60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	623b      	str	r3, [r7, #32]
 8007d66:	e014      	b.n	8007d92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	3301      	adds	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	3301      	adds	r3, #1
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	3301      	adds	r3, #1
 8007d8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	623b      	str	r3, [r7, #32]
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d3e6      	bcc.n	8007d68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d9a:	8bfb      	ldrh	r3, [r7, #30]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007daa:	461a      	mov	r2, r3
 8007dac:	f107 0310 	add.w	r3, r7, #16
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	701a      	strb	r2, [r3, #0]
      i++;
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	3301      	adds	r3, #1
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007dd2:	8bfb      	ldrh	r3, [r7, #30]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007dd8:	8bfb      	ldrh	r3, [r7, #30]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1ea      	bne.n	8007db4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	372c      	adds	r7, #44	; 0x2c
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4013      	ands	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e04:	68fb      	ldr	r3, [r7, #12]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <USB_CoreReset+0x64>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d901      	bls.n	8007e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e01b      	b.n	8007e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	daf2      	bge.n	8007e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f043 0201 	orr.w	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <USB_CoreReset+0x64>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d901      	bls.n	8007e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e006      	b.n	8007e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d0f0      	beq.n	8007e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	00030d40 	.word	0x00030d40

08007e98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e98:	b084      	sub	sp, #16
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb8:	461a      	mov	r2, r3
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d10a      	bne.n	8007f0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f02:	f043 0304 	orr.w	r3, r3, #4
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	e014      	b.n	8007f34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f18:	f023 0304 	bic.w	r3, r3, #4
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	e009      	b.n	8007f34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f2e:	f023 0304 	bic.w	r3, r3, #4
 8007f32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f34:	2110      	movs	r1, #16
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff fe5e 	bl	8007bf8 <USB_FlushTxFifo>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fe8a 	bl	8007c60 <USB_FlushRxFifo>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	e015      	b.n	8007f88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f68:	461a      	mov	r2, r3
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d3e5      	bcc.n	8007f5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <USB_HostInit+0x16c>)
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a13      	ldr	r2, [pc, #76]	; (8008008 <USB_HostInit+0x170>)
 8007fbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fc0:	e009      	b.n	8007fd6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2280      	movs	r2, #128	; 0x80
 8007fc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a10      	ldr	r2, [pc, #64]	; (800800c <USB_HostInit+0x174>)
 8007fcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a0f      	ldr	r2, [pc, #60]	; (8008010 <USB_HostInit+0x178>)
 8007fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f043 0210 	orr.w	r2, r3, #16
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	4b09      	ldr	r3, [pc, #36]	; (8008014 <USB_HostInit+0x17c>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008000:	b004      	add	sp, #16
 8008002:	4770      	bx	lr
 8008004:	01000200 	.word	0x01000200
 8008008:	00e00300 	.word	0x00e00300
 800800c:	00600080 	.word	0x00600080
 8008010:	004000e0 	.word	0x004000e0
 8008014:	a3200008 	.word	0xa3200008

08008018 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008036:	f023 0303 	bic.w	r3, r3, #3
 800803a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008050:	4313      	orrs	r3, r2
 8008052:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d107      	bne.n	800806a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008060:	461a      	mov	r2, r3
 8008062:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008066:	6053      	str	r3, [r2, #4]
 8008068:	e009      	b.n	800807e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d106      	bne.n	800807e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008076:	461a      	mov	r2, r3
 8008078:	f241 7370 	movw	r3, #6000	; 0x1770
 800807c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080bc:	2064      	movs	r0, #100	; 0x64
 80080be:	f7fa fab3 	bl	8002628 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080d0:	200a      	movs	r0, #10
 80080d2:	f7fa faa9 	bl	8002628 <HAL_Delay>

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008104:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d109      	bne.n	8008124 <USB_DriveVbus+0x44>
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d106      	bne.n	8008124 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800811e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008122:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812e:	d109      	bne.n	8008144 <USB_DriveVbus+0x64>
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800813e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008142:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008152:	b480      	push	{r7}
 8008154:	b085      	sub	sp, #20
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	0c5b      	lsrs	r3, r3, #17
 8008170:	f003 0303 	and.w	r3, r3, #3
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	b29b      	uxth	r3, r3
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
	...

080081a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b088      	sub	sp, #32
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	4608      	mov	r0, r1
 80081ae:	4611      	mov	r1, r2
 80081b0:	461a      	mov	r2, r3
 80081b2:	4603      	mov	r3, r0
 80081b4:	70fb      	strb	r3, [r7, #3]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70bb      	strb	r3, [r7, #2]
 80081ba:	4613      	mov	r3, r2
 80081bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	461a      	mov	r2, r3
 80081d4:	f04f 33ff 	mov.w	r3, #4294967295
 80081d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d87e      	bhi.n	80082e0 <USB_HC_Init+0x13c>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <USB_HC_Init+0x44>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	080082a3 	.word	0x080082a3
 80081f0:	080081f9 	.word	0x080081f9
 80081f4:	08008265 	.word	0x08008265
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008204:	461a      	mov	r2, r3
 8008206:	f240 439d 	movw	r3, #1181	; 0x49d
 800820a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800820c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da10      	bge.n	8008236 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	440a      	add	r2, r1
 800822a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800822e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008232:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008234:	e057      	b.n	80082e6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d051      	beq.n	80082e6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	78fa      	ldrb	r2, [r7, #3]
 8008252:	0151      	lsls	r1, r2, #5
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	440a      	add	r2, r1
 8008258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800825c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008260:	60d3      	str	r3, [r2, #12]
      break;
 8008262:	e040      	b.n	80082e6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008270:	461a      	mov	r2, r3
 8008272:	f240 639d 	movw	r3, #1693	; 0x69d
 8008276:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008278:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800827c:	2b00      	cmp	r3, #0
 800827e:	da34      	bge.n	80082ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	440a      	add	r2, r1
 8008296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800829a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082a0:	e023      	b.n	80082ea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ae:	461a      	mov	r2, r3
 80082b0:	f240 2325 	movw	r3, #549	; 0x225
 80082b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da17      	bge.n	80082ee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80082dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082de:	e006      	b.n	80082ee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	77fb      	strb	r3, [r7, #31]
      break;
 80082e4:	e004      	b.n	80082f0 <USB_HC_Init+0x14c>
      break;
 80082e6:	bf00      	nop
 80082e8:	e002      	b.n	80082f0 <USB_HC_Init+0x14c>
      break;
 80082ea:	bf00      	nop
 80082ec:	e000      	b.n	80082f0 <USB_HC_Init+0x14c>
      break;
 80082ee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	440a      	add	r2, r1
 8008306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800830a:	f043 0302 	orr.w	r3, r3, #2
 800830e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008316:	699a      	ldr	r2, [r3, #24]
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	2101      	movs	r1, #1
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
 8008324:	6939      	ldr	r1, [r7, #16]
 8008326:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800832a:	4313      	orrs	r3, r2
 800832c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800833a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800833e:	2b00      	cmp	r3, #0
 8008340:	da03      	bge.n	800834a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008346:	61bb      	str	r3, [r7, #24]
 8008348:	e001      	b.n	800834e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff feff 	bl	8008152 <USB_GetHostSpeed>
 8008354:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008356:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800835a:	2b02      	cmp	r3, #2
 800835c:	d106      	bne.n	800836c <USB_HC_Init+0x1c8>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d003      	beq.n	800836c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e001      	b.n	8008370 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008370:	787b      	ldrb	r3, [r7, #1]
 8008372:	059b      	lsls	r3, r3, #22
 8008374:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008378:	78bb      	ldrb	r3, [r7, #2]
 800837a:	02db      	lsls	r3, r3, #11
 800837c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008380:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008382:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008386:	049b      	lsls	r3, r3, #18
 8008388:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800838c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800838e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008390:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008394:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	0159      	lsls	r1, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	440b      	add	r3, r1
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083ac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80083ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d003      	beq.n	80083be <USB_HC_Init+0x21a>
 80083b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d10f      	bne.n	80083de <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083de:	7ffb      	ldrb	r3, [r7, #31]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08c      	sub	sp, #48	; 0x30
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	785b      	ldrb	r3, [r3, #1]
 80083fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008404:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840e:	2b00      	cmp	r3, #0
 8008410:	d02d      	beq.n	800846e <USB_HC_StartXfer+0x86>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d129      	bne.n	800846e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d117      	bne.n	8008450 <USB_HC_StartXfer+0x68>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	79db      	ldrb	r3, [r3, #7]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <USB_HC_StartXfer+0x48>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	79db      	ldrb	r3, [r3, #7]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d10f      	bne.n	8008450 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	6a3a      	ldr	r2, [r7, #32]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <USB_HC_StartXfer+0x86>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	795b      	ldrb	r3, [r3, #5]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d107      	bne.n	800846e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	4619      	mov	r1, r3
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 fa0f 	bl	8008888 <USB_DoPing>
      return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e0f8      	b.n	8008660 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d018      	beq.n	80084a8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	8912      	ldrh	r2, [r2, #8]
 800847e:	4413      	add	r3, r2
 8008480:	3b01      	subs	r3, #1
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	8912      	ldrh	r2, [r2, #8]
 8008486:	fbb3 f3f2 	udiv	r3, r3, r2
 800848a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800848c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800848e:	8b7b      	ldrh	r3, [r7, #26]
 8008490:	429a      	cmp	r2, r3
 8008492:	d90b      	bls.n	80084ac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008494:	8b7b      	ldrh	r3, [r7, #26]
 8008496:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	8912      	ldrh	r2, [r2, #8]
 800849e:	fb03 f202 	mul.w	r2, r3, r2
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	611a      	str	r2, [r3, #16]
 80084a6:	e001      	b.n	80084ac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084a8:	2301      	movs	r3, #1
 80084aa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	78db      	ldrb	r3, [r3, #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	8912      	ldrh	r2, [r2, #8]
 80084ba:	fb03 f202 	mul.w	r2, r3, r2
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	611a      	str	r2, [r3, #16]
 80084c2:	e003      	b.n	80084cc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	695a      	ldr	r2, [r3, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084d6:	04d9      	lsls	r1, r3, #19
 80084d8:	4b63      	ldr	r3, [pc, #396]	; (8008668 <USB_HC_StartXfer+0x280>)
 80084da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	7a9b      	ldrb	r3, [r3, #10]
 80084e2:	075b      	lsls	r3, r3, #29
 80084e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084e8:	69f9      	ldr	r1, [r7, #28]
 80084ea:	0148      	lsls	r0, r1, #5
 80084ec:	6a39      	ldr	r1, [r7, #32]
 80084ee:	4401      	add	r1, r0
 80084f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	68d9      	ldr	r1, [r3, #12]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850e:	460a      	mov	r2, r1
 8008510:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	bf0c      	ite	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	2300      	movne	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	4413      	add	r3, r2
 8008532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	0151      	lsls	r1, r2, #5
 800853c:	6a3a      	ldr	r2, [r7, #32]
 800853e:	440a      	add	r2, r1
 8008540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008544:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008548:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	4413      	add	r3, r2
 8008552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	7e7b      	ldrb	r3, [r7, #25]
 800855a:	075b      	lsls	r3, r3, #29
 800855c:	69f9      	ldr	r1, [r7, #28]
 800855e:	0148      	lsls	r0, r1, #5
 8008560:	6a39      	ldr	r1, [r7, #32]
 8008562:	4401      	add	r1, r0
 8008564:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008568:	4313      	orrs	r3, r2
 800856a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	4413      	add	r3, r2
 8008574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008582:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	78db      	ldrb	r3, [r3, #3]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	e003      	b.n	800859e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800859c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b2:	461a      	mov	r2, r3
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e04e      	b.n	8008660 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	78db      	ldrb	r3, [r3, #3]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d149      	bne.n	800865e <USB_HC_StartXfer+0x276>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d045      	beq.n	800865e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	79db      	ldrb	r3, [r3, #7]
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d830      	bhi.n	800863c <USB_HC_StartXfer+0x254>
 80085da:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <USB_HC_StartXfer+0x1f8>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	080085f1 	.word	0x080085f1
 80085e4:	08008615 	.word	0x08008615
 80085e8:	080085f1 	.word	0x080085f1
 80085ec:	08008615 	.word	0x08008615
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	3303      	adds	r3, #3
 80085f6:	089b      	lsrs	r3, r3, #2
 80085f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80085fa:	8afa      	ldrh	r2, [r7, #22]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	b29b      	uxth	r3, r3
 8008602:	429a      	cmp	r2, r3
 8008604:	d91c      	bls.n	8008640 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f043 0220 	orr.w	r2, r3, #32
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	619a      	str	r2, [r3, #24]
        }
        break;
 8008612:	e015      	b.n	8008640 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	3303      	adds	r3, #3
 800861a:	089b      	lsrs	r3, r3, #2
 800861c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800861e:	8afa      	ldrh	r2, [r7, #22]
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	b29b      	uxth	r3, r3
 800862a:	429a      	cmp	r2, r3
 800862c:	d90a      	bls.n	8008644 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	619a      	str	r2, [r3, #24]
        }
        break;
 800863a:	e003      	b.n	8008644 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <USB_HC_StartXfer+0x25e>
        break;
 8008640:	bf00      	nop
 8008642:	e000      	b.n	8008646 <USB_HC_StartXfer+0x25e>
        break;
 8008644:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	68d9      	ldr	r1, [r3, #12]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	785a      	ldrb	r2, [r3, #1]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	b29b      	uxth	r3, r3
 8008654:	2000      	movs	r0, #0
 8008656:	9000      	str	r0, [sp, #0]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f7ff fb31 	bl	8007cc0 <USB_WritePacket>
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3728      	adds	r7, #40	; 0x28
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	1ff80000 	.word	0x1ff80000

0800866c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	b29b      	uxth	r3, r3
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800868e:	b480      	push	{r7}
 8008690:	b089      	sub	sp, #36	; 0x24
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	0c9b      	lsrs	r3, r3, #18
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	0fdb      	lsrs	r3, r3, #31
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d104      	bne.n	80086e8 <USB_HC_Halt+0x5a>
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e0c8      	b.n	800887a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <USB_HC_Halt+0x66>
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d163      	bne.n	80087bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	440a      	add	r2, r1
 800870a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008712:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 80ab 	bne.w	8008878 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d133      	bne.n	8008796 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	4413      	add	r3, r2
 8008736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	0151      	lsls	r1, r2, #5
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	440a      	add	r2, r1
 8008744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800874c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	440a      	add	r2, r1
 8008764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800876c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800877a:	d81d      	bhi.n	80087b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800878e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008792:	d0ec      	beq.n	800876e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008794:	e070      	b.n	8008878 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	0151      	lsls	r1, r2, #5
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	440a      	add	r2, r1
 80087ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087b6:	e05f      	b.n	8008878 <USB_HC_Halt+0x1ea>
            break;
 80087b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087ba:	e05d      	b.n	8008878 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	69fa      	ldr	r2, [r7, #28]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d133      	bne.n	8008854 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	440a      	add	r2, r1
 8008802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800880a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	440a      	add	r2, r1
 8008822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800882a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008838:	d81d      	bhi.n	8008876 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800884c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008850:	d0ec      	beq.n	800882c <USB_HC_Halt+0x19e>
 8008852:	e011      	b.n	8008878 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	0151      	lsls	r1, r2, #5
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	440a      	add	r2, r1
 800886a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800886e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	e000      	b.n	8008878 <USB_HC_Halt+0x1ea>
          break;
 8008876:	bf00      	nop
    }
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3724      	adds	r7, #36	; 0x24
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	04da      	lsls	r2, r3, #19
 80088a4:	4b15      	ldr	r3, [pc, #84]	; (80088fc <USB_DoPing+0x74>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	0151      	lsls	r1, r2, #5
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	440a      	add	r2, r1
 80088b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	461a      	mov	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	1ff80000 	.word	0x1ff80000

08008900 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f911 	bl	8007b3c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800891a:	2110      	movs	r1, #16
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff f96b 	bl	8007bf8 <USB_FlushTxFifo>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff f997 	bl	8007c60 <USB_FlushRxFifo>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
 8008940:	e01f      	b.n	8008982 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008958:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008960:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008968:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4413      	add	r3, r2
 8008972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008976:	461a      	mov	r2, r3
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	3301      	adds	r3, #1
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b0f      	cmp	r3, #15
 8008986:	d9dc      	bls.n	8008942 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	e034      	b.n	80089f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c2:	461a      	mov	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089d4:	d80c      	bhi.n	80089f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ec:	d0ec      	beq.n	80089c8 <USB_StopHost+0xc8>
 80089ee:	e000      	b.n	80089f2 <USB_StopHost+0xf2>
        break;
 80089f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	3301      	adds	r3, #1
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2b0f      	cmp	r3, #15
 80089fc:	d9c7      	bls.n	800898e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a04:	461a      	mov	r2, r3
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff f880 	bl	8007b1a <USB_EnableGlobalInt>

  return ret;
 8008a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a24:	b590      	push	{r4, r7, lr}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af04      	add	r7, sp, #16
 8008a2a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	2202      	movs	r2, #2
 8008a30:	2102      	movs	r1, #2
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fc66 	bl	8009304 <USBH_FindInterface>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2bff      	cmp	r3, #255	; 0xff
 8008a40:	d002      	beq.n	8008a48 <USBH_CDC_InterfaceInit+0x24>
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d901      	bls.n	8008a4c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e13d      	b.n	8008cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fc3b 	bl	80092cc <USBH_SelectInterface>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008a60:	2302      	movs	r3, #2
 8008a62:	e131      	b.n	8008cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a6a:	2050      	movs	r0, #80	; 0x50
 8008a6c:	f002 fb00 	bl	800b070 <malloc>
 8008a70:	4603      	mov	r3, r0
 8008a72:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a84:	2302      	movs	r3, #2
 8008a86:	e11f      	b.n	8008cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a88:	2250      	movs	r2, #80	; 0x50
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	68b8      	ldr	r0, [r7, #8]
 8008a8e:	f002 faff 	bl	800b090 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	211a      	movs	r1, #26
 8008a98:	fb01 f303 	mul.w	r3, r1, r3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da15      	bge.n	8008ad6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	211a      	movs	r1, #26
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	211a      	movs	r1, #26
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ad0:	881a      	ldrh	r2, [r3, #0]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 ff2c 	bl	800a93a <USBH_AllocPipe>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	7819      	ldrb	r1, [r3, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	7858      	ldrb	r0, [r3, #1]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	8952      	ldrh	r2, [r2, #10]
 8008b02:	9202      	str	r2, [sp, #8]
 8008b04:	2203      	movs	r2, #3
 8008b06:	9201      	str	r2, [sp, #4]
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 fee4 	bl	800a8dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f002 f9f9 	bl	800af14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b22:	2300      	movs	r3, #0
 8008b24:	2200      	movs	r2, #0
 8008b26:	210a      	movs	r1, #10
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbeb 	bl	8009304 <USBH_FindInterface>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2bff      	cmp	r3, #255	; 0xff
 8008b36:	d002      	beq.n	8008b3e <USBH_CDC_InterfaceInit+0x11a>
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d901      	bls.n	8008b42 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e0c2      	b.n	8008cc8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	211a      	movs	r1, #26
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da16      	bge.n	8008b88 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	211a      	movs	r1, #26
 8008b60:	fb01 f303 	mul.w	r3, r1, r3
 8008b64:	4413      	add	r3, r2
 8008b66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b6a:	781a      	ldrb	r2, [r3, #0]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	211a      	movs	r1, #26
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b80:	881a      	ldrh	r2, [r3, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	835a      	strh	r2, [r3, #26]
 8008b86:	e015      	b.n	8008bb4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	211a      	movs	r1, #26
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	4413      	add	r3, r2
 8008b94:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b98:	781a      	ldrb	r2, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	211a      	movs	r1, #26
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bae:	881a      	ldrh	r2, [r3, #0]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	211a      	movs	r1, #26
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da16      	bge.n	8008bfa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	211a      	movs	r1, #26
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	211a      	movs	r1, #26
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bf2:	881a      	ldrh	r2, [r3, #0]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	835a      	strh	r2, [r3, #26]
 8008bf8:	e015      	b.n	8008c26 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	211a      	movs	r1, #26
 8008c00:	fb01 f303 	mul.w	r3, r1, r3
 8008c04:	4413      	add	r3, r2
 8008c06:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	211a      	movs	r1, #26
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	7b9b      	ldrb	r3, [r3, #14]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fe84 	bl	800a93a <USBH_AllocPipe>
 8008c32:	4603      	mov	r3, r0
 8008c34:	461a      	mov	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	7bdb      	ldrb	r3, [r3, #15]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 fe7a 	bl	800a93a <USBH_AllocPipe>
 8008c46:	4603      	mov	r3, r0
 8008c48:	461a      	mov	r2, r3
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	7b59      	ldrb	r1, [r3, #13]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	7b98      	ldrb	r0, [r3, #14]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	8b12      	ldrh	r2, [r2, #24]
 8008c66:	9202      	str	r2, [sp, #8]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	9201      	str	r2, [sp, #4]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	4623      	mov	r3, r4
 8008c70:	4602      	mov	r2, r0
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 fe32 	bl	800a8dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	7b19      	ldrb	r1, [r3, #12]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	7bd8      	ldrb	r0, [r3, #15]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	8b52      	ldrh	r2, [r2, #26]
 8008c90:	9202      	str	r2, [sp, #8]
 8008c92:	2202      	movs	r2, #2
 8008c94:	9201      	str	r2, [sp, #4]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4623      	mov	r3, r4
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 fe1d 	bl	800a8dc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	7b5b      	ldrb	r3, [r3, #13]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 f92e 	bl	800af14 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	7b1b      	ldrb	r3, [r3, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f002 f927 	bl	800af14 <USBH_LL_SetToggle>

  return USBH_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}

08008cd0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fe12 	bl	800a91a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fe3d 	bl	800a97c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	7b1b      	ldrb	r3, [r3, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00e      	beq.n	8008d2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	7b1b      	ldrb	r3, [r3, #12]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fdff 	bl	800a91a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	7b1b      	ldrb	r3, [r3, #12]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fe2a 	bl	800a97c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	7b5b      	ldrb	r3, [r3, #13]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00e      	beq.n	8008d54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	7b5b      	ldrb	r3, [r3, #13]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 fdec 	bl	800a91a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	7b5b      	ldrb	r3, [r3, #13]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 fe17 	bl	800a97c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 f989 	bl	800b080 <free>
    phost->pActiveClass->pData = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d74:	2200      	movs	r2, #0
 8008d76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3340      	adds	r3, #64	; 0x40
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8b1 	bl	8008f02 <GetLineCoding>
 8008da0:	4603      	mov	r3, r0
 8008da2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d105      	bne.n	8008db6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008db0:	2102      	movs	r1, #2
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d877      	bhi.n	8008ed4 <USBH_CDC_Process+0x114>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <USBH_CDC_Process+0x2c>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e07 	.word	0x08008e07
 8008df4:	08008e37 	.word	0x08008e37
 8008df8:	08008eab 	.word	0x08008eab
 8008dfc:	08008eb9 	.word	0x08008eb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
      break;
 8008e04:	e06d      	b.n	8008ee2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f897 	bl	8008f40 <SetLineCoding>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e24:	e058      	b.n	8008ed8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d055      	beq.n	8008ed8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e34:	e050      	b.n	8008ed8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	3340      	adds	r3, #64	; 0x40
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f860 	bl	8008f02 <GetLineCoding>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d126      	bne.n	8008e9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	791b      	ldrb	r3, [r3, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d13b      	bne.n	8008edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d133      	bne.n	8008edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d12b      	bne.n	8008edc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d124      	bne.n	8008edc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f958 	bl	8009148 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e98:	e020      	b.n	8008edc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d01d      	beq.n	8008edc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ea8:	e018      	b.n	8008edc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f867 	bl	8008f7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f8da 	bl	800906a <CDC_ProcessReception>
      break;
 8008eb6:	e014      	b.n	8008ee2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008eb8:	2100      	movs	r1, #0
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 ffef 	bl	8009e9e <USBH_ClrFeature>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10a      	bne.n	8008ee0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008ed2:	e005      	b.n	8008ee0 <USBH_CDC_Process+0x120>

    default:
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e004      	b.n	8008ee2 <USBH_CDC_Process+0x122>
      break;
 8008ed8:	bf00      	nop
 8008eda:	e002      	b.n	8008ee2 <USBH_CDC_Process+0x122>
      break;
 8008edc:	bf00      	nop
 8008ede:	e000      	b.n	8008ee2 <USBH_CDC_Process+0x122>
      break;
 8008ee0:	bf00      	nop

  }

  return status;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	22a1      	movs	r2, #161	; 0xa1
 8008f10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2221      	movs	r2, #33	; 0x21
 8008f16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2207      	movs	r2, #7
 8008f28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f001 fa81 	bl	800a438 <USBH_CtlReq>
 8008f36:	4603      	mov	r3, r0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3708      	adds	r7, #8
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2221      	movs	r2, #33	; 0x21
 8008f4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2207      	movs	r2, #7
 8008f66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2207      	movs	r2, #7
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 fa62 	bl	800a438 <USBH_CtlReq>
 8008f74:	4603      	mov	r3, r0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af02      	add	r7, sp, #8
 8008f84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d002      	beq.n	8008fa4 <CDC_ProcessTransmission+0x26>
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d023      	beq.n	8008fea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008fa2:	e05e      	b.n	8009062 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	8b12      	ldrh	r2, [r2, #24]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d90b      	bls.n	8008fc8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	69d9      	ldr	r1, [r3, #28]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8b1a      	ldrh	r2, [r3, #24]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	7b5b      	ldrb	r3, [r3, #13]
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	9000      	str	r0, [sp, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 fc48 	bl	800a856 <USBH_BulkSendData>
 8008fc6:	e00b      	b.n	8008fe0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	7b5b      	ldrb	r3, [r3, #13]
 8008fd6:	2001      	movs	r0, #1
 8008fd8:	9000      	str	r0, [sp, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 fc3b 	bl	800a856 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fe8:	e03b      	b.n	8009062 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	7b5b      	ldrb	r3, [r3, #13]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 ff65 	bl	800aec0 <USBH_LL_GetURBState>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d128      	bne.n	8009052 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	8b12      	ldrh	r2, [r2, #24]
 8009008:	4293      	cmp	r3, r2
 800900a:	d90e      	bls.n	800902a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	8b12      	ldrh	r2, [r2, #24]
 8009014:	1a9a      	subs	r2, r3, r2
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	8b12      	ldrh	r2, [r2, #24]
 8009022:	441a      	add	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	61da      	str	r2, [r3, #28]
 8009028:	e002      	b.n	8009030 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009040:	e00e      	b.n	8009060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f868 	bl	8009120 <USBH_CDC_TransmitCallback>
      break;
 8009050:	e006      	b.n	8009060 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d103      	bne.n	8009060 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009060:	bf00      	nop
  }
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b086      	sub	sp, #24
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800907c:	2300      	movs	r3, #0
 800907e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009086:	2b03      	cmp	r3, #3
 8009088:	d002      	beq.n	8009090 <CDC_ProcessReception+0x26>
 800908a:	2b04      	cmp	r3, #4
 800908c:	d00e      	beq.n	80090ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800908e:	e043      	b.n	8009118 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a19      	ldr	r1, [r3, #32]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	8b5a      	ldrh	r2, [r3, #26]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	7b1b      	ldrb	r3, [r3, #12]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 fbff 	bl	800a8a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2204      	movs	r2, #4
 80090a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090aa:	e035      	b.n	8009118 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	7b1b      	ldrb	r3, [r3, #12]
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 ff04 	bl	800aec0 <USBH_LL_GetURBState>
 80090b8:	4603      	mov	r3, r0
 80090ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80090bc:	7cfb      	ldrb	r3, [r7, #19]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d129      	bne.n	8009116 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	7b1b      	ldrb	r3, [r3, #12]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fe67 	bl	800ad9c <USBH_LL_GetLastXferSize>
 80090ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d016      	beq.n	8009108 <CDC_ProcessReception+0x9e>
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	8b5b      	ldrh	r3, [r3, #26]
 80090de:	461a      	mov	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d910      	bls.n	8009108 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1ad2      	subs	r2, r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	6a1a      	ldr	r2, [r3, #32]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	441a      	add	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2203      	movs	r2, #3
 8009102:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009106:	e006      	b.n	8009116 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f80f 	bl	8009134 <USBH_CDC_ReceiveCallback>
      break;
 8009116:	bf00      	nop
  }
}
 8009118:	bf00      	nop
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009170:	2302      	movs	r3, #2
 8009172:	e029      	b.n	80091c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	79fa      	ldrb	r2, [r7, #7]
 8009178:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f81f 	bl	80091d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f001 fd2d 	bl	800ac20 <USBH_LL_Init>

  return USBH_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e009      	b.n	80091f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	33e0      	adds	r3, #224	; 0xe0
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b0f      	cmp	r3, #15
 80091fa:	d9f2      	bls.n	80091e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e009      	b.n	8009216 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921c:	d3f1      	bcc.n	8009202 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2240      	movs	r2, #64	; 0x40
 8009242:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d016      	beq.n	80092ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10e      	bne.n	80092b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800929c:	1c59      	adds	r1, r3, #1
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	33de      	adds	r3, #222	; 0xde
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
 80092b2:	e004      	b.n	80092be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	73fb      	strb	r3, [r7, #15]
 80092b8:	e001      	b.n	80092be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092ba:	2302      	movs	r3, #2
 80092bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d204      	bcs.n	80092f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80092f0:	e001      	b.n	80092f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80092f2:	2302      	movs	r3, #2
 80092f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4603      	mov	r3, r0
 8009314:	70fb      	strb	r3, [r7, #3]
 8009316:	460b      	mov	r3, r1
 8009318:	70bb      	strb	r3, [r7, #2]
 800931a:	4613      	mov	r3, r2
 800931c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800932c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800932e:	e025      	b.n	800937c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009330:	7dfb      	ldrb	r3, [r7, #23]
 8009332:	221a      	movs	r2, #26
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	3308      	adds	r3, #8
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	3302      	adds	r3, #2
 8009340:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	795b      	ldrb	r3, [r3, #5]
 8009346:	78fa      	ldrb	r2, [r7, #3]
 8009348:	429a      	cmp	r2, r3
 800934a:	d002      	beq.n	8009352 <USBH_FindInterface+0x4e>
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	2bff      	cmp	r3, #255	; 0xff
 8009350:	d111      	bne.n	8009376 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009356:	78ba      	ldrb	r2, [r7, #2]
 8009358:	429a      	cmp	r2, r3
 800935a:	d002      	beq.n	8009362 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800935c:	78bb      	ldrb	r3, [r7, #2]
 800935e:	2bff      	cmp	r3, #255	; 0xff
 8009360:	d109      	bne.n	8009376 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009366:	787a      	ldrb	r2, [r7, #1]
 8009368:	429a      	cmp	r2, r3
 800936a:	d002      	beq.n	8009372 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800936c:	787b      	ldrb	r3, [r7, #1]
 800936e:	2bff      	cmp	r3, #255	; 0xff
 8009370:	d101      	bne.n	8009376 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	e006      	b.n	8009384 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	3301      	adds	r3, #1
 800937a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800937c:	7dfb      	ldrb	r3, [r7, #23]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d9d6      	bls.n	8009330 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009382:	23ff      	movs	r3, #255	; 0xff
}
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fc87 	bl	800acac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800939e:	2101      	movs	r1, #1
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 fda0 	bl	800aee6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d102      	bne.n	80093d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2203      	movs	r2, #3
 80093d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b0b      	cmp	r3, #11
 80093da:	f200 81be 	bhi.w	800975a <USBH_Process+0x3aa>
 80093de:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <USBH_Process+0x34>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	08009415 	.word	0x08009415
 80093e8:	08009447 	.word	0x08009447
 80093ec:	080094af 	.word	0x080094af
 80093f0:	080096f5 	.word	0x080096f5
 80093f4:	0800975b 	.word	0x0800975b
 80093f8:	08009553 	.word	0x08009553
 80093fc:	0800969b 	.word	0x0800969b
 8009400:	08009589 	.word	0x08009589
 8009404:	080095a9 	.word	0x080095a9
 8009408:	080095c9 	.word	0x080095c9
 800940c:	0800960d 	.word	0x0800960d
 8009410:	080096dd 	.word	0x080096dd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 819e 	beq.w	800975e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009428:	20c8      	movs	r0, #200	; 0xc8
 800942a:	f001 fda3 	bl	800af74 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fc99 	bl	800ad66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009444:	e18b      	b.n	800975e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800944c:	2b01      	cmp	r3, #1
 800944e:	d107      	bne.n	8009460 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800945e:	e18d      	b.n	800977c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800946a:	d914      	bls.n	8009496 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009472:	3301      	adds	r3, #1
 8009474:	b2da      	uxtb	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009482:	2b03      	cmp	r3, #3
 8009484:	d903      	bls.n	800948e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	220d      	movs	r2, #13
 800948a:	701a      	strb	r2, [r3, #0]
      break;
 800948c:	e176      	b.n	800977c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	701a      	strb	r2, [r3, #0]
      break;
 8009494:	e172      	b.n	800977c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800949c:	f103 020a 	add.w	r2, r3, #10
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094a6:	200a      	movs	r0, #10
 80094a8:	f001 fd64 	bl	800af74 <USBH_Delay>
      break;
 80094ac:	e166      	b.n	800977c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094be:	2104      	movs	r1, #4
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094c4:	2064      	movs	r0, #100	; 0x64
 80094c6:	f001 fd55 	bl	800af74 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 fc24 	bl	800ad18 <USBH_LL_GetSpeed>
 80094d0:	4603      	mov	r3, r0
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2205      	movs	r2, #5
 80094de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80094e0:	2100      	movs	r1, #0
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fa29 	bl	800a93a <USBH_AllocPipe>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80094f0:	2180      	movs	r1, #128	; 0x80
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 fa21 	bl	800a93a <USBH_AllocPipe>
 80094f8:	4603      	mov	r3, r0
 80094fa:	461a      	mov	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7919      	ldrb	r1, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009514:	b292      	uxth	r2, r2
 8009516:	9202      	str	r2, [sp, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	9201      	str	r2, [sp, #4]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	4603      	mov	r3, r0
 8009520:	2280      	movs	r2, #128	; 0x80
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 f9da 	bl	800a8dc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7959      	ldrb	r1, [r3, #5]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800953c:	b292      	uxth	r2, r2
 800953e:	9202      	str	r2, [sp, #8]
 8009540:	2200      	movs	r2, #0
 8009542:	9201      	str	r2, [sp, #4]
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	4603      	mov	r3, r0
 8009548:	2200      	movs	r2, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f9c6 	bl	800a8dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009550:	e114      	b.n	800977c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f918 	bl	8009788 <USBH_HandleEnum>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	f040 80fe 	bne.w	8009762 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009574:	2b01      	cmp	r3, #1
 8009576:	d103      	bne.n	8009580 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2208      	movs	r2, #8
 800957c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800957e:	e0f0      	b.n	8009762 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2207      	movs	r2, #7
 8009584:	701a      	strb	r2, [r3, #0]
      break;
 8009586:	e0ec      	b.n	8009762 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80e9 	beq.w	8009766 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800959a:	2101      	movs	r1, #1
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2208      	movs	r2, #8
 80095a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80095a6:	e0de      	b.n	8009766 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fc2c 	bl	8009e10 <USBH_SetCfg>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f040 80d5 	bne.w	800976a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2209      	movs	r2, #9
 80095c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095c6:	e0d0      	b.n	800976a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d016      	beq.n	8009604 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80095d6:	2101      	movs	r1, #1
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc3c 	bl	8009e56 <USBH_SetFeature>
 80095de:	4603      	mov	r3, r0
 80095e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d103      	bne.n	80095f2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	220a      	movs	r2, #10
 80095ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095f0:	e0bd      	b.n	800976e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	f040 80b9 	bne.w	800976e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	220a      	movs	r2, #10
 8009600:	701a      	strb	r2, [r3, #0]
      break;
 8009602:	e0b4      	b.n	800976e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	220a      	movs	r2, #10
 8009608:	701a      	strb	r2, [r3, #0]
      break;
 800960a:	e0b0      	b.n	800976e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 80ad 	beq.w	8009772 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
 8009624:	e016      	b.n	8009654 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32de      	adds	r2, #222	; 0xde
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	791a      	ldrb	r2, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009638:	429a      	cmp	r2, r3
 800963a:	d108      	bne.n	800964e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	32de      	adds	r2, #222	; 0xde
 8009642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800964c:	e005      	b.n	800965a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	3301      	adds	r3, #1
 8009652:	73fb      	strb	r3, [r7, #15]
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0e5      	beq.n	8009626 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d016      	beq.n	8009692 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d109      	bne.n	800968a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2206      	movs	r2, #6
 800967a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009682:	2103      	movs	r1, #3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009688:	e073      	b.n	8009772 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	220d      	movs	r2, #13
 800968e:	701a      	strb	r2, [r3, #0]
      break;
 8009690:	e06f      	b.n	8009772 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	220d      	movs	r2, #13
 8009696:	701a      	strb	r2, [r3, #0]
      break;
 8009698:	e06b      	b.n	8009772 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d017      	beq.n	80096d4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	220b      	movs	r2, #11
 80096c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096c2:	e058      	b.n	8009776 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d154      	bne.n	8009776 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	220d      	movs	r2, #13
 80096d0:	701a      	strb	r2, [r3, #0]
      break;
 80096d2:	e050      	b.n	8009776 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	220d      	movs	r2, #13
 80096d8:	701a      	strb	r2, [r3, #0]
      break;
 80096da:	e04c      	b.n	8009776 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d049      	beq.n	800977a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	4798      	blx	r3
      }
      break;
 80096f2:	e042      	b.n	800977a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff fd67 	bl	80091d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d009      	beq.n	8009720 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d005      	beq.n	8009736 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009730:	2105      	movs	r1, #5
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b01      	cmp	r3, #1
 8009740:	d107      	bne.n	8009752 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fe20 	bl	8009390 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009750:	e014      	b.n	800977c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 faaa 	bl	800acac <USBH_LL_Start>
      break;
 8009758:	e010      	b.n	800977c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800975a:	bf00      	nop
 800975c:	e00e      	b.n	800977c <USBH_Process+0x3cc>
      break;
 800975e:	bf00      	nop
 8009760:	e00c      	b.n	800977c <USBH_Process+0x3cc>
      break;
 8009762:	bf00      	nop
 8009764:	e00a      	b.n	800977c <USBH_Process+0x3cc>
    break;
 8009766:	bf00      	nop
 8009768:	e008      	b.n	800977c <USBH_Process+0x3cc>
      break;
 800976a:	bf00      	nop
 800976c:	e006      	b.n	800977c <USBH_Process+0x3cc>
      break;
 800976e:	bf00      	nop
 8009770:	e004      	b.n	800977c <USBH_Process+0x3cc>
      break;
 8009772:	bf00      	nop
 8009774:	e002      	b.n	800977c <USBH_Process+0x3cc>
      break;
 8009776:	bf00      	nop
 8009778:	e000      	b.n	800977c <USBH_Process+0x3cc>
      break;
 800977a:	bf00      	nop
  }
  return USBH_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af04      	add	r7, sp, #16
 800978e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009794:	2301      	movs	r3, #1
 8009796:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b07      	cmp	r3, #7
 800979e:	f200 81c1 	bhi.w	8009b24 <USBH_HandleEnum+0x39c>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <USBH_HandleEnum+0x20>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	08009887 	.word	0x08009887
 80097b0:	080098f1 	.word	0x080098f1
 80097b4:	0800997f 	.word	0x0800997f
 80097b8:	080099e9 	.word	0x080099e9
 80097bc:	08009a59 	.word	0x08009a59
 80097c0:	08009a9f 	.word	0x08009a9f
 80097c4:	08009ae5 	.word	0x08009ae5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097c8:	2108      	movs	r1, #8
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa50 	bl	8009c70 <USBH_Get_DevDesc>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d130      	bne.n	800983c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7919      	ldrb	r1, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097fe:	b292      	uxth	r2, r2
 8009800:	9202      	str	r2, [sp, #8]
 8009802:	2200      	movs	r2, #0
 8009804:	9201      	str	r2, [sp, #4]
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	4603      	mov	r3, r0
 800980a:	2280      	movs	r2, #128	; 0x80
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 f865 	bl	800a8dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7959      	ldrb	r1, [r3, #5]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009826:	b292      	uxth	r2, r2
 8009828:	9202      	str	r2, [sp, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	9201      	str	r2, [sp, #4]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4603      	mov	r3, r0
 8009832:	2200      	movs	r2, #0
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f851 	bl	800a8dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800983a:	e175      	b.n	8009b28 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b03      	cmp	r3, #3
 8009840:	f040 8172 	bne.w	8009b28 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800984a:	3301      	adds	r3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800985a:	2b03      	cmp	r3, #3
 800985c:	d903      	bls.n	8009866 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	220d      	movs	r2, #13
 8009862:	701a      	strb	r2, [r3, #0]
      break;
 8009864:	e160      	b.n	8009b28 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	795b      	ldrb	r3, [r3, #5]
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 f885 	bl	800a97c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	791b      	ldrb	r3, [r3, #4]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f001 f87f 	bl	800a97c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
      break;
 8009884:	e150      	b.n	8009b28 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009886:	2112      	movs	r1, #18
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9f1 	bl	8009c70 <USBH_Get_DevDesc>
 800988e:	4603      	mov	r3, r0
 8009890:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d103      	bne.n	80098a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800989e:	e145      	b.n	8009b2c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	f040 8142 	bne.w	8009b2c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ae:	3301      	adds	r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d903      	bls.n	80098ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	701a      	strb	r2, [r3, #0]
      break;
 80098c8:	e130      	b.n	8009b2c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 f853 	bl	800a97c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f84d 	bl	800a97c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
      break;
 80098ee:	e11d      	b.n	8009b2c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80098f0:	2101      	movs	r1, #1
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa68 	bl	8009dc8 <USBH_SetAddress>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d132      	bne.n	8009968 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009902:	2002      	movs	r0, #2
 8009904:	f001 fb36 	bl	800af74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2203      	movs	r2, #3
 8009914:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7919      	ldrb	r1, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800992a:	b292      	uxth	r2, r2
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	9201      	str	r2, [sp, #4]
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4603      	mov	r3, r0
 8009936:	2280      	movs	r2, #128	; 0x80
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 ffcf 	bl	800a8dc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7959      	ldrb	r1, [r3, #5]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009952:	b292      	uxth	r2, r2
 8009954:	9202      	str	r2, [sp, #8]
 8009956:	2200      	movs	r2, #0
 8009958:	9201      	str	r2, [sp, #4]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	4603      	mov	r3, r0
 800995e:	2200      	movs	r2, #0
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 ffbb 	bl	800a8dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009966:	e0e3      	b.n	8009b30 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b03      	cmp	r3, #3
 800996c:	f040 80e0 	bne.w	8009b30 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	220d      	movs	r2, #13
 8009974:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	705a      	strb	r2, [r3, #1]
      break;
 800997c:	e0d8      	b.n	8009b30 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800997e:	2109      	movs	r1, #9
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f99d 	bl	8009cc0 <USBH_Get_CfgDesc>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2204      	movs	r2, #4
 8009994:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009996:	e0cd      	b.n	8009b34 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009998:	7bbb      	ldrb	r3, [r7, #14]
 800999a:	2b03      	cmp	r3, #3
 800999c:	f040 80ca 	bne.w	8009b34 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099a6:	3301      	adds	r3, #1
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d903      	bls.n	80099c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220d      	movs	r2, #13
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e0b8      	b.n	8009b34 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	795b      	ldrb	r3, [r3, #5]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 ffd7 	bl	800a97c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ffd1 	bl	800a97c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	701a      	strb	r2, [r3, #0]
      break;
 80099e6:	e0a5      	b.n	8009b34 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f965 	bl	8009cc0 <USBH_Get_CfgDesc>
 80099f6:	4603      	mov	r3, r0
 80099f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2205      	movs	r2, #5
 8009a04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a06:	e097      	b.n	8009b38 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	f040 8094 	bne.w	8009b38 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a16:	3301      	adds	r3, #1
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d903      	bls.n	8009a32 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	220d      	movs	r2, #13
 8009a2e:	701a      	strb	r2, [r3, #0]
      break;
 8009a30:	e082      	b.n	8009b38 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	795b      	ldrb	r3, [r3, #5]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 ff9f 	bl	800a97c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	791b      	ldrb	r3, [r3, #4]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 ff99 	bl	800a97c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
      break;
 8009a56:	e06f      	b.n	8009b38 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d019      	beq.n	8009a96 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a6e:	23ff      	movs	r3, #255	; 0xff
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f949 	bl	8009d08 <USBH_Get_StringDesc>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2206      	movs	r2, #6
 8009a84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a86:	e059      	b.n	8009b3c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d156      	bne.n	8009b3c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2206      	movs	r2, #6
 8009a92:	705a      	strb	r2, [r3, #1]
      break;
 8009a94:	e052      	b.n	8009b3c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2206      	movs	r2, #6
 8009a9a:	705a      	strb	r2, [r3, #1]
      break;
 8009a9c:	e04e      	b.n	8009b3c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d019      	beq.n	8009adc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ab4:	23ff      	movs	r3, #255	; 0xff
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f926 	bl	8009d08 <USBH_Get_StringDesc>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d103      	bne.n	8009ace <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2207      	movs	r2, #7
 8009aca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009acc:	e038      	b.n	8009b40 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b03      	cmp	r3, #3
 8009ad2:	d135      	bne.n	8009b40 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2207      	movs	r2, #7
 8009ad8:	705a      	strb	r2, [r3, #1]
      break;
 8009ada:	e031      	b.n	8009b40 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2207      	movs	r2, #7
 8009ae0:	705a      	strb	r2, [r3, #1]
      break;
 8009ae2:	e02d      	b.n	8009b40 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d017      	beq.n	8009b1e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009afa:	23ff      	movs	r3, #255	; 0xff
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f903 	bl	8009d08 <USBH_Get_StringDesc>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d102      	bne.n	8009b12 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b10:	e018      	b.n	8009b44 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d115      	bne.n	8009b44 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b1c:	e012      	b.n	8009b44 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
      break;
 8009b22:	e00f      	b.n	8009b44 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b24:	bf00      	nop
 8009b26:	e00e      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b28:	bf00      	nop
 8009b2a:	e00c      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b2c:	bf00      	nop
 8009b2e:	e00a      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b30:	bf00      	nop
 8009b32:	e008      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b34:	bf00      	nop
 8009b36:	e006      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b38:	bf00      	nop
 8009b3a:	e004      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e002      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b40:	bf00      	nop
 8009b42:	e000      	b.n	8009b46 <USBH_HandleEnum+0x3be>
      break;
 8009b44:	bf00      	nop
  }
  return Status;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f804 	bl	8009b92 <USBH_HandleSof>
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b0b      	cmp	r3, #11
 8009ba2:	d10a      	bne.n	8009bba <USBH_HandleSof+0x28>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009bd2:	bf00      	nop
}
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009bee:	bf00      	nop
}
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f001 f84a 	bl	800ace2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	791b      	ldrb	r3, [r3, #4]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fe91 	bl	800a97c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	795b      	ldrb	r3, [r3, #5]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fe8b 	bl	800a97c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c8e:	2100      	movs	r1, #0
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f864 	bl	8009d5e <USBH_GetDescriptor>
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cac:	78fa      	ldrb	r2, [r7, #3]
 8009cae:	b292      	uxth	r2, r2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f000 f918 	bl	8009ee6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	331c      	adds	r3, #28
 8009cd0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f83d 	bl	8009d5e <USBH_GetDescriptor>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d107      	bne.n	8009cfe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009cee:	887b      	ldrh	r3, [r7, #2]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f987 	bl	800a008 <USBH_ParseCfgDesc>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	461a      	mov	r2, r3
 8009d14:	460b      	mov	r3, r1
 8009d16:	72fb      	strb	r3, [r7, #11]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d24:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d2c:	893b      	ldrh	r3, [r7, #8]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	460b      	mov	r3, r1
 8009d32:	2100      	movs	r1, #0
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f812 	bl	8009d5e <USBH_GetDescriptor>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d107      	bne.n	8009d54 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d4a:	893a      	ldrh	r2, [r7, #8]
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f000 fb24 	bl	800a39c <USBH_ParseStringDesc>
  }

  return status;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	72fb      	strb	r3, [r7, #11]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	789b      	ldrb	r3, [r3, #2]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d11c      	bne.n	8009db2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d78:	7afb      	ldrb	r3, [r7, #11]
 8009d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2206      	movs	r2, #6
 8009d88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	893a      	ldrh	r2, [r7, #8]
 8009d8e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009d90:	893b      	ldrh	r3, [r7, #8]
 8009d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9a:	d104      	bne.n	8009da6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f240 4209 	movw	r2, #1033	; 0x409
 8009da2:	829a      	strh	r2, [r3, #20]
 8009da4:	e002      	b.n	8009dac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8b3a      	ldrh	r2, [r7, #24]
 8009db0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009db2:	8b3b      	ldrh	r3, [r7, #24]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fb3d 	bl	800a438 <USBH_CtlReq>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	789b      	ldrb	r3, [r3, #2]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d10f      	bne.n	8009dfc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2205      	movs	r2, #5
 8009de6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fb19 	bl	800a438 <USBH_CtlReq>
 8009e06:	4603      	mov	r3, r0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	789b      	ldrb	r3, [r3, #2]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d10e      	bne.n	8009e42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2209      	movs	r2, #9
 8009e2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	887a      	ldrh	r2, [r7, #2]
 8009e34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e42:	2200      	movs	r2, #0
 8009e44:	2100      	movs	r1, #0
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 faf6 	bl	800a438 <USBH_CtlReq>
 8009e4c:	4603      	mov	r3, r0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	460b      	mov	r3, r1
 8009e60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	789b      	ldrb	r3, [r3, #2]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d10f      	bne.n	8009e8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2203      	movs	r2, #3
 8009e74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fad2 	bl	800a438 <USBH_CtlReq>
 8009e94:	4603      	mov	r3, r0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	789b      	ldrb	r3, [r3, #2]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d10f      	bne.n	8009ed2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 faae 	bl	800a438 <USBH_CtlReq>
 8009edc:	4603      	mov	r3, r0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	785a      	ldrb	r2, [r3, #1]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3302      	adds	r3, #2
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	3303      	adds	r3, #3
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	791a      	ldrb	r2, [r3, #4]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	795a      	ldrb	r2, [r3, #5]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	799a      	ldrb	r2, [r3, #6]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	79da      	ldrb	r2, [r3, #7]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	79db      	ldrb	r3, [r3, #7]
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	dc11      	bgt.n	8009f6c <USBH_ParseDevDesc+0x86>
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	db16      	blt.n	8009f7a <USBH_ParseDevDesc+0x94>
 8009f4c:	3b08      	subs	r3, #8
 8009f4e:	2201      	movs	r2, #1
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	bf14      	ite	ne
 8009f60:	2301      	movne	r3, #1
 8009f62:	2300      	moveq	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <USBH_ParseDevDesc+0x8a>
 8009f6a:	e006      	b.n	8009f7a <USBH_ParseDevDesc+0x94>
 8009f6c:	2b40      	cmp	r3, #64	; 0x40
 8009f6e:	d104      	bne.n	8009f7a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	79da      	ldrb	r2, [r3, #7]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	71da      	strb	r2, [r3, #7]
      break;
 8009f78:	e003      	b.n	8009f82 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2240      	movs	r2, #64	; 0x40
 8009f7e:	71da      	strb	r2, [r3, #7]
      break;
 8009f80:	bf00      	nop
  }

  if (length > 8U)
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d939      	bls.n	8009ffc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	3309      	adds	r3, #9
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	021b      	lsls	r3, r3, #8
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	330a      	adds	r3, #10
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	330b      	adds	r3, #11
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	330c      	adds	r3, #12
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	330d      	adds	r3, #13
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	021b      	lsls	r3, r3, #8
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	7b9a      	ldrb	r2, [r3, #14]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	7bda      	ldrb	r2, [r3, #15]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	7c1a      	ldrb	r2, [r3, #16]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	7c5a      	ldrb	r2, [r3, #17]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	745a      	strb	r2, [r3, #17]
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08c      	sub	sp, #48	; 0x30
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a01c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	785a      	ldrb	r2, [r3, #1]
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3302      	adds	r3, #2
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3303      	adds	r3, #3
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b29b      	uxth	r3, r3
 800a060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a064:	bf28      	it	cs
 800a066:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	791a      	ldrb	r2, [r3, #4]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	795a      	ldrb	r2, [r3, #5]
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	799a      	ldrb	r2, [r3, #6]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	79da      	ldrb	r2, [r3, #7]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	7a1a      	ldrb	r2, [r3, #8]
 800a094:	6a3b      	ldr	r3, [r7, #32]
 800a096:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b09      	cmp	r3, #9
 800a09e:	d002      	beq.n	800a0a6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2209      	movs	r2, #9
 800a0a4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	f240 809d 	bls.w	800a1e8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0ae:	2309      	movs	r3, #9
 800a0b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0b6:	e081      	b.n	800a1bc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0b8:	f107 0316 	add.w	r3, r7, #22
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c0:	f000 f99f 	bl	800a402 <USBH_GetNextDesc>
 800a0c4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	d176      	bne.n	800a1bc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d002      	beq.n	800a0dc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	2209      	movs	r2, #9
 800a0da:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0e0:	221a      	movs	r2, #26
 800a0e2:	fb02 f303 	mul.w	r3, r2, r3
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	6a3a      	ldr	r2, [r7, #32]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0f2:	69f8      	ldr	r0, [r7, #28]
 800a0f4:	f000 f87e 	bl	800a1f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a102:	e043      	b.n	800a18c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a104:	f107 0316 	add.w	r3, r7, #22
 800a108:	4619      	mov	r1, r3
 800a10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10c:	f000 f979 	bl	800a402 <USBH_GetNextDesc>
 800a110:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	785b      	ldrb	r3, [r3, #1]
 800a116:	2b05      	cmp	r3, #5
 800a118:	d138      	bne.n	800a18c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	795b      	ldrb	r3, [r3, #5]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10f      	bne.n	800a142 <USBH_ParseCfgDesc+0x13a>
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	799b      	ldrb	r3, [r3, #6]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d10b      	bne.n	800a142 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	79db      	ldrb	r3, [r3, #7]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <USBH_ParseCfgDesc+0x14a>
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b09      	cmp	r3, #9
 800a138:	d00b      	beq.n	800a152 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	2209      	movs	r2, #9
 800a13e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a140:	e007      	b.n	800a152 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b07      	cmp	r3, #7
 800a148:	d004      	beq.n	800a154 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	2207      	movs	r2, #7
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e000      	b.n	800a154 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a152:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a158:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a15c:	3201      	adds	r2, #1
 800a15e:	00d2      	lsls	r2, r2, #3
 800a160:	211a      	movs	r1, #26
 800a162:	fb01 f303 	mul.w	r3, r1, r3
 800a166:	4413      	add	r3, r2
 800a168:	3308      	adds	r3, #8
 800a16a:	6a3a      	ldr	r2, [r7, #32]
 800a16c:	4413      	add	r3, r2
 800a16e:	3304      	adds	r3, #4
 800a170:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a174:	69b9      	ldr	r1, [r7, #24]
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 f86b 	bl	800a252 <USBH_ParseEPDesc>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a186:	3301      	adds	r3, #1
 800a188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	791b      	ldrb	r3, [r3, #4]
 800a190:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a194:	429a      	cmp	r2, r3
 800a196:	d204      	bcs.n	800a1a2 <USBH_ParseCfgDesc+0x19a>
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	885a      	ldrh	r2, [r3, #2]
 800a19c:	8afb      	ldrh	r3, [r7, #22]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d8b0      	bhi.n	800a104 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d201      	bcs.n	800a1b2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e01c      	b.n	800a1ec <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d805      	bhi.n	800a1d0 <USBH_ParseCfgDesc+0x1c8>
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	885a      	ldrh	r2, [r3, #2]
 800a1c8:	8afb      	ldrh	r3, [r7, #22]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	f63f af74 	bhi.w	800a0b8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	791b      	ldrb	r3, [r3, #4]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	bf28      	it	cs
 800a1d8:	2302      	movcs	r3, #2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d201      	bcs.n	800a1e8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e001      	b.n	800a1ec <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3730      	adds	r7, #48	; 0x30
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	785a      	ldrb	r2, [r3, #1]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	789a      	ldrb	r2, [r3, #2]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	78da      	ldrb	r2, [r3, #3]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	791a      	ldrb	r2, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	795a      	ldrb	r2, [r3, #5]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	799a      	ldrb	r2, [r3, #6]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	79da      	ldrb	r2, [r3, #7]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	7a1a      	ldrb	r2, [r3, #8]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	721a      	strb	r2, [r3, #8]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a252:	b480      	push	{r7}
 800a254:	b087      	sub	sp, #28
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	781a      	ldrb	r2, [r3, #0]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	785a      	ldrb	r2, [r3, #1]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	789a      	ldrb	r2, [r3, #2]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	78da      	ldrb	r2, [r3, #3]
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3304      	adds	r3, #4
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3305      	adds	r3, #5
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b29b      	uxth	r3, r3
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	b29b      	uxth	r3, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	799a      	ldrb	r2, [r3, #6]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	889b      	ldrh	r3, [r3, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	75fb      	strb	r3, [r7, #23]
 800a2b2:	e033      	b.n	800a31c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	889b      	ldrh	r3, [r3, #4]
 800a2b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2bc:	f023 0307 	bic.w	r3, r3, #7
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	b21a      	sxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	b299      	uxth	r1, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3305      	adds	r3, #5
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d110      	bne.n	800a30e <USBH_ParseEPDesc+0xbc>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b299      	uxth	r1, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3305      	adds	r3, #5
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	430b      	orrs	r3, r1
 800a302:	b29b      	uxth	r3, r3
 800a304:	b21b      	sxth	r3, r3
 800a306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	e001      	b.n	800a312 <USBH_ParseEPDesc+0xc0>
 800a30e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a312:	4313      	orrs	r3, r2
 800a314:	b21b      	sxth	r3, r3
 800a316:	b29a      	uxth	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a322:	2b00      	cmp	r3, #0
 800a324:	d116      	bne.n	800a354 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	78db      	ldrb	r3, [r3, #3]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d005      	beq.n	800a33e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	78db      	ldrb	r3, [r3, #3]
 800a336:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d127      	bne.n	800a38e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	799b      	ldrb	r3, [r3, #6]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <USBH_ParseEPDesc+0xfc>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	799b      	ldrb	r3, [r3, #6]
 800a34a:	2b10      	cmp	r3, #16
 800a34c:	d91f      	bls.n	800a38e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a34e:	2303      	movs	r3, #3
 800a350:	75fb      	strb	r3, [r7, #23]
 800a352:	e01c      	b.n	800a38e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	78db      	ldrb	r3, [r3, #3]
 800a358:	f003 0303 	and.w	r3, r3, #3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d10a      	bne.n	800a376 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	799b      	ldrb	r3, [r3, #6]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <USBH_ParseEPDesc+0x11e>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	799b      	ldrb	r3, [r3, #6]
 800a36c:	2b10      	cmp	r3, #16
 800a36e:	d90e      	bls.n	800a38e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a370:	2303      	movs	r3, #3
 800a372:	75fb      	strb	r3, [r7, #23]
 800a374:	e00b      	b.n	800a38e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	78db      	ldrb	r3, [r3, #3]
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d105      	bne.n	800a38e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	799b      	ldrb	r3, [r3, #6]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a38a:	2303      	movs	r3, #3
 800a38c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a390:	4618      	mov	r0, r3
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d120      	bne.n	800a3f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	1e9a      	subs	r2, r3, #2
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	bf28      	it	cs
 800a3c0:	4613      	movcs	r3, r2
 800a3c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	82fb      	strh	r3, [r7, #22]
 800a3ce:	e00b      	b.n	800a3e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3d0:	8afb      	ldrh	r3, [r7, #22]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	781a      	ldrb	r2, [r3, #0]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3e2:	8afb      	ldrh	r3, [r7, #22]
 800a3e4:	3302      	adds	r3, #2
 800a3e6:	82fb      	strh	r3, [r7, #22]
 800a3e8:	8afa      	ldrh	r2, [r7, #22]
 800a3ea:	8abb      	ldrh	r3, [r7, #20]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d3ef      	bcc.n	800a3d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	4413      	add	r3, r2
 800a418:	b29a      	uxth	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4413      	add	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a42a:	68fb      	ldr	r3, [r7, #12]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a446:	2301      	movs	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	789b      	ldrb	r3, [r3, #2]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d002      	beq.n	800a458 <USBH_CtlReq+0x20>
 800a452:	2b02      	cmp	r3, #2
 800a454:	d00f      	beq.n	800a476 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a456:	e027      	b.n	800a4a8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	88fa      	ldrh	r2, [r7, #6]
 800a462:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2201      	movs	r2, #1
 800a468:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2202      	movs	r2, #2
 800a46e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a470:	2301      	movs	r3, #1
 800a472:	75fb      	strb	r3, [r7, #23]
      break;
 800a474:	e018      	b.n	800a4a8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 f81c 	bl	800a4b4 <USBH_HandleControl>
 800a47c:	4603      	mov	r3, r0
 800a47e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <USBH_CtlReq+0x54>
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d106      	bne.n	800a49a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	761a      	strb	r2, [r3, #24]
      break;
 800a498:	e005      	b.n	800a4a6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d102      	bne.n	800a4a6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	709a      	strb	r2, [r3, #2]
      break;
 800a4a6:	bf00      	nop
  }
  return status;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	7e1b      	ldrb	r3, [r3, #24]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	2b0a      	cmp	r3, #10
 800a4cc:	f200 8156 	bhi.w	800a77c <USBH_HandleControl+0x2c8>
 800a4d0:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <USBH_HandleControl+0x24>)
 800a4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d6:	bf00      	nop
 800a4d8:	0800a505 	.word	0x0800a505
 800a4dc:	0800a51f 	.word	0x0800a51f
 800a4e0:	0800a589 	.word	0x0800a589
 800a4e4:	0800a5af 	.word	0x0800a5af
 800a4e8:	0800a5e7 	.word	0x0800a5e7
 800a4ec:	0800a611 	.word	0x0800a611
 800a4f0:	0800a663 	.word	0x0800a663
 800a4f4:	0800a685 	.word	0x0800a685
 800a4f8:	0800a6c1 	.word	0x0800a6c1
 800a4fc:	0800a6e7 	.word	0x0800a6e7
 800a500:	0800a725 	.word	0x0800a725
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f103 0110 	add.w	r1, r3, #16
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	795b      	ldrb	r3, [r3, #5]
 800a50e:	461a      	mov	r2, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f943 	bl	800a79c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2202      	movs	r2, #2
 800a51a:	761a      	strb	r2, [r3, #24]
      break;
 800a51c:	e139      	b.n	800a792 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	795b      	ldrb	r3, [r3, #5]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fccb 	bl	800aec0 <USBH_LL_GetURBState>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d11e      	bne.n	800a572 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	7c1b      	ldrb	r3, [r3, #16]
 800a538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a53c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8adb      	ldrh	r3, [r3, #22]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a546:	7b7b      	ldrb	r3, [r7, #13]
 800a548:	2b80      	cmp	r3, #128	; 0x80
 800a54a:	d103      	bne.n	800a554 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2203      	movs	r2, #3
 800a550:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a552:	e115      	b.n	800a780 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2205      	movs	r2, #5
 800a558:	761a      	strb	r2, [r3, #24]
      break;
 800a55a:	e111      	b.n	800a780 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a55c:	7b7b      	ldrb	r3, [r7, #13]
 800a55e:	2b80      	cmp	r3, #128	; 0x80
 800a560:	d103      	bne.n	800a56a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2209      	movs	r2, #9
 800a566:	761a      	strb	r2, [r3, #24]
      break;
 800a568:	e10a      	b.n	800a780 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2207      	movs	r2, #7
 800a56e:	761a      	strb	r2, [r3, #24]
      break;
 800a570:	e106      	b.n	800a780 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b04      	cmp	r3, #4
 800a576:	d003      	beq.n	800a580 <USBH_HandleControl+0xcc>
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	f040 8100 	bne.w	800a780 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	220b      	movs	r2, #11
 800a584:	761a      	strb	r2, [r3, #24]
      break;
 800a586:	e0fb      	b.n	800a780 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6899      	ldr	r1, [r3, #8]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	899a      	ldrh	r2, [r3, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	791b      	ldrb	r3, [r3, #4]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f93a 	bl	800a81a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2204      	movs	r2, #4
 800a5aa:	761a      	strb	r2, [r3, #24]
      break;
 800a5ac:	e0f1      	b.n	800a792 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fc83 	bl	800aec0 <USBH_LL_GetURBState>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d102      	bne.n	800a5ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2209      	movs	r2, #9
 800a5c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
 800a5cc:	2b05      	cmp	r3, #5
 800a5ce:	d102      	bne.n	800a5d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5d4:	e0d6      	b.n	800a784 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	f040 80d3 	bne.w	800a784 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	220b      	movs	r2, #11
 800a5e2:	761a      	strb	r2, [r3, #24]
      break;
 800a5e4:	e0ce      	b.n	800a784 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6899      	ldr	r1, [r3, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	899a      	ldrh	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	795b      	ldrb	r3, [r3, #5]
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	9000      	str	r0, [sp, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f8ea 	bl	800a7d0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2206      	movs	r2, #6
 800a60c:	761a      	strb	r2, [r3, #24]
      break;
 800a60e:	e0c0      	b.n	800a792 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	795b      	ldrb	r3, [r3, #5]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fc52 	bl	800aec0 <USBH_LL_GetURBState>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d103      	bne.n	800a62e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2207      	movs	r2, #7
 800a62a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a62c:	e0ac      	b.n	800a788 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	2b05      	cmp	r3, #5
 800a632:	d105      	bne.n	800a640 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	220c      	movs	r2, #12
 800a638:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a63a:	2303      	movs	r3, #3
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e0a3      	b.n	800a788 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d103      	bne.n	800a64e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2205      	movs	r2, #5
 800a64a:	761a      	strb	r2, [r3, #24]
      break;
 800a64c:	e09c      	b.n	800a788 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	2b04      	cmp	r3, #4
 800a652:	f040 8099 	bne.w	800a788 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	220b      	movs	r2, #11
 800a65a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a65c:	2302      	movs	r3, #2
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e092      	b.n	800a788 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	791b      	ldrb	r3, [r3, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8d5 	bl	800a81a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2208      	movs	r2, #8
 800a680:	761a      	strb	r2, [r3, #24]

      break;
 800a682:	e086      	b.n	800a792 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	791b      	ldrb	r3, [r3, #4]
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fc18 	bl	800aec0 <USBH_LL_GetURBState>
 800a690:	4603      	mov	r3, r0
 800a692:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d105      	bne.n	800a6a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	220d      	movs	r2, #13
 800a69e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6a4:	e072      	b.n	800a78c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d103      	bne.n	800a6b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	220b      	movs	r2, #11
 800a6b0:	761a      	strb	r2, [r3, #24]
      break;
 800a6b2:	e06b      	b.n	800a78c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d168      	bne.n	800a78c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6be:	e065      	b.n	800a78c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	795b      	ldrb	r3, [r3, #5]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	9200      	str	r2, [sp, #0]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f87f 	bl	800a7d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	220a      	movs	r2, #10
 800a6e2:	761a      	strb	r2, [r3, #24]
      break;
 800a6e4:	e055      	b.n	800a792 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	795b      	ldrb	r3, [r3, #5]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 fbe7 	bl	800aec0 <USBH_LL_GetURBState>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d105      	bne.n	800a708 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	220d      	movs	r2, #13
 800a704:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a706:	e043      	b.n	800a790 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d103      	bne.n	800a716 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2209      	movs	r2, #9
 800a712:	761a      	strb	r2, [r3, #24]
      break;
 800a714:	e03c      	b.n	800a790 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d139      	bne.n	800a790 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	220b      	movs	r2, #11
 800a720:	761a      	strb	r2, [r3, #24]
      break;
 800a722:	e035      	b.n	800a790 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7e5b      	ldrb	r3, [r3, #25]
 800a728:	3301      	adds	r3, #1
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	765a      	strb	r2, [r3, #25]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	7e5b      	ldrb	r3, [r3, #25]
 800a734:	2b02      	cmp	r3, #2
 800a736:	d806      	bhi.n	800a746 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a744:	e025      	b.n	800a792 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a74c:	2106      	movs	r1, #6
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	795b      	ldrb	r3, [r3, #5]
 800a75c:	4619      	mov	r1, r3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f90c 	bl	800a97c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	791b      	ldrb	r3, [r3, #4]
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f906 	bl	800a97c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a776:	2302      	movs	r3, #2
 800a778:	73fb      	strb	r3, [r7, #15]
      break;
 800a77a:	e00a      	b.n	800a792 <USBH_HandleControl+0x2de>

    default:
      break;
 800a77c:	bf00      	nop
 800a77e:	e008      	b.n	800a792 <USBH_HandleControl+0x2de>
      break;
 800a780:	bf00      	nop
 800a782:	e006      	b.n	800a792 <USBH_HandleControl+0x2de>
      break;
 800a784:	bf00      	nop
 800a786:	e004      	b.n	800a792 <USBH_HandleControl+0x2de>
      break;
 800a788:	bf00      	nop
 800a78a:	e002      	b.n	800a792 <USBH_HandleControl+0x2de>
      break;
 800a78c:	bf00      	nop
 800a78e:	e000      	b.n	800a792 <USBH_HandleControl+0x2de>
      break;
 800a790:	bf00      	nop
  }

  return status;
 800a792:	7bfb      	ldrb	r3, [r7, #15]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af04      	add	r7, sp, #16
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7aa:	79f9      	ldrb	r1, [r7, #7]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	9302      	str	r3, [sp, #8]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	2200      	movs	r2, #0
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 fb4c 	bl	800ae5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af04      	add	r7, sp, #16
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	461a      	mov	r2, r3
 800a7de:	460b      	mov	r3, r1
 800a7e0:	80fb      	strh	r3, [r7, #6]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7f4:	7979      	ldrb	r1, [r7, #5]
 800a7f6:	7e3b      	ldrb	r3, [r7, #24]
 800a7f8:	9303      	str	r3, [sp, #12]
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	9302      	str	r3, [sp, #8]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	2301      	movs	r3, #1
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	2300      	movs	r3, #0
 800a808:	2200      	movs	r2, #0
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 fb27 	bl	800ae5e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b088      	sub	sp, #32
 800a81e:	af04      	add	r7, sp, #16
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	4611      	mov	r1, r2
 800a826:	461a      	mov	r2, r3
 800a828:	460b      	mov	r3, r1
 800a82a:	80fb      	strh	r3, [r7, #6]
 800a82c:	4613      	mov	r3, r2
 800a82e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a830:	7979      	ldrb	r1, [r7, #5]
 800a832:	2300      	movs	r3, #0
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	88fb      	ldrh	r3, [r7, #6]
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	2301      	movs	r3, #1
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	2300      	movs	r3, #0
 800a844:	2201      	movs	r2, #1
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fb09 	bl	800ae5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a84c:	2300      	movs	r3, #0

}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b088      	sub	sp, #32
 800a85a:	af04      	add	r7, sp, #16
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	60b9      	str	r1, [r7, #8]
 800a860:	4611      	mov	r1, r2
 800a862:	461a      	mov	r2, r3
 800a864:	460b      	mov	r3, r1
 800a866:	80fb      	strh	r3, [r7, #6]
 800a868:	4613      	mov	r3, r2
 800a86a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a87a:	7979      	ldrb	r1, [r7, #5]
 800a87c:	7e3b      	ldrb	r3, [r7, #24]
 800a87e:	9303      	str	r3, [sp, #12]
 800a880:	88fb      	ldrh	r3, [r7, #6]
 800a882:	9302      	str	r3, [sp, #8]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	2301      	movs	r3, #1
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	2302      	movs	r3, #2
 800a88e:	2200      	movs	r2, #0
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 fae4 	bl	800ae5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af04      	add	r7, sp, #16
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	80fb      	strh	r3, [r7, #6]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8b6:	7979      	ldrb	r1, [r7, #5]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	88fb      	ldrh	r3, [r7, #6]
 800a8be:	9302      	str	r3, [sp, #8]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 fac6 	bl	800ae5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af04      	add	r7, sp, #16
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	4611      	mov	r1, r2
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	70fb      	strb	r3, [r7, #3]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70bb      	strb	r3, [r7, #2]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8f6:	7878      	ldrb	r0, [r7, #1]
 800a8f8:	78ba      	ldrb	r2, [r7, #2]
 800a8fa:	78f9      	ldrb	r1, [r7, #3]
 800a8fc:	8b3b      	ldrh	r3, [r7, #24]
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	7d3b      	ldrb	r3, [r7, #20]
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	7c3b      	ldrb	r3, [r7, #16]
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	4603      	mov	r3, r0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa59 	bl	800adc2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fa78 	bl	800ae20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f836 	bl	800a9b8 <USBH_GetFreePipe>
 800a94c:	4603      	mov	r3, r0
 800a94e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a950:	89fb      	ldrh	r3, [r7, #14]
 800a952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a956:	4293      	cmp	r3, r2
 800a958:	d00a      	beq.n	800a970 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a95a:	78fa      	ldrb	r2, [r7, #3]
 800a95c:	89fb      	ldrh	r3, [r7, #14]
 800a95e:	f003 030f 	and.w	r3, r3, #15
 800a962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	33e0      	adds	r3, #224	; 0xe0
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	b2db      	uxtb	r3, r3
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d80d      	bhi.n	800a9aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	33e0      	adds	r3, #224	; 0xe0
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	33e0      	adds	r3, #224	; 0xe0
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	440b      	add	r3, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
 800a9c8:	e00f      	b.n	800a9ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	33e0      	adds	r3, #224	; 0xe0
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d102      	bne.n	800a9e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	e007      	b.n	800a9f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b0f      	cmp	r3, #15
 800a9ee:	d9ec      	bls.n	800a9ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800aa04:	2200      	movs	r2, #0
 800aa06:	490e      	ldr	r1, [pc, #56]	; (800aa40 <MX_USB_HOST_Init+0x40>)
 800aa08:	480e      	ldr	r0, [pc, #56]	; (800aa44 <MX_USB_HOST_Init+0x44>)
 800aa0a:	f7fe fba7 	bl	800915c <USBH_Init>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa14:	f7f6 fa46 	bl	8000ea4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800aa18:	490b      	ldr	r1, [pc, #44]	; (800aa48 <MX_USB_HOST_Init+0x48>)
 800aa1a:	480a      	ldr	r0, [pc, #40]	; (800aa44 <MX_USB_HOST_Init+0x44>)
 800aa1c:	f7fe fc2c 	bl	8009278 <USBH_RegisterClass>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa26:	f7f6 fa3d 	bl	8000ea4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800aa2a:	4806      	ldr	r0, [pc, #24]	; (800aa44 <MX_USB_HOST_Init+0x44>)
 800aa2c:	f7fe fcb0 	bl	8009390 <USBH_Start>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa36:	f7f6 fa35 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa3a:	bf00      	nop
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	200007e0 	.word	0x200007e0
 800aa48:	20000010 	.word	0x20000010

0800aa4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800aa50:	4802      	ldr	r0, [pc, #8]	; (800aa5c <MX_USB_HOST_Process+0x10>)
 800aa52:	f7fe fcad 	bl	80093b0 <USBH_Process>
}
 800aa56:	bf00      	nop
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	200007e0 	.word	0x200007e0

0800aa60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	d819      	bhi.n	800aaa8 <USBH_UserProcess+0x48>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <USBH_UserProcess+0x1c>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	0800aa99 	.word	0x0800aa99
 800aa84:	0800aaa9 	.word	0x0800aaa9
 800aa88:	0800aaa1 	.word	0x0800aaa1
 800aa8c:	0800aa91 	.word	0x0800aa91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa90:	4b09      	ldr	r3, [pc, #36]	; (800aab8 <USBH_UserProcess+0x58>)
 800aa92:	2203      	movs	r2, #3
 800aa94:	701a      	strb	r2, [r3, #0]
  break;
 800aa96:	e008      	b.n	800aaaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa98:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <USBH_UserProcess+0x58>)
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	701a      	strb	r2, [r3, #0]
  break;
 800aa9e:	e004      	b.n	800aaaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <USBH_UserProcess+0x58>)
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	701a      	strb	r2, [r3, #0]
  break;
 800aaa6:	e000      	b.n	800aaaa <USBH_UserProcess+0x4a>

  default:
  break;
 800aaa8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20000bb8 	.word	0x20000bb8

0800aabc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b08a      	sub	sp, #40	; 0x28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac4:	f107 0314 	add.w	r3, r7, #20
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a24      	ldr	r2, [pc, #144]	; (800ab6c <HAL_HCD_MspInit+0xb0>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d141      	bne.n	800ab62 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800aae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae6:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800aae8:	f043 0302 	orr.w	r3, r3, #2
 800aaec:	6313      	str	r3, [r2, #48]	; 0x30
 800aaee:	4b20      	ldr	r3, [pc, #128]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	613b      	str	r3, [r7, #16]
 800aaf8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800aafa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800aafe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab00:	2302      	movs	r3, #2
 800ab02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ab0c:	230c      	movs	r3, #12
 800ab0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab10:	f107 0314 	add.w	r3, r7, #20
 800ab14:	4619      	mov	r1, r3
 800ab16:	4817      	ldr	r0, [pc, #92]	; (800ab74 <HAL_HCD_MspInit+0xb8>)
 800ab18:	f7f8 fbb4 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ab1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab22:	2300      	movs	r3, #0
 800ab24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4810      	ldr	r0, [pc, #64]	; (800ab74 <HAL_HCD_MspInit+0xb8>)
 800ab32:	f7f8 fba7 	bl	8003284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800ab3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3e:	4a0c      	ldr	r2, [pc, #48]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800ab40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab44:	6313      	str	r3, [r2, #48]	; 0x30
 800ab46:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <HAL_HCD_MspInit+0xb4>)
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ab52:	2200      	movs	r2, #0
 800ab54:	2100      	movs	r1, #0
 800ab56:	204d      	movs	r0, #77	; 0x4d
 800ab58:	f7f7 fe59 	bl	800280e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ab5c:	204d      	movs	r0, #77	; 0x4d
 800ab5e:	f7f7 fe72 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ab62:	bf00      	nop
 800ab64:	3728      	adds	r7, #40	; 0x28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	40040000 	.word	0x40040000
 800ab70:	40023800 	.word	0x40023800
 800ab74:	40020400 	.word	0x40020400

0800ab78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe fff1 	bl	8009b6e <USBH_LL_IncTimer>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff f829 	bl	8009bfa <USBH_LL_Connect>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff f832 	bl	8009c28 <USBH_LL_Disconnect>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	4613      	mov	r3, r2
 800abda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe ffe3 	bl	8009bc2 <USBH_LL_PortEnabled>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe ffe3 	bl	8009bde <USBH_LL_PortDisabled>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d132      	bne.n	800ac98 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ac32:	4a1c      	ldr	r2, [pc, #112]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a19      	ldr	r2, [pc, #100]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac3e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ac42:	4b18      	ldr	r3, [pc, #96]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac44:	4a18      	ldr	r2, [pc, #96]	; (800aca8 <USBH_LL_Init+0x88>)
 800ac46:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ac48:	4b16      	ldr	r3, [pc, #88]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac4a:	220c      	movs	r2, #12
 800ac4c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ac4e:	4b15      	ldr	r3, [pc, #84]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac50:	2201      	movs	r2, #1
 800ac52:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ac5a:	4b12      	ldr	r3, [pc, #72]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ac60:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ac66:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ac72:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ac78:	480a      	ldr	r0, [pc, #40]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac7a:	f7f8 fcc8 	bl	800360e <HAL_HCD_Init>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ac84:	f7f6 f90e 	bl	8000ea4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ac88:	4806      	ldr	r0, [pc, #24]	; (800aca4 <USBH_LL_Init+0x84>)
 800ac8a:	f7f9 f8ac 	bl	8003de6 <HAL_HCD_GetCurrentFrame>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7fe ff5c 	bl	8009b50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20000bbc 	.word	0x20000bbc
 800aca8:	40040000 	.word	0x40040000

0800acac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f9 f819 	bl	8003cfa <HAL_HCD_Start>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f95c 	bl	800af8c <USBH_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f9 f821 	bl	8003d40 <HAL_HCD_Stop>
 800acfe:	4603      	mov	r3, r0
 800ad00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f941 	bl	800af8c <USBH_Get_USB_Status>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f9 f869 	bl	8003e02 <HAL_HCD_GetCurrentSpeed>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d00c      	beq.n	800ad50 <USBH_LL_GetSpeed+0x38>
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d80d      	bhi.n	800ad56 <USBH_LL_GetSpeed+0x3e>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <USBH_LL_GetSpeed+0x2c>
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d003      	beq.n	800ad4a <USBH_LL_GetSpeed+0x32>
 800ad42:	e008      	b.n	800ad56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
    break;
 800ad48:	e008      	b.n	800ad5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4e:	e005      	b.n	800ad5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad50:	2302      	movs	r3, #2
 800ad52:	73fb      	strb	r3, [r7, #15]
    break;
 800ad54:	e002      	b.n	800ad5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad56:	2301      	movs	r3, #1
 800ad58:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5a:	bf00      	nop
  }
  return  speed;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f8 fffc 	bl	8003d7a <HAL_HCD_ResetPort>
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f8ff 	bl	800af8c <USBH_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7f9 f803 	bl	8003dbe <HAL_HCD_HC_GetXferCount>
 800adb8:	4603      	mov	r3, r0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adc2:	b590      	push	{r4, r7, lr}
 800adc4:	b089      	sub	sp, #36	; 0x24
 800adc6:	af04      	add	r7, sp, #16
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	4608      	mov	r0, r1
 800adcc:	4611      	mov	r1, r2
 800adce:	461a      	mov	r2, r3
 800add0:	4603      	mov	r3, r0
 800add2:	70fb      	strb	r3, [r7, #3]
 800add4:	460b      	mov	r3, r1
 800add6:	70bb      	strb	r3, [r7, #2]
 800add8:	4613      	mov	r3, r2
 800adda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800adea:	787c      	ldrb	r4, [r7, #1]
 800adec:	78ba      	ldrb	r2, [r7, #2]
 800adee:	78f9      	ldrb	r1, [r7, #3]
 800adf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	4623      	mov	r3, r4
 800ae02:	f7f8 fc66 	bl	80036d2 <HAL_HCD_HC_Init>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f8bd 	bl	800af8c <USBH_Get_USB_Status>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd90      	pop	{r4, r7, pc}

0800ae20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7f8 fcd6 	bl	80037f0 <HAL_HCD_HC_Halt>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f89e 	bl	800af8c <USBH_Get_USB_Status>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae5e:	b590      	push	{r4, r7, lr}
 800ae60:	b089      	sub	sp, #36	; 0x24
 800ae62:	af04      	add	r7, sp, #16
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	4608      	mov	r0, r1
 800ae68:	4611      	mov	r1, r2
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	70fb      	strb	r3, [r7, #3]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70bb      	strb	r3, [r7, #2]
 800ae74:	4613      	mov	r3, r2
 800ae76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae86:	787c      	ldrb	r4, [r7, #1]
 800ae88:	78ba      	ldrb	r2, [r7, #2]
 800ae8a:	78f9      	ldrb	r1, [r7, #3]
 800ae8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	4623      	mov	r3, r4
 800aea2:	f7f8 fcc9 	bl	8003838 <HAL_HCD_HC_SubmitRequest>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 f86d 	bl	800af8c <USBH_Get_USB_Status>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd90      	pop	{r4, r7, pc}

0800aec0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f8 ff5d 	bl	8003d96 <HAL_HCD_HC_GetURBState>
 800aedc:	4603      	mov	r3, r0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d103      	bne.n	800af04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800aefc:	78fb      	ldrb	r3, [r7, #3]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 f870 	bl	800afe4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af04:	20c8      	movs	r0, #200	; 0xc8
 800af06:	f7f7 fb8f 	bl	8002628 <HAL_Delay>
  return USBH_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
 800af20:	4613      	mov	r3, r2
 800af22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	212c      	movs	r1, #44	; 0x2c
 800af32:	fb01 f303 	mul.w	r3, r1, r3
 800af36:	4413      	add	r3, r2
 800af38:	333b      	adds	r3, #59	; 0x3b
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d009      	beq.n	800af54 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	212c      	movs	r1, #44	; 0x2c
 800af46:	fb01 f303 	mul.w	r3, r1, r3
 800af4a:	4413      	add	r3, r2
 800af4c:	3354      	adds	r3, #84	; 0x54
 800af4e:	78ba      	ldrb	r2, [r7, #2]
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e008      	b.n	800af66 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	212c      	movs	r1, #44	; 0x2c
 800af5a:	fb01 f303 	mul.w	r3, r1, r3
 800af5e:	4413      	add	r3, r2
 800af60:	3355      	adds	r3, #85	; 0x55
 800af62:	78ba      	ldrb	r2, [r7, #2]
 800af64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7f7 fb53 	bl	8002628 <HAL_Delay>
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
	...

0800af8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d817      	bhi.n	800afd0 <USBH_Get_USB_Status+0x44>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <USBH_Get_USB_Status+0x1c>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afbf 	.word	0x0800afbf
 800afb0:	0800afc5 	.word	0x0800afc5
 800afb4:	0800afcb 	.word	0x0800afcb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]
    break;
 800afbc:	e00b      	b.n	800afd6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afbe:	2302      	movs	r3, #2
 800afc0:	73fb      	strb	r3, [r7, #15]
    break;
 800afc2:	e008      	b.n	800afd6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
    break;
 800afc8:	e005      	b.n	800afd6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afca:	2302      	movs	r3, #2
 800afcc:	73fb      	strb	r3, [r7, #15]
    break;
 800afce:	e002      	b.n	800afd6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afd0:	2302      	movs	r3, #2
 800afd2:	73fb      	strb	r3, [r7, #15]
    break;
 800afd4:	bf00      	nop
  }
  return usb_status;
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	4603      	mov	r3, r0
 800afec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e001      	b.n	800b002 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	461a      	mov	r2, r3
 800b006:	2110      	movs	r1, #16
 800b008:	4803      	ldr	r0, [pc, #12]	; (800b018 <MX_DriverVbusHS+0x34>)
 800b00a:	f7f8 fae7 	bl	80035dc <HAL_GPIO_WritePin>
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	40020800 	.word	0x40020800

0800b01c <__errno>:
 800b01c:	4b01      	ldr	r3, [pc, #4]	; (800b024 <__errno+0x8>)
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	20000030 	.word	0x20000030

0800b028 <__libc_init_array>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	4d0d      	ldr	r5, [pc, #52]	; (800b060 <__libc_init_array+0x38>)
 800b02c:	4c0d      	ldr	r4, [pc, #52]	; (800b064 <__libc_init_array+0x3c>)
 800b02e:	1b64      	subs	r4, r4, r5
 800b030:	10a4      	asrs	r4, r4, #2
 800b032:	2600      	movs	r6, #0
 800b034:	42a6      	cmp	r6, r4
 800b036:	d109      	bne.n	800b04c <__libc_init_array+0x24>
 800b038:	4d0b      	ldr	r5, [pc, #44]	; (800b068 <__libc_init_array+0x40>)
 800b03a:	4c0c      	ldr	r4, [pc, #48]	; (800b06c <__libc_init_array+0x44>)
 800b03c:	f001 f834 	bl	800c0a8 <_init>
 800b040:	1b64      	subs	r4, r4, r5
 800b042:	10a4      	asrs	r4, r4, #2
 800b044:	2600      	movs	r6, #0
 800b046:	42a6      	cmp	r6, r4
 800b048:	d105      	bne.n	800b056 <__libc_init_array+0x2e>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b050:	4798      	blx	r3
 800b052:	3601      	adds	r6, #1
 800b054:	e7ee      	b.n	800b034 <__libc_init_array+0xc>
 800b056:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05a:	4798      	blx	r3
 800b05c:	3601      	adds	r6, #1
 800b05e:	e7f2      	b.n	800b046 <__libc_init_array+0x1e>
 800b060:	0800cae4 	.word	0x0800cae4
 800b064:	0800cae4 	.word	0x0800cae4
 800b068:	0800cae4 	.word	0x0800cae4
 800b06c:	0800cae8 	.word	0x0800cae8

0800b070 <malloc>:
 800b070:	4b02      	ldr	r3, [pc, #8]	; (800b07c <malloc+0xc>)
 800b072:	4601      	mov	r1, r0
 800b074:	6818      	ldr	r0, [r3, #0]
 800b076:	f000 b87f 	b.w	800b178 <_malloc_r>
 800b07a:	bf00      	nop
 800b07c:	20000030 	.word	0x20000030

0800b080 <free>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <free+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f000 b80b 	b.w	800b0a0 <_free_r>
 800b08a:	bf00      	nop
 800b08c:	20000030 	.word	0x20000030

0800b090 <memset>:
 800b090:	4402      	add	r2, r0
 800b092:	4603      	mov	r3, r0
 800b094:	4293      	cmp	r3, r2
 800b096:	d100      	bne.n	800b09a <memset+0xa>
 800b098:	4770      	bx	lr
 800b09a:	f803 1b01 	strb.w	r1, [r3], #1
 800b09e:	e7f9      	b.n	800b094 <memset+0x4>

0800b0a0 <_free_r>:
 800b0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0a2:	2900      	cmp	r1, #0
 800b0a4:	d044      	beq.n	800b130 <_free_r+0x90>
 800b0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0aa:	9001      	str	r0, [sp, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b0b2:	bfb8      	it	lt
 800b0b4:	18e4      	addlt	r4, r4, r3
 800b0b6:	f000 fc51 	bl	800b95c <__malloc_lock>
 800b0ba:	4a1e      	ldr	r2, [pc, #120]	; (800b134 <_free_r+0x94>)
 800b0bc:	9801      	ldr	r0, [sp, #4]
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	b933      	cbnz	r3, 800b0d0 <_free_r+0x30>
 800b0c2:	6063      	str	r3, [r4, #4]
 800b0c4:	6014      	str	r4, [r2, #0]
 800b0c6:	b003      	add	sp, #12
 800b0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0cc:	f000 bc4c 	b.w	800b968 <__malloc_unlock>
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d908      	bls.n	800b0e6 <_free_r+0x46>
 800b0d4:	6825      	ldr	r5, [r4, #0]
 800b0d6:	1961      	adds	r1, r4, r5
 800b0d8:	428b      	cmp	r3, r1
 800b0da:	bf01      	itttt	eq
 800b0dc:	6819      	ldreq	r1, [r3, #0]
 800b0de:	685b      	ldreq	r3, [r3, #4]
 800b0e0:	1949      	addeq	r1, r1, r5
 800b0e2:	6021      	streq	r1, [r4, #0]
 800b0e4:	e7ed      	b.n	800b0c2 <_free_r+0x22>
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	b10b      	cbz	r3, 800b0f0 <_free_r+0x50>
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	d9fa      	bls.n	800b0e6 <_free_r+0x46>
 800b0f0:	6811      	ldr	r1, [r2, #0]
 800b0f2:	1855      	adds	r5, r2, r1
 800b0f4:	42a5      	cmp	r5, r4
 800b0f6:	d10b      	bne.n	800b110 <_free_r+0x70>
 800b0f8:	6824      	ldr	r4, [r4, #0]
 800b0fa:	4421      	add	r1, r4
 800b0fc:	1854      	adds	r4, r2, r1
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	6011      	str	r1, [r2, #0]
 800b102:	d1e0      	bne.n	800b0c6 <_free_r+0x26>
 800b104:	681c      	ldr	r4, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	6053      	str	r3, [r2, #4]
 800b10a:	4421      	add	r1, r4
 800b10c:	6011      	str	r1, [r2, #0]
 800b10e:	e7da      	b.n	800b0c6 <_free_r+0x26>
 800b110:	d902      	bls.n	800b118 <_free_r+0x78>
 800b112:	230c      	movs	r3, #12
 800b114:	6003      	str	r3, [r0, #0]
 800b116:	e7d6      	b.n	800b0c6 <_free_r+0x26>
 800b118:	6825      	ldr	r5, [r4, #0]
 800b11a:	1961      	adds	r1, r4, r5
 800b11c:	428b      	cmp	r3, r1
 800b11e:	bf04      	itt	eq
 800b120:	6819      	ldreq	r1, [r3, #0]
 800b122:	685b      	ldreq	r3, [r3, #4]
 800b124:	6063      	str	r3, [r4, #4]
 800b126:	bf04      	itt	eq
 800b128:	1949      	addeq	r1, r1, r5
 800b12a:	6021      	streq	r1, [r4, #0]
 800b12c:	6054      	str	r4, [r2, #4]
 800b12e:	e7ca      	b.n	800b0c6 <_free_r+0x26>
 800b130:	b003      	add	sp, #12
 800b132:	bd30      	pop	{r4, r5, pc}
 800b134:	20000ec0 	.word	0x20000ec0

0800b138 <sbrk_aligned>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	4e0e      	ldr	r6, [pc, #56]	; (800b174 <sbrk_aligned+0x3c>)
 800b13c:	460c      	mov	r4, r1
 800b13e:	6831      	ldr	r1, [r6, #0]
 800b140:	4605      	mov	r5, r0
 800b142:	b911      	cbnz	r1, 800b14a <sbrk_aligned+0x12>
 800b144:	f000 f91a 	bl	800b37c <_sbrk_r>
 800b148:	6030      	str	r0, [r6, #0]
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 f915 	bl	800b37c <_sbrk_r>
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	d00a      	beq.n	800b16c <sbrk_aligned+0x34>
 800b156:	1cc4      	adds	r4, r0, #3
 800b158:	f024 0403 	bic.w	r4, r4, #3
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d007      	beq.n	800b170 <sbrk_aligned+0x38>
 800b160:	1a21      	subs	r1, r4, r0
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f90a 	bl	800b37c <_sbrk_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d101      	bne.n	800b170 <sbrk_aligned+0x38>
 800b16c:	f04f 34ff 	mov.w	r4, #4294967295
 800b170:	4620      	mov	r0, r4
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	20000ec4 	.word	0x20000ec4

0800b178 <_malloc_r>:
 800b178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17c:	1ccd      	adds	r5, r1, #3
 800b17e:	f025 0503 	bic.w	r5, r5, #3
 800b182:	3508      	adds	r5, #8
 800b184:	2d0c      	cmp	r5, #12
 800b186:	bf38      	it	cc
 800b188:	250c      	movcc	r5, #12
 800b18a:	2d00      	cmp	r5, #0
 800b18c:	4607      	mov	r7, r0
 800b18e:	db01      	blt.n	800b194 <_malloc_r+0x1c>
 800b190:	42a9      	cmp	r1, r5
 800b192:	d905      	bls.n	800b1a0 <_malloc_r+0x28>
 800b194:	230c      	movs	r3, #12
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2600      	movs	r6, #0
 800b19a:	4630      	mov	r0, r6
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	4e2e      	ldr	r6, [pc, #184]	; (800b25c <_malloc_r+0xe4>)
 800b1a2:	f000 fbdb 	bl	800b95c <__malloc_lock>
 800b1a6:	6833      	ldr	r3, [r6, #0]
 800b1a8:	461c      	mov	r4, r3
 800b1aa:	bb34      	cbnz	r4, 800b1fa <_malloc_r+0x82>
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f7ff ffc2 	bl	800b138 <sbrk_aligned>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	d14d      	bne.n	800b256 <_malloc_r+0xde>
 800b1ba:	6834      	ldr	r4, [r6, #0]
 800b1bc:	4626      	mov	r6, r4
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	d140      	bne.n	800b244 <_malloc_r+0xcc>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	eb04 0803 	add.w	r8, r4, r3
 800b1cc:	f000 f8d6 	bl	800b37c <_sbrk_r>
 800b1d0:	4580      	cmp	r8, r0
 800b1d2:	d13a      	bne.n	800b24a <_malloc_r+0xd2>
 800b1d4:	6821      	ldr	r1, [r4, #0]
 800b1d6:	3503      	adds	r5, #3
 800b1d8:	1a6d      	subs	r5, r5, r1
 800b1da:	f025 0503 	bic.w	r5, r5, #3
 800b1de:	3508      	adds	r5, #8
 800b1e0:	2d0c      	cmp	r5, #12
 800b1e2:	bf38      	it	cc
 800b1e4:	250c      	movcc	r5, #12
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	f7ff ffa5 	bl	800b138 <sbrk_aligned>
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d02b      	beq.n	800b24a <_malloc_r+0xd2>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	442b      	add	r3, r5
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	e00e      	b.n	800b218 <_malloc_r+0xa0>
 800b1fa:	6822      	ldr	r2, [r4, #0]
 800b1fc:	1b52      	subs	r2, r2, r5
 800b1fe:	d41e      	bmi.n	800b23e <_malloc_r+0xc6>
 800b200:	2a0b      	cmp	r2, #11
 800b202:	d916      	bls.n	800b232 <_malloc_r+0xba>
 800b204:	1961      	adds	r1, r4, r5
 800b206:	42a3      	cmp	r3, r4
 800b208:	6025      	str	r5, [r4, #0]
 800b20a:	bf18      	it	ne
 800b20c:	6059      	strne	r1, [r3, #4]
 800b20e:	6863      	ldr	r3, [r4, #4]
 800b210:	bf08      	it	eq
 800b212:	6031      	streq	r1, [r6, #0]
 800b214:	5162      	str	r2, [r4, r5]
 800b216:	604b      	str	r3, [r1, #4]
 800b218:	4638      	mov	r0, r7
 800b21a:	f104 060b 	add.w	r6, r4, #11
 800b21e:	f000 fba3 	bl	800b968 <__malloc_unlock>
 800b222:	f026 0607 	bic.w	r6, r6, #7
 800b226:	1d23      	adds	r3, r4, #4
 800b228:	1af2      	subs	r2, r6, r3
 800b22a:	d0b6      	beq.n	800b19a <_malloc_r+0x22>
 800b22c:	1b9b      	subs	r3, r3, r6
 800b22e:	50a3      	str	r3, [r4, r2]
 800b230:	e7b3      	b.n	800b19a <_malloc_r+0x22>
 800b232:	6862      	ldr	r2, [r4, #4]
 800b234:	42a3      	cmp	r3, r4
 800b236:	bf0c      	ite	eq
 800b238:	6032      	streq	r2, [r6, #0]
 800b23a:	605a      	strne	r2, [r3, #4]
 800b23c:	e7ec      	b.n	800b218 <_malloc_r+0xa0>
 800b23e:	4623      	mov	r3, r4
 800b240:	6864      	ldr	r4, [r4, #4]
 800b242:	e7b2      	b.n	800b1aa <_malloc_r+0x32>
 800b244:	4634      	mov	r4, r6
 800b246:	6876      	ldr	r6, [r6, #4]
 800b248:	e7b9      	b.n	800b1be <_malloc_r+0x46>
 800b24a:	230c      	movs	r3, #12
 800b24c:	603b      	str	r3, [r7, #0]
 800b24e:	4638      	mov	r0, r7
 800b250:	f000 fb8a 	bl	800b968 <__malloc_unlock>
 800b254:	e7a1      	b.n	800b19a <_malloc_r+0x22>
 800b256:	6025      	str	r5, [r4, #0]
 800b258:	e7de      	b.n	800b218 <_malloc_r+0xa0>
 800b25a:	bf00      	nop
 800b25c:	20000ec0 	.word	0x20000ec0

0800b260 <iprintf>:
 800b260:	b40f      	push	{r0, r1, r2, r3}
 800b262:	4b0a      	ldr	r3, [pc, #40]	; (800b28c <iprintf+0x2c>)
 800b264:	b513      	push	{r0, r1, r4, lr}
 800b266:	681c      	ldr	r4, [r3, #0]
 800b268:	b124      	cbz	r4, 800b274 <iprintf+0x14>
 800b26a:	69a3      	ldr	r3, [r4, #24]
 800b26c:	b913      	cbnz	r3, 800b274 <iprintf+0x14>
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fa6e 	bl	800b750 <__sinit>
 800b274:	ab05      	add	r3, sp, #20
 800b276:	9a04      	ldr	r2, [sp, #16]
 800b278:	68a1      	ldr	r1, [r4, #8]
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	4620      	mov	r0, r4
 800b27e:	f000 fba3 	bl	800b9c8 <_vfiprintf_r>
 800b282:	b002      	add	sp, #8
 800b284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b288:	b004      	add	sp, #16
 800b28a:	4770      	bx	lr
 800b28c:	20000030 	.word	0x20000030

0800b290 <_puts_r>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	460e      	mov	r6, r1
 800b294:	4605      	mov	r5, r0
 800b296:	b118      	cbz	r0, 800b2a0 <_puts_r+0x10>
 800b298:	6983      	ldr	r3, [r0, #24]
 800b29a:	b90b      	cbnz	r3, 800b2a0 <_puts_r+0x10>
 800b29c:	f000 fa58 	bl	800b750 <__sinit>
 800b2a0:	69ab      	ldr	r3, [r5, #24]
 800b2a2:	68ac      	ldr	r4, [r5, #8]
 800b2a4:	b913      	cbnz	r3, 800b2ac <_puts_r+0x1c>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 fa52 	bl	800b750 <__sinit>
 800b2ac:	4b2c      	ldr	r3, [pc, #176]	; (800b360 <_puts_r+0xd0>)
 800b2ae:	429c      	cmp	r4, r3
 800b2b0:	d120      	bne.n	800b2f4 <_puts_r+0x64>
 800b2b2:	686c      	ldr	r4, [r5, #4]
 800b2b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b6:	07db      	lsls	r3, r3, #31
 800b2b8:	d405      	bmi.n	800b2c6 <_puts_r+0x36>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	0598      	lsls	r0, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_puts_r+0x36>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c2:	f000 fae3 	bl	800b88c <__retarget_lock_acquire_recursive>
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	0719      	lsls	r1, r3, #28
 800b2ca:	d51d      	bpl.n	800b308 <_puts_r+0x78>
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	b1db      	cbz	r3, 800b308 <_puts_r+0x78>
 800b2d0:	3e01      	subs	r6, #1
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	60a3      	str	r3, [r4, #8]
 800b2dc:	bb39      	cbnz	r1, 800b32e <_puts_r+0x9e>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da38      	bge.n	800b354 <_puts_r+0xc4>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	210a      	movs	r1, #10
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f858 	bl	800b39c <__swbuf_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d011      	beq.n	800b314 <_puts_r+0x84>
 800b2f0:	250a      	movs	r5, #10
 800b2f2:	e011      	b.n	800b318 <_puts_r+0x88>
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	; (800b364 <_puts_r+0xd4>)
 800b2f6:	429c      	cmp	r4, r3
 800b2f8:	d101      	bne.n	800b2fe <_puts_r+0x6e>
 800b2fa:	68ac      	ldr	r4, [r5, #8]
 800b2fc:	e7da      	b.n	800b2b4 <_puts_r+0x24>
 800b2fe:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <_puts_r+0xd8>)
 800b300:	429c      	cmp	r4, r3
 800b302:	bf08      	it	eq
 800b304:	68ec      	ldreq	r4, [r5, #12]
 800b306:	e7d5      	b.n	800b2b4 <_puts_r+0x24>
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f898 	bl	800b440 <__swsetup_r>
 800b310:	2800      	cmp	r0, #0
 800b312:	d0dd      	beq.n	800b2d0 <_puts_r+0x40>
 800b314:	f04f 35ff 	mov.w	r5, #4294967295
 800b318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b31a:	07da      	lsls	r2, r3, #31
 800b31c:	d405      	bmi.n	800b32a <_puts_r+0x9a>
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	059b      	lsls	r3, r3, #22
 800b322:	d402      	bmi.n	800b32a <_puts_r+0x9a>
 800b324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b326:	f000 fab2 	bl	800b88e <__retarget_lock_release_recursive>
 800b32a:	4628      	mov	r0, r5
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da04      	bge.n	800b33c <_puts_r+0xac>
 800b332:	69a2      	ldr	r2, [r4, #24]
 800b334:	429a      	cmp	r2, r3
 800b336:	dc06      	bgt.n	800b346 <_puts_r+0xb6>
 800b338:	290a      	cmp	r1, #10
 800b33a:	d004      	beq.n	800b346 <_puts_r+0xb6>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	6022      	str	r2, [r4, #0]
 800b342:	7019      	strb	r1, [r3, #0]
 800b344:	e7c5      	b.n	800b2d2 <_puts_r+0x42>
 800b346:	4622      	mov	r2, r4
 800b348:	4628      	mov	r0, r5
 800b34a:	f000 f827 	bl	800b39c <__swbuf_r>
 800b34e:	3001      	adds	r0, #1
 800b350:	d1bf      	bne.n	800b2d2 <_puts_r+0x42>
 800b352:	e7df      	b.n	800b314 <_puts_r+0x84>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	250a      	movs	r5, #10
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	6022      	str	r2, [r4, #0]
 800b35c:	701d      	strb	r5, [r3, #0]
 800b35e:	e7db      	b.n	800b318 <_puts_r+0x88>
 800b360:	0800ca68 	.word	0x0800ca68
 800b364:	0800ca88 	.word	0x0800ca88
 800b368:	0800ca48 	.word	0x0800ca48

0800b36c <puts>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <puts+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f7ff bf8d 	b.w	800b290 <_puts_r>
 800b376:	bf00      	nop
 800b378:	20000030 	.word	0x20000030

0800b37c <_sbrk_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_sbrk_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f7 f89a 	bl	80024c0 <_sbrk>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_sbrk_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_sbrk_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20000ecc 	.word	0x20000ecc

0800b39c <__swbuf_r>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	460e      	mov	r6, r1
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	b118      	cbz	r0, 800b3ae <__swbuf_r+0x12>
 800b3a6:	6983      	ldr	r3, [r0, #24]
 800b3a8:	b90b      	cbnz	r3, 800b3ae <__swbuf_r+0x12>
 800b3aa:	f000 f9d1 	bl	800b750 <__sinit>
 800b3ae:	4b21      	ldr	r3, [pc, #132]	; (800b434 <__swbuf_r+0x98>)
 800b3b0:	429c      	cmp	r4, r3
 800b3b2:	d12b      	bne.n	800b40c <__swbuf_r+0x70>
 800b3b4:	686c      	ldr	r4, [r5, #4]
 800b3b6:	69a3      	ldr	r3, [r4, #24]
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	071a      	lsls	r2, r3, #28
 800b3be:	d52f      	bpl.n	800b420 <__swbuf_r+0x84>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	b36b      	cbz	r3, 800b420 <__swbuf_r+0x84>
 800b3c4:	6923      	ldr	r3, [r4, #16]
 800b3c6:	6820      	ldr	r0, [r4, #0]
 800b3c8:	1ac0      	subs	r0, r0, r3
 800b3ca:	6963      	ldr	r3, [r4, #20]
 800b3cc:	b2f6      	uxtb	r6, r6
 800b3ce:	4283      	cmp	r3, r0
 800b3d0:	4637      	mov	r7, r6
 800b3d2:	dc04      	bgt.n	800b3de <__swbuf_r+0x42>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f926 	bl	800b628 <_fflush_r>
 800b3dc:	bb30      	cbnz	r0, 800b42c <__swbuf_r+0x90>
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	60a3      	str	r3, [r4, #8]
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	6022      	str	r2, [r4, #0]
 800b3ea:	701e      	strb	r6, [r3, #0]
 800b3ec:	6963      	ldr	r3, [r4, #20]
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	d004      	beq.n	800b3fe <__swbuf_r+0x62>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	07db      	lsls	r3, r3, #31
 800b3f8:	d506      	bpl.n	800b408 <__swbuf_r+0x6c>
 800b3fa:	2e0a      	cmp	r6, #10
 800b3fc:	d104      	bne.n	800b408 <__swbuf_r+0x6c>
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	f000 f911 	bl	800b628 <_fflush_r>
 800b406:	b988      	cbnz	r0, 800b42c <__swbuf_r+0x90>
 800b408:	4638      	mov	r0, r7
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <__swbuf_r+0x9c>)
 800b40e:	429c      	cmp	r4, r3
 800b410:	d101      	bne.n	800b416 <__swbuf_r+0x7a>
 800b412:	68ac      	ldr	r4, [r5, #8]
 800b414:	e7cf      	b.n	800b3b6 <__swbuf_r+0x1a>
 800b416:	4b09      	ldr	r3, [pc, #36]	; (800b43c <__swbuf_r+0xa0>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	bf08      	it	eq
 800b41c:	68ec      	ldreq	r4, [r5, #12]
 800b41e:	e7ca      	b.n	800b3b6 <__swbuf_r+0x1a>
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f80c 	bl	800b440 <__swsetup_r>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d0cb      	beq.n	800b3c4 <__swbuf_r+0x28>
 800b42c:	f04f 37ff 	mov.w	r7, #4294967295
 800b430:	e7ea      	b.n	800b408 <__swbuf_r+0x6c>
 800b432:	bf00      	nop
 800b434:	0800ca68 	.word	0x0800ca68
 800b438:	0800ca88 	.word	0x0800ca88
 800b43c:	0800ca48 	.word	0x0800ca48

0800b440 <__swsetup_r>:
 800b440:	4b32      	ldr	r3, [pc, #200]	; (800b50c <__swsetup_r+0xcc>)
 800b442:	b570      	push	{r4, r5, r6, lr}
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	4606      	mov	r6, r0
 800b448:	460c      	mov	r4, r1
 800b44a:	b125      	cbz	r5, 800b456 <__swsetup_r+0x16>
 800b44c:	69ab      	ldr	r3, [r5, #24]
 800b44e:	b913      	cbnz	r3, 800b456 <__swsetup_r+0x16>
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f97d 	bl	800b750 <__sinit>
 800b456:	4b2e      	ldr	r3, [pc, #184]	; (800b510 <__swsetup_r+0xd0>)
 800b458:	429c      	cmp	r4, r3
 800b45a:	d10f      	bne.n	800b47c <__swsetup_r+0x3c>
 800b45c:	686c      	ldr	r4, [r5, #4]
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b464:	0719      	lsls	r1, r3, #28
 800b466:	d42c      	bmi.n	800b4c2 <__swsetup_r+0x82>
 800b468:	06dd      	lsls	r5, r3, #27
 800b46a:	d411      	bmi.n	800b490 <__swsetup_r+0x50>
 800b46c:	2309      	movs	r3, #9
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b474:	81a3      	strh	r3, [r4, #12]
 800b476:	f04f 30ff 	mov.w	r0, #4294967295
 800b47a:	e03e      	b.n	800b4fa <__swsetup_r+0xba>
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <__swsetup_r+0xd4>)
 800b47e:	429c      	cmp	r4, r3
 800b480:	d101      	bne.n	800b486 <__swsetup_r+0x46>
 800b482:	68ac      	ldr	r4, [r5, #8]
 800b484:	e7eb      	b.n	800b45e <__swsetup_r+0x1e>
 800b486:	4b24      	ldr	r3, [pc, #144]	; (800b518 <__swsetup_r+0xd8>)
 800b488:	429c      	cmp	r4, r3
 800b48a:	bf08      	it	eq
 800b48c:	68ec      	ldreq	r4, [r5, #12]
 800b48e:	e7e6      	b.n	800b45e <__swsetup_r+0x1e>
 800b490:	0758      	lsls	r0, r3, #29
 800b492:	d512      	bpl.n	800b4ba <__swsetup_r+0x7a>
 800b494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b496:	b141      	cbz	r1, 800b4aa <__swsetup_r+0x6a>
 800b498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b49c:	4299      	cmp	r1, r3
 800b49e:	d002      	beq.n	800b4a6 <__swsetup_r+0x66>
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7ff fdfd 	bl	800b0a0 <_free_r>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4b0:	81a3      	strh	r3, [r4, #12]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6063      	str	r3, [r4, #4]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f043 0308 	orr.w	r3, r3, #8
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	b94b      	cbnz	r3, 800b4da <__swsetup_r+0x9a>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d0:	d003      	beq.n	800b4da <__swsetup_r+0x9a>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f000 fa01 	bl	800b8dc <__smakebuf_r>
 800b4da:	89a0      	ldrh	r0, [r4, #12]
 800b4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4e0:	f010 0301 	ands.w	r3, r0, #1
 800b4e4:	d00a      	beq.n	800b4fc <__swsetup_r+0xbc>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60a3      	str	r3, [r4, #8]
 800b4ea:	6963      	ldr	r3, [r4, #20]
 800b4ec:	425b      	negs	r3, r3
 800b4ee:	61a3      	str	r3, [r4, #24]
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	b943      	cbnz	r3, 800b506 <__swsetup_r+0xc6>
 800b4f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4f8:	d1ba      	bne.n	800b470 <__swsetup_r+0x30>
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	0781      	lsls	r1, r0, #30
 800b4fe:	bf58      	it	pl
 800b500:	6963      	ldrpl	r3, [r4, #20]
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	e7f4      	b.n	800b4f0 <__swsetup_r+0xb0>
 800b506:	2000      	movs	r0, #0
 800b508:	e7f7      	b.n	800b4fa <__swsetup_r+0xba>
 800b50a:	bf00      	nop
 800b50c:	20000030 	.word	0x20000030
 800b510:	0800ca68 	.word	0x0800ca68
 800b514:	0800ca88 	.word	0x0800ca88
 800b518:	0800ca48 	.word	0x0800ca48

0800b51c <__sflush_r>:
 800b51c:	898a      	ldrh	r2, [r1, #12]
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	4605      	mov	r5, r0
 800b524:	0710      	lsls	r0, r2, #28
 800b526:	460c      	mov	r4, r1
 800b528:	d458      	bmi.n	800b5dc <__sflush_r+0xc0>
 800b52a:	684b      	ldr	r3, [r1, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	dc05      	bgt.n	800b53c <__sflush_r+0x20>
 800b530:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b532:	2b00      	cmp	r3, #0
 800b534:	dc02      	bgt.n	800b53c <__sflush_r+0x20>
 800b536:	2000      	movs	r0, #0
 800b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b53e:	2e00      	cmp	r6, #0
 800b540:	d0f9      	beq.n	800b536 <__sflush_r+0x1a>
 800b542:	2300      	movs	r3, #0
 800b544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b548:	682f      	ldr	r7, [r5, #0]
 800b54a:	602b      	str	r3, [r5, #0]
 800b54c:	d032      	beq.n	800b5b4 <__sflush_r+0x98>
 800b54e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	075a      	lsls	r2, r3, #29
 800b554:	d505      	bpl.n	800b562 <__sflush_r+0x46>
 800b556:	6863      	ldr	r3, [r4, #4]
 800b558:	1ac0      	subs	r0, r0, r3
 800b55a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b55c:	b10b      	cbz	r3, 800b562 <__sflush_r+0x46>
 800b55e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b560:	1ac0      	subs	r0, r0, r3
 800b562:	2300      	movs	r3, #0
 800b564:	4602      	mov	r2, r0
 800b566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b568:	6a21      	ldr	r1, [r4, #32]
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b0      	blx	r6
 800b56e:	1c43      	adds	r3, r0, #1
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	d106      	bne.n	800b582 <__sflush_r+0x66>
 800b574:	6829      	ldr	r1, [r5, #0]
 800b576:	291d      	cmp	r1, #29
 800b578:	d82c      	bhi.n	800b5d4 <__sflush_r+0xb8>
 800b57a:	4a2a      	ldr	r2, [pc, #168]	; (800b624 <__sflush_r+0x108>)
 800b57c:	40ca      	lsrs	r2, r1
 800b57e:	07d6      	lsls	r6, r2, #31
 800b580:	d528      	bpl.n	800b5d4 <__sflush_r+0xb8>
 800b582:	2200      	movs	r2, #0
 800b584:	6062      	str	r2, [r4, #4]
 800b586:	04d9      	lsls	r1, r3, #19
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	d504      	bpl.n	800b598 <__sflush_r+0x7c>
 800b58e:	1c42      	adds	r2, r0, #1
 800b590:	d101      	bne.n	800b596 <__sflush_r+0x7a>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b903      	cbnz	r3, 800b598 <__sflush_r+0x7c>
 800b596:	6560      	str	r0, [r4, #84]	; 0x54
 800b598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b59a:	602f      	str	r7, [r5, #0]
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d0ca      	beq.n	800b536 <__sflush_r+0x1a>
 800b5a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__sflush_r+0x92>
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7ff fd79 	bl	800b0a0 <_free_r>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b5b2:	e7c1      	b.n	800b538 <__sflush_r+0x1c>
 800b5b4:	6a21      	ldr	r1, [r4, #32]
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b0      	blx	r6
 800b5bc:	1c41      	adds	r1, r0, #1
 800b5be:	d1c7      	bne.n	800b550 <__sflush_r+0x34>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c4      	beq.n	800b550 <__sflush_r+0x34>
 800b5c6:	2b1d      	cmp	r3, #29
 800b5c8:	d001      	beq.n	800b5ce <__sflush_r+0xb2>
 800b5ca:	2b16      	cmp	r3, #22
 800b5cc:	d101      	bne.n	800b5d2 <__sflush_r+0xb6>
 800b5ce:	602f      	str	r7, [r5, #0]
 800b5d0:	e7b1      	b.n	800b536 <__sflush_r+0x1a>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	e7ad      	b.n	800b538 <__sflush_r+0x1c>
 800b5dc:	690f      	ldr	r7, [r1, #16]
 800b5de:	2f00      	cmp	r7, #0
 800b5e0:	d0a9      	beq.n	800b536 <__sflush_r+0x1a>
 800b5e2:	0793      	lsls	r3, r2, #30
 800b5e4:	680e      	ldr	r6, [r1, #0]
 800b5e6:	bf08      	it	eq
 800b5e8:	694b      	ldreq	r3, [r1, #20]
 800b5ea:	600f      	str	r7, [r1, #0]
 800b5ec:	bf18      	it	ne
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	eba6 0807 	sub.w	r8, r6, r7
 800b5f4:	608b      	str	r3, [r1, #8]
 800b5f6:	f1b8 0f00 	cmp.w	r8, #0
 800b5fa:	dd9c      	ble.n	800b536 <__sflush_r+0x1a>
 800b5fc:	6a21      	ldr	r1, [r4, #32]
 800b5fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b600:	4643      	mov	r3, r8
 800b602:	463a      	mov	r2, r7
 800b604:	4628      	mov	r0, r5
 800b606:	47b0      	blx	r6
 800b608:	2800      	cmp	r0, #0
 800b60a:	dc06      	bgt.n	800b61a <__sflush_r+0xfe>
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	f04f 30ff 	mov.w	r0, #4294967295
 800b618:	e78e      	b.n	800b538 <__sflush_r+0x1c>
 800b61a:	4407      	add	r7, r0
 800b61c:	eba8 0800 	sub.w	r8, r8, r0
 800b620:	e7e9      	b.n	800b5f6 <__sflush_r+0xda>
 800b622:	bf00      	nop
 800b624:	20400001 	.word	0x20400001

0800b628 <_fflush_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	690b      	ldr	r3, [r1, #16]
 800b62c:	4605      	mov	r5, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	b913      	cbnz	r3, 800b638 <_fflush_r+0x10>
 800b632:	2500      	movs	r5, #0
 800b634:	4628      	mov	r0, r5
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	b118      	cbz	r0, 800b642 <_fflush_r+0x1a>
 800b63a:	6983      	ldr	r3, [r0, #24]
 800b63c:	b90b      	cbnz	r3, 800b642 <_fflush_r+0x1a>
 800b63e:	f000 f887 	bl	800b750 <__sinit>
 800b642:	4b14      	ldr	r3, [pc, #80]	; (800b694 <_fflush_r+0x6c>)
 800b644:	429c      	cmp	r4, r3
 800b646:	d11b      	bne.n	800b680 <_fflush_r+0x58>
 800b648:	686c      	ldr	r4, [r5, #4]
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0ef      	beq.n	800b632 <_fflush_r+0xa>
 800b652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b654:	07d0      	lsls	r0, r2, #31
 800b656:	d404      	bmi.n	800b662 <_fflush_r+0x3a>
 800b658:	0599      	lsls	r1, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_fflush_r+0x3a>
 800b65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b65e:	f000 f915 	bl	800b88c <__retarget_lock_acquire_recursive>
 800b662:	4628      	mov	r0, r5
 800b664:	4621      	mov	r1, r4
 800b666:	f7ff ff59 	bl	800b51c <__sflush_r>
 800b66a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b66c:	07da      	lsls	r2, r3, #31
 800b66e:	4605      	mov	r5, r0
 800b670:	d4e0      	bmi.n	800b634 <_fflush_r+0xc>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	059b      	lsls	r3, r3, #22
 800b676:	d4dd      	bmi.n	800b634 <_fflush_r+0xc>
 800b678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b67a:	f000 f908 	bl	800b88e <__retarget_lock_release_recursive>
 800b67e:	e7d9      	b.n	800b634 <_fflush_r+0xc>
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <_fflush_r+0x70>)
 800b682:	429c      	cmp	r4, r3
 800b684:	d101      	bne.n	800b68a <_fflush_r+0x62>
 800b686:	68ac      	ldr	r4, [r5, #8]
 800b688:	e7df      	b.n	800b64a <_fflush_r+0x22>
 800b68a:	4b04      	ldr	r3, [pc, #16]	; (800b69c <_fflush_r+0x74>)
 800b68c:	429c      	cmp	r4, r3
 800b68e:	bf08      	it	eq
 800b690:	68ec      	ldreq	r4, [r5, #12]
 800b692:	e7da      	b.n	800b64a <_fflush_r+0x22>
 800b694:	0800ca68 	.word	0x0800ca68
 800b698:	0800ca88 	.word	0x0800ca88
 800b69c:	0800ca48 	.word	0x0800ca48

0800b6a0 <std>:
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6ae:	6083      	str	r3, [r0, #8]
 800b6b0:	8181      	strh	r1, [r0, #12]
 800b6b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b6b4:	81c2      	strh	r2, [r0, #14]
 800b6b6:	6183      	str	r3, [r0, #24]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	2208      	movs	r2, #8
 800b6bc:	305c      	adds	r0, #92	; 0x5c
 800b6be:	f7ff fce7 	bl	800b090 <memset>
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <std+0x38>)
 800b6c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x3c>)
 800b6c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <std+0x40>)
 800b6cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <std+0x44>)
 800b6d0:	6224      	str	r4, [r4, #32]
 800b6d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800bf51 	.word	0x0800bf51
 800b6dc:	0800bf73 	.word	0x0800bf73
 800b6e0:	0800bfab 	.word	0x0800bfab
 800b6e4:	0800bfcf 	.word	0x0800bfcf

0800b6e8 <_cleanup_r>:
 800b6e8:	4901      	ldr	r1, [pc, #4]	; (800b6f0 <_cleanup_r+0x8>)
 800b6ea:	f000 b8af 	b.w	800b84c <_fwalk_reent>
 800b6ee:	bf00      	nop
 800b6f0:	0800b629 	.word	0x0800b629

0800b6f4 <__sfmoreglue>:
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	2268      	movs	r2, #104	; 0x68
 800b6f8:	1e4d      	subs	r5, r1, #1
 800b6fa:	4355      	muls	r5, r2
 800b6fc:	460e      	mov	r6, r1
 800b6fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b702:	f7ff fd39 	bl	800b178 <_malloc_r>
 800b706:	4604      	mov	r4, r0
 800b708:	b140      	cbz	r0, 800b71c <__sfmoreglue+0x28>
 800b70a:	2100      	movs	r1, #0
 800b70c:	e9c0 1600 	strd	r1, r6, [r0]
 800b710:	300c      	adds	r0, #12
 800b712:	60a0      	str	r0, [r4, #8]
 800b714:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b718:	f7ff fcba 	bl	800b090 <memset>
 800b71c:	4620      	mov	r0, r4
 800b71e:	bd70      	pop	{r4, r5, r6, pc}

0800b720 <__sfp_lock_acquire>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__sfp_lock_acquire+0x8>)
 800b722:	f000 b8b3 	b.w	800b88c <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	20000ec9 	.word	0x20000ec9

0800b72c <__sfp_lock_release>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__sfp_lock_release+0x8>)
 800b72e:	f000 b8ae 	b.w	800b88e <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	20000ec9 	.word	0x20000ec9

0800b738 <__sinit_lock_acquire>:
 800b738:	4801      	ldr	r0, [pc, #4]	; (800b740 <__sinit_lock_acquire+0x8>)
 800b73a:	f000 b8a7 	b.w	800b88c <__retarget_lock_acquire_recursive>
 800b73e:	bf00      	nop
 800b740:	20000eca 	.word	0x20000eca

0800b744 <__sinit_lock_release>:
 800b744:	4801      	ldr	r0, [pc, #4]	; (800b74c <__sinit_lock_release+0x8>)
 800b746:	f000 b8a2 	b.w	800b88e <__retarget_lock_release_recursive>
 800b74a:	bf00      	nop
 800b74c:	20000eca 	.word	0x20000eca

0800b750 <__sinit>:
 800b750:	b510      	push	{r4, lr}
 800b752:	4604      	mov	r4, r0
 800b754:	f7ff fff0 	bl	800b738 <__sinit_lock_acquire>
 800b758:	69a3      	ldr	r3, [r4, #24]
 800b75a:	b11b      	cbz	r3, 800b764 <__sinit+0x14>
 800b75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b760:	f7ff bff0 	b.w	800b744 <__sinit_lock_release>
 800b764:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b768:	6523      	str	r3, [r4, #80]	; 0x50
 800b76a:	4b13      	ldr	r3, [pc, #76]	; (800b7b8 <__sinit+0x68>)
 800b76c:	4a13      	ldr	r2, [pc, #76]	; (800b7bc <__sinit+0x6c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	62a2      	str	r2, [r4, #40]	; 0x28
 800b772:	42a3      	cmp	r3, r4
 800b774:	bf04      	itt	eq
 800b776:	2301      	moveq	r3, #1
 800b778:	61a3      	streq	r3, [r4, #24]
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f820 	bl	800b7c0 <__sfp>
 800b780:	6060      	str	r0, [r4, #4]
 800b782:	4620      	mov	r0, r4
 800b784:	f000 f81c 	bl	800b7c0 <__sfp>
 800b788:	60a0      	str	r0, [r4, #8]
 800b78a:	4620      	mov	r0, r4
 800b78c:	f000 f818 	bl	800b7c0 <__sfp>
 800b790:	2200      	movs	r2, #0
 800b792:	60e0      	str	r0, [r4, #12]
 800b794:	2104      	movs	r1, #4
 800b796:	6860      	ldr	r0, [r4, #4]
 800b798:	f7ff ff82 	bl	800b6a0 <std>
 800b79c:	68a0      	ldr	r0, [r4, #8]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	2109      	movs	r1, #9
 800b7a2:	f7ff ff7d 	bl	800b6a0 <std>
 800b7a6:	68e0      	ldr	r0, [r4, #12]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	2112      	movs	r1, #18
 800b7ac:	f7ff ff78 	bl	800b6a0 <std>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	61a3      	str	r3, [r4, #24]
 800b7b4:	e7d2      	b.n	800b75c <__sinit+0xc>
 800b7b6:	bf00      	nop
 800b7b8:	0800ca44 	.word	0x0800ca44
 800b7bc:	0800b6e9 	.word	0x0800b6e9

0800b7c0 <__sfp>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	f7ff ffac 	bl	800b720 <__sfp_lock_acquire>
 800b7c8:	4b1e      	ldr	r3, [pc, #120]	; (800b844 <__sfp+0x84>)
 800b7ca:	681e      	ldr	r6, [r3, #0]
 800b7cc:	69b3      	ldr	r3, [r6, #24]
 800b7ce:	b913      	cbnz	r3, 800b7d6 <__sfp+0x16>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffbd 	bl	800b750 <__sinit>
 800b7d6:	3648      	adds	r6, #72	; 0x48
 800b7d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	d503      	bpl.n	800b7e8 <__sfp+0x28>
 800b7e0:	6833      	ldr	r3, [r6, #0]
 800b7e2:	b30b      	cbz	r3, 800b828 <__sfp+0x68>
 800b7e4:	6836      	ldr	r6, [r6, #0]
 800b7e6:	e7f7      	b.n	800b7d8 <__sfp+0x18>
 800b7e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7ec:	b9d5      	cbnz	r5, 800b824 <__sfp+0x64>
 800b7ee:	4b16      	ldr	r3, [pc, #88]	; (800b848 <__sfp+0x88>)
 800b7f0:	60e3      	str	r3, [r4, #12]
 800b7f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b7f8:	f000 f847 	bl	800b88a <__retarget_lock_init_recursive>
 800b7fc:	f7ff ff96 	bl	800b72c <__sfp_lock_release>
 800b800:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b804:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b808:	6025      	str	r5, [r4, #0]
 800b80a:	61a5      	str	r5, [r4, #24]
 800b80c:	2208      	movs	r2, #8
 800b80e:	4629      	mov	r1, r5
 800b810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b814:	f7ff fc3c 	bl	800b090 <memset>
 800b818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b81c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b820:	4620      	mov	r0, r4
 800b822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b824:	3468      	adds	r4, #104	; 0x68
 800b826:	e7d9      	b.n	800b7dc <__sfp+0x1c>
 800b828:	2104      	movs	r1, #4
 800b82a:	4638      	mov	r0, r7
 800b82c:	f7ff ff62 	bl	800b6f4 <__sfmoreglue>
 800b830:	4604      	mov	r4, r0
 800b832:	6030      	str	r0, [r6, #0]
 800b834:	2800      	cmp	r0, #0
 800b836:	d1d5      	bne.n	800b7e4 <__sfp+0x24>
 800b838:	f7ff ff78 	bl	800b72c <__sfp_lock_release>
 800b83c:	230c      	movs	r3, #12
 800b83e:	603b      	str	r3, [r7, #0]
 800b840:	e7ee      	b.n	800b820 <__sfp+0x60>
 800b842:	bf00      	nop
 800b844:	0800ca44 	.word	0x0800ca44
 800b848:	ffff0001 	.word	0xffff0001

0800b84c <_fwalk_reent>:
 800b84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b850:	4606      	mov	r6, r0
 800b852:	4688      	mov	r8, r1
 800b854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b858:	2700      	movs	r7, #0
 800b85a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b85e:	f1b9 0901 	subs.w	r9, r9, #1
 800b862:	d505      	bpl.n	800b870 <_fwalk_reent+0x24>
 800b864:	6824      	ldr	r4, [r4, #0]
 800b866:	2c00      	cmp	r4, #0
 800b868:	d1f7      	bne.n	800b85a <_fwalk_reent+0xe>
 800b86a:	4638      	mov	r0, r7
 800b86c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b870:	89ab      	ldrh	r3, [r5, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d907      	bls.n	800b886 <_fwalk_reent+0x3a>
 800b876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b87a:	3301      	adds	r3, #1
 800b87c:	d003      	beq.n	800b886 <_fwalk_reent+0x3a>
 800b87e:	4629      	mov	r1, r5
 800b880:	4630      	mov	r0, r6
 800b882:	47c0      	blx	r8
 800b884:	4307      	orrs	r7, r0
 800b886:	3568      	adds	r5, #104	; 0x68
 800b888:	e7e9      	b.n	800b85e <_fwalk_reent+0x12>

0800b88a <__retarget_lock_init_recursive>:
 800b88a:	4770      	bx	lr

0800b88c <__retarget_lock_acquire_recursive>:
 800b88c:	4770      	bx	lr

0800b88e <__retarget_lock_release_recursive>:
 800b88e:	4770      	bx	lr

0800b890 <__swhatbuf_r>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	460e      	mov	r6, r1
 800b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b898:	2900      	cmp	r1, #0
 800b89a:	b096      	sub	sp, #88	; 0x58
 800b89c:	4614      	mov	r4, r2
 800b89e:	461d      	mov	r5, r3
 800b8a0:	da08      	bge.n	800b8b4 <__swhatbuf_r+0x24>
 800b8a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	061a      	lsls	r2, r3, #24
 800b8ac:	d410      	bmi.n	800b8d0 <__swhatbuf_r+0x40>
 800b8ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b2:	e00e      	b.n	800b8d2 <__swhatbuf_r+0x42>
 800b8b4:	466a      	mov	r2, sp
 800b8b6:	f000 fbb1 	bl	800c01c <_fstat_r>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	dbf1      	blt.n	800b8a2 <__swhatbuf_r+0x12>
 800b8be:	9a01      	ldr	r2, [sp, #4]
 800b8c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c8:	425a      	negs	r2, r3
 800b8ca:	415a      	adcs	r2, r3
 800b8cc:	602a      	str	r2, [r5, #0]
 800b8ce:	e7ee      	b.n	800b8ae <__swhatbuf_r+0x1e>
 800b8d0:	2340      	movs	r3, #64	; 0x40
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	b016      	add	sp, #88	; 0x58
 800b8d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8dc <__smakebuf_r>:
 800b8dc:	898b      	ldrh	r3, [r1, #12]
 800b8de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8e0:	079d      	lsls	r5, r3, #30
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	d507      	bpl.n	800b8f8 <__smakebuf_r+0x1c>
 800b8e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	6123      	str	r3, [r4, #16]
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	6163      	str	r3, [r4, #20]
 800b8f4:	b002      	add	sp, #8
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	ab01      	add	r3, sp, #4
 800b8fa:	466a      	mov	r2, sp
 800b8fc:	f7ff ffc8 	bl	800b890 <__swhatbuf_r>
 800b900:	9900      	ldr	r1, [sp, #0]
 800b902:	4605      	mov	r5, r0
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff fc37 	bl	800b178 <_malloc_r>
 800b90a:	b948      	cbnz	r0, 800b920 <__smakebuf_r+0x44>
 800b90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b910:	059a      	lsls	r2, r3, #22
 800b912:	d4ef      	bmi.n	800b8f4 <__smakebuf_r+0x18>
 800b914:	f023 0303 	bic.w	r3, r3, #3
 800b918:	f043 0302 	orr.w	r3, r3, #2
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	e7e3      	b.n	800b8e8 <__smakebuf_r+0xc>
 800b920:	4b0d      	ldr	r3, [pc, #52]	; (800b958 <__smakebuf_r+0x7c>)
 800b922:	62b3      	str	r3, [r6, #40]	; 0x28
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	9b00      	ldr	r3, [sp, #0]
 800b930:	6163      	str	r3, [r4, #20]
 800b932:	9b01      	ldr	r3, [sp, #4]
 800b934:	6120      	str	r0, [r4, #16]
 800b936:	b15b      	cbz	r3, 800b950 <__smakebuf_r+0x74>
 800b938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b93c:	4630      	mov	r0, r6
 800b93e:	f000 fb7f 	bl	800c040 <_isatty_r>
 800b942:	b128      	cbz	r0, 800b950 <__smakebuf_r+0x74>
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	f043 0301 	orr.w	r3, r3, #1
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	89a0      	ldrh	r0, [r4, #12]
 800b952:	4305      	orrs	r5, r0
 800b954:	81a5      	strh	r5, [r4, #12]
 800b956:	e7cd      	b.n	800b8f4 <__smakebuf_r+0x18>
 800b958:	0800b6e9 	.word	0x0800b6e9

0800b95c <__malloc_lock>:
 800b95c:	4801      	ldr	r0, [pc, #4]	; (800b964 <__malloc_lock+0x8>)
 800b95e:	f7ff bf95 	b.w	800b88c <__retarget_lock_acquire_recursive>
 800b962:	bf00      	nop
 800b964:	20000ec8 	.word	0x20000ec8

0800b968 <__malloc_unlock>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__malloc_unlock+0x8>)
 800b96a:	f7ff bf90 	b.w	800b88e <__retarget_lock_release_recursive>
 800b96e:	bf00      	nop
 800b970:	20000ec8 	.word	0x20000ec8

0800b974 <__sfputc_r>:
 800b974:	6893      	ldr	r3, [r2, #8]
 800b976:	3b01      	subs	r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	b410      	push	{r4}
 800b97c:	6093      	str	r3, [r2, #8]
 800b97e:	da08      	bge.n	800b992 <__sfputc_r+0x1e>
 800b980:	6994      	ldr	r4, [r2, #24]
 800b982:	42a3      	cmp	r3, r4
 800b984:	db01      	blt.n	800b98a <__sfputc_r+0x16>
 800b986:	290a      	cmp	r1, #10
 800b988:	d103      	bne.n	800b992 <__sfputc_r+0x1e>
 800b98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b98e:	f7ff bd05 	b.w	800b39c <__swbuf_r>
 800b992:	6813      	ldr	r3, [r2, #0]
 800b994:	1c58      	adds	r0, r3, #1
 800b996:	6010      	str	r0, [r2, #0]
 800b998:	7019      	strb	r1, [r3, #0]
 800b99a:	4608      	mov	r0, r1
 800b99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <__sfputs_r>:
 800b9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	18d5      	adds	r5, r2, r3
 800b9ac:	42ac      	cmp	r4, r5
 800b9ae:	d101      	bne.n	800b9b4 <__sfputs_r+0x12>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e007      	b.n	800b9c4 <__sfputs_r+0x22>
 800b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b8:	463a      	mov	r2, r7
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	f7ff ffda 	bl	800b974 <__sfputc_r>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d1f3      	bne.n	800b9ac <__sfputs_r+0xa>
 800b9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9c8 <_vfiprintf_r>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	b09d      	sub	sp, #116	; 0x74
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	4698      	mov	r8, r3
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	b118      	cbz	r0, 800b9e0 <_vfiprintf_r+0x18>
 800b9d8:	6983      	ldr	r3, [r0, #24]
 800b9da:	b90b      	cbnz	r3, 800b9e0 <_vfiprintf_r+0x18>
 800b9dc:	f7ff feb8 	bl	800b750 <__sinit>
 800b9e0:	4b89      	ldr	r3, [pc, #548]	; (800bc08 <_vfiprintf_r+0x240>)
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	d11b      	bne.n	800ba1e <_vfiprintf_r+0x56>
 800b9e6:	6875      	ldr	r5, [r6, #4]
 800b9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ea:	07d9      	lsls	r1, r3, #31
 800b9ec:	d405      	bmi.n	800b9fa <_vfiprintf_r+0x32>
 800b9ee:	89ab      	ldrh	r3, [r5, #12]
 800b9f0:	059a      	lsls	r2, r3, #22
 800b9f2:	d402      	bmi.n	800b9fa <_vfiprintf_r+0x32>
 800b9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f6:	f7ff ff49 	bl	800b88c <__retarget_lock_acquire_recursive>
 800b9fa:	89ab      	ldrh	r3, [r5, #12]
 800b9fc:	071b      	lsls	r3, r3, #28
 800b9fe:	d501      	bpl.n	800ba04 <_vfiprintf_r+0x3c>
 800ba00:	692b      	ldr	r3, [r5, #16]
 800ba02:	b9eb      	cbnz	r3, 800ba40 <_vfiprintf_r+0x78>
 800ba04:	4629      	mov	r1, r5
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7ff fd1a 	bl	800b440 <__swsetup_r>
 800ba0c:	b1c0      	cbz	r0, 800ba40 <_vfiprintf_r+0x78>
 800ba0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba10:	07dc      	lsls	r4, r3, #31
 800ba12:	d50e      	bpl.n	800ba32 <_vfiprintf_r+0x6a>
 800ba14:	f04f 30ff 	mov.w	r0, #4294967295
 800ba18:	b01d      	add	sp, #116	; 0x74
 800ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1e:	4b7b      	ldr	r3, [pc, #492]	; (800bc0c <_vfiprintf_r+0x244>)
 800ba20:	429d      	cmp	r5, r3
 800ba22:	d101      	bne.n	800ba28 <_vfiprintf_r+0x60>
 800ba24:	68b5      	ldr	r5, [r6, #8]
 800ba26:	e7df      	b.n	800b9e8 <_vfiprintf_r+0x20>
 800ba28:	4b79      	ldr	r3, [pc, #484]	; (800bc10 <_vfiprintf_r+0x248>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	bf08      	it	eq
 800ba2e:	68f5      	ldreq	r5, [r6, #12]
 800ba30:	e7da      	b.n	800b9e8 <_vfiprintf_r+0x20>
 800ba32:	89ab      	ldrh	r3, [r5, #12]
 800ba34:	0598      	lsls	r0, r3, #22
 800ba36:	d4ed      	bmi.n	800ba14 <_vfiprintf_r+0x4c>
 800ba38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3a:	f7ff ff28 	bl	800b88e <__retarget_lock_release_recursive>
 800ba3e:	e7e9      	b.n	800ba14 <_vfiprintf_r+0x4c>
 800ba40:	2300      	movs	r3, #0
 800ba42:	9309      	str	r3, [sp, #36]	; 0x24
 800ba44:	2320      	movs	r3, #32
 800ba46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba4e:	2330      	movs	r3, #48	; 0x30
 800ba50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc14 <_vfiprintf_r+0x24c>
 800ba54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba58:	f04f 0901 	mov.w	r9, #1
 800ba5c:	4623      	mov	r3, r4
 800ba5e:	469a      	mov	sl, r3
 800ba60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba64:	b10a      	cbz	r2, 800ba6a <_vfiprintf_r+0xa2>
 800ba66:	2a25      	cmp	r2, #37	; 0x25
 800ba68:	d1f9      	bne.n	800ba5e <_vfiprintf_r+0x96>
 800ba6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba6e:	d00b      	beq.n	800ba88 <_vfiprintf_r+0xc0>
 800ba70:	465b      	mov	r3, fp
 800ba72:	4622      	mov	r2, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7ff ff93 	bl	800b9a2 <__sfputs_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	f000 80aa 	beq.w	800bbd6 <_vfiprintf_r+0x20e>
 800ba82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba84:	445a      	add	r2, fp
 800ba86:	9209      	str	r2, [sp, #36]	; 0x24
 800ba88:	f89a 3000 	ldrb.w	r3, [sl]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80a2 	beq.w	800bbd6 <_vfiprintf_r+0x20e>
 800ba92:	2300      	movs	r3, #0
 800ba94:	f04f 32ff 	mov.w	r2, #4294967295
 800ba98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba9c:	f10a 0a01 	add.w	sl, sl, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	9307      	str	r3, [sp, #28]
 800baa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa8:	931a      	str	r3, [sp, #104]	; 0x68
 800baaa:	4654      	mov	r4, sl
 800baac:	2205      	movs	r2, #5
 800baae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab2:	4858      	ldr	r0, [pc, #352]	; (800bc14 <_vfiprintf_r+0x24c>)
 800bab4:	f7f4 fb9c 	bl	80001f0 <memchr>
 800bab8:	9a04      	ldr	r2, [sp, #16]
 800baba:	b9d8      	cbnz	r0, 800baf4 <_vfiprintf_r+0x12c>
 800babc:	06d1      	lsls	r1, r2, #27
 800babe:	bf44      	itt	mi
 800bac0:	2320      	movmi	r3, #32
 800bac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac6:	0713      	lsls	r3, r2, #28
 800bac8:	bf44      	itt	mi
 800baca:	232b      	movmi	r3, #43	; 0x2b
 800bacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b2a      	cmp	r3, #42	; 0x2a
 800bad6:	d015      	beq.n	800bb04 <_vfiprintf_r+0x13c>
 800bad8:	9a07      	ldr	r2, [sp, #28]
 800bada:	4654      	mov	r4, sl
 800badc:	2000      	movs	r0, #0
 800bade:	f04f 0c0a 	mov.w	ip, #10
 800bae2:	4621      	mov	r1, r4
 800bae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae8:	3b30      	subs	r3, #48	; 0x30
 800baea:	2b09      	cmp	r3, #9
 800baec:	d94e      	bls.n	800bb8c <_vfiprintf_r+0x1c4>
 800baee:	b1b0      	cbz	r0, 800bb1e <_vfiprintf_r+0x156>
 800baf0:	9207      	str	r2, [sp, #28]
 800baf2:	e014      	b.n	800bb1e <_vfiprintf_r+0x156>
 800baf4:	eba0 0308 	sub.w	r3, r0, r8
 800baf8:	fa09 f303 	lsl.w	r3, r9, r3
 800bafc:	4313      	orrs	r3, r2
 800bafe:	9304      	str	r3, [sp, #16]
 800bb00:	46a2      	mov	sl, r4
 800bb02:	e7d2      	b.n	800baaa <_vfiprintf_r+0xe2>
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	1d19      	adds	r1, r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	9103      	str	r1, [sp, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	bfbb      	ittet	lt
 800bb10:	425b      	neglt	r3, r3
 800bb12:	f042 0202 	orrlt.w	r2, r2, #2
 800bb16:	9307      	strge	r3, [sp, #28]
 800bb18:	9307      	strlt	r3, [sp, #28]
 800bb1a:	bfb8      	it	lt
 800bb1c:	9204      	strlt	r2, [sp, #16]
 800bb1e:	7823      	ldrb	r3, [r4, #0]
 800bb20:	2b2e      	cmp	r3, #46	; 0x2e
 800bb22:	d10c      	bne.n	800bb3e <_vfiprintf_r+0x176>
 800bb24:	7863      	ldrb	r3, [r4, #1]
 800bb26:	2b2a      	cmp	r3, #42	; 0x2a
 800bb28:	d135      	bne.n	800bb96 <_vfiprintf_r+0x1ce>
 800bb2a:	9b03      	ldr	r3, [sp, #12]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	9203      	str	r2, [sp, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bfb8      	it	lt
 800bb36:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb3a:	3402      	adds	r4, #2
 800bb3c:	9305      	str	r3, [sp, #20]
 800bb3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc24 <_vfiprintf_r+0x25c>
 800bb42:	7821      	ldrb	r1, [r4, #0]
 800bb44:	2203      	movs	r2, #3
 800bb46:	4650      	mov	r0, sl
 800bb48:	f7f4 fb52 	bl	80001f0 <memchr>
 800bb4c:	b140      	cbz	r0, 800bb60 <_vfiprintf_r+0x198>
 800bb4e:	2340      	movs	r3, #64	; 0x40
 800bb50:	eba0 000a 	sub.w	r0, r0, sl
 800bb54:	fa03 f000 	lsl.w	r0, r3, r0
 800bb58:	9b04      	ldr	r3, [sp, #16]
 800bb5a:	4303      	orrs	r3, r0
 800bb5c:	3401      	adds	r4, #1
 800bb5e:	9304      	str	r3, [sp, #16]
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	482c      	ldr	r0, [pc, #176]	; (800bc18 <_vfiprintf_r+0x250>)
 800bb66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb6a:	2206      	movs	r2, #6
 800bb6c:	f7f4 fb40 	bl	80001f0 <memchr>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d03f      	beq.n	800bbf4 <_vfiprintf_r+0x22c>
 800bb74:	4b29      	ldr	r3, [pc, #164]	; (800bc1c <_vfiprintf_r+0x254>)
 800bb76:	bb1b      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x1f8>
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	f023 0307 	bic.w	r3, r3, #7
 800bb80:	3308      	adds	r3, #8
 800bb82:	9303      	str	r3, [sp, #12]
 800bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb86:	443b      	add	r3, r7
 800bb88:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8a:	e767      	b.n	800ba5c <_vfiprintf_r+0x94>
 800bb8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb90:	460c      	mov	r4, r1
 800bb92:	2001      	movs	r0, #1
 800bb94:	e7a5      	b.n	800bae2 <_vfiprintf_r+0x11a>
 800bb96:	2300      	movs	r3, #0
 800bb98:	3401      	adds	r4, #1
 800bb9a:	9305      	str	r3, [sp, #20]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	f04f 0c0a 	mov.w	ip, #10
 800bba2:	4620      	mov	r0, r4
 800bba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba8:	3a30      	subs	r2, #48	; 0x30
 800bbaa:	2a09      	cmp	r2, #9
 800bbac:	d903      	bls.n	800bbb6 <_vfiprintf_r+0x1ee>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0c5      	beq.n	800bb3e <_vfiprintf_r+0x176>
 800bbb2:	9105      	str	r1, [sp, #20]
 800bbb4:	e7c3      	b.n	800bb3e <_vfiprintf_r+0x176>
 800bbb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbba:	4604      	mov	r4, r0
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e7f0      	b.n	800bba2 <_vfiprintf_r+0x1da>
 800bbc0:	ab03      	add	r3, sp, #12
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	4b16      	ldr	r3, [pc, #88]	; (800bc20 <_vfiprintf_r+0x258>)
 800bbc8:	a904      	add	r1, sp, #16
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	1c78      	adds	r0, r7, #1
 800bbd4:	d1d6      	bne.n	800bb84 <_vfiprintf_r+0x1bc>
 800bbd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd8:	07d9      	lsls	r1, r3, #31
 800bbda:	d405      	bmi.n	800bbe8 <_vfiprintf_r+0x220>
 800bbdc:	89ab      	ldrh	r3, [r5, #12]
 800bbde:	059a      	lsls	r2, r3, #22
 800bbe0:	d402      	bmi.n	800bbe8 <_vfiprintf_r+0x220>
 800bbe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe4:	f7ff fe53 	bl	800b88e <__retarget_lock_release_recursive>
 800bbe8:	89ab      	ldrh	r3, [r5, #12]
 800bbea:	065b      	lsls	r3, r3, #25
 800bbec:	f53f af12 	bmi.w	800ba14 <_vfiprintf_r+0x4c>
 800bbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf2:	e711      	b.n	800ba18 <_vfiprintf_r+0x50>
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4b09      	ldr	r3, [pc, #36]	; (800bc20 <_vfiprintf_r+0x258>)
 800bbfc:	a904      	add	r1, sp, #16
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f000 f880 	bl	800bd04 <_printf_i>
 800bc04:	e7e4      	b.n	800bbd0 <_vfiprintf_r+0x208>
 800bc06:	bf00      	nop
 800bc08:	0800ca68 	.word	0x0800ca68
 800bc0c:	0800ca88 	.word	0x0800ca88
 800bc10:	0800ca48 	.word	0x0800ca48
 800bc14:	0800caa8 	.word	0x0800caa8
 800bc18:	0800cab2 	.word	0x0800cab2
 800bc1c:	00000000 	.word	0x00000000
 800bc20:	0800b9a3 	.word	0x0800b9a3
 800bc24:	0800caae 	.word	0x0800caae

0800bc28 <_printf_common>:
 800bc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	4699      	mov	r9, r3
 800bc30:	688a      	ldr	r2, [r1, #8]
 800bc32:	690b      	ldr	r3, [r1, #16]
 800bc34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	bfb8      	it	lt
 800bc3c:	4613      	movlt	r3, r2
 800bc3e:	6033      	str	r3, [r6, #0]
 800bc40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc44:	4607      	mov	r7, r0
 800bc46:	460c      	mov	r4, r1
 800bc48:	b10a      	cbz	r2, 800bc4e <_printf_common+0x26>
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	6033      	str	r3, [r6, #0]
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	0699      	lsls	r1, r3, #26
 800bc52:	bf42      	ittt	mi
 800bc54:	6833      	ldrmi	r3, [r6, #0]
 800bc56:	3302      	addmi	r3, #2
 800bc58:	6033      	strmi	r3, [r6, #0]
 800bc5a:	6825      	ldr	r5, [r4, #0]
 800bc5c:	f015 0506 	ands.w	r5, r5, #6
 800bc60:	d106      	bne.n	800bc70 <_printf_common+0x48>
 800bc62:	f104 0a19 	add.w	sl, r4, #25
 800bc66:	68e3      	ldr	r3, [r4, #12]
 800bc68:	6832      	ldr	r2, [r6, #0]
 800bc6a:	1a9b      	subs	r3, r3, r2
 800bc6c:	42ab      	cmp	r3, r5
 800bc6e:	dc26      	bgt.n	800bcbe <_printf_common+0x96>
 800bc70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc74:	1e13      	subs	r3, r2, #0
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	bf18      	it	ne
 800bc7a:	2301      	movne	r3, #1
 800bc7c:	0692      	lsls	r2, r2, #26
 800bc7e:	d42b      	bmi.n	800bcd8 <_printf_common+0xb0>
 800bc80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc84:	4649      	mov	r1, r9
 800bc86:	4638      	mov	r0, r7
 800bc88:	47c0      	blx	r8
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	d01e      	beq.n	800bccc <_printf_common+0xa4>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	68e5      	ldr	r5, [r4, #12]
 800bc92:	6832      	ldr	r2, [r6, #0]
 800bc94:	f003 0306 	and.w	r3, r3, #6
 800bc98:	2b04      	cmp	r3, #4
 800bc9a:	bf08      	it	eq
 800bc9c:	1aad      	subeq	r5, r5, r2
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	bf0c      	ite	eq
 800bca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bca8:	2500      	movne	r5, #0
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	bfc4      	itt	gt
 800bcae:	1a9b      	subgt	r3, r3, r2
 800bcb0:	18ed      	addgt	r5, r5, r3
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	341a      	adds	r4, #26
 800bcb6:	42b5      	cmp	r5, r6
 800bcb8:	d11a      	bne.n	800bcf0 <_printf_common+0xc8>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e008      	b.n	800bcd0 <_printf_common+0xa8>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4652      	mov	r2, sl
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	47c0      	blx	r8
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d103      	bne.n	800bcd4 <_printf_common+0xac>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd4:	3501      	adds	r5, #1
 800bcd6:	e7c6      	b.n	800bc66 <_printf_common+0x3e>
 800bcd8:	18e1      	adds	r1, r4, r3
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	2030      	movs	r0, #48	; 0x30
 800bcde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bce2:	4422      	add	r2, r4
 800bce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcec:	3302      	adds	r3, #2
 800bcee:	e7c7      	b.n	800bc80 <_printf_common+0x58>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4622      	mov	r2, r4
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	47c0      	blx	r8
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d0e6      	beq.n	800bccc <_printf_common+0xa4>
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7d9      	b.n	800bcb6 <_printf_common+0x8e>
	...

0800bd04 <_printf_i>:
 800bd04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	7e0f      	ldrb	r7, [r1, #24]
 800bd0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd0c:	2f78      	cmp	r7, #120	; 0x78
 800bd0e:	4691      	mov	r9, r2
 800bd10:	4680      	mov	r8, r0
 800bd12:	460c      	mov	r4, r1
 800bd14:	469a      	mov	sl, r3
 800bd16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd1a:	d807      	bhi.n	800bd2c <_printf_i+0x28>
 800bd1c:	2f62      	cmp	r7, #98	; 0x62
 800bd1e:	d80a      	bhi.n	800bd36 <_printf_i+0x32>
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	f000 80d8 	beq.w	800bed6 <_printf_i+0x1d2>
 800bd26:	2f58      	cmp	r7, #88	; 0x58
 800bd28:	f000 80a3 	beq.w	800be72 <_printf_i+0x16e>
 800bd2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd34:	e03a      	b.n	800bdac <_printf_i+0xa8>
 800bd36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd3a:	2b15      	cmp	r3, #21
 800bd3c:	d8f6      	bhi.n	800bd2c <_printf_i+0x28>
 800bd3e:	a101      	add	r1, pc, #4	; (adr r1, 800bd44 <_printf_i+0x40>)
 800bd40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd44:	0800bd9d 	.word	0x0800bd9d
 800bd48:	0800bdb1 	.word	0x0800bdb1
 800bd4c:	0800bd2d 	.word	0x0800bd2d
 800bd50:	0800bd2d 	.word	0x0800bd2d
 800bd54:	0800bd2d 	.word	0x0800bd2d
 800bd58:	0800bd2d 	.word	0x0800bd2d
 800bd5c:	0800bdb1 	.word	0x0800bdb1
 800bd60:	0800bd2d 	.word	0x0800bd2d
 800bd64:	0800bd2d 	.word	0x0800bd2d
 800bd68:	0800bd2d 	.word	0x0800bd2d
 800bd6c:	0800bd2d 	.word	0x0800bd2d
 800bd70:	0800bebd 	.word	0x0800bebd
 800bd74:	0800bde1 	.word	0x0800bde1
 800bd78:	0800be9f 	.word	0x0800be9f
 800bd7c:	0800bd2d 	.word	0x0800bd2d
 800bd80:	0800bd2d 	.word	0x0800bd2d
 800bd84:	0800bedf 	.word	0x0800bedf
 800bd88:	0800bd2d 	.word	0x0800bd2d
 800bd8c:	0800bde1 	.word	0x0800bde1
 800bd90:	0800bd2d 	.word	0x0800bd2d
 800bd94:	0800bd2d 	.word	0x0800bd2d
 800bd98:	0800bea7 	.word	0x0800bea7
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	1d1a      	adds	r2, r3, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	602a      	str	r2, [r5, #0]
 800bda4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdac:	2301      	movs	r3, #1
 800bdae:	e0a3      	b.n	800bef8 <_printf_i+0x1f4>
 800bdb0:	6820      	ldr	r0, [r4, #0]
 800bdb2:	6829      	ldr	r1, [r5, #0]
 800bdb4:	0606      	lsls	r6, r0, #24
 800bdb6:	f101 0304 	add.w	r3, r1, #4
 800bdba:	d50a      	bpl.n	800bdd2 <_printf_i+0xce>
 800bdbc:	680e      	ldr	r6, [r1, #0]
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	da03      	bge.n	800bdcc <_printf_i+0xc8>
 800bdc4:	232d      	movs	r3, #45	; 0x2d
 800bdc6:	4276      	negs	r6, r6
 800bdc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdcc:	485e      	ldr	r0, [pc, #376]	; (800bf48 <_printf_i+0x244>)
 800bdce:	230a      	movs	r3, #10
 800bdd0:	e019      	b.n	800be06 <_printf_i+0x102>
 800bdd2:	680e      	ldr	r6, [r1, #0]
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdda:	bf18      	it	ne
 800bddc:	b236      	sxthne	r6, r6
 800bdde:	e7ef      	b.n	800bdc0 <_printf_i+0xbc>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	6820      	ldr	r0, [r4, #0]
 800bde4:	1d19      	adds	r1, r3, #4
 800bde6:	6029      	str	r1, [r5, #0]
 800bde8:	0601      	lsls	r1, r0, #24
 800bdea:	d501      	bpl.n	800bdf0 <_printf_i+0xec>
 800bdec:	681e      	ldr	r6, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <_printf_i+0xf2>
 800bdf0:	0646      	lsls	r6, r0, #25
 800bdf2:	d5fb      	bpl.n	800bdec <_printf_i+0xe8>
 800bdf4:	881e      	ldrh	r6, [r3, #0]
 800bdf6:	4854      	ldr	r0, [pc, #336]	; (800bf48 <_printf_i+0x244>)
 800bdf8:	2f6f      	cmp	r7, #111	; 0x6f
 800bdfa:	bf0c      	ite	eq
 800bdfc:	2308      	moveq	r3, #8
 800bdfe:	230a      	movne	r3, #10
 800be00:	2100      	movs	r1, #0
 800be02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be06:	6865      	ldr	r5, [r4, #4]
 800be08:	60a5      	str	r5, [r4, #8]
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	bfa2      	ittt	ge
 800be0e:	6821      	ldrge	r1, [r4, #0]
 800be10:	f021 0104 	bicge.w	r1, r1, #4
 800be14:	6021      	strge	r1, [r4, #0]
 800be16:	b90e      	cbnz	r6, 800be1c <_printf_i+0x118>
 800be18:	2d00      	cmp	r5, #0
 800be1a:	d04d      	beq.n	800beb8 <_printf_i+0x1b4>
 800be1c:	4615      	mov	r5, r2
 800be1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800be22:	fb03 6711 	mls	r7, r3, r1, r6
 800be26:	5dc7      	ldrb	r7, [r0, r7]
 800be28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be2c:	4637      	mov	r7, r6
 800be2e:	42bb      	cmp	r3, r7
 800be30:	460e      	mov	r6, r1
 800be32:	d9f4      	bls.n	800be1e <_printf_i+0x11a>
 800be34:	2b08      	cmp	r3, #8
 800be36:	d10b      	bne.n	800be50 <_printf_i+0x14c>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	07de      	lsls	r6, r3, #31
 800be3c:	d508      	bpl.n	800be50 <_printf_i+0x14c>
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	6861      	ldr	r1, [r4, #4]
 800be42:	4299      	cmp	r1, r3
 800be44:	bfde      	ittt	le
 800be46:	2330      	movle	r3, #48	; 0x30
 800be48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be50:	1b52      	subs	r2, r2, r5
 800be52:	6122      	str	r2, [r4, #16]
 800be54:	f8cd a000 	str.w	sl, [sp]
 800be58:	464b      	mov	r3, r9
 800be5a:	aa03      	add	r2, sp, #12
 800be5c:	4621      	mov	r1, r4
 800be5e:	4640      	mov	r0, r8
 800be60:	f7ff fee2 	bl	800bc28 <_printf_common>
 800be64:	3001      	adds	r0, #1
 800be66:	d14c      	bne.n	800bf02 <_printf_i+0x1fe>
 800be68:	f04f 30ff 	mov.w	r0, #4294967295
 800be6c:	b004      	add	sp, #16
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	4835      	ldr	r0, [pc, #212]	; (800bf48 <_printf_i+0x244>)
 800be74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be78:	6829      	ldr	r1, [r5, #0]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be80:	6029      	str	r1, [r5, #0]
 800be82:	061d      	lsls	r5, r3, #24
 800be84:	d514      	bpl.n	800beb0 <_printf_i+0x1ac>
 800be86:	07df      	lsls	r7, r3, #31
 800be88:	bf44      	itt	mi
 800be8a:	f043 0320 	orrmi.w	r3, r3, #32
 800be8e:	6023      	strmi	r3, [r4, #0]
 800be90:	b91e      	cbnz	r6, 800be9a <_printf_i+0x196>
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	f023 0320 	bic.w	r3, r3, #32
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	2310      	movs	r3, #16
 800be9c:	e7b0      	b.n	800be00 <_printf_i+0xfc>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	f043 0320 	orr.w	r3, r3, #32
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2378      	movs	r3, #120	; 0x78
 800bea8:	4828      	ldr	r0, [pc, #160]	; (800bf4c <_printf_i+0x248>)
 800beaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beae:	e7e3      	b.n	800be78 <_printf_i+0x174>
 800beb0:	0659      	lsls	r1, r3, #25
 800beb2:	bf48      	it	mi
 800beb4:	b2b6      	uxthmi	r6, r6
 800beb6:	e7e6      	b.n	800be86 <_printf_i+0x182>
 800beb8:	4615      	mov	r5, r2
 800beba:	e7bb      	b.n	800be34 <_printf_i+0x130>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	6826      	ldr	r6, [r4, #0]
 800bec0:	6961      	ldr	r1, [r4, #20]
 800bec2:	1d18      	adds	r0, r3, #4
 800bec4:	6028      	str	r0, [r5, #0]
 800bec6:	0635      	lsls	r5, r6, #24
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	d501      	bpl.n	800bed0 <_printf_i+0x1cc>
 800becc:	6019      	str	r1, [r3, #0]
 800bece:	e002      	b.n	800bed6 <_printf_i+0x1d2>
 800bed0:	0670      	lsls	r0, r6, #25
 800bed2:	d5fb      	bpl.n	800becc <_printf_i+0x1c8>
 800bed4:	8019      	strh	r1, [r3, #0]
 800bed6:	2300      	movs	r3, #0
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	4615      	mov	r5, r2
 800bedc:	e7ba      	b.n	800be54 <_printf_i+0x150>
 800bede:	682b      	ldr	r3, [r5, #0]
 800bee0:	1d1a      	adds	r2, r3, #4
 800bee2:	602a      	str	r2, [r5, #0]
 800bee4:	681d      	ldr	r5, [r3, #0]
 800bee6:	6862      	ldr	r2, [r4, #4]
 800bee8:	2100      	movs	r1, #0
 800beea:	4628      	mov	r0, r5
 800beec:	f7f4 f980 	bl	80001f0 <memchr>
 800bef0:	b108      	cbz	r0, 800bef6 <_printf_i+0x1f2>
 800bef2:	1b40      	subs	r0, r0, r5
 800bef4:	6060      	str	r0, [r4, #4]
 800bef6:	6863      	ldr	r3, [r4, #4]
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	2300      	movs	r3, #0
 800befc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf00:	e7a8      	b.n	800be54 <_printf_i+0x150>
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	462a      	mov	r2, r5
 800bf06:	4649      	mov	r1, r9
 800bf08:	4640      	mov	r0, r8
 800bf0a:	47d0      	blx	sl
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d0ab      	beq.n	800be68 <_printf_i+0x164>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	079b      	lsls	r3, r3, #30
 800bf14:	d413      	bmi.n	800bf3e <_printf_i+0x23a>
 800bf16:	68e0      	ldr	r0, [r4, #12]
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	4298      	cmp	r0, r3
 800bf1c:	bfb8      	it	lt
 800bf1e:	4618      	movlt	r0, r3
 800bf20:	e7a4      	b.n	800be6c <_printf_i+0x168>
 800bf22:	2301      	movs	r3, #1
 800bf24:	4632      	mov	r2, r6
 800bf26:	4649      	mov	r1, r9
 800bf28:	4640      	mov	r0, r8
 800bf2a:	47d0      	blx	sl
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d09b      	beq.n	800be68 <_printf_i+0x164>
 800bf30:	3501      	adds	r5, #1
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	9903      	ldr	r1, [sp, #12]
 800bf36:	1a5b      	subs	r3, r3, r1
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	dcf2      	bgt.n	800bf22 <_printf_i+0x21e>
 800bf3c:	e7eb      	b.n	800bf16 <_printf_i+0x212>
 800bf3e:	2500      	movs	r5, #0
 800bf40:	f104 0619 	add.w	r6, r4, #25
 800bf44:	e7f5      	b.n	800bf32 <_printf_i+0x22e>
 800bf46:	bf00      	nop
 800bf48:	0800cab9 	.word	0x0800cab9
 800bf4c:	0800caca 	.word	0x0800caca

0800bf50 <__sread>:
 800bf50:	b510      	push	{r4, lr}
 800bf52:	460c      	mov	r4, r1
 800bf54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf58:	f000 f894 	bl	800c084 <_read_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	bfab      	itete	ge
 800bf60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf62:	89a3      	ldrhlt	r3, [r4, #12]
 800bf64:	181b      	addge	r3, r3, r0
 800bf66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf6a:	bfac      	ite	ge
 800bf6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf6e:	81a3      	strhlt	r3, [r4, #12]
 800bf70:	bd10      	pop	{r4, pc}

0800bf72 <__swrite>:
 800bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	461f      	mov	r7, r3
 800bf78:	898b      	ldrh	r3, [r1, #12]
 800bf7a:	05db      	lsls	r3, r3, #23
 800bf7c:	4605      	mov	r5, r0
 800bf7e:	460c      	mov	r4, r1
 800bf80:	4616      	mov	r6, r2
 800bf82:	d505      	bpl.n	800bf90 <__swrite+0x1e>
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	2302      	movs	r3, #2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f000 f868 	bl	800c060 <_lseek_r>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf9a:	81a3      	strh	r3, [r4, #12]
 800bf9c:	4632      	mov	r2, r6
 800bf9e:	463b      	mov	r3, r7
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	f000 b817 	b.w	800bfd8 <_write_r>

0800bfaa <__sseek>:
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	460c      	mov	r4, r1
 800bfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb2:	f000 f855 	bl	800c060 <_lseek_r>
 800bfb6:	1c43      	adds	r3, r0, #1
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	bf15      	itete	ne
 800bfbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfc6:	81a3      	strheq	r3, [r4, #12]
 800bfc8:	bf18      	it	ne
 800bfca:	81a3      	strhne	r3, [r4, #12]
 800bfcc:	bd10      	pop	{r4, pc}

0800bfce <__sclose>:
 800bfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd2:	f000 b813 	b.w	800bffc <_close_r>
	...

0800bfd8 <_write_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	4d07      	ldr	r5, [pc, #28]	; (800bff8 <_write_r+0x20>)
 800bfdc:	4604      	mov	r4, r0
 800bfde:	4608      	mov	r0, r1
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	602a      	str	r2, [r5, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f7f6 fa19 	bl	800241e <_write>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_write_r+0x1e>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_write_r+0x1e>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20000ecc 	.word	0x20000ecc

0800bffc <_close_r>:
 800bffc:	b538      	push	{r3, r4, r5, lr}
 800bffe:	4d06      	ldr	r5, [pc, #24]	; (800c018 <_close_r+0x1c>)
 800c000:	2300      	movs	r3, #0
 800c002:	4604      	mov	r4, r0
 800c004:	4608      	mov	r0, r1
 800c006:	602b      	str	r3, [r5, #0]
 800c008:	f7f6 fa25 	bl	8002456 <_close>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d102      	bne.n	800c016 <_close_r+0x1a>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	b103      	cbz	r3, 800c016 <_close_r+0x1a>
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	20000ecc 	.word	0x20000ecc

0800c01c <_fstat_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d07      	ldr	r5, [pc, #28]	; (800c03c <_fstat_r+0x20>)
 800c020:	2300      	movs	r3, #0
 800c022:	4604      	mov	r4, r0
 800c024:	4608      	mov	r0, r1
 800c026:	4611      	mov	r1, r2
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	f7f6 fa20 	bl	800246e <_fstat>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	d102      	bne.n	800c038 <_fstat_r+0x1c>
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	b103      	cbz	r3, 800c038 <_fstat_r+0x1c>
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	bf00      	nop
 800c03c:	20000ecc 	.word	0x20000ecc

0800c040 <_isatty_r>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d06      	ldr	r5, [pc, #24]	; (800c05c <_isatty_r+0x1c>)
 800c044:	2300      	movs	r3, #0
 800c046:	4604      	mov	r4, r0
 800c048:	4608      	mov	r0, r1
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	f7f6 fa1f 	bl	800248e <_isatty>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d102      	bne.n	800c05a <_isatty_r+0x1a>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	b103      	cbz	r3, 800c05a <_isatty_r+0x1a>
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	20000ecc 	.word	0x20000ecc

0800c060 <_lseek_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_lseek_r+0x20>)
 800c064:	4604      	mov	r4, r0
 800c066:	4608      	mov	r0, r1
 800c068:	4611      	mov	r1, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	602a      	str	r2, [r5, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	f7f6 fa18 	bl	80024a4 <_lseek>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_lseek_r+0x1e>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_lseek_r+0x1e>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	20000ecc 	.word	0x20000ecc

0800c084 <_read_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4d07      	ldr	r5, [pc, #28]	; (800c0a4 <_read_r+0x20>)
 800c088:	4604      	mov	r4, r0
 800c08a:	4608      	mov	r0, r1
 800c08c:	4611      	mov	r1, r2
 800c08e:	2200      	movs	r2, #0
 800c090:	602a      	str	r2, [r5, #0]
 800c092:	461a      	mov	r2, r3
 800c094:	f7f6 f9a6 	bl	80023e4 <_read>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_read_r+0x1e>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_read_r+0x1e>
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	20000ecc 	.word	0x20000ecc

0800c0a8 <_init>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr

0800c0b4 <_fini>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr
