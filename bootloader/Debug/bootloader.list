
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaf8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae48  0800ae48  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae50  0800ae50  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ae58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a00  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a90  20000a90  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024521  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a7e  00000000  00000000  000445e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00049060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b60  00000000  00000000  0004ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a864  00000000  00000000  0004c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e0f  00000000  00000000  00077154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed07a  00000000  00000000  0009cf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00189fdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084e8  00000000  00000000  0018a030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac90 	.word	0x0800ac90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800ac90 	.word	0x0800ac90

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 f9b9 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f863 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fafd 	bl	8000ba0 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f8cb 	bl	8000740 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f8dd 	bl	8000768 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 faa7 	bl	8000b00 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f90b 	bl	80007cc <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f949 	bl	800084c <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9c7 	bl	800094c <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 f9fb 	bl	80009b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 fa73 	bl	8000aac <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f009 f80f 	bl	80095e8 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa45 	bl	8000a58 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	481d      	ldr	r0, [pc, #116]	; (800064c <main+0xb8>)
 80005d6:	f001 fe97 	bl	8002308 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <main+0xbc>)
 80005e2:	f009 fc31 	bl	8009e48 <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0xc0>)
 80005e8:	607b      	str	r3, [r7, #4]
  bool goto_ota_mode = false;
 80005ea:	2300      	movs	r3, #0
 80005ec:	70fb      	strb	r3, [r7, #3]

  switch(cfg->reboot_cause)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	d00c      	beq.n	8000612 <main+0x7e>
 80005f8:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 80005fc:	d019      	beq.n	8000632 <main+0x9e>
 80005fe:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000602:	d81a      	bhi.n	800063a <main+0xa6>
 8000604:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 8000608:	d009      	beq.n	800061e <main+0x8a>
 800060a:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 800060e:	d00a      	beq.n	8000626 <main+0x92>
 8000610:	e013      	b.n	800063a <main+0xa6>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\nNo Configuration was found\r\n");
 8000612:	4811      	ldr	r0, [pc, #68]	; (8000658 <main+0xc4>)
 8000614:	f009 fc9e 	bl	8009f54 <puts>
		  goto_ota_mode = true;
 8000618:	2301      	movs	r3, #1
 800061a:	70fb      	strb	r3, [r7, #3]
	  }
	  break;
 800061c:	e00d      	b.n	800063a <main+0xa6>

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot, Validate Application...\r\n");
 800061e:	480f      	ldr	r0, [pc, #60]	; (800065c <main+0xc8>)
 8000620:	f009 fc98 	bl	8009f54 <puts>
	  }
	  break;
 8000624:	e009      	b.n	800063a <main+0xa6>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0xcc>)
 8000628:	f009 fc94 	bl	8009f54 <puts>
		  goto_ota_mode = true;
 800062c:	2301      	movs	r3, #1
 800062e:	70fb      	strb	r3, [r7, #3]
	  }
	  break;
 8000630:	e003      	b.n	800063a <main+0xa6>

	  case OTA_LOAD_PREV_APP:
	  {
		  printf("Update Unsuccessful, Back to previous App if Available\r\n");
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <main+0xd0>)
 8000634:	f009 fc8e 	bl	8009f54 <puts>

	  }
	  break;
 8000638:	bf00      	nop
  }


  HAL_Delay(2000);
 800063a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063e:	f001 f9a9 	bl	8001994 <HAL_Delay>
  go_to_application();
 8000642:	f000 fbcf 	bl	8000de4 <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000646:	f008 fff5 	bl	8009634 <MX_USB_HOST_Process>
 800064a:	e7fc      	b.n	8000646 <main+0xb2>
 800064c:	40021800 	.word	0x40021800
 8000650:	0800aca8 	.word	0x0800aca8
 8000654:	08010000 	.word	0x08010000
 8000658:	0800acc8 	.word	0x0800acc8
 800065c:	0800acf8 	.word	0x0800acf8
 8000660:	0800ad20 	.word	0x0800ad20
 8000664:	0800ad3c 	.word	0x0800ad3c

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f009 fafe 	bl	8009c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <SystemClock_Config+0xd0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd4>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006dc:	2310      	movs	r3, #16
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 ff54 	bl	80045a0 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 fb9f 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2102      	movs	r1, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f9b5 	bl	8004a90 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800072c:	f000 fb88 	bl	8000e40 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CRC_Init+0x20>)
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <MX_CRC_Init+0x24>)
 8000748:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_CRC_Init+0x20>)
 800074c:	f001 fa28 	bl	8001ba0 <HAL_CRC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000756:	f000 fb73 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ac 	.word	0x200000ac
 8000764:	40023000 	.word	0x40023000

08000768 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_DMA2D_Init+0x60>)
 8000770:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 800079e:	f001 fa1b 	bl	8001bd8 <HAL_DMA2D_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007a8:	f000 fb4a 	bl	8000e40 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007ac:	2101      	movs	r1, #1
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_DMA2D_Init+0x5c>)
 80007b0:	f001 fb6c 	bl	8001e8c <HAL_DMA2D_ConfigLayer>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007ba:	f000 fb41 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b4 	.word	0x200000b4
 80007c8:	4002b000 	.word	0x4002b000

080007cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C3_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C3_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C3_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C3_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C3_Init+0x74>)
 80007ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_I2C3_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_I2C3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_I2C3_Init+0x74>)
 800080a:	f003 f9a1 	bl	8003b50 <HAL_I2C_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 fb14 	bl	8000e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C3_Init+0x74>)
 800081c:	f003 fadc 	bl	8003dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000826:	f000 fb0b 	bl	8000e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_I2C3_Init+0x74>)
 800082e:	f003 fb0f 	bl	8003e50 <HAL_I2CEx_ConfigDigitalFilter>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000838:	f000 fb02 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000f4 	.word	0x200000f4
 8000844:	40005c00 	.word	0x40005c00
 8000848:	000186a0 	.word	0x000186a0

0800084c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	; 0x38
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2234      	movs	r2, #52	; 0x34
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f009 fa0d 	bl	8009c78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800085e:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000860:	4a39      	ldr	r2, [pc, #228]	; (8000948 <MX_LTDC_Init+0xfc>)
 8000862:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000864:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_LTDC_Init+0xf8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MX_LTDC_Init+0xf8>)
 800087e:	2209      	movs	r2, #9
 8000880:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000882:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000884:	2201      	movs	r2, #1
 8000886:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_LTDC_Init+0xf8>)
 800088a:	221d      	movs	r2, #29
 800088c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000890:	2203      	movs	r2, #3
 8000892:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_LTDC_Init+0xf8>)
 8000896:	f240 120d 	movw	r2, #269	; 0x10d
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_LTDC_Init+0xf8>)
 800089e:	f240 1243 	movw	r2, #323	; 0x143
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008a6:	f240 1217 	movw	r2, #279	; 0x117
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008ae:	f240 1247 	movw	r2, #327	; 0x147
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <MX_LTDC_Init+0xf8>)
 80008ce:	f003 faff 	bl	8003ed0 <HAL_LTDC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 fab2 	bl	8000e40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008e0:	23f0      	movs	r3, #240	; 0xf0
 80008e2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008ec:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008ee:	2302      	movs	r3, #2
 80008f0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008f2:	23ff      	movs	r3, #255	; 0xff
 80008f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008fe:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000900:	2307      	movs	r3, #7
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000904:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800090a:	23f0      	movs	r3, #240	; 0xf0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800090e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_LTDC_Init+0xf8>)
 800092e:	f003 fc61 	bl	80041f4 <HAL_LTDC_ConfigLayer>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000938:	f000 fa82 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000148 	.word	0x20000148
 8000948:	40016800 	.word	0x40016800

0800094c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_SPI5_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI5_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000980:	2218      	movs	r2, #24
 8000982:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI5_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI5_Init+0x64>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI5_Init+0x64>)
 800099e:	f004 fcbd 	bl	800531c <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009a8:	f000 fa4a 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001f0 	.word	0x200001f0
 80009b4:	40015000 	.word	0x40015000

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <MX_TIM1_Init+0x9c>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_TIM1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <MX_TIM1_Init+0x98>)
 8000a02:	f004 fd14 	bl	800542e <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 fa18 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_TIM1_Init+0x98>)
 8000a1e:	f004 fecd 	bl	80057bc <HAL_TIM_ConfigClockSource>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a28:	f000 fa0a 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_TIM1_Init+0x98>)
 8000a3a:	f005 f8e9 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 f9fc 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000248 	.word	0x20000248
 8000a54:	40010000 	.word	0x40010000

08000a58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_UART5_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_UART5_Init+0x4c>)
 8000a90:	f005 f94e 	bl	8005d30 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f000 f9d1 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000290 	.word	0x20000290
 8000aa8:	40005000 	.word	0x40005000

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART1_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f005 f924 	bl	8005d30 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f9a7 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200002d4 	.word	0x200002d4
 8000afc:	40011000 	.word	0x40011000

08000b00 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
 8000b14:	615a      	str	r2, [r3, #20]
 8000b16:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b1a:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <MX_FMC_Init+0x9c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b1e:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b32:	2210      	movs	r2, #16
 8000b34:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b3e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b42:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b50:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b70:	2303      	movs	r3, #3
 8000b72:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_FMC_Init+0x98>)
 8000b82:	f004 fb97 	bl	80052b4 <HAL_SDRAM_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b8c:	f000 f958 	bl	8000e40 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000318 	.word	0x20000318
 8000b9c:	a0000140 	.word	0xa0000140

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	4b7b      	ldr	r3, [pc, #492]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a7a      	ldr	r2, [pc, #488]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	4b74      	ldr	r3, [pc, #464]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a73      	ldr	r2, [pc, #460]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0320 	and.w	r3, r3, #32
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4b6d      	ldr	r3, [pc, #436]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a6c      	ldr	r2, [pc, #432]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	4b66      	ldr	r3, [pc, #408]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a65      	ldr	r2, [pc, #404]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a5e      	ldr	r2, [pc, #376]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b5c      	ldr	r3, [pc, #368]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b51      	ldr	r3, [pc, #324]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a50      	ldr	r2, [pc, #320]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a49      	ldr	r2, [pc, #292]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <MX_GPIO_Init+0x208>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2116      	movs	r1, #22
 8000c9a:	4844      	ldr	r0, [pc, #272]	; (8000dac <MX_GPIO_Init+0x20c>)
 8000c9c:	f001 fb34 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	4842      	ldr	r0, [pc, #264]	; (8000db0 <MX_GPIO_Init+0x210>)
 8000ca6:	f001 fb2f 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cb0:	4840      	ldr	r0, [pc, #256]	; (8000db4 <MX_GPIO_Init+0x214>)
 8000cb2:	f001 fb29 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cbc:	483e      	ldr	r0, [pc, #248]	; (8000db8 <MX_GPIO_Init+0x218>)
 8000cbe:	f001 fb23 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cc2:	2316      	movs	r3, #22
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4834      	ldr	r0, [pc, #208]	; (8000dac <MX_GPIO_Init+0x20c>)
 8000cda:	f001 f969 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cde:	f248 0307 	movw	r3, #32775	; 0x8007
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482e      	ldr	r0, [pc, #184]	; (8000db0 <MX_GPIO_Init+0x210>)
 8000cf6:	f001 f95b 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <MX_GPIO_Init+0x210>)
 8000d12:	f001 f94d 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d16:	2320      	movs	r3, #32
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <MX_GPIO_Init+0x20c>)
 8000d2c:	f001 f940 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4619      	mov	r1, r3
 8000d42:	481e      	ldr	r0, [pc, #120]	; (8000dbc <MX_GPIO_Init+0x21c>)
 8000d44:	f001 f934 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4815      	ldr	r0, [pc, #84]	; (8000db4 <MX_GPIO_Init+0x214>)
 8000d5e:	f001 f927 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d62:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_GPIO_Init+0x214>)
 8000d7c:	f001 f918 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_GPIO_Init+0x218>)
 8000d9a:	f001 f909 	bl	8001fb0 <HAL_GPIO_Init>

}
 8000d9e:	bf00      	nop
 8000da0:	3738      	adds	r7, #56	; 0x38
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <__io_putchar+0x20>)
 8000dd2:	f004 fffa 	bl	8005dca <HAL_UART_Transmit>
	return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200002d4 	.word	0x200002d4

08000de4 <go_to_application>:

static void go_to_application (void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <go_to_application+0x2c>)
 8000dec:	f009 f8b2 	bl	8009f54 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08040000 + 4));
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <go_to_application+0x30>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (0x08040000)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <go_to_application+0x34>)
 8000dfe:	f001 fa83 	bl	8002308 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4798      	blx	r3
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800ad74 	.word	0x0800ad74
 8000e14:	08040004 	.word	0x08040004
 8000e18:	40021800 	.word	0x40021800

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2e:	f000 fd91 	bl	8001954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40001000 	.word	0x40001000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_CRC_MspInit+0x3c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10d      	bne.n	8000eca <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_CRC_MspInit+0x40>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_CRC_MspInit+0x40>)
 8000eb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_CRC_MspInit+0x40>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023000 	.word	0x40023000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_DMA2D_MspInit+0x48>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d115      	bne.n	8000f1e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_DMA2D_MspInit+0x4c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_DMA2D_MspInit+0x4c>)
 8000efc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_DMA2D_MspInit+0x4c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	205a      	movs	r0, #90	; 0x5a
 8000f14:	f000 fe1a 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f18:	205a      	movs	r0, #90	; 0x5a
 8000f1a:	f000 fe33 	bl	8001b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	4002b000 	.word	0x4002b000
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_I2C_MspInit+0xc4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d14b      	bne.n	8000fea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4815      	ldr	r0, [pc, #84]	; (8000ffc <HAL_I2C_MspInit+0xcc>)
 8000fa8:	f001 f802 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <HAL_I2C_MspInit+0xd0>)
 8000fca:	f000 fff1 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_I2C_MspInit+0xc8>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40005c00 	.word	0x40005c00
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b09a      	sub	sp, #104	; 0x68
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	2230      	movs	r2, #48	; 0x30
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 fe27 	bl	8009c78 <memset>
  if(hltdc->Instance==LTDC)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a85      	ldr	r2, [pc, #532]	; (8001244 <HAL_LTDC_MspInit+0x240>)
 8001030:	4293      	cmp	r3, r2
 8001032:	f040 8102 	bne.w	800123a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001036:	2308      	movs	r3, #8
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800103a:	2331      	movs	r3, #49	; 0x31
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 800103e:	2302      	movs	r3, #2
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	4618      	mov	r0, r3
 800104c:	f003 ff72 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001056:	f7ff fef3 	bl	8000e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a79      	ldr	r2, [pc, #484]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001064:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b77      	ldr	r3, [pc, #476]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	4b73      	ldr	r3, [pc, #460]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a72      	ldr	r2, [pc, #456]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b70      	ldr	r3, [pc, #448]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a6b      	ldr	r2, [pc, #428]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b69      	ldr	r3, [pc, #420]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a64      	ldr	r2, [pc, #400]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a56      	ldr	r2, [pc, #344]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b54      	ldr	r3, [pc, #336]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b50      	ldr	r3, [pc, #320]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <HAL_LTDC_MspInit+0x244>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001130:	230e      	movs	r3, #14
 8001132:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001138:	4619      	mov	r1, r3
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <HAL_LTDC_MspInit+0x248>)
 800113c:	f000 ff38 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001140:	f641 0358 	movw	r3, #6232	; 0x1858
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001152:	230e      	movs	r3, #14
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115a:	4619      	mov	r1, r3
 800115c:	483c      	ldr	r0, [pc, #240]	; (8001250 <HAL_LTDC_MspInit+0x24c>)
 800115e:	f000 ff27 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001162:	2303      	movs	r3, #3
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001172:	2309      	movs	r3, #9
 8001174:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800117a:	4619      	mov	r1, r3
 800117c:	4835      	ldr	r0, [pc, #212]	; (8001254 <HAL_LTDC_MspInit+0x250>)
 800117e:	f000 ff17 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001182:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001194:	230e      	movs	r3, #14
 8001196:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800119c:	4619      	mov	r1, r3
 800119e:	482d      	ldr	r0, [pc, #180]	; (8001254 <HAL_LTDC_MspInit+0x250>)
 80011a0:	f000 ff06 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011a4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b6:	230e      	movs	r3, #14
 80011b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011be:	4619      	mov	r1, r3
 80011c0:	4825      	ldr	r0, [pc, #148]	; (8001258 <HAL_LTDC_MspInit+0x254>)
 80011c2:	f000 fef5 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011c6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d8:	230e      	movs	r3, #14
 80011da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e0:	4619      	mov	r1, r3
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <HAL_LTDC_MspInit+0x258>)
 80011e4:	f000 fee4 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011e8:	2348      	movs	r3, #72	; 0x48
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f8:	230e      	movs	r3, #14
 80011fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <HAL_LTDC_MspInit+0x25c>)
 8001204:	f000 fed4 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800121a:	2309      	movs	r3, #9
 800121c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_LTDC_MspInit+0x254>)
 8001226:	f000 fec3 	bl	8001fb0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2105      	movs	r1, #5
 800122e:	2058      	movs	r0, #88	; 0x58
 8001230:	f000 fc8c 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001234:	2058      	movs	r0, #88	; 0x58
 8001236:	f000 fca5 	bl	8001b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3768      	adds	r7, #104	; 0x68
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40016800 	.word	0x40016800
 8001248:	40023800 	.word	0x40023800
 800124c:	40021400 	.word	0x40021400
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40021800 	.word	0x40021800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_SPI_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12c      	bne.n	80012e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0x88>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_SPI_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012be:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012d0:	2305      	movs	r3, #5
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012dc:	f000 fe68 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40015000 	.word	0x40015000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40021400 	.word	0x40021400

080012f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10d      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_TIM_Base_MspInit+0x40>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <HAL_TIM_Base_MspInit+0x40>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_TIM_Base_MspInit+0x40>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40010000 	.word	0x40010000
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a42      	ldr	r2, [pc, #264]	; (8001460 <HAL_UART_MspInit+0x128>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d14b      	bne.n	80013f2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a39      	ldr	r2, [pc, #228]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b33      	ldr	r3, [pc, #204]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_UART_MspInit+0x12c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013c0:	2308      	movs	r3, #8
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <HAL_UART_MspInit+0x130>)
 80013cc:	f000 fdf0 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d0:	2304      	movs	r3, #4
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013e0:	2308      	movs	r3, #8
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <HAL_UART_MspInit+0x134>)
 80013ec:	f000 fde0 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f0:	e031      	b.n	8001456 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_UART_MspInit+0x138>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d12c      	bne.n	8001456 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6453      	str	r3, [r2, #68]	; 0x44
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_UART_MspInit+0x12c>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_UART_MspInit+0x12c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001434:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001446:	2307      	movs	r3, #7
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4808      	ldr	r0, [pc, #32]	; (8001474 <HAL_UART_MspInit+0x13c>)
 8001452:	f000 fdad 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001456:	bf00      	nop
 8001458:	3730      	adds	r7, #48	; 0x30
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40005000 	.word	0x40005000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40011000 	.word	0x40011000
 8001474:	40020000 	.word	0x40020000

08001478 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_FMC_MspInit+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d16f      	bne.n	8001574 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_FMC_MspInit+0x104>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014ba:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <HAL_FMC_MspInit+0x10c>)
 80014d2:	f000 fd6d 	bl	8001fb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e6:	230c      	movs	r3, #12
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_FMC_MspInit+0x110>)
 80014f0:	f000 fd5e 	bl	8001fb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80014f8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <HAL_FMC_MspInit+0x114>)
 8001510:	f000 fd4e 	bl	8001fb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001514:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001518:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001526:	230c      	movs	r3, #12
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	; (8001590 <HAL_FMC_MspInit+0x118>)
 8001530:	f000 fd3e 	bl	8001fb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001534:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001538:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001546:	230c      	movs	r3, #12
 8001548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <HAL_FMC_MspInit+0x11c>)
 8001550:	f000 fd2e 	bl	8001fb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001564:	230c      	movs	r3, #12
 8001566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_FMC_MspInit+0x120>)
 800156e:	f000 fd1f 	bl	8001fb0 <HAL_GPIO_Init>
 8001572:	e000      	b.n	8001576 <HAL_FMC_MspInit+0xfe>
    return;
 8001574:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000034c 	.word	0x2000034c
 8001580:	40023800 	.word	0x40023800
 8001584:	40021400 	.word	0x40021400
 8001588:	40020800 	.word	0x40020800
 800158c:	40021800 	.word	0x40021800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015a4:	f7ff ff68 	bl	8001478 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_InitTick+0xe4>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_InitTick+0xe4>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_InitTick+0xe4>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015dc:	f107 0210 	add.w	r2, r7, #16
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fc72 	bl	8004ed0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f6:	f003 fc43 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80015fa:	6378      	str	r0, [r7, #52]	; 0x34
 80015fc:	e004      	b.n	8001608 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fe:	f003 fc3f 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8001602:	4603      	mov	r3, r0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <HAL_InitTick+0xe8>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	3b01      	subs	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_InitTick+0xec>)
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_InitTick+0xf0>)
 800161a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_InitTick+0xec>)
 800161e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001622:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_InitTick+0xec>)
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_InitTick+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_InitTick+0xec>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_InitTick+0xec>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <HAL_InitTick+0xec>)
 800163e:	f003 fef6 	bl	800542e <HAL_TIM_Base_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11b      	bne.n	8001688 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <HAL_InitTick+0xec>)
 8001652:	f003 ff3b 	bl	80054cc <HAL_TIM_Base_Start_IT>
 8001656:	4603      	mov	r3, r0
 8001658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800165c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001664:	2036      	movs	r0, #54	; 0x36
 8001666:	f000 fa8d 	bl	8001b84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d808      	bhi.n	8001682 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2036      	movs	r0, #54	; 0x36
 8001676:	f000 fa69 	bl	8001b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0xf4>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e002      	b.n	8001688 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001688:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800168c:	4618      	mov	r0, r3
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	431bde83 	.word	0x431bde83
 800169c:	20000350 	.word	0x20000350
 80016a0:	40001000 	.word	0x40001000
 80016a4:	20000004 	.word	0x20000004

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM6_DAC_IRQHandler+0x10>)
 8001706:	f003 ff51 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000350 	.word	0x20000350

08001714 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <OTG_HS_IRQHandler+0x10>)
 800171a:	f001 f879 	bl	8002810 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000077c 	.word	0x2000077c

08001728 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <LTDC_IRQHandler+0x10>)
 800172e:	f002 fc9f 	bl	8004070 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000148 	.word	0x20000148

0800173c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA2D_IRQHandler+0x10>)
 8001742:	f000 fa92 	bl	8001c6a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000b4 	.word	0x200000b4

08001750 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
  }

  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e009      	b.n	80017b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fb0b 	bl	8000dc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf1      	blt.n	800179c <_write+0x12>
  }
  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_close>:

int _close(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ea:	605a      	str	r2, [r3, #4]
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_isatty>:

int _isatty(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f008 f9d2 	bl	8009c04 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20030000 	.word	0x20030000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000398 	.word	0x20000398
 8001894:	20000a90 	.word	0x20000a90

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018c2:	490e      	ldr	r1, [pc, #56]	; (80018fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d8:	4c0b      	ldr	r4, [pc, #44]	; (8001908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e6:	f7ff ffd7 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f008 f991 	bl	8009c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7fe fe51 	bl	8000594 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001900:	0800ae58 	.word	0x0800ae58
  ldr r2, =_sbss
 8001904:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001908:	20000a90 	.word	0x20000a90

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f8fc 	bl	8001b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f7ff fe36 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fa82 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	2000039c 	.word	0x2000039c

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000039c 	.word	0x2000039c

08001994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
  {
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ff4c 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5e:	f7ff ff61 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	6978      	ldr	r0, [r7, #20]
 8001b6a:	f7ff ffb1 	bl	8001ad0 <NVIC_EncodePriority>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff80 	bl	8001a7c <__NVIC_SetPriority>
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff54 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	795b      	ldrb	r3, [r3, #5]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff f96a 	bl	8000e9c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e03b      	b.n	8001c62 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff f96e 	bl	8000ee0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	f023 0107 	bic.w	r1, r3, #7
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68d1      	ldr	r1, [r2, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d026      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d021      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d026      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d021      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2220      	movs	r2, #32
 8001d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	f043 0202 	orr.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d026      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d021      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	f043 0204 	orr.w	r2, r3, #4
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00e      	beq.n	8001dbc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f853 	bl	8001e62 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d024      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01f      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01f      	beq.n	8001e5a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01a      	beq.n	8001e5a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f80e 	bl	8001e76 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA2D_ConfigLayer+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e079      	b.n	8001fa0 <HAL_DMA2D_ConfigLayer+0x114>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	3318      	adds	r3, #24
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ed6:	4b35      	ldr	r3, [pc, #212]	; (8001fac <HAL_DMA2D_ConfigLayer+0x120>)
 8001ed8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d003      	beq.n	8001eea <HAL_DMA2D_ConfigLayer+0x5e>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d107      	bne.n	8001efa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e005      	b.n	8001f06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d120      	bne.n	8001f4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	ea02 0103 	and.w	r1, r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d003      	beq.n	8001f3e <HAL_DMA2D_ConfigLayer+0xb2>
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	d127      	bne.n	8001f8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4c:	e01f      	b.n	8001f8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	ea02 0103 	and.w	r1, r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b0a      	cmp	r3, #10
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	d106      	bne.n	8001f8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f8c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	ff03000f 	.word	0xff03000f

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e177      	b.n	80022bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8166 	bne.w	80022b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80c0 	beq.w	80022b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_GPIO_Init+0x324>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_GPIO_Init+0x324>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_GPIO_Init+0x324>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <HAL_GPIO_Init+0x328>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_GPIO_Init+0x32c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d037      	beq.n	80021ee <HAL_GPIO_Init+0x23e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_GPIO_Init+0x330>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_GPIO_Init+0x23a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a56      	ldr	r2, [pc, #344]	; (80022e4 <HAL_GPIO_Init+0x334>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x236>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a55      	ldr	r2, [pc, #340]	; (80022e8 <HAL_GPIO_Init+0x338>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x232>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_GPIO_Init+0x33c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x22e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <HAL_GPIO_Init+0x340>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x22a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x344>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_Init+0x348>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_Init+0x34c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x350>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x21a>
 80021c6:	2309      	movs	r3, #9
 80021c8:	e012      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ca:	230a      	movs	r3, #10
 80021cc:	e010      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ce:	2308      	movs	r3, #8
 80021d0:	e00e      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e00c      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e00a      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021da:	2305      	movs	r3, #5
 80021dc:	e008      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021de:	2304      	movs	r3, #4
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e004      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_GPIO_Init+0x240>
 80021ee:	2300      	movs	r3, #0
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	4093      	lsls	r3, r2
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002200:	4935      	ldr	r1, [pc, #212]	; (80022d8 <HAL_GPIO_Init+0x328>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_GPIO_Init+0x354>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800225c:	4a29      	ldr	r2, [pc, #164]	; (8002304 <HAL_GPIO_Init+0x354>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_GPIO_Init+0x354>)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_GPIO_Init+0x354>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_GPIO_Init+0x354>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f ae84 	bls.w	8001fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40013800 	.word	0x40013800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40020400 	.word	0x40020400
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020c00 	.word	0x40020c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40021400 	.word	0x40021400
 80022f4:	40021800 	.word	0x40021800
 80022f8:	40021c00 	.word	0x40021c00
 80022fc:	40022000 	.word	0x40022000
 8002300:	40022400 	.word	0x40022400
 8002304:	40013c00 	.word	0x40013c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800233a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233c:	b08f      	sub	sp, #60	; 0x3c
 800233e:	af0a      	add	r7, sp, #40	; 0x28
 8002340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e054      	b.n	80023f6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f007 f99c 	bl	80096a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2203      	movs	r2, #3
 8002370:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 f9ca 	bl	8006724 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	687e      	ldr	r6, [r7, #4]
 8002398:	466d      	mov	r5, sp
 800239a:	f106 0410 	add.w	r4, r6, #16
 800239e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ae:	1d33      	adds	r3, r6, #4
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6838      	ldr	r0, [r7, #0]
 80023b4:	f004 f944 	bl	8006640 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 f9c1 	bl	8006746 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	687e      	ldr	r6, [r7, #4]
 80023cc:	466d      	mov	r5, sp
 80023ce:	f106 0410 	add.w	r4, r6, #16
 80023d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023de:	e885 0003 	stmia.w	r5, {r0, r1}
 80023e2:	1d33      	adds	r3, r6, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f004 fb4a 	bl	8006a80 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023fe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023fe:	b590      	push	{r4, r7, lr}
 8002400:	b089      	sub	sp, #36	; 0x24
 8002402:	af04      	add	r7, sp, #16
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4603      	mov	r3, r0
 800240e:	70fb      	strb	r3, [r7, #3]
 8002410:	460b      	mov	r3, r1
 8002412:	70bb      	strb	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_HCD_HC_Init+0x28>
 8002422:	2302      	movs	r3, #2
 8002424:	e076      	b.n	8002514 <HAL_HCD_HC_Init+0x116>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333d      	adds	r3, #61	; 0x3d
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3338      	adds	r3, #56	; 0x38
 800244e:	787a      	ldrb	r2, [r7, #1]
 8002450:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3340      	adds	r3, #64	; 0x40
 8002460:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002462:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3339      	adds	r3, #57	; 0x39
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	333f      	adds	r3, #63	; 0x3f
 8002484:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002488:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	78ba      	ldrb	r2, [r7, #2]
 800248e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002492:	b2d0      	uxtb	r0, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333a      	adds	r3, #58	; 0x3a
 80024a0:	4602      	mov	r2, r0
 80024a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80024a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da09      	bge.n	80024c0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	333b      	adds	r3, #59	; 0x3b
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e008      	b.n	80024d2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	333b      	adds	r3, #59	; 0x3b
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333c      	adds	r3, #60	; 0x3c
 80024e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	787c      	ldrb	r4, [r7, #1]
 80024ec:	78ba      	ldrb	r2, [r7, #2]
 80024ee:	78f9      	ldrb	r1, [r7, #3]
 80024f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4623      	mov	r3, r4
 8002502:	f004 fc43 	bl	8006d8c <USB_HC_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_HCD_HC_Halt+0x1e>
 8002536:	2302      	movs	r3, #2
 8002538:	e00f      	b.n	800255a <HAL_HCD_HC_Halt+0x3e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f004 fe93 	bl	8007276 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	70fb      	strb	r3, [r7, #3]
 8002576:	460b      	mov	r3, r1
 8002578:	70bb      	strb	r3, [r7, #2]
 800257a:	4613      	mov	r3, r2
 800257c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	333b      	adds	r3, #59	; 0x3b
 800258c:	78ba      	ldrb	r2, [r7, #2]
 800258e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	787a      	ldrb	r2, [r7, #1]
 80025a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80025a2:	7c3b      	ldrb	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d112      	bne.n	80025ce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3342      	adds	r3, #66	; 0x42
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333d      	adds	r3, #61	; 0x3d
 80025c8:	7f3a      	ldrb	r2, [r7, #28]
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e008      	b.n	80025e0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3342      	adds	r3, #66	; 0x42
 80025dc:	2202      	movs	r2, #2
 80025de:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	f200 80c6 	bhi.w	8002774 <HAL_HCD_HC_SubmitRequest+0x210>
 80025e8:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80025ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ee:	bf00      	nop
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002761 	.word	0x08002761
 80025f8:	08002665 	.word	0x08002665
 80025fc:	080026e3 	.word	0x080026e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002600:	7c3b      	ldrb	r3, [r7, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	f040 80b8 	bne.w	8002778 <HAL_HCD_HC_SubmitRequest+0x214>
 8002608:	78bb      	ldrb	r3, [r7, #2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 80b4 	bne.w	8002778 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002610:	8b3b      	ldrh	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3355      	adds	r3, #85	; 0x55
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3355      	adds	r3, #85	; 0x55
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3342      	adds	r3, #66	; 0x42
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800264e:	e093      	b.n	8002778 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	3342      	adds	r3, #66	; 0x42
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
      break;
 8002662:	e089      	b.n	8002778 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002664:	78bb      	ldrb	r3, [r7, #2]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3355      	adds	r3, #85	; 0x55
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3342      	adds	r3, #66	; 0x42
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002690:	e073      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3342      	adds	r3, #66	; 0x42
 80026a0:	2202      	movs	r2, #2
 80026a2:	701a      	strb	r2, [r3, #0]
      break;
 80026a4:	e069      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3354      	adds	r3, #84	; 0x54
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3342      	adds	r3, #66	; 0x42
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
      break;
 80026cc:	e055      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3342      	adds	r3, #66	; 0x42
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
      break;
 80026e0:	e04b      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026e2:	78bb      	ldrb	r3, [r7, #2]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11d      	bne.n	8002724 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3355      	adds	r3, #85	; 0x55
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3342      	adds	r3, #66	; 0x42
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800270e:	e034      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3342      	adds	r3, #66	; 0x42
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
      break;
 8002722:	e02a      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3354      	adds	r3, #84	; 0x54
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3342      	adds	r3, #66	; 0x42
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
      break;
 800274a:	e016      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3342      	adds	r3, #66	; 0x42
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
      break;
 800275e:	e00c      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3342      	adds	r3, #66	; 0x42
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
      break;
 8002772:	e002      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002778:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3344      	adds	r3, #68	; 0x44
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	8b3a      	ldrh	r2, [r7, #24]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	202c      	movs	r0, #44	; 0x2c
 8002794:	fb00 f303 	mul.w	r3, r0, r3
 8002798:	440b      	add	r3, r1
 800279a:	334c      	adds	r3, #76	; 0x4c
 800279c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3360      	adds	r3, #96	; 0x60
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3350      	adds	r3, #80	; 0x50
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3339      	adds	r3, #57	; 0x39
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3361      	adds	r3, #97	; 0x61
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	3338      	adds	r3, #56	; 0x38
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	18d1      	adds	r1, r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	f004 fbe6 	bl	8006fd0 <USB_HC_StartXfer>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop

08002810 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 f8e7 	bl	80069fa <USB_GetMode>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80f6 	bne.w	8002a20 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f8cb 	bl	80069d4 <USB_ReadInterrupts>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80ec 	beq.w	8002a1e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f8c2 	bl	80069d4 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800285a:	d104      	bne.n	8002866 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 f8b2 	bl	80069d4 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800287a:	d104      	bne.n	8002886 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002884:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f8a2 	bl	80069d4 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289a:	d104      	bne.n	80028a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 f892 	bl	80069d4 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d103      	bne.n	80028c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2202      	movs	r2, #2
 80028c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 f884 	bl	80069d4 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d6:	d11c      	bne.n	8002912 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028f2:	2110      	movs	r1, #16
 80028f4:	6938      	ldr	r0, [r7, #16]
 80028f6:	f003 ff73 	bl	80067e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028fa:	6938      	ldr	r0, [r7, #16]
 80028fc:	f003 ffa4 	bl	8006848 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f004 f97a 	bl	8006c00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f006 ff43 	bl	8009798 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 f85c 	bl	80069d4 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002926:	d102      	bne.n	800292e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 f89e 	bl	8003a6a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 f84e 	bl	80069d4 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b08      	cmp	r3, #8
 8002940:	d106      	bne.n	8002950 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f006 ff0c 	bl	8009760 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f004 f83d 	bl	80069d4 <USB_ReadInterrupts>
 800295a:	4603      	mov	r3, r0
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b10      	cmp	r3, #16
 8002962:	d101      	bne.n	8002968 <HAL_HCD_IRQHandler+0x158>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_HCD_IRQHandler+0x15a>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0210 	bic.w	r2, r2, #16
 800297c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 ffa1 	bl	80038c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0210 	orr.w	r2, r2, #16
 8002992:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f004 f81b 	bl	80069d4 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a8:	d13a      	bne.n	8002a20 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fc50 	bl	8007254 <USB_HC_ReadInterrupt>
 80029b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e025      	b.n	8002a08 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d018      	beq.n	8002a02 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	d106      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8ab 	bl	8002b4a <HCD_HC_IN_IRQHandler>
 80029f4:	e005      	b.n	8002a02 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fbf9 	bl	80031f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d3d4      	bcc.n	80029bc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1a:	615a      	str	r2, [r3, #20]
 8002a1c:	e000      	b.n	8002a20 <HAL_HCD_IRQHandler+0x210>
      return;
 8002a1e:	bf00      	nop
    }
  }
}
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_HCD_Start+0x16>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e013      	b.n	8002a64 <HAL_HCD_Start+0x3e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 f93c 	bl	8006cc8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fe54 	bl	8006702 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_HCD_Stop+0x16>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e00d      	b.n	8002a9e <HAL_HCD_Stop+0x32>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fd2a 	bl	80074e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 f8de 	bl	8006c74 <USB_ResetPort>
 8002ab8:	4603      	mov	r3, r0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3360      	adds	r3, #96	; 0x60
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3350      	adds	r3, #80	; 0x50
 8002b04:	681b      	ldr	r3, [r3, #0]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f922 	bl	8006d68 <USB_GetCurrentFrame>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 f8fd 	bl	8006d3a <USB_GetHostSpeed>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d11a      	bne.n	8002bb0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2304      	movs	r3, #4
 8002b8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 fb64 	bl	8007276 <USB_HC_Halt>
 8002bae:	e0af      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d11b      	bne.n	8002c00 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	2207      	movs	r2, #7
 8002bec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 fb3c 	bl	8007276 <USB_HC_Halt>
 8002bfe:	e087      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d109      	bne.n	8002c2a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	2320      	movs	r3, #32
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	e072      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11a      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2308      	movs	r3, #8
 8002c50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3361      	adds	r3, #97	; 0x61
 8002c60:	2205      	movs	r2, #5
 8002c62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fb01 	bl	8007276 <USB_HC_Halt>
 8002c74:	e04c      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8c:	d11b      	bne.n	8002cc6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3361      	adds	r3, #97	; 0x61
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f004 fad9 	bl	8007276 <USB_HC_Halt>
 8002cc4:	e024      	b.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b80      	cmp	r3, #128	; 0x80
 8002cda:	d119      	bne.n	8002d10 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	212c      	movs	r1, #44	; 0x2c
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3361      	adds	r3, #97	; 0x61
 8002cfc:	2206      	movs	r2, #6
 8002cfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fab3 	bl	8007276 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d26:	d112      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fa9f 	bl	8007276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d4c:	e24e      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 80df 	bne.w	8002f24 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3348      	adds	r3, #72	; 0x48
 8002d7c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0159      	lsls	r1, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	202c      	movs	r0, #44	; 0x2c
 8002d98:	fb00 f303 	mul.w	r3, r0, r3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3350      	adds	r3, #80	; 0x50
 8002da0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3361      	adds	r3, #97	; 0x61
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	333f      	adds	r3, #63	; 0x3f
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	333f      	adds	r3, #63	; 0x3f
 8002dfa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d111      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fa33 	bl	8007276 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2310      	movs	r3, #16
 8002e20:	6093      	str	r3, [r2, #8]
 8002e22:	e03a      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	333f      	adds	r3, #63	; 0x3f
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d009      	beq.n	8002e4c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	333f      	adds	r3, #63	; 0x3f
 8002e46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d126      	bne.n	8002e9a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	0151      	lsls	r1, r2, #5
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	440a      	add	r2, r1
 8002e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e6a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3360      	adds	r3, #96	; 0x60
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	b2d9      	uxtb	r1, r3
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	202c      	movs	r0, #44	; 0x2c
 8002e88:	fb00 f303 	mul.w	r3, r0, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3360      	adds	r3, #96	; 0x60
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f006 fc8d 	bl	80097b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12b      	bne.n	8002efa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3348      	adds	r3, #72	; 0x48
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	202c      	movs	r0, #44	; 0x2c
 8002eb8:	fb00 f202 	mul.w	r2, r0, r2
 8002ebc:	440a      	add	r2, r1
 8002ebe:	3240      	adds	r2, #64	; 0x40
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 818e 	beq.w	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3354      	adds	r3, #84	; 0x54
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3354      	adds	r3, #84	; 0x54
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]
}
 8002ef8:	e178      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3354      	adds	r3, #84	; 0x54
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f083 0301 	eor.w	r3, r3, #1
 8002f0e:	b2d8      	uxtb	r0, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3354      	adds	r3, #84	; 0x54
 8002f1e:	4602      	mov	r2, r0
 8002f20:	701a      	strb	r2, [r3, #0]
}
 8002f22:	e163      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	f040 80f6 	bne.w	8003128 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d109      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e0c9      	b.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3361      	adds	r3, #97	; 0x61
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d109      	bne.n	8002f8c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	2205      	movs	r2, #5
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e0b5      	b.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3361      	adds	r3, #97	; 0x61
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b06      	cmp	r3, #6
 8002f9e:	d009      	beq.n	8002fb4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3361      	adds	r3, #97	; 0x61
 8002fae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d150      	bne.n	8003056 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	335c      	adds	r3, #92	; 0x5c
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	202c      	movs	r0, #44	; 0x2c
 8002fcc:	fb00 f303 	mul.w	r3, r0, r3
 8002fd0:	440b      	add	r3, r1
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	335c      	adds	r3, #92	; 0x5c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d912      	bls.n	8003010 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	335c      	adds	r3, #92	; 0x5c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	2204      	movs	r2, #4
 800300c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800300e:	e073      	b.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3360      	adds	r3, #96	; 0x60
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4413      	add	r3, r2
 800302a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003038:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003040:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003054:	e050      	b.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3361      	adds	r3, #97	; 0x61
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d122      	bne.n	80030b0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3360      	adds	r3, #96	; 0x60
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003092:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800309a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e023      	b.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b07      	cmp	r3, #7
 80030c2:	d119      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	335c      	adds	r3, #92	; 0x5c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	202c      	movs	r0, #44	; 0x2c
 80030dc:	fb00 f303 	mul.w	r3, r0, r3
 80030e0:	440b      	add	r3, r1
 80030e2:	335c      	adds	r3, #92	; 0x5c
 80030e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3360      	adds	r3, #96	; 0x60
 80030f4:	2204      	movs	r2, #4
 80030f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003104:	461a      	mov	r2, r3
 8003106:	2302      	movs	r3, #2
 8003108:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	b2d9      	uxtb	r1, r3
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	202c      	movs	r0, #44	; 0x2c
 8003114:	fb00 f303 	mul.w	r3, r0, r3
 8003118:	4413      	add	r3, r2
 800311a:	3360      	adds	r3, #96	; 0x60
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f006 fb47 	bl	80097b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003126:	e061      	b.n	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d156      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	333f      	adds	r3, #63	; 0x3f
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b03      	cmp	r3, #3
 8003150:	d111      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f004 f881 	bl	8007276 <USB_HC_Halt>
 8003174:	e031      	b.n	80031da <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	333f      	adds	r3, #63	; 0x3f
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	333f      	adds	r3, #63	; 0x3f
 8003198:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800319a:	2b02      	cmp	r3, #2
 800319c:	d11d      	bne.n	80031da <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	335c      	adds	r3, #92	; 0x5c
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d110      	bne.n	80031da <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3361      	adds	r3, #97	; 0x61
 80031c6:	2203      	movs	r2, #3
 80031c8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 f84e 	bl	8007276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	2310      	movs	r3, #16
 80031ea:	6093      	str	r3, [r2, #8]
}
 80031ec:	bf00      	nop
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d11a      	bne.n	800325a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	2304      	movs	r3, #4
 8003234:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3361      	adds	r3, #97	; 0x61
 8003244:	2206      	movs	r2, #6
 8003246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f004 f80f 	bl	8007276 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003258:	e331      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	d12e      	bne.n	80032ce <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2320      	movs	r3, #32
 8003280:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	333d      	adds	r3, #61	; 0x3d
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 8313 	bne.w	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	333d      	adds	r3, #61	; 0x3d
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	3360      	adds	r3, #96	; 0x60
 80032b8:	2202      	movs	r2, #2
 80032ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 ffd5 	bl	8007276 <USB_HC_Halt>
}
 80032cc:	e2f7      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d112      	bne.n	800330c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f003 ffb6 	bl	8007276 <USB_HC_Halt>
}
 800330a:	e2d8      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d140      	bne.n	80033a4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	335c      	adds	r3, #92	; 0x5c
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d111      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	333d      	adds	r3, #61	; 0x3d
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	461a      	mov	r2, r3
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	461a      	mov	r2, r3
 800337c:	2301      	movs	r3, #1
 800337e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	3361      	adds	r3, #97	; 0x61
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f003 ff6a 	bl	8007276 <USB_HC_Halt>
}
 80033a2:	e28c      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d12c      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3361      	adds	r3, #97	; 0x61
 80033c8:	2204      	movs	r2, #4
 80033ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	333d      	adds	r3, #61	; 0x3d
 80033da:	2201      	movs	r2, #1
 80033dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 ff3b 	bl	8007276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2340      	movs	r3, #64	; 0x40
 8003410:	6093      	str	r3, [r2, #8]
}
 8003412:	e254      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11a      	bne.n	8003460 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003436:	461a      	mov	r2, r3
 8003438:	2308      	movs	r3, #8
 800343a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	2205      	movs	r2, #5
 800344c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f003 ff0c 	bl	8007276 <USB_HC_Halt>
}
 800345e:	e22e      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d140      	bne.n	80034f8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	335c      	adds	r3, #92	; 0x5c
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3361      	adds	r3, #97	; 0x61
 8003496:	2203      	movs	r2, #3
 8003498:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	333d      	adds	r3, #61	; 0x3d
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d112      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	333c      	adds	r3, #60	; 0x3c
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333d      	adds	r3, #61	; 0x3d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fec9 	bl	8007276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f0:	461a      	mov	r2, r3
 80034f2:	2310      	movs	r3, #16
 80034f4:	6093      	str	r3, [r2, #8]
}
 80034f6:	e1e2      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d164      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d111      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3361      	adds	r3, #97	; 0x61
 8003524:	2206      	movs	r2, #6
 8003526:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fe9f 	bl	8007276 <USB_HC_Halt>
 8003538:	e044      	b.n	80035c4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	335c      	adds	r3, #92	; 0x5c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	440b      	add	r3, r1
 8003558:	335c      	adds	r3, #92	; 0x5c
 800355a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	335c      	adds	r3, #92	; 0x5c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d920      	bls.n	80035b2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	335c      	adds	r3, #92	; 0x5c
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3360      	adds	r3, #96	; 0x60
 8003590:	2204      	movs	r2, #4
 8003592:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	b2d9      	uxtb	r1, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	202c      	movs	r0, #44	; 0x2c
 800359e:	fb00 f303 	mul.w	r3, r0, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f006 f902 	bl	80097b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035b0:	e008      	b.n	80035c4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	6093      	str	r3, [r2, #8]
}
 80035d6:	e172      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ee:	d11b      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3361      	adds	r3, #97	; 0x61
 80035fe:	2208      	movs	r2, #8
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fe32 	bl	8007276 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003624:	6093      	str	r3, [r2, #8]
}
 8003626:	e14a      	b.n	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	f040 813f 	bne.w	80038be <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3361      	adds	r3, #97	; 0x61
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d17d      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3360      	adds	r3, #96	; 0x60
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	333f      	adds	r3, #63	; 0x3f
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d00a      	beq.n	8003690 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	333f      	adds	r3, #63	; 0x3f
 8003688:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	f040 8100 	bne.w	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d113      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3355      	adds	r3, #85	; 0x55
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	f083 0301 	eor.w	r3, r3, #1
 80036ac:	b2d8      	uxtb	r0, r3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3355      	adds	r3, #85	; 0x55
 80036bc:	4602      	mov	r2, r0
 80036be:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	f040 80e3 	bne.w	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	334c      	adds	r3, #76	; 0x4c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80d8 	beq.w	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	334c      	adds	r3, #76	; 0x4c
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	202c      	movs	r0, #44	; 0x2c
 80036f6:	fb00 f202 	mul.w	r2, r0, r2
 80036fa:	440a      	add	r2, r1
 80036fc:	3240      	adds	r2, #64	; 0x40
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	4413      	add	r3, r2
 8003702:	3b01      	subs	r3, #1
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	202c      	movs	r0, #44	; 0x2c
 800370a:	fb00 f202 	mul.w	r2, r0, r2
 800370e:	440a      	add	r2, r1
 8003710:	3240      	adds	r2, #64	; 0x40
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	fbb3 f3f2 	udiv	r3, r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80b5 	beq.w	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3355      	adds	r3, #85	; 0x55
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f083 0301 	eor.w	r3, r3, #1
 800373a:	b2d8      	uxtb	r0, r3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3355      	adds	r3, #85	; 0x55
 800374a:	4602      	mov	r2, r0
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e09f      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3361      	adds	r3, #97	; 0x61
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d109      	bne.n	8003778 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3360      	adds	r3, #96	; 0x60
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e08b      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3361      	adds	r3, #97	; 0x61
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d109      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3360      	adds	r3, #96	; 0x60
 800379a:	2202      	movs	r2, #2
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e077      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3361      	adds	r3, #97	; 0x61
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d109      	bne.n	80037c8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3360      	adds	r3, #96	; 0x60
 80037c2:	2205      	movs	r2, #5
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e063      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3361      	adds	r3, #97	; 0x61
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b06      	cmp	r3, #6
 80037da:	d009      	beq.n	80037f0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3361      	adds	r3, #97	; 0x61
 80037ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d14f      	bne.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	335c      	adds	r3, #92	; 0x5c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	202c      	movs	r0, #44	; 0x2c
 8003808:	fb00 f303 	mul.w	r3, r0, r3
 800380c:	440b      	add	r3, r1
 800380e:	335c      	adds	r3, #92	; 0x5c
 8003810:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	212c      	movs	r1, #44	; 0x2c
 8003818:	fb01 f303 	mul.w	r3, r1, r3
 800381c:	4413      	add	r3, r2
 800381e:	335c      	adds	r3, #92	; 0x5c
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d912      	bls.n	800384c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2204      	movs	r2, #4
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e021      	b.n	8003890 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3360      	adds	r3, #96	; 0x60
 800385a:	2202      	movs	r2, #2
 800385c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003874:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800387c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388a:	461a      	mov	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	2302      	movs	r3, #2
 80038a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	b2d9      	uxtb	r1, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	202c      	movs	r0, #44	; 0x2c
 80038ac:	fb00 f303 	mul.w	r3, r0, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3360      	adds	r3, #96	; 0x60
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f005 ff7b 	bl	80097b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	; 0x28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d004      	beq.n	800390c <HCD_RXQLVL_IRQHandler+0x46>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b05      	cmp	r3, #5
 8003906:	f000 80a9 	beq.w	8003a5c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800390a:	e0aa      	b.n	8003a62 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a6 	beq.w	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3344      	adds	r3, #68	; 0x44
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 809b 	beq.w	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	3350      	adds	r3, #80	; 0x50
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	441a      	add	r2, r3
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	202c      	movs	r0, #44	; 0x2c
 8003944:	fb00 f303 	mul.w	r3, r0, r3
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	; 0x4c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d87a      	bhi.n	8003a48 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3344      	adds	r3, #68	; 0x44
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	b292      	uxth	r2, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f002 ffda 	bl	8006924 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3344      	adds	r3, #68	; 0x44
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	441a      	add	r2, r3
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	202c      	movs	r0, #44	; 0x2c
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	; 0x44
 8003992:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3350      	adds	r3, #80	; 0x50
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	441a      	add	r2, r3
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	202c      	movs	r0, #44	; 0x2c
 80039ae:	fb00 f303 	mul.w	r3, r0, r3
 80039b2:	440b      	add	r3, r1
 80039b4:	3350      	adds	r3, #80	; 0x50
 80039b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	0cdb      	lsrs	r3, r3, #19
 80039c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3340      	adds	r3, #64	; 0x40
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d13c      	bne.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d039      	beq.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3354      	adds	r3, #84	; 0x54
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	f083 0301 	eor.w	r3, r3, #1
 8003a32:	b2d8      	uxtb	r0, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3354      	adds	r3, #84	; 0x54
 8003a42:	4602      	mov	r2, r0
 8003a44:	701a      	strb	r2, [r3, #0]
      break;
 8003a46:	e00b      	b.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3360      	adds	r3, #96	; 0x60
 8003a56:	2204      	movs	r2, #4
 8003a58:	701a      	strb	r2, [r3, #0]
      break;
 8003a5a:	e001      	b.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a5c:	bf00      	nop
 8003a5e:	e000      	b.n	8003a62 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a60:	bf00      	nop
  }
}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	; 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a96:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d10b      	bne.n	8003aba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d102      	bne.n	8003ab2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f005 fe65 	bl	800977c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d132      	bne.n	8003b2a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d126      	bne.n	8003b24 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d113      	bne.n	8003b06 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ae4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae8:	d106      	bne.n	8003af8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 f885 	bl	8006c00 <USB_InitFSLSPClkSel>
 8003af6:	e011      	b.n	8003b1c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f003 f87e 	bl	8006c00 <USB_InitFSLSPClkSel>
 8003b04:	e00a      	b.n	8003b1c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d106      	bne.n	8003b1c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b14:	461a      	mov	r2, r3
 8003b16:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b1a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f005 fe57 	bl	80097d0 <HAL_HCD_PortEnabled_Callback>
 8003b22:	e002      	b.n	8003b2a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f005 fe61 	bl	80097ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d103      	bne.n	8003b3c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f043 0320 	orr.w	r3, r3, #32
 8003b3a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e12b      	b.n	8003dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd f9da 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f001 f964 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a81      	ldr	r2, [pc, #516]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d807      	bhi.n	8003bd4 <HAL_I2C_Init+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a80      	ldr	r2, [pc, #512]	; (8003dc8 <HAL_I2C_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e006      	b.n	8003be2 <HAL_I2C_Init+0x92>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	; (8003dcc <HAL_I2C_Init+0x27c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0e7      	b.n	8003dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a78      	ldr	r2, [pc, #480]	; (8003dd0 <HAL_I2C_Init+0x280>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a6a      	ldr	r2, [pc, #424]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <HAL_I2C_Init+0xd4>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	e009      	b.n	8003c38 <HAL_I2C_Init+0xe8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a69      	ldr	r2, [pc, #420]	; (8003dd4 <HAL_I2C_Init+0x284>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	3301      	adds	r3, #1
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	495c      	ldr	r1, [pc, #368]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d819      	bhi.n	8003c8c <HAL_I2C_Init+0x13c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e59      	subs	r1, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_I2C_Init+0x138>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e59      	subs	r1, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	e051      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e04f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <HAL_I2C_Init+0x168>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_I2C_Init+0x18e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Init+0x196>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <HAL_I2C_Init+0x1bc>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e58      	subs	r0, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	440b      	add	r3, r1
 8003cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6809      	ldr	r1, [r1, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6911      	ldr	r1, [r2, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	000186a0 	.word	0x000186a0
 8003dc8:	001e847f 	.word	0x001e847f
 8003dcc:	003d08ff 	.word	0x003d08ff
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d129      	bne.n	8003e42 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2224      	movs	r2, #36	; 0x24
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0210 	bic.w	r2, r2, #16
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d12a      	bne.n	8003ec0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	f023 030f 	bic.w	r3, r3, #15
 8003e90:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	89fb      	ldrh	r3, [r7, #14]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	89fa      	ldrh	r2, [r7, #14]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0bf      	b.n	8004062 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f884 	bl	8001004 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6999      	ldr	r1, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_LTDC_Init+0x19c>)
 8003f44:	400b      	ands	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b3e      	ldr	r3, [pc, #248]	; (800406c <HAL_LTDC_Init+0x19c>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68d9      	ldr	r1, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6919      	ldr	r1, [r3, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_LTDC_Init+0x19c>)
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6959      	ldr	r1, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <HAL_LTDC_Init+0x19c>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6959      	ldr	r1, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0206 	orr.w	r2, r2, #6
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	f000f800 	.word	0xf000f800

08004070 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d023      	beq.n	80040da <HAL_LTDC_IRQHandler+0x6a>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01e      	beq.n	80040da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2204      	movs	r2, #4
 80040b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f86f 	bl	80041b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <HAL_LTDC_IRQHandler+0xbc>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01e      	beq.n	800412c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0202 	bic.w	r2, r2, #2
 80040fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2202      	movs	r2, #2
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800410c:	f043 0202 	orr.w	r2, r3, #2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f846 	bl	80041b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01b      	beq.n	800416e <HAL_LTDC_IRQHandler+0xfe>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d016      	beq.n	800416e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f82f 	bl	80041cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01b      	beq.n	80041b0 <HAL_LTDC_IRQHandler+0x140>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0208 	bic.w	r2, r2, #8
 8004190:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2208      	movs	r2, #8
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f818 	bl	80041e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_LTDC_ConfigLayer+0x1a>
 800420a:	2302      	movs	r3, #2
 800420c:	e02c      	b.n	8004268 <HAL_LTDC_ConfigLayer+0x74>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2134      	movs	r1, #52	; 0x34
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f811 	bl	8004270 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bdb0      	pop	{r4, r5, r7, pc}

08004270 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428c:	4413      	add	r3, r2
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	01db      	lsls	r3, r3, #7
 800429c:	4413      	add	r3, r2
 800429e:	3384      	adds	r3, #132	; 0x84
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	4611      	mov	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	01d2      	lsls	r2, r2, #7
 80042ac:	440a      	add	r2, r1
 80042ae:	3284      	adds	r2, #132	; 0x84
 80042b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	440b      	add	r3, r1
 80042d6:	3384      	adds	r3, #132	; 0x84
 80042d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ee:	4413      	add	r3, r2
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	01db      	lsls	r3, r3, #7
 80042fe:	4413      	add	r3, r2
 8004300:	3384      	adds	r3, #132	; 0x84
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	4611      	mov	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	01d2      	lsls	r2, r2, #7
 800430e:	440a      	add	r2, r1
 8004310:	3284      	adds	r2, #132	; 0x84
 8004312:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004316:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004326:	4413      	add	r3, r2
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4619      	mov	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	01db      	lsls	r3, r3, #7
 8004334:	440b      	add	r3, r1
 8004336:	3384      	adds	r3, #132	; 0x84
 8004338:	4619      	mov	r1, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	4413      	add	r3, r2
 800434c:	3384      	adds	r3, #132	; 0x84
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	4611      	mov	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	01d2      	lsls	r2, r2, #7
 800435a:	440a      	add	r2, r1
 800435c:	3284      	adds	r2, #132	; 0x84
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	01db      	lsls	r3, r3, #7
 800436e:	4413      	add	r3, r2
 8004370:	3384      	adds	r3, #132	; 0x84
 8004372:	461a      	mov	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800438a:	041b      	lsls	r3, r3, #16
 800438c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	01db      	lsls	r3, r3, #7
 80043a0:	4413      	add	r3, r2
 80043a2:	3384      	adds	r3, #132	; 0x84
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	01db      	lsls	r3, r3, #7
 80043b0:	4413      	add	r3, r2
 80043b2:	3384      	adds	r3, #132	; 0x84
 80043b4:	461a      	mov	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043c0:	461a      	mov	r2, r3
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	440b      	add	r3, r1
 80043d6:	3384      	adds	r3, #132	; 0x84
 80043d8:	4619      	mov	r1, r3
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	4413      	add	r3, r2
 80043ec:	3384      	adds	r3, #132	; 0x84
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	4611      	mov	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	01d2      	lsls	r2, r2, #7
 80043fa:	440a      	add	r2, r1
 80043fc:	3284      	adds	r2, #132	; 0x84
 80043fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004402:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	3384      	adds	r3, #132	; 0x84
 8004412:	461a      	mov	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	4413      	add	r3, r2
 8004426:	3384      	adds	r3, #132	; 0x84
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	4611      	mov	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	01d2      	lsls	r2, r2, #7
 8004434:	440a      	add	r2, r1
 8004436:	3284      	adds	r2, #132	; 0x84
 8004438:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800443c:	f023 0307 	bic.w	r3, r3, #7
 8004440:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	68f9      	ldr	r1, [r7, #12]
 800444c:	6809      	ldr	r1, [r1, #0]
 800444e:	4608      	mov	r0, r1
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	01c9      	lsls	r1, r1, #7
 8004454:	4401      	add	r1, r0
 8004456:	3184      	adds	r1, #132	; 0x84
 8004458:	4313      	orrs	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	01db      	lsls	r3, r3, #7
 8004466:	4413      	add	r3, r2
 8004468:	3384      	adds	r3, #132	; 0x84
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	01db      	lsls	r3, r3, #7
 8004476:	4413      	add	r3, r2
 8004478:	3384      	adds	r3, #132	; 0x84
 800447a:	461a      	mov	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	01db      	lsls	r3, r3, #7
 800448a:	4413      	add	r3, r2
 800448c:	3384      	adds	r3, #132	; 0x84
 800448e:	461a      	mov	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800449e:	2304      	movs	r3, #4
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	e01b      	b.n	80044dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80044ac:	2303      	movs	r3, #3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e014      	b.n	80044dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00b      	beq.n	80044d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d007      	beq.n	80044d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d003      	beq.n	80044d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80044ce:	2b07      	cmp	r3, #7
 80044d0:	d102      	bne.n	80044d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80044d2:	2302      	movs	r3, #2
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e001      	b.n	80044dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80044d8:	2301      	movs	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	01db      	lsls	r3, r3, #7
 80044e6:	4413      	add	r3, r2
 80044e8:	3384      	adds	r3, #132	; 0x84
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	4611      	mov	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	01d2      	lsls	r2, r2, #7
 80044f6:	440a      	add	r2, r1
 80044f8:	3284      	adds	r2, #132	; 0x84
 80044fa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	1acb      	subs	r3, r1, r3
 8004516:	69f9      	ldr	r1, [r7, #28]
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6809      	ldr	r1, [r1, #0]
 8004522:	4608      	mov	r0, r1
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	01c9      	lsls	r1, r1, #7
 8004528:	4401      	add	r1, r0
 800452a:	3184      	adds	r1, #132	; 0x84
 800452c:	4313      	orrs	r3, r2
 800452e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	4413      	add	r3, r2
 800453c:	3384      	adds	r3, #132	; 0x84
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	4611      	mov	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	01d2      	lsls	r2, r2, #7
 800454a:	440a      	add	r2, r1
 800454c:	3284      	adds	r2, #132	; 0x84
 800454e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	01db      	lsls	r3, r3, #7
 8004562:	4413      	add	r3, r2
 8004564:	3384      	adds	r3, #132	; 0x84
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4413      	add	r3, r2
 800457a:	3384      	adds	r3, #132	; 0x84
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	4611      	mov	r1, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	01d2      	lsls	r2, r2, #7
 8004588:	440a      	add	r2, r1
 800458a:	3284      	adds	r2, #132	; 0x84
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	6013      	str	r3, [r2, #0]
}
 8004592:	bf00      	nop
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e267      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d075      	beq.n	80046aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045be:	4b88      	ldr	r3, [pc, #544]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d00c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ca:	4b85      	ldr	r3, [pc, #532]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d112      	bne.n	80045fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d6:	4b82      	ldr	r3, [pc, #520]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d10b      	bne.n	80045fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b7e      	ldr	r3, [pc, #504]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d05b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x108>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d157      	bne.n	80046a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e242      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d106      	bne.n	8004614 <HAL_RCC_OscConfig+0x74>
 8004606:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a75      	ldr	r2, [pc, #468]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e01d      	b.n	8004650 <HAL_RCC_OscConfig+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x98>
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6f      	ldr	r2, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b6d      	ldr	r3, [pc, #436]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a6c      	ldr	r2, [pc, #432]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0xb0>
 8004638:	4b69      	ldr	r3, [pc, #420]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a68      	ldr	r2, [pc, #416]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a65      	ldr	r2, [pc, #404]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800464a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd f990 	bl	800197c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004660:	f7fd f98c 	bl	800197c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b64      	cmp	r3, #100	; 0x64
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e207      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b5b      	ldr	r3, [pc, #364]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0xc0>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fd f97c 	bl	800197c <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004688:	f7fd f978 	bl	800197c <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1f3      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	4b51      	ldr	r3, [pc, #324]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0xe8>
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d063      	beq.n	800477e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d11c      	bne.n	8004708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b44      	ldr	r3, [pc, #272]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d116      	bne.n	8004708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x152>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e1c7      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4937      	ldr	r1, [pc, #220]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	e03a      	b.n	800477e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCC_OscConfig+0x244>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd f931 	bl	800197c <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471e:	f7fd f92d 	bl	800197c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1a8      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4925      	ldr	r1, [pc, #148]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	e015      	b.n	800477e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_RCC_OscConfig+0x244>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd f910 	bl	800197c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004760:	f7fd f90c 	bl	800197c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e187      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d036      	beq.n	80047f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_RCC_OscConfig+0x248>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fd f8f0 	bl	800197c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fd f8ec 	bl	800197c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e167      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_OscConfig+0x240>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x200>
 80047be:	e01b      	b.n	80047f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <HAL_RCC_OscConfig+0x248>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c6:	f7fd f8d9 	bl	800197c <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	e00e      	b.n	80047ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ce:	f7fd f8d5 	bl	800197c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d907      	bls.n	80047ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e150      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	42470000 	.word	0x42470000
 80047e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b88      	ldr	r3, [pc, #544]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ea      	bne.n	80047ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8097 	beq.w	8004934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b81      	ldr	r3, [pc, #516]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	4b7d      	ldr	r3, [pc, #500]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a7c      	ldr	r2, [pc, #496]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4b77      	ldr	r3, [pc, #476]	; (8004a14 <HAL_RCC_OscConfig+0x474>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d118      	bne.n	8004874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004842:	4b74      	ldr	r3, [pc, #464]	; (8004a14 <HAL_RCC_OscConfig+0x474>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a73      	ldr	r2, [pc, #460]	; (8004a14 <HAL_RCC_OscConfig+0x474>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484e:	f7fd f895 	bl	800197c <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004856:	f7fd f891 	bl	800197c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e10c      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x474>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x2ea>
 800487c:	4b64      	ldr	r3, [pc, #400]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a63      	ldr	r2, [pc, #396]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	e01c      	b.n	80048c4 <HAL_RCC_OscConfig+0x324>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x30c>
 8004892:	4b5f      	ldr	r3, [pc, #380]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a5e      	ldr	r2, [pc, #376]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a5b      	ldr	r2, [pc, #364]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
 80048aa:	e00b      	b.n	80048c4 <HAL_RCC_OscConfig+0x324>
 80048ac:	4b58      	ldr	r3, [pc, #352]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	4a57      	ldr	r2, [pc, #348]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	6713      	str	r3, [r2, #112]	; 0x70
 80048b8:	4b55      	ldr	r3, [pc, #340]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048be:	f023 0304 	bic.w	r3, r3, #4
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fd f856 	bl	800197c <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fd f852 	bl	800197c <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0cb      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ea:	4b49      	ldr	r3, [pc, #292]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ee      	beq.n	80048d4 <HAL_RCC_OscConfig+0x334>
 80048f6:	e014      	b.n	8004922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f8:	f7fd f840 	bl	800197c <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd f83c 	bl	800197c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e0b5      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004916:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ee      	bne.n	8004900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d105      	bne.n	8004934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004928:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	4a38      	ldr	r2, [pc, #224]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a1 	beq.w	8004a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800493e:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b08      	cmp	r3, #8
 8004948:	d05c      	beq.n	8004a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d141      	bne.n	80049d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_OscConfig+0x478>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd f810 	bl	800197c <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd f80c 	bl	800197c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e087      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	019b      	lsls	r3, r3, #6
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	491b      	ldr	r1, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x478>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fc ffe5 	bl	800197c <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fc ffe1 	bl	800197c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e05c      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x416>
 80049d4:	e054      	b.n	8004a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b10      	ldr	r3, [pc, #64]	; (8004a18 <HAL_RCC_OscConfig+0x478>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fc ffce 	bl	800197c <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e4:	f7fc ffca 	bl	800197c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e045      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_OscConfig+0x470>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x444>
 8004a02:	e03d      	b.n	8004a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e038      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000
 8004a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_RCC_OscConfig+0x4ec>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d028      	beq.n	8004a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d121      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d11a      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d111      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	3b01      	subs	r3, #1
 8004a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800

08004a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0cc      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d90c      	bls.n	8004acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0b8      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a58      	ldr	r2, [pc, #352]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004afc:	4b53      	ldr	r3, [pc, #332]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a52      	ldr	r2, [pc, #328]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	494d      	ldr	r1, [pc, #308]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d044      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d119      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d107      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b5e:	4b3b      	ldr	r3, [pc, #236]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e067      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 0203 	bic.w	r2, r3, #3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4934      	ldr	r1, [pc, #208]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b80:	f7fc fefc 	bl	800197c <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b88:	f7fc fef8 	bl	800197c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e04f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 020c 	and.w	r2, r3, #12
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d1eb      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d20c      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e032      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4916      	ldr	r1, [pc, #88]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c16:	f000 f821 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	490a      	ldr	r1, [pc, #40]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	5ccb      	ldrb	r3, [r1, r3]
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_ClockConfig+0x1c8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fcba 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40023c00 	.word	0x40023c00
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	0800ad98 	.word	0x0800ad98
 8004c54:	20000000 	.word	0x20000000
 8004c58:	20000004 	.word	0x20000004

08004c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c60:	b094      	sub	sp, #80	; 0x50
 8004c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	647b      	str	r3, [r7, #68]	; 0x44
 8004c68:	2300      	movs	r3, #0
 8004c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c74:	4b79      	ldr	r3, [pc, #484]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d00d      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x40>
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	f200 80e1 	bhi.w	8004e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c8e:	e0db      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c94:	e0db      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c96:	4b73      	ldr	r3, [pc, #460]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9a:	e0d8      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c9c:	4b6f      	ldr	r3, [pc, #444]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d063      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb2:	4b6a      	ldr	r3, [pc, #424]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	2200      	movs	r2, #0
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	0159      	lsls	r1, r3, #5
 8004cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce0:	0150      	lsls	r0, r2, #5
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	1a51      	subs	r1, r2, r1
 8004cea:	6139      	str	r1, [r7, #16]
 8004cec:	4629      	mov	r1, r5
 8004cee:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d00:	4659      	mov	r1, fp
 8004d02:	018b      	lsls	r3, r1, #6
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	018a      	lsls	r2, r1, #6
 8004d0e:	4651      	mov	r1, sl
 8004d10:	ebb2 0801 	subs.w	r8, r2, r1
 8004d14:	4659      	mov	r1, fp
 8004d16:	eb63 0901 	sbc.w	r9, r3, r1
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d2e:	4690      	mov	r8, r2
 8004d30:	4699      	mov	r9, r3
 8004d32:	4623      	mov	r3, r4
 8004d34:	eb18 0303 	adds.w	r3, r8, r3
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	eb49 0303 	adc.w	r3, r9, r3
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	024b      	lsls	r3, r1, #9
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d58:	4621      	mov	r1, r4
 8004d5a:	024a      	lsls	r2, r1, #9
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	2200      	movs	r2, #0
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6c:	f7fb fa90 	bl	8000290 <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4613      	mov	r3, r2
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d78:	e058      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7a:	4b38      	ldr	r3, [pc, #224]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	2200      	movs	r2, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	4611      	mov	r1, r2
 8004d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d8a:	623b      	str	r3, [r7, #32]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	0159      	lsls	r1, r3, #5
 8004da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da6:	0150      	lsls	r0, r2, #5
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4641      	mov	r1, r8
 8004dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004db2:	4649      	mov	r1, r9
 8004db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8004dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	00eb      	lsls	r3, r5, #3
 8004dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de2:	00e2      	lsls	r2, r4, #3
 8004de4:	4614      	mov	r4, r2
 8004de6:	461d      	mov	r5, r3
 8004de8:	4643      	mov	r3, r8
 8004dea:	18e3      	adds	r3, r4, r3
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	464b      	mov	r3, r9
 8004df0:	eb45 0303 	adc.w	r3, r5, r3
 8004df4:	607b      	str	r3, [r7, #4]
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e02:	4629      	mov	r1, r5
 8004e04:	028b      	lsls	r3, r1, #10
 8004e06:	4621      	mov	r1, r4
 8004e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	028a      	lsls	r2, r1, #10
 8004e10:	4610      	mov	r0, r2
 8004e12:	4619      	mov	r1, r3
 8004e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e16:	2200      	movs	r2, #0
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	61fa      	str	r2, [r7, #28]
 8004e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e20:	f7fb fa36 	bl	8000290 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4613      	mov	r3, r2
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	3301      	adds	r3, #1
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e46:	e002      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3750      	adds	r7, #80	; 0x50
 8004e54:	46bd      	mov	sp, r7
 8004e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	007a1200 	.word	0x007a1200

08004e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000000 	.word	0x20000000

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e84:	f7ff fff0 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0a9b      	lsrs	r3, r3, #10
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0800ada8 	.word	0x0800ada8

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eac:	f7ff ffdc 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	0b5b      	lsrs	r3, r3, #13
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4903      	ldr	r1, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	0800ada8 	.word	0x0800ada8

08004ed0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	220f      	movs	r2, #15
 8004ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_RCC_GetClockConfig+0x5c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0203 	and.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCC_GetClockConfig+0x5c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <HAL_RCC_GetClockConfig+0x5c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f12:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <HAL_RCC_GetClockConfig+0x60>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 020f 	and.w	r2, r3, #15
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40023c00 	.word	0x40023c00

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d075      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f68:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc fd05 	bl	800197c <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fc fd01 	bl	800197c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e189      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	4b8a      	ldr	r3, [pc, #552]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	019a      	lsls	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	071b      	lsls	r3, r3, #28
 8004fac:	4981      	ldr	r1, [pc, #516]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fc0:	4b7c      	ldr	r3, [pc, #496]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	061b      	lsls	r3, r3, #24
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	071b      	lsls	r3, r3, #28
 8004fe0:	4974      	ldr	r1, [pc, #464]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fe8:	4b72      	ldr	r3, [pc, #456]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	f023 021f 	bic.w	r2, r3, #31
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	496e      	ldr	r1, [pc, #440]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	019a      	lsls	r2, r3, #6
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	071b      	lsls	r3, r3, #28
 8005020:	4964      	ldr	r1, [pc, #400]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005028:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502e:	f7fc fca5 	bl	800197c <HAL_GetTick>
 8005032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005036:	f7fc fca1 	bl	800197c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e129      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005048:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005068:	2b00      	cmp	r3, #0
 800506a:	d079      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800506c:	4b52      	ldr	r3, [pc, #328]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc fc83 	bl	800197c <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800507a:	f7fc fc7f 	bl	800197c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e107      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800508c:	4b49      	ldr	r3, [pc, #292]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005098:	d0ef      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050a6:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	0f1b      	lsrs	r3, r3, #28
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	019a      	lsls	r2, r3, #6
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	493b      	ldr	r1, [pc, #236]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050ce:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	3b01      	subs	r3, #1
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	4934      	ldr	r1, [pc, #208]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01e      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	0e1b      	lsrs	r3, r3, #24
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	019a      	lsls	r2, r3, #6
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	061b      	lsls	r3, r3, #24
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	4927      	ldr	r1, [pc, #156]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800511e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	4922      	ldr	r1, [pc, #136]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005138:	f7fc fc20 	bl	800197c <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005140:	f7fc fc1c 	bl	800197c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0a4      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515e:	d1ef      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 808b 	beq.w	8005284 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	; 0x40
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005194:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005196:	f7fc fbf1 	bl	800197c <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800519c:	e010      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800519e:	f7fc fbed 	bl	800197c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d909      	bls.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e075      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80051b0:	42470068 	.word	0x42470068
 80051b4:	40023800 	.word	0x40023800
 80051b8:	42470070 	.word	0x42470070
 80051bc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051c0:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0e8      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051cc:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d02f      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d028      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051fa:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005200:	4a29      	ldr	r2, [pc, #164]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005206:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	d114      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005212:	f7fc fbb3 	bl	800197c <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005218:	e00a      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc fbaf 	bl	800197c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e035      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ee      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	4912      	ldr	r1, [pc, #72]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800526c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005270:	6093      	str	r3, [r2, #8]
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005274:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005280:	4313      	orrs	r3, r2
 8005282:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005298:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40007000 	.word	0x40007000
 80052a8:	40023800 	.word	0x40023800
 80052ac:	42470e40 	.word	0x42470e40
 80052b0:	424711e0 	.word	0x424711e0

080052b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e025      	b.n	8005314 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fc f95d 	bl	800159c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f001 f8dd 	bl	80064b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	f001 f932 	bl	800656e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e07b      	b.n	8005426 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d108      	bne.n	8005348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d009      	beq.n	8005354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
 8005346:	e005      	b.n	8005354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fb ff78 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0104 	and.w	r1, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0210 	and.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005414:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e041      	b.n	80054c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fb ff4d 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f000 fa95 	bl	800599c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04e      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_TIM_Base_Start_IT+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d01d      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_TIM_Base_Start_IT+0xc8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_Start_IT+0xcc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIM_Base_Start_IT+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d111      	bne.n	8005570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d010      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	e007      	b.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9b5 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f9a7 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9b8 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f98b 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f97d 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f98e 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f961 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f953 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f964 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f937 	bl	800595e <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f929 	bl	800594a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f93a 	bl	8005972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fb76 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fae0 	bl	8005d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d10e      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d107      	bne.n	8005788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8ff 	bl	8005986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d10e      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d107      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0220 	mvn.w	r2, #32
 80057ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 faaa 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_ConfigClockSource+0x1c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e0b4      	b.n	8005942 <HAL_TIM_ConfigClockSource+0x186>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005810:	d03e      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0xd4>
 8005812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005816:	f200 8087 	bhi.w	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	f000 8086 	beq.w	800592e <HAL_TIM_ConfigClockSource+0x172>
 8005822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005826:	d87f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d01a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0xa6>
 800582c:	2b70      	cmp	r3, #112	; 0x70
 800582e:	d87b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d050      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d877      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d03c      	beq.n	80058b6 <HAL_TIM_ConfigClockSource+0xfa>
 800583c:	2b50      	cmp	r3, #80	; 0x50
 800583e:	d873      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d058      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d86f      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d064      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d86b      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d060      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d867      	bhi.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05c      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	2b10      	cmp	r3, #16
 800585e:	d05a      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	e062      	b.n	8005928 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6899      	ldr	r1, [r3, #8]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f000 f9ad 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	609a      	str	r2, [r3, #8]
      break;
 800588e:	e04f      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f000 f996 	bl	8005bd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b2:	609a      	str	r2, [r3, #8]
      break;
 80058b4:	e03c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f000 f90a 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2150      	movs	r1, #80	; 0x50
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f963 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058d4:	e02c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6859      	ldr	r1, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f000 f929 	bl	8005b3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2160      	movs	r1, #96	; 0x60
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f953 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 80058f4:	e01c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6859      	ldr	r1, [r3, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	461a      	mov	r2, r3
 8005904:	f000 f8ea 	bl	8005adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f943 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005914:	e00c      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 f93a 	bl	8005b9a <TIM_ITRx_SetConfig>
      break;
 8005926:	e003      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      break;
 800592c:	e000      	b.n	8005930 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800592e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005940:	7bfb      	ldrb	r3, [r7, #15]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d00f      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3d      	ldr	r2, [pc, #244]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3c      	ldr	r2, [pc, #240]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <TIM_Base_SetConfig+0x120>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x40>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a3a      	ldr	r2, [pc, #232]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d108      	bne.n	80059ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2f      	ldr	r2, [pc, #188]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d027      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2c      	ldr	r2, [pc, #176]	; (8005ab4 <TIM_Base_SetConfig+0x118>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d023      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <TIM_Base_SetConfig+0x11c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2a      	ldr	r2, [pc, #168]	; (8005abc <TIM_Base_SetConfig+0x120>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d01b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d017      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <TIM_Base_SetConfig+0x128>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d013      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <TIM_Base_SetConfig+0x12c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d00f      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a26      	ldr	r2, [pc, #152]	; (8005acc <TIM_Base_SetConfig+0x130>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a25      	ldr	r2, [pc, #148]	; (8005ad0 <TIM_Base_SetConfig+0x134>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <TIM_Base_SetConfig+0x138>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <TIM_Base_SetConfig+0x13c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d108      	bne.n	8005a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_Base_SetConfig+0xf8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <TIM_Base_SetConfig+0x124>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d103      	bne.n	8005a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40001800 	.word	0x40001800
 8005ad4:	40001c00 	.word	0x40001c00
 8005ad8:	40002000 	.word	0x40002000

08005adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	031b      	lsls	r3, r3, #12
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b085      	sub	sp, #20
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f043 0307 	orr.w	r3, r3, #7
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	609a      	str	r2, [r3, #8]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e05a      	b.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40010400 	.word	0x40010400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40001800 	.word	0x40001800

08005d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e03f      	b.n	8005dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fb faee 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2224      	movs	r2, #36	; 0x24
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f929 	bl	8005fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b08a      	sub	sp, #40	; 0x28
 8005dce:	af02      	add	r7, sp, #8
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	603b      	str	r3, [r7, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d17c      	bne.n	8005ee4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_UART_Transmit+0x2c>
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e075      	b.n	8005ee6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Transmit+0x3e>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e06e      	b.n	8005ee6 <HAL_UART_Transmit+0x11c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2221      	movs	r2, #33	; 0x21
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e1e:	f7fb fdad 	bl	800197c <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	88fa      	ldrh	r2, [r7, #6]
 8005e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d108      	bne.n	8005e4c <HAL_UART_Transmit+0x82>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e003      	b.n	8005e54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e5c:	e02a      	b.n	8005eb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2180      	movs	r1, #128	; 0x80
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f840 	bl	8005eee <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e036      	b.n	8005ee6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	3302      	adds	r3, #2
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	e007      	b.n	8005ea6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1cf      	bne.n	8005e5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2140      	movs	r1, #64	; 0x40
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f810 	bl	8005eee <UART_WaitOnFlagUntilTimeout>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e006      	b.n	8005ee6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b090      	sub	sp, #64	; 0x40
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	603b      	str	r3, [r7, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005efe:	e050      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d04c      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f0e:	f7fb fd35 	bl	800197c <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d241      	bcs.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f3e:	637a      	str	r2, [r7, #52]	; 0x34
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	613b      	str	r3, [r7, #16]
   return(result);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f023 0301 	bic.w	r3, r3, #1
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3314      	adds	r3, #20
 8005f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f72:	623a      	str	r2, [r7, #32]
 8005f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	69f9      	ldr	r1, [r7, #28]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e5      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e00f      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d09f      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3740      	adds	r7, #64	; 0x40
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd0:	b0c0      	sub	sp, #256	; 0x100
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	68d9      	ldr	r1, [r3, #12]
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	ea40 0301 	orr.w	r3, r0, r1
 8005ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	431a      	orrs	r2, r3
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	431a      	orrs	r2, r3
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006024:	f021 010c 	bic.w	r1, r1, #12
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006032:	430b      	orrs	r3, r1
 8006034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	6999      	ldr	r1, [r3, #24]
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	ea40 0301 	orr.w	r3, r0, r1
 8006052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b8f      	ldr	r3, [pc, #572]	; (8006298 <UART_SetConfig+0x2cc>)
 800605c:	429a      	cmp	r2, r3
 800605e:	d005      	beq.n	800606c <UART_SetConfig+0xa0>
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b8d      	ldr	r3, [pc, #564]	; (800629c <UART_SetConfig+0x2d0>)
 8006068:	429a      	cmp	r2, r3
 800606a:	d104      	bne.n	8006076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800606c:	f7fe ff1c 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8006070:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006074:	e003      	b.n	800607e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006076:	f7fe ff03 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 800607a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006088:	f040 810c 	bne.w	80062a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800608c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006096:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800609a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060a6:	415b      	adcs	r3, r3
 80060a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ae:	4621      	mov	r1, r4
 80060b0:	eb12 0801 	adds.w	r8, r2, r1
 80060b4:	4629      	mov	r1, r5
 80060b6:	eb43 0901 	adc.w	r9, r3, r1
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ce:	4690      	mov	r8, r2
 80060d0:	4699      	mov	r9, r3
 80060d2:	4623      	mov	r3, r4
 80060d4:	eb18 0303 	adds.w	r3, r8, r3
 80060d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060dc:	462b      	mov	r3, r5
 80060de:	eb49 0303 	adc.w	r3, r9, r3
 80060e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060fa:	460b      	mov	r3, r1
 80060fc:	18db      	adds	r3, r3, r3
 80060fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006100:	4613      	mov	r3, r2
 8006102:	eb42 0303 	adc.w	r3, r2, r3
 8006106:	657b      	str	r3, [r7, #84]	; 0x54
 8006108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800610c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006110:	f7fa f8be 	bl	8000290 <__aeabi_uldivmod>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4b61      	ldr	r3, [pc, #388]	; (80062a0 <UART_SetConfig+0x2d4>)
 800611a:	fba3 2302 	umull	r2, r3, r3, r2
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	011c      	lsls	r4, r3, #4
 8006122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006126:	2200      	movs	r2, #0
 8006128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800612c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	1891      	adds	r1, r2, r2
 800613a:	64b9      	str	r1, [r7, #72]	; 0x48
 800613c:	415b      	adcs	r3, r3
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006144:	4641      	mov	r1, r8
 8006146:	eb12 0a01 	adds.w	sl, r2, r1
 800614a:	4649      	mov	r1, r9
 800614c:	eb43 0b01 	adc.w	fp, r3, r1
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800615c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006164:	4692      	mov	sl, r2
 8006166:	469b      	mov	fp, r3
 8006168:	4643      	mov	r3, r8
 800616a:	eb1a 0303 	adds.w	r3, sl, r3
 800616e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006172:	464b      	mov	r3, r9
 8006174:	eb4b 0303 	adc.w	r3, fp, r3
 8006178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006188:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800618c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006190:	460b      	mov	r3, r1
 8006192:	18db      	adds	r3, r3, r3
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
 8006196:	4613      	mov	r3, r2
 8006198:	eb42 0303 	adc.w	r3, r2, r3
 800619c:	647b      	str	r3, [r7, #68]	; 0x44
 800619e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061a6:	f7fa f873 	bl	8000290 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <UART_SetConfig+0x2d4>)
 80061b2:	fba3 2301 	umull	r2, r3, r3, r1
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2264      	movs	r2, #100	; 0x64
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	1acb      	subs	r3, r1, r3
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061c6:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <UART_SetConfig+0x2d4>)
 80061c8:	fba3 2302 	umull	r2, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d4:	441c      	add	r4, r3
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061e8:	4642      	mov	r2, r8
 80061ea:	464b      	mov	r3, r9
 80061ec:	1891      	adds	r1, r2, r2
 80061ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80061f0:	415b      	adcs	r3, r3
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061f8:	4641      	mov	r1, r8
 80061fa:	1851      	adds	r1, r2, r1
 80061fc:	6339      	str	r1, [r7, #48]	; 0x30
 80061fe:	4649      	mov	r1, r9
 8006200:	414b      	adcs	r3, r1
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006210:	4659      	mov	r1, fp
 8006212:	00cb      	lsls	r3, r1, #3
 8006214:	4651      	mov	r1, sl
 8006216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621a:	4651      	mov	r1, sl
 800621c:	00ca      	lsls	r2, r1, #3
 800621e:	4610      	mov	r0, r2
 8006220:	4619      	mov	r1, r3
 8006222:	4603      	mov	r3, r0
 8006224:	4642      	mov	r2, r8
 8006226:	189b      	adds	r3, r3, r2
 8006228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800622c:	464b      	mov	r3, r9
 800622e:	460a      	mov	r2, r1
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006244:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800624c:	460b      	mov	r3, r1
 800624e:	18db      	adds	r3, r3, r3
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	4613      	mov	r3, r2
 8006254:	eb42 0303 	adc.w	r3, r2, r3
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800625e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006262:	f7fa f815 	bl	8000290 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <UART_SetConfig+0x2d4>)
 800626c:	fba3 1302 	umull	r1, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	2164      	movs	r1, #100	; 0x64
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	3332      	adds	r3, #50	; 0x32
 800627e:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <UART_SetConfig+0x2d4>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	f003 0207 	and.w	r2, r3, #7
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4422      	add	r2, r4
 8006292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006294:	e105      	b.n	80064a2 <UART_SetConfig+0x4d6>
 8006296:	bf00      	nop
 8006298:	40011000 	.word	0x40011000
 800629c:	40011400 	.word	0x40011400
 80062a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062b6:	4642      	mov	r2, r8
 80062b8:	464b      	mov	r3, r9
 80062ba:	1891      	adds	r1, r2, r2
 80062bc:	6239      	str	r1, [r7, #32]
 80062be:	415b      	adcs	r3, r3
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062c6:	4641      	mov	r1, r8
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	4649      	mov	r1, r9
 80062cc:	eb43 0501 	adc.w	r5, r3, r1
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	00eb      	lsls	r3, r5, #3
 80062da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062de:	00e2      	lsls	r2, r4, #3
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	4643      	mov	r3, r8
 80062e6:	18e3      	adds	r3, r4, r3
 80062e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062ec:	464b      	mov	r3, r9
 80062ee:	eb45 0303 	adc.w	r3, r5, r3
 80062f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006312:	4629      	mov	r1, r5
 8006314:	008b      	lsls	r3, r1, #2
 8006316:	4621      	mov	r1, r4
 8006318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800631c:	4621      	mov	r1, r4
 800631e:	008a      	lsls	r2, r1, #2
 8006320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006324:	f7f9 ffb4 	bl	8000290 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b60      	ldr	r3, [pc, #384]	; (80064b0 <UART_SetConfig+0x4e4>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011c      	lsls	r4, r3, #4
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006340:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	61b9      	str	r1, [r7, #24]
 8006350:	415b      	adcs	r3, r3
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006358:	4641      	mov	r1, r8
 800635a:	1851      	adds	r1, r2, r1
 800635c:	6139      	str	r1, [r7, #16]
 800635e:	4649      	mov	r1, r9
 8006360:	414b      	adcs	r3, r1
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006370:	4659      	mov	r1, fp
 8006372:	00cb      	lsls	r3, r1, #3
 8006374:	4651      	mov	r1, sl
 8006376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800637a:	4651      	mov	r1, sl
 800637c:	00ca      	lsls	r2, r1, #3
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	4603      	mov	r3, r0
 8006384:	4642      	mov	r2, r8
 8006386:	189b      	adds	r3, r3, r2
 8006388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800638c:	464b      	mov	r3, r9
 800638e:	460a      	mov	r2, r1
 8006390:	eb42 0303 	adc.w	r3, r2, r3
 8006394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063b0:	4649      	mov	r1, r9
 80063b2:	008b      	lsls	r3, r1, #2
 80063b4:	4641      	mov	r1, r8
 80063b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ba:	4641      	mov	r1, r8
 80063bc:	008a      	lsls	r2, r1, #2
 80063be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063c2:	f7f9 ff65 	bl	8000290 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <UART_SetConfig+0x4e4>)
 80063cc:	fba3 1302 	umull	r1, r3, r3, r2
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	2164      	movs	r1, #100	; 0x64
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	3332      	adds	r3, #50	; 0x32
 80063de:	4a34      	ldr	r2, [pc, #208]	; (80064b0 <UART_SetConfig+0x4e4>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ea:	441c      	add	r4, r3
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f0:	2200      	movs	r2, #0
 80063f2:	673b      	str	r3, [r7, #112]	; 0x70
 80063f4:	677a      	str	r2, [r7, #116]	; 0x74
 80063f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063fa:	4642      	mov	r2, r8
 80063fc:	464b      	mov	r3, r9
 80063fe:	1891      	adds	r1, r2, r2
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	415b      	adcs	r3, r3
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800640a:	4641      	mov	r1, r8
 800640c:	1851      	adds	r1, r2, r1
 800640e:	6039      	str	r1, [r7, #0]
 8006410:	4649      	mov	r1, r9
 8006412:	414b      	adcs	r3, r1
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006422:	4659      	mov	r1, fp
 8006424:	00cb      	lsls	r3, r1, #3
 8006426:	4651      	mov	r1, sl
 8006428:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642c:	4651      	mov	r1, sl
 800642e:	00ca      	lsls	r2, r1, #3
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	4603      	mov	r3, r0
 8006436:	4642      	mov	r2, r8
 8006438:	189b      	adds	r3, r3, r2
 800643a:	66bb      	str	r3, [r7, #104]	; 0x68
 800643c:	464b      	mov	r3, r9
 800643e:	460a      	mov	r2, r1
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	663b      	str	r3, [r7, #96]	; 0x60
 8006450:	667a      	str	r2, [r7, #100]	; 0x64
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800645e:	4649      	mov	r1, r9
 8006460:	008b      	lsls	r3, r1, #2
 8006462:	4641      	mov	r1, r8
 8006464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006468:	4641      	mov	r1, r8
 800646a:	008a      	lsls	r2, r1, #2
 800646c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006470:	f7f9 ff0e 	bl	8000290 <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <UART_SetConfig+0x4e4>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <UART_SetConfig+0x4e4>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4422      	add	r2, r4
 80064a0:	609a      	str	r2, [r3, #8]
}
 80064a2:	bf00      	nop
 80064a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064a8:	46bd      	mov	sp, r7
 80064aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ae:	bf00      	nop
 80064b0:	51eb851f 	.word	0x51eb851f

080064b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d123      	bne.n	800650e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	6851      	ldr	r1, [r2, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	6892      	ldr	r2, [r2, #8]
 80064da:	4311      	orrs	r1, r2
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	68d2      	ldr	r2, [r2, #12]
 80064e0:	4311      	orrs	r1, r2
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	6912      	ldr	r2, [r2, #16]
 80064e6:	4311      	orrs	r1, r2
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	6952      	ldr	r2, [r2, #20]
 80064ec:	4311      	orrs	r1, r2
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	6992      	ldr	r2, [r2, #24]
 80064f2:	4311      	orrs	r1, r2
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	69d2      	ldr	r2, [r2, #28]
 80064f8:	4311      	orrs	r1, r2
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	6a12      	ldr	r2, [r2, #32]
 80064fe:	4311      	orrs	r1, r2
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006504:	430a      	orrs	r2, r1
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e028      	b.n	8006560 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	69d9      	ldr	r1, [r3, #28]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	4319      	orrs	r1, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	430b      	orrs	r3, r1
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006534:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	6851      	ldr	r1, [r2, #4]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	6892      	ldr	r2, [r2, #8]
 8006540:	4311      	orrs	r1, r2
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	68d2      	ldr	r2, [r2, #12]
 8006546:	4311      	orrs	r1, r2
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	6912      	ldr	r2, [r2, #16]
 800654c:	4311      	orrs	r1, r2
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	6952      	ldr	r2, [r2, #20]
 8006552:	4311      	orrs	r1, r2
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	6992      	ldr	r2, [r2, #24]
 8006558:	430a      	orrs	r2, r1
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d128      	bne.n	80065d2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1e59      	subs	r1, r3, #1
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	3b01      	subs	r3, #1
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	4319      	orrs	r1, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	3b01      	subs	r3, #1
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	4319      	orrs	r1, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	4319      	orrs	r1, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	4319      	orrs	r1, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	051b      	lsls	r3, r3, #20
 80065be:	4319      	orrs	r1, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	430b      	orrs	r3, r1
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	e02f      	b.n	8006632 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	68d2      	ldr	r2, [r2, #12]
 80065e2:	3a01      	subs	r2, #1
 80065e4:	0311      	lsls	r1, r2, #12
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	6952      	ldr	r2, [r2, #20]
 80065ea:	3a01      	subs	r2, #1
 80065ec:	0512      	lsls	r2, r2, #20
 80065ee:	430a      	orrs	r2, r1
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	1e59      	subs	r1, r3, #1
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4319      	orrs	r1, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	4319      	orrs	r1, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	3b01      	subs	r3, #1
 800661e:	041b      	lsls	r3, r3, #16
 8006620:	4319      	orrs	r1, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	3b01      	subs	r3, #1
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	430b      	orrs	r3, r1
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006640:	b084      	sub	sp, #16
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	f107 001c 	add.w	r0, r7, #28
 800664e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2b01      	cmp	r3, #1
 8006656:	d122      	bne.n	800669e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800666c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9c0 	bl	8006a18 <USB_CoreReset>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	e01a      	b.n	80066d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f9b4 	bl	8006a18 <USB_CoreReset>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
 80066c6:	e005      	b.n	80066d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10b      	bne.n	80066f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f043 0206 	orr.w	r2, r3, #6
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f043 0220 	orr.w	r2, r3, #32
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fe:	b004      	add	sp, #16
 8006700:	4770      	bx	lr

08006702 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 0201 	bic.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d115      	bne.n	8006794 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006774:	2001      	movs	r0, #1
 8006776:	f7fb f90d 	bl	8001994 <HAL_Delay>
      ms++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f93a 	bl	80069fa <USB_GetMode>
 8006786:	4603      	mov	r3, r0
 8006788:	2b01      	cmp	r3, #1
 800678a:	d01e      	beq.n	80067ca <USB_SetCurrentMode+0x84>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b31      	cmp	r3, #49	; 0x31
 8006790:	d9f0      	bls.n	8006774 <USB_SetCurrentMode+0x2e>
 8006792:	e01a      	b.n	80067ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d115      	bne.n	80067c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067a6:	2001      	movs	r0, #1
 80067a8:	f7fb f8f4 	bl	8001994 <HAL_Delay>
      ms++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f921 	bl	80069fa <USB_GetMode>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <USB_SetCurrentMode+0x84>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b31      	cmp	r3, #49	; 0x31
 80067c2:	d9f0      	bls.n	80067a6 <USB_SetCurrentMode+0x60>
 80067c4:	e001      	b.n	80067ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e005      	b.n	80067d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b32      	cmp	r3, #50	; 0x32
 80067ce:	d101      	bne.n	80067d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a13      	ldr	r2, [pc, #76]	; (8006844 <USB_FlushTxFifo+0x64>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e01b      	b.n	8006838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	daf2      	bge.n	80067ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	019b      	lsls	r3, r3, #6
 8006810:	f043 0220 	orr.w	r2, r3, #32
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <USB_FlushTxFifo+0x64>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e006      	b.n	8006838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d0f0      	beq.n	8006818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	00030d40 	.word	0x00030d40

08006848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a11      	ldr	r2, [pc, #68]	; (80068a4 <USB_FlushRxFifo+0x5c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e018      	b.n	8006898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	daf2      	bge.n	8006854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2210      	movs	r2, #16
 8006876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <USB_FlushRxFifo+0x5c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d901      	bls.n	800688a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e006      	b.n	8006898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b10      	cmp	r3, #16
 8006894:	d0f0      	beq.n	8006878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	00030d40 	.word	0x00030d40

080068a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	460b      	mov	r3, r1
 80068b8:	71fb      	strb	r3, [r7, #7]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d123      	bne.n	8006916 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068ce:	88bb      	ldrh	r3, [r7, #4]
 80068d0:	3303      	adds	r3, #3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e018      	b.n	800690e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	031a      	lsls	r2, r3, #12
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	461a      	mov	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3301      	adds	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	429a      	cmp	r2, r3
 8006914:	d3e2      	bcc.n	80068dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006924:	b480      	push	{r7}
 8006926:	b08b      	sub	sp, #44	; 0x2c
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	b29b      	uxth	r3, r3
 8006940:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e014      	b.n	800697a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	601a      	str	r2, [r3, #0]
    pDest++;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	3301      	adds	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	3301      	adds	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3301      	adds	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3e6      	bcc.n	8006950 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006982:	8bfb      	ldrh	r3, [r7, #30]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01e      	beq.n	80069c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	461a      	mov	r2, r3
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	701a      	strb	r2, [r3, #0]
      i++;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	3301      	adds	r3, #1
 80069b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	3301      	adds	r3, #1
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069ba:	8bfb      	ldrh	r3, [r7, #30]
 80069bc:	3b01      	subs	r3, #1
 80069be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ea      	bne.n	800699c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	372c      	adds	r7, #44	; 0x2c
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f003 0301 	and.w	r3, r3, #1
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <USB_CoreReset+0x64>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e01b      	b.n	8006a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	daf2      	bge.n	8006a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f043 0201 	orr.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3301      	adds	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <USB_CoreReset+0x64>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e006      	b.n	8006a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d0f0      	beq.n	8006a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	00030d40 	.word	0x00030d40

08006a80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a80:	b084      	sub	sp, #16
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d018      	beq.n	8006b08 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10a      	bne.n	8006af2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e014      	b.n	8006b1c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b00:	f023 0304 	bic.w	r3, r3, #4
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	e009      	b.n	8006b1c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b16:	f023 0304 	bic.w	r3, r3, #4
 8006b1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b1c:	2110      	movs	r1, #16
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fe5e 	bl	80067e0 <USB_FlushTxFifo>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff fe8a 	bl	8006848 <USB_FlushRxFifo>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e015      	b.n	8006b70 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b50:	461a      	mov	r2, r3
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b64:	461a      	mov	r2, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d3e5      	bcc.n	8006b44 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295
 8006b84:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <USB_HostInit+0x16c>)
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <USB_HostInit+0x170>)
 8006ba4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006ba8:	e009      	b.n	8006bbe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <USB_HostInit+0x174>)
 8006bb4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <USB_HostInit+0x178>)
 8006bba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d105      	bne.n	8006bd0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f043 0210 	orr.w	r2, r3, #16
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <USB_HostInit+0x17c>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006be8:	b004      	add	sp, #16
 8006bea:	4770      	bx	lr
 8006bec:	01000200 	.word	0x01000200
 8006bf0:	00e00300 	.word	0x00e00300
 8006bf4:	00600080 	.word	0x00600080
 8006bf8:	004000e0 	.word	0x004000e0
 8006bfc:	a3200008 	.word	0xa3200008

08006c00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d107      	bne.n	8006c52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c4e:	6053      	str	r3, [r2, #4]
 8006c50:	e009      	b.n	8006c66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d106      	bne.n	8006c66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f241 7370 	movw	r3, #6000	; 0x1770
 8006c64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ca4:	2064      	movs	r0, #100	; 0x64
 8006ca6:	f7fa fe75 	bl	8001994 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006cb8:	200a      	movs	r0, #10
 8006cba:	f7fa fe6b 	bl	8001994 <HAL_Delay>

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d109      	bne.n	8006d0c <USB_DriveVbus+0x44>
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d106      	bne.n	8006d0c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d0a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d109      	bne.n	8006d2c <USB_DriveVbus+0x64>
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	0c5b      	lsrs	r3, r3, #17
 8006d58:	f003 0303 	and.w	r3, r3, #3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	b29b      	uxth	r3, r3
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	70fb      	strb	r3, [r7, #3]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70bb      	strb	r3, [r7, #2]
 8006da2:	4613      	mov	r3, r2
 8006da4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006dae:	78fb      	ldrb	r3, [r7, #3]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006dc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d87e      	bhi.n	8006ec8 <USB_HC_Init+0x13c>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <USB_HC_Init+0x44>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006e8b 	.word	0x08006e8b
 8006dd8:	08006de1 	.word	0x08006de1
 8006ddc:	08006e4d 	.word	0x08006e4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dec:	461a      	mov	r2, r3
 8006dee:	f240 439d 	movw	r3, #1181	; 0x49d
 8006df2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006df4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da10      	bge.n	8006e1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006dfc:	78fb      	ldrb	r3, [r7, #3]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	0151      	lsls	r1, r2, #5
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	440a      	add	r2, r1
 8006e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006e1c:	e057      	b.n	8006ece <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d051      	beq.n	8006ece <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e48:	60d3      	str	r3, [r2, #12]
      break;
 8006e4a:	e040      	b.n	8006ece <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da34      	bge.n	8006ed2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e88:	e023      	b.n	8006ed2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e96:	461a      	mov	r2, r3
 8006e98:	f240 2325 	movw	r3, #549	; 0x225
 8006e9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da17      	bge.n	8006ed6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006ec4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ec6:	e006      	b.n	8006ed6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	77fb      	strb	r3, [r7, #31]
      break;
 8006ecc:	e004      	b.n	8006ed8 <USB_HC_Init+0x14c>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e002      	b.n	8006ed8 <USB_HC_Init+0x14c>
      break;
 8006ed2:	bf00      	nop
 8006ed4:	e000      	b.n	8006ed8 <USB_HC_Init+0x14c>
      break;
 8006ed6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef2:	f043 0302 	orr.w	r3, r3, #2
 8006ef6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	2101      	movs	r1, #1
 8006f08:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0c:	6939      	ldr	r1, [r7, #16]
 8006f0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f12:	4313      	orrs	r3, r2
 8006f14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da03      	bge.n	8006f32 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e001      	b.n	8006f36 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff feff 	bl	8006d3a <USB_GetHostSpeed>
 8006f3c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d106      	bne.n	8006f54 <USB_HC_Init+0x1c8>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d003      	beq.n	8006f54 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e001      	b.n	8006f58 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f58:	787b      	ldrb	r3, [r7, #1]
 8006f5a:	059b      	lsls	r3, r3, #22
 8006f5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f60:	78bb      	ldrb	r3, [r7, #2]
 8006f62:	02db      	lsls	r3, r3, #11
 8006f64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f6e:	049b      	lsls	r3, r3, #18
 8006f70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	440b      	add	r3, r1
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f94:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d003      	beq.n	8006fa6 <USB_HC_Init+0x21a>
 8006f9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10f      	bne.n	8006fc6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08c      	sub	sp, #48	; 0x30
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fec:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02d      	beq.n	8007056 <USB_HC_StartXfer+0x86>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d129      	bne.n	8007056 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d117      	bne.n	8007038 <USB_HC_StartXfer+0x68>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	79db      	ldrb	r3, [r3, #7]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <USB_HC_StartXfer+0x48>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	79db      	ldrb	r3, [r3, #7]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d10f      	bne.n	8007038 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	4413      	add	r3, r2
 8007020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	6a3a      	ldr	r2, [r7, #32]
 800702c:	440a      	add	r2, r1
 800702e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <USB_HC_StartXfer+0x86>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	795b      	ldrb	r3, [r3, #5]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d107      	bne.n	8007056 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	4619      	mov	r1, r3
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fa0f 	bl	8007470 <USB_DoPing>
      return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e0f8      	b.n	8007248 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d018      	beq.n	8007090 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	8912      	ldrh	r2, [r2, #8]
 8007066:	4413      	add	r3, r2
 8007068:	3b01      	subs	r3, #1
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	8912      	ldrh	r2, [r2, #8]
 800706e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007072:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007074:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007076:	8b7b      	ldrh	r3, [r7, #26]
 8007078:	429a      	cmp	r2, r3
 800707a:	d90b      	bls.n	8007094 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800707c:	8b7b      	ldrh	r3, [r7, #26]
 800707e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	8912      	ldrh	r2, [r2, #8]
 8007086:	fb03 f202 	mul.w	r2, r3, r2
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	611a      	str	r2, [r3, #16]
 800708e:	e001      	b.n	8007094 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007090:	2301      	movs	r3, #1
 8007092:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	78db      	ldrb	r3, [r3, #3]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800709c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	8912      	ldrh	r2, [r2, #8]
 80070a2:	fb03 f202 	mul.w	r2, r3, r2
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	611a      	str	r2, [r3, #16]
 80070aa:	e003      	b.n	80070b4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070be:	04d9      	lsls	r1, r3, #19
 80070c0:	4b63      	ldr	r3, [pc, #396]	; (8007250 <USB_HC_StartXfer+0x280>)
 80070c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	7a9b      	ldrb	r3, [r3, #10]
 80070ca:	075b      	lsls	r3, r3, #29
 80070cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070d0:	69f9      	ldr	r1, [r7, #28]
 80070d2:	0148      	lsls	r0, r1, #5
 80070d4:	6a39      	ldr	r1, [r7, #32]
 80070d6:	4401      	add	r1, r0
 80070d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	68d9      	ldr	r1, [r3, #12]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	460a      	mov	r2, r1
 80070f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	bf0c      	ite	eq
 800710a:	2301      	moveq	r3, #1
 800710c:	2300      	movne	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	0151      	lsls	r1, r2, #5
 8007124:	6a3a      	ldr	r2, [r7, #32]
 8007126:	440a      	add	r2, r1
 8007128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800712c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007130:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	7e7b      	ldrb	r3, [r7, #25]
 8007142:	075b      	lsls	r3, r3, #29
 8007144:	69f9      	ldr	r1, [r7, #28]
 8007146:	0148      	lsls	r0, r1, #5
 8007148:	6a39      	ldr	r1, [r7, #32]
 800714a:	4401      	add	r1, r0
 800714c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007150:	4313      	orrs	r3, r2
 8007152:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	4413      	add	r3, r2
 800715c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800716a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	78db      	ldrb	r3, [r3, #3]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	e003      	b.n	8007186 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007184:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800718c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	4413      	add	r3, r2
 8007196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719a:	461a      	mov	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e04e      	b.n	8007248 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d149      	bne.n	8007246 <USB_HC_StartXfer+0x276>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d045      	beq.n	8007246 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	79db      	ldrb	r3, [r3, #7]
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d830      	bhi.n	8007224 <USB_HC_StartXfer+0x254>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USB_HC_StartXfer+0x1f8>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071fd 	.word	0x080071fd
 80071d0:	080071d9 	.word	0x080071d9
 80071d4:	080071fd 	.word	0x080071fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	3303      	adds	r3, #3
 80071de:	089b      	lsrs	r3, r3, #2
 80071e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80071e2:	8afa      	ldrh	r2, [r7, #22]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d91c      	bls.n	8007228 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f043 0220 	orr.w	r2, r3, #32
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071fa:	e015      	b.n	8007228 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	3303      	adds	r3, #3
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007206:	8afa      	ldrh	r2, [r7, #22]
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	b29b      	uxth	r3, r3
 8007212:	429a      	cmp	r2, r3
 8007214:	d90a      	bls.n	800722c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]
        }
        break;
 8007222:	e003      	b.n	800722c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007224:	bf00      	nop
 8007226:	e002      	b.n	800722e <USB_HC_StartXfer+0x25e>
        break;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <USB_HC_StartXfer+0x25e>
        break;
 800722c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	68d9      	ldr	r1, [r3, #12]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	785a      	ldrb	r2, [r3, #1]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	b29b      	uxth	r3, r3
 800723c:	2000      	movs	r0, #0
 800723e:	9000      	str	r0, [sp, #0]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fb31 	bl	80068a8 <USB_WritePacket>
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3728      	adds	r7, #40	; 0x28
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	1ff80000 	.word	0x1ff80000

08007254 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	b29b      	uxth	r3, r3
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007276:	b480      	push	{r7}
 8007278:	b089      	sub	sp, #36	; 0x24
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	0c9b      	lsrs	r3, r3, #18
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	0fdb      	lsrs	r3, r3, #31
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d104      	bne.n	80072d0 <USB_HC_Halt+0x5a>
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e0c8      	b.n	8007462 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <USB_HC_Halt+0x66>
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d163      	bne.n	80073a4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	69fa      	ldr	r2, [r7, #28]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b00      	cmp	r3, #0
 8007306:	f040 80ab 	bne.w	8007460 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d133      	bne.n	800737e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007334:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007354:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007362:	d81d      	bhi.n	80073a0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800737a:	d0ec      	beq.n	8007356 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800737c:	e070      	b.n	8007460 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800739c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800739e:	e05f      	b.n	8007460 <USB_HC_Halt+0x1ea>
            break;
 80073a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073a2:	e05d      	b.n	8007460 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	0151      	lsls	r1, r2, #5
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	440a      	add	r2, r1
 80073ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d133      	bne.n	800743c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	440a      	add	r2, r1
 800740a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007412:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007420:	d81d      	bhi.n	800745e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007438:	d0ec      	beq.n	8007414 <USB_HC_Halt+0x19e>
 800743a:	e011      	b.n	8007460 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	440a      	add	r2, r1
 8007452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	e000      	b.n	8007460 <USB_HC_Halt+0x1ea>
          break;
 800745e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3724      	adds	r7, #36	; 0x24
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007484:	2301      	movs	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	04da      	lsls	r2, r3, #19
 800748c:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <USB_DoPing+0x74>)
 800748e:	4013      	ands	r3, r2
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	440a      	add	r2, r1
 8007498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	1ff80000 	.word	0x1ff80000

080074e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff f911 	bl	8006724 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007502:	2110      	movs	r1, #16
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff f96b 	bl	80067e0 <USB_FlushTxFifo>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff f997 	bl	8006848 <USB_FlushRxFifo>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e01f      	b.n	800756a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007540:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007548:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007550:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755e:	461a      	mov	r2, r3
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	3301      	adds	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	2b0f      	cmp	r3, #15
 800756e:	d9dc      	bls.n	800752a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	e034      	b.n	80075e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800758c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007594:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800759c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	461a      	mov	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075bc:	d80c      	bhi.n	80075d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075d4:	d0ec      	beq.n	80075b0 <USB_StopHost+0xc8>
 80075d6:	e000      	b.n	80075da <USB_StopHost+0xf2>
        break;
 80075d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	3301      	adds	r3, #1
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d9c7      	bls.n	8007576 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ec:	461a      	mov	r2, r3
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295
 80075fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff f880 	bl	8006702 <USB_EnableGlobalInt>

  return ret;
 8007602:	7ffb      	ldrb	r3, [r7, #31]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800760c:	b590      	push	{r4, r7, lr}
 800760e:	b089      	sub	sp, #36	; 0x24
 8007610:	af04      	add	r7, sp, #16
 8007612:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007614:	2301      	movs	r3, #1
 8007616:	2202      	movs	r2, #2
 8007618:	2102      	movs	r1, #2
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fc66 	bl	8007eec <USBH_FindInterface>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2bff      	cmp	r3, #255	; 0xff
 8007628:	d002      	beq.n	8007630 <USBH_CDC_InterfaceInit+0x24>
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d901      	bls.n	8007634 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007630:	2302      	movs	r3, #2
 8007632:	e13d      	b.n	80078b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc3b 	bl	8007eb4 <USBH_SelectInterface>
 800763e:	4603      	mov	r3, r0
 8007640:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007648:	2302      	movs	r3, #2
 800764a:	e131      	b.n	80078b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007652:	2050      	movs	r0, #80	; 0x50
 8007654:	f002 fb00 	bl	8009c58 <malloc>
 8007658:	4603      	mov	r3, r0
 800765a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	e11f      	b.n	80078b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007670:	2250      	movs	r2, #80	; 0x50
 8007672:	2100      	movs	r1, #0
 8007674:	68b8      	ldr	r0, [r7, #8]
 8007676:	f002 faff 	bl	8009c78 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	211a      	movs	r1, #26
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	4413      	add	r3, r2
 8007686:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b25b      	sxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	da15      	bge.n	80076be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	211a      	movs	r1, #26
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076a2:	781a      	ldrb	r2, [r3, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	211a      	movs	r1, #26
 80076ae:	fb01 f303 	mul.w	r3, r1, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076b8:	881a      	ldrh	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 ff2c 	bl	8009522 <USBH_AllocPipe>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	7819      	ldrb	r1, [r3, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	7858      	ldrb	r0, [r3, #1]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	8952      	ldrh	r2, [r2, #10]
 80076ea:	9202      	str	r2, [sp, #8]
 80076ec:	2203      	movs	r2, #3
 80076ee:	9201      	str	r2, [sp, #4]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4623      	mov	r3, r4
 80076f4:	4602      	mov	r2, r0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fee4 	bl	80094c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2200      	movs	r2, #0
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f002 f9f9 	bl	8009afc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800770a:	2300      	movs	r3, #0
 800770c:	2200      	movs	r2, #0
 800770e:	210a      	movs	r1, #10
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fbeb 	bl	8007eec <USBH_FindInterface>
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2bff      	cmp	r3, #255	; 0xff
 800771e:	d002      	beq.n	8007726 <USBH_CDC_InterfaceInit+0x11a>
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d901      	bls.n	800772a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007726:	2302      	movs	r3, #2
 8007728:	e0c2      	b.n	80078b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	211a      	movs	r1, #26
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4413      	add	r3, r2
 8007736:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b25b      	sxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	da16      	bge.n	8007770 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	211a      	movs	r1, #26
 8007748:	fb01 f303 	mul.w	r3, r1, r3
 800774c:	4413      	add	r3, r2
 800774e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007752:	781a      	ldrb	r2, [r3, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	211a      	movs	r1, #26
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	835a      	strh	r2, [r3, #26]
 800776e:	e015      	b.n	800779c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	211a      	movs	r1, #26
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	211a      	movs	r1, #26
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007796:	881a      	ldrh	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	211a      	movs	r1, #26
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b25b      	sxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da16      	bge.n	80077e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	211a      	movs	r1, #26
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	211a      	movs	r1, #26
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	835a      	strh	r2, [r3, #26]
 80077e0:	e015      	b.n	800780e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	211a      	movs	r1, #26
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	4413      	add	r3, r2
 80077ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	211a      	movs	r1, #26
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	4413      	add	r3, r2
 8007804:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007808:	881a      	ldrh	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	7b9b      	ldrb	r3, [r3, #14]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fe84 	bl	8009522 <USBH_AllocPipe>
 800781a:	4603      	mov	r3, r0
 800781c:	461a      	mov	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	7bdb      	ldrb	r3, [r3, #15]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fe7a 	bl	8009522 <USBH_AllocPipe>
 800782e:	4603      	mov	r3, r0
 8007830:	461a      	mov	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	7b59      	ldrb	r1, [r3, #13]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	7b98      	ldrb	r0, [r3, #14]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	8b12      	ldrh	r2, [r2, #24]
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	2202      	movs	r2, #2
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4623      	mov	r3, r4
 8007858:	4602      	mov	r2, r0
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fe32 	bl	80094c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	7b19      	ldrb	r1, [r3, #12]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	7bd8      	ldrb	r0, [r3, #15]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	8b52      	ldrh	r2, [r2, #26]
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	2202      	movs	r2, #2
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4623      	mov	r3, r4
 8007882:	4602      	mov	r2, r0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fe1d 	bl	80094c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	7b5b      	ldrb	r3, [r3, #13]
 8007896:	2200      	movs	r2, #0
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f002 f92e 	bl	8009afc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 f927 	bl	8009afc <USBH_LL_SetToggle>

  return USBH_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd90      	pop	{r4, r7, pc}

080078b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fe12 	bl	8009502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fe3d 	bl	8009564 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	7b1b      	ldrb	r3, [r3, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00e      	beq.n	8007916 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	7b1b      	ldrb	r3, [r3, #12]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 fdff 	bl	8009502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	7b1b      	ldrb	r3, [r3, #12]
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fe2a 	bl	8009564 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	7b5b      	ldrb	r3, [r3, #13]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	7b5b      	ldrb	r3, [r3, #13]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fdec 	bl	8009502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	7b5b      	ldrb	r3, [r3, #13]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fe17 	bl	8009564 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	4618      	mov	r0, r3
 8007952:	f002 f989 	bl	8009c68 <free>
    phost->pActiveClass->pData = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800795c:	2200      	movs	r2, #0
 800795e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3340      	adds	r3, #64	; 0x40
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8b1 	bl	8007aea <GetLineCoding>
 8007988:	4603      	mov	r3, r0
 800798a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d105      	bne.n	800799e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007998:	2102      	movs	r1, #2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800799e:	7afb      	ldrb	r3, [r7, #11]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d877      	bhi.n	8007abc <USBH_CDC_Process+0x114>
 80079cc:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBH_CDC_Process+0x2c>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079e9 	.word	0x080079e9
 80079d8:	080079ef 	.word	0x080079ef
 80079dc:	08007a1f 	.word	0x08007a1f
 80079e0:	08007a93 	.word	0x08007a93
 80079e4:	08007aa1 	.word	0x08007aa1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
      break;
 80079ec:	e06d      	b.n	8007aca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f897 	bl	8007b28 <SetLineCoding>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a0c:	e058      	b.n	8007ac0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d055      	beq.n	8007ac0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2204      	movs	r2, #4
 8007a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a1c:	e050      	b.n	8007ac0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3340      	adds	r3, #64	; 0x40
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f860 	bl	8007aea <GetLineCoding>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d126      	bne.n	8007a82 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	791b      	ldrb	r3, [r3, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d13b      	bne.n	8007ac4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a56:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d133      	bne.n	8007ac4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a66:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d12b      	bne.n	8007ac4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a74:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d124      	bne.n	8007ac4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f958 	bl	8007d30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a80:	e020      	b.n	8007ac4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d01d      	beq.n	8007ac4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a90:	e018      	b.n	8007ac4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f867 	bl	8007b66 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8da 	bl	8007c52 <CDC_ProcessReception>
      break;
 8007a9e:	e014      	b.n	8007aca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 ffef 	bl	8008a86 <USBH_ClrFeature>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007aba:	e005      	b.n	8007ac8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007abc:	bf00      	nop
 8007abe:	e004      	b.n	8007aca <USBH_CDC_Process+0x122>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e002      	b.n	8007aca <USBH_CDC_Process+0x122>
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e000      	b.n	8007aca <USBH_CDC_Process+0x122>
      break;
 8007ac8:	bf00      	nop

  }

  return status;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	22a1      	movs	r2, #161	; 0xa1
 8007af8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2221      	movs	r2, #33	; 0x21
 8007afe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2207      	movs	r2, #7
 8007b10:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2207      	movs	r2, #7
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 fa81 	bl	8009020 <USBH_CtlReq>
 8007b1e:	4603      	mov	r3, r0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2221      	movs	r2, #33	; 0x21
 8007b36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2207      	movs	r2, #7
 8007b4e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2207      	movs	r2, #7
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fa62 	bl	8009020 <USBH_CtlReq>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af02      	add	r7, sp, #8
 8007b6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d002      	beq.n	8007b8c <CDC_ProcessTransmission+0x26>
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d023      	beq.n	8007bd2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b8a:	e05e      	b.n	8007c4a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	8b12      	ldrh	r2, [r2, #24]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d90b      	bls.n	8007bb0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	69d9      	ldr	r1, [r3, #28]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8b1a      	ldrh	r2, [r3, #24]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	7b5b      	ldrb	r3, [r3, #13]
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	9000      	str	r0, [sp, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fc48 	bl	800943e <USBH_BulkSendData>
 8007bae:	e00b      	b.n	8007bc8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	7b5b      	ldrb	r3, [r3, #13]
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	9000      	str	r0, [sp, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fc3b 	bl	800943e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bd0:	e03b      	b.n	8007c4a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	7b5b      	ldrb	r3, [r3, #13]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 ff65 	bl	8009aa8 <USBH_LL_GetURBState>
 8007bde:	4603      	mov	r3, r0
 8007be0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d128      	bne.n	8007c3a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	8b12      	ldrh	r2, [r2, #24]
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d90e      	bls.n	8007c12 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	8b12      	ldrh	r2, [r2, #24]
 8007bfc:	1a9a      	subs	r2, r3, r2
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	8b12      	ldrh	r2, [r2, #24]
 8007c0a:	441a      	add	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	61da      	str	r2, [r3, #28]
 8007c10:	e002      	b.n	8007c18 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d004      	beq.n	8007c2a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c28:	e00e      	b.n	8007c48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f868 	bl	8007d08 <USBH_CDC_TransmitCallback>
      break;
 8007c38:	e006      	b.n	8007c48 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d103      	bne.n	8007c48 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c48:	bf00      	nop
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c6e:	2b03      	cmp	r3, #3
 8007c70:	d002      	beq.n	8007c78 <CDC_ProcessReception+0x26>
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d00e      	beq.n	8007c94 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c76:	e043      	b.n	8007d00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6a19      	ldr	r1, [r3, #32]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	8b5a      	ldrh	r2, [r3, #26]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	7b1b      	ldrb	r3, [r3, #12]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 fbff 	bl	8009488 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c92:	e035      	b.n	8007d00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	7b1b      	ldrb	r3, [r3, #12]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 ff04 	bl	8009aa8 <USBH_LL_GetURBState>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ca4:	7cfb      	ldrb	r3, [r7, #19]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d129      	bne.n	8007cfe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	7b1b      	ldrb	r3, [r3, #12]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fe67 	bl	8009984 <USBH_LL_GetLastXferSize>
 8007cb6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d016      	beq.n	8007cf0 <CDC_ProcessReception+0x9e>
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	8b5b      	ldrh	r3, [r3, #26]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d910      	bls.n	8007cf0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	6a1a      	ldr	r2, [r3, #32]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cee:	e006      	b.n	8007cfe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f80f 	bl	8007d1c <USBH_CDC_ReceiveCallback>
      break;
 8007cfe:	bf00      	nop
  }
}
 8007d00:	bf00      	nop
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e029      	b.n	8007db0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	79fa      	ldrb	r2, [r7, #7]
 8007d60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f81f 	bl	8007db8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f001 fd2d 	bl	8009808 <USBH_LL_Init>

  return USBH_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e009      	b.n	8007dde <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	33e0      	adds	r3, #224	; 0xe0
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b0f      	cmp	r3, #15
 8007de2:	d9f2      	bls.n	8007dca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e009      	b.n	8007dfe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e04:	d3f1      	bcc.n	8007dea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2240      	movs	r2, #64	; 0x40
 8007e2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d016      	beq.n	8007ea2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10e      	bne.n	8007e9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e84:	1c59      	adds	r1, r3, #1
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	33de      	adds	r3, #222	; 0xde
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
 8007e9a:	e004      	b.n	8007ea6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	73fb      	strb	r3, [r7, #15]
 8007ea0:	e001      	b.n	8007ea6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d204      	bcs.n	8007eda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ed8:	e001      	b.n	8007ede <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	70fb      	strb	r3, [r7, #3]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70bb      	strb	r3, [r7, #2]
 8007f02:	4613      	mov	r3, r2
 8007f04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f06:	2300      	movs	r3, #0
 8007f08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f16:	e025      	b.n	8007f64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	221a      	movs	r2, #26
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
 8007f20:	3308      	adds	r3, #8
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	3302      	adds	r3, #2
 8007f28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	795b      	ldrb	r3, [r3, #5]
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d002      	beq.n	8007f3a <USBH_FindInterface+0x4e>
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2bff      	cmp	r3, #255	; 0xff
 8007f38:	d111      	bne.n	8007f5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f3e:	78ba      	ldrb	r2, [r7, #2]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d002      	beq.n	8007f4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f44:	78bb      	ldrb	r3, [r7, #2]
 8007f46:	2bff      	cmp	r3, #255	; 0xff
 8007f48:	d109      	bne.n	8007f5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f4e:	787a      	ldrb	r2, [r7, #1]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d002      	beq.n	8007f5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f54:	787b      	ldrb	r3, [r7, #1]
 8007f56:	2bff      	cmp	r3, #255	; 0xff
 8007f58:	d101      	bne.n	8007f5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	e006      	b.n	8007f6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	3301      	adds	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d9d6      	bls.n	8007f18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f6a:	23ff      	movs	r3, #255	; 0xff
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fc87 	bl	8009894 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f86:	2101      	movs	r1, #1
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fda0 	bl	8009ace <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af04      	add	r7, sp, #16
 8007f9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d102      	bne.n	8007fba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2203      	movs	r2, #3
 8007fb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b0b      	cmp	r3, #11
 8007fc2:	f200 81be 	bhi.w	8008342 <USBH_Process+0x3aa>
 8007fc6:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <USBH_Process+0x34>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007ffd 	.word	0x08007ffd
 8007fd0:	0800802f 	.word	0x0800802f
 8007fd4:	08008097 	.word	0x08008097
 8007fd8:	080082dd 	.word	0x080082dd
 8007fdc:	08008343 	.word	0x08008343
 8007fe0:	0800813b 	.word	0x0800813b
 8007fe4:	08008283 	.word	0x08008283
 8007fe8:	08008171 	.word	0x08008171
 8007fec:	08008191 	.word	0x08008191
 8007ff0:	080081b1 	.word	0x080081b1
 8007ff4:	080081f5 	.word	0x080081f5
 8007ff8:	080082c5 	.word	0x080082c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 819e 	beq.w	8008346 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008010:	20c8      	movs	r0, #200	; 0xc8
 8008012:	f001 fda3 	bl	8009b5c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fc99 	bl	800994e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800802c:	e18b      	b.n	8008346 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008034:	2b01      	cmp	r3, #1
 8008036:	d107      	bne.n	8008048 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008046:	e18d      	b.n	8008364 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800804e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008052:	d914      	bls.n	800807e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800805a:	3301      	adds	r3, #1
 800805c:	b2da      	uxtb	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800806a:	2b03      	cmp	r3, #3
 800806c:	d903      	bls.n	8008076 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	220d      	movs	r2, #13
 8008072:	701a      	strb	r2, [r3, #0]
      break;
 8008074:	e176      	b.n	8008364 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
      break;
 800807c:	e172      	b.n	8008364 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008084:	f103 020a 	add.w	r2, r3, #10
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800808e:	200a      	movs	r0, #10
 8008090:	f001 fd64 	bl	8009b5c <USBH_Delay>
      break;
 8008094:	e166      	b.n	8008364 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080a6:	2104      	movs	r1, #4
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80080ac:	2064      	movs	r0, #100	; 0x64
 80080ae:	f001 fd55 	bl	8009b5c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fc24 	bl	8009900 <USBH_LL_GetSpeed>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2205      	movs	r2, #5
 80080c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fa29 	bl	8009522 <USBH_AllocPipe>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fa21 	bl	8009522 <USBH_AllocPipe>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7919      	ldrb	r1, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080fc:	b292      	uxth	r2, r2
 80080fe:	9202      	str	r2, [sp, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	9201      	str	r2, [sp, #4]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4603      	mov	r3, r0
 8008108:	2280      	movs	r2, #128	; 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f9da 	bl	80094c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7959      	ldrb	r1, [r3, #5]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008124:	b292      	uxth	r2, r2
 8008126:	9202      	str	r2, [sp, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	9201      	str	r2, [sp, #4]
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	4603      	mov	r3, r0
 8008130:	2200      	movs	r2, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f9c6 	bl	80094c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008138:	e114      	b.n	8008364 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f918 	bl	8008370 <USBH_HandleEnum>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	f040 80fe 	bne.w	800834a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800815c:	2b01      	cmp	r3, #1
 800815e:	d103      	bne.n	8008168 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2208      	movs	r2, #8
 8008164:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008166:	e0f0      	b.n	800834a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2207      	movs	r2, #7
 800816c:	701a      	strb	r2, [r3, #0]
      break;
 800816e:	e0ec      	b.n	800834a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80e9 	beq.w	800834e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008182:	2101      	movs	r1, #1
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2208      	movs	r2, #8
 800818c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800818e:	e0de      	b.n	800834e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008196:	b29b      	uxth	r3, r3
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc2c 	bl	80089f8 <USBH_SetCfg>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80d5 	bne.w	8008352 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2209      	movs	r2, #9
 80081ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081ae:	e0d0      	b.n	8008352 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d016      	beq.n	80081ec <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80081be:	2101      	movs	r1, #1
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc3c 	bl	8008a3e <USBH_SetFeature>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220a      	movs	r2, #10
 80081d6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081d8:	e0bd      	b.n	8008356 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b03      	cmp	r3, #3
 80081e0:	f040 80b9 	bne.w	8008356 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	220a      	movs	r2, #10
 80081e8:	701a      	strb	r2, [r3, #0]
      break;
 80081ea:	e0b4      	b.n	8008356 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	220a      	movs	r2, #10
 80081f0:	701a      	strb	r2, [r3, #0]
      break;
 80081f2:	e0b0      	b.n	8008356 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80ad 	beq.w	800835a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	e016      	b.n	800823c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800820e:	7bfa      	ldrb	r2, [r7, #15]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	32de      	adds	r2, #222	; 0xde
 8008214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008218:	791a      	ldrb	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008220:	429a      	cmp	r2, r3
 8008222:	d108      	bne.n	8008236 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008224:	7bfa      	ldrb	r2, [r7, #15]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32de      	adds	r2, #222	; 0xde
 800822a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008234:	e005      	b.n	8008242 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	3301      	adds	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0e5      	beq.n	800820e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008248:	2b00      	cmp	r3, #0
 800824a:	d016      	beq.n	800827a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2206      	movs	r2, #6
 8008262:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800826a:	2103      	movs	r1, #3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008270:	e073      	b.n	800835a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	220d      	movs	r2, #13
 8008276:	701a      	strb	r2, [r3, #0]
      break;
 8008278:	e06f      	b.n	800835a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220d      	movs	r2, #13
 800827e:	701a      	strb	r2, [r3, #0]
      break;
 8008280:	e06b      	b.n	800835a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d017      	beq.n	80082bc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220b      	movs	r2, #11
 80082a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082aa:	e058      	b.n	800835e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d154      	bne.n	800835e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	220d      	movs	r2, #13
 80082b8:	701a      	strb	r2, [r3, #0]
      break;
 80082ba:	e050      	b.n	800835e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	220d      	movs	r2, #13
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e04c      	b.n	800835e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d049      	beq.n	8008362 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
      }
      break;
 80082da:	e042      	b.n	8008362 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fd67 	bl	8007db8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d009      	beq.n	8008308 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008318:	2105      	movs	r1, #5
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d107      	bne.n	800833a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fe20 	bl	8007f78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008338:	e014      	b.n	8008364 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 faaa 	bl	8009894 <USBH_LL_Start>
      break;
 8008340:	e010      	b.n	8008364 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008342:	bf00      	nop
 8008344:	e00e      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 8008346:	bf00      	nop
 8008348:	e00c      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 800834a:	bf00      	nop
 800834c:	e00a      	b.n	8008364 <USBH_Process+0x3cc>
    break;
 800834e:	bf00      	nop
 8008350:	e008      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 8008352:	bf00      	nop
 8008354:	e006      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <USBH_Process+0x3cc>
      break;
 8008362:	bf00      	nop
  }
  return USBH_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop

08008370 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b088      	sub	sp, #32
 8008374:	af04      	add	r7, sp, #16
 8008376:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008378:	2301      	movs	r3, #1
 800837a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800837c:	2301      	movs	r3, #1
 800837e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b07      	cmp	r3, #7
 8008386:	f200 81c1 	bhi.w	800870c <USBH_HandleEnum+0x39c>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <USBH_HandleEnum+0x20>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083b1 	.word	0x080083b1
 8008394:	0800846f 	.word	0x0800846f
 8008398:	080084d9 	.word	0x080084d9
 800839c:	08008567 	.word	0x08008567
 80083a0:	080085d1 	.word	0x080085d1
 80083a4:	08008641 	.word	0x08008641
 80083a8:	08008687 	.word	0x08008687
 80083ac:	080086cd 	.word	0x080086cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80083b0:	2108      	movs	r1, #8
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa50 	bl	8008858 <USBH_Get_DevDesc>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d130      	bne.n	8008424 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7919      	ldrb	r1, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083e6:	b292      	uxth	r2, r2
 80083e8:	9202      	str	r2, [sp, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	9201      	str	r2, [sp, #4]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	2280      	movs	r2, #128	; 0x80
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f001 f865 	bl	80094c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7959      	ldrb	r1, [r3, #5]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800840e:	b292      	uxth	r2, r2
 8008410:	9202      	str	r2, [sp, #8]
 8008412:	2200      	movs	r2, #0
 8008414:	9201      	str	r2, [sp, #4]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4603      	mov	r3, r0
 800841a:	2200      	movs	r2, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 f851 	bl	80094c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008422:	e175      	b.n	8008710 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b03      	cmp	r3, #3
 8008428:	f040 8172 	bne.w	8008710 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008432:	3301      	adds	r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008442:	2b03      	cmp	r3, #3
 8008444:	d903      	bls.n	800844e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	220d      	movs	r2, #13
 800844a:	701a      	strb	r2, [r3, #0]
      break;
 800844c:	e160      	b.n	8008710 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f885 	bl	8009564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f87f 	bl	8009564 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	701a      	strb	r2, [r3, #0]
      break;
 800846c:	e150      	b.n	8008710 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800846e:	2112      	movs	r1, #18
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f9f1 	bl	8008858 <USBH_Get_DevDesc>
 8008476:	4603      	mov	r3, r0
 8008478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008486:	e145      	b.n	8008714 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b03      	cmp	r3, #3
 800848c:	f040 8142 	bne.w	8008714 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008496:	3301      	adds	r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d903      	bls.n	80084b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220d      	movs	r2, #13
 80084ae:	701a      	strb	r2, [r3, #0]
      break;
 80084b0:	e130      	b.n	8008714 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	795b      	ldrb	r3, [r3, #5]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f853 	bl	8009564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	791b      	ldrb	r3, [r3, #4]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f84d 	bl	8009564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e11d      	b.n	8008714 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80084d8:	2101      	movs	r1, #1
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa68 	bl	80089b0 <USBH_SetAddress>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d132      	bne.n	8008550 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80084ea:	2002      	movs	r0, #2
 80084ec:	f001 fb36 	bl	8009b5c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2203      	movs	r2, #3
 80084fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7919      	ldrb	r1, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008512:	b292      	uxth	r2, r2
 8008514:	9202      	str	r2, [sp, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	9201      	str	r2, [sp, #4]
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4603      	mov	r3, r0
 800851e:	2280      	movs	r2, #128	; 0x80
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 ffcf 	bl	80094c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7959      	ldrb	r1, [r3, #5]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800853a:	b292      	uxth	r2, r2
 800853c:	9202      	str	r2, [sp, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	9201      	str	r2, [sp, #4]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	4603      	mov	r3, r0
 8008546:	2200      	movs	r2, #0
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 ffbb 	bl	80094c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800854e:	e0e3      	b.n	8008718 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b03      	cmp	r3, #3
 8008554:	f040 80e0 	bne.w	8008718 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	220d      	movs	r2, #13
 800855c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	705a      	strb	r2, [r3, #1]
      break;
 8008564:	e0d8      	b.n	8008718 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008566:	2109      	movs	r1, #9
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f99d 	bl	80088a8 <USBH_Get_CfgDesc>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800857e:	e0cd      	b.n	800871c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b03      	cmp	r3, #3
 8008584:	f040 80ca 	bne.w	800871c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800858e:	3301      	adds	r3, #1
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d903      	bls.n	80085aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	220d      	movs	r2, #13
 80085a6:	701a      	strb	r2, [r3, #0]
      break;
 80085a8:	e0b8      	b.n	800871c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	795b      	ldrb	r3, [r3, #5]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 ffd7 	bl	8009564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 ffd1 	bl	8009564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
      break;
 80085ce:	e0a5      	b.n	800871c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f965 	bl	80088a8 <USBH_Get_CfgDesc>
 80085de:	4603      	mov	r3, r0
 80085e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2205      	movs	r2, #5
 80085ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085ee:	e097      	b.n	8008720 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	f040 8094 	bne.w	8008720 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085fe:	3301      	adds	r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800860e:	2b03      	cmp	r3, #3
 8008610:	d903      	bls.n	800861a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	220d      	movs	r2, #13
 8008616:	701a      	strb	r2, [r3, #0]
      break;
 8008618:	e082      	b.n	8008720 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	795b      	ldrb	r3, [r3, #5]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 ff9f 	bl	8009564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 ff99 	bl	8009564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
      break;
 800863e:	e06f      	b.n	8008720 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008646:	2b00      	cmp	r3, #0
 8008648:	d019      	beq.n	800867e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008656:	23ff      	movs	r3, #255	; 0xff
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f949 	bl	80088f0 <USBH_Get_StringDesc>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2206      	movs	r2, #6
 800866c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800866e:	e059      	b.n	8008724 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b03      	cmp	r3, #3
 8008674:	d156      	bne.n	8008724 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2206      	movs	r2, #6
 800867a:	705a      	strb	r2, [r3, #1]
      break;
 800867c:	e052      	b.n	8008724 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2206      	movs	r2, #6
 8008682:	705a      	strb	r2, [r3, #1]
      break;
 8008684:	e04e      	b.n	8008724 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800868c:	2b00      	cmp	r3, #0
 800868e:	d019      	beq.n	80086c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800869c:	23ff      	movs	r3, #255	; 0xff
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f926 	bl	80088f0 <USBH_Get_StringDesc>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2207      	movs	r2, #7
 80086b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086b4:	e038      	b.n	8008728 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d135      	bne.n	8008728 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2207      	movs	r2, #7
 80086c0:	705a      	strb	r2, [r3, #1]
      break;
 80086c2:	e031      	b.n	8008728 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2207      	movs	r2, #7
 80086c8:	705a      	strb	r2, [r3, #1]
      break;
 80086ca:	e02d      	b.n	8008728 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d017      	beq.n	8008706 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80086e2:	23ff      	movs	r3, #255	; 0xff
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f903 	bl	80088f0 <USBH_Get_StringDesc>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80086f8:	e018      	b.n	800872c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d115      	bne.n	800872c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
      break;
 8008704:	e012      	b.n	800872c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
      break;
 800870a:	e00f      	b.n	800872c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800870c:	bf00      	nop
 800870e:	e00e      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008710:	bf00      	nop
 8008712:	e00c      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008714:	bf00      	nop
 8008716:	e00a      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008718:	bf00      	nop
 800871a:	e008      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 800871c:	bf00      	nop
 800871e:	e006      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008720:	bf00      	nop
 8008722:	e004      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008724:	bf00      	nop
 8008726:	e002      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 8008728:	bf00      	nop
 800872a:	e000      	b.n	800872e <USBH_HandleEnum+0x3be>
      break;
 800872c:	bf00      	nop
  }
  return Status;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f804 	bl	800877a <USBH_HandleSof>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b0b      	cmp	r3, #11
 800878a:	d10a      	bne.n	80087a2 <USBH_HandleSof+0x28>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
  }
}
 80087a2:	bf00      	nop
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80087ba:	bf00      	nop
}
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80087d6:	bf00      	nop
}
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f84a 	bl	80098ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fe91 	bl	8009564 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	795b      	ldrb	r3, [r3, #5]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fe8b 	bl	8009564 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af02      	add	r7, sp, #8
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	b29b      	uxth	r3, r3
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4613      	mov	r3, r2
 8008872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f864 	bl	8008946 <USBH_GetDescriptor>
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	b292      	uxth	r2, r2
 8008898:	4619      	mov	r1, r3
 800889a:	f000 f918 	bl	8008ace <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	331c      	adds	r3, #28
 80088b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80088ba:	887b      	ldrh	r3, [r7, #2]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f83d 	bl	8008946 <USBH_GetDescriptor>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80088d6:	887b      	ldrh	r3, [r7, #2]
 80088d8:	461a      	mov	r2, r3
 80088da:	68b9      	ldr	r1, [r7, #8]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f987 	bl	8008bf0 <USBH_ParseCfgDesc>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	461a      	mov	r2, r3
 80088fc:	460b      	mov	r3, r1
 80088fe:	72fb      	strb	r3, [r7, #11]
 8008900:	4613      	mov	r3, r2
 8008902:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800890c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008914:	893b      	ldrh	r3, [r7, #8]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	460b      	mov	r3, r1
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f812 	bl	8008946 <USBH_GetDescriptor>
 8008922:	4603      	mov	r3, r0
 8008924:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008932:	893a      	ldrh	r2, [r7, #8]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 fb24 	bl	8008f84 <USBH_ParseStringDesc>
  }

  return status;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b084      	sub	sp, #16
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	607b      	str	r3, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	72fb      	strb	r3, [r7, #11]
 8008954:	4613      	mov	r3, r2
 8008956:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	789b      	ldrb	r3, [r3, #2]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d11c      	bne.n	800899a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2206      	movs	r2, #6
 8008970:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	893a      	ldrh	r2, [r7, #8]
 8008976:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008978:	893b      	ldrh	r3, [r7, #8]
 800897a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800897e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008982:	d104      	bne.n	800898e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f240 4209 	movw	r2, #1033	; 0x409
 800898a:	829a      	strh	r2, [r3, #20]
 800898c:	e002      	b.n	8008994 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8b3a      	ldrh	r2, [r7, #24]
 8008998:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800899a:	8b3b      	ldrh	r3, [r7, #24]
 800899c:	461a      	mov	r2, r3
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fb3d 	bl	8009020 <USBH_CtlReq>
 80089a6:	4603      	mov	r3, r0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	789b      	ldrb	r3, [r3, #2]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d10f      	bne.n	80089e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2205      	movs	r2, #5
 80089ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fb19 	bl	8009020 <USBH_CtlReq>
 80089ee:	4603      	mov	r3, r0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	789b      	ldrb	r3, [r3, #2]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d10e      	bne.n	8008a2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2209      	movs	r2, #9
 8008a16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	887a      	ldrh	r2, [r7, #2]
 8008a1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 faf6 	bl	8009020 <USBH_CtlReq>
 8008a34:	4603      	mov	r3, r0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	789b      	ldrb	r3, [r3, #2]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10f      	bne.n	8008a72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fad2 	bl	8009020 <USBH_CtlReq>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	789b      	ldrb	r3, [r3, #2]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d10f      	bne.n	8008aba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 faae 	bl	8009020 <USBH_CtlReq>
 8008ac4:	4603      	mov	r3, r0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	785a      	ldrb	r2, [r3, #1]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3302      	adds	r3, #2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3303      	adds	r3, #3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	791a      	ldrb	r2, [r3, #4]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	795a      	ldrb	r2, [r3, #5]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	799a      	ldrb	r2, [r3, #6]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	79da      	ldrb	r2, [r3, #7]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	79db      	ldrb	r3, [r3, #7]
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	dc11      	bgt.n	8008b54 <USBH_ParseDevDesc+0x86>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	db16      	blt.n	8008b62 <USBH_ParseDevDesc+0x94>
 8008b34:	3b08      	subs	r3, #8
 8008b36:	2201      	movs	r2, #1
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf14      	ite	ne
 8008b48:	2301      	movne	r3, #1
 8008b4a:	2300      	moveq	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d102      	bne.n	8008b58 <USBH_ParseDevDesc+0x8a>
 8008b52:	e006      	b.n	8008b62 <USBH_ParseDevDesc+0x94>
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d104      	bne.n	8008b62 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	79da      	ldrb	r2, [r3, #7]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	71da      	strb	r2, [r3, #7]
      break;
 8008b60:	e003      	b.n	8008b6a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2240      	movs	r2, #64	; 0x40
 8008b66:	71da      	strb	r2, [r3, #7]
      break;
 8008b68:	bf00      	nop
  }

  if (length > 8U)
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d939      	bls.n	8008be4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3308      	adds	r3, #8
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3309      	adds	r3, #9
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	330a      	adds	r3, #10
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	330b      	adds	r3, #11
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	330c      	adds	r3, #12
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	330d      	adds	r3, #13
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	7b9a      	ldrb	r2, [r3, #14]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	7bda      	ldrb	r2, [r3, #15]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	7c1a      	ldrb	r2, [r3, #16]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	7c5a      	ldrb	r2, [r3, #17]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	745a      	strb	r2, [r3, #17]
  }
}
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08c      	sub	sp, #48	; 0x30
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	785a      	ldrb	r2, [r3, #1]
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	3302      	adds	r3, #2
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3303      	adds	r3, #3
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	bf28      	it	cs
 8008c4e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	791a      	ldrb	r2, [r3, #4]
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	795a      	ldrb	r2, [r3, #5]
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	799a      	ldrb	r2, [r3, #6]
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	79da      	ldrb	r2, [r3, #7]
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	7a1a      	ldrb	r2, [r3, #8]
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b09      	cmp	r3, #9
 8008c86:	d002      	beq.n	8008c8e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2209      	movs	r2, #9
 8008c8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	2b09      	cmp	r3, #9
 8008c92:	f240 809d 	bls.w	8008dd0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c96:	2309      	movs	r3, #9
 8008c98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c9e:	e081      	b.n	8008da4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ca0:	f107 0316 	add.w	r3, r7, #22
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca8:	f000 f99f 	bl	8008fea <USBH_GetNextDesc>
 8008cac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d176      	bne.n	8008da4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	2b09      	cmp	r3, #9
 8008cbc:	d002      	beq.n	8008cc4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	2209      	movs	r2, #9
 8008cc2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cc8:	221a      	movs	r2, #26
 8008cca:	fb02 f303 	mul.w	r3, r2, r3
 8008cce:	3308      	adds	r3, #8
 8008cd0:	6a3a      	ldr	r2, [r7, #32]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cda:	69f8      	ldr	r0, [r7, #28]
 8008cdc:	f000 f87e 	bl	8008ddc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cea:	e043      	b.n	8008d74 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cec:	f107 0316 	add.w	r3, r7, #22
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf4:	f000 f979 	bl	8008fea <USBH_GetNextDesc>
 8008cf8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d138      	bne.n	8008d74 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	795b      	ldrb	r3, [r3, #5]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d10f      	bne.n	8008d2a <USBH_ParseCfgDesc+0x13a>
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	799b      	ldrb	r3, [r3, #6]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d10b      	bne.n	8008d2a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	79db      	ldrb	r3, [r3, #7]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10f      	bne.n	8008d3a <USBH_ParseCfgDesc+0x14a>
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b09      	cmp	r3, #9
 8008d20:	d00b      	beq.n	8008d3a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d24:	2209      	movs	r2, #9
 8008d26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d28:	e007      	b.n	8008d3a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b07      	cmp	r3, #7
 8008d30:	d004      	beq.n	8008d3c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	2207      	movs	r2, #7
 8008d36:	701a      	strb	r2, [r3, #0]
 8008d38:	e000      	b.n	8008d3c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d3a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d44:	3201      	adds	r2, #1
 8008d46:	00d2      	lsls	r2, r2, #3
 8008d48:	211a      	movs	r1, #26
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3308      	adds	r3, #8
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	4413      	add	r3, r2
 8008d56:	3304      	adds	r3, #4
 8008d58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d5c:	69b9      	ldr	r1, [r7, #24]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f86b 	bl	8008e3a <USBH_ParseEPDesc>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	791b      	ldrb	r3, [r3, #4]
 8008d78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d204      	bcs.n	8008d8a <USBH_ParseCfgDesc+0x19a>
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	885a      	ldrh	r2, [r3, #2]
 8008d84:	8afb      	ldrh	r3, [r7, #22]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d8b0      	bhi.n	8008cec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	791b      	ldrb	r3, [r3, #4]
 8008d8e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d201      	bcs.n	8008d9a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e01c      	b.n	8008dd4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d9e:	3301      	adds	r3, #1
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d805      	bhi.n	8008db8 <USBH_ParseCfgDesc+0x1c8>
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	885a      	ldrh	r2, [r3, #2]
 8008db0:	8afb      	ldrh	r3, [r7, #22]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	f63f af74 	bhi.w	8008ca0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	791b      	ldrb	r3, [r3, #4]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	bf28      	it	cs
 8008dc0:	2302      	movcs	r3, #2
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d201      	bcs.n	8008dd0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e001      	b.n	8008dd4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3730      	adds	r7, #48	; 0x30
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781a      	ldrb	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	785a      	ldrb	r2, [r3, #1]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	789a      	ldrb	r2, [r3, #2]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	78da      	ldrb	r2, [r3, #3]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	791a      	ldrb	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	795a      	ldrb	r2, [r3, #5]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	799a      	ldrb	r2, [r3, #6]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	79da      	ldrb	r2, [r3, #7]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	7a1a      	ldrb	r2, [r3, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	721a      	strb	r2, [r3, #8]
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	785a      	ldrb	r2, [r3, #1]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	789a      	ldrb	r2, [r3, #2]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	78da      	ldrb	r2, [r3, #3]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3305      	adds	r3, #5
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	799a      	ldrb	r2, [r3, #6]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	889b      	ldrh	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d102      	bne.n	8008e9c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008e96:	2303      	movs	r3, #3
 8008e98:	75fb      	strb	r3, [r7, #23]
 8008e9a:	e033      	b.n	8008f04 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	889b      	ldrh	r3, [r3, #4]
 8008ea0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	889b      	ldrh	r3, [r3, #4]
 8008eb2:	b21a      	sxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	b299      	uxth	r1, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3305      	adds	r3, #5
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d110      	bne.n	8008ef6 <USBH_ParseEPDesc+0xbc>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	b299      	uxth	r1, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3305      	adds	r3, #5
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	b21b      	sxth	r3, r3
 8008eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	e001      	b.n	8008efa <USBH_ParseEPDesc+0xc0>
 8008ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008efa:	4313      	orrs	r3, r2
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d116      	bne.n	8008f3c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	78db      	ldrb	r3, [r3, #3]
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d005      	beq.n	8008f26 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	78db      	ldrb	r3, [r3, #3]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d127      	bne.n	8008f76 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	799b      	ldrb	r3, [r3, #6]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <USBH_ParseEPDesc+0xfc>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	799b      	ldrb	r3, [r3, #6]
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	d91f      	bls.n	8008f76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f36:	2303      	movs	r3, #3
 8008f38:	75fb      	strb	r3, [r7, #23]
 8008f3a:	e01c      	b.n	8008f76 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	78db      	ldrb	r3, [r3, #3]
 8008f40:	f003 0303 	and.w	r3, r3, #3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d10a      	bne.n	8008f5e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	799b      	ldrb	r3, [r3, #6]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <USBH_ParseEPDesc+0x11e>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	799b      	ldrb	r3, [r3, #6]
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d90e      	bls.n	8008f76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	75fb      	strb	r3, [r7, #23]
 8008f5c:	e00b      	b.n	8008f76 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	78db      	ldrb	r3, [r3, #3]
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d105      	bne.n	8008f76 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	799b      	ldrb	r3, [r3, #6]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f72:	2303      	movs	r3, #3
 8008f74:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d120      	bne.n	8008fde <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	1e9a      	subs	r2, r3, #2
 8008fa2:	88fb      	ldrh	r3, [r7, #6]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	bf28      	it	cs
 8008fa8:	4613      	movcs	r3, r2
 8008faa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3302      	adds	r3, #2
 8008fb0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	82fb      	strh	r3, [r7, #22]
 8008fb6:	e00b      	b.n	8008fd0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008fb8:	8afb      	ldrh	r3, [r7, #22]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	781a      	ldrb	r2, [r3, #0]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008fca:	8afb      	ldrh	r3, [r7, #22]
 8008fcc:	3302      	adds	r3, #2
 8008fce:	82fb      	strh	r3, [r7, #22]
 8008fd0:	8afa      	ldrh	r2, [r7, #22]
 8008fd2:	8abb      	ldrh	r3, [r7, #20]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d3ef      	bcc.n	8008fb8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	4413      	add	r3, r2
 8009000:	b29a      	uxth	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009012:	68fb      	ldr	r3, [r7, #12]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	789b      	ldrb	r3, [r3, #2]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d002      	beq.n	8009040 <USBH_CtlReq+0x20>
 800903a:	2b02      	cmp	r3, #2
 800903c:	d00f      	beq.n	800905e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800903e:	e027      	b.n	8009090 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	88fa      	ldrh	r2, [r7, #6]
 800904a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2202      	movs	r2, #2
 8009056:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009058:	2301      	movs	r3, #1
 800905a:	75fb      	strb	r3, [r7, #23]
      break;
 800905c:	e018      	b.n	8009090 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 f81c 	bl	800909c <USBH_HandleControl>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <USBH_CtlReq+0x54>
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d106      	bne.n	8009082 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	761a      	strb	r2, [r3, #24]
      break;
 8009080:	e005      	b.n	800908e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d102      	bne.n	800908e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2201      	movs	r2, #1
 800908c:	709a      	strb	r2, [r3, #2]
      break;
 800908e:	bf00      	nop
  }
  return status;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090a4:	2301      	movs	r3, #1
 80090a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7e1b      	ldrb	r3, [r3, #24]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	2b0a      	cmp	r3, #10
 80090b4:	f200 8156 	bhi.w	8009364 <USBH_HandleControl+0x2c8>
 80090b8:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <USBH_HandleControl+0x24>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	08009107 	.word	0x08009107
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009197 	.word	0x08009197
 80090d0:	080091cf 	.word	0x080091cf
 80090d4:	080091f9 	.word	0x080091f9
 80090d8:	0800924b 	.word	0x0800924b
 80090dc:	0800926d 	.word	0x0800926d
 80090e0:	080092a9 	.word	0x080092a9
 80090e4:	080092cf 	.word	0x080092cf
 80090e8:	0800930d 	.word	0x0800930d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f103 0110 	add.w	r1, r3, #16
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	795b      	ldrb	r3, [r3, #5]
 80090f6:	461a      	mov	r2, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f943 	bl	8009384 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	761a      	strb	r2, [r3, #24]
      break;
 8009104:	e139      	b.n	800937a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	795b      	ldrb	r3, [r3, #5]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fccb 	bl	8009aa8 <USBH_LL_GetURBState>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d11e      	bne.n	800915a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7c1b      	ldrb	r3, [r3, #16]
 8009120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009124:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8adb      	ldrh	r3, [r3, #22]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800912e:	7b7b      	ldrb	r3, [r7, #13]
 8009130:	2b80      	cmp	r3, #128	; 0x80
 8009132:	d103      	bne.n	800913c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2203      	movs	r2, #3
 8009138:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800913a:	e115      	b.n	8009368 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2205      	movs	r2, #5
 8009140:	761a      	strb	r2, [r3, #24]
      break;
 8009142:	e111      	b.n	8009368 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009144:	7b7b      	ldrb	r3, [r7, #13]
 8009146:	2b80      	cmp	r3, #128	; 0x80
 8009148:	d103      	bne.n	8009152 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2209      	movs	r2, #9
 800914e:	761a      	strb	r2, [r3, #24]
      break;
 8009150:	e10a      	b.n	8009368 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2207      	movs	r2, #7
 8009156:	761a      	strb	r2, [r3, #24]
      break;
 8009158:	e106      	b.n	8009368 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b04      	cmp	r3, #4
 800915e:	d003      	beq.n	8009168 <USBH_HandleControl+0xcc>
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2b02      	cmp	r3, #2
 8009164:	f040 8100 	bne.w	8009368 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	220b      	movs	r2, #11
 800916c:	761a      	strb	r2, [r3, #24]
      break;
 800916e:	e0fb      	b.n	8009368 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6899      	ldr	r1, [r3, #8]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	899a      	ldrh	r2, [r3, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	791b      	ldrb	r3, [r3, #4]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f93a 	bl	8009402 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2204      	movs	r2, #4
 8009192:	761a      	strb	r2, [r3, #24]
      break;
 8009194:	e0f1      	b.n	800937a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc83 	bl	8009aa8 <USBH_LL_GetURBState>
 80091a2:	4603      	mov	r3, r0
 80091a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d102      	bne.n	80091b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2209      	movs	r2, #9
 80091b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	d102      	bne.n	80091be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091b8:	2303      	movs	r3, #3
 80091ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091bc:	e0d6      	b.n	800936c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	f040 80d3 	bne.w	800936c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	220b      	movs	r2, #11
 80091ca:	761a      	strb	r2, [r3, #24]
      break;
 80091cc:	e0ce      	b.n	800936c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6899      	ldr	r1, [r3, #8]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	899a      	ldrh	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	795b      	ldrb	r3, [r3, #5]
 80091da:	2001      	movs	r0, #1
 80091dc:	9000      	str	r0, [sp, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f8ea 	bl	80093b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2206      	movs	r2, #6
 80091f4:	761a      	strb	r2, [r3, #24]
      break;
 80091f6:	e0c0      	b.n	800937a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	795b      	ldrb	r3, [r3, #5]
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fc52 	bl	8009aa8 <USBH_LL_GetURBState>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d103      	bne.n	8009216 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2207      	movs	r2, #7
 8009212:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009214:	e0ac      	b.n	8009370 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	2b05      	cmp	r3, #5
 800921a:	d105      	bne.n	8009228 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	220c      	movs	r2, #12
 8009220:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009222:	2303      	movs	r3, #3
 8009224:	73fb      	strb	r3, [r7, #15]
      break;
 8009226:	e0a3      	b.n	8009370 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d103      	bne.n	8009236 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2205      	movs	r2, #5
 8009232:	761a      	strb	r2, [r3, #24]
      break;
 8009234:	e09c      	b.n	8009370 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b04      	cmp	r3, #4
 800923a:	f040 8099 	bne.w	8009370 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	220b      	movs	r2, #11
 8009242:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009244:	2302      	movs	r3, #2
 8009246:	73fb      	strb	r3, [r7, #15]
      break;
 8009248:	e092      	b.n	8009370 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	2100      	movs	r1, #0
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f8d5 	bl	8009402 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2208      	movs	r2, #8
 8009268:	761a      	strb	r2, [r3, #24]

      break;
 800926a:	e086      	b.n	800937a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fc18 	bl	8009aa8 <USBH_LL_GetURBState>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d105      	bne.n	800928e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	220d      	movs	r2, #13
 8009286:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800928c:	e072      	b.n	8009374 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b04      	cmp	r3, #4
 8009292:	d103      	bne.n	800929c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	220b      	movs	r2, #11
 8009298:	761a      	strb	r2, [r3, #24]
      break;
 800929a:	e06b      	b.n	8009374 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	2b05      	cmp	r3, #5
 80092a0:	d168      	bne.n	8009374 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80092a2:	2303      	movs	r3, #3
 80092a4:	73fb      	strb	r3, [r7, #15]
      break;
 80092a6:	e065      	b.n	8009374 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	795b      	ldrb	r3, [r3, #5]
 80092ac:	2201      	movs	r2, #1
 80092ae:	9200      	str	r2, [sp, #0]
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f87f 	bl	80093b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	220a      	movs	r2, #10
 80092ca:	761a      	strb	r2, [r3, #24]
      break;
 80092cc:	e055      	b.n	800937a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	795b      	ldrb	r3, [r3, #5]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fbe7 	bl	8009aa8 <USBH_LL_GetURBState>
 80092da:	4603      	mov	r3, r0
 80092dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d105      	bne.n	80092f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	220d      	movs	r2, #13
 80092ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092ee:	e043      	b.n	8009378 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d103      	bne.n	80092fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2209      	movs	r2, #9
 80092fa:	761a      	strb	r2, [r3, #24]
      break;
 80092fc:	e03c      	b.n	8009378 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b04      	cmp	r3, #4
 8009302:	d139      	bne.n	8009378 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	220b      	movs	r2, #11
 8009308:	761a      	strb	r2, [r3, #24]
      break;
 800930a:	e035      	b.n	8009378 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7e5b      	ldrb	r3, [r3, #25]
 8009310:	3301      	adds	r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	765a      	strb	r2, [r3, #25]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7e5b      	ldrb	r3, [r3, #25]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d806      	bhi.n	800932e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800932c:	e025      	b.n	800937a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009334:	2106      	movs	r1, #6
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	795b      	ldrb	r3, [r3, #5]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f90c 	bl	8009564 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	791b      	ldrb	r3, [r3, #4]
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f906 	bl	8009564 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800935e:	2302      	movs	r3, #2
 8009360:	73fb      	strb	r3, [r7, #15]
      break;
 8009362:	e00a      	b.n	800937a <USBH_HandleControl+0x2de>

    default:
      break;
 8009364:	bf00      	nop
 8009366:	e008      	b.n	800937a <USBH_HandleControl+0x2de>
      break;
 8009368:	bf00      	nop
 800936a:	e006      	b.n	800937a <USBH_HandleControl+0x2de>
      break;
 800936c:	bf00      	nop
 800936e:	e004      	b.n	800937a <USBH_HandleControl+0x2de>
      break;
 8009370:	bf00      	nop
 8009372:	e002      	b.n	800937a <USBH_HandleControl+0x2de>
      break;
 8009374:	bf00      	nop
 8009376:	e000      	b.n	800937a <USBH_HandleControl+0x2de>
      break;
 8009378:	bf00      	nop
  }

  return status;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	4613      	mov	r3, r2
 8009390:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009392:	79f9      	ldrb	r1, [r7, #7]
 8009394:	2300      	movs	r3, #0
 8009396:	9303      	str	r3, [sp, #12]
 8009398:	2308      	movs	r3, #8
 800939a:	9302      	str	r3, [sp, #8]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	2200      	movs	r2, #0
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fb4c 	bl	8009a46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af04      	add	r7, sp, #16
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4611      	mov	r1, r2
 80093c4:	461a      	mov	r2, r3
 80093c6:	460b      	mov	r3, r1
 80093c8:	80fb      	strh	r3, [r7, #6]
 80093ca:	4613      	mov	r3, r2
 80093cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093dc:	7979      	ldrb	r1, [r7, #5]
 80093de:	7e3b      	ldrb	r3, [r7, #24]
 80093e0:	9303      	str	r3, [sp, #12]
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	9302      	str	r3, [sp, #8]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	2301      	movs	r3, #1
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fb27 	bl	8009a46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b088      	sub	sp, #32
 8009406:	af04      	add	r7, sp, #16
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	4611      	mov	r1, r2
 800940e:	461a      	mov	r2, r3
 8009410:	460b      	mov	r3, r1
 8009412:	80fb      	strh	r3, [r7, #6]
 8009414:	4613      	mov	r3, r2
 8009416:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009418:	7979      	ldrb	r1, [r7, #5]
 800941a:	2300      	movs	r3, #0
 800941c:	9303      	str	r3, [sp, #12]
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	2301      	movs	r3, #1
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	2300      	movs	r3, #0
 800942c:	2201      	movs	r2, #1
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fb09 	bl	8009a46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009434:	2300      	movs	r3, #0

}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b088      	sub	sp, #32
 8009442:	af04      	add	r7, sp, #16
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	4611      	mov	r1, r2
 800944a:	461a      	mov	r2, r3
 800944c:	460b      	mov	r3, r1
 800944e:	80fb      	strh	r3, [r7, #6]
 8009450:	4613      	mov	r3, r2
 8009452:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009462:	7979      	ldrb	r1, [r7, #5]
 8009464:	7e3b      	ldrb	r3, [r7, #24]
 8009466:	9303      	str	r3, [sp, #12]
 8009468:	88fb      	ldrh	r3, [r7, #6]
 800946a:	9302      	str	r3, [sp, #8]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	2301      	movs	r3, #1
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	2302      	movs	r3, #2
 8009476:	2200      	movs	r2, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fae4 	bl	8009a46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af04      	add	r7, sp, #16
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4611      	mov	r1, r2
 8009494:	461a      	mov	r2, r3
 8009496:	460b      	mov	r3, r1
 8009498:	80fb      	strh	r3, [r7, #6]
 800949a:	4613      	mov	r3, r2
 800949c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800949e:	7979      	ldrb	r1, [r7, #5]
 80094a0:	2300      	movs	r3, #0
 80094a2:	9303      	str	r3, [sp, #12]
 80094a4:	88fb      	ldrh	r3, [r7, #6]
 80094a6:	9302      	str	r3, [sp, #8]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	2301      	movs	r3, #1
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	2302      	movs	r3, #2
 80094b2:	2201      	movs	r2, #1
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 fac6 	bl	8009a46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af04      	add	r7, sp, #16
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	4608      	mov	r0, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	461a      	mov	r2, r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	70fb      	strb	r3, [r7, #3]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70bb      	strb	r3, [r7, #2]
 80094da:	4613      	mov	r3, r2
 80094dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80094de:	7878      	ldrb	r0, [r7, #1]
 80094e0:	78ba      	ldrb	r2, [r7, #2]
 80094e2:	78f9      	ldrb	r1, [r7, #3]
 80094e4:	8b3b      	ldrh	r3, [r7, #24]
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	7d3b      	ldrb	r3, [r7, #20]
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	7c3b      	ldrb	r3, [r7, #16]
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	4603      	mov	r3, r0
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa59 	bl	80099aa <USBH_LL_OpenPipe>

  return USBH_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b082      	sub	sp, #8
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa78 	bl	8009a08 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f836 	bl	80095a0 <USBH_GetFreePipe>
 8009534:	4603      	mov	r3, r0
 8009536:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009538:	89fb      	ldrh	r3, [r7, #14]
 800953a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800953e:	4293      	cmp	r3, r2
 8009540:	d00a      	beq.n	8009558 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	89fb      	ldrh	r3, [r7, #14]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	33e0      	adds	r3, #224	; 0xe0
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009558:	89fb      	ldrh	r3, [r7, #14]
 800955a:	b2db      	uxtb	r3, r3
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	2b0f      	cmp	r3, #15
 8009574:	d80d      	bhi.n	8009592 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	33e0      	adds	r3, #224	; 0xe0
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009588:	6879      	ldr	r1, [r7, #4]
 800958a:	33e0      	adds	r3, #224	; 0xe0
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
 80095b0:	e00f      	b.n	80095d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	33e0      	adds	r3, #224	; 0xe0
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d102      	bne.n	80095cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	e007      	b.n	80095dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	3301      	adds	r3, #1
 80095d0:	73fb      	strb	r3, [r7, #15]
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d9ec      	bls.n	80095b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80095d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80095ec:	2200      	movs	r2, #0
 80095ee:	490e      	ldr	r1, [pc, #56]	; (8009628 <MX_USB_HOST_Init+0x40>)
 80095f0:	480e      	ldr	r0, [pc, #56]	; (800962c <MX_USB_HOST_Init+0x44>)
 80095f2:	f7fe fba7 	bl	8007d44 <USBH_Init>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80095fc:	f7f7 fc20 	bl	8000e40 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8009600:	490b      	ldr	r1, [pc, #44]	; (8009630 <MX_USB_HOST_Init+0x48>)
 8009602:	480a      	ldr	r0, [pc, #40]	; (800962c <MX_USB_HOST_Init+0x44>)
 8009604:	f7fe fc2c 	bl	8007e60 <USBH_RegisterClass>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800960e:	f7f7 fc17 	bl	8000e40 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8009612:	4806      	ldr	r0, [pc, #24]	; (800962c <MX_USB_HOST_Init+0x44>)
 8009614:	f7fe fcb0 	bl	8007f78 <USBH_Start>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800961e:	f7f7 fc0f 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009622:	bf00      	nop
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	08009649 	.word	0x08009649
 800962c:	200003a0 	.word	0x200003a0
 8009630:	2000000c 	.word	0x2000000c

08009634 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009638:	4802      	ldr	r0, [pc, #8]	; (8009644 <MX_USB_HOST_Process+0x10>)
 800963a:	f7fe fcad 	bl	8007f98 <USBH_Process>
}
 800963e:	bf00      	nop
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	200003a0 	.word	0x200003a0

08009648 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	3b01      	subs	r3, #1
 8009658:	2b04      	cmp	r3, #4
 800965a:	d819      	bhi.n	8009690 <USBH_UserProcess+0x48>
 800965c:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USBH_UserProcess+0x1c>)
 800965e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009662:	bf00      	nop
 8009664:	08009691 	.word	0x08009691
 8009668:	08009681 	.word	0x08009681
 800966c:	08009691 	.word	0x08009691
 8009670:	08009689 	.word	0x08009689
 8009674:	08009679 	.word	0x08009679
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009678:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <USBH_UserProcess+0x58>)
 800967a:	2203      	movs	r2, #3
 800967c:	701a      	strb	r2, [r3, #0]
  break;
 800967e:	e008      	b.n	8009692 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <USBH_UserProcess+0x58>)
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
  break;
 8009686:	e004      	b.n	8009692 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <USBH_UserProcess+0x58>)
 800968a:	2201      	movs	r2, #1
 800968c:	701a      	strb	r2, [r3, #0]
  break;
 800968e:	e000      	b.n	8009692 <USBH_UserProcess+0x4a>

  default:
  break;
 8009690:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	20000778 	.word	0x20000778

080096a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	; 0x28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096ac:	f107 0314 	add.w	r3, r7, #20
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	605a      	str	r2, [r3, #4]
 80096b6:	609a      	str	r2, [r3, #8]
 80096b8:	60da      	str	r2, [r3, #12]
 80096ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a24      	ldr	r2, [pc, #144]	; (8009754 <HAL_HCD_MspInit+0xb0>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d141      	bne.n	800974a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096c6:	2300      	movs	r3, #0
 80096c8:	613b      	str	r3, [r7, #16]
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	4a22      	ldr	r2, [pc, #136]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 80096d0:	f043 0302 	orr.w	r3, r3, #2
 80096d4:	6313      	str	r3, [r2, #48]	; 0x30
 80096d6:	4b20      	ldr	r3, [pc, #128]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	613b      	str	r3, [r7, #16]
 80096e0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80096e2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80096e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e8:	2302      	movs	r3, #2
 80096ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096f0:	2300      	movs	r3, #0
 80096f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80096f4:	230c      	movs	r3, #12
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096f8:	f107 0314 	add.w	r3, r7, #20
 80096fc:	4619      	mov	r1, r3
 80096fe:	4817      	ldr	r0, [pc, #92]	; (800975c <HAL_HCD_MspInit+0xb8>)
 8009700:	f7f8 fc56 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8009704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800970a:	2300      	movs	r3, #0
 800970c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970e:	2300      	movs	r3, #0
 8009710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	4619      	mov	r1, r3
 8009718:	4810      	ldr	r0, [pc, #64]	; (800975c <HAL_HCD_MspInit+0xb8>)
 800971a:	f7f8 fc49 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	4a0c      	ldr	r2, [pc, #48]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 8009728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800972c:	6313      	str	r3, [r2, #48]	; 0x30
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <HAL_HCD_MspInit+0xb4>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800973a:	2200      	movs	r2, #0
 800973c:	2100      	movs	r1, #0
 800973e:	204d      	movs	r0, #77	; 0x4d
 8009740:	f7f8 fa04 	bl	8001b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009744:	204d      	movs	r0, #77	; 0x4d
 8009746:	f7f8 fa1d 	bl	8001b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800974a:	bf00      	nop
 800974c:	3728      	adds	r7, #40	; 0x28
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40040000 	.word	0x40040000
 8009758:	40023800 	.word	0x40023800
 800975c:	40020400 	.word	0x40020400

08009760 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fff1 	bl	8008756 <USBH_LL_IncTimer>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff f829 	bl	80087e2 <USBH_LL_Connect>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff f832 	bl	8008810 <USBH_LL_Disconnect>
}
 80097ac:	bf00      	nop
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	4613      	mov	r3, r2
 80097c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe ffe3 	bl	80087aa <USBH_LL_PortEnabled>
}
 80097e4:	bf00      	nop
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe ffe3 	bl	80087c6 <USBH_LL_PortDisabled>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009816:	2b00      	cmp	r3, #0
 8009818:	d132      	bne.n	8009880 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800981a:	4a1c      	ldr	r2, [pc, #112]	; (800988c <USBH_LL_Init+0x84>)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a19      	ldr	r2, [pc, #100]	; (800988c <USBH_LL_Init+0x84>)
 8009826:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800982a:	4b18      	ldr	r3, [pc, #96]	; (800988c <USBH_LL_Init+0x84>)
 800982c:	4a18      	ldr	r2, [pc, #96]	; (8009890 <USBH_LL_Init+0x88>)
 800982e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8009830:	4b16      	ldr	r3, [pc, #88]	; (800988c <USBH_LL_Init+0x84>)
 8009832:	220c      	movs	r2, #12
 8009834:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8009836:	4b15      	ldr	r3, [pc, #84]	; (800988c <USBH_LL_Init+0x84>)
 8009838:	2201      	movs	r2, #1
 800983a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800983c:	4b13      	ldr	r3, [pc, #76]	; (800988c <USBH_LL_Init+0x84>)
 800983e:	2200      	movs	r2, #0
 8009840:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009842:	4b12      	ldr	r3, [pc, #72]	; (800988c <USBH_LL_Init+0x84>)
 8009844:	2202      	movs	r2, #2
 8009846:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009848:	4b10      	ldr	r3, [pc, #64]	; (800988c <USBH_LL_Init+0x84>)
 800984a:	2200      	movs	r2, #0
 800984c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800984e:	4b0f      	ldr	r3, [pc, #60]	; (800988c <USBH_LL_Init+0x84>)
 8009850:	2200      	movs	r2, #0
 8009852:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009854:	4b0d      	ldr	r3, [pc, #52]	; (800988c <USBH_LL_Init+0x84>)
 8009856:	2200      	movs	r2, #0
 8009858:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <USBH_LL_Init+0x84>)
 800985c:	2200      	movs	r2, #0
 800985e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8009860:	480a      	ldr	r0, [pc, #40]	; (800988c <USBH_LL_Init+0x84>)
 8009862:	f7f8 fd6a 	bl	800233a <HAL_HCD_Init>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800986c:	f7f7 fae8 	bl	8000e40 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009870:	4806      	ldr	r0, [pc, #24]	; (800988c <USBH_LL_Init+0x84>)
 8009872:	f7f9 f94e 	bl	8002b12 <HAL_HCD_GetCurrentFrame>
 8009876:	4603      	mov	r3, r0
 8009878:	4619      	mov	r1, r3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7fe ff5c 	bl	8008738 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	2000077c 	.word	0x2000077c
 8009890:	40040000 	.word	0x40040000

08009894 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f9 f8bb 	bl	8002a26 <HAL_HCD_Start>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f95c 	bl	8009b74 <USBH_Get_USB_Status>
 80098bc:	4603      	mov	r3, r0
 80098be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f9 f8c3 	bl	8002a6c <HAL_HCD_Stop>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 f941 	bl	8009b74 <USBH_Get_USB_Status>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3710      	adds	r7, #16
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009908:	2301      	movs	r3, #1
 800990a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009912:	4618      	mov	r0, r3
 8009914:	f7f9 f90b 	bl	8002b2e <HAL_HCD_GetCurrentSpeed>
 8009918:	4603      	mov	r3, r0
 800991a:	2b02      	cmp	r3, #2
 800991c:	d00c      	beq.n	8009938 <USBH_LL_GetSpeed+0x38>
 800991e:	2b02      	cmp	r3, #2
 8009920:	d80d      	bhi.n	800993e <USBH_LL_GetSpeed+0x3e>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <USBH_LL_GetSpeed+0x2c>
 8009926:	2b01      	cmp	r3, #1
 8009928:	d003      	beq.n	8009932 <USBH_LL_GetSpeed+0x32>
 800992a:	e008      	b.n	800993e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
    break;
 8009930:	e008      	b.n	8009944 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
    break;
 8009936:	e005      	b.n	8009944 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009938:	2302      	movs	r3, #2
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e002      	b.n	8009944 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800993e:	2301      	movs	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	bf00      	nop
  }
  return  speed;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009964:	4618      	mov	r0, r3
 8009966:	f7f9 f89e 	bl	8002aa6 <HAL_HCD_ResetPort>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f8ff 	bl	8009b74 <USBH_Get_USB_Status>
 8009976:	4603      	mov	r3, r0
 8009978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997a:	7bbb      	ldrb	r3, [r7, #14]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7f9 f8a5 	bl	8002aea <HAL_HCD_HC_GetXferCount>
 80099a0:	4603      	mov	r3, r0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099aa:	b590      	push	{r4, r7, lr}
 80099ac:	b089      	sub	sp, #36	; 0x24
 80099ae:	af04      	add	r7, sp, #16
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	4608      	mov	r0, r1
 80099b4:	4611      	mov	r1, r2
 80099b6:	461a      	mov	r2, r3
 80099b8:	4603      	mov	r3, r0
 80099ba:	70fb      	strb	r3, [r7, #3]
 80099bc:	460b      	mov	r3, r1
 80099be:	70bb      	strb	r3, [r7, #2]
 80099c0:	4613      	mov	r3, r2
 80099c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80099d2:	787c      	ldrb	r4, [r7, #1]
 80099d4:	78ba      	ldrb	r2, [r7, #2]
 80099d6:	78f9      	ldrb	r1, [r7, #3]
 80099d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099da:	9302      	str	r3, [sp, #8]
 80099dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4623      	mov	r3, r4
 80099ea:	f7f8 fd08 	bl	80023fe <HAL_HCD_HC_Init>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f8bd 	bl	8009b74 <USBH_Get_USB_Status>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}

08009a08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a22:	78fa      	ldrb	r2, [r7, #3]
 8009a24:	4611      	mov	r1, r2
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7f8 fd78 	bl	800251c <HAL_HCD_HC_Halt>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f89e 	bl	8009b74 <USBH_Get_USB_Status>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a46:	b590      	push	{r4, r7, lr}
 8009a48:	b089      	sub	sp, #36	; 0x24
 8009a4a:	af04      	add	r7, sp, #16
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4611      	mov	r1, r2
 8009a52:	461a      	mov	r2, r3
 8009a54:	4603      	mov	r3, r0
 8009a56:	70fb      	strb	r3, [r7, #3]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	70bb      	strb	r3, [r7, #2]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a6e:	787c      	ldrb	r4, [r7, #1]
 8009a70:	78ba      	ldrb	r2, [r7, #2]
 8009a72:	78f9      	ldrb	r1, [r7, #3]
 8009a74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4623      	mov	r3, r4
 8009a8a:	f7f8 fd6b 	bl	8002564 <HAL_HCD_HC_SubmitRequest>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 f86d 	bl	8009b74 <USBH_Get_USB_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd90      	pop	{r4, r7, pc}

08009aa8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f8 ffff 	bl	8002ac2 <HAL_HCD_HC_GetURBState>
 8009ac4:	4603      	mov	r3, r0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d103      	bne.n	8009aec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009ae4:	78fb      	ldrb	r3, [r7, #3]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f870 	bl	8009bcc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009aec:	20c8      	movs	r0, #200	; 0xc8
 8009aee:	f7f7 ff51 	bl	8001994 <HAL_Delay>
  return USBH_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	212c      	movs	r1, #44	; 0x2c
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	333b      	adds	r3, #59	; 0x3b
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	212c      	movs	r1, #44	; 0x2c
 8009b2e:	fb01 f303 	mul.w	r3, r1, r3
 8009b32:	4413      	add	r3, r2
 8009b34:	3354      	adds	r3, #84	; 0x54
 8009b36:	78ba      	ldrb	r2, [r7, #2]
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	e008      	b.n	8009b4e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	212c      	movs	r1, #44	; 0x2c
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	3355      	adds	r3, #85	; 0x55
 8009b4a:	78ba      	ldrb	r2, [r7, #2]
 8009b4c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7f7 ff15 	bl	8001994 <HAL_Delay>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d817      	bhi.n	8009bb8 <USBH_Get_USB_Status+0x44>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <USBH_Get_USB_Status+0x1c>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009ba7 	.word	0x08009ba7
 8009b98:	08009bad 	.word	0x08009bad
 8009b9c:	08009bb3 	.word	0x08009bb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba4:	e00b      	b.n	8009bbe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8009baa:	e008      	b.n	8009bbe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009bac:	2301      	movs	r3, #1
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	e005      	b.n	8009bbe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb6:	e002      	b.n	8009bbe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbc:	bf00      	nop
  }
  return usb_status;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009be0:	2301      	movs	r3, #1
 8009be2:	73fb      	strb	r3, [r7, #15]
 8009be4:	e001      	b.n	8009bea <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	461a      	mov	r2, r3
 8009bee:	2110      	movs	r1, #16
 8009bf0:	4803      	ldr	r0, [pc, #12]	; (8009c00 <MX_DriverVbusHS+0x34>)
 8009bf2:	f7f8 fb89 	bl	8002308 <HAL_GPIO_WritePin>
}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	40020800 	.word	0x40020800

08009c04 <__errno>:
 8009c04:	4b01      	ldr	r3, [pc, #4]	; (8009c0c <__errno+0x8>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	2000002c 	.word	0x2000002c

08009c10 <__libc_init_array>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4d0d      	ldr	r5, [pc, #52]	; (8009c48 <__libc_init_array+0x38>)
 8009c14:	4c0d      	ldr	r4, [pc, #52]	; (8009c4c <__libc_init_array+0x3c>)
 8009c16:	1b64      	subs	r4, r4, r5
 8009c18:	10a4      	asrs	r4, r4, #2
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	d109      	bne.n	8009c34 <__libc_init_array+0x24>
 8009c20:	4d0b      	ldr	r5, [pc, #44]	; (8009c50 <__libc_init_array+0x40>)
 8009c22:	4c0c      	ldr	r4, [pc, #48]	; (8009c54 <__libc_init_array+0x44>)
 8009c24:	f001 f834 	bl	800ac90 <_init>
 8009c28:	1b64      	subs	r4, r4, r5
 8009c2a:	10a4      	asrs	r4, r4, #2
 8009c2c:	2600      	movs	r6, #0
 8009c2e:	42a6      	cmp	r6, r4
 8009c30:	d105      	bne.n	8009c3e <__libc_init_array+0x2e>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c38:	4798      	blx	r3
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	e7ee      	b.n	8009c1c <__libc_init_array+0xc>
 8009c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c42:	4798      	blx	r3
 8009c44:	3601      	adds	r6, #1
 8009c46:	e7f2      	b.n	8009c2e <__libc_init_array+0x1e>
 8009c48:	0800ae50 	.word	0x0800ae50
 8009c4c:	0800ae50 	.word	0x0800ae50
 8009c50:	0800ae50 	.word	0x0800ae50
 8009c54:	0800ae54 	.word	0x0800ae54

08009c58 <malloc>:
 8009c58:	4b02      	ldr	r3, [pc, #8]	; (8009c64 <malloc+0xc>)
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	6818      	ldr	r0, [r3, #0]
 8009c5e:	f000 b87f 	b.w	8009d60 <_malloc_r>
 8009c62:	bf00      	nop
 8009c64:	2000002c 	.word	0x2000002c

08009c68 <free>:
 8009c68:	4b02      	ldr	r3, [pc, #8]	; (8009c74 <free+0xc>)
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	6818      	ldr	r0, [r3, #0]
 8009c6e:	f000 b80b 	b.w	8009c88 <_free_r>
 8009c72:	bf00      	nop
 8009c74:	2000002c 	.word	0x2000002c

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <_free_r>:
 8009c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d044      	beq.n	8009d18 <_free_r+0x90>
 8009c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c92:	9001      	str	r0, [sp, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9a:	bfb8      	it	lt
 8009c9c:	18e4      	addlt	r4, r4, r3
 8009c9e:	f000 fc51 	bl	800a544 <__malloc_lock>
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	; (8009d1c <_free_r+0x94>)
 8009ca4:	9801      	ldr	r0, [sp, #4]
 8009ca6:	6813      	ldr	r3, [r2, #0]
 8009ca8:	b933      	cbnz	r3, 8009cb8 <_free_r+0x30>
 8009caa:	6063      	str	r3, [r4, #4]
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cb4:	f000 bc4c 	b.w	800a550 <__malloc_unlock>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d908      	bls.n	8009cce <_free_r+0x46>
 8009cbc:	6825      	ldr	r5, [r4, #0]
 8009cbe:	1961      	adds	r1, r4, r5
 8009cc0:	428b      	cmp	r3, r1
 8009cc2:	bf01      	itttt	eq
 8009cc4:	6819      	ldreq	r1, [r3, #0]
 8009cc6:	685b      	ldreq	r3, [r3, #4]
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	e7ed      	b.n	8009caa <_free_r+0x22>
 8009cce:	461a      	mov	r2, r3
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	b10b      	cbz	r3, 8009cd8 <_free_r+0x50>
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d9fa      	bls.n	8009cce <_free_r+0x46>
 8009cd8:	6811      	ldr	r1, [r2, #0]
 8009cda:	1855      	adds	r5, r2, r1
 8009cdc:	42a5      	cmp	r5, r4
 8009cde:	d10b      	bne.n	8009cf8 <_free_r+0x70>
 8009ce0:	6824      	ldr	r4, [r4, #0]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	1854      	adds	r4, r2, r1
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	6011      	str	r1, [r2, #0]
 8009cea:	d1e0      	bne.n	8009cae <_free_r+0x26>
 8009cec:	681c      	ldr	r4, [r3, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6053      	str	r3, [r2, #4]
 8009cf2:	4421      	add	r1, r4
 8009cf4:	6011      	str	r1, [r2, #0]
 8009cf6:	e7da      	b.n	8009cae <_free_r+0x26>
 8009cf8:	d902      	bls.n	8009d00 <_free_r+0x78>
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	e7d6      	b.n	8009cae <_free_r+0x26>
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1961      	adds	r1, r4, r5
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf04      	itt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	bf04      	itt	eq
 8009d10:	1949      	addeq	r1, r1, r5
 8009d12:	6021      	streq	r1, [r4, #0]
 8009d14:	6054      	str	r4, [r2, #4]
 8009d16:	e7ca      	b.n	8009cae <_free_r+0x26>
 8009d18:	b003      	add	sp, #12
 8009d1a:	bd30      	pop	{r4, r5, pc}
 8009d1c:	20000a80 	.word	0x20000a80

08009d20 <sbrk_aligned>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0e      	ldr	r6, [pc, #56]	; (8009d5c <sbrk_aligned+0x3c>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	6831      	ldr	r1, [r6, #0]
 8009d28:	4605      	mov	r5, r0
 8009d2a:	b911      	cbnz	r1, 8009d32 <sbrk_aligned+0x12>
 8009d2c:	f000 f91a 	bl	8009f64 <_sbrk_r>
 8009d30:	6030      	str	r0, [r6, #0]
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 f915 	bl	8009f64 <_sbrk_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d00a      	beq.n	8009d54 <sbrk_aligned+0x34>
 8009d3e:	1cc4      	adds	r4, r0, #3
 8009d40:	f024 0403 	bic.w	r4, r4, #3
 8009d44:	42a0      	cmp	r0, r4
 8009d46:	d007      	beq.n	8009d58 <sbrk_aligned+0x38>
 8009d48:	1a21      	subs	r1, r4, r0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f90a 	bl	8009f64 <_sbrk_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d101      	bne.n	8009d58 <sbrk_aligned+0x38>
 8009d54:	f04f 34ff 	mov.w	r4, #4294967295
 8009d58:	4620      	mov	r0, r4
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	20000a84 	.word	0x20000a84

08009d60 <_malloc_r>:
 8009d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d64:	1ccd      	adds	r5, r1, #3
 8009d66:	f025 0503 	bic.w	r5, r5, #3
 8009d6a:	3508      	adds	r5, #8
 8009d6c:	2d0c      	cmp	r5, #12
 8009d6e:	bf38      	it	cc
 8009d70:	250c      	movcc	r5, #12
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	4607      	mov	r7, r0
 8009d76:	db01      	blt.n	8009d7c <_malloc_r+0x1c>
 8009d78:	42a9      	cmp	r1, r5
 8009d7a:	d905      	bls.n	8009d88 <_malloc_r+0x28>
 8009d7c:	230c      	movs	r3, #12
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	2600      	movs	r6, #0
 8009d82:	4630      	mov	r0, r6
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	4e2e      	ldr	r6, [pc, #184]	; (8009e44 <_malloc_r+0xe4>)
 8009d8a:	f000 fbdb 	bl	800a544 <__malloc_lock>
 8009d8e:	6833      	ldr	r3, [r6, #0]
 8009d90:	461c      	mov	r4, r3
 8009d92:	bb34      	cbnz	r4, 8009de2 <_malloc_r+0x82>
 8009d94:	4629      	mov	r1, r5
 8009d96:	4638      	mov	r0, r7
 8009d98:	f7ff ffc2 	bl	8009d20 <sbrk_aligned>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	4604      	mov	r4, r0
 8009da0:	d14d      	bne.n	8009e3e <_malloc_r+0xde>
 8009da2:	6834      	ldr	r4, [r6, #0]
 8009da4:	4626      	mov	r6, r4
 8009da6:	2e00      	cmp	r6, #0
 8009da8:	d140      	bne.n	8009e2c <_malloc_r+0xcc>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	4631      	mov	r1, r6
 8009dae:	4638      	mov	r0, r7
 8009db0:	eb04 0803 	add.w	r8, r4, r3
 8009db4:	f000 f8d6 	bl	8009f64 <_sbrk_r>
 8009db8:	4580      	cmp	r8, r0
 8009dba:	d13a      	bne.n	8009e32 <_malloc_r+0xd2>
 8009dbc:	6821      	ldr	r1, [r4, #0]
 8009dbe:	3503      	adds	r5, #3
 8009dc0:	1a6d      	subs	r5, r5, r1
 8009dc2:	f025 0503 	bic.w	r5, r5, #3
 8009dc6:	3508      	adds	r5, #8
 8009dc8:	2d0c      	cmp	r5, #12
 8009dca:	bf38      	it	cc
 8009dcc:	250c      	movcc	r5, #12
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7ff ffa5 	bl	8009d20 <sbrk_aligned>
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d02b      	beq.n	8009e32 <_malloc_r+0xd2>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	442b      	add	r3, r5
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	e00e      	b.n	8009e00 <_malloc_r+0xa0>
 8009de2:	6822      	ldr	r2, [r4, #0]
 8009de4:	1b52      	subs	r2, r2, r5
 8009de6:	d41e      	bmi.n	8009e26 <_malloc_r+0xc6>
 8009de8:	2a0b      	cmp	r2, #11
 8009dea:	d916      	bls.n	8009e1a <_malloc_r+0xba>
 8009dec:	1961      	adds	r1, r4, r5
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6025      	str	r5, [r4, #0]
 8009df2:	bf18      	it	ne
 8009df4:	6059      	strne	r1, [r3, #4]
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	bf08      	it	eq
 8009dfa:	6031      	streq	r1, [r6, #0]
 8009dfc:	5162      	str	r2, [r4, r5]
 8009dfe:	604b      	str	r3, [r1, #4]
 8009e00:	4638      	mov	r0, r7
 8009e02:	f104 060b 	add.w	r6, r4, #11
 8009e06:	f000 fba3 	bl	800a550 <__malloc_unlock>
 8009e0a:	f026 0607 	bic.w	r6, r6, #7
 8009e0e:	1d23      	adds	r3, r4, #4
 8009e10:	1af2      	subs	r2, r6, r3
 8009e12:	d0b6      	beq.n	8009d82 <_malloc_r+0x22>
 8009e14:	1b9b      	subs	r3, r3, r6
 8009e16:	50a3      	str	r3, [r4, r2]
 8009e18:	e7b3      	b.n	8009d82 <_malloc_r+0x22>
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bf0c      	ite	eq
 8009e20:	6032      	streq	r2, [r6, #0]
 8009e22:	605a      	strne	r2, [r3, #4]
 8009e24:	e7ec      	b.n	8009e00 <_malloc_r+0xa0>
 8009e26:	4623      	mov	r3, r4
 8009e28:	6864      	ldr	r4, [r4, #4]
 8009e2a:	e7b2      	b.n	8009d92 <_malloc_r+0x32>
 8009e2c:	4634      	mov	r4, r6
 8009e2e:	6876      	ldr	r6, [r6, #4]
 8009e30:	e7b9      	b.n	8009da6 <_malloc_r+0x46>
 8009e32:	230c      	movs	r3, #12
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	4638      	mov	r0, r7
 8009e38:	f000 fb8a 	bl	800a550 <__malloc_unlock>
 8009e3c:	e7a1      	b.n	8009d82 <_malloc_r+0x22>
 8009e3e:	6025      	str	r5, [r4, #0]
 8009e40:	e7de      	b.n	8009e00 <_malloc_r+0xa0>
 8009e42:	bf00      	nop
 8009e44:	20000a80 	.word	0x20000a80

08009e48 <iprintf>:
 8009e48:	b40f      	push	{r0, r1, r2, r3}
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <iprintf+0x2c>)
 8009e4c:	b513      	push	{r0, r1, r4, lr}
 8009e4e:	681c      	ldr	r4, [r3, #0]
 8009e50:	b124      	cbz	r4, 8009e5c <iprintf+0x14>
 8009e52:	69a3      	ldr	r3, [r4, #24]
 8009e54:	b913      	cbnz	r3, 8009e5c <iprintf+0x14>
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fa6e 	bl	800a338 <__sinit>
 8009e5c:	ab05      	add	r3, sp, #20
 8009e5e:	9a04      	ldr	r2, [sp, #16]
 8009e60:	68a1      	ldr	r1, [r4, #8]
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fba3 	bl	800a5b0 <_vfiprintf_r>
 8009e6a:	b002      	add	sp, #8
 8009e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e70:	b004      	add	sp, #16
 8009e72:	4770      	bx	lr
 8009e74:	2000002c 	.word	0x2000002c

08009e78 <_puts_r>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	b118      	cbz	r0, 8009e88 <_puts_r+0x10>
 8009e80:	6983      	ldr	r3, [r0, #24]
 8009e82:	b90b      	cbnz	r3, 8009e88 <_puts_r+0x10>
 8009e84:	f000 fa58 	bl	800a338 <__sinit>
 8009e88:	69ab      	ldr	r3, [r5, #24]
 8009e8a:	68ac      	ldr	r4, [r5, #8]
 8009e8c:	b913      	cbnz	r3, 8009e94 <_puts_r+0x1c>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 fa52 	bl	800a338 <__sinit>
 8009e94:	4b2c      	ldr	r3, [pc, #176]	; (8009f48 <_puts_r+0xd0>)
 8009e96:	429c      	cmp	r4, r3
 8009e98:	d120      	bne.n	8009edc <_puts_r+0x64>
 8009e9a:	686c      	ldr	r4, [r5, #4]
 8009e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e9e:	07db      	lsls	r3, r3, #31
 8009ea0:	d405      	bmi.n	8009eae <_puts_r+0x36>
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	0598      	lsls	r0, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_puts_r+0x36>
 8009ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eaa:	f000 fae3 	bl	800a474 <__retarget_lock_acquire_recursive>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	0719      	lsls	r1, r3, #28
 8009eb2:	d51d      	bpl.n	8009ef0 <_puts_r+0x78>
 8009eb4:	6923      	ldr	r3, [r4, #16]
 8009eb6:	b1db      	cbz	r3, 8009ef0 <_puts_r+0x78>
 8009eb8:	3e01      	subs	r6, #1
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	bb39      	cbnz	r1, 8009f16 <_puts_r+0x9e>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da38      	bge.n	8009f3c <_puts_r+0xc4>
 8009eca:	4622      	mov	r2, r4
 8009ecc:	210a      	movs	r1, #10
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 f858 	bl	8009f84 <__swbuf_r>
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d011      	beq.n	8009efc <_puts_r+0x84>
 8009ed8:	250a      	movs	r5, #10
 8009eda:	e011      	b.n	8009f00 <_puts_r+0x88>
 8009edc:	4b1b      	ldr	r3, [pc, #108]	; (8009f4c <_puts_r+0xd4>)
 8009ede:	429c      	cmp	r4, r3
 8009ee0:	d101      	bne.n	8009ee6 <_puts_r+0x6e>
 8009ee2:	68ac      	ldr	r4, [r5, #8]
 8009ee4:	e7da      	b.n	8009e9c <_puts_r+0x24>
 8009ee6:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <_puts_r+0xd8>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	bf08      	it	eq
 8009eec:	68ec      	ldreq	r4, [r5, #12]
 8009eee:	e7d5      	b.n	8009e9c <_puts_r+0x24>
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f000 f898 	bl	800a028 <__swsetup_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d0dd      	beq.n	8009eb8 <_puts_r+0x40>
 8009efc:	f04f 35ff 	mov.w	r5, #4294967295
 8009f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f02:	07da      	lsls	r2, r3, #31
 8009f04:	d405      	bmi.n	8009f12 <_puts_r+0x9a>
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	059b      	lsls	r3, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <_puts_r+0x9a>
 8009f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0e:	f000 fab2 	bl	800a476 <__retarget_lock_release_recursive>
 8009f12:	4628      	mov	r0, r5
 8009f14:	bd70      	pop	{r4, r5, r6, pc}
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da04      	bge.n	8009f24 <_puts_r+0xac>
 8009f1a:	69a2      	ldr	r2, [r4, #24]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	dc06      	bgt.n	8009f2e <_puts_r+0xb6>
 8009f20:	290a      	cmp	r1, #10
 8009f22:	d004      	beq.n	8009f2e <_puts_r+0xb6>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	6022      	str	r2, [r4, #0]
 8009f2a:	7019      	strb	r1, [r3, #0]
 8009f2c:	e7c5      	b.n	8009eba <_puts_r+0x42>
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 f827 	bl	8009f84 <__swbuf_r>
 8009f36:	3001      	adds	r0, #1
 8009f38:	d1bf      	bne.n	8009eba <_puts_r+0x42>
 8009f3a:	e7df      	b.n	8009efc <_puts_r+0x84>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	250a      	movs	r5, #10
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	6022      	str	r2, [r4, #0]
 8009f44:	701d      	strb	r5, [r3, #0]
 8009f46:	e7db      	b.n	8009f00 <_puts_r+0x88>
 8009f48:	0800add4 	.word	0x0800add4
 8009f4c:	0800adf4 	.word	0x0800adf4
 8009f50:	0800adb4 	.word	0x0800adb4

08009f54 <puts>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <puts+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f7ff bf8d 	b.w	8009e78 <_puts_r>
 8009f5e:	bf00      	nop
 8009f60:	2000002c 	.word	0x2000002c

08009f64 <_sbrk_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d06      	ldr	r5, [pc, #24]	; (8009f80 <_sbrk_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f7 fc5c 	bl	800182c <_sbrk>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_sbrk_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_sbrk_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20000a8c 	.word	0x20000a8c

08009f84 <__swbuf_r>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	460e      	mov	r6, r1
 8009f88:	4614      	mov	r4, r2
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b118      	cbz	r0, 8009f96 <__swbuf_r+0x12>
 8009f8e:	6983      	ldr	r3, [r0, #24]
 8009f90:	b90b      	cbnz	r3, 8009f96 <__swbuf_r+0x12>
 8009f92:	f000 f9d1 	bl	800a338 <__sinit>
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <__swbuf_r+0x98>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	d12b      	bne.n	8009ff4 <__swbuf_r+0x70>
 8009f9c:	686c      	ldr	r4, [r5, #4]
 8009f9e:	69a3      	ldr	r3, [r4, #24]
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	071a      	lsls	r2, r3, #28
 8009fa6:	d52f      	bpl.n	800a008 <__swbuf_r+0x84>
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	b36b      	cbz	r3, 800a008 <__swbuf_r+0x84>
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	6820      	ldr	r0, [r4, #0]
 8009fb0:	1ac0      	subs	r0, r0, r3
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	b2f6      	uxtb	r6, r6
 8009fb6:	4283      	cmp	r3, r0
 8009fb8:	4637      	mov	r7, r6
 8009fba:	dc04      	bgt.n	8009fc6 <__swbuf_r+0x42>
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 f926 	bl	800a210 <_fflush_r>
 8009fc4:	bb30      	cbnz	r0, 800a014 <__swbuf_r+0x90>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	60a3      	str	r3, [r4, #8]
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	6022      	str	r2, [r4, #0]
 8009fd2:	701e      	strb	r6, [r3, #0]
 8009fd4:	6963      	ldr	r3, [r4, #20]
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	d004      	beq.n	8009fe6 <__swbuf_r+0x62>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	07db      	lsls	r3, r3, #31
 8009fe0:	d506      	bpl.n	8009ff0 <__swbuf_r+0x6c>
 8009fe2:	2e0a      	cmp	r6, #10
 8009fe4:	d104      	bne.n	8009ff0 <__swbuf_r+0x6c>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 f911 	bl	800a210 <_fflush_r>
 8009fee:	b988      	cbnz	r0, 800a014 <__swbuf_r+0x90>
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <__swbuf_r+0x9c>)
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	d101      	bne.n	8009ffe <__swbuf_r+0x7a>
 8009ffa:	68ac      	ldr	r4, [r5, #8]
 8009ffc:	e7cf      	b.n	8009f9e <__swbuf_r+0x1a>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <__swbuf_r+0xa0>)
 800a000:	429c      	cmp	r4, r3
 800a002:	bf08      	it	eq
 800a004:	68ec      	ldreq	r4, [r5, #12]
 800a006:	e7ca      	b.n	8009f9e <__swbuf_r+0x1a>
 800a008:	4621      	mov	r1, r4
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f80c 	bl	800a028 <__swsetup_r>
 800a010:	2800      	cmp	r0, #0
 800a012:	d0cb      	beq.n	8009fac <__swbuf_r+0x28>
 800a014:	f04f 37ff 	mov.w	r7, #4294967295
 800a018:	e7ea      	b.n	8009ff0 <__swbuf_r+0x6c>
 800a01a:	bf00      	nop
 800a01c:	0800add4 	.word	0x0800add4
 800a020:	0800adf4 	.word	0x0800adf4
 800a024:	0800adb4 	.word	0x0800adb4

0800a028 <__swsetup_r>:
 800a028:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <__swsetup_r+0xcc>)
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	681d      	ldr	r5, [r3, #0]
 800a02e:	4606      	mov	r6, r0
 800a030:	460c      	mov	r4, r1
 800a032:	b125      	cbz	r5, 800a03e <__swsetup_r+0x16>
 800a034:	69ab      	ldr	r3, [r5, #24]
 800a036:	b913      	cbnz	r3, 800a03e <__swsetup_r+0x16>
 800a038:	4628      	mov	r0, r5
 800a03a:	f000 f97d 	bl	800a338 <__sinit>
 800a03e:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <__swsetup_r+0xd0>)
 800a040:	429c      	cmp	r4, r3
 800a042:	d10f      	bne.n	800a064 <__swsetup_r+0x3c>
 800a044:	686c      	ldr	r4, [r5, #4]
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a04c:	0719      	lsls	r1, r3, #28
 800a04e:	d42c      	bmi.n	800a0aa <__swsetup_r+0x82>
 800a050:	06dd      	lsls	r5, r3, #27
 800a052:	d411      	bmi.n	800a078 <__swsetup_r+0x50>
 800a054:	2309      	movs	r3, #9
 800a056:	6033      	str	r3, [r6, #0]
 800a058:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	f04f 30ff 	mov.w	r0, #4294967295
 800a062:	e03e      	b.n	800a0e2 <__swsetup_r+0xba>
 800a064:	4b25      	ldr	r3, [pc, #148]	; (800a0fc <__swsetup_r+0xd4>)
 800a066:	429c      	cmp	r4, r3
 800a068:	d101      	bne.n	800a06e <__swsetup_r+0x46>
 800a06a:	68ac      	ldr	r4, [r5, #8]
 800a06c:	e7eb      	b.n	800a046 <__swsetup_r+0x1e>
 800a06e:	4b24      	ldr	r3, [pc, #144]	; (800a100 <__swsetup_r+0xd8>)
 800a070:	429c      	cmp	r4, r3
 800a072:	bf08      	it	eq
 800a074:	68ec      	ldreq	r4, [r5, #12]
 800a076:	e7e6      	b.n	800a046 <__swsetup_r+0x1e>
 800a078:	0758      	lsls	r0, r3, #29
 800a07a:	d512      	bpl.n	800a0a2 <__swsetup_r+0x7a>
 800a07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07e:	b141      	cbz	r1, 800a092 <__swsetup_r+0x6a>
 800a080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a084:	4299      	cmp	r1, r3
 800a086:	d002      	beq.n	800a08e <__swsetup_r+0x66>
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff fdfd 	bl	8009c88 <_free_r>
 800a08e:	2300      	movs	r3, #0
 800a090:	6363      	str	r3, [r4, #52]	; 0x34
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	2300      	movs	r3, #0
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f043 0308 	orr.w	r3, r3, #8
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	b94b      	cbnz	r3, 800a0c2 <__swsetup_r+0x9a>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b8:	d003      	beq.n	800a0c2 <__swsetup_r+0x9a>
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 fa01 	bl	800a4c4 <__smakebuf_r>
 800a0c2:	89a0      	ldrh	r0, [r4, #12]
 800a0c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c8:	f010 0301 	ands.w	r3, r0, #1
 800a0cc:	d00a      	beq.n	800a0e4 <__swsetup_r+0xbc>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60a3      	str	r3, [r4, #8]
 800a0d2:	6963      	ldr	r3, [r4, #20]
 800a0d4:	425b      	negs	r3, r3
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	b943      	cbnz	r3, 800a0ee <__swsetup_r+0xc6>
 800a0dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0e0:	d1ba      	bne.n	800a058 <__swsetup_r+0x30>
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	0781      	lsls	r1, r0, #30
 800a0e6:	bf58      	it	pl
 800a0e8:	6963      	ldrpl	r3, [r4, #20]
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	e7f4      	b.n	800a0d8 <__swsetup_r+0xb0>
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	e7f7      	b.n	800a0e2 <__swsetup_r+0xba>
 800a0f2:	bf00      	nop
 800a0f4:	2000002c 	.word	0x2000002c
 800a0f8:	0800add4 	.word	0x0800add4
 800a0fc:	0800adf4 	.word	0x0800adf4
 800a100:	0800adb4 	.word	0x0800adb4

0800a104 <__sflush_r>:
 800a104:	898a      	ldrh	r2, [r1, #12]
 800a106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10a:	4605      	mov	r5, r0
 800a10c:	0710      	lsls	r0, r2, #28
 800a10e:	460c      	mov	r4, r1
 800a110:	d458      	bmi.n	800a1c4 <__sflush_r+0xc0>
 800a112:	684b      	ldr	r3, [r1, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	dc05      	bgt.n	800a124 <__sflush_r+0x20>
 800a118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	dc02      	bgt.n	800a124 <__sflush_r+0x20>
 800a11e:	2000      	movs	r0, #0
 800a120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a126:	2e00      	cmp	r6, #0
 800a128:	d0f9      	beq.n	800a11e <__sflush_r+0x1a>
 800a12a:	2300      	movs	r3, #0
 800a12c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a130:	682f      	ldr	r7, [r5, #0]
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	d032      	beq.n	800a19c <__sflush_r+0x98>
 800a136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	075a      	lsls	r2, r3, #29
 800a13c:	d505      	bpl.n	800a14a <__sflush_r+0x46>
 800a13e:	6863      	ldr	r3, [r4, #4]
 800a140:	1ac0      	subs	r0, r0, r3
 800a142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a144:	b10b      	cbz	r3, 800a14a <__sflush_r+0x46>
 800a146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a148:	1ac0      	subs	r0, r0, r3
 800a14a:	2300      	movs	r3, #0
 800a14c:	4602      	mov	r2, r0
 800a14e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a150:	6a21      	ldr	r1, [r4, #32]
 800a152:	4628      	mov	r0, r5
 800a154:	47b0      	blx	r6
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	d106      	bne.n	800a16a <__sflush_r+0x66>
 800a15c:	6829      	ldr	r1, [r5, #0]
 800a15e:	291d      	cmp	r1, #29
 800a160:	d82c      	bhi.n	800a1bc <__sflush_r+0xb8>
 800a162:	4a2a      	ldr	r2, [pc, #168]	; (800a20c <__sflush_r+0x108>)
 800a164:	40ca      	lsrs	r2, r1
 800a166:	07d6      	lsls	r6, r2, #31
 800a168:	d528      	bpl.n	800a1bc <__sflush_r+0xb8>
 800a16a:	2200      	movs	r2, #0
 800a16c:	6062      	str	r2, [r4, #4]
 800a16e:	04d9      	lsls	r1, r3, #19
 800a170:	6922      	ldr	r2, [r4, #16]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	d504      	bpl.n	800a180 <__sflush_r+0x7c>
 800a176:	1c42      	adds	r2, r0, #1
 800a178:	d101      	bne.n	800a17e <__sflush_r+0x7a>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	b903      	cbnz	r3, 800a180 <__sflush_r+0x7c>
 800a17e:	6560      	str	r0, [r4, #84]	; 0x54
 800a180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a182:	602f      	str	r7, [r5, #0]
 800a184:	2900      	cmp	r1, #0
 800a186:	d0ca      	beq.n	800a11e <__sflush_r+0x1a>
 800a188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a18c:	4299      	cmp	r1, r3
 800a18e:	d002      	beq.n	800a196 <__sflush_r+0x92>
 800a190:	4628      	mov	r0, r5
 800a192:	f7ff fd79 	bl	8009c88 <_free_r>
 800a196:	2000      	movs	r0, #0
 800a198:	6360      	str	r0, [r4, #52]	; 0x34
 800a19a:	e7c1      	b.n	800a120 <__sflush_r+0x1c>
 800a19c:	6a21      	ldr	r1, [r4, #32]
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b0      	blx	r6
 800a1a4:	1c41      	adds	r1, r0, #1
 800a1a6:	d1c7      	bne.n	800a138 <__sflush_r+0x34>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d0c4      	beq.n	800a138 <__sflush_r+0x34>
 800a1ae:	2b1d      	cmp	r3, #29
 800a1b0:	d001      	beq.n	800a1b6 <__sflush_r+0xb2>
 800a1b2:	2b16      	cmp	r3, #22
 800a1b4:	d101      	bne.n	800a1ba <__sflush_r+0xb6>
 800a1b6:	602f      	str	r7, [r5, #0]
 800a1b8:	e7b1      	b.n	800a11e <__sflush_r+0x1a>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	e7ad      	b.n	800a120 <__sflush_r+0x1c>
 800a1c4:	690f      	ldr	r7, [r1, #16]
 800a1c6:	2f00      	cmp	r7, #0
 800a1c8:	d0a9      	beq.n	800a11e <__sflush_r+0x1a>
 800a1ca:	0793      	lsls	r3, r2, #30
 800a1cc:	680e      	ldr	r6, [r1, #0]
 800a1ce:	bf08      	it	eq
 800a1d0:	694b      	ldreq	r3, [r1, #20]
 800a1d2:	600f      	str	r7, [r1, #0]
 800a1d4:	bf18      	it	ne
 800a1d6:	2300      	movne	r3, #0
 800a1d8:	eba6 0807 	sub.w	r8, r6, r7
 800a1dc:	608b      	str	r3, [r1, #8]
 800a1de:	f1b8 0f00 	cmp.w	r8, #0
 800a1e2:	dd9c      	ble.n	800a11e <__sflush_r+0x1a>
 800a1e4:	6a21      	ldr	r1, [r4, #32]
 800a1e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1e8:	4643      	mov	r3, r8
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b0      	blx	r6
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dc06      	bgt.n	800a202 <__sflush_r+0xfe>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	e78e      	b.n	800a120 <__sflush_r+0x1c>
 800a202:	4407      	add	r7, r0
 800a204:	eba8 0800 	sub.w	r8, r8, r0
 800a208:	e7e9      	b.n	800a1de <__sflush_r+0xda>
 800a20a:	bf00      	nop
 800a20c:	20400001 	.word	0x20400001

0800a210 <_fflush_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	4605      	mov	r5, r0
 800a216:	460c      	mov	r4, r1
 800a218:	b913      	cbnz	r3, 800a220 <_fflush_r+0x10>
 800a21a:	2500      	movs	r5, #0
 800a21c:	4628      	mov	r0, r5
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	b118      	cbz	r0, 800a22a <_fflush_r+0x1a>
 800a222:	6983      	ldr	r3, [r0, #24]
 800a224:	b90b      	cbnz	r3, 800a22a <_fflush_r+0x1a>
 800a226:	f000 f887 	bl	800a338 <__sinit>
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <_fflush_r+0x6c>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d11b      	bne.n	800a268 <_fflush_r+0x58>
 800a230:	686c      	ldr	r4, [r5, #4]
 800a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0ef      	beq.n	800a21a <_fflush_r+0xa>
 800a23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a23c:	07d0      	lsls	r0, r2, #31
 800a23e:	d404      	bmi.n	800a24a <_fflush_r+0x3a>
 800a240:	0599      	lsls	r1, r3, #22
 800a242:	d402      	bmi.n	800a24a <_fflush_r+0x3a>
 800a244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a246:	f000 f915 	bl	800a474 <__retarget_lock_acquire_recursive>
 800a24a:	4628      	mov	r0, r5
 800a24c:	4621      	mov	r1, r4
 800a24e:	f7ff ff59 	bl	800a104 <__sflush_r>
 800a252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a254:	07da      	lsls	r2, r3, #31
 800a256:	4605      	mov	r5, r0
 800a258:	d4e0      	bmi.n	800a21c <_fflush_r+0xc>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	059b      	lsls	r3, r3, #22
 800a25e:	d4dd      	bmi.n	800a21c <_fflush_r+0xc>
 800a260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a262:	f000 f908 	bl	800a476 <__retarget_lock_release_recursive>
 800a266:	e7d9      	b.n	800a21c <_fflush_r+0xc>
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <_fflush_r+0x70>)
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d101      	bne.n	800a272 <_fflush_r+0x62>
 800a26e:	68ac      	ldr	r4, [r5, #8]
 800a270:	e7df      	b.n	800a232 <_fflush_r+0x22>
 800a272:	4b04      	ldr	r3, [pc, #16]	; (800a284 <_fflush_r+0x74>)
 800a274:	429c      	cmp	r4, r3
 800a276:	bf08      	it	eq
 800a278:	68ec      	ldreq	r4, [r5, #12]
 800a27a:	e7da      	b.n	800a232 <_fflush_r+0x22>
 800a27c:	0800add4 	.word	0x0800add4
 800a280:	0800adf4 	.word	0x0800adf4
 800a284:	0800adb4 	.word	0x0800adb4

0800a288 <std>:
 800a288:	2300      	movs	r3, #0
 800a28a:	b510      	push	{r4, lr}
 800a28c:	4604      	mov	r4, r0
 800a28e:	e9c0 3300 	strd	r3, r3, [r0]
 800a292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a296:	6083      	str	r3, [r0, #8]
 800a298:	8181      	strh	r1, [r0, #12]
 800a29a:	6643      	str	r3, [r0, #100]	; 0x64
 800a29c:	81c2      	strh	r2, [r0, #14]
 800a29e:	6183      	str	r3, [r0, #24]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	2208      	movs	r2, #8
 800a2a4:	305c      	adds	r0, #92	; 0x5c
 800a2a6:	f7ff fce7 	bl	8009c78 <memset>
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <std+0x38>)
 800a2ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a2ae:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <std+0x3c>)
 800a2b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <std+0x40>)
 800a2b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2b6:	4b05      	ldr	r3, [pc, #20]	; (800a2cc <std+0x44>)
 800a2b8:	6224      	str	r4, [r4, #32]
 800a2ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800ab39 	.word	0x0800ab39
 800a2c4:	0800ab5b 	.word	0x0800ab5b
 800a2c8:	0800ab93 	.word	0x0800ab93
 800a2cc:	0800abb7 	.word	0x0800abb7

0800a2d0 <_cleanup_r>:
 800a2d0:	4901      	ldr	r1, [pc, #4]	; (800a2d8 <_cleanup_r+0x8>)
 800a2d2:	f000 b8af 	b.w	800a434 <_fwalk_reent>
 800a2d6:	bf00      	nop
 800a2d8:	0800a211 	.word	0x0800a211

0800a2dc <__sfmoreglue>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	2268      	movs	r2, #104	; 0x68
 800a2e0:	1e4d      	subs	r5, r1, #1
 800a2e2:	4355      	muls	r5, r2
 800a2e4:	460e      	mov	r6, r1
 800a2e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2ea:	f7ff fd39 	bl	8009d60 <_malloc_r>
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	b140      	cbz	r0, 800a304 <__sfmoreglue+0x28>
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	e9c0 1600 	strd	r1, r6, [r0]
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	60a0      	str	r0, [r4, #8]
 800a2fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a300:	f7ff fcba 	bl	8009c78 <memset>
 800a304:	4620      	mov	r0, r4
 800a306:	bd70      	pop	{r4, r5, r6, pc}

0800a308 <__sfp_lock_acquire>:
 800a308:	4801      	ldr	r0, [pc, #4]	; (800a310 <__sfp_lock_acquire+0x8>)
 800a30a:	f000 b8b3 	b.w	800a474 <__retarget_lock_acquire_recursive>
 800a30e:	bf00      	nop
 800a310:	20000a89 	.word	0x20000a89

0800a314 <__sfp_lock_release>:
 800a314:	4801      	ldr	r0, [pc, #4]	; (800a31c <__sfp_lock_release+0x8>)
 800a316:	f000 b8ae 	b.w	800a476 <__retarget_lock_release_recursive>
 800a31a:	bf00      	nop
 800a31c:	20000a89 	.word	0x20000a89

0800a320 <__sinit_lock_acquire>:
 800a320:	4801      	ldr	r0, [pc, #4]	; (800a328 <__sinit_lock_acquire+0x8>)
 800a322:	f000 b8a7 	b.w	800a474 <__retarget_lock_acquire_recursive>
 800a326:	bf00      	nop
 800a328:	20000a8a 	.word	0x20000a8a

0800a32c <__sinit_lock_release>:
 800a32c:	4801      	ldr	r0, [pc, #4]	; (800a334 <__sinit_lock_release+0x8>)
 800a32e:	f000 b8a2 	b.w	800a476 <__retarget_lock_release_recursive>
 800a332:	bf00      	nop
 800a334:	20000a8a 	.word	0x20000a8a

0800a338 <__sinit>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	4604      	mov	r4, r0
 800a33c:	f7ff fff0 	bl	800a320 <__sinit_lock_acquire>
 800a340:	69a3      	ldr	r3, [r4, #24]
 800a342:	b11b      	cbz	r3, 800a34c <__sinit+0x14>
 800a344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a348:	f7ff bff0 	b.w	800a32c <__sinit_lock_release>
 800a34c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a350:	6523      	str	r3, [r4, #80]	; 0x50
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <__sinit+0x68>)
 800a354:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <__sinit+0x6c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	62a2      	str	r2, [r4, #40]	; 0x28
 800a35a:	42a3      	cmp	r3, r4
 800a35c:	bf04      	itt	eq
 800a35e:	2301      	moveq	r3, #1
 800a360:	61a3      	streq	r3, [r4, #24]
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f820 	bl	800a3a8 <__sfp>
 800a368:	6060      	str	r0, [r4, #4]
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f81c 	bl	800a3a8 <__sfp>
 800a370:	60a0      	str	r0, [r4, #8]
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f818 	bl	800a3a8 <__sfp>
 800a378:	2200      	movs	r2, #0
 800a37a:	60e0      	str	r0, [r4, #12]
 800a37c:	2104      	movs	r1, #4
 800a37e:	6860      	ldr	r0, [r4, #4]
 800a380:	f7ff ff82 	bl	800a288 <std>
 800a384:	68a0      	ldr	r0, [r4, #8]
 800a386:	2201      	movs	r2, #1
 800a388:	2109      	movs	r1, #9
 800a38a:	f7ff ff7d 	bl	800a288 <std>
 800a38e:	68e0      	ldr	r0, [r4, #12]
 800a390:	2202      	movs	r2, #2
 800a392:	2112      	movs	r1, #18
 800a394:	f7ff ff78 	bl	800a288 <std>
 800a398:	2301      	movs	r3, #1
 800a39a:	61a3      	str	r3, [r4, #24]
 800a39c:	e7d2      	b.n	800a344 <__sinit+0xc>
 800a39e:	bf00      	nop
 800a3a0:	0800adb0 	.word	0x0800adb0
 800a3a4:	0800a2d1 	.word	0x0800a2d1

0800a3a8 <__sfp>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	f7ff ffac 	bl	800a308 <__sfp_lock_acquire>
 800a3b0:	4b1e      	ldr	r3, [pc, #120]	; (800a42c <__sfp+0x84>)
 800a3b2:	681e      	ldr	r6, [r3, #0]
 800a3b4:	69b3      	ldr	r3, [r6, #24]
 800a3b6:	b913      	cbnz	r3, 800a3be <__sfp+0x16>
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ffbd 	bl	800a338 <__sinit>
 800a3be:	3648      	adds	r6, #72	; 0x48
 800a3c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	d503      	bpl.n	800a3d0 <__sfp+0x28>
 800a3c8:	6833      	ldr	r3, [r6, #0]
 800a3ca:	b30b      	cbz	r3, 800a410 <__sfp+0x68>
 800a3cc:	6836      	ldr	r6, [r6, #0]
 800a3ce:	e7f7      	b.n	800a3c0 <__sfp+0x18>
 800a3d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3d4:	b9d5      	cbnz	r5, 800a40c <__sfp+0x64>
 800a3d6:	4b16      	ldr	r3, [pc, #88]	; (800a430 <__sfp+0x88>)
 800a3d8:	60e3      	str	r3, [r4, #12]
 800a3da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3de:	6665      	str	r5, [r4, #100]	; 0x64
 800a3e0:	f000 f847 	bl	800a472 <__retarget_lock_init_recursive>
 800a3e4:	f7ff ff96 	bl	800a314 <__sfp_lock_release>
 800a3e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3f0:	6025      	str	r5, [r4, #0]
 800a3f2:	61a5      	str	r5, [r4, #24]
 800a3f4:	2208      	movs	r2, #8
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3fc:	f7ff fc3c 	bl	8009c78 <memset>
 800a400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a408:	4620      	mov	r0, r4
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a40c:	3468      	adds	r4, #104	; 0x68
 800a40e:	e7d9      	b.n	800a3c4 <__sfp+0x1c>
 800a410:	2104      	movs	r1, #4
 800a412:	4638      	mov	r0, r7
 800a414:	f7ff ff62 	bl	800a2dc <__sfmoreglue>
 800a418:	4604      	mov	r4, r0
 800a41a:	6030      	str	r0, [r6, #0]
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d1d5      	bne.n	800a3cc <__sfp+0x24>
 800a420:	f7ff ff78 	bl	800a314 <__sfp_lock_release>
 800a424:	230c      	movs	r3, #12
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	e7ee      	b.n	800a408 <__sfp+0x60>
 800a42a:	bf00      	nop
 800a42c:	0800adb0 	.word	0x0800adb0
 800a430:	ffff0001 	.word	0xffff0001

0800a434 <_fwalk_reent>:
 800a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a438:	4606      	mov	r6, r0
 800a43a:	4688      	mov	r8, r1
 800a43c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a440:	2700      	movs	r7, #0
 800a442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a446:	f1b9 0901 	subs.w	r9, r9, #1
 800a44a:	d505      	bpl.n	800a458 <_fwalk_reent+0x24>
 800a44c:	6824      	ldr	r4, [r4, #0]
 800a44e:	2c00      	cmp	r4, #0
 800a450:	d1f7      	bne.n	800a442 <_fwalk_reent+0xe>
 800a452:	4638      	mov	r0, r7
 800a454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a458:	89ab      	ldrh	r3, [r5, #12]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d907      	bls.n	800a46e <_fwalk_reent+0x3a>
 800a45e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a462:	3301      	adds	r3, #1
 800a464:	d003      	beq.n	800a46e <_fwalk_reent+0x3a>
 800a466:	4629      	mov	r1, r5
 800a468:	4630      	mov	r0, r6
 800a46a:	47c0      	blx	r8
 800a46c:	4307      	orrs	r7, r0
 800a46e:	3568      	adds	r5, #104	; 0x68
 800a470:	e7e9      	b.n	800a446 <_fwalk_reent+0x12>

0800a472 <__retarget_lock_init_recursive>:
 800a472:	4770      	bx	lr

0800a474 <__retarget_lock_acquire_recursive>:
 800a474:	4770      	bx	lr

0800a476 <__retarget_lock_release_recursive>:
 800a476:	4770      	bx	lr

0800a478 <__swhatbuf_r>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	460e      	mov	r6, r1
 800a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a480:	2900      	cmp	r1, #0
 800a482:	b096      	sub	sp, #88	; 0x58
 800a484:	4614      	mov	r4, r2
 800a486:	461d      	mov	r5, r3
 800a488:	da08      	bge.n	800a49c <__swhatbuf_r+0x24>
 800a48a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	602a      	str	r2, [r5, #0]
 800a492:	061a      	lsls	r2, r3, #24
 800a494:	d410      	bmi.n	800a4b8 <__swhatbuf_r+0x40>
 800a496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a49a:	e00e      	b.n	800a4ba <__swhatbuf_r+0x42>
 800a49c:	466a      	mov	r2, sp
 800a49e:	f000 fbb1 	bl	800ac04 <_fstat_r>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	dbf1      	blt.n	800a48a <__swhatbuf_r+0x12>
 800a4a6:	9a01      	ldr	r2, [sp, #4]
 800a4a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4b0:	425a      	negs	r2, r3
 800a4b2:	415a      	adcs	r2, r3
 800a4b4:	602a      	str	r2, [r5, #0]
 800a4b6:	e7ee      	b.n	800a496 <__swhatbuf_r+0x1e>
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	b016      	add	sp, #88	; 0x58
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4c4 <__smakebuf_r>:
 800a4c4:	898b      	ldrh	r3, [r1, #12]
 800a4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4c8:	079d      	lsls	r5, r3, #30
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	d507      	bpl.n	800a4e0 <__smakebuf_r+0x1c>
 800a4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	6123      	str	r3, [r4, #16]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	6163      	str	r3, [r4, #20]
 800a4dc:	b002      	add	sp, #8
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	ab01      	add	r3, sp, #4
 800a4e2:	466a      	mov	r2, sp
 800a4e4:	f7ff ffc8 	bl	800a478 <__swhatbuf_r>
 800a4e8:	9900      	ldr	r1, [sp, #0]
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fc37 	bl	8009d60 <_malloc_r>
 800a4f2:	b948      	cbnz	r0, 800a508 <__smakebuf_r+0x44>
 800a4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f8:	059a      	lsls	r2, r3, #22
 800a4fa:	d4ef      	bmi.n	800a4dc <__smakebuf_r+0x18>
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	f043 0302 	orr.w	r3, r3, #2
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	e7e3      	b.n	800a4d0 <__smakebuf_r+0xc>
 800a508:	4b0d      	ldr	r3, [pc, #52]	; (800a540 <__smakebuf_r+0x7c>)
 800a50a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	6020      	str	r0, [r4, #0]
 800a510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	6163      	str	r3, [r4, #20]
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	6120      	str	r0, [r4, #16]
 800a51e:	b15b      	cbz	r3, 800a538 <__smakebuf_r+0x74>
 800a520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a524:	4630      	mov	r0, r6
 800a526:	f000 fb7f 	bl	800ac28 <_isatty_r>
 800a52a:	b128      	cbz	r0, 800a538 <__smakebuf_r+0x74>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f023 0303 	bic.w	r3, r3, #3
 800a532:	f043 0301 	orr.w	r3, r3, #1
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	89a0      	ldrh	r0, [r4, #12]
 800a53a:	4305      	orrs	r5, r0
 800a53c:	81a5      	strh	r5, [r4, #12]
 800a53e:	e7cd      	b.n	800a4dc <__smakebuf_r+0x18>
 800a540:	0800a2d1 	.word	0x0800a2d1

0800a544 <__malloc_lock>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__malloc_lock+0x8>)
 800a546:	f7ff bf95 	b.w	800a474 <__retarget_lock_acquire_recursive>
 800a54a:	bf00      	nop
 800a54c:	20000a88 	.word	0x20000a88

0800a550 <__malloc_unlock>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__malloc_unlock+0x8>)
 800a552:	f7ff bf90 	b.w	800a476 <__retarget_lock_release_recursive>
 800a556:	bf00      	nop
 800a558:	20000a88 	.word	0x20000a88

0800a55c <__sfputc_r>:
 800a55c:	6893      	ldr	r3, [r2, #8]
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	b410      	push	{r4}
 800a564:	6093      	str	r3, [r2, #8]
 800a566:	da08      	bge.n	800a57a <__sfputc_r+0x1e>
 800a568:	6994      	ldr	r4, [r2, #24]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	db01      	blt.n	800a572 <__sfputc_r+0x16>
 800a56e:	290a      	cmp	r1, #10
 800a570:	d103      	bne.n	800a57a <__sfputc_r+0x1e>
 800a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a576:	f7ff bd05 	b.w	8009f84 <__swbuf_r>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	1c58      	adds	r0, r3, #1
 800a57e:	6010      	str	r0, [r2, #0]
 800a580:	7019      	strb	r1, [r3, #0]
 800a582:	4608      	mov	r0, r1
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <__sfputs_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4614      	mov	r4, r2
 800a592:	18d5      	adds	r5, r2, r3
 800a594:	42ac      	cmp	r4, r5
 800a596:	d101      	bne.n	800a59c <__sfputs_r+0x12>
 800a598:	2000      	movs	r0, #0
 800a59a:	e007      	b.n	800a5ac <__sfputs_r+0x22>
 800a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffda 	bl	800a55c <__sfputc_r>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d1f3      	bne.n	800a594 <__sfputs_r+0xa>
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b0 <_vfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	460d      	mov	r5, r1
 800a5b6:	b09d      	sub	sp, #116	; 0x74
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	4606      	mov	r6, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <_vfiprintf_r+0x18>
 800a5c0:	6983      	ldr	r3, [r0, #24]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <_vfiprintf_r+0x18>
 800a5c4:	f7ff feb8 	bl	800a338 <__sinit>
 800a5c8:	4b89      	ldr	r3, [pc, #548]	; (800a7f0 <_vfiprintf_r+0x240>)
 800a5ca:	429d      	cmp	r5, r3
 800a5cc:	d11b      	bne.n	800a606 <_vfiprintf_r+0x56>
 800a5ce:	6875      	ldr	r5, [r6, #4]
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5de:	f7ff ff49 	bl	800a474 <__retarget_lock_acquire_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	071b      	lsls	r3, r3, #28
 800a5e6:	d501      	bpl.n	800a5ec <_vfiprintf_r+0x3c>
 800a5e8:	692b      	ldr	r3, [r5, #16]
 800a5ea:	b9eb      	cbnz	r3, 800a628 <_vfiprintf_r+0x78>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7ff fd1a 	bl	800a028 <__swsetup_r>
 800a5f4:	b1c0      	cbz	r0, 800a628 <_vfiprintf_r+0x78>
 800a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f8:	07dc      	lsls	r4, r3, #31
 800a5fa:	d50e      	bpl.n	800a61a <_vfiprintf_r+0x6a>
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a600:	b01d      	add	sp, #116	; 0x74
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	4b7b      	ldr	r3, [pc, #492]	; (800a7f4 <_vfiprintf_r+0x244>)
 800a608:	429d      	cmp	r5, r3
 800a60a:	d101      	bne.n	800a610 <_vfiprintf_r+0x60>
 800a60c:	68b5      	ldr	r5, [r6, #8]
 800a60e:	e7df      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a610:	4b79      	ldr	r3, [pc, #484]	; (800a7f8 <_vfiprintf_r+0x248>)
 800a612:	429d      	cmp	r5, r3
 800a614:	bf08      	it	eq
 800a616:	68f5      	ldreq	r5, [r6, #12]
 800a618:	e7da      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	0598      	lsls	r0, r3, #22
 800a61e:	d4ed      	bmi.n	800a5fc <_vfiprintf_r+0x4c>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f7ff ff28 	bl	800a476 <__retarget_lock_release_recursive>
 800a626:	e7e9      	b.n	800a5fc <_vfiprintf_r+0x4c>
 800a628:	2300      	movs	r3, #0
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	2320      	movs	r3, #32
 800a62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a632:	f8cd 800c 	str.w	r8, [sp, #12]
 800a636:	2330      	movs	r3, #48	; 0x30
 800a638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7fc <_vfiprintf_r+0x24c>
 800a63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a640:	f04f 0901 	mov.w	r9, #1
 800a644:	4623      	mov	r3, r4
 800a646:	469a      	mov	sl, r3
 800a648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64c:	b10a      	cbz	r2, 800a652 <_vfiprintf_r+0xa2>
 800a64e:	2a25      	cmp	r2, #37	; 0x25
 800a650:	d1f9      	bne.n	800a646 <_vfiprintf_r+0x96>
 800a652:	ebba 0b04 	subs.w	fp, sl, r4
 800a656:	d00b      	beq.n	800a670 <_vfiprintf_r+0xc0>
 800a658:	465b      	mov	r3, fp
 800a65a:	4622      	mov	r2, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff93 	bl	800a58a <__sfputs_r>
 800a664:	3001      	adds	r0, #1
 800a666:	f000 80aa 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	445a      	add	r2, fp
 800a66e:	9209      	str	r2, [sp, #36]	; 0x24
 800a670:	f89a 3000 	ldrb.w	r3, [sl]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80a2 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a684:	f10a 0a01 	add.w	sl, sl, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a690:	931a      	str	r3, [sp, #104]	; 0x68
 800a692:	4654      	mov	r4, sl
 800a694:	2205      	movs	r2, #5
 800a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69a:	4858      	ldr	r0, [pc, #352]	; (800a7fc <_vfiprintf_r+0x24c>)
 800a69c:	f7f5 fda8 	bl	80001f0 <memchr>
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	b9d8      	cbnz	r0, 800a6dc <_vfiprintf_r+0x12c>
 800a6a4:	06d1      	lsls	r1, r2, #27
 800a6a6:	bf44      	itt	mi
 800a6a8:	2320      	movmi	r3, #32
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	0713      	lsls	r3, r2, #28
 800a6b0:	bf44      	itt	mi
 800a6b2:	232b      	movmi	r3, #43	; 0x2b
 800a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6be:	d015      	beq.n	800a6ec <_vfiprintf_r+0x13c>
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d0:	3b30      	subs	r3, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d94e      	bls.n	800a774 <_vfiprintf_r+0x1c4>
 800a6d6:	b1b0      	cbz	r0, 800a706 <_vfiprintf_r+0x156>
 800a6d8:	9207      	str	r2, [sp, #28]
 800a6da:	e014      	b.n	800a706 <_vfiprintf_r+0x156>
 800a6dc:	eba0 0308 	sub.w	r3, r0, r8
 800a6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	e7d2      	b.n	800a692 <_vfiprintf_r+0xe2>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	1d19      	adds	r1, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	9103      	str	r1, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfbb      	ittet	lt
 800a6f8:	425b      	neglt	r3, r3
 800a6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fe:	9307      	strge	r3, [sp, #28]
 800a700:	9307      	strlt	r3, [sp, #28]
 800a702:	bfb8      	it	lt
 800a704:	9204      	strlt	r2, [sp, #16]
 800a706:	7823      	ldrb	r3, [r4, #0]
 800a708:	2b2e      	cmp	r3, #46	; 0x2e
 800a70a:	d10c      	bne.n	800a726 <_vfiprintf_r+0x176>
 800a70c:	7863      	ldrb	r3, [r4, #1]
 800a70e:	2b2a      	cmp	r3, #42	; 0x2a
 800a710:	d135      	bne.n	800a77e <_vfiprintf_r+0x1ce>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9203      	str	r2, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a80c <_vfiprintf_r+0x25c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd5e 	bl	80001f0 <memchr>
 800a734:	b140      	cbz	r0, 800a748 <_vfiprintf_r+0x198>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	fa03 f000 	lsl.w	r0, r3, r0
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	4303      	orrs	r3, r0
 800a744:	3401      	adds	r4, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	482c      	ldr	r0, [pc, #176]	; (800a800 <_vfiprintf_r+0x250>)
 800a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a752:	2206      	movs	r2, #6
 800a754:	f7f5 fd4c 	bl	80001f0 <memchr>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d03f      	beq.n	800a7dc <_vfiprintf_r+0x22c>
 800a75c:	4b29      	ldr	r3, [pc, #164]	; (800a804 <_vfiprintf_r+0x254>)
 800a75e:	bb1b      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x1f8>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	3307      	adds	r3, #7
 800a764:	f023 0307 	bic.w	r3, r3, #7
 800a768:	3308      	adds	r3, #8
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	443b      	add	r3, r7
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	e767      	b.n	800a644 <_vfiprintf_r+0x94>
 800a774:	fb0c 3202 	mla	r2, ip, r2, r3
 800a778:	460c      	mov	r4, r1
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7a5      	b.n	800a6ca <_vfiprintf_r+0x11a>
 800a77e:	2300      	movs	r3, #0
 800a780:	3401      	adds	r4, #1
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	4619      	mov	r1, r3
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4620      	mov	r0, r4
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_vfiprintf_r+0x1ee>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c5      	beq.n	800a726 <_vfiprintf_r+0x176>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c3      	b.n	800a726 <_vfiprintf_r+0x176>
 800a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f0      	b.n	800a78a <_vfiprintf_r+0x1da>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4b16      	ldr	r3, [pc, #88]	; (800a808 <_vfiprintf_r+0x258>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	1c78      	adds	r0, r7, #1
 800a7bc:	d1d6      	bne.n	800a76c <_vfiprintf_r+0x1bc>
 800a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c0:	07d9      	lsls	r1, r3, #31
 800a7c2:	d405      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	059a      	lsls	r2, r3, #22
 800a7c8:	d402      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7cc:	f7ff fe53 	bl	800a476 <__retarget_lock_release_recursive>
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	065b      	lsls	r3, r3, #25
 800a7d4:	f53f af12 	bmi.w	800a5fc <_vfiprintf_r+0x4c>
 800a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7da:	e711      	b.n	800a600 <_vfiprintf_r+0x50>
 800a7dc:	ab03      	add	r3, sp, #12
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <_vfiprintf_r+0x258>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f880 	bl	800a8ec <_printf_i>
 800a7ec:	e7e4      	b.n	800a7b8 <_vfiprintf_r+0x208>
 800a7ee:	bf00      	nop
 800a7f0:	0800add4 	.word	0x0800add4
 800a7f4:	0800adf4 	.word	0x0800adf4
 800a7f8:	0800adb4 	.word	0x0800adb4
 800a7fc:	0800ae14 	.word	0x0800ae14
 800a800:	0800ae1e 	.word	0x0800ae1e
 800a804:	00000000 	.word	0x00000000
 800a808:	0800a58b 	.word	0x0800a58b
 800a80c:	0800ae1a 	.word	0x0800ae1a

0800a810 <_printf_common>:
 800a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	4616      	mov	r6, r2
 800a816:	4699      	mov	r9, r3
 800a818:	688a      	ldr	r2, [r1, #8]
 800a81a:	690b      	ldr	r3, [r1, #16]
 800a81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a820:	4293      	cmp	r3, r2
 800a822:	bfb8      	it	lt
 800a824:	4613      	movlt	r3, r2
 800a826:	6033      	str	r3, [r6, #0]
 800a828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a82c:	4607      	mov	r7, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	b10a      	cbz	r2, 800a836 <_printf_common+0x26>
 800a832:	3301      	adds	r3, #1
 800a834:	6033      	str	r3, [r6, #0]
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	0699      	lsls	r1, r3, #26
 800a83a:	bf42      	ittt	mi
 800a83c:	6833      	ldrmi	r3, [r6, #0]
 800a83e:	3302      	addmi	r3, #2
 800a840:	6033      	strmi	r3, [r6, #0]
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	f015 0506 	ands.w	r5, r5, #6
 800a848:	d106      	bne.n	800a858 <_printf_common+0x48>
 800a84a:	f104 0a19 	add.w	sl, r4, #25
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	6832      	ldr	r2, [r6, #0]
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	42ab      	cmp	r3, r5
 800a856:	dc26      	bgt.n	800a8a6 <_printf_common+0x96>
 800a858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a85c:	1e13      	subs	r3, r2, #0
 800a85e:	6822      	ldr	r2, [r4, #0]
 800a860:	bf18      	it	ne
 800a862:	2301      	movne	r3, #1
 800a864:	0692      	lsls	r2, r2, #26
 800a866:	d42b      	bmi.n	800a8c0 <_printf_common+0xb0>
 800a868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a86c:	4649      	mov	r1, r9
 800a86e:	4638      	mov	r0, r7
 800a870:	47c0      	blx	r8
 800a872:	3001      	adds	r0, #1
 800a874:	d01e      	beq.n	800a8b4 <_printf_common+0xa4>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	68e5      	ldr	r5, [r4, #12]
 800a87a:	6832      	ldr	r2, [r6, #0]
 800a87c:	f003 0306 	and.w	r3, r3, #6
 800a880:	2b04      	cmp	r3, #4
 800a882:	bf08      	it	eq
 800a884:	1aad      	subeq	r5, r5, r2
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	6922      	ldr	r2, [r4, #16]
 800a88a:	bf0c      	ite	eq
 800a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a890:	2500      	movne	r5, #0
 800a892:	4293      	cmp	r3, r2
 800a894:	bfc4      	itt	gt
 800a896:	1a9b      	subgt	r3, r3, r2
 800a898:	18ed      	addgt	r5, r5, r3
 800a89a:	2600      	movs	r6, #0
 800a89c:	341a      	adds	r4, #26
 800a89e:	42b5      	cmp	r5, r6
 800a8a0:	d11a      	bne.n	800a8d8 <_printf_common+0xc8>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e008      	b.n	800a8b8 <_printf_common+0xa8>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	47c0      	blx	r8
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d103      	bne.n	800a8bc <_printf_common+0xac>
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8bc:	3501      	adds	r5, #1
 800a8be:	e7c6      	b.n	800a84e <_printf_common+0x3e>
 800a8c0:	18e1      	adds	r1, r4, r3
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	2030      	movs	r0, #48	; 0x30
 800a8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ca:	4422      	add	r2, r4
 800a8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	e7c7      	b.n	800a868 <_printf_common+0x58>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4622      	mov	r2, r4
 800a8dc:	4649      	mov	r1, r9
 800a8de:	4638      	mov	r0, r7
 800a8e0:	47c0      	blx	r8
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d0e6      	beq.n	800a8b4 <_printf_common+0xa4>
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7d9      	b.n	800a89e <_printf_common+0x8e>
	...

0800a8ec <_printf_i>:
 800a8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	7e0f      	ldrb	r7, [r1, #24]
 800a8f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f4:	2f78      	cmp	r7, #120	; 0x78
 800a8f6:	4691      	mov	r9, r2
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	469a      	mov	sl, r3
 800a8fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a902:	d807      	bhi.n	800a914 <_printf_i+0x28>
 800a904:	2f62      	cmp	r7, #98	; 0x62
 800a906:	d80a      	bhi.n	800a91e <_printf_i+0x32>
 800a908:	2f00      	cmp	r7, #0
 800a90a:	f000 80d8 	beq.w	800aabe <_printf_i+0x1d2>
 800a90e:	2f58      	cmp	r7, #88	; 0x58
 800a910:	f000 80a3 	beq.w	800aa5a <_printf_i+0x16e>
 800a914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a91c:	e03a      	b.n	800a994 <_printf_i+0xa8>
 800a91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a922:	2b15      	cmp	r3, #21
 800a924:	d8f6      	bhi.n	800a914 <_printf_i+0x28>
 800a926:	a101      	add	r1, pc, #4	; (adr r1, 800a92c <_printf_i+0x40>)
 800a928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a92c:	0800a985 	.word	0x0800a985
 800a930:	0800a999 	.word	0x0800a999
 800a934:	0800a915 	.word	0x0800a915
 800a938:	0800a915 	.word	0x0800a915
 800a93c:	0800a915 	.word	0x0800a915
 800a940:	0800a915 	.word	0x0800a915
 800a944:	0800a999 	.word	0x0800a999
 800a948:	0800a915 	.word	0x0800a915
 800a94c:	0800a915 	.word	0x0800a915
 800a950:	0800a915 	.word	0x0800a915
 800a954:	0800a915 	.word	0x0800a915
 800a958:	0800aaa5 	.word	0x0800aaa5
 800a95c:	0800a9c9 	.word	0x0800a9c9
 800a960:	0800aa87 	.word	0x0800aa87
 800a964:	0800a915 	.word	0x0800a915
 800a968:	0800a915 	.word	0x0800a915
 800a96c:	0800aac7 	.word	0x0800aac7
 800a970:	0800a915 	.word	0x0800a915
 800a974:	0800a9c9 	.word	0x0800a9c9
 800a978:	0800a915 	.word	0x0800a915
 800a97c:	0800a915 	.word	0x0800a915
 800a980:	0800aa8f 	.word	0x0800aa8f
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	1d1a      	adds	r2, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	602a      	str	r2, [r5, #0]
 800a98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a994:	2301      	movs	r3, #1
 800a996:	e0a3      	b.n	800aae0 <_printf_i+0x1f4>
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	6829      	ldr	r1, [r5, #0]
 800a99c:	0606      	lsls	r6, r0, #24
 800a99e:	f101 0304 	add.w	r3, r1, #4
 800a9a2:	d50a      	bpl.n	800a9ba <_printf_i+0xce>
 800a9a4:	680e      	ldr	r6, [r1, #0]
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	da03      	bge.n	800a9b4 <_printf_i+0xc8>
 800a9ac:	232d      	movs	r3, #45	; 0x2d
 800a9ae:	4276      	negs	r6, r6
 800a9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b4:	485e      	ldr	r0, [pc, #376]	; (800ab30 <_printf_i+0x244>)
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	e019      	b.n	800a9ee <_printf_i+0x102>
 800a9ba:	680e      	ldr	r6, [r1, #0]
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9c2:	bf18      	it	ne
 800a9c4:	b236      	sxthne	r6, r6
 800a9c6:	e7ef      	b.n	800a9a8 <_printf_i+0xbc>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	6820      	ldr	r0, [r4, #0]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	6029      	str	r1, [r5, #0]
 800a9d0:	0601      	lsls	r1, r0, #24
 800a9d2:	d501      	bpl.n	800a9d8 <_printf_i+0xec>
 800a9d4:	681e      	ldr	r6, [r3, #0]
 800a9d6:	e002      	b.n	800a9de <_printf_i+0xf2>
 800a9d8:	0646      	lsls	r6, r0, #25
 800a9da:	d5fb      	bpl.n	800a9d4 <_printf_i+0xe8>
 800a9dc:	881e      	ldrh	r6, [r3, #0]
 800a9de:	4854      	ldr	r0, [pc, #336]	; (800ab30 <_printf_i+0x244>)
 800a9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a9e2:	bf0c      	ite	eq
 800a9e4:	2308      	moveq	r3, #8
 800a9e6:	230a      	movne	r3, #10
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ee:	6865      	ldr	r5, [r4, #4]
 800a9f0:	60a5      	str	r5, [r4, #8]
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	bfa2      	ittt	ge
 800a9f6:	6821      	ldrge	r1, [r4, #0]
 800a9f8:	f021 0104 	bicge.w	r1, r1, #4
 800a9fc:	6021      	strge	r1, [r4, #0]
 800a9fe:	b90e      	cbnz	r6, 800aa04 <_printf_i+0x118>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d04d      	beq.n	800aaa0 <_printf_i+0x1b4>
 800aa04:	4615      	mov	r5, r2
 800aa06:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa0a:	fb03 6711 	mls	r7, r3, r1, r6
 800aa0e:	5dc7      	ldrb	r7, [r0, r7]
 800aa10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa14:	4637      	mov	r7, r6
 800aa16:	42bb      	cmp	r3, r7
 800aa18:	460e      	mov	r6, r1
 800aa1a:	d9f4      	bls.n	800aa06 <_printf_i+0x11a>
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d10b      	bne.n	800aa38 <_printf_i+0x14c>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	07de      	lsls	r6, r3, #31
 800aa24:	d508      	bpl.n	800aa38 <_printf_i+0x14c>
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	6861      	ldr	r1, [r4, #4]
 800aa2a:	4299      	cmp	r1, r3
 800aa2c:	bfde      	ittt	le
 800aa2e:	2330      	movle	r3, #48	; 0x30
 800aa30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	6122      	str	r2, [r4, #16]
 800aa3c:	f8cd a000 	str.w	sl, [sp]
 800aa40:	464b      	mov	r3, r9
 800aa42:	aa03      	add	r2, sp, #12
 800aa44:	4621      	mov	r1, r4
 800aa46:	4640      	mov	r0, r8
 800aa48:	f7ff fee2 	bl	800a810 <_printf_common>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d14c      	bne.n	800aaea <_printf_i+0x1fe>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	b004      	add	sp, #16
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	4835      	ldr	r0, [pc, #212]	; (800ab30 <_printf_i+0x244>)
 800aa5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa60:	6829      	ldr	r1, [r5, #0]
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa68:	6029      	str	r1, [r5, #0]
 800aa6a:	061d      	lsls	r5, r3, #24
 800aa6c:	d514      	bpl.n	800aa98 <_printf_i+0x1ac>
 800aa6e:	07df      	lsls	r7, r3, #31
 800aa70:	bf44      	itt	mi
 800aa72:	f043 0320 	orrmi.w	r3, r3, #32
 800aa76:	6023      	strmi	r3, [r4, #0]
 800aa78:	b91e      	cbnz	r6, 800aa82 <_printf_i+0x196>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f023 0320 	bic.w	r3, r3, #32
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	2310      	movs	r3, #16
 800aa84:	e7b0      	b.n	800a9e8 <_printf_i+0xfc>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f043 0320 	orr.w	r3, r3, #32
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	2378      	movs	r3, #120	; 0x78
 800aa90:	4828      	ldr	r0, [pc, #160]	; (800ab34 <_printf_i+0x248>)
 800aa92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa96:	e7e3      	b.n	800aa60 <_printf_i+0x174>
 800aa98:	0659      	lsls	r1, r3, #25
 800aa9a:	bf48      	it	mi
 800aa9c:	b2b6      	uxthmi	r6, r6
 800aa9e:	e7e6      	b.n	800aa6e <_printf_i+0x182>
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	e7bb      	b.n	800aa1c <_printf_i+0x130>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	6826      	ldr	r6, [r4, #0]
 800aaa8:	6961      	ldr	r1, [r4, #20]
 800aaaa:	1d18      	adds	r0, r3, #4
 800aaac:	6028      	str	r0, [r5, #0]
 800aaae:	0635      	lsls	r5, r6, #24
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	d501      	bpl.n	800aab8 <_printf_i+0x1cc>
 800aab4:	6019      	str	r1, [r3, #0]
 800aab6:	e002      	b.n	800aabe <_printf_i+0x1d2>
 800aab8:	0670      	lsls	r0, r6, #25
 800aaba:	d5fb      	bpl.n	800aab4 <_printf_i+0x1c8>
 800aabc:	8019      	strh	r1, [r3, #0]
 800aabe:	2300      	movs	r3, #0
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	4615      	mov	r5, r2
 800aac4:	e7ba      	b.n	800aa3c <_printf_i+0x150>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	6862      	ldr	r2, [r4, #4]
 800aad0:	2100      	movs	r1, #0
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7f5 fb8c 	bl	80001f0 <memchr>
 800aad8:	b108      	cbz	r0, 800aade <_printf_i+0x1f2>
 800aada:	1b40      	subs	r0, r0, r5
 800aadc:	6060      	str	r0, [r4, #4]
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	6123      	str	r3, [r4, #16]
 800aae2:	2300      	movs	r3, #0
 800aae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae8:	e7a8      	b.n	800aa3c <_printf_i+0x150>
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	462a      	mov	r2, r5
 800aaee:	4649      	mov	r1, r9
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	47d0      	blx	sl
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d0ab      	beq.n	800aa50 <_printf_i+0x164>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	079b      	lsls	r3, r3, #30
 800aafc:	d413      	bmi.n	800ab26 <_printf_i+0x23a>
 800aafe:	68e0      	ldr	r0, [r4, #12]
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	4298      	cmp	r0, r3
 800ab04:	bfb8      	it	lt
 800ab06:	4618      	movlt	r0, r3
 800ab08:	e7a4      	b.n	800aa54 <_printf_i+0x168>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4649      	mov	r1, r9
 800ab10:	4640      	mov	r0, r8
 800ab12:	47d0      	blx	sl
 800ab14:	3001      	adds	r0, #1
 800ab16:	d09b      	beq.n	800aa50 <_printf_i+0x164>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	68e3      	ldr	r3, [r4, #12]
 800ab1c:	9903      	ldr	r1, [sp, #12]
 800ab1e:	1a5b      	subs	r3, r3, r1
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	dcf2      	bgt.n	800ab0a <_printf_i+0x21e>
 800ab24:	e7eb      	b.n	800aafe <_printf_i+0x212>
 800ab26:	2500      	movs	r5, #0
 800ab28:	f104 0619 	add.w	r6, r4, #25
 800ab2c:	e7f5      	b.n	800ab1a <_printf_i+0x22e>
 800ab2e:	bf00      	nop
 800ab30:	0800ae25 	.word	0x0800ae25
 800ab34:	0800ae36 	.word	0x0800ae36

0800ab38 <__sread>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	f000 f894 	bl	800ac6c <_read_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	bfab      	itete	ge
 800ab48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab4c:	181b      	addge	r3, r3, r0
 800ab4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab52:	bfac      	ite	ge
 800ab54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab56:	81a3      	strhlt	r3, [r4, #12]
 800ab58:	bd10      	pop	{r4, pc}

0800ab5a <__swrite>:
 800ab5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5e:	461f      	mov	r7, r3
 800ab60:	898b      	ldrh	r3, [r1, #12]
 800ab62:	05db      	lsls	r3, r3, #23
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4616      	mov	r6, r2
 800ab6a:	d505      	bpl.n	800ab78 <__swrite+0x1e>
 800ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab70:	2302      	movs	r3, #2
 800ab72:	2200      	movs	r2, #0
 800ab74:	f000 f868 	bl	800ac48 <_lseek_r>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	4632      	mov	r2, r6
 800ab86:	463b      	mov	r3, r7
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8e:	f000 b817 	b.w	800abc0 <_write_r>

0800ab92 <__sseek>:
 800ab92:	b510      	push	{r4, lr}
 800ab94:	460c      	mov	r4, r1
 800ab96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9a:	f000 f855 	bl	800ac48 <_lseek_r>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	bf15      	itete	ne
 800aba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abae:	81a3      	strheq	r3, [r4, #12]
 800abb0:	bf18      	it	ne
 800abb2:	81a3      	strhne	r3, [r4, #12]
 800abb4:	bd10      	pop	{r4, pc}

0800abb6 <__sclose>:
 800abb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abba:	f000 b813 	b.w	800abe4 <_close_r>
	...

0800abc0 <_write_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d07      	ldr	r5, [pc, #28]	; (800abe0 <_write_r+0x20>)
 800abc4:	4604      	mov	r4, r0
 800abc6:	4608      	mov	r0, r1
 800abc8:	4611      	mov	r1, r2
 800abca:	2200      	movs	r2, #0
 800abcc:	602a      	str	r2, [r5, #0]
 800abce:	461a      	mov	r2, r3
 800abd0:	f7f6 fddb 	bl	800178a <_write>
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	d102      	bne.n	800abde <_write_r+0x1e>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	b103      	cbz	r3, 800abde <_write_r+0x1e>
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	20000a8c 	.word	0x20000a8c

0800abe4 <_close_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	4d06      	ldr	r5, [pc, #24]	; (800ac00 <_close_r+0x1c>)
 800abe8:	2300      	movs	r3, #0
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f6 fde7 	bl	80017c2 <_close>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_close_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_close_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	20000a8c 	.word	0x20000a8c

0800ac04 <_fstat_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d07      	ldr	r5, [pc, #28]	; (800ac24 <_fstat_r+0x20>)
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	4611      	mov	r1, r2
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	f7f6 fde2 	bl	80017da <_fstat>
 800ac16:	1c43      	adds	r3, r0, #1
 800ac18:	d102      	bne.n	800ac20 <_fstat_r+0x1c>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b103      	cbz	r3, 800ac20 <_fstat_r+0x1c>
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	bd38      	pop	{r3, r4, r5, pc}
 800ac22:	bf00      	nop
 800ac24:	20000a8c 	.word	0x20000a8c

0800ac28 <_isatty_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d06      	ldr	r5, [pc, #24]	; (800ac44 <_isatty_r+0x1c>)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	602b      	str	r3, [r5, #0]
 800ac34:	f7f6 fde1 	bl	80017fa <_isatty>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d102      	bne.n	800ac42 <_isatty_r+0x1a>
 800ac3c:	682b      	ldr	r3, [r5, #0]
 800ac3e:	b103      	cbz	r3, 800ac42 <_isatty_r+0x1a>
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	bd38      	pop	{r3, r4, r5, pc}
 800ac44:	20000a8c 	.word	0x20000a8c

0800ac48 <_lseek_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_lseek_r+0x20>)
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	2200      	movs	r2, #0
 800ac54:	602a      	str	r2, [r5, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	f7f6 fdda 	bl	8001810 <_lseek>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_lseek_r+0x1e>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_lseek_r+0x1e>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20000a8c 	.word	0x20000a8c

0800ac6c <_read_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d07      	ldr	r5, [pc, #28]	; (800ac8c <_read_r+0x20>)
 800ac70:	4604      	mov	r4, r0
 800ac72:	4608      	mov	r0, r1
 800ac74:	4611      	mov	r1, r2
 800ac76:	2200      	movs	r2, #0
 800ac78:	602a      	str	r2, [r5, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f7f6 fd68 	bl	8001750 <_read>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_read_r+0x1e>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_read_r+0x1e>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000a8c 	.word	0x20000a8c

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
