
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0800be14  0800be14  0001be14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6d0  0800c6d0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d8  0800c6d8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000e3c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ed0  20000ed0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000265bc  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052a9  00000000  00000000  00046680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  0004b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d50  00000000  00000000  0004d838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b135  00000000  00000000  0004f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002871e  00000000  00000000  0007a6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed9b7  00000000  00000000  000a2ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00190792  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c40  00000000  00000000  001907e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdfc 	.word	0x0800bdfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800bdfc 	.word	0x0800bdfc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 fead 	bl	80022f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f88f 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb29 	bl	8000bf8 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f8f7 	bl	8000798 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f909 	bl	80007c0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 fad3 	bl	8000b58 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f937 	bl	8000824 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f975 	bl	80008a4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9f3 	bl	80009a4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 fa27 	bl	8000a10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 fa9f 	bl	8000b04 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f00a f8c5 	bl	800a754 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa71 	bl	8000ab0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4831      	ldr	r0, [pc, #196]	; (800069c <main+0x108>)
 80005d6:	f002 feab 	bl	8003330 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	482f      	ldr	r0, [pc, #188]	; (80006a0 <main+0x10c>)
 80005e2:	f00a fce7 	bl	800afb4 <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b2f      	ldr	r3, [pc, #188]	; (80006a4 <main+0x110>)
 80005e8:	60bb      	str	r3, [r7, #8]
  bool goto_ota_mode = false;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  bool should_backup = false;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

  switch(cfg->reboot_cause)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fa:	d00c      	beq.n	8000616 <main+0x82>
 80005fc:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000600:	d01b      	beq.n	800063a <main+0xa6>
 8000602:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000606:	d81c      	bhi.n	8000642 <main+0xae>
 8000608:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 800060c:	d009      	beq.n	8000622 <main+0x8e>
 800060e:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 8000612:	d00a      	beq.n	800062a <main+0x96>
 8000614:	e015      	b.n	8000642 <main+0xae>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\nNo Configuration was found\r\n");
 8000616:	4824      	ldr	r0, [pc, #144]	; (80006a8 <main+0x114>)
 8000618:	f00a fd52 	bl	800b0c0 <puts>
		  goto_ota_mode = true;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
	  }
	  break;
 8000620:	e00f      	b.n	8000642 <main+0xae>

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot\r\n");
 8000622:	4822      	ldr	r0, [pc, #136]	; (80006ac <main+0x118>)
 8000624:	f00a fd4c 	bl	800b0c0 <puts>
	  }
	  break;
 8000628:	e00b      	b.n	8000642 <main+0xae>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 800062a:	4821      	ldr	r0, [pc, #132]	; (80006b0 <main+0x11c>)
 800062c:	f00a fd48 	bl	800b0c0 <puts>
		  goto_ota_mode = true;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
		  should_backup = true;
 8000634:	2301      	movs	r3, #1
 8000636:	71fb      	strb	r3, [r7, #7]
	  }
	  break;
 8000638:	e003      	b.n	8000642 <main+0xae>

	  case OTA_LOAD_PREV_APP:
	  {
		  printf("Update Unsuccessful, Back to previous APP if Available\r\n");
 800063a:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0x120>)
 800063c:	f00a fd40 	bl	800b0c0 <puts>

	  }
	  break;
 8000640:	bf00      	nop
  }

  do
  {
	  if (goto_ota_mode){
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01f      	beq.n	8000688 <main+0xf4>
		printf("OTA Update Requested...\r\n");
 8000648:	481b      	ldr	r0, [pc, #108]	; (80006b8 <main+0x124>)
 800064a:	f00a fd39 	bl	800b0c0 <puts>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	4811      	ldr	r0, [pc, #68]	; (800069c <main+0x108>)
 8000656:	f002 fe6b 	bl	8003330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0x108>)
 8000662:	f002 fe65 	bl	8003330 <HAL_GPIO_WritePin>
		go_to_ota_app(&huart5);
 8000666:	4815      	ldr	r0, [pc, #84]	; (80006bc <main+0x128>)
 8000668:	f000 fc1c 	bl	8000ea4 <go_to_ota_app>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <main+0x108>)
 8000674:	f002 fe5c 	bl	8003330 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <main+0x108>)
 8000680:	f002 fe56 	bl	8003330 <HAL_GPIO_WritePin>
		goto_ota_mode = false;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
	  }
  }while(false);


  HAL_Delay(2000);
 8000688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068c:	f001 fe76 	bl	800237c <HAL_Delay>
  go_to_application();
 8000690:	f000 fbd4 	bl	8000e3c <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000694:	f00a f884 	bl	800a7a0 <MX_USB_HOST_Process>
 8000698:	e7fc      	b.n	8000694 <main+0x100>
 800069a:	bf00      	nop
 800069c:	40021800 	.word	0x40021800
 80006a0:	0800be14 	.word	0x0800be14
 80006a4:	08010000 	.word	0x08010000
 80006a8:	0800be34 	.word	0x0800be34
 80006ac:	0800be64 	.word	0x0800be64
 80006b0:	0800be74 	.word	0x0800be74
 80006b4:	0800be90 	.word	0x0800be90
 80006b8:	0800bec8 	.word	0x0800bec8
 80006bc:	20000294 	.word	0x20000294

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00a fb88 	bl	800ade4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <SystemClock_Config+0xd0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000742:	2307      	movs	r3, #7
 8000744:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f004 ff3c 	bl	80055c8 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 fb9f 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f005 f99d 	bl	8005ab8 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000784:	f000 fb88 	bl	8000e98 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_CRC_Init+0x20>)
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <MX_CRC_Init+0x24>)
 80007a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_CRC_Init+0x20>)
 80007a4:	f001 ff0b 	bl	80025be <HAL_CRC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ae:	f000 fb73 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	40023000 	.word	0x40023000

080007c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <MX_DMA2D_Init+0x60>)
 80007c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_DMA2D_Init+0x5c>)
 80007f6:	f001 fefe 	bl	80025f6 <HAL_DMA2D_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000800:	f000 fb4a 	bl	8000e98 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000804:	2101      	movs	r1, #1
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_DMA2D_Init+0x5c>)
 8000808:	f002 f84e 	bl	80028a8 <HAL_DMA2D_ConfigLayer>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000812:	f000 fb41 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000b8 	.word	0x200000b8
 8000820:	4002b000 	.word	0x4002b000

08000824 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C3_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C3_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C3_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C3_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C3_Init+0x74>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_I2C3_Init+0x74>)
 8000862:	f004 f989 	bl	8004b78 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 fb14 	bl	8000e98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_I2C3_Init+0x74>)
 8000874:	f004 fac4 	bl	8004e00 <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800087e:	f000 fb0b 	bl	8000e98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_I2C3_Init+0x74>)
 8000886:	f004 faf7 	bl	8004e78 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000890:	f000 fb02 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000f8 	.word	0x200000f8
 800089c:	40005c00 	.word	0x40005c00
 80008a0:	000186a0 	.word	0x000186a0

080008a4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08e      	sub	sp, #56	; 0x38
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2234      	movs	r2, #52	; 0x34
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00a fa97 	bl	800ade4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_LTDC_Init+0xf8>)
 80008b8:	4a39      	ldr	r2, [pc, #228]	; (80009a0 <MX_LTDC_Init+0xfc>)
 80008ba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008bc:	4b37      	ldr	r3, [pc, #220]	; (800099c <MX_LTDC_Init+0xf8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_LTDC_Init+0xf8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008c8:	4b34      	ldr	r3, [pc, #208]	; (800099c <MX_LTDC_Init+0xf8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_LTDC_Init+0xf8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_LTDC_Init+0xf8>)
 80008d6:	2209      	movs	r2, #9
 80008d8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_LTDC_Init+0xf8>)
 80008dc:	2201      	movs	r2, #1
 80008de:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_LTDC_Init+0xf8>)
 80008e2:	221d      	movs	r2, #29
 80008e4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_LTDC_Init+0xf8>)
 80008e8:	2203      	movs	r2, #3
 80008ea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_LTDC_Init+0xf8>)
 80008ee:	f240 120d 	movw	r2, #269	; 0x10d
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <MX_LTDC_Init+0xf8>)
 80008f6:	f240 1243 	movw	r2, #323	; 0x143
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_LTDC_Init+0xf8>)
 80008fe:	f240 1217 	movw	r2, #279	; 0x117
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_LTDC_Init+0xf8>)
 8000906:	f240 1247 	movw	r2, #327	; 0x147
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_LTDC_Init+0xf8>)
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_LTDC_Init+0xf8>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_LTDC_Init+0xf8>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000924:	481d      	ldr	r0, [pc, #116]	; (800099c <MX_LTDC_Init+0xf8>)
 8000926:	f004 fae7 	bl	8004ef8 <HAL_LTDC_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000930:	f000 fab2 	bl	8000e98 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000938:	23f0      	movs	r3, #240	; 0xf0
 800093a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000940:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000944:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000946:	2302      	movs	r3, #2
 8000948:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000956:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000958:	2307      	movs	r3, #7
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800095c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000962:	23f0      	movs	r3, #240	; 0xf0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000966:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_LTDC_Init+0xf8>)
 8000986:	f004 fc49 	bl	800521c <HAL_LTDC_ConfigLayer>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000990:	f000 fa82 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	; 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000014c 	.word	0x2000014c
 80009a0:	40016800 	.word	0x40016800

080009a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <MX_SPI5_Init+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009d8:	2218      	movs	r2, #24
 80009da:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009f0:	220a      	movs	r2, #10
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_SPI5_Init+0x64>)
 80009f6:	f005 fca5 	bl	8006344 <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a00:	f000 fa4a 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001f4 	.word	0x200001f4
 8000a0c:	40015000 	.word	0x40015000

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <MX_TIM1_Init+0x9c>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a5a:	f005 fcfc 	bl	8006456 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 fa18 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a76:	f005 feb5 	bl	80067e4 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a80:	f000 fa0a 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_TIM1_Init+0x98>)
 8000a92:	f006 f8d1 	bl	8006c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a9c:	f000 f9fc 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000024c 	.word	0x2000024c
 8000aac:	40010000 	.word	0x40010000

08000ab0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_UART5_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_UART5_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_UART5_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_UART5_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_UART5_Init+0x4c>)
 8000ae8:	f006 f936 	bl	8006d58 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f9d1 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000294 	.word	0x20000294
 8000b00:	40005000 	.word	0x40005000

08000b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART1_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f006 f90c 	bl	8006d58 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f9a7 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200002d8 	.word	0x200002d8
 8000b54:	40011000 	.word	0x40011000

08000b58 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]
 8000b6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <MX_FMC_Init+0x9c>)
 8000b74:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b8a:	2210      	movs	r2, #16
 8000b8c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b90:	2240      	movs	r2, #64	; 0x40
 8000b92:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b96:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b9a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_FMC_Init+0x98>)
 8000bda:	f005 fb7f 	bl	80062dc <HAL_SDRAM_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000be4:	f000 f958 	bl	8000e98 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000031c 	.word	0x2000031c
 8000bf4:	a0000140 	.word	0xa0000140

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a73      	ldr	r2, [pc, #460]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b71      	ldr	r3, [pc, #452]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a6c      	ldr	r2, [pc, #432]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b5c      	ldr	r3, [pc, #368]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a50      	ldr	r2, [pc, #320]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2116      	movs	r1, #22
 8000cf2:	4844      	ldr	r0, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000cf4:	f002 fb1c 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000cfe:	f002 fb17 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d08:	4840      	ldr	r0, [pc, #256]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000d0a:	f002 fb11 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d14:	483e      	ldr	r0, [pc, #248]	; (8000e10 <MX_GPIO_Init+0x218>)
 8000d16:	f002 fb0b 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d1a:	2316      	movs	r3, #22
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4834      	ldr	r0, [pc, #208]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000d32:	f002 f951 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d36:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482e      	ldr	r0, [pc, #184]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000d4e:	f002 f943 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4827      	ldr	r0, [pc, #156]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000d6a:	f002 f935 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000d84:	f002 f928 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481e      	ldr	r0, [pc, #120]	; (8000e14 <MX_GPIO_Init+0x21c>)
 8000d9c:	f002 f91c 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4815      	ldr	r0, [pc, #84]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000db6:	f002 f90f 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000dd4:	f002 f900 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dd8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_GPIO_Init+0x218>)
 8000df2:	f002 f8f1 	bl	8002fd8 <HAL_GPIO_Init>

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40020400 	.word	0x40020400

08000e18 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e20:	1d39      	adds	r1, r7, #4
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	2201      	movs	r2, #1
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <__io_putchar+0x20>)
 8000e2a:	f005 ffe2 	bl	8006df2 <HAL_UART_Transmit>
	return ch;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200002d8 	.word	0x200002d8

08000e3c <go_to_application>:

static void go_to_application (void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <go_to_application+0x2c>)
 8000e44:	f00a f93c 	bl	800b0c0 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (OTA_APP_FLASH_ADDR + 4));
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <go_to_application+0x30>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (OTA_APP_FLASH_ADDR)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e54:	4806      	ldr	r0, [pc, #24]	; (8000e70 <go_to_application+0x34>)
 8000e56:	f002 fa6b 	bl	8003330 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4798      	blx	r3
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0800bee4 	.word	0x0800bee4
 8000e6c:	08020004 	.word	0x08020004
 8000e70:	40021800 	.word	0x40021800

08000e74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e86:	f001 fa59 	bl	800233c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40001000 	.word	0x40001000

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <go_to_ota_app>:
 * @param hurat uart handler receive ota
 * @param backup should back up?
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <go_to_ota_app+0x40>)
 8000eae:	f00a f907 	bl	800b0c0 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f81e 	bl	8000ef4 <ota_download_and_flash>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d009      	beq.n	8000ed2 <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <go_to_ota_app+0x44>)
 8000ec0:	f00a f8fe 	bl	800b0c0 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <go_to_ota_app+0x48>)
 8000ecc:	f002 fa30 	bl	8003330 <HAL_GPIO_WritePin>
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_NVIC_SystemReset();
    }
}
 8000ed0:	e004      	b.n	8000edc <go_to_ota_app+0x38>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <go_to_ota_app+0x4c>)
 8000ed4:	f00a f8f4 	bl	800b0c0 <puts>
      HAL_NVIC_SystemReset();
 8000ed8:	f001 fb6d 	bl	80025b6 <HAL_NVIC_SystemReset>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0800bf04 	.word	0x0800bf04
 8000ee8:	0800bf24 	.word	0x0800bf24
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	0800bf44 	.word	0x0800bf44

08000ef4 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8000f00:	4820      	ldr	r0, [pc, #128]	; (8000f84 <ota_download_and_flash+0x90>)
 8000f02:	f00a f8dd 	bl	800b0c0 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <ota_download_and_flash+0x94>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <ota_download_and_flash+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <ota_download_and_flash+0x9c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <ota_download_and_flash+0xa0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8000f1e:	f240 4209 	movw	r2, #1033	; 0x409
 8000f22:	2100      	movs	r1, #0
 8000f24:	481c      	ldr	r0, [pc, #112]	; (8000f98 <ota_download_and_flash+0xa4>)
 8000f26:	f009 ff5d 	bl	800ade4 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8000f2a:	f240 4209 	movw	r2, #1033	; 0x409
 8000f2e:	491a      	ldr	r1, [pc, #104]	; (8000f98 <ota_download_and_flash+0xa4>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f835 	bl	8000fa0 <ota_receive_chunk>
 8000f36:	4603      	mov	r3, r0
 8000f38:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8000f3a:	89bb      	ldrh	r3, [r7, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d007      	beq.n	8000f50 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8000f40:	89bb      	ldrh	r3, [r7, #12]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <ota_download_and_flash+0xa4>)
 8000f46:	f000 f90d 	bl	8001164 <ota_process_data>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e001      	b.n	8000f54 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8000f5a:	4810      	ldr	r0, [pc, #64]	; (8000f9c <ota_download_and_flash+0xa8>)
 8000f5c:	f00a f8b0 	bl	800b0c0 <puts>
			ota_send_resp(huart, OTA_NACK);
 8000f60:	2101      	movs	r1, #1
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fc0c 	bl	8001780 <ota_send_resp>
			break;
 8000f68:	e007      	b.n	8000f7a <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fc07 	bl	8001780 <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <ota_download_and_flash+0xa0>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1d1      	bne.n	8000f1e <ota_download_and_flash+0x2a>

	return ret;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0800bf70 	.word	0x0800bf70
 8000f88:	20000354 	.word	0x20000354
 8000f8c:	2000035c 	.word	0x2000035c
 8000f90:	20000358 	.word	0x20000358
 8000f94:	20000350 	.word	0x20000350
 8000f98:	20000360 	.word	0x20000360
 8000f9c:	0800bf8c 	.word	0x0800bf8c

08000fa0 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8000fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	18d1      	adds	r1, r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f005 ffa5 	bl	8006f16 <HAL_UART_Receive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8000fd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f040 809c 	bne.w	8001112 <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 8000fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2baa      	cmp	r3, #170	; 0xaa
 8000fea:	f040 8094 	bne.w	8001116 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1899      	adds	r1, r3, r2
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f005 ff88 	bl	8006f16 <HAL_UART_Receive>
 8001006:	4603      	mov	r3, r0
 8001008:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 800100a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 8083 	bne.w	800111a <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8001014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	18d1      	adds	r1, r2, r3
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	2202      	movs	r2, #2
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f005 ff78 	bl	8006f16 <HAL_UART_Receive>
 8001026:	4603      	mov	r3, r0
 8001028:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 800102a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800102e:	2b00      	cmp	r3, #0
 8001030:	d175      	bne.n	800111e <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 8001032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 800103c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103e:	3302      	adds	r3, #2
 8001040:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	847b      	strh	r3, [r7, #34]	; 0x22
 8001046:	e014      	b.n	8001072 <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8001048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1899      	adds	r1, r3, r2
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	2201      	movs	r2, #1
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f005 ff5b 	bl	8006f16 <HAL_UART_Receive>
 8001060:	4603      	mov	r3, r0
 8001062:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 8001064:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001068:	2b00      	cmp	r3, #0
 800106a:	d107      	bne.n	800107c <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 800106c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800106e:	3301      	adds	r3, #1
 8001070:	847b      	strh	r3, [r7, #34]	; 0x22
 8001072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3e6      	bcc.n	8001048 <ota_receive_chunk+0xa8>
 800107a:	e000      	b.n	800107e <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 800107c:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 800107e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001082:	2b00      	cmp	r3, #0
 8001084:	d14d      	bne.n	8001122 <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8001086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	18d1      	adds	r1, r2, r3
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	2204      	movs	r2, #4
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f005 ff3f 	bl	8006f16 <HAL_UART_Receive>
 8001098:	4603      	mov	r3, r0
 800109a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 800109c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d140      	bne.n	8001126 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 80010a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
		index +=4u;
 80010ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b0:	3304      	adds	r3, #4
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 80010b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	18d1      	adds	r1, r2, r3
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	2201      	movs	r2, #1
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f005 ff28 	bl	8006f16 <HAL_UART_Receive>
 80010c6:	4603      	mov	r3, r0
 80010c8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12b      	bne.n	800112a <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 80010d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	84ba      	strh	r2, [r7, #36]	; 0x24
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2bbb      	cmp	r3, #187	; 0xbb
 80010e2:	d002      	beq.n	80010ea <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80010e8:	e020      	b.n	800112c <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3304      	adds	r3, #4
 80010ee:	8afa      	ldrh	r2, [r7, #22]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fb70 	bl	80017d8 <ota_calcCRC>
 80010f8:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d014      	beq.n	800112c <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	69f9      	ldr	r1, [r7, #28]
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <ota_receive_chunk+0x1bc>)
 8001108:	f009 ff54 	bl	800afb4 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 800110c:	2301      	movs	r3, #1
 800110e:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001110:	e00c      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 8001112:	bf00      	nop
 8001114:	e00a      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 8001116:	bf00      	nop
 8001118:	e008      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 800111a:	bf00      	nop
 800111c:	e006      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 800111e:	bf00      	nop
 8001120:	e004      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 8001122:	bf00      	nop
 8001124:	e002      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <ota_receive_chunk+0x18c>
			break;
 800112a:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 800112c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 8001134:	2300      	movs	r3, #0
 8001136:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 8001138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	429a      	cmp	r2, r3
 800113e:	d907      	bls.n	8001150 <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <ota_receive_chunk+0x1c0>)
 8001148:	f009 ff34 	bl	800afb4 <iprintf>
															  	  max_len, index );
		index = 0u;
 800114c:	2300      	movs	r3, #0
 800114e:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 8001150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 8001152:	4618      	mov	r0, r3
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800bf9c 	.word	0x0800bf9c
 8001160:	0800bfdc 	.word	0x0800bfdc

08001164 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	b097      	sub	sp, #92	; 0x5c
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 8001170:	2301      	movs	r3, #1
 8001172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		if( (buf== NULL) || (len == 0u))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 814e 	beq.w	800141a <ota_process_data+0x2b6>
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 814a 	beq.w	800141a <ota_process_data+0x2b6>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	653b      	str	r3, [r7, #80]	; 0x50
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 800118a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d104      	bne.n	800119c <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 8001192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	f000 8141 	beq.w	800141e <ota_process_data+0x2ba>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 800119c:	4ba9      	ldr	r3, [pc, #676]	; (8001444 <ota_process_data+0x2e0>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	f200 8136 	bhi.w	8001412 <ota_process_data+0x2ae>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <ota_process_data+0x48>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011cf 	.word	0x080011cf
 80011b4:	080011fb 	.word	0x080011fb
 80011b8:	08001237 	.word	0x08001237
 80011bc:	0800135f 	.word	0x0800135f
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 80011c0:	48a1      	ldr	r0, [pc, #644]	; (8001448 <ota_process_data+0x2e4>)
 80011c2:	f009 ff7d 	bl	800b0c0 <puts>
				ret = OTA_EX_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80011cc:	e134      	b.n	8001438 <ota_process_data+0x2d4>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80011d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 8123 	bne.w	8001422 <ota_process_data+0x2be>
				{
					if( cmd->cmd == OTA_CMD_START)
 80011dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011de:	791b      	ldrb	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 811e 	bne.w	8001422 <ota_process_data+0x2be>
					{
						printf("Received OTA Start command\r\n");
 80011e6:	4899      	ldr	r0, [pc, #612]	; (800144c <ota_process_data+0x2e8>)
 80011e8:	f009 ff6a 	bl	800b0c0 <puts>
						ota_state = OTA_STATE_HEADER;
 80011ec:	4b95      	ldr	r3, [pc, #596]	; (8001444 <ota_process_data+0x2e0>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 80011f8:	e113      	b.n	8001422 <ota_process_data+0x2be>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 80011fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	2b02      	cmp	r3, #2
 8001204:	f040 810f 	bne.w	8001426 <ota_process_data+0x2c2>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8001208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a90      	ldr	r2, [pc, #576]	; (8001450 <ota_process_data+0x2ec>)
 800120e:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8001210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a8f      	ldr	r2, [pc, #572]	; (8001454 <ota_process_data+0x2f0>)
 8001216:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8001218:	4b8d      	ldr	r3, [pc, #564]	; (8001450 <ota_process_data+0x2ec>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a8d      	ldr	r2, [pc, #564]	; (8001454 <ota_process_data+0x2f0>)
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	488d      	ldr	r0, [pc, #564]	; (8001458 <ota_process_data+0x2f4>)
 8001224:	f009 fec6 	bl	800afb4 <iprintf>
													ota_fw_total_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 8001228:	4b86      	ldr	r3, [pc, #536]	; (8001444 <ota_process_data+0x2e0>)
 800122a:	2203      	movs	r2, #3
 800122c:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				}
			}
			break;
 8001234:	e0f7      	b.n	8001426 <ota_process_data+0x2c2>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	647b      	str	r3, [r7, #68]	; 0x44
				uint16_t			data_len = data->data_len;
 800123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123c:	789a      	ldrb	r2, [r3, #2]
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	4313      	orrs	r3, r2
 8001244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 800124e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	2b01      	cmp	r3, #1
 8001254:	f040 80e9 	bne.w	800142a <ota_process_data+0x2c6>

					bool is_first_block = false;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

					if( ota_fw_received_size == 0){
 800125e:	4b7f      	ldr	r3, [pc, #508]	; (800145c <ota_process_data+0x2f8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d154      	bne.n	8001310 <ota_process_data+0x1ac>
						// This is the first block
						is_first_block = true;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

						/* Read the configuration */
						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 800126c:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <ota_process_data+0x2fc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461c      	mov	r4, r3
 8001272:	f107 0608 	add.w	r6, r7, #8
 8001276:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800127a:	4635      	mov	r5, r6
 800127c:	4623      	mov	r3, r4
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001288:	3410      	adds	r4, #16
 800128a:	3610      	adds	r6, #16
 800128c:	4564      	cmp	r4, ip
 800128e:	d1f4      	bne.n	800127a <ota_process_data+0x116>

						cfg.backup_table.is_this_slot_not_valid = 1u;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* write back the updated config */
			            ret = write_cfg_to_flash( &cfg );
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f978 	bl	8001590 <write_cfg_to_flash>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 80012a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 80bf 	bne.w	800142e <ota_process_data+0x2ca>
			            {
			              break;
			            }

						if( cfg.reboot_cause == OTA_UPDATE_APP)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 80012b6:	d112      	bne.n	80012de <ota_process_data+0x17a>
						{
							printf("Backing up from previous FW version\r\n");
 80012b8:	486a      	ldr	r0, [pc, #424]	; (8001464 <ota_process_data+0x300>)
 80012ba:	f009 ff01 	bl	800b0c0 <puts>
							ex = backup_old_version();
 80012be:	f000 f9e3 	bl	8001688 <backup_old_version>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

							if (ex != HAL_OK){
 80012c8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <ota_process_data+0x174>
								printf("Unsuccessful Backup \r\n");
 80012d0:	4865      	ldr	r0, [pc, #404]	; (8001468 <ota_process_data+0x304>)
 80012d2:	f009 fef5 	bl	800b0c0 <puts>
								break;
 80012d6:	e0af      	b.n	8001438 <ota_process_data+0x2d4>
							}
							printf("Done!!!\r\n");
 80012d8:	4864      	ldr	r0, [pc, #400]	; (800146c <ota_process_data+0x308>)
 80012da:	f009 fef1 	bl	800b0c0 <puts>
						}

						cfg.backup_table.fw_crc 				= cfg.app_table.fw_crc;
 80012de:	f8d7 3012 	ldr.w	r3, [r7, #18]
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
						cfg.backup_table.fw_size				= cfg.app_table.fw_size;
 80012e4:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
						cfg.backup_table.is_this_slot_active 	= 0u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						cfg.backup_table.is_this_slot_not_valid = 0u;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* write back the updated config */
			            ret = write_cfg_to_flash( &cfg );
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f948 	bl	8001590 <write_cfg_to_flash>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 8001306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 8091 	bne.w	8001432 <ota_process_data+0x2ce>
			            }

					}

					/* Write the chunk to the Flash */
					ex = write_data_to_flash(buf+4, data_len, is_first_block);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3304      	adds	r3, #4
 8001314:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001318:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f8b3 	bl	8001488 <write_data_to_flash>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					if( ex == HAL_OK)
 8001328:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800132c:	2b00      	cmp	r3, #0
 800132e:	d17c      	bne.n	800142a <ota_process_data+0x2c6>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <ota_process_data+0x2f8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0a99      	lsrs	r1, r3, #10
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <ota_process_data+0x2ec>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0a9b      	lsrs	r3, r3, #10
 800133c:	461a      	mov	r2, r3
 800133e:	484c      	ldr	r0, [pc, #304]	; (8001470 <ota_process_data+0x30c>)
 8001340:	f009 fe38 	bl	800afb4 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <ota_process_data+0x2f8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <ota_process_data+0x2ec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d302      	bcc.n	8001356 <ota_process_data+0x1f2>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <ota_process_data+0x2e0>)
 8001352:	2204      	movs	r2, #4
 8001354:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 800135c:	e065      	b.n	800142a <ota_process_data+0x2c6>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	64fb      	str	r3, [r7, #76]	; 0x4c

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8001362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d165      	bne.n	8001436 <ota_process_data+0x2d2>
				{
					if( cmd->cmd )
 800136a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d061      	beq.n	8001436 <ota_process_data+0x2d2>
					{
						printf("Received OTA END COMMAND\r\n");
 8001372:	4840      	ldr	r0, [pc, #256]	; (8001474 <ota_process_data+0x310>)
 8001374:	f009 fea4 	bl	800b0c0 <puts>

						printf("Validating the received Binary....\r\n");
 8001378:	483f      	ldr	r0, [pc, #252]	; (8001478 <ota_process_data+0x314>)
 800137a:	f009 fea1 	bl	800b0c0 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_APP_FLASH_ADDR
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <ota_process_data+0x2ec>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4619      	mov	r1, r3
 8001384:	483d      	ldr	r0, [pc, #244]	; (800147c <ota_process_data+0x318>)
 8001386:	f000 fa27 	bl	80017d8 <ota_calcCRC>
 800138a:	64b8      	str	r0, [r7, #72]	; 0x48
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <ota_process_data+0x2f0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001392:	429a      	cmp	r2, r3
 8001394:	d007      	beq.n	80013a6 <ota_process_data+0x242>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <ota_process_data+0x2f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800139e:	4838      	ldr	r0, [pc, #224]	; (8001480 <ota_process_data+0x31c>)
 80013a0:	f009 fe08 	bl	800afb4 <iprintf>
 80013a4:	e048      	b.n	8001438 <ota_process_data+0x2d4>
																			cal_crc, ota_fw_crc);
							break;
						}

						printf("Validated Successfully!\r\n");
 80013a6:	4837      	ldr	r0, [pc, #220]	; (8001484 <ota_process_data+0x320>)
 80013a8:	f009 fe8a 	bl	800b0c0 <puts>


						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80013ac:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <ota_process_data+0x2fc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	461c      	mov	r4, r3
 80013b2:	f107 0608 	add.w	r6, r7, #8
 80013b6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013ba:	4635      	mov	r5, r6
 80013bc:	4623      	mov	r3, r4
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	3410      	adds	r4, #16
 80013ca:	3610      	adds	r6, #16
 80013cc:	4564      	cmp	r4, ip
 80013ce:	d1f4      	bne.n	80013ba <ota_process_data+0x256>

						// update information
						cfg.app_table.fw_crc					= cal_crc;
 80013d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013d2:	f8c7 3012 	str.w	r3, [r7, #18]
						cfg.app_table.fw_size					= ota_fw_total_size;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <ota_process_data+0x2ec>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8c7 300e 	str.w	r3, [r7, #14]
						cfg.app_table.is_this_slot_not_valid	= 0u;
 80013de:	2300      	movs	r3, #0
 80013e0:	733b      	strb	r3, [r7, #12]
						cfg.app_table.is_this_slot_active		= 0u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	737b      	strb	r3, [r7, #13]

						// update the reboot reason
						cfg.reboot_cause = OTA_NORMAL_BOOT;
 80013e6:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 80013ea:	60bb      	str	r3, [r7, #8]

						// Write config to flash
						ret = write_cfg_to_flash( &cfg );
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f8cd 	bl	8001590 <write_cfg_to_flash>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if( ret == OTA_EX_OK )
 80013fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001400:	2b00      	cmp	r3, #0
 8001402:	d118      	bne.n	8001436 <ota_process_data+0x2d2>
						{
							ota_state = OTA_STATE_IDLE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <ota_process_data+0x2e0>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
							ret = OTA_EX_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						}
					}
				}
			}
			break;
 8001410:	e011      	b.n	8001436 <ota_process_data+0x2d2>

			default:
			{
				ret = OTA_EX_ERR;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8001418:	e00e      	b.n	8001438 <ota_process_data+0x2d4>
		};
 800141a:	bf00      	nop
 800141c:	e00c      	b.n	8001438 <ota_process_data+0x2d4>
				break;
 800141e:	bf00      	nop
 8001420:	e00a      	b.n	8001438 <ota_process_data+0x2d4>
			break;
 8001422:	bf00      	nop
 8001424:	e008      	b.n	8001438 <ota_process_data+0x2d4>
			break;
 8001426:	bf00      	nop
 8001428:	e006      	b.n	8001438 <ota_process_data+0x2d4>
			break;
 800142a:	bf00      	nop
 800142c:	e004      	b.n	8001438 <ota_process_data+0x2d4>
			              break;
 800142e:	bf00      	nop
 8001430:	e002      	b.n	8001438 <ota_process_data+0x2d4>
			              break;
 8001432:	bf00      	nop
 8001434:	e000      	b.n	8001438 <ota_process_data+0x2d4>
			break;
 8001436:	bf00      	nop
	}while(false);

	return ret;
 8001438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800143c:	4618      	mov	r0, r3
 800143e:	375c      	adds	r7, #92	; 0x5c
 8001440:	46bd      	mov	sp, r7
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001444:	20000350 	.word	0x20000350
 8001448:	0800c020 	.word	0x0800c020
 800144c:	0800c034 	.word	0x0800c034
 8001450:	20000354 	.word	0x20000354
 8001454:	20000358 	.word	0x20000358
 8001458:	0800c050 	.word	0x0800c050
 800145c:	2000035c 	.word	0x2000035c
 8001460:	20000000 	.word	0x20000000
 8001464:	0800c08c 	.word	0x0800c08c
 8001468:	0800c0b4 	.word	0x0800c0b4
 800146c:	0800c0cc 	.word	0x0800c0cc
 8001470:	0800c0d8 	.word	0x0800c0d8
 8001474:	0800c0e4 	.word	0x0800c0e4
 8001478:	0800c100 	.word	0x0800c100
 800147c:	08020000 	.word	0x08020000
 8001480:	0800c124 	.word	0x0800c124
 8001484:	0800c168 	.word	0x0800c168

08001488 <write_data_to_flash>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_flash(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 800149c:	f001 faea 	bl	8002a74 <HAL_FLASH_Unlock>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 80014a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d15d      	bne.n	800156a <write_data_to_flash+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01f      	beq.n	80014f4 <write_data_to_flash+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 80014b4:	4831      	ldr	r0, [pc, #196]	; (800157c <write_data_to_flash+0xf4>)
 80014b6:	f009 fe03 	bl	800b0c0 <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_APP_SECTOR;
 80014be:	2305      	movs	r3, #5
 80014c0:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_APP_NB_SECTOR;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80014ca:	f107 0214 	add.w	r2, r7, #20
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fc3f 	bl	8002d58 <HAL_FLASHEx_Erase>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 80014e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <write_data_to_flash+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4824      	ldr	r0, [pc, #144]	; (8001580 <write_data_to_flash+0xf8>)
 80014ee:	f009 fd61 	bl	800afb4 <iprintf>
 80014f2:	e03d      	b.n	8001570 <write_data_to_flash+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_APP_FLASH_ADDR;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <write_data_to_flash+0xfc>)
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
 80014fc:	e024      	b.n	8001548 <write_data_to_flash+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <write_data_to_flash+0x100>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 8001506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2200      	movs	r2, #0
 8001512:	461c      	mov	r4, r3
 8001514:	4615      	mov	r5, r2
 8001516:	4622      	mov	r2, r4
 8001518:	462b      	mov	r3, r5
 800151a:	2000      	movs	r0, #0
 800151c:	f001 fa56 	bl	80029cc <HAL_FLASH_Program>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 8001526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800152a:	2b00      	cmp	r3, #0
 800152c:	d105      	bne.n	800153a <write_data_to_flash+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <write_data_to_flash+0x100>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <write_data_to_flash+0x100>)
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e003      	b.n	8001542 <write_data_to_flash+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <write_data_to_flash+0x104>)
 800153c:	f009 fdc0 	bl	800b0c0 <puts>
				break;
 8001540:	e006      	b.n	8001550 <write_data_to_flash+0xc8>
		for( int i = 0; i < data_len; i++)
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	3301      	adds	r3, #1
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8d6      	bhi.n	80014fe <write_data_to_flash+0x76>
			}
		}

		if( ret != HAL_OK )
 8001550:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <write_data_to_flash+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 8001558:	f001 faae 	bl	8002ab8 <HAL_FLASH_Lock>
 800155c:	4603      	mov	r3, r0
 800155e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001566:	2b00      	cmp	r3, #0
 8001568:	e002      	b.n	8001570 <write_data_to_flash+0xe8>
			break;
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <write_data_to_flash+0xe8>
			break;
 800156e:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 8001570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001574:	4618      	mov	r0, r3
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bdb0      	pop	{r4, r5, r7, pc}
 800157c:	0800c184 	.word	0x0800c184
 8001580:	0800c1a8 	.word	0x0800c1a8
 8001584:	08020000 	.word	0x08020000
 8001588:	2000035c 	.word	0x2000035c
 800158c:	0800c1d0 	.word	0x0800c1d0

08001590 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d05f      	beq.n	8001664 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 80015a4:	f001 fa66 	bl	8002a74 <HAL_FLASH_Unlock>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d158      	bne.n	8001668 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	f001 fa8d 	bl	8002ad8 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 80015c2:	2304      	movs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015ce:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <write_cfg_to_flash+0xf0>)
 80015d0:	2273      	movs	r2, #115	; 0x73
 80015d2:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80015d4:	f107 020c 	add.w	r2, r7, #12
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fbba 	bl	8002d58 <HAL_FLASHEx_Erase>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d13c      	bne.n	800166c <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fa:	e01f      	b.n	800163c <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001602:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 8001606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2200      	movs	r2, #0
 8001612:	461c      	mov	r4, r3
 8001614:	4615      	mov	r5, r2
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	2000      	movs	r0, #0
 800161c:	f001 f9d6 	bl	80029cc <HAL_FLASH_Program>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 8001626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <write_cfg_to_flash+0xf4>)
 8001630:	f009 fd46 	bl	800b0c0 <puts>
				break;
 8001634:	e005      	b.n	8001642 <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	3301      	adds	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	2b2f      	cmp	r3, #47	; 0x2f
 8001640:	d9dc      	bls.n	80015fc <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001642:	f04f 30ff 	mov.w	r0, #4294967295
 8001646:	f001 fa47 	bl	8002ad8 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 800164a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10e      	bne.n	8001670 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8001652:	f001 fa31 	bl	8002ab8 <HAL_FLASH_Lock>
 8001656:	4603      	mov	r3, r0
 8001658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 800165c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001660:	2b00      	cmp	r3, #0
 8001662:	e006      	b.n	8001672 <write_cfg_to_flash+0xe2>
			break;
 8001664:	bf00      	nop
 8001666:	e004      	b.n	8001672 <write_cfg_to_flash+0xe2>
			break;
 8001668:	bf00      	nop
 800166a:	e002      	b.n	8001672 <write_cfg_to_flash+0xe2>
			break;
 800166c:	bf00      	nop
 800166e:	e000      	b.n	8001672 <write_cfg_to_flash+0xe2>
	      break;
 8001670:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 8001672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001676:	4618      	mov	r0, r3
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bdb0      	pop	{r4, r5, r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00
 8001684:	0800c1e4 	.word	0x0800c1e4

08001688 <backup_old_version>:

HAL_StatusTypeDef backup_old_version()
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		ret = HAL_FLASH_Unlock();
 8001694:	f001 f9ee 	bl	8002a74 <HAL_FLASH_Unlock>
 8001698:	4603      	mov	r3, r0
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 800169e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d159      	bne.n	800175a <backup_old_version+0xd2>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
 80016aa:	f001 fa15 	bl	8002ad8 <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
		EraseInitStruct.Sector			= OTA_SLOT_SECTOR;
 80016b2:	2311      	movs	r3, #17
 80016b4:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.NbSectors		= OTA_SLOT_NB_SECTOR;
 80016b6:	2307      	movs	r3, #7
 80016b8:	613b      	str	r3, [r7, #16]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <backup_old_version+0xe8>)
 80016c0:	2273      	movs	r2, #115	; 0x73
 80016c2:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80016c4:	463a      	mov	r2, r7
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fb44 	bl	8002d58 <HAL_FLASHEx_Erase>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80016d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d13f      	bne.n	800175e <backup_old_version+0xd6>
		{
			break;
		}

		// Write the old app
		OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <backup_old_version+0xec>)
 80016e0:	61fb      	str	r3, [r7, #28]
		uint8_t *data = (uint8_t *) OTA_APP_FLASH_ADDR;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <backup_old_version+0xf0>)
 80016e4:	61bb      	str	r3, [r7, #24]
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
 80016ea:	e01f      	b.n	800172c <backup_old_version+0xa4>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	f103 6101 	add.w	r1, r3, #135266304	; 0x8100000
 80016f2:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_SLOT_FLASH_ADDR + i,
									data[i]);
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2200      	movs	r2, #0
 8001702:	461c      	mov	r4, r3
 8001704:	4615      	mov	r5, r2
 8001706:	4622      	mov	r2, r4
 8001708:	462b      	mov	r3, r5
 800170a:	2000      	movs	r0, #0
 800170c:	f001 f95e 	bl	80029cc <HAL_FLASH_Program>
 8001710:	4603      	mov	r3, r0
 8001712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( ret != HAL_OK )
 8001716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <backup_old_version+0x9e>
			{
				printf("Slot Flash Write Error\r\n");
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <backup_old_version+0xf4>)
 8001720:	f009 fcce 	bl	800b0c0 <puts>
				break;
 8001724:	e008      	b.n	8001738 <backup_old_version+0xb0>
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	3301      	adds	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001732:	6a3a      	ldr	r2, [r7, #32]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3d9      	bcc.n	80016ec <backup_old_version+0x64>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f001 f9cc 	bl	8002ad8 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10c      	bne.n	8001762 <backup_old_version+0xda>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8001748:	f001 f9b6 	bl	8002ab8 <HAL_FLASH_Lock>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    if( ret != HAL_OK )
 8001752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001756:	2b00      	cmp	r3, #0
 8001758:	e004      	b.n	8001764 <backup_old_version+0xdc>
			break;
 800175a:	bf00      	nop
 800175c:	e002      	b.n	8001764 <backup_old_version+0xdc>
			break;
 800175e:	bf00      	nop
 8001760:	e000      	b.n	8001764 <backup_old_version+0xdc>
	      break;
 8001762:	bf00      	nop
	    }


	}while(false);

	return ret;
 8001764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001768:	4618      	mov	r0, r3
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bdb0      	pop	{r4, r5, r7, pc}
 8001770:	40023c00 	.word	0x40023c00
 8001774:	08010000 	.word	0x08010000
 8001778:	08020000 	.word	0x08020000
 800177c:	0800c204 	.word	0x0800c204

08001780 <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	811a      	strh	r2, [r3, #8]
 8001798:	23aa      	movs	r3, #170	; 0xaa
 800179a:	733b      	strb	r3, [r7, #12]
 800179c:	2303      	movs	r3, #3
 800179e:	737b      	strb	r3, [r7, #13]
 80017a0:	2301      	movs	r3, #1
 80017a2:	81fb      	strh	r3, [r7, #14]
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	743b      	strb	r3, [r7, #16]
 80017a8:	23bb      	movs	r3, #187	; 0xbb
 80017aa:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	3304      	adds	r3, #4
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f80f 	bl	80017d8 <ota_calcCRC>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 80017c0:	f107 010c 	add.w	r1, r7, #12
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	220a      	movs	r2, #10
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f005 fb11 	bl	8006df2 <HAL_UART_Transmit>

}
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e014      	b.n	8001818 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	0e1b      	lsrs	r3, r3, #24
 80017f2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	4053      	eors	r3, r2
 8001800:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	021a      	lsls	r2, r3, #8
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	4909      	ldr	r1, [pc, #36]	; (8001830 <ota_calcCRC+0x58>)
 800180a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800180e:	4053      	eors	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e6      	bcc.n	80017ee <ota_calcCRC+0x16>
    }
    return Checksum;
 8001820:	697b      	ldr	r3, [r7, #20]
}
 8001822:	4618      	mov	r0, r3
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	0800c220 	.word	0x0800c220

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_MspInit+0x4c>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x4c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x4c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_CRC_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10d      	bne.n	80018b2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_CRC_MspInit+0x40>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_CRC_MspInit+0x40>)
 80018a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_CRC_MspInit+0x40>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023000 	.word	0x40023000
 80018c4:	40023800 	.word	0x40023800

080018c8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_DMA2D_MspInit+0x48>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d115      	bne.n	8001906 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_DMA2D_MspInit+0x4c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <HAL_DMA2D_MspInit+0x4c>)
 80018e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_DMA2D_MspInit+0x4c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2105      	movs	r1, #5
 80018fa:	205a      	movs	r0, #90	; 0x5a
 80018fc:	f000 fe31 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001900:	205a      	movs	r0, #90	; 0x5a
 8001902:	f000 fe4a 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	4002b000 	.word	0x4002b000
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a29      	ldr	r2, [pc, #164]	; (80019dc <HAL_I2C_MspInit+0xc4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d14b      	bne.n	80019d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a27      	ldr	r2, [pc, #156]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001978:	2312      	movs	r3, #18
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001984:	2304      	movs	r3, #4
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <HAL_I2C_MspInit+0xcc>)
 8001990:	f001 fb22 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019a6:	2304      	movs	r3, #4
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <HAL_I2C_MspInit+0xd0>)
 80019b2:	f001 fb11 	bl	8002fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 80019c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_I2C_MspInit+0xc8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40005c00 	.word	0x40005c00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000

080019ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09a      	sub	sp, #104	; 0x68
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a08:	2230      	movs	r2, #48	; 0x30
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f009 f9e9 	bl	800ade4 <memset>
  if(hltdc->Instance==LTDC)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a85      	ldr	r2, [pc, #532]	; (8001c2c <HAL_LTDC_MspInit+0x240>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f040 8102 	bne.w	8001c22 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8001a22:	2331      	movs	r3, #49	; 0x31
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8001a26:	2302      	movs	r3, #2
 8001a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fa92 	bl	8005f5c <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001a3e:	f7ff fa2b 	bl	8000e98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a5a:	623b      	str	r3, [r7, #32]
 8001a5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a68:	f043 0320 	orr.w	r3, r3, #32
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b6c      	ldr	r3, [pc, #432]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a6b      	ldr	r2, [pc, #428]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a64      	ldr	r2, [pc, #400]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a5d      	ldr	r2, [pc, #372]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_LTDC_MspInit+0x244>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b18:	230e      	movs	r3, #14
 8001b1a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b20:	4619      	mov	r1, r3
 8001b22:	4844      	ldr	r0, [pc, #272]	; (8001c34 <HAL_LTDC_MspInit+0x248>)
 8001b24:	f001 fa58 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001b28:	f641 0358 	movw	r3, #6232	; 0x1858
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3a:	230e      	movs	r3, #14
 8001b3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b42:	4619      	mov	r1, r3
 8001b44:	483c      	ldr	r0, [pc, #240]	; (8001c38 <HAL_LTDC_MspInit+0x24c>)
 8001b46:	f001 fa47 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b5a:	2309      	movs	r3, #9
 8001b5c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b62:	4619      	mov	r1, r3
 8001b64:	4835      	ldr	r0, [pc, #212]	; (8001c3c <HAL_LTDC_MspInit+0x250>)
 8001b66:	f001 fa37 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001b6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b6e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b7c:	230e      	movs	r3, #14
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b84:	4619      	mov	r1, r3
 8001b86:	482d      	ldr	r0, [pc, #180]	; (8001c3c <HAL_LTDC_MspInit+0x250>)
 8001b88:	f001 fa26 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001b8c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b9e:	230e      	movs	r3, #14
 8001ba0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ba2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4825      	ldr	r0, [pc, #148]	; (8001c40 <HAL_LTDC_MspInit+0x254>)
 8001baa:	f001 fa15 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001bae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bc0:	230e      	movs	r3, #14
 8001bc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481e      	ldr	r0, [pc, #120]	; (8001c44 <HAL_LTDC_MspInit+0x258>)
 8001bcc:	f001 fa04 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001bd0:	2348      	movs	r3, #72	; 0x48
 8001bd2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001be0:	230e      	movs	r3, #14
 8001be2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001be8:	4619      	mov	r1, r3
 8001bea:	4817      	ldr	r0, [pc, #92]	; (8001c48 <HAL_LTDC_MspInit+0x25c>)
 8001bec:	f001 f9f4 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001bf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bf4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c02:	2309      	movs	r3, #9
 8001c04:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480c      	ldr	r0, [pc, #48]	; (8001c40 <HAL_LTDC_MspInit+0x254>)
 8001c0e:	f001 f9e3 	bl	8002fd8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	2058      	movs	r0, #88	; 0x58
 8001c18:	f000 fca3 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c1c:	2058      	movs	r0, #88	; 0x58
 8001c1e:	f000 fcbc 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3768      	adds	r7, #104	; 0x68
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40016800 	.word	0x40016800
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_SPI_MspInit+0x84>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12c      	bne.n	8001cc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001ca6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cb8:	2305      	movs	r3, #5
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_SPI_MspInit+0x8c>)
 8001cc4:	f001 f988 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40015000 	.word	0x40015000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021400 	.word	0x40021400

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_TIM_Base_MspInit+0x3c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10d      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a42      	ldr	r2, [pc, #264]	; (8001e48 <HAL_UART_MspInit+0x128>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d14b      	bne.n	8001dda <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a40      	ldr	r2, [pc, #256]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a32      	ldr	r2, [pc, #200]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001da8:	2308      	movs	r3, #8
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4827      	ldr	r0, [pc, #156]	; (8001e50 <HAL_UART_MspInit+0x130>)
 8001db4:	f001 f910 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001db8:	2304      	movs	r3, #4
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4820      	ldr	r0, [pc, #128]	; (8001e54 <HAL_UART_MspInit+0x134>)
 8001dd4:	f001 f900 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dd8:	e031      	b.n	8001e3e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_UART_MspInit+0x138>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d12c      	bne.n	8001e3e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6453      	str	r3, [r2, #68]	; 0x44
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_UART_MspInit+0x12c>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4808      	ldr	r0, [pc, #32]	; (8001e5c <HAL_UART_MspInit+0x13c>)
 8001e3a:	f001 f8cd 	bl	8002fd8 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40005000 	.word	0x40005000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_FMC_MspInit+0x104>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d16f      	bne.n	8001f5c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_FMC_MspInit+0x104>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_FMC_MspInit+0x108>)
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	4a37      	ldr	r2, [pc, #220]	; (8001f68 <HAL_FMC_MspInit+0x108>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6393      	str	r3, [r2, #56]	; 0x38
 8001e92:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <HAL_FMC_MspInit+0x108>)
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001ea2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	482c      	ldr	r0, [pc, #176]	; (8001f6c <HAL_FMC_MspInit+0x10c>)
 8001eba:	f001 f88d 	bl	8002fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ece:	230c      	movs	r3, #12
 8001ed0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4826      	ldr	r0, [pc, #152]	; (8001f70 <HAL_FMC_MspInit+0x110>)
 8001ed8:	f001 f87e 	bl	8002fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001edc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001ee0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eee:	230c      	movs	r3, #12
 8001ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481f      	ldr	r0, [pc, #124]	; (8001f74 <HAL_FMC_MspInit+0x114>)
 8001ef8:	f001 f86e 	bl	8002fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001efc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001f00:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f0e:	230c      	movs	r3, #12
 8001f10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4818      	ldr	r0, [pc, #96]	; (8001f78 <HAL_FMC_MspInit+0x118>)
 8001f18:	f001 f85e 	bl	8002fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001f1c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001f20:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f2e:	230c      	movs	r3, #12
 8001f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <HAL_FMC_MspInit+0x11c>)
 8001f38:	f001 f84e 	bl	8002fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001f3c:	2360      	movs	r3, #96	; 0x60
 8001f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	480a      	ldr	r0, [pc, #40]	; (8001f80 <HAL_FMC_MspInit+0x120>)
 8001f56:	f001 f83f 	bl	8002fd8 <HAL_GPIO_Init>
 8001f5a:	e000      	b.n	8001f5e <HAL_FMC_MspInit+0xfe>
    return;
 8001f5c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000076c 	.word	0x2000076c
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40021400 	.word	0x40021400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001f8c:	f7ff ff68 	bl	8001e60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_InitTick+0xe4>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <HAL_InitTick+0xe4>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_InitTick+0xe4>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 ff92 	bl	8005ef8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fde:	f003 ff63 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 8001fe2:	6378      	str	r0, [r7, #52]	; 0x34
 8001fe4:	e004      	b.n	8001ff0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fe6:	f003 ff5f 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 8001fea:	4603      	mov	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_InitTick+0xe8>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_InitTick+0xec>)
 8002000:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_InitTick+0xf0>)
 8002002:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_InitTick+0xec>)
 8002006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800200a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800200c:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_InitTick+0xec>)
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_InitTick+0xec>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_InitTick+0xec>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_InitTick+0xec>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <HAL_InitTick+0xec>)
 8002026:	f004 fa16 	bl	8006456 <HAL_TIM_Base_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11b      	bne.n	8002070 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002038:	4812      	ldr	r0, [pc, #72]	; (8002084 <HAL_InitTick+0xec>)
 800203a:	f004 fa5b 	bl	80064f4 <HAL_TIM_Base_Start_IT>
 800203e:	4603      	mov	r3, r0
 8002040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002048:	2b00      	cmp	r3, #0
 800204a:	d111      	bne.n	8002070 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800204c:	2036      	movs	r0, #54	; 0x36
 800204e:	f000 faa4 	bl	800259a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d808      	bhi.n	800206a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	2036      	movs	r0, #54	; 0x36
 800205e:	f000 fa80 	bl	8002562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_InitTick+0xf4>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e002      	b.n	8002070 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002074:	4618      	mov	r0, r3
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	431bde83 	.word	0x431bde83
 8002084:	20000770 	.word	0x20000770
 8002088:	40001000 	.word	0x40001000
 800208c:	20000008 	.word	0x20000008

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM6_DAC_IRQHandler+0x10>)
 80020ee:	f004 fa71 	bl	80065d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000770 	.word	0x20000770

080020fc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <OTG_HS_IRQHandler+0x10>)
 8002102:	f001 fb99 	bl	8003838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000bbc 	.word	0x20000bbc

08002110 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <LTDC_IRQHandler+0x10>)
 8002116:	f002 ffbf 	bl	8005098 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000014c 	.word	0x2000014c

08002124 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <DMA2D_IRQHandler+0x10>)
 800212a:	f000 faad 	bl	8002688 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200000b8 	.word	0x200000b8

08002138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e00a      	b.n	8002160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214a:	f3af 8000 	nop.w
 800214e:	4601      	mov	r1, r0
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf0      	blt.n	800214a <_read+0x12>
  }

  return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e009      	b.n	8002198 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fe43 	bl	8000e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	dbf1      	blt.n	8002184 <_write+0x12>
  }
  return len;
 80021a0:	687b      	ldr	r3, [r7, #4]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_close>:

int _close(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d2:	605a      	str	r2, [r3, #4]
  return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_isatty>:

int _isatty(int file)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800221c:	4a14      	ldr	r2, [pc, #80]	; (8002270 <_sbrk+0x5c>)
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <_sbrk+0x60>)
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_sbrk+0x64>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <_sbrk+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	429a      	cmp	r2, r3
 8002242:	d207      	bcs.n	8002254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002244:	f008 fd94 	bl	800ad70 <__errno>
 8002248:	4603      	mov	r3, r0
 800224a:	220c      	movs	r2, #12
 800224c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	e009      	b.n	8002268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <_sbrk+0x64>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <_sbrk+0x64>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <_sbrk+0x64>)
 8002264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20030000 	.word	0x20030000
 8002274:	00000400 	.word	0x00000400
 8002278:	200007b8 	.word	0x200007b8
 800227c:	20000ed0 	.word	0x20000ed0

08002280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <SystemInit+0x20>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <SystemInit+0x20>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022dc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a8:	480d      	ldr	r0, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022aa:	490e      	ldr	r1, [pc, #56]	; (80022e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ac:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022c0:	4c0b      	ldr	r4, [pc, #44]	; (80022f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ce:	f7ff ffd7 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f008 fd53 	bl	800ad7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022d6:	f7fe f95d 	bl	8000594 <main>
  bx  lr    
 80022da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022e8:	0800c6e0 	.word	0x0800c6e0
  ldr r2, =_sbss
 80022ec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022f0:	20000ed0 	.word	0x20000ed0

080022f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>
	...

080022f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_Init+0x40>)
 8002302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_Init+0x40>)
 800230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_Init+0x40>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f913 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002326:	200f      	movs	r0, #15
 8002328:	f7ff fe36 	bl	8001f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232c:	f7ff fa82 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x20>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x24>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <HAL_IncTick+0x24>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000000c 	.word	0x2000000c
 8002360:	200007bc 	.word	0x200007bc

08002364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return uwTick;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200007bc 	.word	0x200007bc

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff ffee 	bl	8002364 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_Delay+0x44>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a2:	bf00      	nop
 80023a4:	f7ff ffde 	bl	8002364 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000000c 	.word	0x2000000c

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002524:	f3bf 8f4f 	dsb	sy
}
 8002528:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <__NVIC_SystemReset+0x24>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002532:	4904      	ldr	r1, [pc, #16]	; (8002544 <__NVIC_SystemReset+0x24>)
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <__NVIC_SystemReset+0x28>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800253a:	f3bf 8f4f 	dsb	sy
}
 800253e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <__NVIC_SystemReset+0x20>
 8002544:	e000ed00 	.word	0xe000ed00
 8002548:	05fa0004 	.word	0x05fa0004

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff35 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff4a 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff9a 	bl	80024b8 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff69 	bl	8002464 <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff3d 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025ba:	f7ff ffb1 	bl	8002520 <__NVIC_SystemReset>

080025be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00e      	b.n	80025ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	795b      	ldrb	r3, [r3, #5]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff f94f 	bl	8001884 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e03b      	b.n	8002680 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff f953 	bl	80018c8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	f023 0107 	bic.w	r1, r3, #7
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68d1      	ldr	r1, [r2, #12]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d026      	beq.n	80026f8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d021      	beq.n	80026f8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2201      	movs	r2, #1
 80026d6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d026      	beq.n	8002750 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d021      	beq.n	8002750 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2220      	movs	r2, #32
 8002722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	f043 0202 	orr.w	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2204      	movs	r2, #4
 8002734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d026      	beq.n	80027a8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002760:	2b00      	cmp	r3, #0
 8002762:	d021      	beq.n	80027a8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002772:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2208      	movs	r2, #8
 800277a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	f043 0204 	orr.w	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2204      	movs	r2, #4
 800278c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d013      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f853 	bl	8002880 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d024      	beq.n	800282e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01f      	beq.n	800282e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2202      	movs	r2, #2
 8002804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01f      	beq.n	8002878 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01a      	beq.n	8002878 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f80e 	bl	8002894 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA2D_ConfigLayer+0x20>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e079      	b.n	80029bc <HAL_DMA2D_ConfigLayer+0x114>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	3318      	adds	r3, #24
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80028f2:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80028f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b0a      	cmp	r3, #10
 80028fc:	d003      	beq.n	8002906 <HAL_DMA2D_ConfigLayer+0x5e>
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b09      	cmp	r3, #9
 8002904:	d107      	bne.n	8002916 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e005      	b.n	8002922 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d120      	bne.n	800296a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	43db      	mvns	r3, r3
 8002932:	ea02 0103 	and.w	r1, r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	430a      	orrs	r2, r1
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b0a      	cmp	r3, #10
 8002950:	d003      	beq.n	800295a <HAL_DMA2D_ConfigLayer+0xb2>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b09      	cmp	r3, #9
 8002958:	d127      	bne.n	80029aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
 8002968:	e01f      	b.n	80029aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	43db      	mvns	r3, r3
 8002974:	ea02 0103 	and.w	r1, r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	430a      	orrs	r2, r1
 8002980:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b0a      	cmp	r3, #10
 8002992:	d003      	beq.n	800299c <HAL_DMA2D_ConfigLayer+0xf4>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d106      	bne.n	80029aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80029a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	ff03000f 	.word	0xff03000f

080029cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_FLASH_Program+0xa0>)
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_FLASH_Program+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e03b      	b.n	8002a62 <HAL_FLASH_Program+0x96>
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_FLASH_Program+0xa0>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029f4:	f000 f870 	bl	8002ad8 <FLASH_WaitForLastOperation>
 80029f8:	4603      	mov	r3, r0
 80029fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12b      	bne.n	8002a5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002a08:	783b      	ldrb	r3, [r7, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68b8      	ldr	r0, [r7, #8]
 8002a0e:	f000 f91b 	bl	8002c48 <FLASH_Program_Byte>
 8002a12:	e016      	b.n	8002a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002a1a:	883b      	ldrh	r3, [r7, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f000 f8ee 	bl	8002c00 <FLASH_Program_HalfWord>
 8002a24:	e00d      	b.n	8002a42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d105      	bne.n	8002a38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 f8c3 	bl	8002bbc <FLASH_Program_Word>
 8002a36:	e004      	b.n	8002a42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	f000 f88b 	bl	8002b58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a46:	f000 f847 	bl	8002ad8 <FLASH_WaitForLastOperation>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_FLASH_Program+0xa4>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_FLASH_Program+0xa4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_FLASH_Program+0xa0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200007c0 	.word	0x200007c0
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_FLASH_Unlock+0x38>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da0b      	bge.n	8002a9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_FLASH_Unlock+0x38>)
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_FLASH_Unlock+0x3c>)
 8002a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_FLASH_Unlock+0x38>)
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_FLASH_Unlock+0x40>)
 8002a90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_FLASH_Unlock+0x38>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da01      	bge.n	8002a9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40023c00 	.word	0x40023c00
 8002ab0:	45670123 	.word	0x45670123
 8002ab4:	cdef89ab 	.word	0xcdef89ab

08002ab8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_FLASH_Lock+0x1c>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_FLASH_Lock+0x1c>)
 8002ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40023c00 	.word	0x40023c00

08002ad8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <FLASH_WaitForLastOperation+0x78>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002aea:	f7ff fc3b 	bl	8002364 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002af0:	e010      	b.n	8002b14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d00c      	beq.n	8002b14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <FLASH_WaitForLastOperation+0x38>
 8002b00:	f7ff fc30 	bl	8002364 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d201      	bcs.n	8002b14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e019      	b.n	8002b48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <FLASH_WaitForLastOperation+0x7c>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e8      	bne.n	8002af2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <FLASH_WaitForLastOperation+0x7c>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <FLASH_WaitForLastOperation+0x7c>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <FLASH_WaitForLastOperation+0x7c>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b3e:	f000 f8a5 	bl	8002c8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
  
}  
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200007c0 	.word	0x200007c0
 8002b54:	40023c00 	.word	0x40023c00

08002b58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <FLASH_Program_DoubleWord+0x60>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002b8e:	f3bf 8f6f 	isb	sy
}
 8002b92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	68f9      	ldr	r1, [r7, #12]
 8002ba6:	3104      	adds	r1, #4
 8002ba8:	4613      	mov	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40023c00 	.word	0x40023c00

08002bbc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002bd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	4a06      	ldr	r2, [pc, #24]	; (8002bfc <FLASH_Program_Word+0x40>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <FLASH_Program_HalfWord+0x44>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	801a      	strh	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <FLASH_Program_Byte+0x40>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	701a      	strb	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00

08002c8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002c90:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f043 0310 	orr.w	r3, r3, #16
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002ca6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002ca8:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002caa:	2210      	movs	r2, #16
 8002cac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
 8002cc2:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002cc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002cc8:	2220      	movs	r2, #32
 8002cca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002ccc:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002ce2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002d00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002d02:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002d1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f043 0320 	orr.w	r3, r3, #32
 8002d3c:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <FLASH_SetErrorCode+0xc8>)
 8002d3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <FLASH_SetErrorCode+0xc4>)
 8002d42:	2202      	movs	r2, #2
 8002d44:	60da      	str	r2, [r3, #12]
  }
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	200007c0 	.word	0x200007c0

08002d58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_FLASHEx_Erase+0xdc>)
 8002d6c:	7e1b      	ldrb	r3, [r3, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_FLASHEx_Erase+0x1e>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e05a      	b.n	8002e2c <HAL_FLASHEx_Erase+0xd4>
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <HAL_FLASHEx_Erase+0xdc>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d80:	f7ff feaa 	bl	8002ad8 <FLASH_WaitForLastOperation>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d14a      	bne.n	8002e24 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d117      	bne.n	8002dce <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f000 f846 	bl	8002e3c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002db0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002db4:	f7ff fe90 	bl	8002ad8 <FLASH_WaitForLastOperation>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_FLASHEx_Erase+0xe0>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <HAL_FLASHEx_Erase+0xe0>)
 8002dc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dc6:	f023 0304 	bic.w	r3, r3, #4
 8002dca:	6113      	str	r3, [r2, #16]
 8002dcc:	e028      	b.n	8002e20 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	e01c      	b.n	8002e10 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	f000 f866 	bl	8002eb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002de8:	f7ff fe76 	bl	8002ad8 <FLASH_WaitForLastOperation>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_FLASHEx_Erase+0xe0>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_FLASHEx_Erase+0xe0>)
 8002df6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002dfa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	601a      	str	r2, [r3, #0]
          break;
 8002e08:	e00a      	b.n	8002e20 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4413      	add	r3, r2
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3da      	bcc.n	8002dd6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002e20:	f000 f894 	bl	8002f4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_FLASHEx_Erase+0xdc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	761a      	strb	r2, [r3, #24]

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200007c0 	.word	0x200007c0
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <FLASH_MassErase+0x70>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4a17      	ldr	r2, [pc, #92]	; (8002eac <FLASH_MassErase+0x70>)
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d108      	bne.n	8002e6c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <FLASH_MassErase+0x70>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <FLASH_MassErase+0x70>)
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6113      	str	r3, [r2, #16]
 8002e6a:	e00f      	b.n	8002e8c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d106      	bne.n	8002e80 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <FLASH_MassErase+0x70>)
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <FLASH_MassErase+0x70>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6113      	str	r3, [r2, #16]
 8002e7e:	e005      	b.n	8002e8c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <FLASH_MassErase+0x70>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <FLASH_MassErase+0x70>)
 8002e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <FLASH_MassErase+0x70>)
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	4313      	orrs	r3, r2
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <FLASH_MassErase+0x70>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6113      	str	r3, [r2, #16]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e010      	b.n	8002eee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d103      	bne.n	8002eda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e009      	b.n	8002eee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d103      	bne.n	8002ee8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0b      	cmp	r3, #11
 8002ef2:	d902      	bls.n	8002efa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <FLASH_Erase_Sector+0x98>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	6113      	str	r3, [r2, #16]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <FLASH_FlushCaches+0x88>)
 8002fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc6:	6013      	str	r3, [r2, #0]
  }
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023c00 	.word	0x40023c00

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e177      	b.n	80032e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8166 	bne.w	80032de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	2b02      	cmp	r3, #2
 8003028:	d130      	bne.n	800308c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0201 	and.w	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d017      	beq.n	80030c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d123      	bne.n	800311c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80c0 	beq.w	80032de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a65      	ldr	r2, [pc, #404]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317a:	4a61      	ldr	r2, [pc, #388]	; (8003300 <HAL_GPIO_Init+0x328>)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3302      	adds	r3, #2
 8003182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_GPIO_Init+0x32c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d037      	beq.n	8003216 <HAL_GPIO_Init+0x23e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_GPIO_Init+0x330>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <HAL_GPIO_Init+0x23a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_GPIO_Init+0x334>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02b      	beq.n	800320e <HAL_GPIO_Init+0x236>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a55      	ldr	r2, [pc, #340]	; (8003310 <HAL_GPIO_Init+0x338>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x232>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a54      	ldr	r2, [pc, #336]	; (8003314 <HAL_GPIO_Init+0x33c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x22e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a53      	ldr	r2, [pc, #332]	; (8003318 <HAL_GPIO_Init+0x340>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x22a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_GPIO_Init+0x344>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x226>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a51      	ldr	r2, [pc, #324]	; (8003320 <HAL_GPIO_Init+0x348>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x222>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a50      	ldr	r2, [pc, #320]	; (8003324 <HAL_GPIO_Init+0x34c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x21e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <HAL_GPIO_Init+0x350>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x21a>
 80031ee:	2309      	movs	r3, #9
 80031f0:	e012      	b.n	8003218 <HAL_GPIO_Init+0x240>
 80031f2:	230a      	movs	r3, #10
 80031f4:	e010      	b.n	8003218 <HAL_GPIO_Init+0x240>
 80031f6:	2308      	movs	r3, #8
 80031f8:	e00e      	b.n	8003218 <HAL_GPIO_Init+0x240>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e00c      	b.n	8003218 <HAL_GPIO_Init+0x240>
 80031fe:	2306      	movs	r3, #6
 8003200:	e00a      	b.n	8003218 <HAL_GPIO_Init+0x240>
 8003202:	2305      	movs	r3, #5
 8003204:	e008      	b.n	8003218 <HAL_GPIO_Init+0x240>
 8003206:	2304      	movs	r3, #4
 8003208:	e006      	b.n	8003218 <HAL_GPIO_Init+0x240>
 800320a:	2303      	movs	r3, #3
 800320c:	e004      	b.n	8003218 <HAL_GPIO_Init+0x240>
 800320e:	2302      	movs	r3, #2
 8003210:	e002      	b.n	8003218 <HAL_GPIO_Init+0x240>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x240>
 8003216:	2300      	movs	r3, #0
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	f002 0203 	and.w	r2, r2, #3
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	4093      	lsls	r3, r2
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003228:	4935      	ldr	r1, [pc, #212]	; (8003300 <HAL_GPIO_Init+0x328>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3302      	adds	r3, #2
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_GPIO_Init+0x354>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325a:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_GPIO_Init+0x354>)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_GPIO_Init+0x354>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_GPIO_Init+0x354>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_GPIO_Init+0x354>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_GPIO_Init+0x354>)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_GPIO_Init+0x354>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_GPIO_Init+0x354>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b0f      	cmp	r3, #15
 80032e8:	f67f ae84 	bls.w	8002ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40013800 	.word	0x40013800
 8003304:	40020000 	.word	0x40020000
 8003308:	40020400 	.word	0x40020400
 800330c:	40020800 	.word	0x40020800
 8003310:	40020c00 	.word	0x40020c00
 8003314:	40021000 	.word	0x40021000
 8003318:	40021400 	.word	0x40021400
 800331c:	40021800 	.word	0x40021800
 8003320:	40021c00 	.word	0x40021c00
 8003324:	40022000 	.word	0x40022000
 8003328:	40022400 	.word	0x40022400
 800332c:	40013c00 	.word	0x40013c00

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003364:	b08f      	sub	sp, #60	; 0x3c
 8003366:	af0a      	add	r7, sp, #40	; 0x28
 8003368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e054      	b.n	800341e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f007 fa3e 	bl	800a810 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f004 fa6c 	bl	8007890 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	687e      	ldr	r6, [r7, #4]
 80033c0:	466d      	mov	r5, sp
 80033c2:	f106 0410 	add.w	r4, r6, #16
 80033c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d6:	1d33      	adds	r3, r6, #4
 80033d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f004 f9e6 	bl	80077ac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f004 fa63 	bl	80078b2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	687e      	ldr	r6, [r7, #4]
 80033f4:	466d      	mov	r5, sp
 80033f6:	f106 0410 	add.w	r4, r6, #16
 80033fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003406:	e885 0003 	stmia.w	r5, {r0, r1}
 800340a:	1d33      	adds	r3, r6, #4
 800340c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340e:	6838      	ldr	r0, [r7, #0]
 8003410:	f004 fbec 	bl	8007bec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003426 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003426:	b590      	push	{r4, r7, lr}
 8003428:	b089      	sub	sp, #36	; 0x24
 800342a:	af04      	add	r7, sp, #16
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4603      	mov	r3, r0
 8003436:	70fb      	strb	r3, [r7, #3]
 8003438:	460b      	mov	r3, r1
 800343a:	70bb      	strb	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_HCD_HC_Init+0x28>
 800344a:	2302      	movs	r3, #2
 800344c:	e076      	b.n	800353c <HAL_HCD_HC_Init+0x116>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	333d      	adds	r3, #61	; 0x3d
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3338      	adds	r3, #56	; 0x38
 8003476:	787a      	ldrb	r2, [r7, #1]
 8003478:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3340      	adds	r3, #64	; 0x40
 8003488:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800348a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3339      	adds	r3, #57	; 0x39
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	333f      	adds	r3, #63	; 0x3f
 80034ac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	78ba      	ldrb	r2, [r7, #2]
 80034b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ba:	b2d0      	uxtb	r0, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	333a      	adds	r3, #58	; 0x3a
 80034c8:	4602      	mov	r2, r0
 80034ca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80034cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da09      	bge.n	80034e8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	333b      	adds	r3, #59	; 0x3b
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e008      	b.n	80034fa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	333b      	adds	r3, #59	; 0x3b
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	333c      	adds	r3, #60	; 0x3c
 8003508:	f897 2020 	ldrb.w	r2, [r7, #32]
 800350c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	787c      	ldrb	r4, [r7, #1]
 8003514:	78ba      	ldrb	r2, [r7, #2]
 8003516:	78f9      	ldrb	r1, [r7, #3]
 8003518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4623      	mov	r3, r4
 800352a:	f004 fce5 	bl	8007ef8 <USB_HC_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_HCD_HC_Halt+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e00f      	b.n	8003582 <HAL_HCD_HC_Halt+0x3e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f004 ff35 	bl	80083e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	70fb      	strb	r3, [r7, #3]
 800359e:	460b      	mov	r3, r1
 80035a0:	70bb      	strb	r3, [r7, #2]
 80035a2:	4613      	mov	r3, r2
 80035a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333b      	adds	r3, #59	; 0x3b
 80035b4:	78ba      	ldrb	r2, [r7, #2]
 80035b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	333f      	adds	r3, #63	; 0x3f
 80035c6:	787a      	ldrb	r2, [r7, #1]
 80035c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80035ca:	7c3b      	ldrb	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d112      	bne.n	80035f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3342      	adds	r3, #66	; 0x42
 80035de:	2203      	movs	r2, #3
 80035e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	333d      	adds	r3, #61	; 0x3d
 80035f0:	7f3a      	ldrb	r2, [r7, #28]
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e008      	b.n	8003608 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3342      	adds	r3, #66	; 0x42
 8003604:	2202      	movs	r2, #2
 8003606:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80c6 	bhi.w	800379c <HAL_HCD_HC_SubmitRequest+0x210>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003789 	.word	0x08003789
 8003620:	0800368d 	.word	0x0800368d
 8003624:	0800370b 	.word	0x0800370b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003628:	7c3b      	ldrb	r3, [r7, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	f040 80b8 	bne.w	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003630:	78bb      	ldrb	r3, [r7, #2]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 80b4 	bne.w	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003638:	8b3b      	ldrh	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3355      	adds	r3, #85	; 0x55
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3355      	adds	r3, #85	; 0x55
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3342      	adds	r3, #66	; 0x42
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003676:	e093      	b.n	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3342      	adds	r3, #66	; 0x42
 8003686:	2202      	movs	r2, #2
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e089      	b.n	80037a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800368c:	78bb      	ldrb	r3, [r7, #2]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3355      	adds	r3, #85	; 0x55
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3342      	adds	r3, #66	; 0x42
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80036b8:	e073      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3342      	adds	r3, #66	; 0x42
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      break;
 80036cc:	e069      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3354      	adds	r3, #84	; 0x54
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3342      	adds	r3, #66	; 0x42
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
      break;
 80036f4:	e055      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	3342      	adds	r3, #66	; 0x42
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]
      break;
 8003708:	e04b      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800370a:	78bb      	ldrb	r3, [r7, #2]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3355      	adds	r3, #85	; 0x55
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3342      	adds	r3, #66	; 0x42
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003736:	e034      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3342      	adds	r3, #66	; 0x42
 8003746:	2202      	movs	r2, #2
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e02a      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3354      	adds	r3, #84	; 0x54
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3342      	adds	r3, #66	; 0x42
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
      break;
 8003772:	e016      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3342      	adds	r3, #66	; 0x42
 8003782:	2202      	movs	r2, #2
 8003784:	701a      	strb	r2, [r3, #0]
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3342      	adds	r3, #66	; 0x42
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
      break;
 800379a:	e002      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3344      	adds	r3, #68	; 0x44
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	8b3a      	ldrh	r2, [r7, #24]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	202c      	movs	r0, #44	; 0x2c
 80037bc:	fb00 f303 	mul.w	r3, r0, r3
 80037c0:	440b      	add	r3, r1
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3350      	adds	r3, #80	; 0x50
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3339      	adds	r3, #57	; 0x39
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	222c      	movs	r2, #44	; 0x2c
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	3338      	adds	r3, #56	; 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	18d1      	adds	r1, r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	f004 fc88 	bl	800813c <USB_HC_StartXfer>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f004 f989 	bl	8007b66 <USB_GetMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	f040 80f6 	bne.w	8003a48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f96d 	bl	8007b40 <USB_ReadInterrupts>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80ec 	beq.w	8003a46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f004 f964 	bl	8007b40 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d104      	bne.n	800388e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800388c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f004 f954 	bl	8007b40 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a2:	d104      	bne.n	80038ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 f944 	bl	8007b40 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c2:	d104      	bne.n	80038ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 f934 	bl	8007b40 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d103      	bne.n	80038ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2202      	movs	r2, #2
 80038e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 f926 	bl	8007b40 <USB_ReadInterrupts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fe:	d11c      	bne.n	800393a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003908:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800391a:	2110      	movs	r1, #16
 800391c:	6938      	ldr	r0, [r7, #16]
 800391e:	f004 f815 	bl	800794c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003922:	6938      	ldr	r0, [r7, #16]
 8003924:	f004 f846 	bl	80079b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fa1c 	bl	8007d6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f006 ffe5 	bl	800a904 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 f8fe 	bl	8007b40 <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800394e:	d102      	bne.n	8003956 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f001 f89e 	bl	8004a92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f004 f8f0 	bl	8007b40 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d106      	bne.n	8003978 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f006 ffae 	bl	800a8cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f004 f8df 	bl	8007b40 <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d101      	bne.n	8003990 <HAL_HCD_IRQHandler+0x158>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_HCD_IRQHandler+0x15a>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0210 	bic.w	r2, r2, #16
 80039a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ffa1 	bl	80048ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0210 	orr.w	r2, r2, #16
 80039ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 f8bd 	bl	8007b40 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d0:	d13a      	bne.n	8003a48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 fcf2 	bl	80083c0 <USB_HC_ReadInterrupt>
 80039dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e025      	b.n	8003a30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d018      	beq.n	8003a2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d106      	bne.n	8003a1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8ab 	bl	8003b72 <HCD_HC_IN_IRQHandler>
 8003a1c:	e005      	b.n	8003a2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fbf9 	bl	800421c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3d4      	bcc.n	80039e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a42:	615a      	str	r2, [r3, #20]
 8003a44:	e000      	b.n	8003a48 <HAL_HCD_IRQHandler+0x210>
      return;
 8003a46:	bf00      	nop
    }
  }
}
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_HCD_Start+0x16>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e013      	b.n	8003a8c <HAL_HCD_Start+0x3e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f9de 	bl	8007e34 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 fef6 	bl	800786e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_HCD_Stop+0x16>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e00d      	b.n	8003ac6 <HAL_HCD_Stop+0x32>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 fdcc 	bl	8008654 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 f980 	bl	8007de0 <USB_ResetPort>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3360      	adds	r3, #96	; 0x60
 8003b04:	781b      	ldrb	r3, [r3, #0]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3350      	adds	r3, #80	; 0x50
 8003b2c:	681b      	ldr	r3, [r3, #0]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f004 f9c4 	bl	8007ed4 <USB_GetCurrentFrame>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 f99f 	bl	8007ea6 <USB_GetHostSpeed>
 8003b68:	4603      	mov	r3, r0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d11a      	bne.n	8003bd8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3361      	adds	r3, #97	; 0x61
 8003bc2:	2206      	movs	r2, #6
 8003bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 fc06 	bl	80083e2 <USB_HC_Halt>
 8003bd6:	e0af      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bee:	d11b      	bne.n	8003c28 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3361      	adds	r3, #97	; 0x61
 8003c12:	2207      	movs	r2, #7
 8003c14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 fbde 	bl	80083e2 <USB_HC_Halt>
 8003c26:	e087      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d109      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	6093      	str	r3, [r2, #8]
 8003c50:	e072      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d11a      	bne.n	8003c9e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	2308      	movs	r3, #8
 8003c78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3361      	adds	r3, #97	; 0x61
 8003c88:	2205      	movs	r2, #5
 8003c8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fba3 	bl	80083e2 <USB_HC_Halt>
 8003c9c:	e04c      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb4:	d11b      	bne.n	8003cee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3361      	adds	r3, #97	; 0x61
 8003cd8:	2208      	movs	r2, #8
 8003cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 fb7b 	bl	80083e2 <USB_HC_Halt>
 8003cec:	e024      	b.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	2b80      	cmp	r3, #128	; 0x80
 8003d02:	d119      	bne.n	8003d38 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	461a      	mov	r2, r3
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	212c      	movs	r1, #44	; 0x2c
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	3361      	adds	r3, #97	; 0x61
 8003d24:	2206      	movs	r2, #6
 8003d26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fb55 	bl	80083e2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4e:	d112      	bne.n	8003d76 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fb41 	bl	80083e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d72:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003d74:	e24e      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80df 	bne.w	8003f4c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d019      	beq.n	8003dca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3348      	adds	r3, #72	; 0x48
 8003da4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	0159      	lsls	r1, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	202c      	movs	r0, #44	; 0x2c
 8003dc0:	fb00 f303 	mul.w	r3, r0, r3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3350      	adds	r3, #80	; 0x50
 8003dc8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3361      	adds	r3, #97	; 0x61
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	335c      	adds	r3, #92	; 0x5c
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	212c      	movs	r1, #44	; 0x2c
 8003e06:	fb01 f303 	mul.w	r3, r1, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	333f      	adds	r3, #63	; 0x3f
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	212c      	movs	r1, #44	; 0x2c
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	333f      	adds	r3, #63	; 0x3f
 8003e22:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d111      	bne.n	8003e4c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	4611      	mov	r1, r2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 fad5 	bl	80083e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	461a      	mov	r2, r3
 8003e46:	2310      	movs	r3, #16
 8003e48:	6093      	str	r3, [r2, #8]
 8003e4a:	e03a      	b.n	8003ec2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	333f      	adds	r3, #63	; 0x3f
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d009      	beq.n	8003e74 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	333f      	adds	r3, #63	; 0x3f
 8003e6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d126      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e92:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3360      	adds	r3, #96	; 0x60
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	202c      	movs	r0, #44	; 0x2c
 8003eb0:	fb00 f303 	mul.w	r3, r0, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3360      	adds	r3, #96	; 0x60
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f006 fd2f 	bl	800a920 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12b      	bne.n	8003f22 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3348      	adds	r3, #72	; 0x48
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	202c      	movs	r0, #44	; 0x2c
 8003ee0:	fb00 f202 	mul.w	r2, r0, r2
 8003ee4:	440a      	add	r2, r1
 8003ee6:	3240      	adds	r2, #64	; 0x40
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 818e 	beq.w	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3354      	adds	r3, #84	; 0x54
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f083 0301 	eor.w	r3, r3, #1
 8003f0c:	b2d8      	uxtb	r0, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3354      	adds	r3, #84	; 0x54
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	701a      	strb	r2, [r3, #0]
}
 8003f20:	e178      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3354      	adds	r3, #84	; 0x54
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	f083 0301 	eor.w	r3, r3, #1
 8003f36:	b2d8      	uxtb	r0, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3354      	adds	r3, #84	; 0x54
 8003f46:	4602      	mov	r2, r0
 8003f48:	701a      	strb	r2, [r3, #0]
}
 8003f4a:	e163      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	f040 80f6 	bne.w	8004150 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3361      	adds	r3, #97	; 0x61
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d109      	bne.n	8003f8c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3360      	adds	r3, #96	; 0x60
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e0c9      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3361      	adds	r3, #97	; 0x61
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d109      	bne.n	8003fb4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3360      	adds	r3, #96	; 0x60
 8003fae:	2205      	movs	r2, #5
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e0b5      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	212c      	movs	r1, #44	; 0x2c
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3361      	adds	r3, #97	; 0x61
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d009      	beq.n	8003fdc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3361      	adds	r3, #97	; 0x61
 8003fd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d150      	bne.n	800407e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	335c      	adds	r3, #92	; 0x5c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	202c      	movs	r0, #44	; 0x2c
 8003ff4:	fb00 f303 	mul.w	r3, r0, r3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	335c      	adds	r3, #92	; 0x5c
 8003ffc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	335c      	adds	r3, #92	; 0x5c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d912      	bls.n	8004038 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	335c      	adds	r3, #92	; 0x5c
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	212c      	movs	r1, #44	; 0x2c
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	3360      	adds	r3, #96	; 0x60
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004036:	e073      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3360      	adds	r3, #96	; 0x60
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004060:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004068:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800407c:	e050      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3361      	adds	r3, #97	; 0x61
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d122      	bne.n	80040d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	3360      	adds	r3, #96	; 0x60
 80040a0:	2202      	movs	r2, #2
 80040a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	461a      	mov	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e023      	b.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	3361      	adds	r3, #97	; 0x61
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	d119      	bne.n	8004120 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	212c      	movs	r1, #44	; 0x2c
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	335c      	adds	r3, #92	; 0x5c
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	202c      	movs	r0, #44	; 0x2c
 8004104:	fb00 f303 	mul.w	r3, r0, r3
 8004108:	440b      	add	r3, r1
 800410a:	335c      	adds	r3, #92	; 0x5c
 800410c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3360      	adds	r3, #96	; 0x60
 800411c:	2204      	movs	r2, #4
 800411e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	2302      	movs	r3, #2
 8004130:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	202c      	movs	r0, #44	; 0x2c
 800413c:	fb00 f303 	mul.w	r3, r0, r3
 8004140:	4413      	add	r3, r2
 8004142:	3360      	adds	r3, #96	; 0x60
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f006 fbe9 	bl	800a920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800414e:	e061      	b.n	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b10      	cmp	r3, #16
 8004164:	d156      	bne.n	8004214 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	333f      	adds	r3, #63	; 0x3f
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d111      	bne.n	800419e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	335c      	adds	r3, #92	; 0x5c
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f004 f923 	bl	80083e2 <USB_HC_Halt>
 800419c:	e031      	b.n	8004202 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	333f      	adds	r3, #63	; 0x3f
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	333f      	adds	r3, #63	; 0x3f
 80041c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d11d      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	335c      	adds	r3, #92	; 0x5c
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d110      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	3361      	adds	r3, #97	; 0x61
 80041ee:	2203      	movs	r2, #3
 80041f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 f8f0 	bl	80083e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	461a      	mov	r2, r3
 8004210:	2310      	movs	r3, #16
 8004212:	6093      	str	r3, [r2, #8]
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11a      	bne.n	8004282 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2304      	movs	r3, #4
 800425c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3361      	adds	r3, #97	; 0x61
 800426c:	2206      	movs	r2, #6
 800426e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f004 f8b1 	bl	80083e2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004280:	e331      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d12e      	bne.n	80042f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	461a      	mov	r2, r3
 80042a6:	2320      	movs	r3, #32
 80042a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	333d      	adds	r3, #61	; 0x3d
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	f040 8313 	bne.w	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	212c      	movs	r1, #44	; 0x2c
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	4413      	add	r3, r2
 80042cc:	333d      	adds	r3, #61	; 0x3d
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3360      	adds	r3, #96	; 0x60
 80042e0:	2202      	movs	r2, #2
 80042e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f004 f877 	bl	80083e2 <USB_HC_Halt>
}
 80042f4:	e2f7      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430c:	d112      	bne.n	8004334 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004320:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f004 f858 	bl	80083e2 <USB_HC_Halt>
}
 8004332:	e2d8      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d140      	bne.n	80043cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	335c      	adds	r3, #92	; 0x5c
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d111      	bne.n	8004396 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	333d      	adds	r3, #61	; 0x3d
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	461a      	mov	r2, r3
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	461a      	mov	r2, r3
 80043a4:	2301      	movs	r3, #1
 80043a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	3361      	adds	r3, #97	; 0x61
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f004 f80c 	bl	80083e2 <USB_HC_Halt>
}
 80043ca:	e28c      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b40      	cmp	r3, #64	; 0x40
 80043e0:	d12c      	bne.n	800443c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3361      	adds	r3, #97	; 0x61
 80043f0:	2204      	movs	r2, #4
 80043f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	333d      	adds	r3, #61	; 0x3d
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	335c      	adds	r3, #92	; 0x5c
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f003 ffdd 	bl	80083e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	2340      	movs	r3, #64	; 0x40
 8004438:	6093      	str	r3, [r2, #8]
}
 800443a:	e254      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11a      	bne.n	8004488 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	461a      	mov	r2, r3
 8004460:	2308      	movs	r3, #8
 8004462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3361      	adds	r3, #97	; 0x61
 8004472:	2205      	movs	r2, #5
 8004474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f003 ffae 	bl	80083e2 <USB_HC_Halt>
}
 8004486:	e22e      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b10      	cmp	r3, #16
 800449c:	d140      	bne.n	8004520 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	335c      	adds	r3, #92	; 0x5c
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3361      	adds	r3, #97	; 0x61
 80044be:	2203      	movs	r2, #3
 80044c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	333d      	adds	r3, #61	; 0x3d
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d112      	bne.n	80044fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	212c      	movs	r1, #44	; 0x2c
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	333c      	adds	r3, #60	; 0x3c
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	333d      	adds	r3, #61	; 0x3d
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f003 ff6b 	bl	80083e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	461a      	mov	r2, r3
 800451a:	2310      	movs	r3, #16
 800451c:	6093      	str	r3, [r2, #8]
}
 800451e:	e1e2      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d164      	bne.n	8004600 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d111      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	212c      	movs	r1, #44	; 0x2c
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	4413      	add	r3, r2
 800454a:	3361      	adds	r3, #97	; 0x61
 800454c:	2206      	movs	r2, #6
 800454e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 ff41 	bl	80083e2 <USB_HC_Halt>
 8004560:	e044      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	335c      	adds	r3, #92	; 0x5c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	202c      	movs	r0, #44	; 0x2c
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	440b      	add	r3, r1
 8004580:	335c      	adds	r3, #92	; 0x5c
 8004582:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	335c      	adds	r3, #92	; 0x5c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d920      	bls.n	80045da <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	212c      	movs	r1, #44	; 0x2c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	335c      	adds	r3, #92	; 0x5c
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	3360      	adds	r3, #96	; 0x60
 80045b8:	2204      	movs	r2, #4
 80045ba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	b2d9      	uxtb	r1, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	202c      	movs	r0, #44	; 0x2c
 80045c6:	fb00 f303 	mul.w	r3, r0, r3
 80045ca:	4413      	add	r3, r2
 80045cc:	3360      	adds	r3, #96	; 0x60
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f006 f9a4 	bl	800a920 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045d8:	e008      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	3360      	adds	r3, #96	; 0x60
 80045e8:	2202      	movs	r2, #2
 80045ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	6093      	str	r3, [r2, #8]
}
 80045fe:	e172      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d11b      	bne.n	8004650 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	3361      	adds	r3, #97	; 0x61
 8004626:	2208      	movs	r2, #8
 8004628:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f003 fed4 	bl	80083e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464c:	6093      	str	r3, [r2, #8]
}
 800464e:	e14a      	b.n	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	f040 813f 	bne.w	80048e6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3361      	adds	r3, #97	; 0x61
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d17d      	bne.n	8004778 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3360      	adds	r3, #96	; 0x60
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	333f      	adds	r3, #63	; 0x3f
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d00a      	beq.n	80046b8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	333f      	adds	r3, #63	; 0x3f
 80046b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	f040 8100 	bne.w	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d113      	bne.n	80046e8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3355      	adds	r3, #85	; 0x55
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2d8      	uxtb	r0, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3355      	adds	r3, #85	; 0x55
 80046e4:	4602      	mov	r2, r0
 80046e6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80e3 	bne.w	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	334c      	adds	r3, #76	; 0x4c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80d8 	beq.w	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	334c      	adds	r3, #76	; 0x4c
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	202c      	movs	r0, #44	; 0x2c
 800471e:	fb00 f202 	mul.w	r2, r0, r2
 8004722:	440a      	add	r2, r1
 8004724:	3240      	adds	r2, #64	; 0x40
 8004726:	8812      	ldrh	r2, [r2, #0]
 8004728:	4413      	add	r3, r2
 800472a:	3b01      	subs	r3, #1
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	202c      	movs	r0, #44	; 0x2c
 8004732:	fb00 f202 	mul.w	r2, r0, r2
 8004736:	440a      	add	r2, r1
 8004738:	3240      	adds	r2, #64	; 0x40
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80b5 	beq.w	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3355      	adds	r3, #85	; 0x55
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2d8      	uxtb	r0, r3
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	3355      	adds	r3, #85	; 0x55
 8004772:	4602      	mov	r2, r0
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e09f      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	212c      	movs	r1, #44	; 0x2c
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	3361      	adds	r3, #97	; 0x61
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b03      	cmp	r3, #3
 800478a:	d109      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3360      	adds	r3, #96	; 0x60
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e08b      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3361      	adds	r3, #97	; 0x61
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d109      	bne.n	80047c8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3360      	adds	r3, #96	; 0x60
 80047c2:	2202      	movs	r2, #2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e077      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d109      	bne.n	80047f0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3360      	adds	r3, #96	; 0x60
 80047ea:	2205      	movs	r2, #5
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e063      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3361      	adds	r3, #97	; 0x61
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d009      	beq.n	8004818 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	3361      	adds	r3, #97	; 0x61
 8004812:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004814:	2b08      	cmp	r3, #8
 8004816:	d14f      	bne.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	212c      	movs	r1, #44	; 0x2c
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	4413      	add	r3, r2
 8004824:	335c      	adds	r3, #92	; 0x5c
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	fb00 f303 	mul.w	r3, r0, r3
 8004834:	440b      	add	r3, r1
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	335c      	adds	r3, #92	; 0x5c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d912      	bls.n	8004874 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	335c      	adds	r3, #92	; 0x5c
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	212c      	movs	r1, #44	; 0x2c
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	4413      	add	r3, r2
 800486c:	3360      	adds	r3, #96	; 0x60
 800486e:	2204      	movs	r2, #4
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e021      	b.n	80048b8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	212c      	movs	r1, #44	; 0x2c
 800487a:	fb01 f303 	mul.w	r3, r1, r3
 800487e:	4413      	add	r3, r2
 8004880:	3360      	adds	r3, #96	; 0x60
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800489c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	461a      	mov	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	2302      	movs	r3, #2
 80048c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	b2d9      	uxtb	r1, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	202c      	movs	r0, #44	; 0x2c
 80048d4:	fb00 f303 	mul.w	r3, r0, r3
 80048d8:	4413      	add	r3, r2
 80048da:	3360      	adds	r3, #96	; 0x60
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f006 f81d 	bl	800a920 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048e6:	bf00      	nop
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b08a      	sub	sp, #40	; 0x28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	0c5b      	lsrs	r3, r3, #17
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004922:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d004      	beq.n	8004934 <HCD_RXQLVL_IRQHandler+0x46>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b05      	cmp	r3, #5
 800492e:	f000 80a9 	beq.w	8004a84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004932:	e0aa      	b.n	8004a8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80a6 	beq.w	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3344      	adds	r3, #68	; 0x44
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 809b 	beq.w	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3350      	adds	r3, #80	; 0x50
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	441a      	add	r2, r3
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	202c      	movs	r0, #44	; 0x2c
 800496c:	fb00 f303 	mul.w	r3, r0, r3
 8004970:	440b      	add	r3, r1
 8004972:	334c      	adds	r3, #76	; 0x4c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d87a      	bhi.n	8004a70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	3344      	adds	r3, #68	; 0x44
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	b292      	uxth	r2, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f003 f87c 	bl	8007a90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3344      	adds	r3, #68	; 0x44
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	441a      	add	r2, r3
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	202c      	movs	r0, #44	; 0x2c
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	440b      	add	r3, r1
 80049b8:	3344      	adds	r3, #68	; 0x44
 80049ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	212c      	movs	r1, #44	; 0x2c
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	3350      	adds	r3, #80	; 0x50
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	441a      	add	r2, r3
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	202c      	movs	r0, #44	; 0x2c
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	440b      	add	r3, r1
 80049dc:	3350      	adds	r3, #80	; 0x50
 80049de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	0cdb      	lsrs	r3, r3, #19
 80049f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3340      	adds	r3, #64	; 0x40
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d13c      	bne.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d039      	beq.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3354      	adds	r3, #84	; 0x54
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f083 0301 	eor.w	r3, r3, #1
 8004a5a:	b2d8      	uxtb	r0, r3
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	212c      	movs	r1, #44	; 0x2c
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	3354      	adds	r3, #84	; 0x54
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	701a      	strb	r2, [r3, #0]
      break;
 8004a6e:	e00b      	b.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	212c      	movs	r1, #44	; 0x2c
 8004a76:	fb01 f303 	mul.w	r3, r1, r3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3360      	adds	r3, #96	; 0x60
 8004a7e:	2204      	movs	r2, #4
 8004a80:	701a      	strb	r2, [r3, #0]
      break;
 8004a82:	e001      	b.n	8004a88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a88:	bf00      	nop
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3728      	adds	r7, #40	; 0x28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004abe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d10b      	bne.n	8004ae2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f005 ff07 	bl	800a8e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d132      	bne.n	8004b52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f043 0308 	orr.w	r3, r3, #8
 8004af2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d126      	bne.n	8004b4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d113      	bne.n	8004b2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b10:	d106      	bne.n	8004b20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2102      	movs	r1, #2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f003 f927 	bl	8007d6c <USB_InitFSLSPClkSel>
 8004b1e:	e011      	b.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f003 f920 	bl	8007d6c <USB_InitFSLSPClkSel>
 8004b2c:	e00a      	b.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d106      	bne.n	8004b44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f005 fef9 	bl	800a93c <HAL_HCD_PortEnabled_Callback>
 8004b4a:	e002      	b.n	8004b52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f005 ff03 	bl	800a958 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d103      	bne.n	8004b64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f043 0320 	orr.w	r3, r3, #32
 8004b62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e12b      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc feba 	bl	8001918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f001 f964 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4a81      	ldr	r2, [pc, #516]	; (8004dec <HAL_I2C_Init+0x274>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d807      	bhi.n	8004bfc <HAL_I2C_Init+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a80      	ldr	r2, [pc, #512]	; (8004df0 <HAL_I2C_Init+0x278>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	bf94      	ite	ls
 8004bf4:	2301      	movls	r3, #1
 8004bf6:	2300      	movhi	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e006      	b.n	8004c0a <HAL_I2C_Init+0x92>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a7d      	ldr	r2, [pc, #500]	; (8004df4 <HAL_I2C_Init+0x27c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	bf94      	ite	ls
 8004c04:	2301      	movls	r3, #1
 8004c06:	2300      	movhi	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0e7      	b.n	8004de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a78      	ldr	r2, [pc, #480]	; (8004df8 <HAL_I2C_Init+0x280>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d802      	bhi.n	8004c4c <HAL_I2C_Init+0xd4>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	e009      	b.n	8004c60 <HAL_I2C_Init+0xe8>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a69      	ldr	r2, [pc, #420]	; (8004dfc <HAL_I2C_Init+0x284>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	3301      	adds	r3, #1
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	495c      	ldr	r1, [pc, #368]	; (8004dec <HAL_I2C_Init+0x274>)
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d819      	bhi.n	8004cb4 <HAL_I2C_Init+0x13c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e59      	subs	r1, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c94:	400b      	ands	r3, r1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_I2C_Init+0x138>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e59      	subs	r1, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cae:	e051      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e04f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <HAL_I2C_Init+0x168>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1e58      	subs	r0, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf0c      	ite	eq
 8004cd8:	2301      	moveq	r3, #1
 8004cda:	2300      	movne	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e012      	b.n	8004d06 <HAL_I2C_Init+0x18e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e58      	subs	r0, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6859      	ldr	r1, [r3, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	0099      	lsls	r1, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2C_Init+0x196>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e022      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10e      	bne.n	8004d34 <HAL_I2C_Init+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1e58      	subs	r0, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	440b      	add	r3, r1
 8004d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	e00f      	b.n	8004d54 <HAL_I2C_Init+0x1dc>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1e58      	subs	r0, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	0099      	lsls	r1, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	6809      	ldr	r1, [r1, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6911      	ldr	r1, [r2, #16]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68d2      	ldr	r2, [r2, #12]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	000186a0 	.word	0x000186a0
 8004df0:	001e847f 	.word	0x001e847f
 8004df4:	003d08ff 	.word	0x003d08ff
 8004df8:	431bde83 	.word	0x431bde83
 8004dfc:	10624dd3 	.word	0x10624dd3

08004e00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d129      	bne.n	8004e6a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	; 0x24
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0210 	bic.w	r2, r2, #16
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d12a      	bne.n	8004ee8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2224      	movs	r2, #36	; 0x24
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004eb2:	89fb      	ldrh	r3, [r7, #14]
 8004eb4:	f023 030f 	bic.w	r3, r3, #15
 8004eb8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	89fa      	ldrh	r2, [r7, #14]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e0bf      	b.n	800508a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fd64 	bl	80019ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f3a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f50:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_LTDC_Init+0x19c>)
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <HAL_LTDC_Init+0x19c>)
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	041b      	lsls	r3, r3, #16
 8004fa4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68d9      	ldr	r1, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6919      	ldr	r1, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b33      	ldr	r3, [pc, #204]	; (8005094 <HAL_LTDC_Init+0x19c>)
 8004fc8:	400b      	ands	r3, r1
 8004fca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6919      	ldr	r1, [r3, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6959      	ldr	r1, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_LTDC_Init+0x19c>)
 8004ff6:	400b      	ands	r3, r1
 8004ff8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6959      	ldr	r1, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800503a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0206 	orr.w	r2, r2, #6
 8005066:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	f000f800 	.word	0xf000f800

08005098 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d023      	beq.n	8005102 <HAL_LTDC_IRQHandler+0x6a>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01e      	beq.n	8005102 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2204      	movs	r2, #4
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050e2:	f043 0201 	orr.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2204      	movs	r2, #4
 80050f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f86f 	bl	80051e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d023      	beq.n	8005154 <HAL_LTDC_IRQHandler+0xbc>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01e      	beq.n	8005154 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0202 	bic.w	r2, r2, #2
 8005124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2202      	movs	r2, #2
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005134:	f043 0202 	orr.w	r2, r3, #2
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2204      	movs	r2, #4
 8005142:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f846 	bl	80051e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01b      	beq.n	8005196 <HAL_LTDC_IRQHandler+0xfe>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d016      	beq.n	8005196 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f82f 	bl	80051f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01b      	beq.n	80051d8 <HAL_LTDC_IRQHandler+0x140>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0208 	bic.w	r2, r2, #8
 80051b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2208      	movs	r2, #8
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f818 	bl	8005208 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800521c:	b5b0      	push	{r4, r5, r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_LTDC_ConfigLayer+0x1a>
 8005232:	2302      	movs	r3, #2
 8005234:	e02c      	b.n	8005290 <HAL_LTDC_ConfigLayer+0x74>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2134      	movs	r1, #52	; 0x34
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4413      	add	r3, r2
 8005252:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800525e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f811 	bl	8005298 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2201      	movs	r2, #1
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bdb0      	pop	{r4, r5, r7, pc}

08005298 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	; 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	4413      	add	r3, r2
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	01db      	lsls	r3, r3, #7
 80052c4:	4413      	add	r3, r2
 80052c6:	3384      	adds	r3, #132	; 0x84
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4611      	mov	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	01d2      	lsls	r2, r2, #7
 80052d4:	440a      	add	r2, r1
 80052d6:	3284      	adds	r2, #132	; 0x84
 80052d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	0c1b      	lsrs	r3, r3, #16
 80052ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052ee:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052f0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	440b      	add	r3, r1
 80052fe:	3384      	adds	r3, #132	; 0x84
 8005300:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005306:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005316:	4413      	add	r3, r2
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	01db      	lsls	r3, r3, #7
 8005326:	4413      	add	r3, r2
 8005328:	3384      	adds	r3, #132	; 0x84
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4611      	mov	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	01d2      	lsls	r2, r2, #7
 8005336:	440a      	add	r2, r1
 8005338:	3284      	adds	r2, #132	; 0x84
 800533a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800533e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800534e:	4413      	add	r3, r2
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	440b      	add	r3, r1
 800535e:	3384      	adds	r3, #132	; 0x84
 8005360:	4619      	mov	r1, r3
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	01db      	lsls	r3, r3, #7
 8005372:	4413      	add	r3, r2
 8005374:	3384      	adds	r3, #132	; 0x84
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	4611      	mov	r1, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	01d2      	lsls	r2, r2, #7
 8005382:	440a      	add	r2, r1
 8005384:	3284      	adds	r2, #132	; 0x84
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	01db      	lsls	r3, r3, #7
 8005396:	4413      	add	r3, r2
 8005398:	3384      	adds	r3, #132	; 0x84
 800539a:	461a      	mov	r2, r3
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	01db      	lsls	r3, r3, #7
 80053c8:	4413      	add	r3, r2
 80053ca:	3384      	adds	r3, #132	; 0x84
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	01db      	lsls	r3, r3, #7
 80053d8:	4413      	add	r3, r2
 80053da:	3384      	adds	r3, #132	; 0x84
 80053dc:	461a      	mov	r2, r3
 80053de:	2300      	movs	r3, #0
 80053e0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053e8:	461a      	mov	r2, r3
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4619      	mov	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	01db      	lsls	r3, r3, #7
 80053fc:	440b      	add	r3, r1
 80053fe:	3384      	adds	r3, #132	; 0x84
 8005400:	4619      	mov	r1, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	01db      	lsls	r3, r3, #7
 8005412:	4413      	add	r3, r2
 8005414:	3384      	adds	r3, #132	; 0x84
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	4611      	mov	r1, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	01d2      	lsls	r2, r2, #7
 8005422:	440a      	add	r2, r1
 8005424:	3284      	adds	r2, #132	; 0x84
 8005426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800542a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	4413      	add	r3, r2
 8005438:	3384      	adds	r3, #132	; 0x84
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	4413      	add	r3, r2
 800544e:	3384      	adds	r3, #132	; 0x84
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	4611      	mov	r1, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	01d2      	lsls	r2, r2, #7
 800545c:	440a      	add	r2, r1
 800545e:	3284      	adds	r2, #132	; 0x84
 8005460:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005464:	f023 0307 	bic.w	r3, r3, #7
 8005468:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	68f9      	ldr	r1, [r7, #12]
 8005474:	6809      	ldr	r1, [r1, #0]
 8005476:	4608      	mov	r0, r1
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	01c9      	lsls	r1, r1, #7
 800547c:	4401      	add	r1, r0
 800547e:	3184      	adds	r1, #132	; 0x84
 8005480:	4313      	orrs	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	01db      	lsls	r3, r3, #7
 800548e:	4413      	add	r3, r2
 8005490:	3384      	adds	r3, #132	; 0x84
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	01db      	lsls	r3, r3, #7
 800549e:	4413      	add	r3, r2
 80054a0:	3384      	adds	r3, #132	; 0x84
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	01db      	lsls	r3, r3, #7
 80054b2:	4413      	add	r3, r2
 80054b4:	3384      	adds	r3, #132	; 0x84
 80054b6:	461a      	mov	r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80054c6:	2304      	movs	r3, #4
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e01b      	b.n	8005504 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d102      	bne.n	80054da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80054d4:	2303      	movs	r3, #3
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	e014      	b.n	8005504 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00b      	beq.n	80054fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d007      	beq.n	80054fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d003      	beq.n	80054fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	d102      	bne.n	8005500 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80054fa:	2302      	movs	r3, #2
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e001      	b.n	8005504 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005500:	2301      	movs	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	01db      	lsls	r3, r3, #7
 800550e:	4413      	add	r3, r2
 8005510:	3384      	adds	r3, #132	; 0x84
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	4611      	mov	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	01d2      	lsls	r2, r2, #7
 800551e:	440a      	add	r2, r1
 8005520:	3284      	adds	r2, #132	; 0x84
 8005522:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1acb      	subs	r3, r1, r3
 800553e:	69f9      	ldr	r1, [r7, #28]
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	6809      	ldr	r1, [r1, #0]
 800554a:	4608      	mov	r0, r1
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	01c9      	lsls	r1, r1, #7
 8005550:	4401      	add	r1, r0
 8005552:	3184      	adds	r1, #132	; 0x84
 8005554:	4313      	orrs	r3, r2
 8005556:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	01db      	lsls	r3, r3, #7
 8005562:	4413      	add	r3, r2
 8005564:	3384      	adds	r3, #132	; 0x84
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	4611      	mov	r1, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	01d2      	lsls	r2, r2, #7
 8005572:	440a      	add	r2, r1
 8005574:	3284      	adds	r2, #132	; 0x84
 8005576:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800557a:	f023 0307 	bic.w	r3, r3, #7
 800557e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	01db      	lsls	r3, r3, #7
 800558a:	4413      	add	r3, r2
 800558c:	3384      	adds	r3, #132	; 0x84
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	4413      	add	r3, r2
 80055a2:	3384      	adds	r3, #132	; 0x84
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	4611      	mov	r1, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	01d2      	lsls	r2, r2, #7
 80055b0:	440a      	add	r2, r1
 80055b2:	3284      	adds	r2, #132	; 0x84
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	6013      	str	r3, [r2, #0]
}
 80055ba:	bf00      	nop
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e267      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d075      	beq.n	80056d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055e6:	4b88      	ldr	r3, [pc, #544]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d00c      	beq.n	800560c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d112      	bne.n	8005624 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fe:	4b82      	ldr	r3, [pc, #520]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800560a:	d10b      	bne.n	8005624 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	4b7e      	ldr	r3, [pc, #504]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05b      	beq.n	80056d0 <HAL_RCC_OscConfig+0x108>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d157      	bne.n	80056d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e242      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d106      	bne.n	800563c <HAL_RCC_OscConfig+0x74>
 800562e:	4b76      	ldr	r3, [pc, #472]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a75      	ldr	r2, [pc, #468]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e01d      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x98>
 8005646:	4b70      	ldr	r3, [pc, #448]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6f      	ldr	r2, [pc, #444]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800564c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b6d      	ldr	r3, [pc, #436]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6c      	ldr	r2, [pc, #432]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0xb0>
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a68      	ldr	r2, [pc, #416]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b66      	ldr	r3, [pc, #408]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a65      	ldr	r2, [pc, #404]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005680:	f7fc fe70 	bl	8002364 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005688:	f7fc fe6c 	bl	8002364 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b64      	cmp	r3, #100	; 0x64
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e207      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569a:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f0      	beq.n	8005688 <HAL_RCC_OscConfig+0xc0>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fc fe5c 	bl	8002364 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fc fe58 	bl	8002364 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e1f3      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056c2:	4b51      	ldr	r3, [pc, #324]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0xe8>
 80056ce:	e000      	b.n	80056d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d063      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056de:	4b4a      	ldr	r3, [pc, #296]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ea:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d11c      	bne.n	8005730 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f6:	4b44      	ldr	r3, [pc, #272]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d116      	bne.n	8005730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_RCC_OscConfig+0x152>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d001      	beq.n	800571a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e1c7      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571a:	4b3b      	ldr	r3, [pc, #236]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4937      	ldr	r1, [pc, #220]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800572a:	4313      	orrs	r3, r2
 800572c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572e:	e03a      	b.n	80057a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d020      	beq.n	800577a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005738:	4b34      	ldr	r3, [pc, #208]	; (800580c <HAL_RCC_OscConfig+0x244>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fc fe11 	bl	8002364 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005746:	f7fc fe0d 	bl	8002364 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e1a8      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005764:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4925      	ldr	r1, [pc, #148]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]
 8005778:	e015      	b.n	80057a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCC_OscConfig+0x244>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fdf0 	bl	8002364 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005788:	f7fc fdec 	bl	8002364 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e187      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d036      	beq.n	8005820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <HAL_RCC_OscConfig+0x248>)
 80057bc:	2201      	movs	r2, #1
 80057be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c0:	f7fc fdd0 	bl	8002364 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c8:	f7fc fdcc 	bl	8002364 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e167      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_RCC_OscConfig+0x240>)
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCC_OscConfig+0x200>
 80057e6:	e01b      	b.n	8005820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_OscConfig+0x248>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ee:	f7fc fdb9 	bl	8002364 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	e00e      	b.n	8005814 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fc fdb5 	bl	8002364 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d907      	bls.n	8005814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e150      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
 8005808:	40023800 	.word	0x40023800
 800580c:	42470000 	.word	0x42470000
 8005810:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005814:	4b88      	ldr	r3, [pc, #544]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1ea      	bne.n	80057f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8097 	beq.w	800595c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005832:	4b81      	ldr	r3, [pc, #516]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10f      	bne.n	800585e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	4b7d      	ldr	r3, [pc, #500]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	4a7c      	ldr	r2, [pc, #496]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584c:	6413      	str	r3, [r2, #64]	; 0x40
 800584e:	4b7a      	ldr	r3, [pc, #488]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005856:	60bb      	str	r3, [r7, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585e:	4b77      	ldr	r3, [pc, #476]	; (8005a3c <HAL_RCC_OscConfig+0x474>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d118      	bne.n	800589c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800586a:	4b74      	ldr	r3, [pc, #464]	; (8005a3c <HAL_RCC_OscConfig+0x474>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a73      	ldr	r2, [pc, #460]	; (8005a3c <HAL_RCC_OscConfig+0x474>)
 8005870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005876:	f7fc fd75 	bl	8002364 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587e:	f7fc fd71 	bl	8002364 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e10c      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005890:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_OscConfig+0x474>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d106      	bne.n	80058b2 <HAL_RCC_OscConfig+0x2ea>
 80058a4:	4b64      	ldr	r3, [pc, #400]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	4a63      	ldr	r2, [pc, #396]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	; 0x70
 80058b0:	e01c      	b.n	80058ec <HAL_RCC_OscConfig+0x324>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCC_OscConfig+0x30c>
 80058ba:	4b5f      	ldr	r3, [pc, #380]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a5e      	ldr	r2, [pc, #376]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
 80058c6:	4b5c      	ldr	r3, [pc, #368]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a5b      	ldr	r2, [pc, #364]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0x324>
 80058d4:	4b58      	ldr	r3, [pc, #352]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4a57      	ldr	r2, [pc, #348]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	6713      	str	r3, [r2, #112]	; 0x70
 80058e0:	4b55      	ldr	r3, [pc, #340]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a54      	ldr	r2, [pc, #336]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80058e6:	f023 0304 	bic.w	r3, r3, #4
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fc fd36 	bl	8002364 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fc fd32 	bl	8002364 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0cb      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005912:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ee      	beq.n	80058fc <HAL_RCC_OscConfig+0x334>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005920:	f7fc fd20 	bl	8002364 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005926:	e00a      	b.n	800593e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fc fd1c 	bl	8002364 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0b5      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593e:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ee      	bne.n	8005928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	4a38      	ldr	r2, [pc, #224]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80a1 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005966:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 030c 	and.w	r3, r3, #12
 800596e:	2b08      	cmp	r3, #8
 8005970:	d05c      	beq.n	8005a2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d141      	bne.n	80059fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597a:	4b31      	ldr	r3, [pc, #196]	; (8005a40 <HAL_RCC_OscConfig+0x478>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fc fcf0 	bl	8002364 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005988:	f7fc fcec 	bl	8002364 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e087      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800599a:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	019b      	lsls	r3, r3, #6
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	491b      	ldr	r1, [pc, #108]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCC_OscConfig+0x478>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d6:	f7fc fcc5 	bl	8002364 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fc fcc1 	bl	8002364 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e05c      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f0:	4b11      	ldr	r3, [pc, #68]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x416>
 80059fc:	e054      	b.n	8005aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fe:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <HAL_RCC_OscConfig+0x478>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a04:	f7fc fcae 	bl	8002364 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fc fcaa 	bl	8002364 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e045      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <HAL_RCC_OscConfig+0x470>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f0      	bne.n	8005a0c <HAL_RCC_OscConfig+0x444>
 8005a2a:	e03d      	b.n	8005aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d107      	bne.n	8005a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e038      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	40007000 	.word	0x40007000
 8005a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <HAL_RCC_OscConfig+0x4ec>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d028      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d121      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d11a      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a74:	4013      	ands	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d111      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d107      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40023800 	.word	0x40023800

08005ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0cc      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b68      	ldr	r3, [pc, #416]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d90c      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b65      	ldr	r3, [pc, #404]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0b8      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b0c:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b24:	4b53      	ldr	r3, [pc, #332]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4a52      	ldr	r2, [pc, #328]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b30:	4b50      	ldr	r3, [pc, #320]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	494d      	ldr	r1, [pc, #308]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d044      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d119      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e07f      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d107      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b76:	4b3f      	ldr	r3, [pc, #252]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e06f      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e067      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b96:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f023 0203 	bic.w	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4934      	ldr	r1, [pc, #208]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba8:	f7fc fbdc 	bl	8002364 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb0:	f7fc fbd8 	bl	8002364 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e04f      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	4b2b      	ldr	r3, [pc, #172]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 020c 	and.w	r2, r3, #12
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1eb      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d20c      	bcs.n	8005c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e032      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4916      	ldr	r1, [pc, #88]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	490e      	ldr	r1, [pc, #56]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c3e:	f000 f821 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	490a      	ldr	r1, [pc, #40]	; (8005c78 <HAL_RCC_ClockConfig+0x1c0>)
 8005c50:	5ccb      	ldrb	r3, [r1, r3]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc f99a 	bl	8001f98 <HAL_InitTick>

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40023c00 	.word	0x40023c00
 8005c74:	40023800 	.word	0x40023800
 8005c78:	0800c620 	.word	0x0800c620
 8005c7c:	20000004 	.word	0x20000004
 8005c80:	20000008 	.word	0x20000008

08005c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c88:	b094      	sub	sp, #80	; 0x50
 8005c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c90:	2300      	movs	r3, #0
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	2300      	movs	r3, #0
 8005c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c9c:	4b79      	ldr	r3, [pc, #484]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d00d      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	f200 80e1 	bhi.w	8005e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005cb6:	e0db      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cb8:	4b73      	ldr	r3, [pc, #460]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005cbc:	e0db      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cbe:	4b73      	ldr	r3, [pc, #460]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8005cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cc2:	e0d8      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cce:	4b6d      	ldr	r3, [pc, #436]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d063      	beq.n	8005da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cda:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	099b      	lsrs	r3, r3, #6
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cec:	633b      	str	r3, [r7, #48]	; 0x30
 8005cee:	2300      	movs	r3, #0
 8005cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	f04f 0000 	mov.w	r0, #0
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	0159      	lsls	r1, r3, #5
 8005d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d08:	0150      	lsls	r0, r2, #5
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4621      	mov	r1, r4
 8005d10:	1a51      	subs	r1, r2, r1
 8005d12:	6139      	str	r1, [r7, #16]
 8005d14:	4629      	mov	r1, r5
 8005d16:	eb63 0301 	sbc.w	r3, r3, r1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d28:	4659      	mov	r1, fp
 8005d2a:	018b      	lsls	r3, r1, #6
 8005d2c:	4651      	mov	r1, sl
 8005d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d32:	4651      	mov	r1, sl
 8005d34:	018a      	lsls	r2, r1, #6
 8005d36:	4651      	mov	r1, sl
 8005d38:	ebb2 0801 	subs.w	r8, r2, r1
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d56:	4690      	mov	r8, r2
 8005d58:	4699      	mov	r9, r3
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	eb18 0303 	adds.w	r3, r8, r3
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	462b      	mov	r3, r5
 8005d64:	eb49 0303 	adc.w	r3, r9, r3
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d76:	4629      	mov	r1, r5
 8005d78:	024b      	lsls	r3, r1, #9
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d80:	4621      	mov	r1, r4
 8005d82:	024a      	lsls	r2, r1, #9
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d94:	f7fa fa7c 	bl	8000290 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005da0:	e058      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da2:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	099b      	lsrs	r3, r3, #6
 8005da8:	2200      	movs	r2, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	4611      	mov	r1, r2
 8005dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	2300      	movs	r3, #0
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	f04f 0000 	mov.w	r0, #0
 8005dc4:	f04f 0100 	mov.w	r1, #0
 8005dc8:	0159      	lsls	r1, r3, #5
 8005dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dce:	0150      	lsls	r0, r2, #5
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dda:	4649      	mov	r1, r9
 8005ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005df4:	ebb2 040a 	subs.w	r4, r2, sl
 8005df8:	eb63 050b 	sbc.w	r5, r3, fp
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	00eb      	lsls	r3, r5, #3
 8005e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e0a:	00e2      	lsls	r2, r4, #3
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	461d      	mov	r5, r3
 8005e10:	4643      	mov	r3, r8
 8005e12:	18e3      	adds	r3, r4, r3
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	464b      	mov	r3, r9
 8005e18:	eb45 0303 	adc.w	r3, r5, r3
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	028b      	lsls	r3, r1, #10
 8005e2e:	4621      	mov	r1, r4
 8005e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e34:	4621      	mov	r1, r4
 8005e36:	028a      	lsls	r2, r1, #10
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3e:	2200      	movs	r2, #0
 8005e40:	61bb      	str	r3, [r7, #24]
 8005e42:	61fa      	str	r2, [r7, #28]
 8005e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e48:	f7fa fa22 	bl	8000290 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4613      	mov	r3, r2
 8005e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3750      	adds	r7, #80	; 0x50
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	007a1200 	.word	0x007a1200

08005e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000004 	.word	0x20000004

08005ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005eac:	f7ff fff0 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	0a9b      	lsrs	r3, r3, #10
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4903      	ldr	r1, [pc, #12]	; (8005ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	0800c630 	.word	0x0800c630

08005ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ed4:	f7ff ffdc 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4903      	ldr	r1, [pc, #12]	; (8005ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	0800c630 	.word	0x0800c630

08005ef8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	220f      	movs	r2, #15
 8005f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_RCC_GetClockConfig+0x5c>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0203 	and.w	r2, r3, #3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <HAL_RCC_GetClockConfig+0x5c>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <HAL_RCC_GetClockConfig+0x5c>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <HAL_RCC_GetClockConfig+0x5c>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f3a:	4b07      	ldr	r3, [pc, #28]	; (8005f58 <HAL_RCC_GetClockConfig+0x60>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 020f 	and.w	r2, r3, #15
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40023c00 	.word	0x40023c00

08005f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d075      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f90:	4b91      	ldr	r3, [pc, #580]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f96:	f7fc f9e5 	bl	8002364 <HAL_GetTick>
 8005f9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f9e:	f7fc f9e1 	bl	8002364 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e189      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fb0:	4b8a      	ldr	r3, [pc, #552]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f0      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	019a      	lsls	r2, r3, #6
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	071b      	lsls	r3, r3, #28
 8005fd4:	4981      	ldr	r1, [pc, #516]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01f      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fe8:	4b7c      	ldr	r3, [pc, #496]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fee:	0f1b      	lsrs	r3, r3, #28
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	019a      	lsls	r2, r3, #6
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	431a      	orrs	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	071b      	lsls	r3, r3, #28
 8006008:	4974      	ldr	r1, [pc, #464]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006010:	4b72      	ldr	r3, [pc, #456]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006016:	f023 021f 	bic.w	r2, r3, #31
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	3b01      	subs	r3, #1
 8006020:	496e      	ldr	r1, [pc, #440]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	019a      	lsls	r2, r3, #6
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	061b      	lsls	r3, r3, #24
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	071b      	lsls	r3, r3, #28
 8006048:	4964      	ldr	r1, [pc, #400]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800604a:	4313      	orrs	r3, r2
 800604c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006050:	4b61      	ldr	r3, [pc, #388]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006056:	f7fc f985 	bl	8002364 <HAL_GetTick>
 800605a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800605e:	f7fc f981 	bl	8002364 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e129      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006070:	4b5a      	ldr	r3, [pc, #360]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0f0      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d079      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006094:	4b52      	ldr	r3, [pc, #328]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609a:	f7fc f963 	bl	8002364 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80060a2:	f7fc f95f 	bl	8002364 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e107      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060b4:	4b49      	ldr	r3, [pc, #292]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c0:	d0ef      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d020      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060ce:	4b43      	ldr	r3, [pc, #268]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d4:	0f1b      	lsrs	r3, r3, #28
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	019a      	lsls	r2, r3, #6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	061b      	lsls	r3, r3, #24
 80060e8:	431a      	orrs	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	493b      	ldr	r1, [pc, #236]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	3b01      	subs	r3, #1
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	4934      	ldr	r1, [pc, #208]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01e      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800611c:	4b2f      	ldr	r3, [pc, #188]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	019a      	lsls	r2, r3, #6
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	061b      	lsls	r3, r3, #24
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	071b      	lsls	r3, r3, #28
 800613c:	4927      	ldr	r1, [pc, #156]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006144:	4b25      	ldr	r3, [pc, #148]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800614a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	4922      	ldr	r1, [pc, #136]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800615a:	4b21      	ldr	r3, [pc, #132]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006160:	f7fc f900 	bl	8002364 <HAL_GetTick>
 8006164:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006168:	f7fc f8fc 	bl	8002364 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0a4      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006186:	d1ef      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 808b 	beq.w	80062ac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6413      	str	r3, [r2, #64]	; 0x40
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a0b      	ldr	r2, [pc, #44]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061be:	f7fc f8d1 	bl	8002364 <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061c4:	e010      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061c6:	f7fc f8cd 	bl	8002364 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d909      	bls.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e075      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80061d8:	42470068 	.word	0x42470068
 80061dc:	40023800 	.word	0x40023800
 80061e0:	42470070 	.word	0x42470070
 80061e4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061e8:	4b38      	ldr	r3, [pc, #224]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0e8      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f4:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02f      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	429a      	cmp	r2, r3
 8006210:	d028      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006212:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800621c:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006222:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006228:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800622e:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b01      	cmp	r3, #1
 8006238:	d114      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800623a:	f7fc f893 	bl	8002364 <HAL_GetTick>
 800623e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006240:	e00a      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fc f88f 	bl	8002364 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d901      	bls.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e035      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ee      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006270:	d10d      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	4912      	ldr	r1, [pc, #72]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]
 800628c:	e005      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006294:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006298:	6093      	str	r3, [r2, #8]
 800629a:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800629c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a6:	490a      	ldr	r1, [pc, #40]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80062c0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40007000 	.word	0x40007000
 80062d0:	40023800 	.word	0x40023800
 80062d4:	42470e40 	.word	0x42470e40
 80062d8:	424711e0 	.word	0x424711e0

080062dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e025      	b.n	800633c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fb fe3d 	bl	8001f84 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3304      	adds	r3, #4
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f001 f97f 	bl	8007620 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	f001 f9d4 	bl	80076da <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e07b      	b.n	800644e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006366:	d009      	beq.n	800637c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	61da      	str	r2, [r3, #28]
 800636e:	e005      	b.n	800637c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fb fc58 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	ea42 0103 	orr.w	r1, r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	0c1b      	lsrs	r3, r3, #16
 800641a:	f003 0104 	and.w	r1, r3, #4
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0210 	and.w	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800643c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e041      	b.n	80064ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d106      	bne.n	8006482 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fb fc2d 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	4619      	mov	r1, r3
 8006494:	4610      	mov	r0, r2
 8006496:	f000 fa95 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d001      	beq.n	800650c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e04e      	b.n	80065aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d01d      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <HAL_TIM_Base_Start_IT+0xc8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a19      	ldr	r2, [pc, #100]	; (80065cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x80>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d010      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006596:	e007      	b.n	80065a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40000400 	.word	0x40000400
 80065c0:	40000800 	.word	0x40000800
 80065c4:	40000c00 	.word	0x40000c00
 80065c8:	40010400 	.word	0x40010400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40001800 	.word	0x40001800

080065d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d122      	bne.n	8006630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d11b      	bne.n	8006630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0202 	mvn.w	r2, #2
 8006600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9b5 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 800661c:	e005      	b.n	800662a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9a7 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9b8 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d122      	bne.n	8006684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b04      	cmp	r3, #4
 800664a:	d11b      	bne.n	8006684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0204 	mvn.w	r2, #4
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f98b 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f97d 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f98e 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b08      	cmp	r3, #8
 8006690:	d122      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b08      	cmp	r3, #8
 800669e:	d11b      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0208 	mvn.w	r2, #8
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2204      	movs	r2, #4
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f961 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f953 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f964 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d122      	bne.n	800672c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d11b      	bne.n	800672c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0210 	mvn.w	r2, #16
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2208      	movs	r2, #8
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f937 	bl	8006986 <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f929 	bl	8006972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f93a 	bl	800699a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	d10e      	bne.n	8006758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	d107      	bne.n	8006758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0201 	mvn.w	r2, #1
 8006750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fa fb8e 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d10e      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006770:	2b80      	cmp	r3, #128	; 0x80
 8006772:	d107      	bne.n	8006784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fae0 	bl	8006d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d10e      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d107      	bne.n	80067b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f8ff 	bl	80069ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d10e      	bne.n	80067dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d107      	bne.n	80067dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0220 	mvn.w	r2, #32
 80067d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 faaa 	bl	8006d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_ConfigClockSource+0x1c>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e0b4      	b.n	800696a <HAL_TIM_ConfigClockSource+0x186>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800681e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006838:	d03e      	beq.n	80068b8 <HAL_TIM_ConfigClockSource+0xd4>
 800683a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683e:	f200 8087 	bhi.w	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	f000 8086 	beq.w	8006956 <HAL_TIM_ConfigClockSource+0x172>
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d87f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006850:	2b70      	cmp	r3, #112	; 0x70
 8006852:	d01a      	beq.n	800688a <HAL_TIM_ConfigClockSource+0xa6>
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	d87b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006858:	2b60      	cmp	r3, #96	; 0x60
 800685a:	d050      	beq.n	80068fe <HAL_TIM_ConfigClockSource+0x11a>
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d877      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d03c      	beq.n	80068de <HAL_TIM_ConfigClockSource+0xfa>
 8006864:	2b50      	cmp	r3, #80	; 0x50
 8006866:	d873      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d058      	beq.n	800691e <HAL_TIM_ConfigClockSource+0x13a>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d86f      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	d064      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d86b      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d060      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d867      	bhi.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05c      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b10      	cmp	r3, #16
 8006886:	d05a      	beq.n	800693e <HAL_TIM_ConfigClockSource+0x15a>
 8006888:	e062      	b.n	8006950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f000 f9ad 	bl	8006bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	609a      	str	r2, [r3, #8]
      break;
 80068b6:	e04f      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6899      	ldr	r1, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f000 f996 	bl	8006bf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068da:	609a      	str	r2, [r3, #8]
      break;
 80068dc:	e03c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	6859      	ldr	r1, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f000 f90a 	bl	8006b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2150      	movs	r1, #80	; 0x50
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 f963 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 80068fc:	e02c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	6859      	ldr	r1, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	461a      	mov	r2, r3
 800690c:	f000 f929 	bl	8006b62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2160      	movs	r1, #96	; 0x60
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f953 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 800691c:	e01c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	6859      	ldr	r1, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	f000 f8ea 	bl	8006b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2140      	movs	r1, #64	; 0x40
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f943 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 800693c:	e00c      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f000 f93a 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 800694e:	e003      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e000      	b.n	8006958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <TIM_Base_SetConfig+0x118>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d027      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <TIM_Base_SetConfig+0x118>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d023      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a29      	ldr	r2, [pc, #164]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d017      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a28      	ldr	r2, [pc, #160]	; (8006aec <TIM_Base_SetConfig+0x128>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a26      	ldr	r2, [pc, #152]	; (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <TIM_Base_SetConfig+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <TIM_Base_SetConfig+0x138>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <TIM_Base_SetConfig+0x13c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0xf8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d103      	bne.n	8006ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	615a      	str	r2, [r3, #20]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	40001800 	.word	0x40001800
 8006afc:	40001c00 	.word	0x40001c00
 8006b00:	40002000 	.word	0x40002000

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0210 	bic.w	r2, r3, #16
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f043 0307 	orr.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e05a      	b.n	8006d06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d022      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9c:	d01d      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10c      	bne.n	8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40001800 	.word	0x40001800

08006d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e03f      	b.n	8006dea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fa ffce 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2224      	movs	r2, #36	; 0x24
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f9cb 	bl	8007138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695a      	ldr	r2, [r3, #20]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08a      	sub	sp, #40	; 0x28
 8006df6:	af02      	add	r7, sp, #8
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	603b      	str	r3, [r7, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d17c      	bne.n	8006f0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_UART_Transmit+0x2c>
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e075      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_UART_Transmit+0x3e>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e06e      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2221      	movs	r2, #33	; 0x21
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e46:	f7fb fa8d 	bl	8002364 <HAL_GetTick>
 8006e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	88fa      	ldrh	r2, [r7, #6]
 8006e50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e60:	d108      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e003      	b.n	8006e7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e84:	e02a      	b.n	8006edc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2180      	movs	r1, #128	; 0x80
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f8e2 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e036      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3302      	adds	r3, #2
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e007      	b.n	8006ece <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	781a      	ldrb	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1cf      	bne.n	8006e86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f8b2 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e000      	b.n	8006f0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b08a      	sub	sp, #40	; 0x28
 8006f1a:	af02      	add	r7, sp, #8
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f040 808c 	bne.w	8007050 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_UART_Receive+0x2e>
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e084      	b.n	8007052 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Receive+0x40>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e07d      	b.n	8007052 <HAL_UART_Receive+0x13c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2222      	movs	r2, #34	; 0x22
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f72:	f7fb f9f7 	bl	8002364 <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d108      	bne.n	8006fa0 <HAL_UART_Receive+0x8a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	61bb      	str	r3, [r7, #24]
 8006f9e:	e003      	b.n	8006fa8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006fb0:	e043      	b.n	800703a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2120      	movs	r1, #32
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f84c 	bl	800705a <UART_WaitOnFlagUntilTimeout>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e042      	b.n	8007052 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10c      	bne.n	8006fec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e01f      	b.n	800702c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff4:	d007      	beq.n	8007006 <HAL_UART_Receive+0xf0>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_UART_Receive+0xfe>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	b2da      	uxtb	r2, r3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e008      	b.n	8007026 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3301      	adds	r3, #1
 800702a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1b6      	bne.n	8006fb2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b090      	sub	sp, #64	; 0x40
 800705e:	af00      	add	r7, sp, #0
 8007060:	60f8      	str	r0, [r7, #12]
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	4613      	mov	r3, r2
 8007068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706a:	e050      	b.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d04c      	beq.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <UART_WaitOnFlagUntilTimeout+0x30>
 800707a:	f7fb f973 	bl	8002364 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007086:	429a      	cmp	r2, r3
 8007088:	d241      	bcs.n	800710e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	330c      	adds	r3, #12
 80070a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070aa:	637a      	str	r2, [r7, #52]	; 0x34
 80070ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b2:	e841 2300 	strex	r3, r2, [r1]
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e5      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3314      	adds	r3, #20
 80070dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070de:	623a      	str	r2, [r7, #32]
 80070e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	69f9      	ldr	r1, [r7, #28]
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e5      	bne.n	80070be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e00f      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4013      	ands	r3, r2
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	429a      	cmp	r2, r3
 800711c:	bf0c      	ite	eq
 800711e:	2301      	moveq	r3, #1
 8007120:	2300      	movne	r3, #0
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	429a      	cmp	r2, r3
 800712a:	d09f      	beq.n	800706c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3740      	adds	r7, #64	; 0x40
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800713c:	b0c0      	sub	sp, #256	; 0x100
 800713e:	af00      	add	r7, sp, #0
 8007140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007154:	68d9      	ldr	r1, [r3, #12]
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	ea40 0301 	orr.w	r3, r0, r1
 8007160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	431a      	orrs	r2, r3
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007190:	f021 010c 	bic.w	r1, r1, #12
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800719e:	430b      	orrs	r3, r1
 80071a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b2:	6999      	ldr	r1, [r3, #24]
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	ea40 0301 	orr.w	r3, r0, r1
 80071be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4b8f      	ldr	r3, [pc, #572]	; (8007404 <UART_SetConfig+0x2cc>)
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d005      	beq.n	80071d8 <UART_SetConfig+0xa0>
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b8d      	ldr	r3, [pc, #564]	; (8007408 <UART_SetConfig+0x2d0>)
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d104      	bne.n	80071e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d8:	f7fe fe7a 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 80071dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071e0:	e003      	b.n	80071ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe fe61 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 80071e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f4:	f040 810c 	bne.w	8007410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800720a:	4622      	mov	r2, r4
 800720c:	462b      	mov	r3, r5
 800720e:	1891      	adds	r1, r2, r2
 8007210:	65b9      	str	r1, [r7, #88]	; 0x58
 8007212:	415b      	adcs	r3, r3
 8007214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800721a:	4621      	mov	r1, r4
 800721c:	eb12 0801 	adds.w	r8, r2, r1
 8007220:	4629      	mov	r1, r5
 8007222:	eb43 0901 	adc.w	r9, r3, r1
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800723a:	4690      	mov	r8, r2
 800723c:	4699      	mov	r9, r3
 800723e:	4623      	mov	r3, r4
 8007240:	eb18 0303 	adds.w	r3, r8, r3
 8007244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007248:	462b      	mov	r3, r5
 800724a:	eb49 0303 	adc.w	r3, r9, r3
 800724e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800725e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007266:	460b      	mov	r3, r1
 8007268:	18db      	adds	r3, r3, r3
 800726a:	653b      	str	r3, [r7, #80]	; 0x50
 800726c:	4613      	mov	r3, r2
 800726e:	eb42 0303 	adc.w	r3, r2, r3
 8007272:	657b      	str	r3, [r7, #84]	; 0x54
 8007274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800727c:	f7f9 f808 	bl	8000290 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <UART_SetConfig+0x2d4>)
 8007286:	fba3 2302 	umull	r2, r3, r3, r2
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	011c      	lsls	r4, r3, #4
 800728e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800729c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072a0:	4642      	mov	r2, r8
 80072a2:	464b      	mov	r3, r9
 80072a4:	1891      	adds	r1, r2, r2
 80072a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072a8:	415b      	adcs	r3, r3
 80072aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072b0:	4641      	mov	r1, r8
 80072b2:	eb12 0a01 	adds.w	sl, r2, r1
 80072b6:	4649      	mov	r1, r9
 80072b8:	eb43 0b01 	adc.w	fp, r3, r1
 80072bc:	f04f 0200 	mov.w	r2, #0
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d0:	4692      	mov	sl, r2
 80072d2:	469b      	mov	fp, r3
 80072d4:	4643      	mov	r3, r8
 80072d6:	eb1a 0303 	adds.w	r3, sl, r3
 80072da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072de:	464b      	mov	r3, r9
 80072e0:	eb4b 0303 	adc.w	r3, fp, r3
 80072e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072fc:	460b      	mov	r3, r1
 80072fe:	18db      	adds	r3, r3, r3
 8007300:	643b      	str	r3, [r7, #64]	; 0x40
 8007302:	4613      	mov	r3, r2
 8007304:	eb42 0303 	adc.w	r3, r2, r3
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
 800730a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800730e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007312:	f7f8 ffbd 	bl	8000290 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4611      	mov	r1, r2
 800731c:	4b3b      	ldr	r3, [pc, #236]	; (800740c <UART_SetConfig+0x2d4>)
 800731e:	fba3 2301 	umull	r2, r3, r3, r1
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	; 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007332:	4b36      	ldr	r3, [pc, #216]	; (800740c <UART_SetConfig+0x2d4>)
 8007334:	fba3 2302 	umull	r2, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007340:	441c      	add	r4, r3
 8007342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800734c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	1891      	adds	r1, r2, r2
 800735a:	63b9      	str	r1, [r7, #56]	; 0x38
 800735c:	415b      	adcs	r3, r3
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007364:	4641      	mov	r1, r8
 8007366:	1851      	adds	r1, r2, r1
 8007368:	6339      	str	r1, [r7, #48]	; 0x30
 800736a:	4649      	mov	r1, r9
 800736c:	414b      	adcs	r3, r1
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800737c:	4659      	mov	r1, fp
 800737e:	00cb      	lsls	r3, r1, #3
 8007380:	4651      	mov	r1, sl
 8007382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007386:	4651      	mov	r1, sl
 8007388:	00ca      	lsls	r2, r1, #3
 800738a:	4610      	mov	r0, r2
 800738c:	4619      	mov	r1, r3
 800738e:	4603      	mov	r3, r0
 8007390:	4642      	mov	r2, r8
 8007392:	189b      	adds	r3, r3, r2
 8007394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007398:	464b      	mov	r3, r9
 800739a:	460a      	mov	r2, r1
 800739c:	eb42 0303 	adc.w	r3, r2, r3
 80073a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073b8:	460b      	mov	r3, r1
 80073ba:	18db      	adds	r3, r3, r3
 80073bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073be:	4613      	mov	r3, r2
 80073c0:	eb42 0303 	adc.w	r3, r2, r3
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ce:	f7f8 ff5f 	bl	8000290 <__aeabi_uldivmod>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	4b0d      	ldr	r3, [pc, #52]	; (800740c <UART_SetConfig+0x2d4>)
 80073d8:	fba3 1302 	umull	r1, r3, r3, r2
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	2164      	movs	r1, #100	; 0x64
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	3332      	adds	r3, #50	; 0x32
 80073ea:	4a08      	ldr	r2, [pc, #32]	; (800740c <UART_SetConfig+0x2d4>)
 80073ec:	fba2 2303 	umull	r2, r3, r2, r3
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	f003 0207 	and.w	r2, r3, #7
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4422      	add	r2, r4
 80073fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007400:	e105      	b.n	800760e <UART_SetConfig+0x4d6>
 8007402:	bf00      	nop
 8007404:	40011000 	.word	0x40011000
 8007408:	40011400 	.word	0x40011400
 800740c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800741a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800741e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007422:	4642      	mov	r2, r8
 8007424:	464b      	mov	r3, r9
 8007426:	1891      	adds	r1, r2, r2
 8007428:	6239      	str	r1, [r7, #32]
 800742a:	415b      	adcs	r3, r3
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007432:	4641      	mov	r1, r8
 8007434:	1854      	adds	r4, r2, r1
 8007436:	4649      	mov	r1, r9
 8007438:	eb43 0501 	adc.w	r5, r3, r1
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	00eb      	lsls	r3, r5, #3
 8007446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800744a:	00e2      	lsls	r2, r4, #3
 800744c:	4614      	mov	r4, r2
 800744e:	461d      	mov	r5, r3
 8007450:	4643      	mov	r3, r8
 8007452:	18e3      	adds	r3, r4, r3
 8007454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007458:	464b      	mov	r3, r9
 800745a:	eb45 0303 	adc.w	r3, r5, r3
 800745e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800746e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800747e:	4629      	mov	r1, r5
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	4621      	mov	r1, r4
 8007484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007488:	4621      	mov	r1, r4
 800748a:	008a      	lsls	r2, r1, #2
 800748c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007490:	f7f8 fefe 	bl	8000290 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4b60      	ldr	r3, [pc, #384]	; (800761c <UART_SetConfig+0x4e4>)
 800749a:	fba3 2302 	umull	r2, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	011c      	lsls	r4, r3, #4
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074b4:	4642      	mov	r2, r8
 80074b6:	464b      	mov	r3, r9
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	61b9      	str	r1, [r7, #24]
 80074bc:	415b      	adcs	r3, r3
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c4:	4641      	mov	r1, r8
 80074c6:	1851      	adds	r1, r2, r1
 80074c8:	6139      	str	r1, [r7, #16]
 80074ca:	4649      	mov	r1, r9
 80074cc:	414b      	adcs	r3, r1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074dc:	4659      	mov	r1, fp
 80074de:	00cb      	lsls	r3, r1, #3
 80074e0:	4651      	mov	r1, sl
 80074e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e6:	4651      	mov	r1, sl
 80074e8:	00ca      	lsls	r2, r1, #3
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	4603      	mov	r3, r0
 80074f0:	4642      	mov	r2, r8
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074f8:	464b      	mov	r3, r9
 80074fa:	460a      	mov	r2, r1
 80074fc:	eb42 0303 	adc.w	r3, r2, r3
 8007500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	67bb      	str	r3, [r7, #120]	; 0x78
 800750e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007510:	f04f 0200 	mov.w	r2, #0
 8007514:	f04f 0300 	mov.w	r3, #0
 8007518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800751c:	4649      	mov	r1, r9
 800751e:	008b      	lsls	r3, r1, #2
 8007520:	4641      	mov	r1, r8
 8007522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007526:	4641      	mov	r1, r8
 8007528:	008a      	lsls	r2, r1, #2
 800752a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800752e:	f7f8 feaf 	bl	8000290 <__aeabi_uldivmod>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <UART_SetConfig+0x4e4>)
 8007538:	fba3 1302 	umull	r1, r3, r3, r2
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	2164      	movs	r1, #100	; 0x64
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	3332      	adds	r3, #50	; 0x32
 800754a:	4a34      	ldr	r2, [pc, #208]	; (800761c <UART_SetConfig+0x4e4>)
 800754c:	fba2 2303 	umull	r2, r3, r2, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007556:	441c      	add	r4, r3
 8007558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800755c:	2200      	movs	r2, #0
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
 8007560:	677a      	str	r2, [r7, #116]	; 0x74
 8007562:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007566:	4642      	mov	r2, r8
 8007568:	464b      	mov	r3, r9
 800756a:	1891      	adds	r1, r2, r2
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	415b      	adcs	r3, r3
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007576:	4641      	mov	r1, r8
 8007578:	1851      	adds	r1, r2, r1
 800757a:	6039      	str	r1, [r7, #0]
 800757c:	4649      	mov	r1, r9
 800757e:	414b      	adcs	r3, r1
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800758e:	4659      	mov	r1, fp
 8007590:	00cb      	lsls	r3, r1, #3
 8007592:	4651      	mov	r1, sl
 8007594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007598:	4651      	mov	r1, sl
 800759a:	00ca      	lsls	r2, r1, #3
 800759c:	4610      	mov	r0, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	4642      	mov	r2, r8
 80075a4:	189b      	adds	r3, r3, r2
 80075a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a8:	464b      	mov	r3, r9
 80075aa:	460a      	mov	r2, r1
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	663b      	str	r3, [r7, #96]	; 0x60
 80075bc:	667a      	str	r2, [r7, #100]	; 0x64
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f04f 0300 	mov.w	r3, #0
 80075c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075ca:	4649      	mov	r1, r9
 80075cc:	008b      	lsls	r3, r1, #2
 80075ce:	4641      	mov	r1, r8
 80075d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d4:	4641      	mov	r1, r8
 80075d6:	008a      	lsls	r2, r1, #2
 80075d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075dc:	f7f8 fe58 	bl	8000290 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <UART_SetConfig+0x4e4>)
 80075e6:	fba3 1302 	umull	r1, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	2164      	movs	r1, #100	; 0x64
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	3332      	adds	r3, #50	; 0x32
 80075f8:	4a08      	ldr	r2, [pc, #32]	; (800761c <UART_SetConfig+0x4e4>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4422      	add	r2, r4
 800760c:	609a      	str	r2, [r3, #8]
}
 800760e:	bf00      	nop
 8007610:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007614:	46bd      	mov	sp, r7
 8007616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761a:	bf00      	nop
 800761c:	51eb851f 	.word	0x51eb851f

08007620 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d123      	bne.n	800767a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800763a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	6851      	ldr	r1, [r2, #4]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	6892      	ldr	r2, [r2, #8]
 8007646:	4311      	orrs	r1, r2
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	68d2      	ldr	r2, [r2, #12]
 800764c:	4311      	orrs	r1, r2
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	6912      	ldr	r2, [r2, #16]
 8007652:	4311      	orrs	r1, r2
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	6952      	ldr	r2, [r2, #20]
 8007658:	4311      	orrs	r1, r2
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	6992      	ldr	r2, [r2, #24]
 800765e:	4311      	orrs	r1, r2
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	69d2      	ldr	r2, [r2, #28]
 8007664:	4311      	orrs	r1, r2
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	6a12      	ldr	r2, [r2, #32]
 800766a:	4311      	orrs	r1, r2
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007670:	430a      	orrs	r2, r1
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e028      	b.n	80076cc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	69d9      	ldr	r1, [r3, #28]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	4319      	orrs	r1, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	430b      	orrs	r3, r1
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80076a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	6851      	ldr	r1, [r2, #4]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	6892      	ldr	r2, [r2, #8]
 80076ac:	4311      	orrs	r1, r2
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	68d2      	ldr	r2, [r2, #12]
 80076b2:	4311      	orrs	r1, r2
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	6912      	ldr	r2, [r2, #16]
 80076b8:	4311      	orrs	r1, r2
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	6952      	ldr	r2, [r2, #20]
 80076be:	4311      	orrs	r1, r2
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	6992      	ldr	r2, [r2, #24]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d128      	bne.n	800773e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	1e59      	subs	r1, r3, #1
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	3b01      	subs	r3, #1
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	4319      	orrs	r1, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	3b01      	subs	r3, #1
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	4319      	orrs	r1, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	3b01      	subs	r3, #1
 8007714:	031b      	lsls	r3, r3, #12
 8007716:	4319      	orrs	r1, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	3b01      	subs	r3, #1
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	4319      	orrs	r1, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	3b01      	subs	r3, #1
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	4319      	orrs	r1, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	3b01      	subs	r3, #1
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	430b      	orrs	r3, r1
 8007736:	431a      	orrs	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]
 800773c:	e02f      	b.n	800779e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007746:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	68d2      	ldr	r2, [r2, #12]
 800774e:	3a01      	subs	r2, #1
 8007750:	0311      	lsls	r1, r2, #12
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	6952      	ldr	r2, [r2, #20]
 8007756:	3a01      	subs	r2, #1
 8007758:	0512      	lsls	r2, r2, #20
 800775a:	430a      	orrs	r2, r1
 800775c:	431a      	orrs	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	1e59      	subs	r1, r3, #1
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	3b01      	subs	r3, #1
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	4319      	orrs	r1, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	3b01      	subs	r3, #1
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	4319      	orrs	r1, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	3b01      	subs	r3, #1
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	4319      	orrs	r1, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	3b01      	subs	r3, #1
 8007794:	061b      	lsls	r3, r3, #24
 8007796:	430b      	orrs	r3, r1
 8007798:	431a      	orrs	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ac:	b084      	sub	sp, #16
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	f107 001c 	add.w	r0, r7, #28
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d122      	bne.n	800780a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80077d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d105      	bne.n	80077fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9c0 	bl	8007b84 <USB_CoreReset>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
 8007808:	e01a      	b.n	8007840 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f9b4 	bl	8007b84 <USB_CoreReset>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
 8007832:	e005      	b.n	8007840 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	2b01      	cmp	r3, #1
 8007844:	d10b      	bne.n	800785e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f043 0206 	orr.w	r2, r3, #6
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f043 0220 	orr.w	r2, r3, #32
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800786a:	b004      	add	sp, #16
 800786c:	4770      	bx	lr

0800786e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f043 0201 	orr.w	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f023 0201 	bic.w	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d115      	bne.n	8007900 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078e0:	2001      	movs	r0, #1
 80078e2:	f7fa fd4b 	bl	800237c <HAL_Delay>
      ms++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f93a 	bl	8007b66 <USB_GetMode>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d01e      	beq.n	8007936 <USB_SetCurrentMode+0x84>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b31      	cmp	r3, #49	; 0x31
 80078fc:	d9f0      	bls.n	80078e0 <USB_SetCurrentMode+0x2e>
 80078fe:	e01a      	b.n	8007936 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d115      	bne.n	8007932 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007912:	2001      	movs	r0, #1
 8007914:	f7fa fd32 	bl	800237c <HAL_Delay>
      ms++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f921 	bl	8007b66 <USB_GetMode>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <USB_SetCurrentMode+0x84>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b31      	cmp	r3, #49	; 0x31
 800792e:	d9f0      	bls.n	8007912 <USB_SetCurrentMode+0x60>
 8007930:	e001      	b.n	8007936 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e005      	b.n	8007942 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b32      	cmp	r3, #50	; 0x32
 800793a:	d101      	bne.n	8007940 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <USB_FlushTxFifo+0x64>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d901      	bls.n	800796c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e01b      	b.n	80079a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	daf2      	bge.n	800795a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	019b      	lsls	r3, r3, #6
 800797c:	f043 0220 	orr.w	r2, r3, #32
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <USB_FlushTxFifo+0x64>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e006      	b.n	80079a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d0f0      	beq.n	8007984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	00030d40 	.word	0x00030d40

080079b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <USB_FlushRxFifo+0x5c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e018      	b.n	8007a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	daf2      	bge.n	80079c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2210      	movs	r2, #16
 80079e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <USB_FlushRxFifo+0x5c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d901      	bls.n	80079f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e006      	b.n	8007a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	2b10      	cmp	r3, #16
 8007a00:	d0f0      	beq.n	80079e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	00030d40 	.word	0x00030d40

08007a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b089      	sub	sp, #36	; 0x24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	460b      	mov	r3, r1
 8007a24:	71fb      	strb	r3, [r7, #7]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d123      	bne.n	8007a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a3a:	88bb      	ldrh	r3, [r7, #4]
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	e018      	b.n	8007a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	031a      	lsls	r2, r3, #12
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	461a      	mov	r2, r3
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	3301      	adds	r3, #1
 8007a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	3301      	adds	r3, #1
 8007a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	3301      	adds	r3, #1
 8007a78:	61bb      	str	r3, [r7, #24]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d3e2      	bcc.n	8007a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3724      	adds	r7, #36	; 0x24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b08b      	sub	sp, #44	; 0x2c
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	089b      	lsrs	r3, r3, #2
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	623b      	str	r3, [r7, #32]
 8007aba:	e014      	b.n	8007ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	3301      	adds	r3, #1
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	3301      	adds	r3, #1
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	623b      	str	r3, [r7, #32]
 8007ae6:	6a3a      	ldr	r2, [r7, #32]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d3e6      	bcc.n	8007abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007aee:	8bfb      	ldrh	r3, [r7, #30]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01e      	beq.n	8007b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afe:	461a      	mov	r2, r3
 8007b00:	f107 0310 	add.w	r3, r7, #16
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	701a      	strb	r2, [r3, #0]
      i++;
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	3301      	adds	r3, #1
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b26:	8bfb      	ldrh	r3, [r7, #30]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b2c:	8bfb      	ldrh	r3, [r7, #30]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1ea      	bne.n	8007b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	372c      	adds	r7, #44	; 0x2c
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4013      	ands	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f003 0301 	and.w	r3, r3, #1
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <USB_CoreReset+0x64>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e01b      	b.n	8007bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	daf2      	bge.n	8007b90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f043 0201 	orr.w	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <USB_CoreReset+0x64>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d901      	bls.n	8007bcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e006      	b.n	8007bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d0f0      	beq.n	8007bba <USB_CoreReset+0x36>

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	00030d40 	.word	0x00030d40

08007bec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bec:	b084      	sub	sp, #16
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d018      	beq.n	8007c74 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d10a      	bne.n	8007c5e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c56:	f043 0304 	orr.w	r3, r3, #4
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	e014      	b.n	8007c88 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c6c:	f023 0304 	bic.w	r3, r3, #4
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e009      	b.n	8007c88 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c82:	f023 0304 	bic.w	r3, r3, #4
 8007c86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c88:	2110      	movs	r1, #16
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff fe5e 	bl	800794c <USB_FlushTxFifo>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fe8a 	bl	80079b4 <USB_FlushRxFifo>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	e015      	b.n	8007cdc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d3e5      	bcc.n	8007cb0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <USB_HostInit+0x16c>)
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <USB_HostInit+0x170>)
 8007d10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d14:	e009      	b.n	8007d2a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <USB_HostInit+0x174>)
 8007d20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a0f      	ldr	r2, [pc, #60]	; (8007d64 <USB_HostInit+0x178>)
 8007d26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d105      	bne.n	8007d3c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f043 0210 	orr.w	r2, r3, #16
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <USB_HostInit+0x17c>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d54:	b004      	add	sp, #16
 8007d56:	4770      	bx	lr
 8007d58:	01000200 	.word	0x01000200
 8007d5c:	00e00300 	.word	0x00e00300
 8007d60:	00600080 	.word	0x00600080
 8007d64:	004000e0 	.word	0x004000e0
 8007d68:	a3200008 	.word	0xa3200008

08007d6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d8a:	f023 0303 	bic.w	r3, r3, #3
 8007d8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007da4:	4313      	orrs	r3, r2
 8007da6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d107      	bne.n	8007dbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db4:	461a      	mov	r2, r3
 8007db6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007dba:	6053      	str	r3, [r2, #4]
 8007dbc:	e009      	b.n	8007dd2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d106      	bne.n	8007dd2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007dd0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007e10:	2064      	movs	r0, #100	; 0x64
 8007e12:	f7fa fab3 	bl	800237c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e22:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e24:	200a      	movs	r0, #10
 8007e26:	f7fa faa9 	bl	800237c <HAL_Delay>

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d109      	bne.n	8007e78 <USB_DriveVbus+0x44>
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d106      	bne.n	8007e78 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e76:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e82:	d109      	bne.n	8007e98 <USB_DriveVbus+0x64>
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e96:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	0c5b      	lsrs	r3, r3, #17
 8007ec4:	f003 0303 	and.w	r3, r3, #3
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	b29b      	uxth	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
	...

08007ef8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	4608      	mov	r0, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	461a      	mov	r2, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	70fb      	strb	r3, [r7, #3]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70bb      	strb	r3, [r7, #2]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	461a      	mov	r2, r3
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d87e      	bhi.n	8008034 <USB_HC_Init+0x13c>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <USB_HC_Init+0x44>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007ff7 	.word	0x08007ff7
 8007f44:	08007f4d 	.word	0x08007f4d
 8007f48:	08007fb9 	.word	0x08007fb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da10      	bge.n	8007f8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	78fa      	ldrb	r2, [r7, #3]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f86:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f88:	e057      	b.n	800803a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d051      	beq.n	800803a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f96:	78fb      	ldrb	r3, [r7, #3]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	78fa      	ldrb	r2, [r7, #3]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007fb4:	60d3      	str	r3, [r2, #12]
      break;
 8007fb6:	e040      	b.n	800803a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f240 639d 	movw	r3, #1693	; 0x69d
 8007fca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	da34      	bge.n	800803e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ff2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ff4:	e023      	b.n	800803e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008002:	461a      	mov	r2, r3
 8008004:	f240 2325 	movw	r3, #549	; 0x225
 8008008:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800800a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800800e:	2b00      	cmp	r3, #0
 8008010:	da17      	bge.n	8008042 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4413      	add	r3, r2
 800801a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	440a      	add	r2, r1
 8008028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800802c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008030:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008032:	e006      	b.n	8008042 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	77fb      	strb	r3, [r7, #31]
      break;
 8008038:	e004      	b.n	8008044 <USB_HC_Init+0x14c>
      break;
 800803a:	bf00      	nop
 800803c:	e002      	b.n	8008044 <USB_HC_Init+0x14c>
      break;
 800803e:	bf00      	nop
 8008040:	e000      	b.n	8008044 <USB_HC_Init+0x14c>
      break;
 8008042:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	440a      	add	r2, r1
 800805a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805e:	f043 0302 	orr.w	r3, r3, #2
 8008062:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806a:	699a      	ldr	r2, [r3, #24]
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	2101      	movs	r1, #1
 8008074:	fa01 f303 	lsl.w	r3, r1, r3
 8008078:	6939      	ldr	r1, [r7, #16]
 800807a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800807e:	4313      	orrs	r3, r2
 8008080:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800808e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008092:	2b00      	cmp	r3, #0
 8008094:	da03      	bge.n	800809e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	e001      	b.n	80080a2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff feff 	bl	8007ea6 <USB_GetHostSpeed>
 80080a8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80080aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d106      	bne.n	80080c0 <USB_HC_Init+0x1c8>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d003      	beq.n	80080c0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80080b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e001      	b.n	80080c4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080c4:	787b      	ldrb	r3, [r7, #1]
 80080c6:	059b      	lsls	r3, r3, #22
 80080c8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080cc:	78bb      	ldrb	r3, [r7, #2]
 80080ce:	02db      	lsls	r3, r3, #11
 80080d0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080d4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080da:	049b      	lsls	r3, r3, #18
 80080dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	0159      	lsls	r1, r3, #5
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	440b      	add	r3, r1
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008100:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008102:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008106:	2b03      	cmp	r3, #3
 8008108:	d003      	beq.n	8008112 <USB_HC_Init+0x21a>
 800810a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10f      	bne.n	8008132 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	78fa      	ldrb	r2, [r7, #3]
 8008122:	0151      	lsls	r1, r2, #5
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	440a      	add	r2, r1
 8008128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800812c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008130:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008132:	7ffb      	ldrb	r3, [r7, #31]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3720      	adds	r7, #32
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af02      	add	r7, sp, #8
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008158:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d02d      	beq.n	80081c2 <USB_HC_StartXfer+0x86>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	791b      	ldrb	r3, [r3, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d129      	bne.n	80081c2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d117      	bne.n	80081a4 <USB_HC_StartXfer+0x68>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	79db      	ldrb	r3, [r3, #7]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <USB_HC_StartXfer+0x48>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	79db      	ldrb	r3, [r3, #7]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d10f      	bne.n	80081a4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	4413      	add	r3, r2
 800818c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	440a      	add	r2, r1
 800819a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800819e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10b      	bne.n	80081c2 <USB_HC_StartXfer+0x86>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	795b      	ldrb	r3, [r3, #5]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d107      	bne.n	80081c2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	4619      	mov	r1, r3
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fa0f 	bl	80085dc <USB_DoPing>
      return HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	e0f8      	b.n	80083b4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d018      	beq.n	80081fc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	8912      	ldrh	r2, [r2, #8]
 80081d2:	4413      	add	r3, r2
 80081d4:	3b01      	subs	r3, #1
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	8912      	ldrh	r2, [r2, #8]
 80081da:	fbb3 f3f2 	udiv	r3, r3, r2
 80081de:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80081e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081e2:	8b7b      	ldrh	r3, [r7, #26]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d90b      	bls.n	8008200 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80081e8:	8b7b      	ldrh	r3, [r7, #26]
 80081ea:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	8912      	ldrh	r2, [r2, #8]
 80081f2:	fb03 f202 	mul.w	r2, r3, r2
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	e001      	b.n	8008200 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80081fc:	2301      	movs	r3, #1
 80081fe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	78db      	ldrb	r3, [r3, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	8912      	ldrh	r2, [r2, #8]
 800820e:	fb03 f202 	mul.w	r2, r3, r2
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	611a      	str	r2, [r3, #16]
 8008216:	e003      	b.n	8008220 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800822a:	04d9      	lsls	r1, r3, #19
 800822c:	4b63      	ldr	r3, [pc, #396]	; (80083bc <USB_HC_StartXfer+0x280>)
 800822e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008230:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	7a9b      	ldrb	r3, [r3, #10]
 8008236:	075b      	lsls	r3, r3, #29
 8008238:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800823c:	69f9      	ldr	r1, [r7, #28]
 800823e:	0148      	lsls	r0, r1, #5
 8008240:	6a39      	ldr	r1, [r7, #32]
 8008242:	4401      	add	r1, r0
 8008244:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008248:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800824a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	68d9      	ldr	r1, [r3, #12]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008262:	460a      	mov	r2, r1
 8008264:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	bf0c      	ite	eq
 8008276:	2301      	moveq	r3, #1
 8008278:	2300      	movne	r3, #0
 800827a:	b2db      	uxtb	r3, r3
 800827c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	4413      	add	r3, r2
 8008286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	0151      	lsls	r1, r2, #5
 8008290:	6a3a      	ldr	r2, [r7, #32]
 8008292:	440a      	add	r2, r1
 8008294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800829c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	7e7b      	ldrb	r3, [r7, #25]
 80082ae:	075b      	lsls	r3, r3, #29
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	0148      	lsls	r0, r1, #5
 80082b4:	6a39      	ldr	r1, [r7, #32]
 80082b6:	4401      	add	r1, r0
 80082b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80082bc:	4313      	orrs	r3, r2
 80082be:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082d6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	78db      	ldrb	r3, [r3, #3]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e6:	613b      	str	r3, [r7, #16]
 80082e8:	e003      	b.n	80082f2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082f0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082f8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	4413      	add	r3, r2
 8008302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008306:	461a      	mov	r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	e04e      	b.n	80083b4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	78db      	ldrb	r3, [r3, #3]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d149      	bne.n	80083b2 <USB_HC_StartXfer+0x276>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d045      	beq.n	80083b2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	79db      	ldrb	r3, [r3, #7]
 800832a:	2b03      	cmp	r3, #3
 800832c:	d830      	bhi.n	8008390 <USB_HC_StartXfer+0x254>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <USB_HC_StartXfer+0x1f8>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008345 	.word	0x08008345
 8008338:	08008369 	.word	0x08008369
 800833c:	08008345 	.word	0x08008345
 8008340:	08008369 	.word	0x08008369
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	3303      	adds	r3, #3
 800834a:	089b      	lsrs	r3, r3, #2
 800834c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800834e:	8afa      	ldrh	r2, [r7, #22]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	b29b      	uxth	r3, r3
 8008356:	429a      	cmp	r2, r3
 8008358:	d91c      	bls.n	8008394 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f043 0220 	orr.w	r2, r3, #32
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	619a      	str	r2, [r3, #24]
        }
        break;
 8008366:	e015      	b.n	8008394 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	3303      	adds	r3, #3
 800836e:	089b      	lsrs	r3, r3, #2
 8008370:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008372:	8afa      	ldrh	r2, [r7, #22]
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	b29b      	uxth	r3, r3
 800837e:	429a      	cmp	r2, r3
 8008380:	d90a      	bls.n	8008398 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	619a      	str	r2, [r3, #24]
        }
        break;
 800838e:	e003      	b.n	8008398 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008390:	bf00      	nop
 8008392:	e002      	b.n	800839a <USB_HC_StartXfer+0x25e>
        break;
 8008394:	bf00      	nop
 8008396:	e000      	b.n	800839a <USB_HC_StartXfer+0x25e>
        break;
 8008398:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	68d9      	ldr	r1, [r3, #12]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	785a      	ldrb	r2, [r3, #1]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2000      	movs	r0, #0
 80083aa:	9000      	str	r0, [sp, #0]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fb31 	bl	8007a14 <USB_WritePacket>
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	; 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	1ff80000 	.word	0x1ff80000

080083c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	b29b      	uxth	r3, r3
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b089      	sub	sp, #36	; 0x24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	0c9b      	lsrs	r3, r3, #18
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	0fdb      	lsrs	r3, r3, #31
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b20      	cmp	r3, #32
 8008430:	d104      	bne.n	800843c <USB_HC_Halt+0x5a>
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e0c8      	b.n	80085ce <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <USB_HC_Halt+0x66>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d163      	bne.n	8008510 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008466:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 80ab 	bne.w	80085cc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d133      	bne.n	80084ea <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	440a      	add	r2, r1
 8008498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	69fa      	ldr	r2, [r7, #28]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084c0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084ce:	d81d      	bhi.n	800850c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e6:	d0ec      	beq.n	80084c2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084e8:	e070      	b.n	80085cc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69ba      	ldr	r2, [r7, #24]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	69fa      	ldr	r2, [r7, #28]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008508:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800850a:	e05f      	b.n	80085cc <USB_HC_Halt+0x1ea>
            break;
 800850c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800850e:	e05d      	b.n	80085cc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	440a      	add	r2, r1
 8008526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800852a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800852e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d133      	bne.n	80085a8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	440a      	add	r2, r1
 8008556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800855e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800857e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800858c:	d81d      	bhi.n	80085ca <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a4:	d0ec      	beq.n	8008580 <USB_HC_Halt+0x19e>
 80085a6:	e011      	b.n	80085cc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e000      	b.n	80085cc <USB_HC_Halt+0x1ea>
          break;
 80085ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3724      	adds	r7, #36	; 0x24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80085f0:	2301      	movs	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	04da      	lsls	r2, r3, #19
 80085f8:	4b15      	ldr	r3, [pc, #84]	; (8008650 <USB_DoPing+0x74>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	440a      	add	r2, r1
 8008604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800860c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008624:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800862c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	461a      	mov	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	1ff80000 	.word	0x1ff80000

08008654 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff f911 	bl	8007890 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800866e:	2110      	movs	r1, #16
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff f96b 	bl	800794c <USB_FlushTxFifo>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff f997 	bl	80079b4 <USB_FlushRxFifo>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	e01f      	b.n	80086d6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086bc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ca:	461a      	mov	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	3301      	adds	r3, #1
 80086d4:	61bb      	str	r3, [r7, #24]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b0f      	cmp	r3, #15
 80086da:	d9dc      	bls.n	8008696 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	61bb      	str	r3, [r7, #24]
 80086e0:	e034      	b.n	800874c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008708:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008716:	461a      	mov	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008728:	d80c      	bhi.n	8008744 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	4413      	add	r3, r2
 8008732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800873c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008740:	d0ec      	beq.n	800871c <USB_StopHost+0xc8>
 8008742:	e000      	b.n	8008746 <USB_StopHost+0xf2>
        break;
 8008744:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	3301      	adds	r3, #1
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b0f      	cmp	r3, #15
 8008750:	d9c7      	bls.n	80086e2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008758:	461a      	mov	r2, r3
 800875a:	f04f 33ff 	mov.w	r3, #4294967295
 800875e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f04f 32ff 	mov.w	r2, #4294967295
 8008766:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff f880 	bl	800786e <USB_EnableGlobalInt>

  return ret;
 800876e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b089      	sub	sp, #36	; 0x24
 800877c:	af04      	add	r7, sp, #16
 800877e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008780:	2301      	movs	r3, #1
 8008782:	2202      	movs	r2, #2
 8008784:	2102      	movs	r1, #2
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fc66 	bl	8009058 <USBH_FindInterface>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d002      	beq.n	800879c <USBH_CDC_InterfaceInit+0x24>
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d901      	bls.n	80087a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800879c:	2302      	movs	r3, #2
 800879e:	e13d      	b.n	8008a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fc3b 	bl	8009020 <USBH_SelectInterface>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80087b4:	2302      	movs	r3, #2
 80087b6:	e131      	b.n	8008a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80087be:	2050      	movs	r0, #80	; 0x50
 80087c0:	f002 fb00 	bl	800adc4 <malloc>
 80087c4:	4603      	mov	r3, r0
 80087c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	e11f      	b.n	8008a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80087dc:	2250      	movs	r2, #80	; 0x50
 80087de:	2100      	movs	r1, #0
 80087e0:	68b8      	ldr	r0, [r7, #8]
 80087e2:	f002 faff 	bl	800ade4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	211a      	movs	r1, #26
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	b25b      	sxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da15      	bge.n	800882a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	211a      	movs	r1, #26
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	4413      	add	r3, r2
 800880a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	211a      	movs	r1, #26
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	785b      	ldrb	r3, [r3, #1]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 ff2c 	bl	800a68e <USBH_AllocPipe>
 8008836:	4603      	mov	r3, r0
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	7819      	ldrb	r1, [r3, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	7858      	ldrb	r0, [r3, #1]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	8952      	ldrh	r2, [r2, #10]
 8008856:	9202      	str	r2, [sp, #8]
 8008858:	2203      	movs	r2, #3
 800885a:	9201      	str	r2, [sp, #4]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	4623      	mov	r3, r4
 8008860:	4602      	mov	r2, r0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fee4 	bl	800a630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f002 f9f9 	bl	800ac68 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	210a      	movs	r1, #10
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fbeb 	bl	8009058 <USBH_FindInterface>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2bff      	cmp	r3, #255	; 0xff
 800888a:	d002      	beq.n	8008892 <USBH_CDC_InterfaceInit+0x11a>
 800888c:	7bfb      	ldrb	r3, [r7, #15]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d901      	bls.n	8008896 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008892:	2302      	movs	r3, #2
 8008894:	e0c2      	b.n	8008a1c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	211a      	movs	r1, #26
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da16      	bge.n	80088dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	211a      	movs	r1, #26
 80088b4:	fb01 f303 	mul.w	r3, r1, r3
 80088b8:	4413      	add	r3, r2
 80088ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	211a      	movs	r1, #26
 80088ca:	fb01 f303 	mul.w	r3, r1, r3
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088d4:	881a      	ldrh	r2, [r3, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	835a      	strh	r2, [r3, #26]
 80088da:	e015      	b.n	8008908 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	211a      	movs	r1, #26
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	4413      	add	r3, r2
 80088e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088ec:	781a      	ldrb	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	211a      	movs	r1, #26
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008902:	881a      	ldrh	r2, [r3, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	211a      	movs	r1, #26
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b25b      	sxtb	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	da16      	bge.n	800894e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	211a      	movs	r1, #26
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	211a      	movs	r1, #26
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	4413      	add	r3, r2
 8008942:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008946:	881a      	ldrh	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	835a      	strh	r2, [r3, #26]
 800894c:	e015      	b.n	800897a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	211a      	movs	r1, #26
 8008954:	fb01 f303 	mul.w	r3, r1, r3
 8008958:	4413      	add	r3, r2
 800895a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	211a      	movs	r1, #26
 800896a:	fb01 f303 	mul.w	r3, r1, r3
 800896e:	4413      	add	r3, r2
 8008970:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008974:	881a      	ldrh	r2, [r3, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	7b9b      	ldrb	r3, [r3, #14]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fe84 	bl	800a68e <USBH_AllocPipe>
 8008986:	4603      	mov	r3, r0
 8008988:	461a      	mov	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7bdb      	ldrb	r3, [r3, #15]
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fe7a 	bl	800a68e <USBH_AllocPipe>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	7b59      	ldrb	r1, [r3, #13]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	7b98      	ldrb	r0, [r3, #14]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	8b12      	ldrh	r2, [r2, #24]
 80089ba:	9202      	str	r2, [sp, #8]
 80089bc:	2202      	movs	r2, #2
 80089be:	9201      	str	r2, [sp, #4]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	4623      	mov	r3, r4
 80089c4:	4602      	mov	r2, r0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fe32 	bl	800a630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	7b19      	ldrb	r1, [r3, #12]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	7bd8      	ldrb	r0, [r3, #15]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	8b52      	ldrh	r2, [r2, #26]
 80089e4:	9202      	str	r2, [sp, #8]
 80089e6:	2202      	movs	r2, #2
 80089e8:	9201      	str	r2, [sp, #4]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4623      	mov	r3, r4
 80089ee:	4602      	mov	r2, r0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 fe1d 	bl	800a630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	7b5b      	ldrb	r3, [r3, #13]
 8008a02:	2200      	movs	r2, #0
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f002 f92e 	bl	800ac68 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	7b1b      	ldrb	r3, [r3, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f002 f927 	bl	800ac68 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd90      	pop	{r4, r7, pc}

08008a24 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 fe12 	bl	800a66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 fe3d 	bl	800a6d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	7b1b      	ldrb	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	7b1b      	ldrb	r3, [r3, #12]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fdff 	bl	800a66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	7b1b      	ldrb	r3, [r3, #12]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fe2a 	bl	800a6d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	7b5b      	ldrb	r3, [r3, #13]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00e      	beq.n	8008aa8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	7b5b      	ldrb	r3, [r3, #13]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 fdec 	bl	800a66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	7b5b      	ldrb	r3, [r3, #13]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 fe17 	bl	800a6d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 f989 	bl	800add4 <free>
    phost->pActiveClass->pData = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ac8:	2200      	movs	r2, #0
 8008aca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3340      	adds	r3, #64	; 0x40
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8b1 	bl	8008c56 <GetLineCoding>
 8008af4:	4603      	mov	r3, r0
 8008af6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b04:	2102      	movs	r1, #2
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d877      	bhi.n	8008c28 <USBH_CDC_Process+0x114>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <USBH_CDC_Process+0x2c>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
 8008b48:	08008b8b 	.word	0x08008b8b
 8008b4c:	08008bff 	.word	0x08008bff
 8008b50:	08008c0d 	.word	0x08008c0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
      break;
 8008b58:	e06d      	b.n	8008c36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f897 	bl	8008c94 <SetLineCoding>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b78:	e058      	b.n	8008c2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d055      	beq.n	8008c2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2204      	movs	r2, #4
 8008b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008b88:	e050      	b.n	8008c2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3340      	adds	r3, #64	; 0x40
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f860 	bl	8008c56 <GetLineCoding>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d126      	bne.n	8008bee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb2:	791b      	ldrb	r3, [r3, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d13b      	bne.n	8008c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d133      	bne.n	8008c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d12b      	bne.n	8008c30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d124      	bne.n	8008c30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f958 	bl	8008e9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008bec:	e020      	b.n	8008c30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d01d      	beq.n	8008c30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bfc:	e018      	b.n	8008c30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f867 	bl	8008cd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f8da 	bl	8008dbe <CDC_ProcessReception>
      break;
 8008c0a:	e014      	b.n	8008c36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 ffef 	bl	8009bf2 <USBH_ClrFeature>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c26:	e005      	b.n	8008c34 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c28:	bf00      	nop
 8008c2a:	e004      	b.n	8008c36 <USBH_CDC_Process+0x122>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e002      	b.n	8008c36 <USBH_CDC_Process+0x122>
      break;
 8008c30:	bf00      	nop
 8008c32:	e000      	b.n	8008c36 <USBH_CDC_Process+0x122>
      break;
 8008c34:	bf00      	nop

  }

  return status;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	22a1      	movs	r2, #161	; 0xa1
 8008c64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2221      	movs	r2, #33	; 0x21
 8008c6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2207      	movs	r2, #7
 8008c7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2207      	movs	r2, #7
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 fa81 	bl	800a18c <USBH_CtlReq>
 8008c8a:	4603      	mov	r3, r0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2221      	movs	r2, #33	; 0x21
 8008ca2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2207      	movs	r2, #7
 8008cba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2207      	movs	r2, #7
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fa62 	bl	800a18c <USBH_CtlReq>
 8008cc8:	4603      	mov	r3, r0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b086      	sub	sp, #24
 8008cd6:	af02      	add	r7, sp, #8
 8008cd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d002      	beq.n	8008cf8 <CDC_ProcessTransmission+0x26>
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d023      	beq.n	8008d3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008cf6:	e05e      	b.n	8008db6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	8b12      	ldrh	r2, [r2, #24]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d90b      	bls.n	8008d1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	69d9      	ldr	r1, [r3, #28]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8b1a      	ldrh	r2, [r3, #24]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	7b5b      	ldrb	r3, [r3, #13]
 8008d10:	2001      	movs	r0, #1
 8008d12:	9000      	str	r0, [sp, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fc48 	bl	800a5aa <USBH_BulkSendData>
 8008d1a:	e00b      	b.n	8008d34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	7b5b      	ldrb	r3, [r3, #13]
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	9000      	str	r0, [sp, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fc3b 	bl	800a5aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d3c:	e03b      	b.n	8008db6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	7b5b      	ldrb	r3, [r3, #13]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 ff65 	bl	800ac14 <USBH_LL_GetURBState>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d128      	bne.n	8008da6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	8b12      	ldrh	r2, [r2, #24]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d90e      	bls.n	8008d7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	8b12      	ldrh	r2, [r2, #24]
 8008d68:	1a9a      	subs	r2, r3, r2
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	8b12      	ldrh	r2, [r2, #24]
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	61da      	str	r2, [r3, #28]
 8008d7c:	e002      	b.n	8008d84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d94:	e00e      	b.n	8008db4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f868 	bl	8008e74 <USBH_CDC_TransmitCallback>
      break;
 8008da4:	e006      	b.n	8008db4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d103      	bne.n	8008db4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008db4:	bf00      	nop
  }
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d002      	beq.n	8008de4 <CDC_ProcessReception+0x26>
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d00e      	beq.n	8008e00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008de2:	e043      	b.n	8008e6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	6a19      	ldr	r1, [r3, #32]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	8b5a      	ldrh	r2, [r3, #26]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	7b1b      	ldrb	r3, [r3, #12]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 fbff 	bl	800a5f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008dfe:	e035      	b.n	8008e6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	7b1b      	ldrb	r3, [r3, #12]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 ff04 	bl	800ac14 <USBH_LL_GetURBState>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e10:	7cfb      	ldrb	r3, [r7, #19]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d129      	bne.n	8008e6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	7b1b      	ldrb	r3, [r3, #12]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 fe67 	bl	800aaf0 <USBH_LL_GetLastXferSize>
 8008e22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d016      	beq.n	8008e5c <CDC_ProcessReception+0x9e>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	8b5b      	ldrh	r3, [r3, #26]
 8008e32:	461a      	mov	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d910      	bls.n	8008e5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	2203      	movs	r2, #3
 8008e56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e5a:	e006      	b.n	8008e6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f80f 	bl	8008e88 <USBH_CDC_ReceiveCallback>
      break;
 8008e6a:	bf00      	nop
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e029      	b.n	8008f1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	79fa      	ldrb	r2, [r7, #7]
 8008ecc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f81f 	bl	8008f24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f001 fd2d 	bl	800a974 <USBH_LL_Init>

  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e009      	b.n	8008f4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	33e0      	adds	r3, #224	; 0xe0
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	2200      	movs	r2, #0
 8008f42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b0f      	cmp	r3, #15
 8008f4e:	d9f2      	bls.n	8008f36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e009      	b.n	8008f6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3301      	adds	r3, #1
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f70:	d3f1      	bcc.n	8008f56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2240      	movs	r2, #64	; 0x40
 8008f96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d016      	beq.n	800900e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10e      	bne.n	8009008 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ff0:	1c59      	adds	r1, r3, #1
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	33de      	adds	r3, #222	; 0xde
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
 8009006:	e004      	b.n	8009012 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009008:	2302      	movs	r3, #2
 800900a:	73fb      	strb	r3, [r7, #15]
 800900c:	e001      	b.n	8009012 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800900e:	2302      	movs	r3, #2
 8009010:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	429a      	cmp	r2, r3
 800903a:	d204      	bcs.n	8009046 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	78fa      	ldrb	r2, [r7, #3]
 8009040:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009044:	e001      	b.n	800904a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009046:	2302      	movs	r3, #2
 8009048:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	461a      	mov	r2, r3
 8009066:	4603      	mov	r3, r0
 8009068:	70fb      	strb	r3, [r7, #3]
 800906a:	460b      	mov	r3, r1
 800906c:	70bb      	strb	r3, [r7, #2]
 800906e:	4613      	mov	r3, r2
 8009070:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009080:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009082:	e025      	b.n	80090d0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	221a      	movs	r2, #26
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	3308      	adds	r3, #8
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	3302      	adds	r3, #2
 8009094:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	795b      	ldrb	r3, [r3, #5]
 800909a:	78fa      	ldrb	r2, [r7, #3]
 800909c:	429a      	cmp	r2, r3
 800909e:	d002      	beq.n	80090a6 <USBH_FindInterface+0x4e>
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2bff      	cmp	r3, #255	; 0xff
 80090a4:	d111      	bne.n	80090ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090aa:	78ba      	ldrb	r2, [r7, #2]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d002      	beq.n	80090b6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090b0:	78bb      	ldrb	r3, [r7, #2]
 80090b2:	2bff      	cmp	r3, #255	; 0xff
 80090b4:	d109      	bne.n	80090ca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090ba:	787a      	ldrb	r2, [r7, #1]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d002      	beq.n	80090c6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090c0:	787b      	ldrb	r3, [r7, #1]
 80090c2:	2bff      	cmp	r3, #255	; 0xff
 80090c4:	d101      	bne.n	80090ca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	e006      	b.n	80090d8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	3301      	adds	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d9d6      	bls.n	8009084 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80090d6:	23ff      	movs	r3, #255	; 0xff
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fc87 	bl	800aa00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80090f2:	2101      	movs	r1, #1
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 fda0 	bl	800ac3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af04      	add	r7, sp, #16
 800910a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800910c:	2302      	movs	r3, #2
 800910e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	d102      	bne.n	8009126 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2203      	movs	r2, #3
 8009124:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	b2db      	uxtb	r3, r3
 800912c:	2b0b      	cmp	r3, #11
 800912e:	f200 81be 	bhi.w	80094ae <USBH_Process+0x3aa>
 8009132:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <USBH_Process+0x34>)
 8009134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009138:	08009169 	.word	0x08009169
 800913c:	0800919b 	.word	0x0800919b
 8009140:	08009203 	.word	0x08009203
 8009144:	08009449 	.word	0x08009449
 8009148:	080094af 	.word	0x080094af
 800914c:	080092a7 	.word	0x080092a7
 8009150:	080093ef 	.word	0x080093ef
 8009154:	080092dd 	.word	0x080092dd
 8009158:	080092fd 	.word	0x080092fd
 800915c:	0800931d 	.word	0x0800931d
 8009160:	08009361 	.word	0x08009361
 8009164:	08009431 	.word	0x08009431
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 819e 	beq.w	80094b2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800917c:	20c8      	movs	r0, #200	; 0xc8
 800917e:	f001 fda3 	bl	800acc8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fc99 	bl	800aaba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009198:	e18b      	b.n	80094b2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d107      	bne.n	80091b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091b2:	e18d      	b.n	80094d0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091be:	d914      	bls.n	80091ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80091c6:	3301      	adds	r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d903      	bls.n	80091e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	220d      	movs	r2, #13
 80091de:	701a      	strb	r2, [r3, #0]
      break;
 80091e0:	e176      	b.n	80094d0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
      break;
 80091e8:	e172      	b.n	80094d0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091f0:	f103 020a 	add.w	r2, r3, #10
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80091fa:	200a      	movs	r0, #10
 80091fc:	f001 fd64 	bl	800acc8 <USBH_Delay>
      break;
 8009200:	e166      	b.n	80094d0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009212:	2104      	movs	r1, #4
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009218:	2064      	movs	r0, #100	; 0x64
 800921a:	f001 fd55 	bl	800acc8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fc24 	bl	800aa6c <USBH_LL_GetSpeed>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2205      	movs	r2, #5
 8009232:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009234:	2100      	movs	r1, #0
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fa29 	bl	800a68e <USBH_AllocPipe>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009244:	2180      	movs	r1, #128	; 0x80
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 fa21 	bl	800a68e <USBH_AllocPipe>
 800924c:	4603      	mov	r3, r0
 800924e:	461a      	mov	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	7919      	ldrb	r1, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009268:	b292      	uxth	r2, r2
 800926a:	9202      	str	r2, [sp, #8]
 800926c:	2200      	movs	r2, #0
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	4603      	mov	r3, r0
 8009274:	2280      	movs	r2, #128	; 0x80
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f9da 	bl	800a630 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	7959      	ldrb	r1, [r3, #5]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009290:	b292      	uxth	r2, r2
 8009292:	9202      	str	r2, [sp, #8]
 8009294:	2200      	movs	r2, #0
 8009296:	9201      	str	r2, [sp, #4]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	4603      	mov	r3, r0
 800929c:	2200      	movs	r2, #0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 f9c6 	bl	800a630 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092a4:	e114      	b.n	80094d0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f918 	bl	80094dc <USBH_HandleEnum>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 80fe 	bne.w	80094b6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d103      	bne.n	80092d4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2208      	movs	r2, #8
 80092d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092d2:	e0f0      	b.n	80094b6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2207      	movs	r2, #7
 80092d8:	701a      	strb	r2, [r3, #0]
      break;
 80092da:	e0ec      	b.n	80094b6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80e9 	beq.w	80094ba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ee:	2101      	movs	r1, #1
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2208      	movs	r2, #8
 80092f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80092fa:	e0de      	b.n	80094ba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009302:	b29b      	uxth	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fc2c 	bl	8009b64 <USBH_SetCfg>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 80d5 	bne.w	80094be <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2209      	movs	r2, #9
 8009318:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800931a:	e0d0      	b.n	80094be <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d016      	beq.n	8009358 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800932a:	2101      	movs	r1, #1
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc3c 	bl	8009baa <USBH_SetFeature>
 8009332:	4603      	mov	r3, r0
 8009334:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	220a      	movs	r2, #10
 8009342:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009344:	e0bd      	b.n	80094c2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b03      	cmp	r3, #3
 800934c:	f040 80b9 	bne.w	80094c2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	220a      	movs	r2, #10
 8009354:	701a      	strb	r2, [r3, #0]
      break;
 8009356:	e0b4      	b.n	80094c2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	220a      	movs	r2, #10
 800935c:	701a      	strb	r2, [r3, #0]
      break;
 800935e:	e0b0      	b.n	80094c2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80ad 	beq.w	80094c6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
 8009378:	e016      	b.n	80093a8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	32de      	adds	r2, #222	; 0xde
 8009380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009384:	791a      	ldrb	r2, [r3, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800938c:	429a      	cmp	r2, r3
 800938e:	d108      	bne.n	80093a2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32de      	adds	r2, #222	; 0xde
 8009396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80093a0:	e005      	b.n	80093ae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	3301      	adds	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0e5      	beq.n	800937a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d016      	beq.n	80093e6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	4798      	blx	r3
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d109      	bne.n	80093de <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2206      	movs	r2, #6
 80093ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093d6:	2103      	movs	r1, #3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093dc:	e073      	b.n	80094c6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	220d      	movs	r2, #13
 80093e2:	701a      	strb	r2, [r3, #0]
      break;
 80093e4:	e06f      	b.n	80094c6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	220d      	movs	r2, #13
 80093ea:	701a      	strb	r2, [r3, #0]
      break;
 80093ec:	e06b      	b.n	80094c6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d017      	beq.n	8009428 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
 8009404:	4603      	mov	r3, r0
 8009406:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	220b      	movs	r2, #11
 8009414:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009416:	e058      	b.n	80094ca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d154      	bne.n	80094ca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	220d      	movs	r2, #13
 8009424:	701a      	strb	r2, [r3, #0]
      break;
 8009426:	e050      	b.n	80094ca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	220d      	movs	r2, #13
 800942c:	701a      	strb	r2, [r3, #0]
      break;
 800942e:	e04c      	b.n	80094ca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d049      	beq.n	80094ce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	4798      	blx	r3
      }
      break;
 8009446:	e042      	b.n	80094ce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff fd67 	bl	8008f24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d009      	beq.n	8009474 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800947a:	2b00      	cmp	r3, #0
 800947c:	d005      	beq.n	800948a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009484:	2105      	movs	r1, #5
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b01      	cmp	r3, #1
 8009494:	d107      	bne.n	80094a6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fe20 	bl	80090e4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094a4:	e014      	b.n	80094d0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 faaa 	bl	800aa00 <USBH_LL_Start>
      break;
 80094ac:	e010      	b.n	80094d0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80094ae:	bf00      	nop
 80094b0:	e00e      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094b2:	bf00      	nop
 80094b4:	e00c      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094b6:	bf00      	nop
 80094b8:	e00a      	b.n	80094d0 <USBH_Process+0x3cc>
    break;
 80094ba:	bf00      	nop
 80094bc:	e008      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094be:	bf00      	nop
 80094c0:	e006      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094c2:	bf00      	nop
 80094c4:	e004      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <USBH_Process+0x3cc>
      break;
 80094ce:	bf00      	nop
  }
  return USBH_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af04      	add	r7, sp, #16
 80094e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80094e4:	2301      	movs	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	f200 81c1 	bhi.w	8009878 <USBH_HandleEnum+0x39c>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <USBH_HandleEnum+0x20>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	080095db 	.word	0x080095db
 8009504:	08009645 	.word	0x08009645
 8009508:	080096d3 	.word	0x080096d3
 800950c:	0800973d 	.word	0x0800973d
 8009510:	080097ad 	.word	0x080097ad
 8009514:	080097f3 	.word	0x080097f3
 8009518:	08009839 	.word	0x08009839
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800951c:	2108      	movs	r1, #8
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa50 	bl	80099c4 <USBH_Get_DevDesc>
 8009524:	4603      	mov	r3, r0
 8009526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d130      	bne.n	8009590 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7919      	ldrb	r1, [r3, #4]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009552:	b292      	uxth	r2, r2
 8009554:	9202      	str	r2, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	9201      	str	r2, [sp, #4]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	4603      	mov	r3, r0
 800955e:	2280      	movs	r2, #128	; 0x80
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f865 	bl	800a630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7959      	ldrb	r1, [r3, #5]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800957a:	b292      	uxth	r2, r2
 800957c:	9202      	str	r2, [sp, #8]
 800957e:	2200      	movs	r2, #0
 8009580:	9201      	str	r2, [sp, #4]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4603      	mov	r3, r0
 8009586:	2200      	movs	r2, #0
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 f851 	bl	800a630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800958e:	e175      	b.n	800987c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b03      	cmp	r3, #3
 8009594:	f040 8172 	bne.w	800987c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800959e:	3301      	adds	r3, #1
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d903      	bls.n	80095ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	220d      	movs	r2, #13
 80095b6:	701a      	strb	r2, [r3, #0]
      break;
 80095b8:	e160      	b.n	800987c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	795b      	ldrb	r3, [r3, #5]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f885 	bl	800a6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f87f 	bl	800a6d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
      break;
 80095d8:	e150      	b.n	800987c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80095da:	2112      	movs	r1, #18
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f9f1 	bl	80099c4 <USBH_Get_DevDesc>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d103      	bne.n	80095f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095f2:	e145      	b.n	8009880 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	f040 8142 	bne.w	8009880 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009602:	3301      	adds	r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009612:	2b03      	cmp	r3, #3
 8009614:	d903      	bls.n	800961e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	220d      	movs	r2, #13
 800961a:	701a      	strb	r2, [r3, #0]
      break;
 800961c:	e130      	b.n	8009880 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	795b      	ldrb	r3, [r3, #5]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 f853 	bl	800a6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 f84d 	bl	800a6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
      break;
 8009642:	e11d      	b.n	8009880 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009644:	2101      	movs	r1, #1
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa68 	bl	8009b1c <USBH_SetAddress>
 800964c:	4603      	mov	r3, r0
 800964e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d132      	bne.n	80096bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009656:	2002      	movs	r0, #2
 8009658:	f001 fb36 	bl	800acc8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2203      	movs	r2, #3
 8009668:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7919      	ldrb	r1, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800967e:	b292      	uxth	r2, r2
 8009680:	9202      	str	r2, [sp, #8]
 8009682:	2200      	movs	r2, #0
 8009684:	9201      	str	r2, [sp, #4]
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	2280      	movs	r2, #128	; 0x80
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 ffcf 	bl	800a630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7959      	ldrb	r1, [r3, #5]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096a6:	b292      	uxth	r2, r2
 80096a8:	9202      	str	r2, [sp, #8]
 80096aa:	2200      	movs	r2, #0
 80096ac:	9201      	str	r2, [sp, #4]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4603      	mov	r3, r0
 80096b2:	2200      	movs	r2, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 ffbb 	bl	800a630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80096ba:	e0e3      	b.n	8009884 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b03      	cmp	r3, #3
 80096c0:	f040 80e0 	bne.w	8009884 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	220d      	movs	r2, #13
 80096c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	705a      	strb	r2, [r3, #1]
      break;
 80096d0:	e0d8      	b.n	8009884 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80096d2:	2109      	movs	r1, #9
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f99d 	bl	8009a14 <USBH_Get_CfgDesc>
 80096da:	4603      	mov	r3, r0
 80096dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096ea:	e0cd      	b.n	8009888 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b03      	cmp	r3, #3
 80096f0:	f040 80ca 	bne.w	8009888 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096fa:	3301      	adds	r3, #1
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800970a:	2b03      	cmp	r3, #3
 800970c:	d903      	bls.n	8009716 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	220d      	movs	r2, #13
 8009712:	701a      	strb	r2, [r3, #0]
      break;
 8009714:	e0b8      	b.n	8009888 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	795b      	ldrb	r3, [r3, #5]
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 ffd7 	bl	800a6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	791b      	ldrb	r3, [r3, #4]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 ffd1 	bl	800a6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
      break;
 800973a:	e0a5      	b.n	8009888 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f965 	bl	8009a14 <USBH_Get_CfgDesc>
 800974a:	4603      	mov	r3, r0
 800974c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2205      	movs	r2, #5
 8009758:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800975a:	e097      	b.n	800988c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	2b03      	cmp	r3, #3
 8009760:	f040 8094 	bne.w	800988c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800976a:	3301      	adds	r3, #1
 800976c:	b2da      	uxtb	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800977a:	2b03      	cmp	r3, #3
 800977c:	d903      	bls.n	8009786 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	220d      	movs	r2, #13
 8009782:	701a      	strb	r2, [r3, #0]
      break;
 8009784:	e082      	b.n	800988c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	795b      	ldrb	r3, [r3, #5]
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 ff9f 	bl	800a6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	791b      	ldrb	r3, [r3, #4]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 ff99 	bl	800a6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
      break;
 80097aa:	e06f      	b.n	800988c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d019      	beq.n	80097ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097c2:	23ff      	movs	r3, #255	; 0xff
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f949 	bl	8009a5c <USBH_Get_StringDesc>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2206      	movs	r2, #6
 80097d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097da:	e059      	b.n	8009890 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d156      	bne.n	8009890 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2206      	movs	r2, #6
 80097e6:	705a      	strb	r2, [r3, #1]
      break;
 80097e8:	e052      	b.n	8009890 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2206      	movs	r2, #6
 80097ee:	705a      	strb	r2, [r3, #1]
      break;
 80097f0:	e04e      	b.n	8009890 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d019      	beq.n	8009830 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009808:	23ff      	movs	r3, #255	; 0xff
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f926 	bl	8009a5c <USBH_Get_StringDesc>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2207      	movs	r2, #7
 800981e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009820:	e038      	b.n	8009894 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b03      	cmp	r3, #3
 8009826:	d135      	bne.n	8009894 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2207      	movs	r2, #7
 800982c:	705a      	strb	r2, [r3, #1]
      break;
 800982e:	e031      	b.n	8009894 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2207      	movs	r2, #7
 8009834:	705a      	strb	r2, [r3, #1]
      break;
 8009836:	e02d      	b.n	8009894 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800983e:	2b00      	cmp	r3, #0
 8009840:	d017      	beq.n	8009872 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800984e:	23ff      	movs	r3, #255	; 0xff
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f903 	bl	8009a5c <USBH_Get_StringDesc>
 8009856:	4603      	mov	r3, r0
 8009858:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009860:	2300      	movs	r3, #0
 8009862:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009864:	e018      	b.n	8009898 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b03      	cmp	r3, #3
 800986a:	d115      	bne.n	8009898 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
      break;
 8009870:	e012      	b.n	8009898 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
      break;
 8009876:	e00f      	b.n	8009898 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009878:	bf00      	nop
 800987a:	e00e      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 800987c:	bf00      	nop
 800987e:	e00c      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009880:	bf00      	nop
 8009882:	e00a      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009884:	bf00      	nop
 8009886:	e008      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009888:	bf00      	nop
 800988a:	e006      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <USBH_HandleEnum+0x3be>
      break;
 8009898:	bf00      	nop
  }
  return Status;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f804 	bl	80098e6 <USBH_HandleSof>
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b0b      	cmp	r3, #11
 80098f6:	d10a      	bne.n	800990e <USBH_HandleSof+0x28>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d005      	beq.n	800990e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
  }
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009926:	bf00      	nop
}
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009942:	bf00      	nop
}
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f84a 	bl	800aa36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fe91 	bl	800a6d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	795b      	ldrb	r3, [r3, #5]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fe8b 	bl	800a6d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4613      	mov	r3, r2
 80099de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099e2:	2100      	movs	r1, #0
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f864 	bl	8009ab2 <USBH_GetDescriptor>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a00:	78fa      	ldrb	r2, [r7, #3]
 8009a02:	b292      	uxth	r2, r2
 8009a04:	4619      	mov	r1, r3
 8009a06:	f000 f918 	bl	8009c3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	331c      	adds	r3, #28
 8009a24:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a30:	2100      	movs	r1, #0
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f83d 	bl	8009ab2 <USBH_GetDescriptor>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d107      	bne.n	8009a52 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009a42:	887b      	ldrh	r3, [r7, #2]
 8009a44:	461a      	mov	r2, r3
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f987 	bl	8009d5c <USBH_ParseCfgDesc>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	461a      	mov	r2, r3
 8009a68:	460b      	mov	r3, r1
 8009a6a:	72fb      	strb	r3, [r7, #11]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a78:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009a80:	893b      	ldrh	r3, [r7, #8]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	460b      	mov	r3, r1
 8009a86:	2100      	movs	r1, #0
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 f812 	bl	8009ab2 <USBH_GetDescriptor>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d107      	bne.n	8009aa8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a9e:	893a      	ldrh	r2, [r7, #8]
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fb24 	bl	800a0f0 <USBH_ParseStringDesc>
  }

  return status;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	72fb      	strb	r3, [r7, #11]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	789b      	ldrb	r3, [r3, #2]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d11c      	bne.n	8009b06 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2206      	movs	r2, #6
 8009adc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	893a      	ldrh	r2, [r7, #8]
 8009ae2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ae4:	893b      	ldrh	r3, [r7, #8]
 8009ae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aee:	d104      	bne.n	8009afa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f240 4209 	movw	r2, #1033	; 0x409
 8009af6:	829a      	strh	r2, [r3, #20]
 8009af8:	e002      	b.n	8009b00 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8b3a      	ldrh	r2, [r7, #24]
 8009b04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b06:	8b3b      	ldrh	r3, [r7, #24]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fb3d 	bl	800a18c <USBH_CtlReq>
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	789b      	ldrb	r3, [r3, #2]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d10f      	bne.n	8009b50 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2205      	movs	r2, #5
 8009b3a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b50:	2200      	movs	r2, #0
 8009b52:	2100      	movs	r1, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fb19 	bl	800a18c <USBH_CtlReq>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	789b      	ldrb	r3, [r3, #2]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d10e      	bne.n	8009b96 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2209      	movs	r2, #9
 8009b82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	887a      	ldrh	r2, [r7, #2]
 8009b88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 faf6 	bl	800a18c <USBH_CtlReq>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	789b      	ldrb	r3, [r3, #2]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d10f      	bne.n	8009bde <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2203      	movs	r2, #3
 8009bc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fad2 	bl	800a18c <USBH_CtlReq>
 8009be8:	4603      	mov	r3, r0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	789b      	ldrb	r3, [r3, #2]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10f      	bne.n	8009c26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 faae 	bl	800a18c <USBH_CtlReq>
 8009c30:	4603      	mov	r3, r0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	4613      	mov	r3, r2
 8009c46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	785a      	ldrb	r2, [r3, #1]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3303      	adds	r3, #3
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	791a      	ldrb	r2, [r3, #4]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	795a      	ldrb	r2, [r3, #5]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	799a      	ldrb	r2, [r3, #6]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	79da      	ldrb	r2, [r3, #7]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	79db      	ldrb	r3, [r3, #7]
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	dc11      	bgt.n	8009cc0 <USBH_ParseDevDesc+0x86>
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	db16      	blt.n	8009cce <USBH_ParseDevDesc+0x94>
 8009ca0:	3b08      	subs	r3, #8
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bf14      	ite	ne
 8009cb4:	2301      	movne	r3, #1
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <USBH_ParseDevDesc+0x8a>
 8009cbe:	e006      	b.n	8009cce <USBH_ParseDevDesc+0x94>
 8009cc0:	2b40      	cmp	r3, #64	; 0x40
 8009cc2:	d104      	bne.n	8009cce <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	79da      	ldrb	r2, [r3, #7]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	71da      	strb	r2, [r3, #7]
      break;
 8009ccc:	e003      	b.n	8009cd6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2240      	movs	r2, #64	; 0x40
 8009cd2:	71da      	strb	r2, [r3, #7]
      break;
 8009cd4:	bf00      	nop
  }

  if (length > 8U)
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d939      	bls.n	8009d50 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3309      	adds	r3, #9
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	330a      	adds	r3, #10
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	330b      	adds	r3, #11
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	330c      	adds	r3, #12
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	330d      	adds	r3, #13
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	7b9a      	ldrb	r2, [r3, #14]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	7bda      	ldrb	r2, [r3, #15]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7c1a      	ldrb	r2, [r3, #16]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	7c5a      	ldrb	r2, [r3, #17]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	745a      	strb	r2, [r3, #17]
  }
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08c      	sub	sp, #48	; 0x30
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	785a      	ldrb	r2, [r3, #1]
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	3303      	adds	r3, #3
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db8:	bf28      	it	cs
 8009dba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	791a      	ldrb	r2, [r3, #4]
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	795a      	ldrb	r2, [r3, #5]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	799a      	ldrb	r2, [r3, #6]
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	79da      	ldrb	r2, [r3, #7]
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	7a1a      	ldrb	r2, [r3, #8]
 8009de8:	6a3b      	ldr	r3, [r7, #32]
 8009dea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b09      	cmp	r3, #9
 8009df2:	d002      	beq.n	8009dfa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	2209      	movs	r2, #9
 8009df8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009dfa:	88fb      	ldrh	r3, [r7, #6]
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	f240 809d 	bls.w	8009f3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e02:	2309      	movs	r3, #9
 8009e04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e0a:	e081      	b.n	8009f10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e0c:	f107 0316 	add.w	r3, r7, #22
 8009e10:	4619      	mov	r1, r3
 8009e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e14:	f000 f99f 	bl	800a156 <USBH_GetNextDesc>
 8009e18:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d176      	bne.n	8009f10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b09      	cmp	r3, #9
 8009e28:	d002      	beq.n	8009e30 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	2209      	movs	r2, #9
 8009e2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e34:	221a      	movs	r2, #26
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	4413      	add	r3, r2
 8009e40:	3302      	adds	r3, #2
 8009e42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e46:	69f8      	ldr	r0, [r7, #28]
 8009e48:	f000 f87e 	bl	8009f48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e56:	e043      	b.n	8009ee0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e58:	f107 0316 	add.w	r3, r7, #22
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e60:	f000 f979 	bl	800a156 <USBH_GetNextDesc>
 8009e64:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d138      	bne.n	8009ee0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	795b      	ldrb	r3, [r3, #5]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d10f      	bne.n	8009e96 <USBH_ParseCfgDesc+0x13a>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	799b      	ldrb	r3, [r3, #6]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d10b      	bne.n	8009e96 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	79db      	ldrb	r3, [r3, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10f      	bne.n	8009ea6 <USBH_ParseCfgDesc+0x14a>
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d00b      	beq.n	8009ea6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	2209      	movs	r2, #9
 8009e92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e94:	e007      	b.n	8009ea6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b07      	cmp	r3, #7
 8009e9c:	d004      	beq.n	8009ea8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	2207      	movs	r2, #7
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	e000      	b.n	8009ea8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ea6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	00d2      	lsls	r2, r2, #3
 8009eb4:	211a      	movs	r1, #26
 8009eb6:	fb01 f303 	mul.w	r3, r1, r3
 8009eba:	4413      	add	r3, r2
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	6a3a      	ldr	r2, [r7, #32]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec8:	69b9      	ldr	r1, [r7, #24]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f86b 	bl	8009fa6 <USBH_ParseEPDesc>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eda:	3301      	adds	r3, #1
 8009edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	791b      	ldrb	r3, [r3, #4]
 8009ee4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d204      	bcs.n	8009ef6 <USBH_ParseCfgDesc+0x19a>
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	885a      	ldrh	r2, [r3, #2]
 8009ef0:	8afb      	ldrh	r3, [r7, #22]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d8b0      	bhi.n	8009e58 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	791b      	ldrb	r3, [r3, #4]
 8009efa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d201      	bcs.n	8009f06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e01c      	b.n	8009f40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d805      	bhi.n	8009f24 <USBH_ParseCfgDesc+0x1c8>
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	885a      	ldrh	r2, [r3, #2]
 8009f1c:	8afb      	ldrh	r3, [r7, #22]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	f63f af74 	bhi.w	8009e0c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	791b      	ldrb	r3, [r3, #4]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	bf28      	it	cs
 8009f2c:	2302      	movcs	r3, #2
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d201      	bcs.n	8009f3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e001      	b.n	8009f40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3730      	adds	r7, #48	; 0x30
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	785a      	ldrb	r2, [r3, #1]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	789a      	ldrb	r2, [r3, #2]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	78da      	ldrb	r2, [r3, #3]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	791a      	ldrb	r2, [r3, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	795a      	ldrb	r2, [r3, #5]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	799a      	ldrb	r2, [r3, #6]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	79da      	ldrb	r2, [r3, #7]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	7a1a      	ldrb	r2, [r3, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	721a      	strb	r2, [r3, #8]
}
 8009f9a:	bf00      	nop
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	785a      	ldrb	r2, [r3, #1]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	789a      	ldrb	r2, [r3, #2]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	78da      	ldrb	r2, [r3, #3]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3305      	adds	r3, #5
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	4313      	orrs	r3, r2
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	799a      	ldrb	r2, [r3, #6]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	889b      	ldrh	r3, [r3, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a002:	2303      	movs	r3, #3
 800a004:	75fb      	strb	r3, [r7, #23]
 800a006:	e033      	b.n	800a070 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	889b      	ldrh	r3, [r3, #4]
 800a00c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a010:	f023 0307 	bic.w	r3, r3, #7
 800a014:	b29a      	uxth	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	889b      	ldrh	r3, [r3, #4]
 800a01e:	b21a      	sxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3304      	adds	r3, #4
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	b299      	uxth	r1, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3305      	adds	r3, #5
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	b29b      	uxth	r3, r3
 800a034:	430b      	orrs	r3, r1
 800a036:	b29b      	uxth	r3, r3
 800a038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d110      	bne.n	800a062 <USBH_ParseEPDesc+0xbc>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b299      	uxth	r1, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3305      	adds	r3, #5
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	b29b      	uxth	r3, r3
 800a054:	430b      	orrs	r3, r1
 800a056:	b29b      	uxth	r3, r3
 800a058:	b21b      	sxth	r3, r3
 800a05a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a05e:	b21b      	sxth	r3, r3
 800a060:	e001      	b.n	800a066 <USBH_ParseEPDesc+0xc0>
 800a062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a066:	4313      	orrs	r3, r2
 800a068:	b21b      	sxth	r3, r3
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a076:	2b00      	cmp	r3, #0
 800a078:	d116      	bne.n	800a0a8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	78db      	ldrb	r3, [r3, #3]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b01      	cmp	r3, #1
 800a084:	d005      	beq.n	800a092 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	78db      	ldrb	r3, [r3, #3]
 800a08a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d127      	bne.n	800a0e2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	799b      	ldrb	r3, [r3, #6]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <USBH_ParseEPDesc+0xfc>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	799b      	ldrb	r3, [r3, #6]
 800a09e:	2b10      	cmp	r3, #16
 800a0a0:	d91f      	bls.n	800a0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	75fb      	strb	r3, [r7, #23]
 800a0a6:	e01c      	b.n	800a0e2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	78db      	ldrb	r3, [r3, #3]
 800a0ac:	f003 0303 	and.w	r3, r3, #3
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d10a      	bne.n	800a0ca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	799b      	ldrb	r3, [r3, #6]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <USBH_ParseEPDesc+0x11e>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	799b      	ldrb	r3, [r3, #6]
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	d90e      	bls.n	800a0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	75fb      	strb	r3, [r7, #23]
 800a0c8:	e00b      	b.n	800a0e2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	78db      	ldrb	r3, [r3, #3]
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d105      	bne.n	800a0e2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	799b      	ldrb	r3, [r3, #6]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b03      	cmp	r3, #3
 800a106:	d120      	bne.n	800a14a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	1e9a      	subs	r2, r3, #2
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	4293      	cmp	r3, r2
 800a112:	bf28      	it	cs
 800a114:	4613      	movcs	r3, r2
 800a116:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3302      	adds	r3, #2
 800a11c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a11e:	2300      	movs	r3, #0
 800a120:	82fb      	strh	r3, [r7, #22]
 800a122:	e00b      	b.n	800a13c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a124:	8afb      	ldrh	r3, [r7, #22]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	781a      	ldrb	r2, [r3, #0]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3301      	adds	r3, #1
 800a134:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a136:	8afb      	ldrh	r3, [r7, #22]
 800a138:	3302      	adds	r3, #2
 800a13a:	82fb      	strh	r3, [r7, #22]
 800a13c:	8afa      	ldrh	r2, [r7, #22]
 800a13e:	8abb      	ldrh	r3, [r7, #20]
 800a140:	429a      	cmp	r2, r3
 800a142:	d3ef      	bcc.n	800a124 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
  }
}
 800a14a:	bf00      	nop
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	4413      	add	r3, r2
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a17e:	68fb      	ldr	r3, [r7, #12]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a19a:	2301      	movs	r3, #1
 800a19c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	789b      	ldrb	r3, [r3, #2]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d002      	beq.n	800a1ac <USBH_CtlReq+0x20>
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d00f      	beq.n	800a1ca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a1aa:	e027      	b.n	800a1fc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	88fa      	ldrh	r2, [r7, #6]
 800a1b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a1c8:	e018      	b.n	800a1fc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 f81c 	bl	800a208 <USBH_HandleControl>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a1d4:	7dfb      	ldrb	r3, [r7, #23]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <USBH_CtlReq+0x54>
 800a1da:	7dfb      	ldrb	r3, [r7, #23]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d106      	bne.n	800a1ee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	761a      	strb	r2, [r3, #24]
      break;
 800a1ec:	e005      	b.n	800a1fa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d102      	bne.n	800a1fa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	709a      	strb	r2, [r3, #2]
      break;
 800a1fa:	bf00      	nop
  }
  return status;
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af02      	add	r7, sp, #8
 800a20e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a214:	2300      	movs	r3, #0
 800a216:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	7e1b      	ldrb	r3, [r3, #24]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	2b0a      	cmp	r3, #10
 800a220:	f200 8156 	bhi.w	800a4d0 <USBH_HandleControl+0x2c8>
 800a224:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <USBH_HandleControl+0x24>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	0800a273 	.word	0x0800a273
 800a234:	0800a2dd 	.word	0x0800a2dd
 800a238:	0800a303 	.word	0x0800a303
 800a23c:	0800a33b 	.word	0x0800a33b
 800a240:	0800a365 	.word	0x0800a365
 800a244:	0800a3b7 	.word	0x0800a3b7
 800a248:	0800a3d9 	.word	0x0800a3d9
 800a24c:	0800a415 	.word	0x0800a415
 800a250:	0800a43b 	.word	0x0800a43b
 800a254:	0800a479 	.word	0x0800a479
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f103 0110 	add.w	r1, r3, #16
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	795b      	ldrb	r3, [r3, #5]
 800a262:	461a      	mov	r2, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f943 	bl	800a4f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	761a      	strb	r2, [r3, #24]
      break;
 800a270:	e139      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	795b      	ldrb	r3, [r3, #5]
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fccb 	bl	800ac14 <USBH_LL_GetURBState>
 800a27e:	4603      	mov	r3, r0
 800a280:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d11e      	bne.n	800a2c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	7c1b      	ldrb	r3, [r3, #16]
 800a28c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a290:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8adb      	ldrh	r3, [r3, #22]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a29a:	7b7b      	ldrb	r3, [r7, #13]
 800a29c:	2b80      	cmp	r3, #128	; 0x80
 800a29e:	d103      	bne.n	800a2a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2203      	movs	r2, #3
 800a2a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2a6:	e115      	b.n	800a4d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2205      	movs	r2, #5
 800a2ac:	761a      	strb	r2, [r3, #24]
      break;
 800a2ae:	e111      	b.n	800a4d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a2b0:	7b7b      	ldrb	r3, [r7, #13]
 800a2b2:	2b80      	cmp	r3, #128	; 0x80
 800a2b4:	d103      	bne.n	800a2be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2209      	movs	r2, #9
 800a2ba:	761a      	strb	r2, [r3, #24]
      break;
 800a2bc:	e10a      	b.n	800a4d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	761a      	strb	r2, [r3, #24]
      break;
 800a2c4:	e106      	b.n	800a4d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d003      	beq.n	800a2d4 <USBH_HandleControl+0xcc>
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	f040 8100 	bne.w	800a4d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	220b      	movs	r2, #11
 800a2d8:	761a      	strb	r2, [r3, #24]
      break;
 800a2da:	e0fb      	b.n	800a4d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6899      	ldr	r1, [r3, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	899a      	ldrh	r2, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	791b      	ldrb	r3, [r3, #4]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f93a 	bl	800a56e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2204      	movs	r2, #4
 800a2fe:	761a      	strb	r2, [r3, #24]
      break;
 800a300:	e0f1      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fc83 	bl	800ac14 <USBH_LL_GetURBState>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d102      	bne.n	800a31e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2209      	movs	r2, #9
 800a31c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
 800a320:	2b05      	cmp	r3, #5
 800a322:	d102      	bne.n	800a32a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a324:	2303      	movs	r3, #3
 800a326:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a328:	e0d6      	b.n	800a4d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	f040 80d3 	bne.w	800a4d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	220b      	movs	r2, #11
 800a336:	761a      	strb	r2, [r3, #24]
      break;
 800a338:	e0ce      	b.n	800a4d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6899      	ldr	r1, [r3, #8]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	899a      	ldrh	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	795b      	ldrb	r3, [r3, #5]
 800a346:	2001      	movs	r0, #1
 800a348:	9000      	str	r0, [sp, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f8ea 	bl	800a524 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2206      	movs	r2, #6
 800a360:	761a      	strb	r2, [r3, #24]
      break;
 800a362:	e0c0      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	795b      	ldrb	r3, [r3, #5]
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fc52 	bl	800ac14 <USBH_LL_GetURBState>
 800a370:	4603      	mov	r3, r0
 800a372:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d103      	bne.n	800a382 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2207      	movs	r2, #7
 800a37e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a380:	e0ac      	b.n	800a4dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b05      	cmp	r3, #5
 800a386:	d105      	bne.n	800a394 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	220c      	movs	r2, #12
 800a38c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a38e:	2303      	movs	r3, #3
 800a390:	73fb      	strb	r3, [r7, #15]
      break;
 800a392:	e0a3      	b.n	800a4dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d103      	bne.n	800a3a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2205      	movs	r2, #5
 800a39e:	761a      	strb	r2, [r3, #24]
      break;
 800a3a0:	e09c      	b.n	800a4dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	f040 8099 	bne.w	800a4dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	220b      	movs	r2, #11
 800a3ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b4:	e092      	b.n	800a4dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	791b      	ldrb	r3, [r3, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2100      	movs	r1, #0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f8d5 	bl	800a56e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	761a      	strb	r2, [r3, #24]

      break;
 800a3d6:	e086      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	791b      	ldrb	r3, [r3, #4]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fc18 	bl	800ac14 <USBH_LL_GetURBState>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d105      	bne.n	800a3fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	220d      	movs	r2, #13
 800a3f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3f8:	e072      	b.n	800a4e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d103      	bne.n	800a408 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	220b      	movs	r2, #11
 800a404:	761a      	strb	r2, [r3, #24]
      break;
 800a406:	e06b      	b.n	800a4e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	d168      	bne.n	800a4e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a40e:	2303      	movs	r3, #3
 800a410:	73fb      	strb	r3, [r7, #15]
      break;
 800a412:	e065      	b.n	800a4e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	795b      	ldrb	r3, [r3, #5]
 800a418:	2201      	movs	r2, #1
 800a41a:	9200      	str	r2, [sp, #0]
 800a41c:	2200      	movs	r2, #0
 800a41e:	2100      	movs	r1, #0
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f87f 	bl	800a524 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	220a      	movs	r2, #10
 800a436:	761a      	strb	r2, [r3, #24]
      break;
 800a438:	e055      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	795b      	ldrb	r3, [r3, #5]
 800a43e:	4619      	mov	r1, r3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fbe7 	bl	800ac14 <USBH_LL_GetURBState>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d105      	bne.n	800a45c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	220d      	movs	r2, #13
 800a458:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a45a:	e043      	b.n	800a4e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d103      	bne.n	800a46a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2209      	movs	r2, #9
 800a466:	761a      	strb	r2, [r3, #24]
      break;
 800a468:	e03c      	b.n	800a4e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d139      	bne.n	800a4e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	220b      	movs	r2, #11
 800a474:	761a      	strb	r2, [r3, #24]
      break;
 800a476:	e035      	b.n	800a4e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	7e5b      	ldrb	r3, [r3, #25]
 800a47c:	3301      	adds	r3, #1
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	765a      	strb	r2, [r3, #25]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7e5b      	ldrb	r3, [r3, #25]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d806      	bhi.n	800a49a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a498:	e025      	b.n	800a4e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4a0:	2106      	movs	r1, #6
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	795b      	ldrb	r3, [r3, #5]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f90c 	bl	800a6d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f906 	bl	800a6d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	e00a      	b.n	800a4e6 <USBH_HandleControl+0x2de>

    default:
      break;
 800a4d0:	bf00      	nop
 800a4d2:	e008      	b.n	800a4e6 <USBH_HandleControl+0x2de>
      break;
 800a4d4:	bf00      	nop
 800a4d6:	e006      	b.n	800a4e6 <USBH_HandleControl+0x2de>
      break;
 800a4d8:	bf00      	nop
 800a4da:	e004      	b.n	800a4e6 <USBH_HandleControl+0x2de>
      break;
 800a4dc:	bf00      	nop
 800a4de:	e002      	b.n	800a4e6 <USBH_HandleControl+0x2de>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e000      	b.n	800a4e6 <USBH_HandleControl+0x2de>
      break;
 800a4e4:	bf00      	nop
  }

  return status;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af04      	add	r7, sp, #16
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4fe:	79f9      	ldrb	r1, [r7, #7]
 800a500:	2300      	movs	r3, #0
 800a502:	9303      	str	r3, [sp, #12]
 800a504:	2308      	movs	r3, #8
 800a506:	9302      	str	r3, [sp, #8]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	2300      	movs	r3, #0
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	2300      	movs	r3, #0
 800a512:	2200      	movs	r2, #0
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fb4c 	bl	800abb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af04      	add	r7, sp, #16
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4611      	mov	r1, r2
 800a530:	461a      	mov	r2, r3
 800a532:	460b      	mov	r3, r1
 800a534:	80fb      	strh	r3, [r7, #6]
 800a536:	4613      	mov	r3, r2
 800a538:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a548:	7979      	ldrb	r1, [r7, #5]
 800a54a:	7e3b      	ldrb	r3, [r7, #24]
 800a54c:	9303      	str	r3, [sp, #12]
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	9302      	str	r3, [sp, #8]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	2301      	movs	r3, #1
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	2300      	movs	r3, #0
 800a55c:	2200      	movs	r2, #0
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 fb27 	bl	800abb2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b088      	sub	sp, #32
 800a572:	af04      	add	r7, sp, #16
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	4611      	mov	r1, r2
 800a57a:	461a      	mov	r2, r3
 800a57c:	460b      	mov	r3, r1
 800a57e:	80fb      	strh	r3, [r7, #6]
 800a580:	4613      	mov	r3, r2
 800a582:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a584:	7979      	ldrb	r1, [r7, #5]
 800a586:	2300      	movs	r3, #0
 800a588:	9303      	str	r3, [sp, #12]
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	9302      	str	r3, [sp, #8]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	2301      	movs	r3, #1
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	2300      	movs	r3, #0
 800a598:	2201      	movs	r2, #1
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fb09 	bl	800abb2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5a0:	2300      	movs	r3, #0

}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b088      	sub	sp, #32
 800a5ae:	af04      	add	r7, sp, #16
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	80fb      	strh	r3, [r7, #6]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ce:	7979      	ldrb	r1, [r7, #5]
 800a5d0:	7e3b      	ldrb	r3, [r7, #24]
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	88fb      	ldrh	r3, [r7, #6]
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	2301      	movs	r3, #1
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 fae4 	bl	800abb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b088      	sub	sp, #32
 800a5f8:	af04      	add	r7, sp, #16
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4611      	mov	r1, r2
 800a600:	461a      	mov	r2, r3
 800a602:	460b      	mov	r3, r1
 800a604:	80fb      	strh	r3, [r7, #6]
 800a606:	4613      	mov	r3, r2
 800a608:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a60a:	7979      	ldrb	r1, [r7, #5]
 800a60c:	2300      	movs	r3, #0
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	88fb      	ldrh	r3, [r7, #6]
 800a612:	9302      	str	r3, [sp, #8]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	2301      	movs	r3, #1
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	2302      	movs	r3, #2
 800a61e:	2201      	movs	r2, #1
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 fac6 	bl	800abb2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af04      	add	r7, sp, #16
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	4608      	mov	r0, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	4603      	mov	r3, r0
 800a640:	70fb      	strb	r3, [r7, #3]
 800a642:	460b      	mov	r3, r1
 800a644:	70bb      	strb	r3, [r7, #2]
 800a646:	4613      	mov	r3, r2
 800a648:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a64a:	7878      	ldrb	r0, [r7, #1]
 800a64c:	78ba      	ldrb	r2, [r7, #2]
 800a64e:	78f9      	ldrb	r1, [r7, #3]
 800a650:	8b3b      	ldrh	r3, [r7, #24]
 800a652:	9302      	str	r3, [sp, #8]
 800a654:	7d3b      	ldrb	r3, [r7, #20]
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	7c3b      	ldrb	r3, [r7, #16]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4603      	mov	r3, r0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fa59 	bl	800ab16 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa78 	bl	800ab74 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f836 	bl	800a70c <USBH_GetFreePipe>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a6a4:	89fb      	ldrh	r3, [r7, #14]
 800a6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d00a      	beq.n	800a6c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	89fb      	ldrh	r3, [r7, #14]
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	33e0      	adds	r3, #224	; 0xe0
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	440b      	add	r3, r1
 800a6c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
 800a6c6:	b2db      	uxtb	r3, r3
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a6dc:	78fb      	ldrb	r3, [r7, #3]
 800a6de:	2b0f      	cmp	r3, #15
 800a6e0:	d80d      	bhi.n	800a6fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	33e0      	adds	r3, #224	; 0xe0
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	33e0      	adds	r3, #224	; 0xe0
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	e00f      	b.n	800a73e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	33e0      	adds	r3, #224	; 0xe0
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	b29b      	uxth	r3, r3
 800a736:	e007      	b.n	800a748 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	3301      	adds	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b0f      	cmp	r3, #15
 800a742:	d9ec      	bls.n	800a71e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a744:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800a758:	2200      	movs	r2, #0
 800a75a:	490e      	ldr	r1, [pc, #56]	; (800a794 <MX_USB_HOST_Init+0x40>)
 800a75c:	480e      	ldr	r0, [pc, #56]	; (800a798 <MX_USB_HOST_Init+0x44>)
 800a75e:	f7fe fba7 	bl	8008eb0 <USBH_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a768:	f7f6 fb96 	bl	8000e98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800a76c:	490b      	ldr	r1, [pc, #44]	; (800a79c <MX_USB_HOST_Init+0x48>)
 800a76e:	480a      	ldr	r0, [pc, #40]	; (800a798 <MX_USB_HOST_Init+0x44>)
 800a770:	f7fe fc2c 	bl	8008fcc <USBH_RegisterClass>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a77a:	f7f6 fb8d 	bl	8000e98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800a77e:	4806      	ldr	r0, [pc, #24]	; (800a798 <MX_USB_HOST_Init+0x44>)
 800a780:	f7fe fcb0 	bl	80090e4 <USBH_Start>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a78a:	f7f6 fb85 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a78e:	bf00      	nop
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	0800a7b5 	.word	0x0800a7b5
 800a798:	200007e0 	.word	0x200007e0
 800a79c:	20000010 	.word	0x20000010

0800a7a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800a7a4:	4802      	ldr	r0, [pc, #8]	; (800a7b0 <MX_USB_HOST_Process+0x10>)
 800a7a6:	f7fe fcad 	bl	8009104 <USBH_Process>
}
 800a7aa:	bf00      	nop
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200007e0 	.word	0x200007e0

0800a7b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d819      	bhi.n	800a7fc <USBH_UserProcess+0x48>
 800a7c8:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <USBH_UserProcess+0x1c>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a7fd 	.word	0x0800a7fd
 800a7d4:	0800a7ed 	.word	0x0800a7ed
 800a7d8:	0800a7fd 	.word	0x0800a7fd
 800a7dc:	0800a7f5 	.word	0x0800a7f5
 800a7e0:	0800a7e5 	.word	0x0800a7e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <USBH_UserProcess+0x58>)
 800a7e6:	2203      	movs	r2, #3
 800a7e8:	701a      	strb	r2, [r3, #0]
  break;
 800a7ea:	e008      	b.n	800a7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a7ec:	4b07      	ldr	r3, [pc, #28]	; (800a80c <USBH_UserProcess+0x58>)
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	701a      	strb	r2, [r3, #0]
  break;
 800a7f2:	e004      	b.n	800a7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a7f4:	4b05      	ldr	r3, [pc, #20]	; (800a80c <USBH_UserProcess+0x58>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	701a      	strb	r2, [r3, #0]
  break;
 800a7fa:	e000      	b.n	800a7fe <USBH_UserProcess+0x4a>

  default:
  break;
 800a7fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000bb8 	.word	0x20000bb8

0800a810 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a818:	f107 0314 	add.w	r3, r7, #20
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	605a      	str	r2, [r3, #4]
 800a822:	609a      	str	r2, [r3, #8]
 800a824:	60da      	str	r2, [r3, #12]
 800a826:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a24      	ldr	r2, [pc, #144]	; (800a8c0 <HAL_HCD_MspInit+0xb0>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d141      	bne.n	800a8b6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a832:	2300      	movs	r3, #0
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	4a22      	ldr	r2, [pc, #136]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a83c:	f043 0302 	orr.w	r3, r3, #2
 800a840:	6313      	str	r3, [r2, #48]	; 0x30
 800a842:	4b20      	ldr	r3, [pc, #128]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	613b      	str	r3, [r7, #16]
 800a84c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800a84e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800a852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a854:	2302      	movs	r3, #2
 800a856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a85c:	2300      	movs	r3, #0
 800a85e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a860:	230c      	movs	r3, #12
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	4619      	mov	r1, r3
 800a86a:	4817      	ldr	r0, [pc, #92]	; (800a8c8 <HAL_HCD_MspInit+0xb8>)
 800a86c:	f7f8 fbb4 	bl	8002fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800a870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a876:	2300      	movs	r3, #0
 800a878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800a87e:	f107 0314 	add.w	r3, r7, #20
 800a882:	4619      	mov	r1, r3
 800a884:	4810      	ldr	r0, [pc, #64]	; (800a8c8 <HAL_HCD_MspInit+0xb8>)
 800a886:	f7f8 fba7 	bl	8002fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a892:	4a0c      	ldr	r2, [pc, #48]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a898:	6313      	str	r3, [r2, #48]	; 0x30
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <HAL_HCD_MspInit+0xb4>)
 800a89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	204d      	movs	r0, #77	; 0x4d
 800a8ac:	f7f7 fe59 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a8b0:	204d      	movs	r0, #77	; 0x4d
 800a8b2:	f7f7 fe72 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3728      	adds	r7, #40	; 0x28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	40040000 	.word	0x40040000
 800a8c4:	40023800 	.word	0x40023800
 800a8c8:	40020400 	.word	0x40020400

0800a8cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fff1 	bl	80098c2 <USBH_LL_IncTimer>
}
 800a8e0:	bf00      	nop
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff f829 	bl	800994e <USBH_LL_Connect>
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f832 	bl	800997c <USBH_LL_Disconnect>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
 800a92c:	4613      	mov	r3, r2
 800a92e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe ffe3 	bl	8009916 <USBH_LL_PortEnabled>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe ffe3 	bl	8009932 <USBH_LL_PortDisabled>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a982:	2b00      	cmp	r3, #0
 800a984:	d132      	bne.n	800a9ec <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800a986:	4a1c      	ldr	r2, [pc, #112]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a19      	ldr	r2, [pc, #100]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a992:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a998:	4a18      	ldr	r2, [pc, #96]	; (800a9fc <USBH_LL_Init+0x88>)
 800a99a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800a99c:	4b16      	ldr	r3, [pc, #88]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a99e:	220c      	movs	r2, #12
 800a9a0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a9a8:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a9ae:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a9b4:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a9ba:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a9c0:	4b0d      	ldr	r3, [pc, #52]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800a9cc:	480a      	ldr	r0, [pc, #40]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9ce:	f7f8 fcc8 	bl	8003362 <HAL_HCD_Init>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800a9d8:	f7f6 fa5e 	bl	8000e98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800a9dc:	4806      	ldr	r0, [pc, #24]	; (800a9f8 <USBH_LL_Init+0x84>)
 800a9de:	f7f9 f8ac 	bl	8003b3a <HAL_HCD_GetCurrentFrame>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7fe ff5c 	bl	80098a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000bbc 	.word	0x20000bbc
 800a9fc:	40040000 	.word	0x40040000

0800aa00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f9 f819 	bl	8003a4e <HAL_HCD_Start>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 f95c 	bl	800ace0 <USBH_Get_USB_Status>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f9 f821 	bl	8003a94 <HAL_HCD_Stop>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 f941 	bl	800ace0 <USBH_Get_USB_Status>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7f9 f869 	bl	8003b56 <HAL_HCD_GetCurrentSpeed>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d00c      	beq.n	800aaa4 <USBH_LL_GetSpeed+0x38>
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d80d      	bhi.n	800aaaa <USBH_LL_GetSpeed+0x3e>
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <USBH_LL_GetSpeed+0x2c>
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d003      	beq.n	800aa9e <USBH_LL_GetSpeed+0x32>
 800aa96:	e008      	b.n	800aaaa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9c:	e008      	b.n	800aab0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa2:	e005      	b.n	800aab0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa8:	e002      	b.n	800aab0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	73fb      	strb	r3, [r7, #15]
    break;
 800aaae:	bf00      	nop
  }
  return  speed;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7f8 fffc 	bl	8003ace <HAL_HCD_ResetPort>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 f8ff 	bl	800ace0 <USBH_Get_USB_Status>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab02:	78fa      	ldrb	r2, [r7, #3]
 800ab04:	4611      	mov	r1, r2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f9 f803 	bl	8003b12 <HAL_HCD_HC_GetXferCount>
 800ab0c:	4603      	mov	r3, r0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab16:	b590      	push	{r4, r7, lr}
 800ab18:	b089      	sub	sp, #36	; 0x24
 800ab1a:	af04      	add	r7, sp, #16
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	461a      	mov	r2, r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	70fb      	strb	r3, [r7, #3]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70bb      	strb	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ab3e:	787c      	ldrb	r4, [r7, #1]
 800ab40:	78ba      	ldrb	r2, [r7, #2]
 800ab42:	78f9      	ldrb	r1, [r7, #3]
 800ab44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ab46:	9302      	str	r3, [sp, #8]
 800ab48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	4623      	mov	r3, r4
 800ab56:	f7f8 fc66 	bl	8003426 <HAL_HCD_HC_Init>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f000 f8bd 	bl	800ace0 <USBH_Get_USB_Status>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd90      	pop	{r4, r7, pc}

0800ab74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab8e:	78fa      	ldrb	r2, [r7, #3]
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f8 fcd6 	bl	8003544 <HAL_HCD_HC_Halt>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f89e 	bl	800ace0 <USBH_Get_USB_Status>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800abb2:	b590      	push	{r4, r7, lr}
 800abb4:	b089      	sub	sp, #36	; 0x24
 800abb6:	af04      	add	r7, sp, #16
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	461a      	mov	r2, r3
 800abc0:	4603      	mov	r3, r0
 800abc2:	70fb      	strb	r3, [r7, #3]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70bb      	strb	r3, [r7, #2]
 800abc8:	4613      	mov	r3, r2
 800abca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800abda:	787c      	ldrb	r4, [r7, #1]
 800abdc:	78ba      	ldrb	r2, [r7, #2]
 800abde:	78f9      	ldrb	r1, [r7, #3]
 800abe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800abe8:	9302      	str	r3, [sp, #8]
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	4623      	mov	r3, r4
 800abf6:	f7f8 fcc9 	bl	800358c <HAL_HCD_HC_SubmitRequest>
 800abfa:	4603      	mov	r3, r0
 800abfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f86d 	bl	800ace0 <USBH_Get_USB_Status>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd90      	pop	{r4, r7, pc}

0800ac14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7f8 ff5d 	bl	8003aea <HAL_HCD_HC_GetURBState>
 800ac30:	4603      	mov	r3, r0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 f870 	bl	800ad38 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ac58:	20c8      	movs	r0, #200	; 0xc8
 800ac5a:	f7f7 fb8f 	bl	800237c <HAL_Delay>
  return USBH_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
 800ac74:	4613      	mov	r3, r2
 800ac76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	212c      	movs	r1, #44	; 0x2c
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	333b      	adds	r3, #59	; 0x3b
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	212c      	movs	r1, #44	; 0x2c
 800ac9a:	fb01 f303 	mul.w	r3, r1, r3
 800ac9e:	4413      	add	r3, r2
 800aca0:	3354      	adds	r3, #84	; 0x54
 800aca2:	78ba      	ldrb	r2, [r7, #2]
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	e008      	b.n	800acba <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	212c      	movs	r1, #44	; 0x2c
 800acae:	fb01 f303 	mul.w	r3, r1, r3
 800acb2:	4413      	add	r3, r2
 800acb4:	3355      	adds	r3, #85	; 0x55
 800acb6:	78ba      	ldrb	r2, [r7, #2]
 800acb8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7f7 fb53 	bl	800237c <HAL_Delay>
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
	...

0800ace0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d817      	bhi.n	800ad24 <USBH_Get_USB_Status+0x44>
 800acf4:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <USBH_Get_USB_Status+0x1c>)
 800acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfa:	bf00      	nop
 800acfc:	0800ad0d 	.word	0x0800ad0d
 800ad00:	0800ad13 	.word	0x0800ad13
 800ad04:	0800ad19 	.word	0x0800ad19
 800ad08:	0800ad1f 	.word	0x0800ad1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad10:	e00b      	b.n	800ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad12:	2302      	movs	r3, #2
 800ad14:	73fb      	strb	r3, [r7, #15]
    break;
 800ad16:	e008      	b.n	800ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad1c:	e005      	b.n	800ad2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	73fb      	strb	r3, [r7, #15]
    break;
 800ad22:	e002      	b.n	800ad2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad24:	2302      	movs	r3, #2
 800ad26:	73fb      	strb	r3, [r7, #15]
    break;
 800ad28:	bf00      	nop
  }
  return usb_status;
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d102      	bne.n	800ad52 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	73fb      	strb	r3, [r7, #15]
 800ad50:	e001      	b.n	800ad56 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2110      	movs	r1, #16
 800ad5c:	4803      	ldr	r0, [pc, #12]	; (800ad6c <MX_DriverVbusHS+0x34>)
 800ad5e:	f7f8 fae7 	bl	8003330 <HAL_GPIO_WritePin>
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40020800 	.word	0x40020800

0800ad70 <__errno>:
 800ad70:	4b01      	ldr	r3, [pc, #4]	; (800ad78 <__errno+0x8>)
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	20000030 	.word	0x20000030

0800ad7c <__libc_init_array>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4d0d      	ldr	r5, [pc, #52]	; (800adb4 <__libc_init_array+0x38>)
 800ad80:	4c0d      	ldr	r4, [pc, #52]	; (800adb8 <__libc_init_array+0x3c>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	2600      	movs	r6, #0
 800ad88:	42a6      	cmp	r6, r4
 800ad8a:	d109      	bne.n	800ada0 <__libc_init_array+0x24>
 800ad8c:	4d0b      	ldr	r5, [pc, #44]	; (800adbc <__libc_init_array+0x40>)
 800ad8e:	4c0c      	ldr	r4, [pc, #48]	; (800adc0 <__libc_init_array+0x44>)
 800ad90:	f001 f834 	bl	800bdfc <_init>
 800ad94:	1b64      	subs	r4, r4, r5
 800ad96:	10a4      	asrs	r4, r4, #2
 800ad98:	2600      	movs	r6, #0
 800ad9a:	42a6      	cmp	r6, r4
 800ad9c:	d105      	bne.n	800adaa <__libc_init_array+0x2e>
 800ad9e:	bd70      	pop	{r4, r5, r6, pc}
 800ada0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada4:	4798      	blx	r3
 800ada6:	3601      	adds	r6, #1
 800ada8:	e7ee      	b.n	800ad88 <__libc_init_array+0xc>
 800adaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800adae:	4798      	blx	r3
 800adb0:	3601      	adds	r6, #1
 800adb2:	e7f2      	b.n	800ad9a <__libc_init_array+0x1e>
 800adb4:	0800c6d8 	.word	0x0800c6d8
 800adb8:	0800c6d8 	.word	0x0800c6d8
 800adbc:	0800c6d8 	.word	0x0800c6d8
 800adc0:	0800c6dc 	.word	0x0800c6dc

0800adc4 <malloc>:
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <malloc+0xc>)
 800adc6:	4601      	mov	r1, r0
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	f000 b87f 	b.w	800aecc <_malloc_r>
 800adce:	bf00      	nop
 800add0:	20000030 	.word	0x20000030

0800add4 <free>:
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <free+0xc>)
 800add6:	4601      	mov	r1, r0
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f000 b80b 	b.w	800adf4 <_free_r>
 800adde:	bf00      	nop
 800ade0:	20000030 	.word	0x20000030

0800ade4 <memset>:
 800ade4:	4402      	add	r2, r0
 800ade6:	4603      	mov	r3, r0
 800ade8:	4293      	cmp	r3, r2
 800adea:	d100      	bne.n	800adee <memset+0xa>
 800adec:	4770      	bx	lr
 800adee:	f803 1b01 	strb.w	r1, [r3], #1
 800adf2:	e7f9      	b.n	800ade8 <memset+0x4>

0800adf4 <_free_r>:
 800adf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adf6:	2900      	cmp	r1, #0
 800adf8:	d044      	beq.n	800ae84 <_free_r+0x90>
 800adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfe:	9001      	str	r0, [sp, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f1a1 0404 	sub.w	r4, r1, #4
 800ae06:	bfb8      	it	lt
 800ae08:	18e4      	addlt	r4, r4, r3
 800ae0a:	f000 fc51 	bl	800b6b0 <__malloc_lock>
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <_free_r+0x94>)
 800ae10:	9801      	ldr	r0, [sp, #4]
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	b933      	cbnz	r3, 800ae24 <_free_r+0x30>
 800ae16:	6063      	str	r3, [r4, #4]
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	b003      	add	sp, #12
 800ae1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae20:	f000 bc4c 	b.w	800b6bc <__malloc_unlock>
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	d908      	bls.n	800ae3a <_free_r+0x46>
 800ae28:	6825      	ldr	r5, [r4, #0]
 800ae2a:	1961      	adds	r1, r4, r5
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	bf01      	itttt	eq
 800ae30:	6819      	ldreq	r1, [r3, #0]
 800ae32:	685b      	ldreq	r3, [r3, #4]
 800ae34:	1949      	addeq	r1, r1, r5
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	e7ed      	b.n	800ae16 <_free_r+0x22>
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	b10b      	cbz	r3, 800ae44 <_free_r+0x50>
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d9fa      	bls.n	800ae3a <_free_r+0x46>
 800ae44:	6811      	ldr	r1, [r2, #0]
 800ae46:	1855      	adds	r5, r2, r1
 800ae48:	42a5      	cmp	r5, r4
 800ae4a:	d10b      	bne.n	800ae64 <_free_r+0x70>
 800ae4c:	6824      	ldr	r4, [r4, #0]
 800ae4e:	4421      	add	r1, r4
 800ae50:	1854      	adds	r4, r2, r1
 800ae52:	42a3      	cmp	r3, r4
 800ae54:	6011      	str	r1, [r2, #0]
 800ae56:	d1e0      	bne.n	800ae1a <_free_r+0x26>
 800ae58:	681c      	ldr	r4, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	6053      	str	r3, [r2, #4]
 800ae5e:	4421      	add	r1, r4
 800ae60:	6011      	str	r1, [r2, #0]
 800ae62:	e7da      	b.n	800ae1a <_free_r+0x26>
 800ae64:	d902      	bls.n	800ae6c <_free_r+0x78>
 800ae66:	230c      	movs	r3, #12
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	e7d6      	b.n	800ae1a <_free_r+0x26>
 800ae6c:	6825      	ldr	r5, [r4, #0]
 800ae6e:	1961      	adds	r1, r4, r5
 800ae70:	428b      	cmp	r3, r1
 800ae72:	bf04      	itt	eq
 800ae74:	6819      	ldreq	r1, [r3, #0]
 800ae76:	685b      	ldreq	r3, [r3, #4]
 800ae78:	6063      	str	r3, [r4, #4]
 800ae7a:	bf04      	itt	eq
 800ae7c:	1949      	addeq	r1, r1, r5
 800ae7e:	6021      	streq	r1, [r4, #0]
 800ae80:	6054      	str	r4, [r2, #4]
 800ae82:	e7ca      	b.n	800ae1a <_free_r+0x26>
 800ae84:	b003      	add	sp, #12
 800ae86:	bd30      	pop	{r4, r5, pc}
 800ae88:	20000ec0 	.word	0x20000ec0

0800ae8c <sbrk_aligned>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	4e0e      	ldr	r6, [pc, #56]	; (800aec8 <sbrk_aligned+0x3c>)
 800ae90:	460c      	mov	r4, r1
 800ae92:	6831      	ldr	r1, [r6, #0]
 800ae94:	4605      	mov	r5, r0
 800ae96:	b911      	cbnz	r1, 800ae9e <sbrk_aligned+0x12>
 800ae98:	f000 f91a 	bl	800b0d0 <_sbrk_r>
 800ae9c:	6030      	str	r0, [r6, #0]
 800ae9e:	4621      	mov	r1, r4
 800aea0:	4628      	mov	r0, r5
 800aea2:	f000 f915 	bl	800b0d0 <_sbrk_r>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d00a      	beq.n	800aec0 <sbrk_aligned+0x34>
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d007      	beq.n	800aec4 <sbrk_aligned+0x38>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 f90a 	bl	800b0d0 <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d101      	bne.n	800aec4 <sbrk_aligned+0x38>
 800aec0:	f04f 34ff 	mov.w	r4, #4294967295
 800aec4:	4620      	mov	r0, r4
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	20000ec4 	.word	0x20000ec4

0800aecc <_malloc_r>:
 800aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	1ccd      	adds	r5, r1, #3
 800aed2:	f025 0503 	bic.w	r5, r5, #3
 800aed6:	3508      	adds	r5, #8
 800aed8:	2d0c      	cmp	r5, #12
 800aeda:	bf38      	it	cc
 800aedc:	250c      	movcc	r5, #12
 800aede:	2d00      	cmp	r5, #0
 800aee0:	4607      	mov	r7, r0
 800aee2:	db01      	blt.n	800aee8 <_malloc_r+0x1c>
 800aee4:	42a9      	cmp	r1, r5
 800aee6:	d905      	bls.n	800aef4 <_malloc_r+0x28>
 800aee8:	230c      	movs	r3, #12
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	2600      	movs	r6, #0
 800aeee:	4630      	mov	r0, r6
 800aef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef4:	4e2e      	ldr	r6, [pc, #184]	; (800afb0 <_malloc_r+0xe4>)
 800aef6:	f000 fbdb 	bl	800b6b0 <__malloc_lock>
 800aefa:	6833      	ldr	r3, [r6, #0]
 800aefc:	461c      	mov	r4, r3
 800aefe:	bb34      	cbnz	r4, 800af4e <_malloc_r+0x82>
 800af00:	4629      	mov	r1, r5
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ffc2 	bl	800ae8c <sbrk_aligned>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	4604      	mov	r4, r0
 800af0c:	d14d      	bne.n	800afaa <_malloc_r+0xde>
 800af0e:	6834      	ldr	r4, [r6, #0]
 800af10:	4626      	mov	r6, r4
 800af12:	2e00      	cmp	r6, #0
 800af14:	d140      	bne.n	800af98 <_malloc_r+0xcc>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	4631      	mov	r1, r6
 800af1a:	4638      	mov	r0, r7
 800af1c:	eb04 0803 	add.w	r8, r4, r3
 800af20:	f000 f8d6 	bl	800b0d0 <_sbrk_r>
 800af24:	4580      	cmp	r8, r0
 800af26:	d13a      	bne.n	800af9e <_malloc_r+0xd2>
 800af28:	6821      	ldr	r1, [r4, #0]
 800af2a:	3503      	adds	r5, #3
 800af2c:	1a6d      	subs	r5, r5, r1
 800af2e:	f025 0503 	bic.w	r5, r5, #3
 800af32:	3508      	adds	r5, #8
 800af34:	2d0c      	cmp	r5, #12
 800af36:	bf38      	it	cc
 800af38:	250c      	movcc	r5, #12
 800af3a:	4629      	mov	r1, r5
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7ff ffa5 	bl	800ae8c <sbrk_aligned>
 800af42:	3001      	adds	r0, #1
 800af44:	d02b      	beq.n	800af9e <_malloc_r+0xd2>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	442b      	add	r3, r5
 800af4a:	6023      	str	r3, [r4, #0]
 800af4c:	e00e      	b.n	800af6c <_malloc_r+0xa0>
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	1b52      	subs	r2, r2, r5
 800af52:	d41e      	bmi.n	800af92 <_malloc_r+0xc6>
 800af54:	2a0b      	cmp	r2, #11
 800af56:	d916      	bls.n	800af86 <_malloc_r+0xba>
 800af58:	1961      	adds	r1, r4, r5
 800af5a:	42a3      	cmp	r3, r4
 800af5c:	6025      	str	r5, [r4, #0]
 800af5e:	bf18      	it	ne
 800af60:	6059      	strne	r1, [r3, #4]
 800af62:	6863      	ldr	r3, [r4, #4]
 800af64:	bf08      	it	eq
 800af66:	6031      	streq	r1, [r6, #0]
 800af68:	5162      	str	r2, [r4, r5]
 800af6a:	604b      	str	r3, [r1, #4]
 800af6c:	4638      	mov	r0, r7
 800af6e:	f104 060b 	add.w	r6, r4, #11
 800af72:	f000 fba3 	bl	800b6bc <__malloc_unlock>
 800af76:	f026 0607 	bic.w	r6, r6, #7
 800af7a:	1d23      	adds	r3, r4, #4
 800af7c:	1af2      	subs	r2, r6, r3
 800af7e:	d0b6      	beq.n	800aeee <_malloc_r+0x22>
 800af80:	1b9b      	subs	r3, r3, r6
 800af82:	50a3      	str	r3, [r4, r2]
 800af84:	e7b3      	b.n	800aeee <_malloc_r+0x22>
 800af86:	6862      	ldr	r2, [r4, #4]
 800af88:	42a3      	cmp	r3, r4
 800af8a:	bf0c      	ite	eq
 800af8c:	6032      	streq	r2, [r6, #0]
 800af8e:	605a      	strne	r2, [r3, #4]
 800af90:	e7ec      	b.n	800af6c <_malloc_r+0xa0>
 800af92:	4623      	mov	r3, r4
 800af94:	6864      	ldr	r4, [r4, #4]
 800af96:	e7b2      	b.n	800aefe <_malloc_r+0x32>
 800af98:	4634      	mov	r4, r6
 800af9a:	6876      	ldr	r6, [r6, #4]
 800af9c:	e7b9      	b.n	800af12 <_malloc_r+0x46>
 800af9e:	230c      	movs	r3, #12
 800afa0:	603b      	str	r3, [r7, #0]
 800afa2:	4638      	mov	r0, r7
 800afa4:	f000 fb8a 	bl	800b6bc <__malloc_unlock>
 800afa8:	e7a1      	b.n	800aeee <_malloc_r+0x22>
 800afaa:	6025      	str	r5, [r4, #0]
 800afac:	e7de      	b.n	800af6c <_malloc_r+0xa0>
 800afae:	bf00      	nop
 800afb0:	20000ec0 	.word	0x20000ec0

0800afb4 <iprintf>:
 800afb4:	b40f      	push	{r0, r1, r2, r3}
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <iprintf+0x2c>)
 800afb8:	b513      	push	{r0, r1, r4, lr}
 800afba:	681c      	ldr	r4, [r3, #0]
 800afbc:	b124      	cbz	r4, 800afc8 <iprintf+0x14>
 800afbe:	69a3      	ldr	r3, [r4, #24]
 800afc0:	b913      	cbnz	r3, 800afc8 <iprintf+0x14>
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fa6e 	bl	800b4a4 <__sinit>
 800afc8:	ab05      	add	r3, sp, #20
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	68a1      	ldr	r1, [r4, #8]
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 fba3 	bl	800b71c <_vfiprintf_r>
 800afd6:	b002      	add	sp, #8
 800afd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afdc:	b004      	add	sp, #16
 800afde:	4770      	bx	lr
 800afe0:	20000030 	.word	0x20000030

0800afe4 <_puts_r>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	460e      	mov	r6, r1
 800afe8:	4605      	mov	r5, r0
 800afea:	b118      	cbz	r0, 800aff4 <_puts_r+0x10>
 800afec:	6983      	ldr	r3, [r0, #24]
 800afee:	b90b      	cbnz	r3, 800aff4 <_puts_r+0x10>
 800aff0:	f000 fa58 	bl	800b4a4 <__sinit>
 800aff4:	69ab      	ldr	r3, [r5, #24]
 800aff6:	68ac      	ldr	r4, [r5, #8]
 800aff8:	b913      	cbnz	r3, 800b000 <_puts_r+0x1c>
 800affa:	4628      	mov	r0, r5
 800affc:	f000 fa52 	bl	800b4a4 <__sinit>
 800b000:	4b2c      	ldr	r3, [pc, #176]	; (800b0b4 <_puts_r+0xd0>)
 800b002:	429c      	cmp	r4, r3
 800b004:	d120      	bne.n	800b048 <_puts_r+0x64>
 800b006:	686c      	ldr	r4, [r5, #4]
 800b008:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b00a:	07db      	lsls	r3, r3, #31
 800b00c:	d405      	bmi.n	800b01a <_puts_r+0x36>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	0598      	lsls	r0, r3, #22
 800b012:	d402      	bmi.n	800b01a <_puts_r+0x36>
 800b014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b016:	f000 fae3 	bl	800b5e0 <__retarget_lock_acquire_recursive>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	0719      	lsls	r1, r3, #28
 800b01e:	d51d      	bpl.n	800b05c <_puts_r+0x78>
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	b1db      	cbz	r3, 800b05c <_puts_r+0x78>
 800b024:	3e01      	subs	r6, #1
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b02c:	3b01      	subs	r3, #1
 800b02e:	60a3      	str	r3, [r4, #8]
 800b030:	bb39      	cbnz	r1, 800b082 <_puts_r+0x9e>
 800b032:	2b00      	cmp	r3, #0
 800b034:	da38      	bge.n	800b0a8 <_puts_r+0xc4>
 800b036:	4622      	mov	r2, r4
 800b038:	210a      	movs	r1, #10
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 f858 	bl	800b0f0 <__swbuf_r>
 800b040:	3001      	adds	r0, #1
 800b042:	d011      	beq.n	800b068 <_puts_r+0x84>
 800b044:	250a      	movs	r5, #10
 800b046:	e011      	b.n	800b06c <_puts_r+0x88>
 800b048:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <_puts_r+0xd4>)
 800b04a:	429c      	cmp	r4, r3
 800b04c:	d101      	bne.n	800b052 <_puts_r+0x6e>
 800b04e:	68ac      	ldr	r4, [r5, #8]
 800b050:	e7da      	b.n	800b008 <_puts_r+0x24>
 800b052:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <_puts_r+0xd8>)
 800b054:	429c      	cmp	r4, r3
 800b056:	bf08      	it	eq
 800b058:	68ec      	ldreq	r4, [r5, #12]
 800b05a:	e7d5      	b.n	800b008 <_puts_r+0x24>
 800b05c:	4621      	mov	r1, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 f898 	bl	800b194 <__swsetup_r>
 800b064:	2800      	cmp	r0, #0
 800b066:	d0dd      	beq.n	800b024 <_puts_r+0x40>
 800b068:	f04f 35ff 	mov.w	r5, #4294967295
 800b06c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b06e:	07da      	lsls	r2, r3, #31
 800b070:	d405      	bmi.n	800b07e <_puts_r+0x9a>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	059b      	lsls	r3, r3, #22
 800b076:	d402      	bmi.n	800b07e <_puts_r+0x9a>
 800b078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07a:	f000 fab2 	bl	800b5e2 <__retarget_lock_release_recursive>
 800b07e:	4628      	mov	r0, r5
 800b080:	bd70      	pop	{r4, r5, r6, pc}
 800b082:	2b00      	cmp	r3, #0
 800b084:	da04      	bge.n	800b090 <_puts_r+0xac>
 800b086:	69a2      	ldr	r2, [r4, #24]
 800b088:	429a      	cmp	r2, r3
 800b08a:	dc06      	bgt.n	800b09a <_puts_r+0xb6>
 800b08c:	290a      	cmp	r1, #10
 800b08e:	d004      	beq.n	800b09a <_puts_r+0xb6>
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	6022      	str	r2, [r4, #0]
 800b096:	7019      	strb	r1, [r3, #0]
 800b098:	e7c5      	b.n	800b026 <_puts_r+0x42>
 800b09a:	4622      	mov	r2, r4
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 f827 	bl	800b0f0 <__swbuf_r>
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d1bf      	bne.n	800b026 <_puts_r+0x42>
 800b0a6:	e7df      	b.n	800b068 <_puts_r+0x84>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	250a      	movs	r5, #10
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	701d      	strb	r5, [r3, #0]
 800b0b2:	e7db      	b.n	800b06c <_puts_r+0x88>
 800b0b4:	0800c65c 	.word	0x0800c65c
 800b0b8:	0800c67c 	.word	0x0800c67c
 800b0bc:	0800c63c 	.word	0x0800c63c

0800b0c0 <puts>:
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <puts+0xc>)
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f7ff bf8d 	b.w	800afe4 <_puts_r>
 800b0ca:	bf00      	nop
 800b0cc:	20000030 	.word	0x20000030

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d06      	ldr	r5, [pc, #24]	; (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f7 f89a 	bl	8002214 <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	20000ecc 	.word	0x20000ecc

0800b0f0 <__swbuf_r>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	460e      	mov	r6, r1
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	b118      	cbz	r0, 800b102 <__swbuf_r+0x12>
 800b0fa:	6983      	ldr	r3, [r0, #24]
 800b0fc:	b90b      	cbnz	r3, 800b102 <__swbuf_r+0x12>
 800b0fe:	f000 f9d1 	bl	800b4a4 <__sinit>
 800b102:	4b21      	ldr	r3, [pc, #132]	; (800b188 <__swbuf_r+0x98>)
 800b104:	429c      	cmp	r4, r3
 800b106:	d12b      	bne.n	800b160 <__swbuf_r+0x70>
 800b108:	686c      	ldr	r4, [r5, #4]
 800b10a:	69a3      	ldr	r3, [r4, #24]
 800b10c:	60a3      	str	r3, [r4, #8]
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	071a      	lsls	r2, r3, #28
 800b112:	d52f      	bpl.n	800b174 <__swbuf_r+0x84>
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	b36b      	cbz	r3, 800b174 <__swbuf_r+0x84>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	6820      	ldr	r0, [r4, #0]
 800b11c:	1ac0      	subs	r0, r0, r3
 800b11e:	6963      	ldr	r3, [r4, #20]
 800b120:	b2f6      	uxtb	r6, r6
 800b122:	4283      	cmp	r3, r0
 800b124:	4637      	mov	r7, r6
 800b126:	dc04      	bgt.n	800b132 <__swbuf_r+0x42>
 800b128:	4621      	mov	r1, r4
 800b12a:	4628      	mov	r0, r5
 800b12c:	f000 f926 	bl	800b37c <_fflush_r>
 800b130:	bb30      	cbnz	r0, 800b180 <__swbuf_r+0x90>
 800b132:	68a3      	ldr	r3, [r4, #8]
 800b134:	3b01      	subs	r3, #1
 800b136:	60a3      	str	r3, [r4, #8]
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	1c5a      	adds	r2, r3, #1
 800b13c:	6022      	str	r2, [r4, #0]
 800b13e:	701e      	strb	r6, [r3, #0]
 800b140:	6963      	ldr	r3, [r4, #20]
 800b142:	3001      	adds	r0, #1
 800b144:	4283      	cmp	r3, r0
 800b146:	d004      	beq.n	800b152 <__swbuf_r+0x62>
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	07db      	lsls	r3, r3, #31
 800b14c:	d506      	bpl.n	800b15c <__swbuf_r+0x6c>
 800b14e:	2e0a      	cmp	r6, #10
 800b150:	d104      	bne.n	800b15c <__swbuf_r+0x6c>
 800b152:	4621      	mov	r1, r4
 800b154:	4628      	mov	r0, r5
 800b156:	f000 f911 	bl	800b37c <_fflush_r>
 800b15a:	b988      	cbnz	r0, 800b180 <__swbuf_r+0x90>
 800b15c:	4638      	mov	r0, r7
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b160:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <__swbuf_r+0x9c>)
 800b162:	429c      	cmp	r4, r3
 800b164:	d101      	bne.n	800b16a <__swbuf_r+0x7a>
 800b166:	68ac      	ldr	r4, [r5, #8]
 800b168:	e7cf      	b.n	800b10a <__swbuf_r+0x1a>
 800b16a:	4b09      	ldr	r3, [pc, #36]	; (800b190 <__swbuf_r+0xa0>)
 800b16c:	429c      	cmp	r4, r3
 800b16e:	bf08      	it	eq
 800b170:	68ec      	ldreq	r4, [r5, #12]
 800b172:	e7ca      	b.n	800b10a <__swbuf_r+0x1a>
 800b174:	4621      	mov	r1, r4
 800b176:	4628      	mov	r0, r5
 800b178:	f000 f80c 	bl	800b194 <__swsetup_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0cb      	beq.n	800b118 <__swbuf_r+0x28>
 800b180:	f04f 37ff 	mov.w	r7, #4294967295
 800b184:	e7ea      	b.n	800b15c <__swbuf_r+0x6c>
 800b186:	bf00      	nop
 800b188:	0800c65c 	.word	0x0800c65c
 800b18c:	0800c67c 	.word	0x0800c67c
 800b190:	0800c63c 	.word	0x0800c63c

0800b194 <__swsetup_r>:
 800b194:	4b32      	ldr	r3, [pc, #200]	; (800b260 <__swsetup_r+0xcc>)
 800b196:	b570      	push	{r4, r5, r6, lr}
 800b198:	681d      	ldr	r5, [r3, #0]
 800b19a:	4606      	mov	r6, r0
 800b19c:	460c      	mov	r4, r1
 800b19e:	b125      	cbz	r5, 800b1aa <__swsetup_r+0x16>
 800b1a0:	69ab      	ldr	r3, [r5, #24]
 800b1a2:	b913      	cbnz	r3, 800b1aa <__swsetup_r+0x16>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 f97d 	bl	800b4a4 <__sinit>
 800b1aa:	4b2e      	ldr	r3, [pc, #184]	; (800b264 <__swsetup_r+0xd0>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	d10f      	bne.n	800b1d0 <__swsetup_r+0x3c>
 800b1b0:	686c      	ldr	r4, [r5, #4]
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1b8:	0719      	lsls	r1, r3, #28
 800b1ba:	d42c      	bmi.n	800b216 <__swsetup_r+0x82>
 800b1bc:	06dd      	lsls	r5, r3, #27
 800b1be:	d411      	bmi.n	800b1e4 <__swsetup_r+0x50>
 800b1c0:	2309      	movs	r3, #9
 800b1c2:	6033      	str	r3, [r6, #0]
 800b1c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ce:	e03e      	b.n	800b24e <__swsetup_r+0xba>
 800b1d0:	4b25      	ldr	r3, [pc, #148]	; (800b268 <__swsetup_r+0xd4>)
 800b1d2:	429c      	cmp	r4, r3
 800b1d4:	d101      	bne.n	800b1da <__swsetup_r+0x46>
 800b1d6:	68ac      	ldr	r4, [r5, #8]
 800b1d8:	e7eb      	b.n	800b1b2 <__swsetup_r+0x1e>
 800b1da:	4b24      	ldr	r3, [pc, #144]	; (800b26c <__swsetup_r+0xd8>)
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	bf08      	it	eq
 800b1e0:	68ec      	ldreq	r4, [r5, #12]
 800b1e2:	e7e6      	b.n	800b1b2 <__swsetup_r+0x1e>
 800b1e4:	0758      	lsls	r0, r3, #29
 800b1e6:	d512      	bpl.n	800b20e <__swsetup_r+0x7a>
 800b1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ea:	b141      	cbz	r1, 800b1fe <__swsetup_r+0x6a>
 800b1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	d002      	beq.n	800b1fa <__swsetup_r+0x66>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff fdfd 	bl	800adf4 <_free_r>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b204:	81a3      	strh	r3, [r4, #12]
 800b206:	2300      	movs	r3, #0
 800b208:	6063      	str	r3, [r4, #4]
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f043 0308 	orr.w	r3, r3, #8
 800b214:	81a3      	strh	r3, [r4, #12]
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	b94b      	cbnz	r3, 800b22e <__swsetup_r+0x9a>
 800b21a:	89a3      	ldrh	r3, [r4, #12]
 800b21c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b224:	d003      	beq.n	800b22e <__swsetup_r+0x9a>
 800b226:	4621      	mov	r1, r4
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 fa01 	bl	800b630 <__smakebuf_r>
 800b22e:	89a0      	ldrh	r0, [r4, #12]
 800b230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b234:	f010 0301 	ands.w	r3, r0, #1
 800b238:	d00a      	beq.n	800b250 <__swsetup_r+0xbc>
 800b23a:	2300      	movs	r3, #0
 800b23c:	60a3      	str	r3, [r4, #8]
 800b23e:	6963      	ldr	r3, [r4, #20]
 800b240:	425b      	negs	r3, r3
 800b242:	61a3      	str	r3, [r4, #24]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	b943      	cbnz	r3, 800b25a <__swsetup_r+0xc6>
 800b248:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b24c:	d1ba      	bne.n	800b1c4 <__swsetup_r+0x30>
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	0781      	lsls	r1, r0, #30
 800b252:	bf58      	it	pl
 800b254:	6963      	ldrpl	r3, [r4, #20]
 800b256:	60a3      	str	r3, [r4, #8]
 800b258:	e7f4      	b.n	800b244 <__swsetup_r+0xb0>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e7f7      	b.n	800b24e <__swsetup_r+0xba>
 800b25e:	bf00      	nop
 800b260:	20000030 	.word	0x20000030
 800b264:	0800c65c 	.word	0x0800c65c
 800b268:	0800c67c 	.word	0x0800c67c
 800b26c:	0800c63c 	.word	0x0800c63c

0800b270 <__sflush_r>:
 800b270:	898a      	ldrh	r2, [r1, #12]
 800b272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	4605      	mov	r5, r0
 800b278:	0710      	lsls	r0, r2, #28
 800b27a:	460c      	mov	r4, r1
 800b27c:	d458      	bmi.n	800b330 <__sflush_r+0xc0>
 800b27e:	684b      	ldr	r3, [r1, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	dc05      	bgt.n	800b290 <__sflush_r+0x20>
 800b284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	dc02      	bgt.n	800b290 <__sflush_r+0x20>
 800b28a:	2000      	movs	r0, #0
 800b28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b292:	2e00      	cmp	r6, #0
 800b294:	d0f9      	beq.n	800b28a <__sflush_r+0x1a>
 800b296:	2300      	movs	r3, #0
 800b298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b29c:	682f      	ldr	r7, [r5, #0]
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	d032      	beq.n	800b308 <__sflush_r+0x98>
 800b2a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	075a      	lsls	r2, r3, #29
 800b2a8:	d505      	bpl.n	800b2b6 <__sflush_r+0x46>
 800b2aa:	6863      	ldr	r3, [r4, #4]
 800b2ac:	1ac0      	subs	r0, r0, r3
 800b2ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2b0:	b10b      	cbz	r3, 800b2b6 <__sflush_r+0x46>
 800b2b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2b4:	1ac0      	subs	r0, r0, r3
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2bc:	6a21      	ldr	r1, [r4, #32]
 800b2be:	4628      	mov	r0, r5
 800b2c0:	47b0      	blx	r6
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	d106      	bne.n	800b2d6 <__sflush_r+0x66>
 800b2c8:	6829      	ldr	r1, [r5, #0]
 800b2ca:	291d      	cmp	r1, #29
 800b2cc:	d82c      	bhi.n	800b328 <__sflush_r+0xb8>
 800b2ce:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <__sflush_r+0x108>)
 800b2d0:	40ca      	lsrs	r2, r1
 800b2d2:	07d6      	lsls	r6, r2, #31
 800b2d4:	d528      	bpl.n	800b328 <__sflush_r+0xb8>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	6062      	str	r2, [r4, #4]
 800b2da:	04d9      	lsls	r1, r3, #19
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	6022      	str	r2, [r4, #0]
 800b2e0:	d504      	bpl.n	800b2ec <__sflush_r+0x7c>
 800b2e2:	1c42      	adds	r2, r0, #1
 800b2e4:	d101      	bne.n	800b2ea <__sflush_r+0x7a>
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	b903      	cbnz	r3, 800b2ec <__sflush_r+0x7c>
 800b2ea:	6560      	str	r0, [r4, #84]	; 0x54
 800b2ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ee:	602f      	str	r7, [r5, #0]
 800b2f0:	2900      	cmp	r1, #0
 800b2f2:	d0ca      	beq.n	800b28a <__sflush_r+0x1a>
 800b2f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2f8:	4299      	cmp	r1, r3
 800b2fa:	d002      	beq.n	800b302 <__sflush_r+0x92>
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	f7ff fd79 	bl	800adf4 <_free_r>
 800b302:	2000      	movs	r0, #0
 800b304:	6360      	str	r0, [r4, #52]	; 0x34
 800b306:	e7c1      	b.n	800b28c <__sflush_r+0x1c>
 800b308:	6a21      	ldr	r1, [r4, #32]
 800b30a:	2301      	movs	r3, #1
 800b30c:	4628      	mov	r0, r5
 800b30e:	47b0      	blx	r6
 800b310:	1c41      	adds	r1, r0, #1
 800b312:	d1c7      	bne.n	800b2a4 <__sflush_r+0x34>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0c4      	beq.n	800b2a4 <__sflush_r+0x34>
 800b31a:	2b1d      	cmp	r3, #29
 800b31c:	d001      	beq.n	800b322 <__sflush_r+0xb2>
 800b31e:	2b16      	cmp	r3, #22
 800b320:	d101      	bne.n	800b326 <__sflush_r+0xb6>
 800b322:	602f      	str	r7, [r5, #0]
 800b324:	e7b1      	b.n	800b28a <__sflush_r+0x1a>
 800b326:	89a3      	ldrh	r3, [r4, #12]
 800b328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	e7ad      	b.n	800b28c <__sflush_r+0x1c>
 800b330:	690f      	ldr	r7, [r1, #16]
 800b332:	2f00      	cmp	r7, #0
 800b334:	d0a9      	beq.n	800b28a <__sflush_r+0x1a>
 800b336:	0793      	lsls	r3, r2, #30
 800b338:	680e      	ldr	r6, [r1, #0]
 800b33a:	bf08      	it	eq
 800b33c:	694b      	ldreq	r3, [r1, #20]
 800b33e:	600f      	str	r7, [r1, #0]
 800b340:	bf18      	it	ne
 800b342:	2300      	movne	r3, #0
 800b344:	eba6 0807 	sub.w	r8, r6, r7
 800b348:	608b      	str	r3, [r1, #8]
 800b34a:	f1b8 0f00 	cmp.w	r8, #0
 800b34e:	dd9c      	ble.n	800b28a <__sflush_r+0x1a>
 800b350:	6a21      	ldr	r1, [r4, #32]
 800b352:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b354:	4643      	mov	r3, r8
 800b356:	463a      	mov	r2, r7
 800b358:	4628      	mov	r0, r5
 800b35a:	47b0      	blx	r6
 800b35c:	2800      	cmp	r0, #0
 800b35e:	dc06      	bgt.n	800b36e <__sflush_r+0xfe>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b366:	81a3      	strh	r3, [r4, #12]
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	e78e      	b.n	800b28c <__sflush_r+0x1c>
 800b36e:	4407      	add	r7, r0
 800b370:	eba8 0800 	sub.w	r8, r8, r0
 800b374:	e7e9      	b.n	800b34a <__sflush_r+0xda>
 800b376:	bf00      	nop
 800b378:	20400001 	.word	0x20400001

0800b37c <_fflush_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	690b      	ldr	r3, [r1, #16]
 800b380:	4605      	mov	r5, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b913      	cbnz	r3, 800b38c <_fflush_r+0x10>
 800b386:	2500      	movs	r5, #0
 800b388:	4628      	mov	r0, r5
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	b118      	cbz	r0, 800b396 <_fflush_r+0x1a>
 800b38e:	6983      	ldr	r3, [r0, #24]
 800b390:	b90b      	cbnz	r3, 800b396 <_fflush_r+0x1a>
 800b392:	f000 f887 	bl	800b4a4 <__sinit>
 800b396:	4b14      	ldr	r3, [pc, #80]	; (800b3e8 <_fflush_r+0x6c>)
 800b398:	429c      	cmp	r4, r3
 800b39a:	d11b      	bne.n	800b3d4 <_fflush_r+0x58>
 800b39c:	686c      	ldr	r4, [r5, #4]
 800b39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0ef      	beq.n	800b386 <_fflush_r+0xa>
 800b3a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3a8:	07d0      	lsls	r0, r2, #31
 800b3aa:	d404      	bmi.n	800b3b6 <_fflush_r+0x3a>
 800b3ac:	0599      	lsls	r1, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_fflush_r+0x3a>
 800b3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b2:	f000 f915 	bl	800b5e0 <__retarget_lock_acquire_recursive>
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	f7ff ff59 	bl	800b270 <__sflush_r>
 800b3be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3c0:	07da      	lsls	r2, r3, #31
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	d4e0      	bmi.n	800b388 <_fflush_r+0xc>
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	059b      	lsls	r3, r3, #22
 800b3ca:	d4dd      	bmi.n	800b388 <_fflush_r+0xc>
 800b3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ce:	f000 f908 	bl	800b5e2 <__retarget_lock_release_recursive>
 800b3d2:	e7d9      	b.n	800b388 <_fflush_r+0xc>
 800b3d4:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <_fflush_r+0x70>)
 800b3d6:	429c      	cmp	r4, r3
 800b3d8:	d101      	bne.n	800b3de <_fflush_r+0x62>
 800b3da:	68ac      	ldr	r4, [r5, #8]
 800b3dc:	e7df      	b.n	800b39e <_fflush_r+0x22>
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <_fflush_r+0x74>)
 800b3e0:	429c      	cmp	r4, r3
 800b3e2:	bf08      	it	eq
 800b3e4:	68ec      	ldreq	r4, [r5, #12]
 800b3e6:	e7da      	b.n	800b39e <_fflush_r+0x22>
 800b3e8:	0800c65c 	.word	0x0800c65c
 800b3ec:	0800c67c 	.word	0x0800c67c
 800b3f0:	0800c63c 	.word	0x0800c63c

0800b3f4 <std>:
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b402:	6083      	str	r3, [r0, #8]
 800b404:	8181      	strh	r1, [r0, #12]
 800b406:	6643      	str	r3, [r0, #100]	; 0x64
 800b408:	81c2      	strh	r2, [r0, #14]
 800b40a:	6183      	str	r3, [r0, #24]
 800b40c:	4619      	mov	r1, r3
 800b40e:	2208      	movs	r2, #8
 800b410:	305c      	adds	r0, #92	; 0x5c
 800b412:	f7ff fce7 	bl	800ade4 <memset>
 800b416:	4b05      	ldr	r3, [pc, #20]	; (800b42c <std+0x38>)
 800b418:	6263      	str	r3, [r4, #36]	; 0x24
 800b41a:	4b05      	ldr	r3, [pc, #20]	; (800b430 <std+0x3c>)
 800b41c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <std+0x40>)
 800b420:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <std+0x44>)
 800b424:	6224      	str	r4, [r4, #32]
 800b426:	6323      	str	r3, [r4, #48]	; 0x30
 800b428:	bd10      	pop	{r4, pc}
 800b42a:	bf00      	nop
 800b42c:	0800bca5 	.word	0x0800bca5
 800b430:	0800bcc7 	.word	0x0800bcc7
 800b434:	0800bcff 	.word	0x0800bcff
 800b438:	0800bd23 	.word	0x0800bd23

0800b43c <_cleanup_r>:
 800b43c:	4901      	ldr	r1, [pc, #4]	; (800b444 <_cleanup_r+0x8>)
 800b43e:	f000 b8af 	b.w	800b5a0 <_fwalk_reent>
 800b442:	bf00      	nop
 800b444:	0800b37d 	.word	0x0800b37d

0800b448 <__sfmoreglue>:
 800b448:	b570      	push	{r4, r5, r6, lr}
 800b44a:	2268      	movs	r2, #104	; 0x68
 800b44c:	1e4d      	subs	r5, r1, #1
 800b44e:	4355      	muls	r5, r2
 800b450:	460e      	mov	r6, r1
 800b452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b456:	f7ff fd39 	bl	800aecc <_malloc_r>
 800b45a:	4604      	mov	r4, r0
 800b45c:	b140      	cbz	r0, 800b470 <__sfmoreglue+0x28>
 800b45e:	2100      	movs	r1, #0
 800b460:	e9c0 1600 	strd	r1, r6, [r0]
 800b464:	300c      	adds	r0, #12
 800b466:	60a0      	str	r0, [r4, #8]
 800b468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b46c:	f7ff fcba 	bl	800ade4 <memset>
 800b470:	4620      	mov	r0, r4
 800b472:	bd70      	pop	{r4, r5, r6, pc}

0800b474 <__sfp_lock_acquire>:
 800b474:	4801      	ldr	r0, [pc, #4]	; (800b47c <__sfp_lock_acquire+0x8>)
 800b476:	f000 b8b3 	b.w	800b5e0 <__retarget_lock_acquire_recursive>
 800b47a:	bf00      	nop
 800b47c:	20000ec9 	.word	0x20000ec9

0800b480 <__sfp_lock_release>:
 800b480:	4801      	ldr	r0, [pc, #4]	; (800b488 <__sfp_lock_release+0x8>)
 800b482:	f000 b8ae 	b.w	800b5e2 <__retarget_lock_release_recursive>
 800b486:	bf00      	nop
 800b488:	20000ec9 	.word	0x20000ec9

0800b48c <__sinit_lock_acquire>:
 800b48c:	4801      	ldr	r0, [pc, #4]	; (800b494 <__sinit_lock_acquire+0x8>)
 800b48e:	f000 b8a7 	b.w	800b5e0 <__retarget_lock_acquire_recursive>
 800b492:	bf00      	nop
 800b494:	20000eca 	.word	0x20000eca

0800b498 <__sinit_lock_release>:
 800b498:	4801      	ldr	r0, [pc, #4]	; (800b4a0 <__sinit_lock_release+0x8>)
 800b49a:	f000 b8a2 	b.w	800b5e2 <__retarget_lock_release_recursive>
 800b49e:	bf00      	nop
 800b4a0:	20000eca 	.word	0x20000eca

0800b4a4 <__sinit>:
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	f7ff fff0 	bl	800b48c <__sinit_lock_acquire>
 800b4ac:	69a3      	ldr	r3, [r4, #24]
 800b4ae:	b11b      	cbz	r3, 800b4b8 <__sinit+0x14>
 800b4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b4:	f7ff bff0 	b.w	800b498 <__sinit_lock_release>
 800b4b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4bc:	6523      	str	r3, [r4, #80]	; 0x50
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <__sinit+0x68>)
 800b4c0:	4a13      	ldr	r2, [pc, #76]	; (800b510 <__sinit+0x6c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	bf04      	itt	eq
 800b4ca:	2301      	moveq	r3, #1
 800b4cc:	61a3      	streq	r3, [r4, #24]
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f000 f820 	bl	800b514 <__sfp>
 800b4d4:	6060      	str	r0, [r4, #4]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 f81c 	bl	800b514 <__sfp>
 800b4dc:	60a0      	str	r0, [r4, #8]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f000 f818 	bl	800b514 <__sfp>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	60e0      	str	r0, [r4, #12]
 800b4e8:	2104      	movs	r1, #4
 800b4ea:	6860      	ldr	r0, [r4, #4]
 800b4ec:	f7ff ff82 	bl	800b3f4 <std>
 800b4f0:	68a0      	ldr	r0, [r4, #8]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	2109      	movs	r1, #9
 800b4f6:	f7ff ff7d 	bl	800b3f4 <std>
 800b4fa:	68e0      	ldr	r0, [r4, #12]
 800b4fc:	2202      	movs	r2, #2
 800b4fe:	2112      	movs	r1, #18
 800b500:	f7ff ff78 	bl	800b3f4 <std>
 800b504:	2301      	movs	r3, #1
 800b506:	61a3      	str	r3, [r4, #24]
 800b508:	e7d2      	b.n	800b4b0 <__sinit+0xc>
 800b50a:	bf00      	nop
 800b50c:	0800c638 	.word	0x0800c638
 800b510:	0800b43d 	.word	0x0800b43d

0800b514 <__sfp>:
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	4607      	mov	r7, r0
 800b518:	f7ff ffac 	bl	800b474 <__sfp_lock_acquire>
 800b51c:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <__sfp+0x84>)
 800b51e:	681e      	ldr	r6, [r3, #0]
 800b520:	69b3      	ldr	r3, [r6, #24]
 800b522:	b913      	cbnz	r3, 800b52a <__sfp+0x16>
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff ffbd 	bl	800b4a4 <__sinit>
 800b52a:	3648      	adds	r6, #72	; 0x48
 800b52c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b530:	3b01      	subs	r3, #1
 800b532:	d503      	bpl.n	800b53c <__sfp+0x28>
 800b534:	6833      	ldr	r3, [r6, #0]
 800b536:	b30b      	cbz	r3, 800b57c <__sfp+0x68>
 800b538:	6836      	ldr	r6, [r6, #0]
 800b53a:	e7f7      	b.n	800b52c <__sfp+0x18>
 800b53c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b540:	b9d5      	cbnz	r5, 800b578 <__sfp+0x64>
 800b542:	4b16      	ldr	r3, [pc, #88]	; (800b59c <__sfp+0x88>)
 800b544:	60e3      	str	r3, [r4, #12]
 800b546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b54a:	6665      	str	r5, [r4, #100]	; 0x64
 800b54c:	f000 f847 	bl	800b5de <__retarget_lock_init_recursive>
 800b550:	f7ff ff96 	bl	800b480 <__sfp_lock_release>
 800b554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b55c:	6025      	str	r5, [r4, #0]
 800b55e:	61a5      	str	r5, [r4, #24]
 800b560:	2208      	movs	r2, #8
 800b562:	4629      	mov	r1, r5
 800b564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b568:	f7ff fc3c 	bl	800ade4 <memset>
 800b56c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b574:	4620      	mov	r0, r4
 800b576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b578:	3468      	adds	r4, #104	; 0x68
 800b57a:	e7d9      	b.n	800b530 <__sfp+0x1c>
 800b57c:	2104      	movs	r1, #4
 800b57e:	4638      	mov	r0, r7
 800b580:	f7ff ff62 	bl	800b448 <__sfmoreglue>
 800b584:	4604      	mov	r4, r0
 800b586:	6030      	str	r0, [r6, #0]
 800b588:	2800      	cmp	r0, #0
 800b58a:	d1d5      	bne.n	800b538 <__sfp+0x24>
 800b58c:	f7ff ff78 	bl	800b480 <__sfp_lock_release>
 800b590:	230c      	movs	r3, #12
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	e7ee      	b.n	800b574 <__sfp+0x60>
 800b596:	bf00      	nop
 800b598:	0800c638 	.word	0x0800c638
 800b59c:	ffff0001 	.word	0xffff0001

0800b5a0 <_fwalk_reent>:
 800b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	4688      	mov	r8, r1
 800b5a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5ac:	2700      	movs	r7, #0
 800b5ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b5b6:	d505      	bpl.n	800b5c4 <_fwalk_reent+0x24>
 800b5b8:	6824      	ldr	r4, [r4, #0]
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d1f7      	bne.n	800b5ae <_fwalk_reent+0xe>
 800b5be:	4638      	mov	r0, r7
 800b5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c4:	89ab      	ldrh	r3, [r5, #12]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d907      	bls.n	800b5da <_fwalk_reent+0x3a>
 800b5ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	d003      	beq.n	800b5da <_fwalk_reent+0x3a>
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	47c0      	blx	r8
 800b5d8:	4307      	orrs	r7, r0
 800b5da:	3568      	adds	r5, #104	; 0x68
 800b5dc:	e7e9      	b.n	800b5b2 <_fwalk_reent+0x12>

0800b5de <__retarget_lock_init_recursive>:
 800b5de:	4770      	bx	lr

0800b5e0 <__retarget_lock_acquire_recursive>:
 800b5e0:	4770      	bx	lr

0800b5e2 <__retarget_lock_release_recursive>:
 800b5e2:	4770      	bx	lr

0800b5e4 <__swhatbuf_r>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	460e      	mov	r6, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	2900      	cmp	r1, #0
 800b5ee:	b096      	sub	sp, #88	; 0x58
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	da08      	bge.n	800b608 <__swhatbuf_r+0x24>
 800b5f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	602a      	str	r2, [r5, #0]
 800b5fe:	061a      	lsls	r2, r3, #24
 800b600:	d410      	bmi.n	800b624 <__swhatbuf_r+0x40>
 800b602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b606:	e00e      	b.n	800b626 <__swhatbuf_r+0x42>
 800b608:	466a      	mov	r2, sp
 800b60a:	f000 fbb1 	bl	800bd70 <_fstat_r>
 800b60e:	2800      	cmp	r0, #0
 800b610:	dbf1      	blt.n	800b5f6 <__swhatbuf_r+0x12>
 800b612:	9a01      	ldr	r2, [sp, #4]
 800b614:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b618:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b61c:	425a      	negs	r2, r3
 800b61e:	415a      	adcs	r2, r3
 800b620:	602a      	str	r2, [r5, #0]
 800b622:	e7ee      	b.n	800b602 <__swhatbuf_r+0x1e>
 800b624:	2340      	movs	r3, #64	; 0x40
 800b626:	2000      	movs	r0, #0
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	b016      	add	sp, #88	; 0x58
 800b62c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b630 <__smakebuf_r>:
 800b630:	898b      	ldrh	r3, [r1, #12]
 800b632:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b634:	079d      	lsls	r5, r3, #30
 800b636:	4606      	mov	r6, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	d507      	bpl.n	800b64c <__smakebuf_r+0x1c>
 800b63c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	2301      	movs	r3, #1
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	b002      	add	sp, #8
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	ab01      	add	r3, sp, #4
 800b64e:	466a      	mov	r2, sp
 800b650:	f7ff ffc8 	bl	800b5e4 <__swhatbuf_r>
 800b654:	9900      	ldr	r1, [sp, #0]
 800b656:	4605      	mov	r5, r0
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff fc37 	bl	800aecc <_malloc_r>
 800b65e:	b948      	cbnz	r0, 800b674 <__smakebuf_r+0x44>
 800b660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b664:	059a      	lsls	r2, r3, #22
 800b666:	d4ef      	bmi.n	800b648 <__smakebuf_r+0x18>
 800b668:	f023 0303 	bic.w	r3, r3, #3
 800b66c:	f043 0302 	orr.w	r3, r3, #2
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	e7e3      	b.n	800b63c <__smakebuf_r+0xc>
 800b674:	4b0d      	ldr	r3, [pc, #52]	; (800b6ac <__smakebuf_r+0x7c>)
 800b676:	62b3      	str	r3, [r6, #40]	; 0x28
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	9b00      	ldr	r3, [sp, #0]
 800b684:	6163      	str	r3, [r4, #20]
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	6120      	str	r0, [r4, #16]
 800b68a:	b15b      	cbz	r3, 800b6a4 <__smakebuf_r+0x74>
 800b68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b690:	4630      	mov	r0, r6
 800b692:	f000 fb7f 	bl	800bd94 <_isatty_r>
 800b696:	b128      	cbz	r0, 800b6a4 <__smakebuf_r+0x74>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f023 0303 	bic.w	r3, r3, #3
 800b69e:	f043 0301 	orr.w	r3, r3, #1
 800b6a2:	81a3      	strh	r3, [r4, #12]
 800b6a4:	89a0      	ldrh	r0, [r4, #12]
 800b6a6:	4305      	orrs	r5, r0
 800b6a8:	81a5      	strh	r5, [r4, #12]
 800b6aa:	e7cd      	b.n	800b648 <__smakebuf_r+0x18>
 800b6ac:	0800b43d 	.word	0x0800b43d

0800b6b0 <__malloc_lock>:
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <__malloc_lock+0x8>)
 800b6b2:	f7ff bf95 	b.w	800b5e0 <__retarget_lock_acquire_recursive>
 800b6b6:	bf00      	nop
 800b6b8:	20000ec8 	.word	0x20000ec8

0800b6bc <__malloc_unlock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	; (800b6c4 <__malloc_unlock+0x8>)
 800b6be:	f7ff bf90 	b.w	800b5e2 <__retarget_lock_release_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	20000ec8 	.word	0x20000ec8

0800b6c8 <__sfputc_r>:
 800b6c8:	6893      	ldr	r3, [r2, #8]
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	b410      	push	{r4}
 800b6d0:	6093      	str	r3, [r2, #8]
 800b6d2:	da08      	bge.n	800b6e6 <__sfputc_r+0x1e>
 800b6d4:	6994      	ldr	r4, [r2, #24]
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	db01      	blt.n	800b6de <__sfputc_r+0x16>
 800b6da:	290a      	cmp	r1, #10
 800b6dc:	d103      	bne.n	800b6e6 <__sfputc_r+0x1e>
 800b6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e2:	f7ff bd05 	b.w	800b0f0 <__swbuf_r>
 800b6e6:	6813      	ldr	r3, [r2, #0]
 800b6e8:	1c58      	adds	r0, r3, #1
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	7019      	strb	r1, [r3, #0]
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <__sfputs_r>:
 800b6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	460f      	mov	r7, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	18d5      	adds	r5, r2, r3
 800b700:	42ac      	cmp	r4, r5
 800b702:	d101      	bne.n	800b708 <__sfputs_r+0x12>
 800b704:	2000      	movs	r0, #0
 800b706:	e007      	b.n	800b718 <__sfputs_r+0x22>
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	463a      	mov	r2, r7
 800b70e:	4630      	mov	r0, r6
 800b710:	f7ff ffda 	bl	800b6c8 <__sfputc_r>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d1f3      	bne.n	800b700 <__sfputs_r+0xa>
 800b718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b71c <_vfiprintf_r>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	460d      	mov	r5, r1
 800b722:	b09d      	sub	sp, #116	; 0x74
 800b724:	4614      	mov	r4, r2
 800b726:	4698      	mov	r8, r3
 800b728:	4606      	mov	r6, r0
 800b72a:	b118      	cbz	r0, 800b734 <_vfiprintf_r+0x18>
 800b72c:	6983      	ldr	r3, [r0, #24]
 800b72e:	b90b      	cbnz	r3, 800b734 <_vfiprintf_r+0x18>
 800b730:	f7ff feb8 	bl	800b4a4 <__sinit>
 800b734:	4b89      	ldr	r3, [pc, #548]	; (800b95c <_vfiprintf_r+0x240>)
 800b736:	429d      	cmp	r5, r3
 800b738:	d11b      	bne.n	800b772 <_vfiprintf_r+0x56>
 800b73a:	6875      	ldr	r5, [r6, #4]
 800b73c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b73e:	07d9      	lsls	r1, r3, #31
 800b740:	d405      	bmi.n	800b74e <_vfiprintf_r+0x32>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	059a      	lsls	r2, r3, #22
 800b746:	d402      	bmi.n	800b74e <_vfiprintf_r+0x32>
 800b748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b74a:	f7ff ff49 	bl	800b5e0 <__retarget_lock_acquire_recursive>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	071b      	lsls	r3, r3, #28
 800b752:	d501      	bpl.n	800b758 <_vfiprintf_r+0x3c>
 800b754:	692b      	ldr	r3, [r5, #16]
 800b756:	b9eb      	cbnz	r3, 800b794 <_vfiprintf_r+0x78>
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff fd1a 	bl	800b194 <__swsetup_r>
 800b760:	b1c0      	cbz	r0, 800b794 <_vfiprintf_r+0x78>
 800b762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b764:	07dc      	lsls	r4, r3, #31
 800b766:	d50e      	bpl.n	800b786 <_vfiprintf_r+0x6a>
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	b01d      	add	sp, #116	; 0x74
 800b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b772:	4b7b      	ldr	r3, [pc, #492]	; (800b960 <_vfiprintf_r+0x244>)
 800b774:	429d      	cmp	r5, r3
 800b776:	d101      	bne.n	800b77c <_vfiprintf_r+0x60>
 800b778:	68b5      	ldr	r5, [r6, #8]
 800b77a:	e7df      	b.n	800b73c <_vfiprintf_r+0x20>
 800b77c:	4b79      	ldr	r3, [pc, #484]	; (800b964 <_vfiprintf_r+0x248>)
 800b77e:	429d      	cmp	r5, r3
 800b780:	bf08      	it	eq
 800b782:	68f5      	ldreq	r5, [r6, #12]
 800b784:	e7da      	b.n	800b73c <_vfiprintf_r+0x20>
 800b786:	89ab      	ldrh	r3, [r5, #12]
 800b788:	0598      	lsls	r0, r3, #22
 800b78a:	d4ed      	bmi.n	800b768 <_vfiprintf_r+0x4c>
 800b78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b78e:	f7ff ff28 	bl	800b5e2 <__retarget_lock_release_recursive>
 800b792:	e7e9      	b.n	800b768 <_vfiprintf_r+0x4c>
 800b794:	2300      	movs	r3, #0
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	2320      	movs	r3, #32
 800b79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7a2:	2330      	movs	r3, #48	; 0x30
 800b7a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b968 <_vfiprintf_r+0x24c>
 800b7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7ac:	f04f 0901 	mov.w	r9, #1
 800b7b0:	4623      	mov	r3, r4
 800b7b2:	469a      	mov	sl, r3
 800b7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b8:	b10a      	cbz	r2, 800b7be <_vfiprintf_r+0xa2>
 800b7ba:	2a25      	cmp	r2, #37	; 0x25
 800b7bc:	d1f9      	bne.n	800b7b2 <_vfiprintf_r+0x96>
 800b7be:	ebba 0b04 	subs.w	fp, sl, r4
 800b7c2:	d00b      	beq.n	800b7dc <_vfiprintf_r+0xc0>
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff ff93 	bl	800b6f6 <__sfputs_r>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	f000 80aa 	beq.w	800b92a <_vfiprintf_r+0x20e>
 800b7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7d8:	445a      	add	r2, fp
 800b7da:	9209      	str	r2, [sp, #36]	; 0x24
 800b7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80a2 	beq.w	800b92a <_vfiprintf_r+0x20e>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f0:	f10a 0a01 	add.w	sl, sl, #1
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	9307      	str	r3, [sp, #28]
 800b7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7fc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7fe:	4654      	mov	r4, sl
 800b800:	2205      	movs	r2, #5
 800b802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b806:	4858      	ldr	r0, [pc, #352]	; (800b968 <_vfiprintf_r+0x24c>)
 800b808:	f7f4 fcf2 	bl	80001f0 <memchr>
 800b80c:	9a04      	ldr	r2, [sp, #16]
 800b80e:	b9d8      	cbnz	r0, 800b848 <_vfiprintf_r+0x12c>
 800b810:	06d1      	lsls	r1, r2, #27
 800b812:	bf44      	itt	mi
 800b814:	2320      	movmi	r3, #32
 800b816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b81a:	0713      	lsls	r3, r2, #28
 800b81c:	bf44      	itt	mi
 800b81e:	232b      	movmi	r3, #43	; 0x2b
 800b820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b824:	f89a 3000 	ldrb.w	r3, [sl]
 800b828:	2b2a      	cmp	r3, #42	; 0x2a
 800b82a:	d015      	beq.n	800b858 <_vfiprintf_r+0x13c>
 800b82c:	9a07      	ldr	r2, [sp, #28]
 800b82e:	4654      	mov	r4, sl
 800b830:	2000      	movs	r0, #0
 800b832:	f04f 0c0a 	mov.w	ip, #10
 800b836:	4621      	mov	r1, r4
 800b838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b83c:	3b30      	subs	r3, #48	; 0x30
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d94e      	bls.n	800b8e0 <_vfiprintf_r+0x1c4>
 800b842:	b1b0      	cbz	r0, 800b872 <_vfiprintf_r+0x156>
 800b844:	9207      	str	r2, [sp, #28]
 800b846:	e014      	b.n	800b872 <_vfiprintf_r+0x156>
 800b848:	eba0 0308 	sub.w	r3, r0, r8
 800b84c:	fa09 f303 	lsl.w	r3, r9, r3
 800b850:	4313      	orrs	r3, r2
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	46a2      	mov	sl, r4
 800b856:	e7d2      	b.n	800b7fe <_vfiprintf_r+0xe2>
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	1d19      	adds	r1, r3, #4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	9103      	str	r1, [sp, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	bfbb      	ittet	lt
 800b864:	425b      	neglt	r3, r3
 800b866:	f042 0202 	orrlt.w	r2, r2, #2
 800b86a:	9307      	strge	r3, [sp, #28]
 800b86c:	9307      	strlt	r3, [sp, #28]
 800b86e:	bfb8      	it	lt
 800b870:	9204      	strlt	r2, [sp, #16]
 800b872:	7823      	ldrb	r3, [r4, #0]
 800b874:	2b2e      	cmp	r3, #46	; 0x2e
 800b876:	d10c      	bne.n	800b892 <_vfiprintf_r+0x176>
 800b878:	7863      	ldrb	r3, [r4, #1]
 800b87a:	2b2a      	cmp	r3, #42	; 0x2a
 800b87c:	d135      	bne.n	800b8ea <_vfiprintf_r+0x1ce>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	1d1a      	adds	r2, r3, #4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	9203      	str	r2, [sp, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	bfb8      	it	lt
 800b88a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b88e:	3402      	adds	r4, #2
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b978 <_vfiprintf_r+0x25c>
 800b896:	7821      	ldrb	r1, [r4, #0]
 800b898:	2203      	movs	r2, #3
 800b89a:	4650      	mov	r0, sl
 800b89c:	f7f4 fca8 	bl	80001f0 <memchr>
 800b8a0:	b140      	cbz	r0, 800b8b4 <_vfiprintf_r+0x198>
 800b8a2:	2340      	movs	r3, #64	; 0x40
 800b8a4:	eba0 000a 	sub.w	r0, r0, sl
 800b8a8:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ac:	9b04      	ldr	r3, [sp, #16]
 800b8ae:	4303      	orrs	r3, r0
 800b8b0:	3401      	adds	r4, #1
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b8:	482c      	ldr	r0, [pc, #176]	; (800b96c <_vfiprintf_r+0x250>)
 800b8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8be:	2206      	movs	r2, #6
 800b8c0:	f7f4 fc96 	bl	80001f0 <memchr>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d03f      	beq.n	800b948 <_vfiprintf_r+0x22c>
 800b8c8:	4b29      	ldr	r3, [pc, #164]	; (800b970 <_vfiprintf_r+0x254>)
 800b8ca:	bb1b      	cbnz	r3, 800b914 <_vfiprintf_r+0x1f8>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	3307      	adds	r3, #7
 800b8d0:	f023 0307 	bic.w	r3, r3, #7
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	9303      	str	r3, [sp, #12]
 800b8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8da:	443b      	add	r3, r7
 800b8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b8de:	e767      	b.n	800b7b0 <_vfiprintf_r+0x94>
 800b8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e7a5      	b.n	800b836 <_vfiprintf_r+0x11a>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	3401      	adds	r4, #1
 800b8ee:	9305      	str	r3, [sp, #20]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	f04f 0c0a 	mov.w	ip, #10
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8fc:	3a30      	subs	r2, #48	; 0x30
 800b8fe:	2a09      	cmp	r2, #9
 800b900:	d903      	bls.n	800b90a <_vfiprintf_r+0x1ee>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0c5      	beq.n	800b892 <_vfiprintf_r+0x176>
 800b906:	9105      	str	r1, [sp, #20]
 800b908:	e7c3      	b.n	800b892 <_vfiprintf_r+0x176>
 800b90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b90e:	4604      	mov	r4, r0
 800b910:	2301      	movs	r3, #1
 800b912:	e7f0      	b.n	800b8f6 <_vfiprintf_r+0x1da>
 800b914:	ab03      	add	r3, sp, #12
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	462a      	mov	r2, r5
 800b91a:	4b16      	ldr	r3, [pc, #88]	; (800b974 <_vfiprintf_r+0x258>)
 800b91c:	a904      	add	r1, sp, #16
 800b91e:	4630      	mov	r0, r6
 800b920:	f3af 8000 	nop.w
 800b924:	4607      	mov	r7, r0
 800b926:	1c78      	adds	r0, r7, #1
 800b928:	d1d6      	bne.n	800b8d8 <_vfiprintf_r+0x1bc>
 800b92a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b92c:	07d9      	lsls	r1, r3, #31
 800b92e:	d405      	bmi.n	800b93c <_vfiprintf_r+0x220>
 800b930:	89ab      	ldrh	r3, [r5, #12]
 800b932:	059a      	lsls	r2, r3, #22
 800b934:	d402      	bmi.n	800b93c <_vfiprintf_r+0x220>
 800b936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b938:	f7ff fe53 	bl	800b5e2 <__retarget_lock_release_recursive>
 800b93c:	89ab      	ldrh	r3, [r5, #12]
 800b93e:	065b      	lsls	r3, r3, #25
 800b940:	f53f af12 	bmi.w	800b768 <_vfiprintf_r+0x4c>
 800b944:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b946:	e711      	b.n	800b76c <_vfiprintf_r+0x50>
 800b948:	ab03      	add	r3, sp, #12
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	462a      	mov	r2, r5
 800b94e:	4b09      	ldr	r3, [pc, #36]	; (800b974 <_vfiprintf_r+0x258>)
 800b950:	a904      	add	r1, sp, #16
 800b952:	4630      	mov	r0, r6
 800b954:	f000 f880 	bl	800ba58 <_printf_i>
 800b958:	e7e4      	b.n	800b924 <_vfiprintf_r+0x208>
 800b95a:	bf00      	nop
 800b95c:	0800c65c 	.word	0x0800c65c
 800b960:	0800c67c 	.word	0x0800c67c
 800b964:	0800c63c 	.word	0x0800c63c
 800b968:	0800c69c 	.word	0x0800c69c
 800b96c:	0800c6a6 	.word	0x0800c6a6
 800b970:	00000000 	.word	0x00000000
 800b974:	0800b6f7 	.word	0x0800b6f7
 800b978:	0800c6a2 	.word	0x0800c6a2

0800b97c <_printf_common>:
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b980:	4616      	mov	r6, r2
 800b982:	4699      	mov	r9, r3
 800b984:	688a      	ldr	r2, [r1, #8]
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b98c:	4293      	cmp	r3, r2
 800b98e:	bfb8      	it	lt
 800b990:	4613      	movlt	r3, r2
 800b992:	6033      	str	r3, [r6, #0]
 800b994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b998:	4607      	mov	r7, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	b10a      	cbz	r2, 800b9a2 <_printf_common+0x26>
 800b99e:	3301      	adds	r3, #1
 800b9a0:	6033      	str	r3, [r6, #0]
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	0699      	lsls	r1, r3, #26
 800b9a6:	bf42      	ittt	mi
 800b9a8:	6833      	ldrmi	r3, [r6, #0]
 800b9aa:	3302      	addmi	r3, #2
 800b9ac:	6033      	strmi	r3, [r6, #0]
 800b9ae:	6825      	ldr	r5, [r4, #0]
 800b9b0:	f015 0506 	ands.w	r5, r5, #6
 800b9b4:	d106      	bne.n	800b9c4 <_printf_common+0x48>
 800b9b6:	f104 0a19 	add.w	sl, r4, #25
 800b9ba:	68e3      	ldr	r3, [r4, #12]
 800b9bc:	6832      	ldr	r2, [r6, #0]
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	42ab      	cmp	r3, r5
 800b9c2:	dc26      	bgt.n	800ba12 <_printf_common+0x96>
 800b9c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9c8:	1e13      	subs	r3, r2, #0
 800b9ca:	6822      	ldr	r2, [r4, #0]
 800b9cc:	bf18      	it	ne
 800b9ce:	2301      	movne	r3, #1
 800b9d0:	0692      	lsls	r2, r2, #26
 800b9d2:	d42b      	bmi.n	800ba2c <_printf_common+0xb0>
 800b9d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4638      	mov	r0, r7
 800b9dc:	47c0      	blx	r8
 800b9de:	3001      	adds	r0, #1
 800b9e0:	d01e      	beq.n	800ba20 <_printf_common+0xa4>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	68e5      	ldr	r5, [r4, #12]
 800b9e6:	6832      	ldr	r2, [r6, #0]
 800b9e8:	f003 0306 	and.w	r3, r3, #6
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	bf08      	it	eq
 800b9f0:	1aad      	subeq	r5, r5, r2
 800b9f2:	68a3      	ldr	r3, [r4, #8]
 800b9f4:	6922      	ldr	r2, [r4, #16]
 800b9f6:	bf0c      	ite	eq
 800b9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9fc:	2500      	movne	r5, #0
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	bfc4      	itt	gt
 800ba02:	1a9b      	subgt	r3, r3, r2
 800ba04:	18ed      	addgt	r5, r5, r3
 800ba06:	2600      	movs	r6, #0
 800ba08:	341a      	adds	r4, #26
 800ba0a:	42b5      	cmp	r5, r6
 800ba0c:	d11a      	bne.n	800ba44 <_printf_common+0xc8>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	e008      	b.n	800ba24 <_printf_common+0xa8>
 800ba12:	2301      	movs	r3, #1
 800ba14:	4652      	mov	r2, sl
 800ba16:	4649      	mov	r1, r9
 800ba18:	4638      	mov	r0, r7
 800ba1a:	47c0      	blx	r8
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	d103      	bne.n	800ba28 <_printf_common+0xac>
 800ba20:	f04f 30ff 	mov.w	r0, #4294967295
 800ba24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba28:	3501      	adds	r5, #1
 800ba2a:	e7c6      	b.n	800b9ba <_printf_common+0x3e>
 800ba2c:	18e1      	adds	r1, r4, r3
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	2030      	movs	r0, #48	; 0x30
 800ba32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba36:	4422      	add	r2, r4
 800ba38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba40:	3302      	adds	r3, #2
 800ba42:	e7c7      	b.n	800b9d4 <_printf_common+0x58>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4622      	mov	r2, r4
 800ba48:	4649      	mov	r1, r9
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	47c0      	blx	r8
 800ba4e:	3001      	adds	r0, #1
 800ba50:	d0e6      	beq.n	800ba20 <_printf_common+0xa4>
 800ba52:	3601      	adds	r6, #1
 800ba54:	e7d9      	b.n	800ba0a <_printf_common+0x8e>
	...

0800ba58 <_printf_i>:
 800ba58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba5c:	7e0f      	ldrb	r7, [r1, #24]
 800ba5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba60:	2f78      	cmp	r7, #120	; 0x78
 800ba62:	4691      	mov	r9, r2
 800ba64:	4680      	mov	r8, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	469a      	mov	sl, r3
 800ba6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba6e:	d807      	bhi.n	800ba80 <_printf_i+0x28>
 800ba70:	2f62      	cmp	r7, #98	; 0x62
 800ba72:	d80a      	bhi.n	800ba8a <_printf_i+0x32>
 800ba74:	2f00      	cmp	r7, #0
 800ba76:	f000 80d8 	beq.w	800bc2a <_printf_i+0x1d2>
 800ba7a:	2f58      	cmp	r7, #88	; 0x58
 800ba7c:	f000 80a3 	beq.w	800bbc6 <_printf_i+0x16e>
 800ba80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba88:	e03a      	b.n	800bb00 <_printf_i+0xa8>
 800ba8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba8e:	2b15      	cmp	r3, #21
 800ba90:	d8f6      	bhi.n	800ba80 <_printf_i+0x28>
 800ba92:	a101      	add	r1, pc, #4	; (adr r1, 800ba98 <_printf_i+0x40>)
 800ba94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba98:	0800baf1 	.word	0x0800baf1
 800ba9c:	0800bb05 	.word	0x0800bb05
 800baa0:	0800ba81 	.word	0x0800ba81
 800baa4:	0800ba81 	.word	0x0800ba81
 800baa8:	0800ba81 	.word	0x0800ba81
 800baac:	0800ba81 	.word	0x0800ba81
 800bab0:	0800bb05 	.word	0x0800bb05
 800bab4:	0800ba81 	.word	0x0800ba81
 800bab8:	0800ba81 	.word	0x0800ba81
 800babc:	0800ba81 	.word	0x0800ba81
 800bac0:	0800ba81 	.word	0x0800ba81
 800bac4:	0800bc11 	.word	0x0800bc11
 800bac8:	0800bb35 	.word	0x0800bb35
 800bacc:	0800bbf3 	.word	0x0800bbf3
 800bad0:	0800ba81 	.word	0x0800ba81
 800bad4:	0800ba81 	.word	0x0800ba81
 800bad8:	0800bc33 	.word	0x0800bc33
 800badc:	0800ba81 	.word	0x0800ba81
 800bae0:	0800bb35 	.word	0x0800bb35
 800bae4:	0800ba81 	.word	0x0800ba81
 800bae8:	0800ba81 	.word	0x0800ba81
 800baec:	0800bbfb 	.word	0x0800bbfb
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	1d1a      	adds	r2, r3, #4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	602a      	str	r2, [r5, #0]
 800baf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bafc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb00:	2301      	movs	r3, #1
 800bb02:	e0a3      	b.n	800bc4c <_printf_i+0x1f4>
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	6829      	ldr	r1, [r5, #0]
 800bb08:	0606      	lsls	r6, r0, #24
 800bb0a:	f101 0304 	add.w	r3, r1, #4
 800bb0e:	d50a      	bpl.n	800bb26 <_printf_i+0xce>
 800bb10:	680e      	ldr	r6, [r1, #0]
 800bb12:	602b      	str	r3, [r5, #0]
 800bb14:	2e00      	cmp	r6, #0
 800bb16:	da03      	bge.n	800bb20 <_printf_i+0xc8>
 800bb18:	232d      	movs	r3, #45	; 0x2d
 800bb1a:	4276      	negs	r6, r6
 800bb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb20:	485e      	ldr	r0, [pc, #376]	; (800bc9c <_printf_i+0x244>)
 800bb22:	230a      	movs	r3, #10
 800bb24:	e019      	b.n	800bb5a <_printf_i+0x102>
 800bb26:	680e      	ldr	r6, [r1, #0]
 800bb28:	602b      	str	r3, [r5, #0]
 800bb2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb2e:	bf18      	it	ne
 800bb30:	b236      	sxthne	r6, r6
 800bb32:	e7ef      	b.n	800bb14 <_printf_i+0xbc>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	6820      	ldr	r0, [r4, #0]
 800bb38:	1d19      	adds	r1, r3, #4
 800bb3a:	6029      	str	r1, [r5, #0]
 800bb3c:	0601      	lsls	r1, r0, #24
 800bb3e:	d501      	bpl.n	800bb44 <_printf_i+0xec>
 800bb40:	681e      	ldr	r6, [r3, #0]
 800bb42:	e002      	b.n	800bb4a <_printf_i+0xf2>
 800bb44:	0646      	lsls	r6, r0, #25
 800bb46:	d5fb      	bpl.n	800bb40 <_printf_i+0xe8>
 800bb48:	881e      	ldrh	r6, [r3, #0]
 800bb4a:	4854      	ldr	r0, [pc, #336]	; (800bc9c <_printf_i+0x244>)
 800bb4c:	2f6f      	cmp	r7, #111	; 0x6f
 800bb4e:	bf0c      	ite	eq
 800bb50:	2308      	moveq	r3, #8
 800bb52:	230a      	movne	r3, #10
 800bb54:	2100      	movs	r1, #0
 800bb56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb5a:	6865      	ldr	r5, [r4, #4]
 800bb5c:	60a5      	str	r5, [r4, #8]
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	bfa2      	ittt	ge
 800bb62:	6821      	ldrge	r1, [r4, #0]
 800bb64:	f021 0104 	bicge.w	r1, r1, #4
 800bb68:	6021      	strge	r1, [r4, #0]
 800bb6a:	b90e      	cbnz	r6, 800bb70 <_printf_i+0x118>
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	d04d      	beq.n	800bc0c <_printf_i+0x1b4>
 800bb70:	4615      	mov	r5, r2
 800bb72:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb76:	fb03 6711 	mls	r7, r3, r1, r6
 800bb7a:	5dc7      	ldrb	r7, [r0, r7]
 800bb7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb80:	4637      	mov	r7, r6
 800bb82:	42bb      	cmp	r3, r7
 800bb84:	460e      	mov	r6, r1
 800bb86:	d9f4      	bls.n	800bb72 <_printf_i+0x11a>
 800bb88:	2b08      	cmp	r3, #8
 800bb8a:	d10b      	bne.n	800bba4 <_printf_i+0x14c>
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	07de      	lsls	r6, r3, #31
 800bb90:	d508      	bpl.n	800bba4 <_printf_i+0x14c>
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	6861      	ldr	r1, [r4, #4]
 800bb96:	4299      	cmp	r1, r3
 800bb98:	bfde      	ittt	le
 800bb9a:	2330      	movle	r3, #48	; 0x30
 800bb9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bba4:	1b52      	subs	r2, r2, r5
 800bba6:	6122      	str	r2, [r4, #16]
 800bba8:	f8cd a000 	str.w	sl, [sp]
 800bbac:	464b      	mov	r3, r9
 800bbae:	aa03      	add	r2, sp, #12
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f7ff fee2 	bl	800b97c <_printf_common>
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d14c      	bne.n	800bc56 <_printf_i+0x1fe>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	b004      	add	sp, #16
 800bbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc6:	4835      	ldr	r0, [pc, #212]	; (800bc9c <_printf_i+0x244>)
 800bbc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bbcc:	6829      	ldr	r1, [r5, #0]
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bbd4:	6029      	str	r1, [r5, #0]
 800bbd6:	061d      	lsls	r5, r3, #24
 800bbd8:	d514      	bpl.n	800bc04 <_printf_i+0x1ac>
 800bbda:	07df      	lsls	r7, r3, #31
 800bbdc:	bf44      	itt	mi
 800bbde:	f043 0320 	orrmi.w	r3, r3, #32
 800bbe2:	6023      	strmi	r3, [r4, #0]
 800bbe4:	b91e      	cbnz	r6, 800bbee <_printf_i+0x196>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	f023 0320 	bic.w	r3, r3, #32
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	2310      	movs	r3, #16
 800bbf0:	e7b0      	b.n	800bb54 <_printf_i+0xfc>
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	f043 0320 	orr.w	r3, r3, #32
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	2378      	movs	r3, #120	; 0x78
 800bbfc:	4828      	ldr	r0, [pc, #160]	; (800bca0 <_printf_i+0x248>)
 800bbfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc02:	e7e3      	b.n	800bbcc <_printf_i+0x174>
 800bc04:	0659      	lsls	r1, r3, #25
 800bc06:	bf48      	it	mi
 800bc08:	b2b6      	uxthmi	r6, r6
 800bc0a:	e7e6      	b.n	800bbda <_printf_i+0x182>
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	e7bb      	b.n	800bb88 <_printf_i+0x130>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	6826      	ldr	r6, [r4, #0]
 800bc14:	6961      	ldr	r1, [r4, #20]
 800bc16:	1d18      	adds	r0, r3, #4
 800bc18:	6028      	str	r0, [r5, #0]
 800bc1a:	0635      	lsls	r5, r6, #24
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	d501      	bpl.n	800bc24 <_printf_i+0x1cc>
 800bc20:	6019      	str	r1, [r3, #0]
 800bc22:	e002      	b.n	800bc2a <_printf_i+0x1d2>
 800bc24:	0670      	lsls	r0, r6, #25
 800bc26:	d5fb      	bpl.n	800bc20 <_printf_i+0x1c8>
 800bc28:	8019      	strh	r1, [r3, #0]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	4615      	mov	r5, r2
 800bc30:	e7ba      	b.n	800bba8 <_printf_i+0x150>
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	1d1a      	adds	r2, r3, #4
 800bc36:	602a      	str	r2, [r5, #0]
 800bc38:	681d      	ldr	r5, [r3, #0]
 800bc3a:	6862      	ldr	r2, [r4, #4]
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f7f4 fad6 	bl	80001f0 <memchr>
 800bc44:	b108      	cbz	r0, 800bc4a <_printf_i+0x1f2>
 800bc46:	1b40      	subs	r0, r0, r5
 800bc48:	6060      	str	r0, [r4, #4]
 800bc4a:	6863      	ldr	r3, [r4, #4]
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc54:	e7a8      	b.n	800bba8 <_printf_i+0x150>
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	462a      	mov	r2, r5
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	47d0      	blx	sl
 800bc60:	3001      	adds	r0, #1
 800bc62:	d0ab      	beq.n	800bbbc <_printf_i+0x164>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	079b      	lsls	r3, r3, #30
 800bc68:	d413      	bmi.n	800bc92 <_printf_i+0x23a>
 800bc6a:	68e0      	ldr	r0, [r4, #12]
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	4298      	cmp	r0, r3
 800bc70:	bfb8      	it	lt
 800bc72:	4618      	movlt	r0, r3
 800bc74:	e7a4      	b.n	800bbc0 <_printf_i+0x168>
 800bc76:	2301      	movs	r3, #1
 800bc78:	4632      	mov	r2, r6
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	47d0      	blx	sl
 800bc80:	3001      	adds	r0, #1
 800bc82:	d09b      	beq.n	800bbbc <_printf_i+0x164>
 800bc84:	3501      	adds	r5, #1
 800bc86:	68e3      	ldr	r3, [r4, #12]
 800bc88:	9903      	ldr	r1, [sp, #12]
 800bc8a:	1a5b      	subs	r3, r3, r1
 800bc8c:	42ab      	cmp	r3, r5
 800bc8e:	dcf2      	bgt.n	800bc76 <_printf_i+0x21e>
 800bc90:	e7eb      	b.n	800bc6a <_printf_i+0x212>
 800bc92:	2500      	movs	r5, #0
 800bc94:	f104 0619 	add.w	r6, r4, #25
 800bc98:	e7f5      	b.n	800bc86 <_printf_i+0x22e>
 800bc9a:	bf00      	nop
 800bc9c:	0800c6ad 	.word	0x0800c6ad
 800bca0:	0800c6be 	.word	0x0800c6be

0800bca4 <__sread>:
 800bca4:	b510      	push	{r4, lr}
 800bca6:	460c      	mov	r4, r1
 800bca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcac:	f000 f894 	bl	800bdd8 <_read_r>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	bfab      	itete	ge
 800bcb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcb6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcb8:	181b      	addge	r3, r3, r0
 800bcba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcbe:	bfac      	ite	ge
 800bcc0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcc2:	81a3      	strhlt	r3, [r4, #12]
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <__swrite>:
 800bcc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcca:	461f      	mov	r7, r3
 800bccc:	898b      	ldrh	r3, [r1, #12]
 800bcce:	05db      	lsls	r3, r3, #23
 800bcd0:	4605      	mov	r5, r0
 800bcd2:	460c      	mov	r4, r1
 800bcd4:	4616      	mov	r6, r2
 800bcd6:	d505      	bpl.n	800bce4 <__swrite+0x1e>
 800bcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcdc:	2302      	movs	r3, #2
 800bcde:	2200      	movs	r2, #0
 800bce0:	f000 f868 	bl	800bdb4 <_lseek_r>
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcee:	81a3      	strh	r3, [r4, #12]
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfa:	f000 b817 	b.w	800bd2c <_write_r>

0800bcfe <__sseek>:
 800bcfe:	b510      	push	{r4, lr}
 800bd00:	460c      	mov	r4, r1
 800bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd06:	f000 f855 	bl	800bdb4 <_lseek_r>
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	bf15      	itete	ne
 800bd10:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd1a:	81a3      	strheq	r3, [r4, #12]
 800bd1c:	bf18      	it	ne
 800bd1e:	81a3      	strhne	r3, [r4, #12]
 800bd20:	bd10      	pop	{r4, pc}

0800bd22 <__sclose>:
 800bd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd26:	f000 b813 	b.w	800bd50 <_close_r>
	...

0800bd2c <_write_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	; (800bd4c <_write_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 fa19 	bl	8002172 <_write>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_write_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_write_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20000ecc 	.word	0x20000ecc

0800bd50 <_close_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_close_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f6 fa25 	bl	80021aa <_close>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_close_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_close_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20000ecc 	.word	0x20000ecc

0800bd70 <_fstat_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	; (800bd90 <_fstat_r+0x20>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f6 fa20 	bl	80021c2 <_fstat>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_fstat_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_fstat_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000ecc 	.word	0x20000ecc

0800bd94 <_isatty_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d06      	ldr	r5, [pc, #24]	; (800bdb0 <_isatty_r+0x1c>)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	f7f6 fa1f 	bl	80021e2 <_isatty>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_isatty_r+0x1a>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_isatty_r+0x1a>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	20000ecc 	.word	0x20000ecc

0800bdb4 <_lseek_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	; (800bdd4 <_lseek_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7f6 fa18 	bl	80021f8 <_lseek>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_lseek_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_lseek_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20000ecc 	.word	0x20000ecc

0800bdd8 <_read_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	; (800bdf8 <_read_r+0x20>)
 800bddc:	4604      	mov	r4, r0
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	2200      	movs	r2, #0
 800bde4:	602a      	str	r2, [r5, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f7f6 f9a6 	bl	8002138 <_read>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_read_r+0x1e>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_read_r+0x1e>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	20000ecc 	.word	0x20000ecc

0800bdfc <_init>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr

0800be08 <_fini>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr
