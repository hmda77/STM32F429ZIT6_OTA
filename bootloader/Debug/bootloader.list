
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b8  0800b4b8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4c0  0800b4c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000a20  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ab4  20000ab4  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f7c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef4  00000000  00000000  00045040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  00049f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c10  00000000  00000000  0004bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aea0  00000000  00000000  0004d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000275a4  00000000  00000000  000787e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed33b  00000000  00000000  0009fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018d0c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087e4  00000000  00000000  0018d118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aea4 	.word	0x0800aea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800aea4 	.word	0x0800aea4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 fa1d 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f85f 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 faf9 	bl	8000b98 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f8c7 	bl	8000738 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f8d9 	bl	8000760 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 faa3 	bl	8000af8 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f907 	bl	80007c4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f945 	bl	8000844 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9c3 	bl	8000944 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 f9f7 	bl	80009b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 fa6f 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f009 f919 	bl	80097fc <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa41 	bl	8000a50 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xb0>)
 80005d6:	f001 ffa1 	bl	800251c <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <main+0xb4>)
 80005e2:	f009 fd3b 	bl	800a05c <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <main+0xb8>)
 80005e8:	607b      	str	r3, [r7, #4]

  switch(cfg->reboot_cause)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f2:	d00c      	beq.n	800060e <main+0x7a>
 80005f4:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 80005f8:	d017      	beq.n	800062a <main+0x96>
 80005fa:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 80005fe:	d818      	bhi.n	8000632 <main+0x9e>
 8000600:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 8000604:	d007      	beq.n	8000616 <main+0x82>
 8000606:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 800060a:	d00a      	beq.n	8000622 <main+0x8e>
 800060c:	e011      	b.n	8000632 <main+0x9e>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\n, No Configuration was found\r\n");
 800060e:	4810      	ldr	r0, [pc, #64]	; (8000650 <main+0xbc>)
 8000610:	f009 fdaa 	bl	800a168 <puts>
		  while(1){
 8000614:	e7fe      	b.n	8000614 <main+0x80>
	  }
	  break;

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot, Validate Application...\r\n");
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0xc0>)
 8000618:	f009 fda6 	bl	800a168 <puts>
		  validate_app();
 800061c:	f000 fc12 	bl	8000e44 <validate_app>
	  }
	  break;
 8000620:	e007      	b.n	8000632 <main+0x9e>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0xc4>)
 8000624:	f009 fda0 	bl	800a168 <puts>
//		  update_application();
	  }
	  break;
 8000628:	e003      	b.n	8000632 <main+0x9e>

	  case OTA_LOAD_PREV_APP:
	  {
		  printf("Update Unsuccessful, Back to previous App if Available\r\n");
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <main+0xc8>)
 800062c:	f009 fd9c 	bl	800a168 <puts>
	  }
	  break;
 8000630:	bf00      	nop
  }


  HAL_Delay(2000);
 8000632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000636:	f001 fa11 	bl	8001a5c <HAL_Delay>
  go_to_application();
 800063a:	f000 fbcf 	bl	8000ddc <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800063e:	f009 f903 	bl	8009848 <MX_USB_HOST_Process>
 8000642:	e7fc      	b.n	800063e <main+0xaa>
 8000644:	40021800 	.word	0x40021800
 8000648:	0800aebc 	.word	0x0800aebc
 800064c:	08010000 	.word	0x08010000
 8000650:	0800aedc 	.word	0x0800aedc
 8000654:	0800af0c 	.word	0x0800af0c
 8000658:	0800af34 	.word	0x0800af34
 800065c:	0800af50 	.word	0x0800af50

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f009 fc0c 	bl	8009e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a28      	ldr	r2, [pc, #160]	; (8000730 <SystemClock_Config+0xd0>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd4>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f862 	bl	80047b4 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f6:	f000 fb9f 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2102      	movs	r1, #2
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fac3 	bl	8004ca4 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000724:	f000 fb88 	bl	8000e38 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_CRC_Init+0x20>)
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <MX_CRC_Init+0x24>)
 8000740:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_CRC_Init+0x20>)
 8000744:	f001 fa90 	bl	8001c68 <HAL_CRC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800074e:	f000 fb73 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000b0 	.word	0x200000b0
 800075c:	40023000 	.word	0x40023000

08000760 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <MX_DMA2D_Init+0x60>)
 8000768:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_DMA2D_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_DMA2D_Init+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_DMA2D_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_DMA2D_Init+0x5c>)
 8000796:	f001 fa83 	bl	8001ca0 <HAL_DMA2D_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007a0:	f000 fb4a 	bl	8000e38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007a4:	2101      	movs	r1, #1
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_DMA2D_Init+0x5c>)
 80007a8:	f001 fbd4 	bl	8001f54 <HAL_DMA2D_ConfigLayer>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007b2:	f000 fb41 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	4002b000 	.word	0x4002b000

080007c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C3_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C3_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C3_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C3_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C3_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C3_Init+0x74>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_I2C3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_I2C3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_I2C3_Init+0x74>)
 8000802:	f003 faaf 	bl	8003d64 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 fb14 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C3_Init+0x74>)
 8000814:	f003 fbea 	bl	8003fec <HAL_I2CEx_ConfigAnalogFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 fb0b 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C3_Init+0x74>)
 8000826:	f003 fc1d 	bl	8004064 <HAL_I2CEx_ConfigDigitalFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 fb02 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000f8 	.word	0x200000f8
 800083c:	40005c00 	.word	0x40005c00
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2234      	movs	r2, #52	; 0x34
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f009 fb1b 	bl	8009e8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000856:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_LTDC_Init+0xf8>)
 8000858:	4a39      	ldr	r2, [pc, #228]	; (8000940 <MX_LTDC_Init+0xfc>)
 800085a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800085c:	4b37      	ldr	r3, [pc, #220]	; (800093c <MX_LTDC_Init+0xf8>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000862:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_LTDC_Init+0xf8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <MX_LTDC_Init+0xf8>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <MX_LTDC_Init+0xf8>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_LTDC_Init+0xf8>)
 8000876:	2209      	movs	r2, #9
 8000878:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_LTDC_Init+0xf8>)
 800087c:	2201      	movs	r2, #1
 800087e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_LTDC_Init+0xf8>)
 8000882:	221d      	movs	r2, #29
 8000884:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_LTDC_Init+0xf8>)
 8000888:	2203      	movs	r2, #3
 800088a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_LTDC_Init+0xf8>)
 800088e:	f240 120d 	movw	r2, #269	; 0x10d
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_LTDC_Init+0xf8>)
 8000896:	f240 1243 	movw	r2, #323	; 0x143
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_LTDC_Init+0xf8>)
 800089e:	f240 1217 	movw	r2, #279	; 0x117
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_LTDC_Init+0xf8>)
 80008a6:	f240 1247 	movw	r2, #327	; 0x147
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_LTDC_Init+0xf8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008b4:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_LTDC_Init+0xf8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_LTDC_Init+0xf8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008c4:	481d      	ldr	r0, [pc, #116]	; (800093c <MX_LTDC_Init+0xf8>)
 80008c6:	f003 fc0d 	bl	80040e4 <HAL_LTDC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 fab2 	bl	8000e38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008d8:	23f0      	movs	r3, #240	; 0xf0
 80008da:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008e4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008e6:	2302      	movs	r3, #2
 80008e8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008f8:	2307      	movs	r3, #7
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008fc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000902:	23f0      	movs	r3, #240	; 0xf0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000906:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_LTDC_Init+0xf8>)
 8000926:	f003 fd6f 	bl	8004408 <HAL_LTDC_ConfigLayer>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000930:	f000 fa82 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3738      	adds	r7, #56	; 0x38
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000014c 	.word	0x2000014c
 8000940:	40016800 	.word	0x40016800

08000944 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_SPI5_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	; (80009ac <MX_SPI5_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_SPI5_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI5_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000978:	2218      	movs	r2, #24
 800097a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_SPI5_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_SPI5_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000990:	220a      	movs	r2, #10
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_SPI5_Init+0x64>)
 8000996:	f004 fdcb 	bl	8005530 <HAL_SPI_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 fa4a 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200001f4 	.word	0x200001f4
 80009ac:	40015000 	.word	0x40015000

080009b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <MX_TIM1_Init+0x9c>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_TIM1_Init+0x98>)
 80009fa:	f004 fe22 	bl	8005642 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 fa18 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM1_Init+0x98>)
 8000a16:	f004 ffdb 	bl	80059d0 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a20:	f000 fa0a 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM1_Init+0x98>)
 8000a32:	f005 f9f7 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a3c:	f000 f9fc 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000024c 	.word	0x2000024c
 8000a4c:	40010000 	.word	0x40010000

08000a50 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <MX_UART5_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_UART5_Init+0x4c>)
 8000a88:	f005 fa5c 	bl	8005f44 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a92:	f000 f9d1 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000294 	.word	0x20000294
 8000aa0:	40005000 	.word	0x40005000

08000aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART1_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000adc:	f005 fa32 	bl	8005f44 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f9a7 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200002d8 	.word	0x200002d8
 8000af4:	40011000 	.word	0x40011000

08000af8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b12:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <MX_FMC_Init+0x9c>)
 8000b14:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b2a:	2210      	movs	r2, #16
 8000b2c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b36:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b3a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_FMC_Init+0x98>)
 8000b7a:	f004 fca5 	bl	80054c8 <HAL_SDRAM_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b84:	f000 f958 	bl	8000e38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000031c 	.word	0x2000031c
 8000b94:	a0000140 	.word	0xa0000140

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	4b7b      	ldr	r3, [pc, #492]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a7a      	ldr	r2, [pc, #488]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	623b      	str	r3, [r7, #32]
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	4b74      	ldr	r3, [pc, #464]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a73      	ldr	r2, [pc, #460]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b71      	ldr	r3, [pc, #452]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b6d      	ldr	r3, [pc, #436]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a6c      	ldr	r2, [pc, #432]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b6a      	ldr	r3, [pc, #424]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a65      	ldr	r2, [pc, #404]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b63      	ldr	r3, [pc, #396]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b5f      	ldr	r3, [pc, #380]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a57      	ldr	r2, [pc, #348]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a50      	ldr	r2, [pc, #320]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a49      	ldr	r2, [pc, #292]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <MX_GPIO_Init+0x208>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2116      	movs	r1, #22
 8000c92:	4844      	ldr	r0, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x20c>)
 8000c94:	f001 fc42 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4842      	ldr	r0, [pc, #264]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000c9e:	f001 fc3d 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ca8:	4840      	ldr	r0, [pc, #256]	; (8000dac <MX_GPIO_Init+0x214>)
 8000caa:	f001 fc37 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cb4:	483e      	ldr	r0, [pc, #248]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000cb6:	f001 fc31 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cba:	2316      	movs	r3, #22
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4834      	ldr	r0, [pc, #208]	; (8000da4 <MX_GPIO_Init+0x20c>)
 8000cd2:	f001 fa77 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cd6:	f248 0307 	movw	r3, #32775	; 0x8007
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cdc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	482e      	ldr	r0, [pc, #184]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000cee:	f001 fa69 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4827      	ldr	r0, [pc, #156]	; (8000da8 <MX_GPIO_Init+0x210>)
 8000d0a:	f001 fa5b 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d0e:	2320      	movs	r3, #32
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d12:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <MX_GPIO_Init+0x20c>)
 8000d24:	f001 fa4e 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481e      	ldr	r0, [pc, #120]	; (8000db4 <MX_GPIO_Init+0x21c>)
 8000d3c:	f001 fa42 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4815      	ldr	r0, [pc, #84]	; (8000dac <MX_GPIO_Init+0x214>)
 8000d56:	f001 fa35 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_GPIO_Init+0x214>)
 8000d74:	f001 fa26 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_GPIO_Init+0x218>)
 8000d92:	f001 fa17 	bl	80021c4 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40020400 	.word	0x40020400

08000db8 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dc0:	1d39      	adds	r1, r7, #4
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <__io_putchar+0x20>)
 8000dca:	f005 f908 	bl	8005fde <HAL_UART_Transmit>
	return ch;
 8000dce:	687b      	ldr	r3, [r7, #4]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002d8 	.word	0x200002d8

08000ddc <go_to_application>:

static void go_to_application (void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000de2:	4809      	ldr	r0, [pc, #36]	; (8000e08 <go_to_application+0x2c>)
 8000de4:	f009 f9c0 	bl	800a168 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08040000 + 4));
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <go_to_application+0x30>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (0x08040000)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <go_to_application+0x34>)
 8000df6:	f001 fb91 	bl	800251c <HAL_GPIO_WritePin>

	app_reset_handler();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4798      	blx	r3
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	0800af88 	.word	0x0800af88
 8000e0c:	08040004 	.word	0x08040004
 8000e10:	40021800 	.word	0x40021800

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fdf9 	bl	8001a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40001000 	.word	0x40001000

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <validate_app>:

/**
  * @brief Validate application
  * @retval none
  */
void validate_app(){
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0

	// Read Configuration
	OTA_GNRL_CFG_ cfg;
	memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <validate_app+0x68>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	463c      	mov	r4, r7
 8000e50:	461d      	mov	r5, r3
 8000e52:	6828      	ldr	r0, [r5, #0]
 8000e54:	6869      	ldr	r1, [r5, #4]
 8000e56:	68aa      	ldr	r2, [r5, #8]
 8000e58:	68eb      	ldr	r3, [r5, #12]
 8000e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5c:	6928      	ldr	r0, [r5, #16]
 8000e5e:	6969      	ldr	r1, [r5, #20]
 8000e60:	c403      	stmia	r4!, {r0, r1}
 8000e62:	8b2b      	ldrh	r3, [r5, #24]
 8000e64:	7eaa      	ldrb	r2, [r5, #26]
 8000e66:	8023      	strh	r3, [r4, #0]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	70a3      	strb	r3, [r4, #2]

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f001 f902 	bl	8002078 <FLASH_WaitForLastOperation>

	uint32_t cal_data_crc = ota_calcCRC((uint8_t *) OTA_APP_FLASH_ADDR, cfg.slot_table.fw_size);
 8000e74:	f8d7 3007 	ldr.w	r3, [r7, #7]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <validate_app+0x6c>)
 8000e7c:	f000 f81c 	bl	8000eb8 <ota_calcCRC>
 8000e80:	61f8      	str	r0, [r7, #28]


	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	f001 f8f7 	bl	8002078 <FLASH_WaitForLastOperation>

	// Verify the CRC
	if( cal_data_crc != cfg.slot_table.fw_crc)
 8000e8a:	f8d7 300b 	ldr.w	r3, [r7, #11]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d007      	beq.n	8000ea4 <validate_app+0x60>
	{
		printf("Error, CRC_calc = [0x%08lx], Config_CRC = [0x%08lx]\r\n HALT!", cal_data_crc, cfg.slot_table.fw_crc);
 8000e94:	f8d7 300b 	ldr.w	r3, [r7, #11]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	69f9      	ldr	r1, [r7, #28]
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <validate_app+0x70>)
 8000e9e:	f009 f8dd 	bl	800a05c <iprintf>
		while(1);
 8000ea2:	e7fe      	b.n	8000ea2 <validate_app+0x5e>
	}

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	08020000 	.word	0x08020000
 8000eb4:	0800afa8 	.word	0x0800afa8

08000eb8 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e014      	b.n	8000ef8 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	0e1b      	lsrs	r3, r3, #24
 8000ed2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	4053      	eors	r3, r2
 8000ee0:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	021a      	lsls	r2, r3, #8
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4909      	ldr	r1, [pc, #36]	; (8000f10 <ota_calcCRC+0x58>)
 8000eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eee:	4053      	eors	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3e6      	bcc.n	8000ece <ota_calcCRC+0x16>
    }
    return Checksum;
 8000f00:	697b      	ldr	r3, [r7, #20]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	0800b008 	.word	0x0800b008

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_CRC_MspInit+0x3c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10d      	bne.n	8000f92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_CRC_MspInit+0x40>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <HAL_CRC_MspInit+0x40>)
 8000f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_CRC_MspInit+0x40>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023000 	.word	0x40023000
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_DMA2D_MspInit+0x48>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d115      	bne.n	8000fe6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_DMA2D_MspInit+0x4c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_DMA2D_MspInit+0x4c>)
 8000fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_DMA2D_MspInit+0x4c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2105      	movs	r1, #5
 8000fda:	205a      	movs	r0, #90	; 0x5a
 8000fdc:	f000 fe1a 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fe0:	205a      	movs	r0, #90	; 0x5a
 8000fe2:	f000 fe33 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	4002b000 	.word	0x4002b000
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <HAL_I2C_MspInit+0xc4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d14b      	bne.n	80010b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001058:	2312      	movs	r3, #18
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001064:	2304      	movs	r3, #4
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4815      	ldr	r0, [pc, #84]	; (80010c4 <HAL_I2C_MspInit+0xcc>)
 8001070:	f001 f8a8 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001086:	2304      	movs	r3, #4
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <HAL_I2C_MspInit+0xd0>)
 8001092:	f001 f897 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 80010a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_I2C_MspInit+0xc8>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40005c00 	.word	0x40005c00
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b09a      	sub	sp, #104	; 0x68
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	2230      	movs	r2, #48	; 0x30
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fecd 	bl	8009e8c <memset>
  if(hltdc->Instance==LTDC)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a85      	ldr	r2, [pc, #532]	; (800130c <HAL_LTDC_MspInit+0x240>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	f040 8102 	bne.w	8001302 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010fe:	2308      	movs	r3, #8
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8001102:	2331      	movs	r3, #49	; 0x31
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8001106:	2302      	movs	r3, #2
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800110a:	2300      	movs	r3, #0
 800110c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4618      	mov	r0, r3
 8001114:	f004 f818 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800111e:	f7ff fe8b 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	4b7a      	ldr	r3, [pc, #488]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a79      	ldr	r2, [pc, #484]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 800112c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b77      	ldr	r3, [pc, #476]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800113a:	623b      	str	r3, [r7, #32]
 800113c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4b73      	ldr	r3, [pc, #460]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a72      	ldr	r2, [pc, #456]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	4b6c      	ldr	r3, [pc, #432]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a6b      	ldr	r2, [pc, #428]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b69      	ldr	r3, [pc, #420]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a64      	ldr	r2, [pc, #400]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a5d      	ldr	r2, [pc, #372]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 800119c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a56      	ldr	r2, [pc, #344]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b54      	ldr	r3, [pc, #336]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b4d      	ldr	r3, [pc, #308]	; (8001310 <HAL_LTDC_MspInit+0x244>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f8:	230e      	movs	r3, #14
 80011fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001200:	4619      	mov	r1, r3
 8001202:	4844      	ldr	r0, [pc, #272]	; (8001314 <HAL_LTDC_MspInit+0x248>)
 8001204:	f000 ffde 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001208:	f641 0358 	movw	r3, #6232	; 0x1858
 800120c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121a:	230e      	movs	r3, #14
 800121c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001222:	4619      	mov	r1, r3
 8001224:	483c      	ldr	r0, [pc, #240]	; (8001318 <HAL_LTDC_MspInit+0x24c>)
 8001226:	f000 ffcd 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800122a:	2303      	movs	r3, #3
 800122c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800123a:	2309      	movs	r3, #9
 800123c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001242:	4619      	mov	r1, r3
 8001244:	4835      	ldr	r0, [pc, #212]	; (800131c <HAL_LTDC_MspInit+0x250>)
 8001246:	f000 ffbd 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800124a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125c:	230e      	movs	r3, #14
 800125e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001264:	4619      	mov	r1, r3
 8001266:	482d      	ldr	r0, [pc, #180]	; (800131c <HAL_LTDC_MspInit+0x250>)
 8001268:	f000 ffac 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800126c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001270:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127e:	230e      	movs	r3, #14
 8001280:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001286:	4619      	mov	r1, r3
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <HAL_LTDC_MspInit+0x254>)
 800128a:	f000 ff9b 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800128e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001292:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a8:	4619      	mov	r1, r3
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <HAL_LTDC_MspInit+0x258>)
 80012ac:	f000 ff8a 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012b0:	2348      	movs	r3, #72	; 0x48
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c0:	230e      	movs	r3, #14
 80012c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c8:	4619      	mov	r1, r3
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <HAL_LTDC_MspInit+0x25c>)
 80012cc:	f000 ff7a 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012e2:	2309      	movs	r3, #9
 80012e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <HAL_LTDC_MspInit+0x254>)
 80012ee:	f000 ff69 	bl	80021c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2058      	movs	r0, #88	; 0x58
 80012f8:	f000 fc8c 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012fc:	2058      	movs	r0, #88	; 0x58
 80012fe:	f000 fca5 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3768      	adds	r7, #104	; 0x68
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40016800 	.word	0x40016800
 8001310:	40023800 	.word	0x40023800
 8001314:	40021400 	.word	0x40021400
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40021800 	.word	0x40021800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00

0800132c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_SPI_MspInit+0x84>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d12c      	bne.n	80013a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001386:	f44f 7360 	mov.w	r3, #896	; 0x380
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001398:	2305      	movs	r3, #5
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <HAL_SPI_MspInit+0x8c>)
 80013a4:	f000 ff0e 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40015000 	.word	0x40015000
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021400 	.word	0x40021400

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10d      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <HAL_TIM_Base_MspInit+0x40>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_UART_MspInit+0x128>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d14b      	bne.n	80014ba <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a40      	ldr	r2, [pc, #256]	; (800152c <HAL_UART_MspInit+0x12c>)
 800142c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b3e      	ldr	r3, [pc, #248]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a39      	ldr	r2, [pc, #228]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b33      	ldr	r3, [pc, #204]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_UART_MspInit+0x12c>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_UART_MspInit+0x12c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001488:	2308      	movs	r3, #8
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4827      	ldr	r0, [pc, #156]	; (8001530 <HAL_UART_MspInit+0x130>)
 8001494:	f000 fe96 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001498:	2304      	movs	r3, #4
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014a8:	2308      	movs	r3, #8
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4820      	ldr	r0, [pc, #128]	; (8001534 <HAL_UART_MspInit+0x134>)
 80014b4:	f000 fe86 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014b8:	e031      	b.n	800151e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_UART_MspInit+0x138>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d12c      	bne.n	800151e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6453      	str	r3, [r2, #68]	; 0x44
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_UART_MspInit+0x12c>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150e:	2307      	movs	r3, #7
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <HAL_UART_MspInit+0x13c>)
 800151a:	f000 fe53 	bl	80021c4 <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40005000 	.word	0x40005000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020800 	.word	0x40020800
 8001534:	40020c00 	.word	0x40020c00
 8001538:	40011000 	.word	0x40011000
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_FMC_MspInit+0x104>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d16f      	bne.n	800163c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_FMC_MspInit+0x104>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_FMC_MspInit+0x108>)
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	4a37      	ldr	r2, [pc, #220]	; (8001648 <HAL_FMC_MspInit+0x108>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6393      	str	r3, [r2, #56]	; 0x38
 8001572:	4b35      	ldr	r3, [pc, #212]	; (8001648 <HAL_FMC_MspInit+0x108>)
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800157e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001582:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001590:	230c      	movs	r3, #12
 8001592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	482c      	ldr	r0, [pc, #176]	; (800164c <HAL_FMC_MspInit+0x10c>)
 800159a:	f000 fe13 	bl	80021c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	4826      	ldr	r0, [pc, #152]	; (8001650 <HAL_FMC_MspInit+0x110>)
 80015b8:	f000 fe04 	bl	80021c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80015c0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ce:	230c      	movs	r3, #12
 80015d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	481f      	ldr	r0, [pc, #124]	; (8001654 <HAL_FMC_MspInit+0x114>)
 80015d8:	f000 fdf4 	bl	80021c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015e0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <HAL_FMC_MspInit+0x118>)
 80015f8:	f000 fde4 	bl	80021c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001600:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <HAL_FMC_MspInit+0x11c>)
 8001618:	f000 fdd4 	bl	80021c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162c:	230c      	movs	r3, #12
 800162e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <HAL_FMC_MspInit+0x120>)
 8001636:	f000 fdc5 	bl	80021c4 <HAL_GPIO_Init>
 800163a:	e000      	b.n	800163e <HAL_FMC_MspInit+0xfe>
    return;
 800163c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000350 	.word	0x20000350
 8001648:	40023800 	.word	0x40023800
 800164c:	40021400 	.word	0x40021400
 8001650:	40020800 	.word	0x40020800
 8001654:	40021800 	.word	0x40021800
 8001658:	40021000 	.word	0x40021000
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800166c:	f7ff ff68 	bl	8001540 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_InitTick+0xe4>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <HAL_InitTick+0xe4>)
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_InitTick+0xe4>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a4:	f107 0210 	add.w	r2, r7, #16
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fd18 	bl	80050e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016be:	f003 fce9 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80016c2:	6378      	str	r0, [r7, #52]	; 0x34
 80016c4:	e004      	b.n	80016d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016c6:	f003 fce5 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 80016ca:	4603      	mov	r3, r0
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_InitTick+0xe8>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	0c9b      	lsrs	r3, r3, #18
 80016da:	3b01      	subs	r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_InitTick+0xec>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <HAL_InitTick+0xf0>)
 80016e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_InitTick+0xec>)
 80016e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_InitTick+0xec>)
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_InitTick+0xec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_InitTick+0xec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_InitTick+0xec>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001704:	4817      	ldr	r0, [pc, #92]	; (8001764 <HAL_InitTick+0xec>)
 8001706:	f003 ff9c 	bl	8005642 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001714:	2b00      	cmp	r3, #0
 8001716:	d11b      	bne.n	8001750 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <HAL_InitTick+0xec>)
 800171a:	f003 ffe1 	bl	80056e0 <HAL_TIM_Base_Start_IT>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001728:	2b00      	cmp	r3, #0
 800172a:	d111      	bne.n	8001750 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800172c:	2036      	movs	r0, #54	; 0x36
 800172e:	f000 fa8d 	bl	8001c4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d808      	bhi.n	800174a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	2036      	movs	r0, #54	; 0x36
 800173e:	f000 fa69 	bl	8001c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_InitTick+0xf4>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e002      	b.n	8001750 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001754:	4618      	mov	r0, r3
 8001756:	3738      	adds	r7, #56	; 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	431bde83 	.word	0x431bde83
 8001764:	20000354 	.word	0x20000354
 8001768:	40001000 	.word	0x40001000
 800176c:	20000008 	.word	0x20000008

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <TIM6_DAC_IRQHandler+0x10>)
 80017ce:	f003 fff7 	bl	80057c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000354 	.word	0x20000354

080017dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <OTG_HS_IRQHandler+0x10>)
 80017e2:	f001 f91f 	bl	8002a24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200007a0 	.word	0x200007a0

080017f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <LTDC_IRQHandler+0x10>)
 80017f6:	f002 fd45 	bl	8004284 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000014c 	.word	0x2000014c

08001804 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2D_IRQHandler+0x10>)
 800180a:	f000 fa92 	bl	8001d32 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200000b8 	.word	0x200000b8

08001818 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e00a      	b.n	8001840 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182a:	f3af 8000 	nop.w
 800182e:	4601      	mov	r1, r0
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf0      	blt.n	800182a <_read+0x12>
  }

  return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	e009      	b.n	8001878 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	60ba      	str	r2, [r7, #8]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff faa3 	bl	8000db8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf1      	blt.n	8001864 <_write+0x12>
  }
  return len;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_close>:

int _close(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b2:	605a      	str	r2, [r3, #4]
  return 0;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <_isatty>:

int _isatty(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f008 fa78 	bl	8009e18 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20030000 	.word	0x20030000
 8001954:	00000400 	.word	0x00000400
 8001958:	2000039c 	.word	0x2000039c
 800195c:	20000ab8 	.word	0x20000ab8

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019ae:	f7ff ffd7 	bl	8001960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f008 fa37 	bl	8009e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7fe fded 	bl	8000594 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80019c8:	0800b4c8 	.word	0x0800b4c8
  ldr r2, =_sbss
 80019cc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80019d0:	20000ab4 	.word	0x20000ab4

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f8fc 	bl	8001bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	200f      	movs	r0, #15
 8001a08:	f7ff fe36 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fa82 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	200003a0 	.word	0x200003a0

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_GetTick+0x14>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200003a0 	.word	0x200003a0

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff ffee 	bl	8001a44 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffde 	bl	8001a44 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000000c 	.word	0x2000000c

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff4c 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c26:	f7ff ff61 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	6978      	ldr	r0, [r7, #20]
 8001c32:	f7ff ffb1 	bl	8001b98 <NVIC_EncodePriority>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff80 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff54 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff f96a 	bl	8000f64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e03b      	b.n	8001d2a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff f96e 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	f023 0107 	bic.w	r1, r3, #7
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68d1      	ldr	r1, [r2, #12]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d026      	beq.n	8001da2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d021      	beq.n	8001da2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d72:	f043 0201 	orr.w	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d026      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d021      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d026      	beq.n	8001e52 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d021      	beq.n	8001e52 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2208      	movs	r2, #8
 8001e24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00e      	beq.n	8001e84 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e74:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f853 	bl	8001f2a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01f      	beq.n	8001ed8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2202      	movs	r2, #2
 8001eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01f      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01a      	beq.n	8001f22 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001efa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2210      	movs	r2, #16
 8001f02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f80e 	bl	8001f3e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA2D_ConfigLayer+0x20>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e079      	b.n	8002068 <HAL_DMA2D_ConfigLayer+0x114>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	3318      	adds	r3, #24
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <HAL_DMA2D_ConfigLayer+0x120>)
 8001fa0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b0a      	cmp	r3, #10
 8001fa8:	d003      	beq.n	8001fb2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	d107      	bne.n	8001fc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e005      	b.n	8001fce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d120      	bne.n	8002016 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	ea02 0103 	and.w	r1, r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b0a      	cmp	r3, #10
 8001ffc:	d003      	beq.n	8002006 <HAL_DMA2D_ConfigLayer+0xb2>
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b09      	cmp	r3, #9
 8002004:	d127      	bne.n	8002056 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
 8002014:	e01f      	b.n	8002056 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	ea02 0103 	and.w	r1, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	430a      	orrs	r2, r1
 800202c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b0a      	cmp	r3, #10
 800203e:	d003      	beq.n	8002048 <HAL_DMA2D_ConfigLayer+0xf4>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b09      	cmp	r3, #9
 8002046:	d106      	bne.n	8002056 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002054:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	ff03000f 	.word	0xff03000f

08002078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <FLASH_WaitForLastOperation+0x78>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800208a:	f7ff fcdb 	bl	8001a44 <HAL_GetTick>
 800208e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002090:	e010      	b.n	80020b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d00c      	beq.n	80020b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <FLASH_WaitForLastOperation+0x38>
 80020a0:	f7ff fcd0 	bl	8001a44 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d201      	bcs.n	80020b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e019      	b.n	80020e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <FLASH_WaitForLastOperation+0x7c>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e8      	bne.n	8002092 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <FLASH_WaitForLastOperation+0x7c>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <FLASH_WaitForLastOperation+0x7c>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <FLASH_WaitForLastOperation+0x7c>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80020de:	f000 f80b 	bl	80020f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
  
}  
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200003a4 	.word	0x200003a4
 80020f4:	40023c00 	.word	0x40023c00

080020f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002112:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002116:	2210      	movs	r2, #16
 8002118:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002130:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002134:	2220      	movs	r2, #32
 8002136:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 800214e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002152:	2240      	movs	r2, #64	; 0x40
 8002154:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 800216c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 800218a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 800218e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002192:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f043 0320 	orr.w	r3, r3, #32
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <FLASH_SetErrorCode+0xc8>)
 80021aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <FLASH_SetErrorCode+0xc4>)
 80021ae:	2202      	movs	r2, #2
 80021b0:	60da      	str	r2, [r3, #12]
  }
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	200003a4 	.word	0x200003a4

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e177      	b.n	80024d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8166 	bne.w	80024ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80c0 	beq.w	80024ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a65      	ldr	r2, [pc, #404]	; (80024e8 <HAL_GPIO_Init+0x324>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_GPIO_Init+0x324>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a61      	ldr	r2, [pc, #388]	; (80024ec <HAL_GPIO_Init+0x328>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_GPIO_Init+0x32c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d037      	beq.n	8002402 <HAL_GPIO_Init+0x23e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_GPIO_Init+0x330>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d031      	beq.n	80023fe <HAL_GPIO_Init+0x23a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a56      	ldr	r2, [pc, #344]	; (80024f8 <HAL_GPIO_Init+0x334>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x236>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_GPIO_Init+0x338>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x232>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a54      	ldr	r2, [pc, #336]	; (8002500 <HAL_GPIO_Init+0x33c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x22e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a53      	ldr	r2, [pc, #332]	; (8002504 <HAL_GPIO_Init+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x22a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_GPIO_Init+0x344>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x226>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_GPIO_Init+0x348>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x222>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_GPIO_Init+0x34c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x21e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4f      	ldr	r2, [pc, #316]	; (8002514 <HAL_GPIO_Init+0x350>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x21a>
 80023da:	2309      	movs	r3, #9
 80023dc:	e012      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023de:	230a      	movs	r3, #10
 80023e0:	e010      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023e2:	2308      	movs	r3, #8
 80023e4:	e00e      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00c      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00a      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023ee:	2305      	movs	r3, #5
 80023f0:	e008      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e004      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x240>
 8002402:	2300      	movs	r3, #0
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	f002 0203 	and.w	r2, r2, #3
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4093      	lsls	r3, r2
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002414:	4935      	ldr	r1, [pc, #212]	; (80024ec <HAL_GPIO_Init+0x328>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_GPIO_Init+0x354>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002446:	4a34      	ldr	r2, [pc, #208]	; (8002518 <HAL_GPIO_Init+0x354>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_GPIO_Init+0x354>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_GPIO_Init+0x354>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <HAL_GPIO_Init+0x354>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_GPIO_Init+0x354>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_GPIO_Init+0x354>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c4:	4a14      	ldr	r2, [pc, #80]	; (8002518 <HAL_GPIO_Init+0x354>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	f67f ae84 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40013800 	.word	0x40013800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021000 	.word	0x40021000
 8002504:	40021400 	.word	0x40021400
 8002508:	40021800 	.word	0x40021800
 800250c:	40021c00 	.word	0x40021c00
 8002510:	40022000 	.word	0x40022000
 8002514:	40022400 	.word	0x40022400
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800254e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002550:	b08f      	sub	sp, #60	; 0x3c
 8002552:	af0a      	add	r7, sp, #40	; 0x28
 8002554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e054      	b.n	800260a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f007 f99c 	bl	80098b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 f9ca 	bl	8006938 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	687e      	ldr	r6, [r7, #4]
 80025ac:	466d      	mov	r5, sp
 80025ae:	f106 0410 	add.w	r4, r6, #16
 80025b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025be:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c2:	1d33      	adds	r3, r6, #4
 80025c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f004 f944 	bl	8006854 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 f9c1 	bl	800695a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	687e      	ldr	r6, [r7, #4]
 80025e0:	466d      	mov	r5, sp
 80025e2:	f106 0410 	add.w	r4, r6, #16
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f6:	1d33      	adds	r3, r6, #4
 80025f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fa:	6838      	ldr	r0, [r7, #0]
 80025fc:	f004 fb4a 	bl	8006c94 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002612 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b089      	sub	sp, #36	; 0x24
 8002616:	af04      	add	r7, sp, #16
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	4608      	mov	r0, r1
 800261c:	4611      	mov	r1, r2
 800261e:	461a      	mov	r2, r3
 8002620:	4603      	mov	r3, r0
 8002622:	70fb      	strb	r3, [r7, #3]
 8002624:	460b      	mov	r3, r1
 8002626:	70bb      	strb	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_HCD_HC_Init+0x28>
 8002636:	2302      	movs	r3, #2
 8002638:	e076      	b.n	8002728 <HAL_HCD_HC_Init+0x116>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3338      	adds	r3, #56	; 0x38
 8002662:	787a      	ldrb	r2, [r7, #1]
 8002664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3340      	adds	r3, #64	; 0x40
 8002674:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002676:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3339      	adds	r3, #57	; 0x39
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	333f      	adds	r3, #63	; 0x3f
 8002698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800269c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	78ba      	ldrb	r2, [r7, #2]
 80026a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026a6:	b2d0      	uxtb	r0, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	333a      	adds	r3, #58	; 0x3a
 80026b4:	4602      	mov	r2, r0
 80026b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80026b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da09      	bge.n	80026d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	333b      	adds	r3, #59	; 0x3b
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e008      	b.n	80026e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	333b      	adds	r3, #59	; 0x3b
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333c      	adds	r3, #60	; 0x3c
 80026f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	787c      	ldrb	r4, [r7, #1]
 8002700:	78ba      	ldrb	r2, [r7, #2]
 8002702:	78f9      	ldrb	r1, [r7, #3]
 8002704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4623      	mov	r3, r4
 8002716:	f004 fc43 	bl	8006fa0 <USB_HC_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_HCD_HC_Halt+0x1e>
 800274a:	2302      	movs	r3, #2
 800274c:	e00f      	b.n	800276e <HAL_HCD_HC_Halt+0x3e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f004 fe93 	bl	800748a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4603      	mov	r3, r0
 8002788:	70fb      	strb	r3, [r7, #3]
 800278a:	460b      	mov	r3, r1
 800278c:	70bb      	strb	r3, [r7, #2]
 800278e:	4613      	mov	r3, r2
 8002790:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	333b      	adds	r3, #59	; 0x3b
 80027a0:	78ba      	ldrb	r2, [r7, #2]
 80027a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	333f      	adds	r3, #63	; 0x3f
 80027b2:	787a      	ldrb	r2, [r7, #1]
 80027b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80027b6:	7c3b      	ldrb	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3342      	adds	r3, #66	; 0x42
 80027ca:	2203      	movs	r2, #3
 80027cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	333d      	adds	r3, #61	; 0x3d
 80027dc:	7f3a      	ldrb	r2, [r7, #28]
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e008      	b.n	80027f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3342      	adds	r3, #66	; 0x42
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f200 80c6 	bhi.w	8002988 <HAL_HCD_HC_SubmitRequest+0x210>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002815 	.word	0x08002815
 8002808:	08002975 	.word	0x08002975
 800280c:	08002879 	.word	0x08002879
 8002810:	080028f7 	.word	0x080028f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002814:	7c3b      	ldrb	r3, [r7, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	f040 80b8 	bne.w	800298c <HAL_HCD_HC_SubmitRequest+0x214>
 800281c:	78bb      	ldrb	r3, [r7, #2]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80b4 	bne.w	800298c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002824:	8b3b      	ldrh	r3, [r7, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3355      	adds	r3, #85	; 0x55
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3355      	adds	r3, #85	; 0x55
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3342      	adds	r3, #66	; 0x42
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002862:	e093      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3342      	adds	r3, #66	; 0x42
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
      break;
 8002876:	e089      	b.n	800298c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002878:	78bb      	ldrb	r3, [r7, #2]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3355      	adds	r3, #85	; 0x55
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3342      	adds	r3, #66	; 0x42
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80028a4:	e073      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3342      	adds	r3, #66	; 0x42
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]
      break;
 80028b8:	e069      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3354      	adds	r3, #84	; 0x54
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3342      	adds	r3, #66	; 0x42
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
      break;
 80028e0:	e055      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3342      	adds	r3, #66	; 0x42
 80028f0:	2202      	movs	r2, #2
 80028f2:	701a      	strb	r2, [r3, #0]
      break;
 80028f4:	e04b      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028f6:	78bb      	ldrb	r3, [r7, #2]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d11d      	bne.n	8002938 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3355      	adds	r3, #85	; 0x55
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3342      	adds	r3, #66	; 0x42
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002922:	e034      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3342      	adds	r3, #66	; 0x42
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]
      break;
 8002936:	e02a      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3354      	adds	r3, #84	; 0x54
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3342      	adds	r3, #66	; 0x42
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e016      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3342      	adds	r3, #66	; 0x42
 800296e:	2202      	movs	r2, #2
 8002970:	701a      	strb	r2, [r3, #0]
      break;
 8002972:	e00c      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3342      	adds	r3, #66	; 0x42
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
      break;
 8002986:	e002      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800298c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3344      	adds	r3, #68	; 0x44
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	8b3a      	ldrh	r2, [r7, #24]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	202c      	movs	r0, #44	; 0x2c
 80029a8:	fb00 f303 	mul.w	r3, r0, r3
 80029ac:	440b      	add	r3, r1
 80029ae:	334c      	adds	r3, #76	; 0x4c
 80029b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3360      	adds	r3, #96	; 0x60
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3350      	adds	r3, #80	; 0x50
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3339      	adds	r3, #57	; 0x39
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3361      	adds	r3, #97	; 0x61
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	222c      	movs	r2, #44	; 0x2c
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	3338      	adds	r3, #56	; 0x38
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	18d1      	adds	r1, r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	f004 fbe6 	bl	80071e4 <USB_HC_StartXfer>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop

08002a24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f8e7 	bl	8006c0e <USB_GetMode>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 80f6 	bne.w	8002c34 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f8cb 	bl	8006be8 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80ec 	beq.w	8002c32 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 f8c2 	bl	8006be8 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a6e:	d104      	bne.n	8002a7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 f8b2 	bl	8006be8 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8e:	d104      	bne.n	8002a9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f8a2 	bl	8006be8 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aae:	d104      	bne.n	8002aba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f892 	bl	8006be8 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d103      	bne.n	8002ad6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f884 	bl	8006be8 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aea:	d11c      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002af4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b06:	2110      	movs	r1, #16
 8002b08:	6938      	ldr	r0, [r7, #16]
 8002b0a:	f003 ff73 	bl	80069f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b0e:	6938      	ldr	r0, [r7, #16]
 8002b10:	f003 ffa4 	bl	8006a5c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f97a 	bl	8006e14 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f006 ff43 	bl	80099ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f85c 	bl	8006be8 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3a:	d102      	bne.n	8002b42 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 f89e 	bl	8003c7e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 f84e 	bl	8006be8 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d106      	bne.n	8002b64 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f006 ff0c 	bl	8009974 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 f83d 	bl	8006be8 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d101      	bne.n	8002b7c <HAL_HCD_IRQHandler+0x158>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_HCD_IRQHandler+0x15a>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0210 	bic.w	r2, r2, #16
 8002b90:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 ffa1 	bl	8003ada <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0210 	orr.w	r2, r2, #16
 8002ba6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 f81b 	bl	8006be8 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bbc:	d13a      	bne.n	8002c34 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fc50 	bl	8007468 <USB_HC_ReadInterrupt>
 8002bc8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e025      	b.n	8002c1c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfa:	d106      	bne.n	8002c0a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8ab 	bl	8002d5e <HCD_HC_IN_IRQHandler>
 8002c08:	e005      	b.n	8002c16 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fbf9 	bl	8003408 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3d4      	bcc.n	8002bd0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2e:	615a      	str	r2, [r3, #20]
 8002c30:	e000      	b.n	8002c34 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c32:	bf00      	nop
    }
  }
}
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_HCD_Start+0x16>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e013      	b.n	8002c78 <HAL_HCD_Start+0x3e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 f93c 	bl	8006edc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fe54 	bl	8006916 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_HCD_Stop+0x16>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e00d      	b.n	8002cb2 <HAL_HCD_Stop+0x32>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fd2a 	bl	80076fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 f8de 	bl	8006e88 <USB_ResetPort>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3360      	adds	r3, #96	; 0x60
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3350      	adds	r3, #80	; 0x50
 8002d18:	681b      	ldr	r3, [r3, #0]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 f922 	bl	8006f7c <USB_GetCurrentFrame>
 8002d38:	4603      	mov	r3, r0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f8fd 	bl	8006f4e <USB_GetHostSpeed>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d11a      	bne.n	8002dc4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3361      	adds	r3, #97	; 0x61
 8002dae:	2206      	movs	r2, #6
 8002db0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 fb64 	bl	800748a <USB_HC_Halt>
 8002dc2:	e0af      	b.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d11b      	bne.n	8002e14 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3361      	adds	r3, #97	; 0x61
 8002dfe:	2207      	movs	r2, #7
 8002e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f004 fb3c 	bl	800748a <USB_HC_Halt>
 8002e12:	e087      	b.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d109      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	2320      	movs	r3, #32
 8002e3a:	6093      	str	r3, [r2, #8]
 8002e3c:	e072      	b.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d11a      	bne.n	8002e8a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	2205      	movs	r2, #5
 8002e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 fb01 	bl	800748a <USB_HC_Halt>
 8002e88:	e04c      	b.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d11b      	bne.n	8002eda <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3361      	adds	r3, #97	; 0x61
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fad9 	bl	800748a <USB_HC_Halt>
 8002ed8:	e024      	b.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d119      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	461a      	mov	r2, r3
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3361      	adds	r3, #97	; 0x61
 8002f10:	2206      	movs	r2, #6
 8002f12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fab3 	bl	800748a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3a:	d112      	bne.n	8002f62 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f004 fa9f 	bl	800748a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f60:	e24e      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 80df 	bne.w	8003138 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d019      	beq.n	8002fb6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3348      	adds	r3, #72	; 0x48
 8002f90:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	202c      	movs	r0, #44	; 0x2c
 8002fac:	fb00 f303 	mul.w	r3, r0, r3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3361      	adds	r3, #97	; 0x61
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	335c      	adds	r3, #92	; 0x5c
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2301      	movs	r3, #1
 8002fea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	333f      	adds	r3, #63	; 0x3f
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	333f      	adds	r3, #63	; 0x3f
 800300e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003010:	2b02      	cmp	r3, #2
 8003012:	d111      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fa33 	bl	800748a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003030:	461a      	mov	r2, r3
 8003032:	2310      	movs	r3, #16
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	e03a      	b.n	80030ae <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	333f      	adds	r3, #63	; 0x3f
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d009      	beq.n	8003060 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	333f      	adds	r3, #63	; 0x3f
 800305a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800305c:	2b01      	cmp	r3, #1
 800305e:	d126      	bne.n	80030ae <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800307a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800307e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3360      	adds	r3, #96	; 0x60
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	b2d9      	uxtb	r1, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	202c      	movs	r0, #44	; 0x2c
 800309c:	fb00 f303 	mul.w	r3, r0, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3360      	adds	r3, #96	; 0x60
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fc8d 	bl	80099c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d12b      	bne.n	800310e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3348      	adds	r3, #72	; 0x48
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	202c      	movs	r0, #44	; 0x2c
 80030cc:	fb00 f202 	mul.w	r2, r0, r2
 80030d0:	440a      	add	r2, r1
 80030d2:	3240      	adds	r2, #64	; 0x40
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 818e 	beq.w	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3354      	adds	r3, #84	; 0x54
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2d8      	uxtb	r0, r3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3354      	adds	r3, #84	; 0x54
 8003108:	4602      	mov	r2, r0
 800310a:	701a      	strb	r2, [r3, #0]
}
 800310c:	e178      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3354      	adds	r3, #84	; 0x54
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	f083 0301 	eor.w	r3, r3, #1
 8003122:	b2d8      	uxtb	r0, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3354      	adds	r3, #84	; 0x54
 8003132:	4602      	mov	r2, r0
 8003134:	701a      	strb	r2, [r3, #0]
}
 8003136:	e163      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	f040 80f6 	bne.w	800333c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3361      	adds	r3, #97	; 0x61
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d109      	bne.n	8003178 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3360      	adds	r3, #96	; 0x60
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e0c9      	b.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d109      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2205      	movs	r2, #5
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e0b5      	b.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d009      	beq.n	80031c8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3361      	adds	r3, #97	; 0x61
 80031c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d150      	bne.n	800326a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	335c      	adds	r3, #92	; 0x5c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	202c      	movs	r0, #44	; 0x2c
 80031e0:	fb00 f303 	mul.w	r3, r0, r3
 80031e4:	440b      	add	r3, r1
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d912      	bls.n	8003224 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3360      	adds	r3, #96	; 0x60
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003222:	e073      	b.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800324c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003254:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003268:	e050      	b.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3361      	adds	r3, #97	; 0x61
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d122      	bne.n	80032c4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3360      	adds	r3, #96	; 0x60
 800328c:	2202      	movs	r2, #2
 800328e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e023      	b.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b07      	cmp	r3, #7
 80032d6:	d119      	bne.n	800330c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	335c      	adds	r3, #92	; 0x5c
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	202c      	movs	r0, #44	; 0x2c
 80032f0:	fb00 f303 	mul.w	r3, r0, r3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	3360      	adds	r3, #96	; 0x60
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2302      	movs	r3, #2
 800331c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	b2d9      	uxtb	r1, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	202c      	movs	r0, #44	; 0x2c
 8003328:	fb00 f303 	mul.w	r3, r0, r3
 800332c:	4413      	add	r3, r2
 800332e:	3360      	adds	r3, #96	; 0x60
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f006 fb47 	bl	80099c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800333a:	e061      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d156      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	333f      	adds	r3, #63	; 0x3f
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d111      	bne.n	800338a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	335c      	adds	r3, #92	; 0x5c
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	4611      	mov	r1, r2
 8003382:	4618      	mov	r0, r3
 8003384:	f004 f881 	bl	800748a <USB_HC_Halt>
 8003388:	e031      	b.n	80033ee <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	333f      	adds	r3, #63	; 0x3f
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	333f      	adds	r3, #63	; 0x3f
 80033ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d11d      	bne.n	80033ee <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	335c      	adds	r3, #92	; 0x5c
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d110      	bne.n	80033ee <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3361      	adds	r3, #97	; 0x61
 80033da:	2203      	movs	r2, #3
 80033dc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 f84e 	bl	800748a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fa:	461a      	mov	r2, r3
 80033fc:	2310      	movs	r3, #16
 80033fe:	6093      	str	r3, [r2, #8]
}
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11a      	bne.n	800346e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	2304      	movs	r3, #4
 8003448:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	3361      	adds	r3, #97	; 0x61
 8003458:	2206      	movs	r2, #6
 800345a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f004 f80f 	bl	800748a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800346c:	e331      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4413      	add	r3, r2
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d12e      	bne.n	80034e2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	2320      	movs	r3, #32
 8003494:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	333d      	adds	r3, #61	; 0x3d
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 8313 	bne.w	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	333d      	adds	r3, #61	; 0x3d
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3360      	adds	r3, #96	; 0x60
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 ffd5 	bl	800748a <USB_HC_Halt>
}
 80034e0:	e2f7      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f8:	d112      	bne.n	8003520 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	461a      	mov	r2, r3
 8003508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f003 ffb6 	bl	800748a <USB_HC_Halt>
}
 800351e:	e2d8      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d140      	bne.n	80035b8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	335c      	adds	r3, #92	; 0x5c
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d111      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	333d      	adds	r3, #61	; 0x3d
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	461a      	mov	r2, r3
 8003590:	2301      	movs	r3, #1
 8003592:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3361      	adds	r3, #97	; 0x61
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 ff6a 	bl	800748a <USB_HC_Halt>
}
 80035b6:	e28c      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d12c      	bne.n	8003628 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3361      	adds	r3, #97	; 0x61
 80035dc:	2204      	movs	r2, #4
 80035de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	333d      	adds	r3, #61	; 0x3d
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	335c      	adds	r3, #92	; 0x5c
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f003 ff3b 	bl	800748a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	6093      	str	r3, [r2, #8]
}
 8003626:	e254      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b08      	cmp	r3, #8
 800363c:	d11a      	bne.n	8003674 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	2308      	movs	r3, #8
 800364e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3361      	adds	r3, #97	; 0x61
 800365e:	2205      	movs	r2, #5
 8003660:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f003 ff0c 	bl	800748a <USB_HC_Halt>
}
 8003672:	e22e      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b10      	cmp	r3, #16
 8003688:	d140      	bne.n	800370c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3361      	adds	r3, #97	; 0x61
 80036aa:	2203      	movs	r2, #3
 80036ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	333d      	adds	r3, #61	; 0x3d
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d112      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	333c      	adds	r3, #60	; 0x3c
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	333d      	adds	r3, #61	; 0x3d
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fec9 	bl	800748a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	2310      	movs	r3, #16
 8003708:	6093      	str	r3, [r2, #8]
}
 800370a:	e1e2      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	d164      	bne.n	80037ec <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d111      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3361      	adds	r3, #97	; 0x61
 8003738:	2206      	movs	r2, #6
 800373a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fe9f 	bl	800748a <USB_HC_Halt>
 800374c:	e044      	b.n	80037d8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	335c      	adds	r3, #92	; 0x5c
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	202c      	movs	r0, #44	; 0x2c
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	440b      	add	r3, r1
 800376c:	335c      	adds	r3, #92	; 0x5c
 800376e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	335c      	adds	r3, #92	; 0x5c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d920      	bls.n	80037c6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	335c      	adds	r3, #92	; 0x5c
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	3360      	adds	r3, #96	; 0x60
 80037a4:	2204      	movs	r2, #4
 80037a6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	b2d9      	uxtb	r1, r3
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	202c      	movs	r0, #44	; 0x2c
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3360      	adds	r3, #96	; 0x60
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f006 f902 	bl	80099c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037c4:	e008      	b.n	80037d8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	6093      	str	r3, [r2, #8]
}
 80037ea:	e172      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d11b      	bne.n	800383c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3361      	adds	r3, #97	; 0x61
 8003812:	2208      	movs	r2, #8
 8003814:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f003 fe32 	bl	800748a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	461a      	mov	r2, r3
 8003834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003838:	6093      	str	r3, [r2, #8]
}
 800383a:	e14a      	b.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	4413      	add	r3, r2
 8003844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	f040 813f 	bne.w	8003ad2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3361      	adds	r3, #97	; 0x61
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d17d      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3360      	adds	r3, #96	; 0x60
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	333f      	adds	r3, #63	; 0x3f
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d00a      	beq.n	80038a4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	333f      	adds	r3, #63	; 0x3f
 800389c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800389e:	2b03      	cmp	r3, #3
 80038a0:	f040 8100 	bne.w	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d113      	bne.n	80038d4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3355      	adds	r3, #85	; 0x55
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2d8      	uxtb	r0, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3355      	adds	r3, #85	; 0x55
 80038d0:	4602      	mov	r2, r0
 80038d2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 80e3 	bne.w	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	334c      	adds	r3, #76	; 0x4c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80d8 	beq.w	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	334c      	adds	r3, #76	; 0x4c
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	202c      	movs	r0, #44	; 0x2c
 800390a:	fb00 f202 	mul.w	r2, r0, r2
 800390e:	440a      	add	r2, r1
 8003910:	3240      	adds	r2, #64	; 0x40
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	4413      	add	r3, r2
 8003916:	3b01      	subs	r3, #1
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	202c      	movs	r0, #44	; 0x2c
 800391e:	fb00 f202 	mul.w	r2, r0, r2
 8003922:	440a      	add	r2, r1
 8003924:	3240      	adds	r2, #64	; 0x40
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	fbb3 f3f2 	udiv	r3, r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80b5 	beq.w	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	3355      	adds	r3, #85	; 0x55
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2d8      	uxtb	r0, r3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3355      	adds	r3, #85	; 0x55
 800395e:	4602      	mov	r2, r0
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e09f      	b.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3361      	adds	r3, #97	; 0x61
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d109      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3360      	adds	r3, #96	; 0x60
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	e08b      	b.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3361      	adds	r3, #97	; 0x61
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d109      	bne.n	80039b4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3360      	adds	r3, #96	; 0x60
 80039ae:	2202      	movs	r2, #2
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e077      	b.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3361      	adds	r3, #97	; 0x61
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d109      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3360      	adds	r3, #96	; 0x60
 80039d6:	2205      	movs	r2, #5
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	e063      	b.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3361      	adds	r3, #97	; 0x61
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d009      	beq.n	8003a04 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3361      	adds	r3, #97	; 0x61
 80039fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d14f      	bne.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	335c      	adds	r3, #92	; 0x5c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	202c      	movs	r0, #44	; 0x2c
 8003a1c:	fb00 f303 	mul.w	r3, r0, r3
 8003a20:	440b      	add	r3, r1
 8003a22:	335c      	adds	r3, #92	; 0x5c
 8003a24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	335c      	adds	r3, #92	; 0x5c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d912      	bls.n	8003a60 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	335c      	adds	r3, #92	; 0x5c
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3360      	adds	r3, #96	; 0x60
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e021      	b.n	8003aa4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3360      	adds	r3, #96	; 0x60
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a88:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a90:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	b2d9      	uxtb	r1, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	202c      	movs	r0, #44	; 0x2c
 8003ac0:	fb00 f303 	mul.w	r3, r0, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3360      	adds	r3, #96	; 0x60
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f005 ff7b 	bl	80099c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08a      	sub	sp, #40	; 0x28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	0c5b      	lsrs	r3, r3, #17
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d004      	beq.n	8003b20 <HCD_RXQLVL_IRQHandler+0x46>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	f000 80a9 	beq.w	8003c70 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b1e:	e0aa      	b.n	8003c76 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80a6 	beq.w	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3344      	adds	r3, #68	; 0x44
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 809b 	beq.w	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3350      	adds	r3, #80	; 0x50
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	441a      	add	r2, r3
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f303 	mul.w	r3, r0, r3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	; 0x4c
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d87a      	bhi.n	8003c5c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3344      	adds	r3, #68	; 0x44
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f002 ffda 	bl	8006b38 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3344      	adds	r3, #68	; 0x44
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	441a      	add	r2, r3
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	202c      	movs	r0, #44	; 0x2c
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3344      	adds	r3, #68	; 0x44
 8003ba6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3350      	adds	r3, #80	; 0x50
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	441a      	add	r2, r3
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	202c      	movs	r0, #44	; 0x2c
 8003bc2:	fb00 f303 	mul.w	r3, r0, r3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3350      	adds	r3, #80	; 0x50
 8003bca:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	0cdb      	lsrs	r3, r3, #19
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3340      	adds	r3, #64	; 0x40
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d13c      	bne.n	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d039      	beq.n	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c16:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c1e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3354      	adds	r3, #84	; 0x54
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3354      	adds	r3, #84	; 0x54
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
      break;
 8003c5a:	e00b      	b.n	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3360      	adds	r3, #96	; 0x60
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	701a      	strb	r2, [r3, #0]
      break;
 8003c6e:	e001      	b.n	8003c74 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c70:	bf00      	nop
 8003c72:	e000      	b.n	8003c76 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c74:	bf00      	nop
  }
}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	; 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003caa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d10b      	bne.n	8003cce <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f005 fe65 	bl	8009990 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f043 0302 	orr.w	r3, r3, #2
 8003ccc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d132      	bne.n	8003d3e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d126      	bne.n	8003d38 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d113      	bne.n	8003d1a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cfc:	d106      	bne.n	8003d0c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 f885 	bl	8006e14 <USB_InitFSLSPClkSel>
 8003d0a:	e011      	b.n	8003d30 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 f87e 	bl	8006e14 <USB_InitFSLSPClkSel>
 8003d18:	e00a      	b.n	8003d30 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d2e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f005 fe57 	bl	80099e4 <HAL_HCD_PortEnabled_Callback>
 8003d36:	e002      	b.n	8003d3e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f005 fe61 	bl	8009a00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d103      	bne.n	8003d50 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e12b      	b.n	8003fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f934 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	; 0x24
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f001 f964 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a81      	ldr	r2, [pc, #516]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d807      	bhi.n	8003de8 <HAL_I2C_Init+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a80      	ldr	r2, [pc, #512]	; (8003fdc <HAL_I2C_Init+0x278>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e006      	b.n	8003df6 <HAL_I2C_Init+0x92>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a7d      	ldr	r2, [pc, #500]	; (8003fe0 <HAL_I2C_Init+0x27c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bf94      	ite	ls
 8003df0:	2301      	movls	r3, #1
 8003df2:	2300      	movhi	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0e7      	b.n	8003fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a78      	ldr	r2, [pc, #480]	; (8003fe4 <HAL_I2C_Init+0x280>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0c9b      	lsrs	r3, r3, #18
 8003e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d802      	bhi.n	8003e38 <HAL_I2C_Init+0xd4>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e009      	b.n	8003e4c <HAL_I2C_Init+0xe8>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <HAL_I2C_Init+0x284>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	495c      	ldr	r1, [pc, #368]	; (8003fd8 <HAL_I2C_Init+0x274>)
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d819      	bhi.n	8003ea0 <HAL_I2C_Init+0x13c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e59      	subs	r1, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e80:	400b      	ands	r3, r1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_I2C_Init+0x138>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e59      	subs	r1, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	e051      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e04f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_I2C_Init+0x168>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_I2C_Init+0x18e>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	0099      	lsls	r1, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x196>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_I2C_Init+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e58      	subs	r0, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	440b      	add	r3, r1
 8003f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1e:	e00f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	0099      	lsls	r1, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	6809      	ldr	r1, [r1, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6911      	ldr	r1, [r2, #16]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	000186a0 	.word	0x000186a0
 8003fdc:	001e847f 	.word	0x001e847f
 8003fe0:	003d08ff 	.word	0x003d08ff
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	10624dd3 	.word	0x10624dd3

08003fec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d129      	bne.n	8004056 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2224      	movs	r2, #36	; 0x24
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0210 	bic.w	r2, r2, #16
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	d12a      	bne.n	80040d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2224      	movs	r2, #36	; 0x24
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	f023 030f 	bic.w	r3, r3, #15
 80040a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	89fb      	ldrh	r3, [r7, #14]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	89fa      	ldrh	r2, [r7, #14]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0bf      	b.n	8004276 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc ffde 	bl	80010cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004126:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800413c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_LTDC_Init+0x19c>)
 8004158:	400b      	ands	r3, r1
 800415a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68d9      	ldr	r1, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <HAL_LTDC_Init+0x19c>)
 8004186:	400b      	ands	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68d9      	ldr	r1, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_LTDC_Init+0x19c>)
 80041b4:	400b      	ands	r3, r1
 80041b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6959      	ldr	r1, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_LTDC_Init+0x19c>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6959      	ldr	r1, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004226:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0206 	orr.w	r2, r2, #6
 8004252:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	f000f800 	.word	0xf000f800

08004284 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d023      	beq.n	80042ee <HAL_LTDC_IRQHandler+0x6a>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01e      	beq.n	80042ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2204      	movs	r2, #4
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f86f 	bl	80043cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d023      	beq.n	8004340 <HAL_LTDC_IRQHandler+0xbc>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01e      	beq.n	8004340 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0202 	bic.w	r2, r2, #2
 8004310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2202      	movs	r2, #2
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004320:	f043 0202 	orr.w	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f846 	bl	80043cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01b      	beq.n	8004382 <HAL_LTDC_IRQHandler+0xfe>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d016      	beq.n	8004382 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f82f 	bl	80043e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <HAL_LTDC_IRQHandler+0x140>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2208      	movs	r2, #8
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f818 	bl	80043f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_LTDC_ConfigLayer+0x1a>
 800441e:	2302      	movs	r3, #2
 8004420:	e02c      	b.n	800447c <HAL_LTDC_ConfigLayer+0x74>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2134      	movs	r1, #52	; 0x34
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f811 	bl	8004484 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bdb0      	pop	{r4, r5, r7, pc}

08004484 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	4413      	add	r3, r2
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	01db      	lsls	r3, r3, #7
 80044b0:	4413      	add	r3, r2
 80044b2:	3384      	adds	r3, #132	; 0x84
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4611      	mov	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	01d2      	lsls	r2, r2, #7
 80044c0:	440a      	add	r2, r1
 80044c2:	3284      	adds	r2, #132	; 0x84
 80044c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044da:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044dc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	440b      	add	r3, r1
 80044ea:	3384      	adds	r3, #132	; 0x84
 80044ec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80044f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004502:	4413      	add	r3, r2
 8004504:	041b      	lsls	r3, r3, #16
 8004506:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4611      	mov	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	01d2      	lsls	r2, r2, #7
 8004522:	440a      	add	r2, r1
 8004524:	3284      	adds	r2, #132	; 0x84
 8004526:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800452a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800453a:	4413      	add	r3, r2
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	01db      	lsls	r3, r3, #7
 8004548:	440b      	add	r3, r1
 800454a:	3384      	adds	r3, #132	; 0x84
 800454c:	4619      	mov	r1, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	01db      	lsls	r3, r3, #7
 800455e:	4413      	add	r3, r2
 8004560:	3384      	adds	r3, #132	; 0x84
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4611      	mov	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	01d2      	lsls	r2, r2, #7
 800456e:	440a      	add	r2, r1
 8004570:	3284      	adds	r2, #132	; 0x84
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	01db      	lsls	r3, r3, #7
 8004582:	4413      	add	r3, r2
 8004584:	3384      	adds	r3, #132	; 0x84
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3384      	adds	r3, #132	; 0x84
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	4413      	add	r3, r2
 80045c6:	3384      	adds	r3, #132	; 0x84
 80045c8:	461a      	mov	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d4:	461a      	mov	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	431a      	orrs	r2, r3
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4619      	mov	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	01db      	lsls	r3, r3, #7
 80045e8:	440b      	add	r3, r1
 80045ea:	3384      	adds	r3, #132	; 0x84
 80045ec:	4619      	mov	r1, r3
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4413      	add	r3, r2
 8004600:	3384      	adds	r3, #132	; 0x84
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	4611      	mov	r1, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	01d2      	lsls	r2, r2, #7
 800460e:	440a      	add	r2, r1
 8004610:	3284      	adds	r2, #132	; 0x84
 8004612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004616:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	01db      	lsls	r3, r3, #7
 8004622:	4413      	add	r3, r2
 8004624:	3384      	adds	r3, #132	; 0x84
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	01db      	lsls	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	3384      	adds	r3, #132	; 0x84
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4611      	mov	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	01d2      	lsls	r2, r2, #7
 8004648:	440a      	add	r2, r1
 800464a:	3284      	adds	r2, #132	; 0x84
 800464c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6809      	ldr	r1, [r1, #0]
 8004662:	4608      	mov	r0, r1
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	01c9      	lsls	r1, r1, #7
 8004668:	4401      	add	r1, r0
 800466a:	3184      	adds	r1, #132	; 0x84
 800466c:	4313      	orrs	r3, r2
 800466e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	4413      	add	r3, r2
 800467c:	3384      	adds	r3, #132	; 0x84
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	01db      	lsls	r3, r3, #7
 800468a:	4413      	add	r3, r2
 800468c:	3384      	adds	r3, #132	; 0x84
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	4413      	add	r3, r2
 80046a0:	3384      	adds	r3, #132	; 0x84
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80046b2:	2304      	movs	r3, #4
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	e01b      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80046c0:	2303      	movs	r3, #3
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e014      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00b      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d007      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d003      	beq.n	80046e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	d102      	bne.n	80046ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e001      	b.n	80046f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046ec:	2301      	movs	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004712:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1acb      	subs	r3, r1, r3
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	6809      	ldr	r1, [r1, #0]
 8004736:	4608      	mov	r0, r1
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	01c9      	lsls	r1, r1, #7
 800473c:	4401      	add	r1, r0
 800473e:	3184      	adds	r1, #132	; 0x84
 8004740:	4313      	orrs	r3, r2
 8004742:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	3384      	adds	r3, #132	; 0x84
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	4611      	mov	r1, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	01d2      	lsls	r2, r2, #7
 800475e:	440a      	add	r2, r1
 8004760:	3284      	adds	r2, #132	; 0x84
 8004762:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	461a      	mov	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	01db      	lsls	r3, r3, #7
 800478c:	4413      	add	r3, r2
 800478e:	3384      	adds	r3, #132	; 0x84
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	4611      	mov	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	01d2      	lsls	r2, r2, #7
 800479c:	440a      	add	r2, r1
 800479e:	3284      	adds	r2, #132	; 0x84
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e267      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d075      	beq.n	80048be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d2:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d00c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d112      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ea:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f6:	d10b      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	4b7e      	ldr	r3, [pc, #504]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05b      	beq.n	80048bc <HAL_RCC_OscConfig+0x108>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d157      	bne.n	80048bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e242      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004818:	d106      	bne.n	8004828 <HAL_RCC_OscConfig+0x74>
 800481a:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a75      	ldr	r2, [pc, #468]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e01d      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x98>
 8004832:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6f      	ldr	r2, [pc, #444]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6c      	ldr	r2, [pc, #432]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 800484c:	4b69      	ldr	r3, [pc, #420]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a68      	ldr	r2, [pc, #416]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b66      	ldr	r3, [pc, #408]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a65      	ldr	r2, [pc, #404]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd f8ea 	bl	8001a44 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004874:	f7fd f8e6 	bl	8001a44 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e207      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0xc0>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd f8d6 	bl	8001a44 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489c:	f7fd f8d2 	bl	8001a44 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1f3      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	4b51      	ldr	r3, [pc, #324]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0xe8>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d063      	beq.n	8004992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d11c      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e2:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e1c7      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4937      	ldr	r1, [pc, #220]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	e03a      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fd f88b 	bl	8001a44 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fd f887 	bl	8001a44 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1a8      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4925      	ldr	r1, [pc, #148]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd f86a 	bl	8001a44 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004974:	f7fd f866 	bl	8001a44 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e187      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d036      	beq.n	8004a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCC_OscConfig+0x248>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fd f84a 	bl	8001a44 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fd f846 	bl	8001a44 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e167      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_OscConfig+0x240>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x200>
 80049d2:	e01b      	b.n	8004a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_OscConfig+0x248>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049da:	f7fd f833 	bl	8001a44 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	e00e      	b.n	8004a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e2:	f7fd f82f 	bl	8001a44 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d907      	bls.n	8004a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e150      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	42470000 	.word	0x42470000
 80049fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ea      	bne.n	80049e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8097 	beq.w	8004b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a7c      	ldr	r2, [pc, #496]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b7a      	ldr	r3, [pc, #488]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4a:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d118      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a56:	4b74      	ldr	r3, [pc, #464]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a73      	ldr	r2, [pc, #460]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a62:	f7fc ffef 	bl	8001a44 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6a:	f7fc ffeb 	bl	8001a44 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e10c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	; (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2ea>
 8004a90:	4b64      	ldr	r3, [pc, #400]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a63      	ldr	r2, [pc, #396]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x30c>
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a57      	ldr	r2, [pc, #348]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a54      	ldr	r2, [pc, #336]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f023 0304 	bic.w	r3, r3, #4
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fc ffb0 	bl	8001a44 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fc ffac 	bl	8001a44 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0cb      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afe:	4b49      	ldr	r3, [pc, #292]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ee      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x334>
 8004b0a:	e014      	b.n	8004b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f7fc ff9a 	bl	8001a44 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fc ff96 	bl	8001a44 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0b5      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ee      	bne.n	8004b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	4a38      	ldr	r2, [pc, #224]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a1 	beq.w	8004c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b52:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d05c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d141      	bne.n	8004bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fc ff6a 	bl	8001a44 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fc ff66 	bl	8001a44 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e087      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	491b      	ldr	r1, [pc, #108]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fc ff3f 	bl	8001a44 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fc ff3b 	bl	8001a44 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e05c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x416>
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fc ff28 	bl	8001a44 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fc ff24 	bl	8001a44 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e045      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x444>
 8004c16:	e03d      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e038      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x4ec>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d121      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d11a      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0cc      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d90c      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0b8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d10:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	494d      	ldr	r1, [pc, #308]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d044      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d119      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e067      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4934      	ldr	r1, [pc, #208]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d94:	f7fc fe56 	bl	8001a44 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fc fe52 	bl	8001a44 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e04f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 020c 	and.w	r2, r3, #12
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1eb      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d20c      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e032      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4916      	ldr	r1, [pc, #88]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	490e      	ldr	r1, [pc, #56]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e2a:	f000 f821 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	490a      	ldr	r1, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fc fc14 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023c00 	.word	0x40023c00
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800b408 	.word	0x0800b408
 8004e68:	20000004 	.word	0x20000004
 8004e6c:	20000008 	.word	0x20000008

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b094      	sub	sp, #80	; 0x50
 8004e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	2300      	movs	r3, #0
 8004e82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e88:	4b79      	ldr	r3, [pc, #484]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d00d      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	f200 80e1 	bhi.w	800505c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ea2:	e0db      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ea8:	e0db      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_GetSysClockFreq+0x208>)
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eae:	e0d8      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb0:	4b6f      	ldr	r3, [pc, #444]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eba:	4b6d      	ldr	r3, [pc, #436]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d063      	beq.n	8004f8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec6:	4b6a      	ldr	r3, [pc, #424]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	2200      	movs	r2, #0
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eda:	2300      	movs	r3, #0
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	f04f 0000 	mov.w	r0, #0
 8004eea:	f04f 0100 	mov.w	r1, #0
 8004eee:	0159      	lsls	r1, r3, #5
 8004ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef4:	0150      	lsls	r0, r2, #5
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4621      	mov	r1, r4
 8004efc:	1a51      	subs	r1, r2, r1
 8004efe:	6139      	str	r1, [r7, #16]
 8004f00:	4629      	mov	r1, r5
 8004f02:	eb63 0301 	sbc.w	r3, r3, r1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f14:	4659      	mov	r1, fp
 8004f16:	018b      	lsls	r3, r1, #6
 8004f18:	4651      	mov	r1, sl
 8004f1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f1e:	4651      	mov	r1, sl
 8004f20:	018a      	lsls	r2, r1, #6
 8004f22:	4651      	mov	r1, sl
 8004f24:	ebb2 0801 	subs.w	r8, r2, r1
 8004f28:	4659      	mov	r1, fp
 8004f2a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f42:	4690      	mov	r8, r2
 8004f44:	4699      	mov	r9, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	eb18 0303 	adds.w	r3, r8, r3
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	462b      	mov	r3, r5
 8004f50:	eb49 0303 	adc.w	r3, r9, r3
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f62:	4629      	mov	r1, r5
 8004f64:	024b      	lsls	r3, r1, #9
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	024a      	lsls	r2, r1, #9
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f80:	f7fb f986 	bl	8000290 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	e058      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	4611      	mov	r1, r2
 8004f9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	f04f 0000 	mov.w	r0, #0
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	0159      	lsls	r1, r3, #5
 8004fb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fba:	0150      	lsls	r0, r2, #5
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	00eb      	lsls	r3, r5, #3
 8004ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff6:	00e2      	lsls	r2, r4, #3
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4643      	mov	r3, r8
 8004ffe:	18e3      	adds	r3, r4, r3
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	464b      	mov	r3, r9
 8005004:	eb45 0303 	adc.w	r3, r5, r3
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005016:	4629      	mov	r1, r5
 8005018:	028b      	lsls	r3, r1, #10
 800501a:	4621      	mov	r1, r4
 800501c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005020:	4621      	mov	r1, r4
 8005022:	028a      	lsls	r2, r1, #10
 8005024:	4610      	mov	r0, r2
 8005026:	4619      	mov	r1, r3
 8005028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502a:	2200      	movs	r2, #0
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	61fa      	str	r2, [r7, #28]
 8005030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005034:	f7fb f92c 	bl	8000290 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_GetSysClockFreq+0x200>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	3301      	adds	r3, #1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005054:	fbb2 f3f3 	udiv	r3, r2, r3
 8005058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetSysClockFreq+0x204>)
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005064:	4618      	mov	r0, r3
 8005066:	3750      	adds	r7, #80	; 0x50
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	00f42400 	.word	0x00f42400
 8005078:	007a1200 	.word	0x007a1200

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_GetHCLKFreq+0x14>)
 8005082:	681b      	ldr	r3, [r3, #0]
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000004 	.word	0x20000004

08005094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005098:	f7ff fff0 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4903      	ldr	r1, [pc, #12]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	0800b418 	.word	0x0800b418

080050bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c0:	f7ff ffdc 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0b5b      	lsrs	r3, r3, #13
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4903      	ldr	r1, [pc, #12]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	0800b418 	.word	0x0800b418

080050e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	220f      	movs	r2, #15
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050f4:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0203 	and.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_GetClockConfig+0x5c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	08db      	lsrs	r3, r3, #3
 800511e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCC_GetClockConfig+0x60>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 020f 	and.w	r2, r3, #15
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
 8005144:	40023c00 	.word	0x40023c00

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005178:	2b00      	cmp	r3, #0
 800517a:	d075      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800517c:	4b91      	ldr	r3, [pc, #580]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005182:	f7fc fc5f 	bl	8001a44 <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005188:	e008      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800518a:	f7fc fc5b 	bl	8001a44 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e189      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800519c:	4b8a      	ldr	r3, [pc, #552]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	019a      	lsls	r2, r3, #6
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	071b      	lsls	r3, r3, #28
 80051c0:	4981      	ldr	r1, [pc, #516]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01f      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051d4:	4b7c      	ldr	r3, [pc, #496]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051da:	0f1b      	lsrs	r3, r3, #28
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	019a      	lsls	r2, r3, #6
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	431a      	orrs	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	4974      	ldr	r1, [pc, #464]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051fc:	4b72      	ldr	r3, [pc, #456]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005202:	f023 021f 	bic.w	r2, r3, #31
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	3b01      	subs	r3, #1
 800520c:	496e      	ldr	r1, [pc, #440]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	019a      	lsls	r2, r3, #6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	071b      	lsls	r3, r3, #28
 8005234:	4964      	ldr	r1, [pc, #400]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fc fbff 	bl	8001a44 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fc fbfb 	bl	8001a44 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e129      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	4b5a      	ldr	r3, [pc, #360]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800527c:	2b00      	cmp	r3, #0
 800527e:	d079      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005280:	4b52      	ldr	r3, [pc, #328]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005286:	f7fc fbdd 	bl	8001a44 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800528e:	f7fc fbd9 	bl	8001a44 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e107      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052a0:	4b49      	ldr	r3, [pc, #292]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ac:	d0ef      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d020      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052ba:	4b43      	ldr	r3, [pc, #268]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	0f1b      	lsrs	r3, r3, #28
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	019a      	lsls	r2, r3, #6
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	061b      	lsls	r3, r3, #24
 80052d4:	431a      	orrs	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	071b      	lsls	r3, r3, #28
 80052da:	493b      	ldr	r1, [pc, #236]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052e2:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	4934      	ldr	r1, [pc, #208]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005308:	4b2f      	ldr	r3, [pc, #188]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	0e1b      	lsrs	r3, r3, #24
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	019a      	lsls	r2, r3, #6
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	061b      	lsls	r3, r3, #24
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	071b      	lsls	r3, r3, #28
 8005328:	4927      	ldr	r1, [pc, #156]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005336:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	4922      	ldr	r1, [pc, #136]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005346:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534c:	f7fc fb7a 	bl	8001a44 <HAL_GetTick>
 8005350:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005354:	f7fc fb76 	bl	8001a44 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0a4      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800536e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005372:	d1ef      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 808b 	beq.w	8005498 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005390:	6413      	str	r3, [r2, #64]	; 0x40
 8005392:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80053a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fc fb4b 	bl	8001a44 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053b0:	e010      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053b2:	f7fc fb47 	bl	8001a44 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d909      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e075      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80053c4:	42470068 	.word	0x42470068
 80053c8:	40023800 	.word	0x40023800
 80053cc:	42470070 	.word	0x42470070
 80053d0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053d4:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0e8      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e0:	4b36      	ldr	r3, [pc, #216]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02f      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d028      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053fe:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005408:	4b2d      	ldr	r3, [pc, #180]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005414:	4a29      	ldr	r2, [pc, #164]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800541a:	4b28      	ldr	r3, [pc, #160]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b01      	cmp	r3, #1
 8005424:	d114      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc fb0d 	bl	8001a44 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542c:	e00a      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542e:	f7fc fb09 	bl	8001a44 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f241 3288 	movw	r2, #5000	; 0x1388
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e035      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ee      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545c:	d10d      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800545e:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	4912      	ldr	r1, [pc, #72]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
 8005478:	e005      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005480:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005484:	6093      	str	r3, [r2, #8]
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	490a      	ldr	r1, [pc, #40]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005494:	4313      	orrs	r3, r2
 8005496:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80054ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40007000 	.word	0x40007000
 80054bc:	40023800 	.word	0x40023800
 80054c0:	42470e40 	.word	0x42470e40
 80054c4:	424711e0 	.word	0x424711e0

080054c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e025      	b.n	8005528 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fc f8b7 	bl	8001664 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3304      	adds	r3, #4
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f001 f8dd 	bl	80066c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	461a      	mov	r2, r3
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	f001 f932 	bl	8006782 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07b      	b.n	800563a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	d108      	bne.n	800555c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005552:	d009      	beq.n	8005568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
 800555a:	e005      	b.n	8005568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fed2 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	ea42 0103 	orr.w	r1, r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0104 	and.w	r1, r3, #4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	f003 0210 	and.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005628:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e041      	b.n	80056d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fb fea7 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3304      	adds	r3, #4
 800567e:	4619      	mov	r1, r3
 8005680:	4610      	mov	r0, r2
 8005682:	f000 fa95 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e04e      	b.n	8005796 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d01d      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <HAL_TIM_Base_Start_IT+0xdc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d111      	bne.n	8005784 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b06      	cmp	r3, #6
 8005770:	d010      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005782:	e007      	b.n	8005794 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40001800 	.word	0x40001800

080057c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d122      	bne.n	800581c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0202 	mvn.w	r2, #2
 80057ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9b5 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9a7 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f9b8 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b04      	cmp	r3, #4
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0204 	mvn.w	r2, #4
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f98b 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f97d 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f98e 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b08      	cmp	r3, #8
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0208 	mvn.w	r2, #8
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2204      	movs	r2, #4
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f961 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f953 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f964 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0210 	mvn.w	r2, #16
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2208      	movs	r2, #8
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f937 	bl	8005b72 <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f929 	bl	8005b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f93a 	bl	8005b86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0201 	mvn.w	r2, #1
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fa68 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b80      	cmp	r3, #128	; 0x80
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fae0 	bl	8005f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8ff 	bl	8005b9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0220 	mvn.w	r2, #32
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 faaa 	bl	8005f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_ConfigClockSource+0x1c>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0b4      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x186>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a24:	d03e      	beq.n	8005aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2a:	f200 8087 	bhi.w	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	f000 8086 	beq.w	8005b42 <HAL_TIM_ConfigClockSource+0x172>
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	d87f      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b70      	cmp	r3, #112	; 0x70
 8005a3e:	d01a      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0xa6>
 8005a40:	2b70      	cmp	r3, #112	; 0x70
 8005a42:	d87b      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b60      	cmp	r3, #96	; 0x60
 8005a46:	d050      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x11a>
 8005a48:	2b60      	cmp	r3, #96	; 0x60
 8005a4a:	d877      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b50      	cmp	r3, #80	; 0x50
 8005a4e:	d03c      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0xfa>
 8005a50:	2b50      	cmp	r3, #80	; 0x50
 8005a52:	d873      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d058      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0x13a>
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d86f      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d064      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15a>
 8005a60:	2b30      	cmp	r3, #48	; 0x30
 8005a62:	d86b      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	d060      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15a>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d867      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d05c      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15a>
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d05a      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	e062      	b.n	8005b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6899      	ldr	r1, [r3, #8]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f000 f9ad 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	609a      	str	r2, [r3, #8]
      break;
 8005aa2:	e04f      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6899      	ldr	r1, [r3, #8]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f000 f996 	bl	8005de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac6:	609a      	str	r2, [r3, #8]
      break;
 8005ac8:	e03c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 f90a 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2150      	movs	r1, #80	; 0x50
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f963 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e02c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6859      	ldr	r1, [r3, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f000 f929 	bl	8005d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2160      	movs	r1, #96	; 0x60
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f953 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005b08:	e01c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 f8ea 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2140      	movs	r1, #64	; 0x40
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f943 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005b28:	e00c      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f000 f93a 	bl	8005dae <TIM_ITRx_SetConfig>
      break;
 8005b3a:	e003      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d00f      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a3d      	ldr	r2, [pc, #244]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a3c      	ldr	r2, [pc, #240]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2f      	ldr	r2, [pc, #188]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d02b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d027      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <TIM_Base_SetConfig+0x118>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d023      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ccc <TIM_Base_SetConfig+0x11c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d01f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2a      	ldr	r2, [pc, #168]	; (8005cd0 <TIM_Base_SetConfig+0x120>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d017      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <TIM_Base_SetConfig+0x128>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <TIM_Base_SetConfig+0x12c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <TIM_Base_SetConfig+0x130>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <TIM_Base_SetConfig+0x134>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <TIM_Base_SetConfig+0x138>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	; (8005cec <TIM_Base_SetConfig+0x13c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d108      	bne.n	8005c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <TIM_Base_SetConfig+0x114>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0xf8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	; (8005cd4 <TIM_Base_SetConfig+0x124>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d103      	bne.n	8005cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	615a      	str	r2, [r3, #20]
}
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40000800 	.word	0x40000800
 8005cd0:	40000c00 	.word	0x40000c00
 8005cd4:	40010400 	.word	0x40010400
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800
 8005ce4:	40001800 	.word	0x40001800
 8005ce8:	40001c00 	.word	0x40001c00
 8005cec:	40002000 	.word	0x40002000

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0210 	bic.w	r2, r3, #16
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	031b      	lsls	r3, r3, #12
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f043 0307 	orr.w	r3, r3, #7
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
}
 8005dd8:	bf00      	nop
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e05a      	b.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d01d      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40010400 	.word	0x40010400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40001800 	.word	0x40001800

08005f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e03f      	b.n	8005fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb fa48 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f929 	bl	80061e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08a      	sub	sp, #40	; 0x28
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d17c      	bne.n	80060f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_UART_Transmit+0x2c>
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e075      	b.n	80060fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_UART_Transmit+0x3e>
 8006018:	2302      	movs	r3, #2
 800601a:	e06e      	b.n	80060fa <HAL_UART_Transmit+0x11c>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2221      	movs	r2, #33	; 0x21
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006032:	f7fb fd07 	bl	8001a44 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d108      	bne.n	8006060 <HAL_UART_Transmit+0x82>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	e003      	b.n	8006068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006070:	e02a      	b.n	80060c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	2180      	movs	r1, #128	; 0x80
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f840 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e036      	b.n	80060fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3302      	adds	r3, #2
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	e007      	b.n	80060ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1cf      	bne.n	8006072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2140      	movs	r1, #64	; 0x40
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f810 	bl	8006102 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e006      	b.n	80060fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b090      	sub	sp, #64	; 0x40
 8006106:	af00      	add	r7, sp, #0
 8006108:	60f8      	str	r0, [r7, #12]
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	603b      	str	r3, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006112:	e050      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d04c      	beq.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800611c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x30>
 8006122:	f7fb fc8f 	bl	8001a44 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800612e:	429a      	cmp	r2, r3
 8006130:	d241      	bcs.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	330c      	adds	r3, #12
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006152:	637a      	str	r2, [r7, #52]	; 0x34
 8006154:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	63bb      	str	r3, [r7, #56]	; 0x38
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006186:	623a      	str	r2, [r7, #32]
 8006188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	69f9      	ldr	r1, [r7, #28]
 800618c:	6a3a      	ldr	r2, [r7, #32]
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	61bb      	str	r3, [r7, #24]
   return(result);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e5      	bne.n	8006166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e00f      	b.n	80061d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	bf0c      	ite	eq
 80061c6:	2301      	moveq	r3, #1
 80061c8:	2300      	movne	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	461a      	mov	r2, r3
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d09f      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3740      	adds	r7, #64	; 0x40
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e4:	b0c0      	sub	sp, #256	; 0x100
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	68d9      	ldr	r1, [r3, #12]
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	ea40 0301 	orr.w	r3, r0, r1
 8006208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	431a      	orrs	r2, r3
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	431a      	orrs	r2, r3
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006238:	f021 010c 	bic.w	r1, r1, #12
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006246:	430b      	orrs	r3, r1
 8006248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	6999      	ldr	r1, [r3, #24]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	ea40 0301 	orr.w	r3, r0, r1
 8006266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4b8f      	ldr	r3, [pc, #572]	; (80064ac <UART_SetConfig+0x2cc>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d005      	beq.n	8006280 <UART_SetConfig+0xa0>
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b8d      	ldr	r3, [pc, #564]	; (80064b0 <UART_SetConfig+0x2d0>)
 800627c:	429a      	cmp	r2, r3
 800627e:	d104      	bne.n	800628a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006280:	f7fe ff1c 	bl	80050bc <HAL_RCC_GetPCLK2Freq>
 8006284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006288:	e003      	b.n	8006292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800628a:	f7fe ff03 	bl	8005094 <HAL_RCC_GetPCLK1Freq>
 800628e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629c:	f040 810c 	bne.w	80064b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	1891      	adds	r1, r2, r2
 80062b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ba:	415b      	adcs	r3, r3
 80062bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062c2:	4621      	mov	r1, r4
 80062c4:	eb12 0801 	adds.w	r8, r2, r1
 80062c8:	4629      	mov	r1, r5
 80062ca:	eb43 0901 	adc.w	r9, r3, r1
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e2:	4690      	mov	r8, r2
 80062e4:	4699      	mov	r9, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	eb18 0303 	adds.w	r3, r8, r3
 80062ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f0:	462b      	mov	r3, r5
 80062f2:	eb49 0303 	adc.w	r3, r9, r3
 80062f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800630a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800630e:	460b      	mov	r3, r1
 8006310:	18db      	adds	r3, r3, r3
 8006312:	653b      	str	r3, [r7, #80]	; 0x50
 8006314:	4613      	mov	r3, r2
 8006316:	eb42 0303 	adc.w	r3, r2, r3
 800631a:	657b      	str	r3, [r7, #84]	; 0x54
 800631c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006324:	f7f9 ffb4 	bl	8000290 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b61      	ldr	r3, [pc, #388]	; (80064b4 <UART_SetConfig+0x2d4>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011c      	lsls	r4, r3, #4
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006350:	415b      	adcs	r3, r3
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006358:	4641      	mov	r1, r8
 800635a:	eb12 0a01 	adds.w	sl, r2, r1
 800635e:	4649      	mov	r1, r9
 8006360:	eb43 0b01 	adc.w	fp, r3, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006378:	4692      	mov	sl, r2
 800637a:	469b      	mov	fp, r3
 800637c:	4643      	mov	r3, r8
 800637e:	eb1a 0303 	adds.w	r3, sl, r3
 8006382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006386:	464b      	mov	r3, r9
 8006388:	eb4b 0303 	adc.w	r3, fp, r3
 800638c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800639c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063a4:	460b      	mov	r3, r1
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	643b      	str	r3, [r7, #64]	; 0x40
 80063aa:	4613      	mov	r3, r2
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
 80063b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ba:	f7f9 ff69 	bl	8000290 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <UART_SetConfig+0x2d4>)
 80063c6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2264      	movs	r2, #100	; 0x64
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <UART_SetConfig+0x2d4>)
 80063dc:	fba3 2302 	umull	r2, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063e8:	441c      	add	r4, r3
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	63b9      	str	r1, [r7, #56]	; 0x38
 8006404:	415b      	adcs	r3, r3
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800640c:	4641      	mov	r1, r8
 800640e:	1851      	adds	r1, r2, r1
 8006410:	6339      	str	r1, [r7, #48]	; 0x30
 8006412:	4649      	mov	r1, r9
 8006414:	414b      	adcs	r3, r1
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006424:	4659      	mov	r1, fp
 8006426:	00cb      	lsls	r3, r1, #3
 8006428:	4651      	mov	r1, sl
 800642a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642e:	4651      	mov	r1, sl
 8006430:	00ca      	lsls	r2, r1, #3
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4603      	mov	r3, r0
 8006438:	4642      	mov	r2, r8
 800643a:	189b      	adds	r3, r3, r2
 800643c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800645c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006460:	460b      	mov	r3, r1
 8006462:	18db      	adds	r3, r3, r3
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	4613      	mov	r3, r2
 8006468:	eb42 0303 	adc.w	r3, r2, r3
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006476:	f7f9 ff0b 	bl	8000290 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <UART_SetConfig+0x2d4>)
 8006480:	fba3 1302 	umull	r1, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	2164      	movs	r1, #100	; 0x64
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	3332      	adds	r3, #50	; 0x32
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <UART_SetConfig+0x2d4>)
 8006494:	fba2 2303 	umull	r2, r3, r2, r3
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f003 0207 	and.w	r2, r3, #7
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4422      	add	r2, r4
 80064a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064a8:	e105      	b.n	80066b6 <UART_SetConfig+0x4d6>
 80064aa:	bf00      	nop
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064ca:	4642      	mov	r2, r8
 80064cc:	464b      	mov	r3, r9
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	6239      	str	r1, [r7, #32]
 80064d2:	415b      	adcs	r3, r3
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064da:	4641      	mov	r1, r8
 80064dc:	1854      	adds	r4, r2, r1
 80064de:	4649      	mov	r1, r9
 80064e0:	eb43 0501 	adc.w	r5, r3, r1
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	00eb      	lsls	r3, r5, #3
 80064ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f2:	00e2      	lsls	r2, r4, #3
 80064f4:	4614      	mov	r4, r2
 80064f6:	461d      	mov	r5, r3
 80064f8:	4643      	mov	r3, r8
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006500:	464b      	mov	r3, r9
 8006502:	eb45 0303 	adc.w	r3, r5, r3
 8006506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006526:	4629      	mov	r1, r5
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	4621      	mov	r1, r4
 800652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006530:	4621      	mov	r1, r4
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006538:	f7f9 feaa 	bl	8000290 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b60      	ldr	r3, [pc, #384]	; (80066c4 <UART_SetConfig+0x4e4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	011c      	lsls	r4, r3, #4
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	1891      	adds	r1, r2, r2
 8006562:	61b9      	str	r1, [r7, #24]
 8006564:	415b      	adcs	r3, r3
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656c:	4641      	mov	r1, r8
 800656e:	1851      	adds	r1, r2, r1
 8006570:	6139      	str	r1, [r7, #16]
 8006572:	4649      	mov	r1, r9
 8006574:	414b      	adcs	r3, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006584:	4659      	mov	r1, fp
 8006586:	00cb      	lsls	r3, r1, #3
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658e:	4651      	mov	r1, sl
 8006590:	00ca      	lsls	r2, r1, #3
 8006592:	4610      	mov	r0, r2
 8006594:	4619      	mov	r1, r3
 8006596:	4603      	mov	r3, r0
 8006598:	4642      	mov	r2, r8
 800659a:	189b      	adds	r3, r3, r2
 800659c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065a0:	464b      	mov	r3, r9
 80065a2:	460a      	mov	r2, r1
 80065a4:	eb42 0303 	adc.w	r3, r2, r3
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065c4:	4649      	mov	r1, r9
 80065c6:	008b      	lsls	r3, r1, #2
 80065c8:	4641      	mov	r1, r8
 80065ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ce:	4641      	mov	r1, r8
 80065d0:	008a      	lsls	r2, r1, #2
 80065d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065d6:	f7f9 fe5b 	bl	8000290 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <UART_SetConfig+0x4e4>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	; 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	3332      	adds	r3, #50	; 0x32
 80065f2:	4a34      	ldr	r2, [pc, #208]	; (80066c4 <UART_SetConfig+0x4e4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fe:	441c      	add	r4, r3
 8006600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006604:	2200      	movs	r2, #0
 8006606:	673b      	str	r3, [r7, #112]	; 0x70
 8006608:	677a      	str	r2, [r7, #116]	; 0x74
 800660a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	1891      	adds	r1, r2, r2
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	415b      	adcs	r3, r3
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800661e:	4641      	mov	r1, r8
 8006620:	1851      	adds	r1, r2, r1
 8006622:	6039      	str	r1, [r7, #0]
 8006624:	4649      	mov	r1, r9
 8006626:	414b      	adcs	r3, r1
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006636:	4659      	mov	r1, fp
 8006638:	00cb      	lsls	r3, r1, #3
 800663a:	4651      	mov	r1, sl
 800663c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006640:	4651      	mov	r1, sl
 8006642:	00ca      	lsls	r2, r1, #3
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	4603      	mov	r3, r0
 800664a:	4642      	mov	r2, r8
 800664c:	189b      	adds	r3, r3, r2
 800664e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006650:	464b      	mov	r3, r9
 8006652:	460a      	mov	r2, r1
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	663b      	str	r3, [r7, #96]	; 0x60
 8006664:	667a      	str	r2, [r7, #100]	; 0x64
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006672:	4649      	mov	r1, r9
 8006674:	008b      	lsls	r3, r1, #2
 8006676:	4641      	mov	r1, r8
 8006678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800667c:	4641      	mov	r1, r8
 800667e:	008a      	lsls	r2, r1, #2
 8006680:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006684:	f7f9 fe04 	bl	8000290 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <UART_SetConfig+0x4e4>)
 800668e:	fba3 1302 	umull	r1, r3, r3, r2
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2164      	movs	r1, #100	; 0x64
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	3332      	adds	r3, #50	; 0x32
 80066a0:	4a08      	ldr	r2, [pc, #32]	; (80066c4 <UART_SetConfig+0x4e4>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4422      	add	r2, r4
 80066b4:	609a      	str	r2, [r3, #8]
}
 80066b6:	bf00      	nop
 80066b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066bc:	46bd      	mov	sp, r7
 80066be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c2:	bf00      	nop
 80066c4:	51eb851f 	.word	0x51eb851f

080066c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d123      	bne.n	8006722 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80066e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	6851      	ldr	r1, [r2, #4]
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	6892      	ldr	r2, [r2, #8]
 80066ee:	4311      	orrs	r1, r2
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	68d2      	ldr	r2, [r2, #12]
 80066f4:	4311      	orrs	r1, r2
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	6912      	ldr	r2, [r2, #16]
 80066fa:	4311      	orrs	r1, r2
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	6952      	ldr	r2, [r2, #20]
 8006700:	4311      	orrs	r1, r2
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	6992      	ldr	r2, [r2, #24]
 8006706:	4311      	orrs	r1, r2
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	69d2      	ldr	r2, [r2, #28]
 800670c:	4311      	orrs	r1, r2
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	6a12      	ldr	r2, [r2, #32]
 8006712:	4311      	orrs	r1, r2
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006718:	430a      	orrs	r2, r1
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e028      	b.n	8006774 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	69d9      	ldr	r1, [r3, #28]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	4319      	orrs	r1, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	430b      	orrs	r3, r1
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	6851      	ldr	r1, [r2, #4]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	6892      	ldr	r2, [r2, #8]
 8006754:	4311      	orrs	r1, r2
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	68d2      	ldr	r2, [r2, #12]
 800675a:	4311      	orrs	r1, r2
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	6912      	ldr	r2, [r2, #16]
 8006760:	4311      	orrs	r1, r2
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	6952      	ldr	r2, [r2, #20]
 8006766:	4311      	orrs	r1, r2
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	6992      	ldr	r2, [r2, #24]
 800676c:	430a      	orrs	r2, r1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d128      	bne.n	80067e6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1e59      	subs	r1, r3, #1
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	4319      	orrs	r1, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	4319      	orrs	r1, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	031b      	lsls	r3, r3, #12
 80067be:	4319      	orrs	r1, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	4319      	orrs	r1, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	051b      	lsls	r3, r3, #20
 80067d2:	4319      	orrs	r1, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	3b01      	subs	r3, #1
 80067da:	061b      	lsls	r3, r3, #24
 80067dc:	430b      	orrs	r3, r1
 80067de:	431a      	orrs	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	e02f      	b.n	8006846 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	68d2      	ldr	r2, [r2, #12]
 80067f6:	3a01      	subs	r2, #1
 80067f8:	0311      	lsls	r1, r2, #12
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	6952      	ldr	r2, [r2, #20]
 80067fe:	3a01      	subs	r2, #1
 8006800:	0512      	lsls	r2, r2, #20
 8006802:	430a      	orrs	r2, r1
 8006804:	431a      	orrs	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	1e59      	subs	r1, r3, #1
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	3b01      	subs	r3, #1
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	4319      	orrs	r1, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	3b01      	subs	r3, #1
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	4319      	orrs	r1, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	3b01      	subs	r3, #1
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	4319      	orrs	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	3b01      	subs	r3, #1
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	430b      	orrs	r3, r1
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006854:	b084      	sub	sp, #16
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	f107 001c 	add.w	r0, r7, #28
 8006862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	2b01      	cmp	r3, #1
 800686a:	d122      	bne.n	80068b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006896:	2b01      	cmp	r3, #1
 8006898:	d105      	bne.n	80068a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9c0 	bl	8006c2c <USB_CoreReset>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	e01a      	b.n	80068e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9b4 	bl	8006c2c <USB_CoreReset>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
 80068da:	e005      	b.n	80068e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10b      	bne.n	8006906 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f043 0206 	orr.w	r2, r3, #6
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006912:	b004      	add	sp, #16
 8006914:	4770      	bx	lr

08006916 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 0201 	bic.w	r2, r3, #1
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d115      	bne.n	80069a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006988:	2001      	movs	r0, #1
 800698a:	f7fb f867 	bl	8001a5c <HAL_Delay>
      ms++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f93a 	bl	8006c0e <USB_GetMode>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
 800699e:	d01e      	beq.n	80069de <USB_SetCurrentMode+0x84>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b31      	cmp	r3, #49	; 0x31
 80069a4:	d9f0      	bls.n	8006988 <USB_SetCurrentMode+0x2e>
 80069a6:	e01a      	b.n	80069de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d115      	bne.n	80069da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069ba:	2001      	movs	r0, #1
 80069bc:	f7fb f84e 	bl	8001a5c <HAL_Delay>
      ms++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f921 	bl	8006c0e <USB_GetMode>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <USB_SetCurrentMode+0x84>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b31      	cmp	r3, #49	; 0x31
 80069d6:	d9f0      	bls.n	80069ba <USB_SetCurrentMode+0x60>
 80069d8:	e001      	b.n	80069de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e005      	b.n	80069ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b32      	cmp	r3, #50	; 0x32
 80069e2:	d101      	bne.n	80069e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a13      	ldr	r2, [pc, #76]	; (8006a58 <USB_FlushTxFifo+0x64>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d901      	bls.n	8006a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e01b      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	daf2      	bge.n	8006a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	019b      	lsls	r3, r3, #6
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a08      	ldr	r2, [pc, #32]	; (8006a58 <USB_FlushTxFifo+0x64>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e006      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d0f0      	beq.n	8006a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	00030d40 	.word	0x00030d40

08006a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a11      	ldr	r2, [pc, #68]	; (8006ab8 <USB_FlushRxFifo+0x5c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e018      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	daf2      	bge.n	8006a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <USB_FlushRxFifo+0x5c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e006      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d0f0      	beq.n	8006a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	00030d40 	.word	0x00030d40

08006abc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	460b      	mov	r3, r1
 8006acc:	71fb      	strb	r3, [r7, #7]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ada:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d123      	bne.n	8006b2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ae2:	88bb      	ldrh	r3, [r7, #4]
 8006ae4:	3303      	adds	r3, #3
 8006ae6:	089b      	lsrs	r3, r3, #2
 8006ae8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006aea:	2300      	movs	r3, #0
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e018      	b.n	8006b22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	031a      	lsls	r2, r3, #12
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afc:	461a      	mov	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3e2      	bcc.n	8006af0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3724      	adds	r7, #36	; 0x24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b08b      	sub	sp, #44	; 0x2c
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	623b      	str	r3, [r7, #32]
 8006b62:	e014      	b.n	8006b8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	3301      	adds	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	3301      	adds	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	3301      	adds	r3, #1
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	3301      	adds	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d3e6      	bcc.n	8006b64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b96:	8bfb      	ldrh	r3, [r7, #30]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01e      	beq.n	8006bda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f107 0310 	add.w	r3, r7, #16
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	701a      	strb	r2, [r3, #0]
      i++;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	3301      	adds	r3, #1
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bce:	8bfb      	ldrh	r3, [r7, #30]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bd4:	8bfb      	ldrh	r3, [r7, #30]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1ea      	bne.n	8006bb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	372c      	adds	r7, #44	; 0x2c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <USB_CoreReset+0x64>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e01b      	b.n	8006c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	daf2      	bge.n	8006c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f043 0201 	orr.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <USB_CoreReset+0x64>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e006      	b.n	8006c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d0f0      	beq.n	8006c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	00030d40 	.word	0x00030d40

08006c94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c94:	b084      	sub	sp, #16
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d018      	beq.n	8006d1c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10a      	bne.n	8006d06 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cfe:	f043 0304 	orr.w	r3, r3, #4
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e014      	b.n	8006d30 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d14:	f023 0304 	bic.w	r3, r3, #4
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e009      	b.n	8006d30 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2a:	f023 0304 	bic.w	r3, r3, #4
 8006d2e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d30:	2110      	movs	r1, #16
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fe5e 	bl	80069f4 <USB_FlushTxFifo>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff fe8a 	bl	8006a5c <USB_FlushRxFifo>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	e015      	b.n	8006d84 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3301      	adds	r3, #1
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3e5      	bcc.n	8006d58 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <USB_HostInit+0x16c>)
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <USB_HostInit+0x170>)
 8006db8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006dbc:	e009      	b.n	8006dd2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2280      	movs	r2, #128	; 0x80
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a10      	ldr	r2, [pc, #64]	; (8006e08 <USB_HostInit+0x174>)
 8006dc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a0f      	ldr	r2, [pc, #60]	; (8006e0c <USB_HostInit+0x178>)
 8006dce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d105      	bne.n	8006de4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f043 0210 	orr.w	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <USB_HostInit+0x17c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dfc:	b004      	add	sp, #16
 8006dfe:	4770      	bx	lr
 8006e00:	01000200 	.word	0x01000200
 8006e04:	00e00300 	.word	0x00e00300
 8006e08:	00600080 	.word	0x00600080
 8006e0c:	004000e0 	.word	0x004000e0
 8006e10:	a3200008 	.word	0xa3200008

08006e14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d107      	bne.n	8006e66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e62:	6053      	str	r3, [r2, #4]
 8006e64:	e009      	b.n	8006e7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d106      	bne.n	8006e7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e72:	461a      	mov	r2, r3
 8006e74:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006eb8:	2064      	movs	r0, #100	; 0x64
 8006eba:	f7fa fdcf 	bl	8001a5c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ecc:	200a      	movs	r0, #10
 8006ece:	f7fa fdc5 	bl	8001a5c <HAL_Delay>

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <USB_DriveVbus+0x44>
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d106      	bne.n	8006f20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2a:	d109      	bne.n	8006f40 <USB_DriveVbus+0x64>
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b085      	sub	sp, #20
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	0c5b      	lsrs	r3, r3, #17
 8006f6c:	f003 0303 	and.w	r3, r3, #3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	b29b      	uxth	r3, r3
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	70fb      	strb	r3, [r7, #3]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70bb      	strb	r3, [r7, #2]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d87e      	bhi.n	80070dc <USB_HC_Init+0x13c>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <USB_HC_Init+0x44>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ff5 	.word	0x08006ff5
 8006fe8:	0800709f 	.word	0x0800709f
 8006fec:	08006ff5 	.word	0x08006ff5
 8006ff0:	08007061 	.word	0x08007061
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	461a      	mov	r2, r3
 8007002:	f240 439d 	movw	r3, #1181	; 0x49d
 8007006:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800700c:	2b00      	cmp	r3, #0
 800700e:	da10      	bge.n	8007032 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	440a      	add	r2, r1
 8007026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800702a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007030:	e057      	b.n	80070e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d051      	beq.n	80070e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800703e:	78fb      	ldrb	r3, [r7, #3]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	440a      	add	r2, r1
 8007054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007058:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800705c:	60d3      	str	r3, [r2, #12]
      break;
 800705e:	e040      	b.n	80070e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	461a      	mov	r2, r3
 800706e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007072:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007074:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007078:	2b00      	cmp	r3, #0
 800707a:	da34      	bge.n	80070e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	440a      	add	r2, r1
 8007092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800709a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800709c:	e023      	b.n	80070e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800709e:	78fb      	ldrb	r3, [r7, #3]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	461a      	mov	r2, r3
 80070ac:	f240 2325 	movw	r3, #549	; 0x225
 80070b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80070b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da17      	bge.n	80070ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80070d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80070da:	e006      	b.n	80070ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	77fb      	strb	r3, [r7, #31]
      break;
 80070e0:	e004      	b.n	80070ec <USB_HC_Init+0x14c>
      break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <USB_HC_Init+0x14c>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <USB_HC_Init+0x14c>
      break;
 80070ea:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	440a      	add	r2, r1
 8007102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007106:	f043 0302 	orr.w	r3, r3, #2
 800710a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	2101      	movs	r1, #1
 800711c:	fa01 f303 	lsl.w	r3, r1, r3
 8007120:	6939      	ldr	r1, [r7, #16]
 8007122:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007126:	4313      	orrs	r3, r2
 8007128:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007136:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800713a:	2b00      	cmp	r3, #0
 800713c:	da03      	bge.n	8007146 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800713e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e001      	b.n	800714a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff feff 	bl	8006f4e <USB_GetHostSpeed>
 8007150:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007156:	2b02      	cmp	r3, #2
 8007158:	d106      	bne.n	8007168 <USB_HC_Init+0x1c8>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d003      	beq.n	8007168 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e001      	b.n	800716c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	059b      	lsls	r3, r3, #22
 8007170:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007174:	78bb      	ldrb	r3, [r7, #2]
 8007176:	02db      	lsls	r3, r3, #11
 8007178:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800717c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800717e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007182:	049b      	lsls	r3, r3, #18
 8007184:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007188:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800718a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800718c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007190:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	0159      	lsls	r1, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	440b      	add	r3, r1
 800719e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80071a8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80071aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d003      	beq.n	80071ba <USB_HC_Init+0x21a>
 80071b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d10f      	bne.n	80071da <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80071da:	7ffb      	ldrb	r3, [r7, #31]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	; 0x30
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80071fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007200:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02d      	beq.n	800726a <USB_HC_StartXfer+0x86>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	791b      	ldrb	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d129      	bne.n	800726a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d117      	bne.n	800724c <USB_HC_StartXfer+0x68>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	79db      	ldrb	r3, [r3, #7]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <USB_HC_StartXfer+0x48>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	79db      	ldrb	r3, [r3, #7]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d10f      	bne.n	800724c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	0151      	lsls	r1, r2, #5
 800723e:	6a3a      	ldr	r2, [r7, #32]
 8007240:	440a      	add	r2, r1
 8007242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10b      	bne.n	800726a <USB_HC_StartXfer+0x86>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	795b      	ldrb	r3, [r3, #5]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d107      	bne.n	800726a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fa0f 	bl	8007684 <USB_DoPing>
      return HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	e0f8      	b.n	800745c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	8912      	ldrh	r2, [r2, #8]
 800727a:	4413      	add	r3, r2
 800727c:	3b01      	subs	r3, #1
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	8912      	ldrh	r2, [r2, #8]
 8007282:	fbb3 f3f2 	udiv	r3, r3, r2
 8007286:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007288:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800728a:	8b7b      	ldrh	r3, [r7, #26]
 800728c:	429a      	cmp	r2, r3
 800728e:	d90b      	bls.n	80072a8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007290:	8b7b      	ldrh	r3, [r7, #26]
 8007292:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	8912      	ldrh	r2, [r2, #8]
 800729a:	fb03 f202 	mul.w	r2, r3, r2
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	611a      	str	r2, [r3, #16]
 80072a2:	e001      	b.n	80072a8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80072a4:	2301      	movs	r3, #1
 80072a6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	78db      	ldrb	r3, [r3, #3]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80072b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	8912      	ldrh	r2, [r2, #8]
 80072b6:	fb03 f202 	mul.w	r2, r3, r2
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	611a      	str	r2, [r3, #16]
 80072be:	e003      	b.n	80072c8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	695a      	ldr	r2, [r3, #20]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072d2:	04d9      	lsls	r1, r3, #19
 80072d4:	4b63      	ldr	r3, [pc, #396]	; (8007464 <USB_HC_StartXfer+0x280>)
 80072d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	7a9b      	ldrb	r3, [r3, #10]
 80072de:	075b      	lsls	r3, r3, #29
 80072e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	0148      	lsls	r0, r1, #5
 80072e8:	6a39      	ldr	r1, [r7, #32]
 80072ea:	4401      	add	r1, r0
 80072ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80072f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80072f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	68d9      	ldr	r1, [r3, #12]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	460a      	mov	r2, r1
 800730c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	bf0c      	ite	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	2300      	movne	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	4413      	add	r3, r2
 800732e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	440a      	add	r2, r1
 800733c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007340:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007344:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	7e7b      	ldrb	r3, [r7, #25]
 8007356:	075b      	lsls	r3, r3, #29
 8007358:	69f9      	ldr	r1, [r7, #28]
 800735a:	0148      	lsls	r0, r1, #5
 800735c:	6a39      	ldr	r1, [r7, #32]
 800735e:	4401      	add	r1, r0
 8007360:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007364:	4313      	orrs	r3, r2
 8007366:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	4413      	add	r3, r2
 8007370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800737e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	e003      	b.n	800739a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007398:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ae:	461a      	mov	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e04e      	b.n	800745c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	78db      	ldrb	r3, [r3, #3]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d149      	bne.n	800745a <USB_HC_StartXfer+0x276>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d045      	beq.n	800745a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	79db      	ldrb	r3, [r3, #7]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d830      	bhi.n	8007438 <USB_HC_StartXfer+0x254>
 80073d6:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <USB_HC_StartXfer+0x1f8>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	080073ed 	.word	0x080073ed
 80073e0:	08007411 	.word	0x08007411
 80073e4:	080073ed 	.word	0x080073ed
 80073e8:	08007411 	.word	0x08007411
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	3303      	adds	r3, #3
 80073f2:	089b      	lsrs	r3, r3, #2
 80073f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80073f6:	8afa      	ldrh	r2, [r7, #22]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	429a      	cmp	r2, r3
 8007400:	d91c      	bls.n	800743c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f043 0220 	orr.w	r2, r3, #32
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	619a      	str	r2, [r3, #24]
        }
        break;
 800740e:	e015      	b.n	800743c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	3303      	adds	r3, #3
 8007416:	089b      	lsrs	r3, r3, #2
 8007418:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800741a:	8afa      	ldrh	r2, [r7, #22]
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	b29b      	uxth	r3, r3
 8007426:	429a      	cmp	r2, r3
 8007428:	d90a      	bls.n	8007440 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	619a      	str	r2, [r3, #24]
        }
        break;
 8007436:	e003      	b.n	8007440 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <USB_HC_StartXfer+0x25e>
        break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <USB_HC_StartXfer+0x25e>
        break;
 8007440:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	68d9      	ldr	r1, [r3, #12]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	785a      	ldrb	r2, [r3, #1]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	b29b      	uxth	r3, r3
 8007450:	2000      	movs	r0, #0
 8007452:	9000      	str	r0, [sp, #0]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff fb31 	bl	8006abc <USB_WritePacket>
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3728      	adds	r7, #40	; 0x28
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	1ff80000 	.word	0x1ff80000

08007468 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	b29b      	uxth	r3, r3
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800748a:	b480      	push	{r7}
 800748c:	b089      	sub	sp, #36	; 0x24
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	0c9b      	lsrs	r3, r3, #18
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	0fdb      	lsrs	r3, r3, #31
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d104      	bne.n	80074e4 <USB_HC_Halt+0x5a>
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e0c8      	b.n	8007676 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <USB_HC_Halt+0x66>
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d163      	bne.n	80075b8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	440a      	add	r2, r1
 8007506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800750a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800750e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	f040 80ab 	bne.w	8007674 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d133      	bne.n	8007592 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	440a      	add	r2, r1
 8007540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007548:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	440a      	add	r2, r1
 8007560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007568:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007576:	d81d      	bhi.n	80075b4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800758a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800758e:	d0ec      	beq.n	800756a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007590:	e070      	b.n	8007674 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075b2:	e05f      	b.n	8007674 <USB_HC_Halt+0x1ea>
            break;
 80075b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075b6:	e05d      	b.n	8007674 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d133      	bne.n	8007650 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007606:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	440a      	add	r2, r1
 800761e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007626:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007634:	d81d      	bhi.n	8007672 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764c:	d0ec      	beq.n	8007628 <USB_HC_Halt+0x19e>
 800764e:	e011      	b.n	8007674 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800766a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e000      	b.n	8007674 <USB_HC_Halt+0x1ea>
          break;
 8007672:	bf00      	nop
    }
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007698:	2301      	movs	r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	04da      	lsls	r2, r3, #19
 80076a0:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <USB_DoPing+0x74>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	1ff80000 	.word	0x1ff80000

080076fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff f911 	bl	8006938 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007716:	2110      	movs	r1, #16
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff f96b 	bl	80069f4 <USB_FlushTxFifo>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff f997 	bl	8006a5c <USB_FlushRxFifo>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007738:	2300      	movs	r3, #0
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	e01f      	b.n	800777e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007754:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800775c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007764:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007772:	461a      	mov	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	3301      	adds	r3, #1
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2b0f      	cmp	r3, #15
 8007782:	d9dc      	bls.n	800773e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	e034      	b.n	80077f4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077be:	461a      	mov	r2, r3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d0:	d80c      	bhi.n	80077ec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e8:	d0ec      	beq.n	80077c4 <USB_StopHost+0xc8>
 80077ea:	e000      	b.n	80077ee <USB_StopHost+0xf2>
        break;
 80077ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	3301      	adds	r3, #1
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d9c7      	bls.n	800778a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007800:	461a      	mov	r2, r3
 8007802:	f04f 33ff 	mov.w	r3, #4294967295
 8007806:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f04f 32ff 	mov.w	r2, #4294967295
 800780e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff f880 	bl	8006916 <USB_EnableGlobalInt>

  return ret;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b089      	sub	sp, #36	; 0x24
 8007824:	af04      	add	r7, sp, #16
 8007826:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007828:	2301      	movs	r3, #1
 800782a:	2202      	movs	r2, #2
 800782c:	2102      	movs	r1, #2
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fc66 	bl	8008100 <USBH_FindInterface>
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	2bff      	cmp	r3, #255	; 0xff
 800783c:	d002      	beq.n	8007844 <USBH_CDC_InterfaceInit+0x24>
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d901      	bls.n	8007848 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007844:	2302      	movs	r3, #2
 8007846:	e13d      	b.n	8007ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc3b 	bl	80080c8 <USBH_SelectInterface>
 8007852:	4603      	mov	r3, r0
 8007854:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800785c:	2302      	movs	r3, #2
 800785e:	e131      	b.n	8007ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007866:	2050      	movs	r0, #80	; 0x50
 8007868:	f002 fb00 	bl	8009e6c <malloc>
 800786c:	4603      	mov	r3, r0
 800786e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007880:	2302      	movs	r3, #2
 8007882:	e11f      	b.n	8007ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007884:	2250      	movs	r2, #80	; 0x50
 8007886:	2100      	movs	r1, #0
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f002 faff 	bl	8009e8c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	211a      	movs	r1, #26
 8007894:	fb01 f303 	mul.w	r3, r1, r3
 8007898:	4413      	add	r3, r2
 800789a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da15      	bge.n	80078d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	211a      	movs	r1, #26
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	211a      	movs	r1, #26
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078cc:	881a      	ldrh	r2, [r3, #0]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 ff2c 	bl	8009736 <USBH_AllocPipe>
 80078de:	4603      	mov	r3, r0
 80078e0:	461a      	mov	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	7819      	ldrb	r1, [r3, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	7858      	ldrb	r0, [r3, #1]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	8952      	ldrh	r2, [r2, #10]
 80078fe:	9202      	str	r2, [sp, #8]
 8007900:	2203      	movs	r2, #3
 8007902:	9201      	str	r2, [sp, #4]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4623      	mov	r3, r4
 8007908:	4602      	mov	r2, r0
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fee4 	bl	80096d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2200      	movs	r2, #0
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f002 f9f9 	bl	8009d10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	210a      	movs	r1, #10
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fbeb 	bl	8008100 <USBH_FindInterface>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2bff      	cmp	r3, #255	; 0xff
 8007932:	d002      	beq.n	800793a <USBH_CDC_InterfaceInit+0x11a>
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d901      	bls.n	800793e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800793a:	2302      	movs	r3, #2
 800793c:	e0c2      	b.n	8007ac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	211a      	movs	r1, #26
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b25b      	sxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	da16      	bge.n	8007984 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	211a      	movs	r1, #26
 800795c:	fb01 f303 	mul.w	r3, r1, r3
 8007960:	4413      	add	r3, r2
 8007962:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007966:	781a      	ldrb	r2, [r3, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	211a      	movs	r1, #26
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	4413      	add	r3, r2
 8007978:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800797c:	881a      	ldrh	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	835a      	strh	r2, [r3, #26]
 8007982:	e015      	b.n	80079b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	211a      	movs	r1, #26
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	211a      	movs	r1, #26
 80079a0:	fb01 f303 	mul.w	r3, r1, r3
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80079aa:	881a      	ldrh	r2, [r3, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	211a      	movs	r1, #26
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da16      	bge.n	80079f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	211a      	movs	r1, #26
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	211a      	movs	r1, #26
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80079ee:	881a      	ldrh	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	835a      	strh	r2, [r3, #26]
 80079f4:	e015      	b.n	8007a22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	211a      	movs	r1, #26
 80079fc:	fb01 f303 	mul.w	r3, r1, r3
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	211a      	movs	r1, #26
 8007a12:	fb01 f303 	mul.w	r3, r1, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	7b9b      	ldrb	r3, [r3, #14]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 fe84 	bl	8009736 <USBH_AllocPipe>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	7bdb      	ldrb	r3, [r3, #15]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fe7a 	bl	8009736 <USBH_AllocPipe>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	7b59      	ldrb	r1, [r3, #13]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	7b98      	ldrb	r0, [r3, #14]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	8b12      	ldrh	r2, [r2, #24]
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	2202      	movs	r2, #2
 8007a66:	9201      	str	r2, [sp, #4]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fe32 	bl	80096d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	7b19      	ldrb	r1, [r3, #12]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	7bd8      	ldrb	r0, [r3, #15]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	8b52      	ldrh	r2, [r2, #26]
 8007a8c:	9202      	str	r2, [sp, #8]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4623      	mov	r3, r4
 8007a96:	4602      	mov	r2, r0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fe1d 	bl	80096d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	7b5b      	ldrb	r3, [r3, #13]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 f92e 	bl	8009d10 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f002 f927 	bl	8009d10 <USBH_LL_SetToggle>

  return USBH_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}

08007acc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00e      	beq.n	8007b04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fe12 	bl	8009716 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fe3d 	bl	8009778 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	7b1b      	ldrb	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00e      	beq.n	8007b2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	7b1b      	ldrb	r3, [r3, #12]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fdff 	bl	8009716 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7b1b      	ldrb	r3, [r3, #12]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fe2a 	bl	8009778 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	7b5b      	ldrb	r3, [r3, #13]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7b5b      	ldrb	r3, [r3, #13]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fdec 	bl	8009716 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	7b5b      	ldrb	r3, [r3, #13]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fe17 	bl	8009778 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 f989 	bl	8009e7c <free>
    phost->pActiveClass->pData = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b70:	2200      	movs	r2, #0
 8007b72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3340      	adds	r3, #64	; 0x40
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8b1 	bl	8007cfe <GetLineCoding>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007ba0:	7afb      	ldrb	r3, [r7, #11]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bac:	2102      	movs	r1, #2
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d877      	bhi.n	8007cd0 <USBH_CDC_Process+0x114>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <USBH_CDC_Process+0x2c>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007bfd 	.word	0x08007bfd
 8007bec:	08007c03 	.word	0x08007c03
 8007bf0:	08007c33 	.word	0x08007c33
 8007bf4:	08007ca7 	.word	0x08007ca7
 8007bf8:	08007cb5 	.word	0x08007cb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007c00:	e06d      	b.n	8007cde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f897 	bl	8007d3c <SetLineCoding>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c20:	e058      	b.n	8007cd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d055      	beq.n	8007cd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007c30:	e050      	b.n	8007cd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	3340      	adds	r3, #64	; 0x40
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f860 	bl	8007cfe <GetLineCoding>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d126      	bne.n	8007c96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5a:	791b      	ldrb	r3, [r3, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d13b      	bne.n	8007cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d133      	bne.n	8007cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d12b      	bne.n	8007cd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d124      	bne.n	8007cd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f958 	bl	8007f44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007c94:	e020      	b.n	8007cd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d01d      	beq.n	8007cd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2204      	movs	r2, #4
 8007ca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ca4:	e018      	b.n	8007cd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f867 	bl	8007d7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8da 	bl	8007e66 <CDC_ProcessReception>
      break;
 8007cb2:	e014      	b.n	8007cde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 ffef 	bl	8008c9a <USBH_ClrFeature>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007cce:	e005      	b.n	8007cdc <USBH_CDC_Process+0x120>

    default:
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e004      	b.n	8007cde <USBH_CDC_Process+0x122>
      break;
 8007cd4:	bf00      	nop
 8007cd6:	e002      	b.n	8007cde <USBH_CDC_Process+0x122>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e000      	b.n	8007cde <USBH_CDC_Process+0x122>
      break;
 8007cdc:	bf00      	nop

  }

  return status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	22a1      	movs	r2, #161	; 0xa1
 8007d0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2221      	movs	r2, #33	; 0x21
 8007d12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2207      	movs	r2, #7
 8007d24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2207      	movs	r2, #7
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fa81 	bl	8009234 <USBH_CtlReq>
 8007d32:	4603      	mov	r3, r0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2221      	movs	r2, #33	; 0x21
 8007d4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2207      	movs	r2, #7
 8007d62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2207      	movs	r2, #7
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fa62 	bl	8009234 <USBH_CtlReq>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af02      	add	r7, sp, #8
 8007d80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d002      	beq.n	8007da0 <CDC_ProcessTransmission+0x26>
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d023      	beq.n	8007de6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007d9e:	e05e      	b.n	8007e5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	8b12      	ldrh	r2, [r2, #24]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d90b      	bls.n	8007dc4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	69d9      	ldr	r1, [r3, #28]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8b1a      	ldrh	r2, [r3, #24]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	7b5b      	ldrb	r3, [r3, #13]
 8007db8:	2001      	movs	r0, #1
 8007dba:	9000      	str	r0, [sp, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 fc48 	bl	8009652 <USBH_BulkSendData>
 8007dc2:	e00b      	b.n	8007ddc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	7b5b      	ldrb	r3, [r3, #13]
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	9000      	str	r0, [sp, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 fc3b 	bl	8009652 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007de4:	e03b      	b.n	8007e5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	7b5b      	ldrb	r3, [r3, #13]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 ff65 	bl	8009cbc <USBH_LL_GetURBState>
 8007df2:	4603      	mov	r3, r0
 8007df4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d128      	bne.n	8007e4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	8b12      	ldrh	r2, [r2, #24]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d90e      	bls.n	8007e26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	8b12      	ldrh	r2, [r2, #24]
 8007e10:	1a9a      	subs	r2, r3, r2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	8b12      	ldrh	r2, [r2, #24]
 8007e1e:	441a      	add	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	61da      	str	r2, [r3, #28]
 8007e24:	e002      	b.n	8007e2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d004      	beq.n	8007e3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e3c:	e00e      	b.n	8007e5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f868 	bl	8007f1c <USBH_CDC_TransmitCallback>
      break;
 8007e4c:	e006      	b.n	8007e5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d103      	bne.n	8007e5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007e5c:	bf00      	nop
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b086      	sub	sp, #24
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d002      	beq.n	8007e8c <CDC_ProcessReception+0x26>
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d00e      	beq.n	8007ea8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007e8a:	e043      	b.n	8007f14 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	6a19      	ldr	r1, [r3, #32]
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	8b5a      	ldrh	r2, [r3, #26]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	7b1b      	ldrb	r3, [r3, #12]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fbff 	bl	800969c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2204      	movs	r2, #4
 8007ea2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ea6:	e035      	b.n	8007f14 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	7b1b      	ldrb	r3, [r3, #12]
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 ff04 	bl	8009cbc <USBH_LL_GetURBState>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007eb8:	7cfb      	ldrb	r3, [r7, #19]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d129      	bne.n	8007f12 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	7b1b      	ldrb	r3, [r3, #12]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 fe67 	bl	8009b98 <USBH_LL_GetLastXferSize>
 8007eca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d016      	beq.n	8007f04 <CDC_ProcessReception+0x9e>
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	8b5b      	ldrh	r3, [r3, #26]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d910      	bls.n	8007f04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	6a1a      	ldr	r2, [r3, #32]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007f02:	e006      	b.n	8007f12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f80f 	bl	8007f30 <USBH_CDC_ReceiveCallback>
      break;
 8007f12:	bf00      	nop
  }
}
 8007f14:	bf00      	nop
 8007f16:	3718      	adds	r7, #24
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e029      	b.n	8007fc4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	79fa      	ldrb	r2, [r7, #7]
 8007f74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 f81f 	bl	8007fcc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f001 fd2d 	bl	8009a1c <USBH_LL_Init>

  return USBH_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	e009      	b.n	8007ff2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	33e0      	adds	r3, #224	; 0xe0
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b0f      	cmp	r3, #15
 8007ff6:	d9f2      	bls.n	8007fde <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e009      	b.n	8008012 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008018:	d3f1      	bcc.n	8007ffe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2240      	movs	r2, #64	; 0x40
 800803e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d016      	beq.n	80080b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10e      	bne.n	80080b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008098:	1c59      	adds	r1, r3, #1
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33de      	adds	r3, #222	; 0xde
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	e004      	b.n	80080ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80080b0:	2302      	movs	r3, #2
 80080b2:	73fb      	strb	r3, [r7, #15]
 80080b4:	e001      	b.n	80080ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80080b6:	2302      	movs	r3, #2
 80080b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d204      	bcs.n	80080ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80080ec:	e001      	b.n	80080f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80080ee:	2302      	movs	r3, #2
 80080f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4603      	mov	r3, r0
 8008110:	70fb      	strb	r3, [r7, #3]
 8008112:	460b      	mov	r3, r1
 8008114:	70bb      	strb	r3, [r7, #2]
 8008116:	4613      	mov	r3, r2
 8008118:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008128:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800812a:	e025      	b.n	8008178 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	221a      	movs	r2, #26
 8008130:	fb02 f303 	mul.w	r3, r2, r3
 8008134:	3308      	adds	r3, #8
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	3302      	adds	r3, #2
 800813c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	795b      	ldrb	r3, [r3, #5]
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	429a      	cmp	r2, r3
 8008146:	d002      	beq.n	800814e <USBH_FindInterface+0x4e>
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2bff      	cmp	r3, #255	; 0xff
 800814c:	d111      	bne.n	8008172 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008152:	78ba      	ldrb	r2, [r7, #2]
 8008154:	429a      	cmp	r2, r3
 8008156:	d002      	beq.n	800815e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008158:	78bb      	ldrb	r3, [r7, #2]
 800815a:	2bff      	cmp	r3, #255	; 0xff
 800815c:	d109      	bne.n	8008172 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008162:	787a      	ldrb	r2, [r7, #1]
 8008164:	429a      	cmp	r2, r3
 8008166:	d002      	beq.n	800816e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008168:	787b      	ldrb	r3, [r7, #1]
 800816a:	2bff      	cmp	r3, #255	; 0xff
 800816c:	d101      	bne.n	8008172 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	e006      	b.n	8008180 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	3301      	adds	r3, #1
 8008176:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d9d6      	bls.n	800812c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800817e:	23ff      	movs	r3, #255	; 0xff
}
 8008180:	4618      	mov	r0, r3
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fc87 	bl	8009aa8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fda0 	bl	8009ce2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80081b4:	2302      	movs	r3, #2
 80081b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d102      	bne.n	80081ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2203      	movs	r2, #3
 80081cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b0b      	cmp	r3, #11
 80081d6:	f200 81be 	bhi.w	8008556 <USBH_Process+0x3aa>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USBH_Process+0x34>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008211 	.word	0x08008211
 80081e4:	08008243 	.word	0x08008243
 80081e8:	080082ab 	.word	0x080082ab
 80081ec:	080084f1 	.word	0x080084f1
 80081f0:	08008557 	.word	0x08008557
 80081f4:	0800834f 	.word	0x0800834f
 80081f8:	08008497 	.word	0x08008497
 80081fc:	08008385 	.word	0x08008385
 8008200:	080083a5 	.word	0x080083a5
 8008204:	080083c5 	.word	0x080083c5
 8008208:	08008409 	.word	0x08008409
 800820c:	080084d9 	.word	0x080084d9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 819e 	beq.w	800855a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008224:	20c8      	movs	r0, #200	; 0xc8
 8008226:	f001 fda3 	bl	8009d70 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 fc99 	bl	8009b62 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008240:	e18b      	b.n	800855a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008248:	2b01      	cmp	r3, #1
 800824a:	d107      	bne.n	800825c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800825a:	e18d      	b.n	8008578 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008266:	d914      	bls.n	8008292 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800826e:	3301      	adds	r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800827e:	2b03      	cmp	r3, #3
 8008280:	d903      	bls.n	800828a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e176      	b.n	8008578 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
      break;
 8008290:	e172      	b.n	8008578 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008298:	f103 020a 	add.w	r2, r3, #10
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80082a2:	200a      	movs	r0, #10
 80082a4:	f001 fd64 	bl	8009d70 <USBH_Delay>
      break;
 80082a8:	e166      	b.n	8008578 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ba:	2104      	movs	r1, #4
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80082c0:	2064      	movs	r0, #100	; 0x64
 80082c2:	f001 fd55 	bl	8009d70 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fc24 	bl	8009b14 <USBH_LL_GetSpeed>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2205      	movs	r2, #5
 80082da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80082dc:	2100      	movs	r1, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fa29 	bl	8009736 <USBH_AllocPipe>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80082ec:	2180      	movs	r1, #128	; 0x80
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fa21 	bl	8009736 <USBH_AllocPipe>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7919      	ldrb	r1, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008310:	b292      	uxth	r2, r2
 8008312:	9202      	str	r2, [sp, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	9201      	str	r2, [sp, #4]
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	4603      	mov	r3, r0
 800831c:	2280      	movs	r2, #128	; 0x80
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 f9da 	bl	80096d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7959      	ldrb	r1, [r3, #5]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008338:	b292      	uxth	r2, r2
 800833a:	9202      	str	r2, [sp, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4603      	mov	r3, r0
 8008344:	2200      	movs	r2, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f9c6 	bl	80096d8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800834c:	e114      	b.n	8008578 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f918 	bl	8008584 <USBH_HandleEnum>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 80fe 	bne.w	800855e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008370:	2b01      	cmp	r3, #1
 8008372:	d103      	bne.n	800837c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2208      	movs	r2, #8
 8008378:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800837a:	e0f0      	b.n	800855e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2207      	movs	r2, #7
 8008380:	701a      	strb	r2, [r3, #0]
      break;
 8008382:	e0ec      	b.n	800855e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80e9 	beq.w	8008562 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008396:	2101      	movs	r1, #1
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2208      	movs	r2, #8
 80083a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80083a2:	e0de      	b.n	8008562 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fc2c 	bl	8008c0c <USBH_SetCfg>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 80d5 	bne.w	8008566 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2209      	movs	r2, #9
 80083c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083c2:	e0d0      	b.n	8008566 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80083d2:	2101      	movs	r1, #1
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fc3c 	bl	8008c52 <USBH_SetFeature>
 80083da:	4603      	mov	r3, r0
 80083dc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220a      	movs	r2, #10
 80083ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083ec:	e0bd      	b.n	800856a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	f040 80b9 	bne.w	800856a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	220a      	movs	r2, #10
 80083fc:	701a      	strb	r2, [r3, #0]
      break;
 80083fe:	e0b4      	b.n	800856a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	220a      	movs	r2, #10
 8008404:	701a      	strb	r2, [r3, #0]
      break;
 8008406:	e0b0      	b.n	800856a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80ad 	beq.w	800856e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
 8008420:	e016      	b.n	8008450 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008422:	7bfa      	ldrb	r2, [r7, #15]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	32de      	adds	r2, #222	; 0xde
 8008428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842c:	791a      	ldrb	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008434:	429a      	cmp	r2, r3
 8008436:	d108      	bne.n	800844a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008438:	7bfa      	ldrb	r2, [r7, #15]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	32de      	adds	r2, #222	; 0xde
 800843e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008448:	e005      	b.n	8008456 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0e5      	beq.n	8008422 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d016      	beq.n	800848e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2206      	movs	r2, #6
 8008476:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800847e:	2103      	movs	r1, #3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008484:	e073      	b.n	800856e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	220d      	movs	r2, #13
 800848a:	701a      	strb	r2, [r3, #0]
      break;
 800848c:	e06f      	b.n	800856e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	220d      	movs	r2, #13
 8008492:	701a      	strb	r2, [r3, #0]
      break;
 8008494:	e06b      	b.n	800856e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	4798      	blx	r3
 80084ac:	4603      	mov	r3, r0
 80084ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220b      	movs	r2, #11
 80084bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084be:	e058      	b.n	8008572 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d154      	bne.n	8008572 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	220d      	movs	r2, #13
 80084cc:	701a      	strb	r2, [r3, #0]
      break;
 80084ce:	e050      	b.n	8008572 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220d      	movs	r2, #13
 80084d4:	701a      	strb	r2, [r3, #0]
      break;
 80084d6:	e04c      	b.n	8008572 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d049      	beq.n	8008576 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
      }
      break;
 80084ee:	e042      	b.n	8008576 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff fd67 	bl	8007fcc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800852c:	2105      	movs	r1, #5
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b01      	cmp	r3, #1
 800853c:	d107      	bne.n	800854e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff fe20 	bl	800818c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800854c:	e014      	b.n	8008578 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 faaa 	bl	8009aa8 <USBH_LL_Start>
      break;
 8008554:	e010      	b.n	8008578 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008556:	bf00      	nop
 8008558:	e00e      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 800855a:	bf00      	nop
 800855c:	e00c      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 800855e:	bf00      	nop
 8008560:	e00a      	b.n	8008578 <USBH_Process+0x3cc>
    break;
 8008562:	bf00      	nop
 8008564:	e008      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 8008566:	bf00      	nop
 8008568:	e006      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 800856a:	bf00      	nop
 800856c:	e004      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 800856e:	bf00      	nop
 8008570:	e002      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 8008572:	bf00      	nop
 8008574:	e000      	b.n	8008578 <USBH_Process+0x3cc>
      break;
 8008576:	bf00      	nop
  }
  return USBH_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop

08008584 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af04      	add	r7, sp, #16
 800858a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008590:	2301      	movs	r3, #1
 8008592:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b07      	cmp	r3, #7
 800859a:	f200 81c1 	bhi.w	8008920 <USBH_HandleEnum+0x39c>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <USBH_HandleEnum+0x20>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085c5 	.word	0x080085c5
 80085a8:	08008683 	.word	0x08008683
 80085ac:	080086ed 	.word	0x080086ed
 80085b0:	0800877b 	.word	0x0800877b
 80085b4:	080087e5 	.word	0x080087e5
 80085b8:	08008855 	.word	0x08008855
 80085bc:	0800889b 	.word	0x0800889b
 80085c0:	080088e1 	.word	0x080088e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80085c4:	2108      	movs	r1, #8
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa50 	bl	8008a6c <USBH_Get_DevDesc>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d130      	bne.n	8008638 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	7919      	ldrb	r1, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80085fa:	b292      	uxth	r2, r2
 80085fc:	9202      	str	r2, [sp, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	9201      	str	r2, [sp, #4]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4603      	mov	r3, r0
 8008606:	2280      	movs	r2, #128	; 0x80
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 f865 	bl	80096d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7959      	ldrb	r1, [r3, #5]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008622:	b292      	uxth	r2, r2
 8008624:	9202      	str	r2, [sp, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	9201      	str	r2, [sp, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	2200      	movs	r2, #0
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f851 	bl	80096d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008636:	e175      	b.n	8008924 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b03      	cmp	r3, #3
 800863c:	f040 8172 	bne.w	8008924 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008646:	3301      	adds	r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008656:	2b03      	cmp	r3, #3
 8008658:	d903      	bls.n	8008662 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	220d      	movs	r2, #13
 800865e:	701a      	strb	r2, [r3, #0]
      break;
 8008660:	e160      	b.n	8008924 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	795b      	ldrb	r3, [r3, #5]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f885 	bl	8009778 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	791b      	ldrb	r3, [r3, #4]
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f87f 	bl	8009778 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
      break;
 8008680:	e150      	b.n	8008924 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008682:	2112      	movs	r1, #18
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f9f1 	bl	8008a6c <USBH_Get_DevDesc>
 800868a:	4603      	mov	r3, r0
 800868c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800869a:	e145      	b.n	8008928 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f040 8142 	bne.w	8008928 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086aa:	3301      	adds	r3, #1
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d903      	bls.n	80086c6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220d      	movs	r2, #13
 80086c2:	701a      	strb	r2, [r3, #0]
      break;
 80086c4:	e130      	b.n	8008928 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	795b      	ldrb	r3, [r3, #5]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 f853 	bl	8009778 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	791b      	ldrb	r3, [r3, #4]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 f84d 	bl	8009778 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
      break;
 80086ea:	e11d      	b.n	8008928 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80086ec:	2101      	movs	r1, #1
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa68 	bl	8008bc4 <USBH_SetAddress>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d132      	bne.n	8008764 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80086fe:	2002      	movs	r0, #2
 8008700:	f001 fb36 	bl	8009d70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2203      	movs	r2, #3
 8008710:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7919      	ldrb	r1, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008726:	b292      	uxth	r2, r2
 8008728:	9202      	str	r2, [sp, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	9201      	str	r2, [sp, #4]
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	4603      	mov	r3, r0
 8008732:	2280      	movs	r2, #128	; 0x80
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 ffcf 	bl	80096d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7959      	ldrb	r1, [r3, #5]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800874e:	b292      	uxth	r2, r2
 8008750:	9202      	str	r2, [sp, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	9201      	str	r2, [sp, #4]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4603      	mov	r3, r0
 800875a:	2200      	movs	r2, #0
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 ffbb 	bl	80096d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008762:	e0e3      	b.n	800892c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	2b03      	cmp	r3, #3
 8008768:	f040 80e0 	bne.w	800892c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	220d      	movs	r2, #13
 8008770:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	705a      	strb	r2, [r3, #1]
      break;
 8008778:	e0d8      	b.n	800892c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800877a:	2109      	movs	r1, #9
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f99d 	bl	8008abc <USBH_Get_CfgDesc>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2204      	movs	r2, #4
 8008790:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008792:	e0cd      	b.n	8008930 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2b03      	cmp	r3, #3
 8008798:	f040 80ca 	bne.w	8008930 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087a2:	3301      	adds	r3, #1
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d903      	bls.n	80087be <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	220d      	movs	r2, #13
 80087ba:	701a      	strb	r2, [r3, #0]
      break;
 80087bc:	e0b8      	b.n	8008930 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	795b      	ldrb	r3, [r3, #5]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 ffd7 	bl	8009778 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	791b      	ldrb	r3, [r3, #4]
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 ffd1 	bl	8009778 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]
      break;
 80087e2:	e0a5      	b.n	8008930 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f965 	bl	8008abc <USBH_Get_CfgDesc>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d103      	bne.n	8008804 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2205      	movs	r2, #5
 8008800:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008802:	e097      	b.n	8008934 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	2b03      	cmp	r3, #3
 8008808:	f040 8094 	bne.w	8008934 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008812:	3301      	adds	r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008822:	2b03      	cmp	r3, #3
 8008824:	d903      	bls.n	800882e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	220d      	movs	r2, #13
 800882a:	701a      	strb	r2, [r3, #0]
      break;
 800882c:	e082      	b.n	8008934 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	795b      	ldrb	r3, [r3, #5]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 ff9f 	bl	8009778 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ff99 	bl	8009778 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
      break;
 8008852:	e06f      	b.n	8008934 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800885a:	2b00      	cmp	r3, #0
 800885c:	d019      	beq.n	8008892 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800886a:	23ff      	movs	r3, #255	; 0xff
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f949 	bl	8008b04 <USBH_Get_StringDesc>
 8008872:	4603      	mov	r3, r0
 8008874:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d103      	bne.n	8008884 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2206      	movs	r2, #6
 8008880:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008882:	e059      	b.n	8008938 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	2b03      	cmp	r3, #3
 8008888:	d156      	bne.n	8008938 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2206      	movs	r2, #6
 800888e:	705a      	strb	r2, [r3, #1]
      break;
 8008890:	e052      	b.n	8008938 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2206      	movs	r2, #6
 8008896:	705a      	strb	r2, [r3, #1]
      break;
 8008898:	e04e      	b.n	8008938 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d019      	beq.n	80088d8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80088b0:	23ff      	movs	r3, #255	; 0xff
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f926 	bl	8008b04 <USBH_Get_StringDesc>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2207      	movs	r2, #7
 80088c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088c8:	e038      	b.n	800893c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d135      	bne.n	800893c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2207      	movs	r2, #7
 80088d4:	705a      	strb	r2, [r3, #1]
      break;
 80088d6:	e031      	b.n	800893c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2207      	movs	r2, #7
 80088dc:	705a      	strb	r2, [r3, #1]
      break;
 80088de:	e02d      	b.n	800893c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d017      	beq.n	800891a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088f6:	23ff      	movs	r3, #255	; 0xff
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f903 	bl	8008b04 <USBH_Get_StringDesc>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800890c:	e018      	b.n	8008940 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b03      	cmp	r3, #3
 8008912:	d115      	bne.n	8008940 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
      break;
 8008918:	e012      	b.n	8008940 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
      break;
 800891e:	e00f      	b.n	8008940 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008920:	bf00      	nop
 8008922:	e00e      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008924:	bf00      	nop
 8008926:	e00c      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008928:	bf00      	nop
 800892a:	e00a      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 800892c:	bf00      	nop
 800892e:	e008      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008930:	bf00      	nop
 8008932:	e006      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008934:	bf00      	nop
 8008936:	e004      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008938:	bf00      	nop
 800893a:	e002      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 800893c:	bf00      	nop
 800893e:	e000      	b.n	8008942 <USBH_HandleEnum+0x3be>
      break;
 8008940:	bf00      	nop
  }
  return Status;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f804 	bl	800898e <USBH_HandleSof>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b0b      	cmp	r3, #11
 800899e:	d10a      	bne.n	80089b6 <USBH_HandleSof+0x28>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
  }
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80089ce:	bf00      	nop
}
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80089ea:	bf00      	nop
}
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f84a 	bl	8009ade <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fe91 	bl	8009778 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	795b      	ldrb	r3, [r3, #5]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fe8b 	bl	8009778 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	4613      	mov	r3, r2
 8008a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f864 	bl	8008b5a <USBH_GetDescriptor>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008aa8:	78fa      	ldrb	r2, [r7, #3]
 8008aaa:	b292      	uxth	r2, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	f000 f918 	bl	8008ce2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	331c      	adds	r3, #28
 8008acc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ace:	887b      	ldrh	r3, [r7, #2]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f83d 	bl	8008b5a <USBH_GetDescriptor>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d107      	bne.n	8008afa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008aea:	887b      	ldrh	r3, [r7, #2]
 8008aec:	461a      	mov	r2, r3
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f987 	bl	8008e04 <USBH_ParseCfgDesc>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b088      	sub	sp, #32
 8008b08:	af02      	add	r7, sp, #8
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	72fb      	strb	r3, [r7, #11]
 8008b14:	4613      	mov	r3, r2
 8008b16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008b20:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f812 	bl	8008b5a <USBH_GetDescriptor>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d107      	bne.n	8008b50 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b46:	893a      	ldrh	r2, [r7, #8]
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fb24 	bl	8009198 <USBH_ParseStringDesc>
  }

  return status;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	72fb      	strb	r3, [r7, #11]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	789b      	ldrb	r3, [r3, #2]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11c      	bne.n	8008bae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2206      	movs	r2, #6
 8008b84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	893a      	ldrh	r2, [r7, #8]
 8008b8a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008b8c:	893b      	ldrh	r3, [r7, #8]
 8008b8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b96:	d104      	bne.n	8008ba2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f240 4209 	movw	r2, #1033	; 0x409
 8008b9e:	829a      	strh	r2, [r3, #20]
 8008ba0:	e002      	b.n	8008ba8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8b3a      	ldrh	r2, [r7, #24]
 8008bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008bae:	8b3b      	ldrh	r3, [r7, #24]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fb3d 	bl	8009234 <USBH_CtlReq>
 8008bba:	4603      	mov	r3, r0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	789b      	ldrb	r3, [r3, #2]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d10f      	bne.n	8008bf8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2205      	movs	r2, #5
 8008be2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb19 	bl	8009234 <USBH_CtlReq>
 8008c02:	4603      	mov	r3, r0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	789b      	ldrb	r3, [r3, #2]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d10e      	bne.n	8008c3e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2209      	movs	r2, #9
 8008c2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	887a      	ldrh	r2, [r7, #2]
 8008c30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 faf6 	bl	8009234 <USBH_CtlReq>
 8008c48:	4603      	mov	r3, r0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	789b      	ldrb	r3, [r3, #2]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d10f      	bne.n	8008c86 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fad2 	bl	8009234 <USBH_CtlReq>
 8008c90:	4603      	mov	r3, r0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	789b      	ldrb	r3, [r3, #2]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d10f      	bne.n	8008cce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 faae 	bl	8009234 <USBH_CtlReq>
 8008cd8:	4603      	mov	r3, r0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b085      	sub	sp, #20
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	4613      	mov	r3, r2
 8008cee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	785a      	ldrb	r2, [r3, #1]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	3302      	adds	r3, #2
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	3303      	adds	r3, #3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	791a      	ldrb	r2, [r3, #4]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	795a      	ldrb	r2, [r3, #5]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	799a      	ldrb	r2, [r3, #6]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	79da      	ldrb	r2, [r3, #7]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	79db      	ldrb	r3, [r3, #7]
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	dc11      	bgt.n	8008d68 <USBH_ParseDevDesc+0x86>
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	db16      	blt.n	8008d76 <USBH_ParseDevDesc+0x94>
 8008d48:	3b08      	subs	r3, #8
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <USBH_ParseDevDesc+0x8a>
 8008d66:	e006      	b.n	8008d76 <USBH_ParseDevDesc+0x94>
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d104      	bne.n	8008d76 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	79da      	ldrb	r2, [r3, #7]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	71da      	strb	r2, [r3, #7]
      break;
 8008d74:	e003      	b.n	8008d7e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2240      	movs	r2, #64	; 0x40
 8008d7a:	71da      	strb	r2, [r3, #7]
      break;
 8008d7c:	bf00      	nop
  }

  if (length > 8U)
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d939      	bls.n	8008df8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3308      	adds	r3, #8
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3309      	adds	r3, #9
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	330a      	adds	r3, #10
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	330b      	adds	r3, #11
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	4313      	orrs	r3, r2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	330d      	adds	r3, #13
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	7b9a      	ldrb	r2, [r3, #14]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7bda      	ldrb	r2, [r3, #15]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	7c1a      	ldrb	r2, [r3, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	7c5a      	ldrb	r2, [r3, #17]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	745a      	strb	r2, [r3, #17]
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08c      	sub	sp, #48	; 0x30
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e18:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	785a      	ldrb	r2, [r3, #1]
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3302      	adds	r3, #2
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	3303      	adds	r3, #3
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	021b      	lsls	r3, r3, #8
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e60:	bf28      	it	cs
 8008e62:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	791a      	ldrb	r2, [r3, #4]
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	795a      	ldrb	r2, [r3, #5]
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	799a      	ldrb	r2, [r3, #6]
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	79da      	ldrb	r2, [r3, #7]
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	7a1a      	ldrb	r2, [r3, #8]
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d002      	beq.n	8008ea2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2209      	movs	r2, #9
 8008ea0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	f240 809d 	bls.w	8008fe4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008eaa:	2309      	movs	r3, #9
 8008eac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008eb2:	e081      	b.n	8008fb8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008eb4:	f107 0316 	add.w	r3, r7, #22
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ebc:	f000 f99f 	bl	80091fe <USBH_GetNextDesc>
 8008ec0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d176      	bne.n	8008fb8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	d002      	beq.n	8008ed8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	2209      	movs	r2, #9
 8008ed6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008edc:	221a      	movs	r2, #26
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	6a3a      	ldr	r2, [r7, #32]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3302      	adds	r3, #2
 8008eea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eee:	69f8      	ldr	r0, [r7, #28]
 8008ef0:	f000 f87e 	bl	8008ff0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008efe:	e043      	b.n	8008f88 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f00:	f107 0316 	add.w	r3, r7, #22
 8008f04:	4619      	mov	r1, r3
 8008f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f08:	f000 f979 	bl	80091fe <USBH_GetNextDesc>
 8008f0c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	d138      	bne.n	8008f88 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	795b      	ldrb	r3, [r3, #5]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d10f      	bne.n	8008f3e <USBH_ParseCfgDesc+0x13a>
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	799b      	ldrb	r3, [r3, #6]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d10b      	bne.n	8008f3e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	79db      	ldrb	r3, [r3, #7]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <USBH_ParseCfgDesc+0x14a>
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d00b      	beq.n	8008f4e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2209      	movs	r2, #9
 8008f3a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f3c:	e007      	b.n	8008f4e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b07      	cmp	r3, #7
 8008f44:	d004      	beq.n	8008f50 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	2207      	movs	r2, #7
 8008f4a:	701a      	strb	r2, [r3, #0]
 8008f4c:	e000      	b.n	8008f50 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008f4e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f58:	3201      	adds	r2, #1
 8008f5a:	00d2      	lsls	r2, r2, #3
 8008f5c:	211a      	movs	r1, #26
 8008f5e:	fb01 f303 	mul.w	r3, r1, r3
 8008f62:	4413      	add	r3, r2
 8008f64:	3308      	adds	r3, #8
 8008f66:	6a3a      	ldr	r2, [r7, #32]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f86b 	bl	800904e <USBH_ParseEPDesc>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f82:	3301      	adds	r3, #1
 8008f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	791b      	ldrb	r3, [r3, #4]
 8008f8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d204      	bcs.n	8008f9e <USBH_ParseCfgDesc+0x19a>
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	885a      	ldrh	r2, [r3, #2]
 8008f98:	8afb      	ldrh	r3, [r7, #22]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d8b0      	bhi.n	8008f00 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	791b      	ldrb	r3, [r3, #4]
 8008fa2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d201      	bcs.n	8008fae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e01c      	b.n	8008fe8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d805      	bhi.n	8008fcc <USBH_ParseCfgDesc+0x1c8>
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	885a      	ldrh	r2, [r3, #2]
 8008fc4:	8afb      	ldrh	r3, [r7, #22]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	f63f af74 	bhi.w	8008eb4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	bf28      	it	cs
 8008fd4:	2302      	movcs	r3, #2
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d201      	bcs.n	8008fe4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e001      	b.n	8008fe8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3730      	adds	r7, #48	; 0x30
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	785a      	ldrb	r2, [r3, #1]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	789a      	ldrb	r2, [r3, #2]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	78da      	ldrb	r2, [r3, #3]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	791a      	ldrb	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	795a      	ldrb	r2, [r3, #5]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	799a      	ldrb	r2, [r3, #6]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	79da      	ldrb	r2, [r3, #7]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	7a1a      	ldrb	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	721a      	strb	r2, [r3, #8]
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800904e:	b480      	push	{r7}
 8009050:	b087      	sub	sp, #28
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	785a      	ldrb	r2, [r3, #1]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	789a      	ldrb	r2, [r3, #2]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78da      	ldrb	r2, [r3, #3]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3304      	adds	r3, #4
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b29a      	uxth	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3305      	adds	r3, #5
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	b29b      	uxth	r3, r3
 8009092:	4313      	orrs	r3, r2
 8009094:	b29a      	uxth	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	799a      	ldrb	r2, [r3, #6]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	889b      	ldrh	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80090aa:	2303      	movs	r3, #3
 80090ac:	75fb      	strb	r3, [r7, #23]
 80090ae:	e033      	b.n	8009118 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	889b      	ldrh	r3, [r3, #4]
 80090b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090b8:	f023 0307 	bic.w	r3, r3, #7
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	889b      	ldrh	r3, [r3, #4]
 80090c6:	b21a      	sxth	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	b299      	uxth	r1, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3305      	adds	r3, #5
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b29b      	uxth	r3, r3
 80090dc:	430b      	orrs	r3, r1
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d110      	bne.n	800910a <USBH_ParseEPDesc+0xbc>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	b299      	uxth	r1, r3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3305      	adds	r3, #5
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	430b      	orrs	r3, r1
 80090fe:	b29b      	uxth	r3, r3
 8009100:	b21b      	sxth	r3, r3
 8009102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009106:	b21b      	sxth	r3, r3
 8009108:	e001      	b.n	800910e <USBH_ParseEPDesc+0xc0>
 800910a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800910e:	4313      	orrs	r3, r2
 8009110:	b21b      	sxth	r3, r3
 8009112:	b29a      	uxth	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800911e:	2b00      	cmp	r3, #0
 8009120:	d116      	bne.n	8009150 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	78db      	ldrb	r3, [r3, #3]
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	2b01      	cmp	r3, #1
 800912c:	d005      	beq.n	800913a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009136:	2b03      	cmp	r3, #3
 8009138:	d127      	bne.n	800918a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	799b      	ldrb	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <USBH_ParseEPDesc+0xfc>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	799b      	ldrb	r3, [r3, #6]
 8009146:	2b10      	cmp	r3, #16
 8009148:	d91f      	bls.n	800918a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800914a:	2303      	movs	r3, #3
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e01c      	b.n	800918a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	78db      	ldrb	r3, [r3, #3]
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	2b01      	cmp	r3, #1
 800915a:	d10a      	bne.n	8009172 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	799b      	ldrb	r3, [r3, #6]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <USBH_ParseEPDesc+0x11e>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	799b      	ldrb	r3, [r3, #6]
 8009168:	2b10      	cmp	r3, #16
 800916a:	d90e      	bls.n	800918a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800916c:	2303      	movs	r3, #3
 800916e:	75fb      	strb	r3, [r7, #23]
 8009170:	e00b      	b.n	800918a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	78db      	ldrb	r3, [r3, #3]
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	2b03      	cmp	r3, #3
 800917c:	d105      	bne.n	800918a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	799b      	ldrb	r3, [r3, #6]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009186:	2303      	movs	r3, #3
 8009188:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800918a:	7dfb      	ldrb	r3, [r7, #23]
}
 800918c:	4618      	mov	r0, r3
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3301      	adds	r3, #1
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d120      	bne.n	80091f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	1e9a      	subs	r2, r3, #2
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	bf28      	it	cs
 80091bc:	4613      	movcs	r3, r2
 80091be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3302      	adds	r3, #2
 80091c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80091c6:	2300      	movs	r3, #0
 80091c8:	82fb      	strh	r3, [r7, #22]
 80091ca:	e00b      	b.n	80091e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80091cc:	8afb      	ldrh	r3, [r7, #22]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	3301      	adds	r3, #1
 80091dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80091de:	8afb      	ldrh	r3, [r7, #22]
 80091e0:	3302      	adds	r3, #2
 80091e2:	82fb      	strh	r3, [r7, #22]
 80091e4:	8afa      	ldrh	r2, [r7, #22]
 80091e6:	8abb      	ldrh	r3, [r7, #20]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d3ef      	bcc.n	80091cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
  }
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	881a      	ldrh	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	4413      	add	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4413      	add	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009226:	68fb      	ldr	r3, [r7, #12]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	789b      	ldrb	r3, [r3, #2]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d002      	beq.n	8009254 <USBH_CtlReq+0x20>
 800924e:	2b02      	cmp	r3, #2
 8009250:	d00f      	beq.n	8009272 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009252:	e027      	b.n	80092a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	88fa      	ldrh	r2, [r7, #6]
 800925e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2202      	movs	r2, #2
 800926a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800926c:	2301      	movs	r3, #1
 800926e:	75fb      	strb	r3, [r7, #23]
      break;
 8009270:	e018      	b.n	80092a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f000 f81c 	bl	80092b0 <USBH_HandleControl>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800927c:	7dfb      	ldrb	r3, [r7, #23]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <USBH_CtlReq+0x54>
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d106      	bne.n	8009296 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	761a      	strb	r2, [r3, #24]
      break;
 8009294:	e005      	b.n	80092a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d102      	bne.n	80092a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	709a      	strb	r2, [r3, #2]
      break;
 80092a2:	bf00      	nop
  }
  return status;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80092b8:	2301      	movs	r3, #1
 80092ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092bc:	2300      	movs	r3, #0
 80092be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7e1b      	ldrb	r3, [r3, #24]
 80092c4:	3b01      	subs	r3, #1
 80092c6:	2b0a      	cmp	r3, #10
 80092c8:	f200 8156 	bhi.w	8009578 <USBH_HandleControl+0x2c8>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <USBH_HandleControl+0x24>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	08009301 	.word	0x08009301
 80092d8:	0800931b 	.word	0x0800931b
 80092dc:	08009385 	.word	0x08009385
 80092e0:	080093ab 	.word	0x080093ab
 80092e4:	080093e3 	.word	0x080093e3
 80092e8:	0800940d 	.word	0x0800940d
 80092ec:	0800945f 	.word	0x0800945f
 80092f0:	08009481 	.word	0x08009481
 80092f4:	080094bd 	.word	0x080094bd
 80092f8:	080094e3 	.word	0x080094e3
 80092fc:	08009521 	.word	0x08009521
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f103 0110 	add.w	r1, r3, #16
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	795b      	ldrb	r3, [r3, #5]
 800930a:	461a      	mov	r2, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f943 	bl	8009598 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	761a      	strb	r2, [r3, #24]
      break;
 8009318:	e139      	b.n	800958e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	795b      	ldrb	r3, [r3, #5]
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fccb 	bl	8009cbc <USBH_LL_GetURBState>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800932a:	7bbb      	ldrb	r3, [r7, #14]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d11e      	bne.n	800936e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	7c1b      	ldrb	r3, [r3, #16]
 8009334:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009338:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	8adb      	ldrh	r3, [r3, #22]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009342:	7b7b      	ldrb	r3, [r7, #13]
 8009344:	2b80      	cmp	r3, #128	; 0x80
 8009346:	d103      	bne.n	8009350 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2203      	movs	r2, #3
 800934c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800934e:	e115      	b.n	800957c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2205      	movs	r2, #5
 8009354:	761a      	strb	r2, [r3, #24]
      break;
 8009356:	e111      	b.n	800957c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009358:	7b7b      	ldrb	r3, [r7, #13]
 800935a:	2b80      	cmp	r3, #128	; 0x80
 800935c:	d103      	bne.n	8009366 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2209      	movs	r2, #9
 8009362:	761a      	strb	r2, [r3, #24]
      break;
 8009364:	e10a      	b.n	800957c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2207      	movs	r2, #7
 800936a:	761a      	strb	r2, [r3, #24]
      break;
 800936c:	e106      	b.n	800957c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b04      	cmp	r3, #4
 8009372:	d003      	beq.n	800937c <USBH_HandleControl+0xcc>
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	2b02      	cmp	r3, #2
 8009378:	f040 8100 	bne.w	800957c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	220b      	movs	r2, #11
 8009380:	761a      	strb	r2, [r3, #24]
      break;
 8009382:	e0fb      	b.n	800957c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6899      	ldr	r1, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	899a      	ldrh	r2, [r3, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	791b      	ldrb	r3, [r3, #4]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f93a 	bl	8009616 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2204      	movs	r2, #4
 80093a6:	761a      	strb	r2, [r3, #24]
      break;
 80093a8:	e0f1      	b.n	800958e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	791b      	ldrb	r3, [r3, #4]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc83 	bl	8009cbc <USBH_LL_GetURBState>
 80093b6:	4603      	mov	r3, r0
 80093b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d102      	bne.n	80093c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2209      	movs	r2, #9
 80093c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	d102      	bne.n	80093d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093d0:	e0d6      	b.n	8009580 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b04      	cmp	r3, #4
 80093d6:	f040 80d3 	bne.w	8009580 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	220b      	movs	r2, #11
 80093de:	761a      	strb	r2, [r3, #24]
      break;
 80093e0:	e0ce      	b.n	8009580 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6899      	ldr	r1, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	899a      	ldrh	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	795b      	ldrb	r3, [r3, #5]
 80093ee:	2001      	movs	r0, #1
 80093f0:	9000      	str	r0, [sp, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8ea 	bl	80095cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2206      	movs	r2, #6
 8009408:	761a      	strb	r2, [r3, #24]
      break;
 800940a:	e0c0      	b.n	800958e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	795b      	ldrb	r3, [r3, #5]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fc52 	bl	8009cbc <USBH_LL_GetURBState>
 8009418:	4603      	mov	r3, r0
 800941a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d103      	bne.n	800942a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2207      	movs	r2, #7
 8009426:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009428:	e0ac      	b.n	8009584 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	2b05      	cmp	r3, #5
 800942e:	d105      	bne.n	800943c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	220c      	movs	r2, #12
 8009434:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009436:	2303      	movs	r3, #3
 8009438:	73fb      	strb	r3, [r7, #15]
      break;
 800943a:	e0a3      	b.n	8009584 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	2b02      	cmp	r3, #2
 8009440:	d103      	bne.n	800944a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2205      	movs	r2, #5
 8009446:	761a      	strb	r2, [r3, #24]
      break;
 8009448:	e09c      	b.n	8009584 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b04      	cmp	r3, #4
 800944e:	f040 8099 	bne.w	8009584 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	220b      	movs	r2, #11
 8009456:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009458:	2302      	movs	r3, #2
 800945a:	73fb      	strb	r3, [r7, #15]
      break;
 800945c:	e092      	b.n	8009584 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	791b      	ldrb	r3, [r3, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f8d5 	bl	8009616 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2208      	movs	r2, #8
 800947c:	761a      	strb	r2, [r3, #24]

      break;
 800947e:	e086      	b.n	800958e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	791b      	ldrb	r3, [r3, #4]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fc18 	bl	8009cbc <USBH_LL_GetURBState>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d105      	bne.n	80094a2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	220d      	movs	r2, #13
 800949a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800949c:	2300      	movs	r3, #0
 800949e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094a0:	e072      	b.n	8009588 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d103      	bne.n	80094b0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	220b      	movs	r2, #11
 80094ac:	761a      	strb	r2, [r3, #24]
      break;
 80094ae:	e06b      	b.n	8009588 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d168      	bne.n	8009588 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80094b6:	2303      	movs	r3, #3
 80094b8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ba:	e065      	b.n	8009588 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	795b      	ldrb	r3, [r3, #5]
 80094c0:	2201      	movs	r2, #1
 80094c2:	9200      	str	r2, [sp, #0]
 80094c4:	2200      	movs	r2, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f87f 	bl	80095cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	220a      	movs	r2, #10
 80094de:	761a      	strb	r2, [r3, #24]
      break;
 80094e0:	e055      	b.n	800958e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	795b      	ldrb	r3, [r3, #5]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fbe7 	bl	8009cbc <USBH_LL_GetURBState>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d105      	bne.n	8009504 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	220d      	movs	r2, #13
 8009500:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009502:	e043      	b.n	800958c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009504:	7bbb      	ldrb	r3, [r7, #14]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d103      	bne.n	8009512 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2209      	movs	r2, #9
 800950e:	761a      	strb	r2, [r3, #24]
      break;
 8009510:	e03c      	b.n	800958c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d139      	bne.n	800958c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	220b      	movs	r2, #11
 800951c:	761a      	strb	r2, [r3, #24]
      break;
 800951e:	e035      	b.n	800958c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7e5b      	ldrb	r3, [r3, #25]
 8009524:	3301      	adds	r3, #1
 8009526:	b2da      	uxtb	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	765a      	strb	r2, [r3, #25]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	7e5b      	ldrb	r3, [r3, #25]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d806      	bhi.n	8009542 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009540:	e025      	b.n	800958e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009548:	2106      	movs	r1, #6
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	795b      	ldrb	r3, [r3, #5]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f90c 	bl	8009778 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	791b      	ldrb	r3, [r3, #4]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f906 	bl	8009778 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009572:	2302      	movs	r3, #2
 8009574:	73fb      	strb	r3, [r7, #15]
      break;
 8009576:	e00a      	b.n	800958e <USBH_HandleControl+0x2de>

    default:
      break;
 8009578:	bf00      	nop
 800957a:	e008      	b.n	800958e <USBH_HandleControl+0x2de>
      break;
 800957c:	bf00      	nop
 800957e:	e006      	b.n	800958e <USBH_HandleControl+0x2de>
      break;
 8009580:	bf00      	nop
 8009582:	e004      	b.n	800958e <USBH_HandleControl+0x2de>
      break;
 8009584:	bf00      	nop
 8009586:	e002      	b.n	800958e <USBH_HandleControl+0x2de>
      break;
 8009588:	bf00      	nop
 800958a:	e000      	b.n	800958e <USBH_HandleControl+0x2de>
      break;
 800958c:	bf00      	nop
  }

  return status;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af04      	add	r7, sp, #16
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095a6:	79f9      	ldrb	r1, [r7, #7]
 80095a8:	2300      	movs	r3, #0
 80095aa:	9303      	str	r3, [sp, #12]
 80095ac:	2308      	movs	r3, #8
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	2300      	movs	r3, #0
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fb4c 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	4611      	mov	r1, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	460b      	mov	r3, r1
 80095dc:	80fb      	strh	r3, [r7, #6]
 80095de:	4613      	mov	r3, r2
 80095e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095f0:	7979      	ldrb	r1, [r7, #5]
 80095f2:	7e3b      	ldrb	r3, [r7, #24]
 80095f4:	9303      	str	r3, [sp, #12]
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	2301      	movs	r3, #1
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	2300      	movs	r3, #0
 8009604:	2200      	movs	r2, #0
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 fb27 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	af04      	add	r7, sp, #16
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	4611      	mov	r1, r2
 8009622:	461a      	mov	r2, r3
 8009624:	460b      	mov	r3, r1
 8009626:	80fb      	strh	r3, [r7, #6]
 8009628:	4613      	mov	r3, r2
 800962a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800962c:	7979      	ldrb	r1, [r7, #5]
 800962e:	2300      	movs	r3, #0
 8009630:	9303      	str	r3, [sp, #12]
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	9302      	str	r3, [sp, #8]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	2301      	movs	r3, #1
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	2201      	movs	r2, #1
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fb09 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009648:	2300      	movs	r3, #0

}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b088      	sub	sp, #32
 8009656:	af04      	add	r7, sp, #16
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	4611      	mov	r1, r2
 800965e:	461a      	mov	r2, r3
 8009660:	460b      	mov	r3, r1
 8009662:	80fb      	strh	r3, [r7, #6]
 8009664:	4613      	mov	r3, r2
 8009666:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009672:	2300      	movs	r3, #0
 8009674:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009676:	7979      	ldrb	r1, [r7, #5]
 8009678:	7e3b      	ldrb	r3, [r7, #24]
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	88fb      	ldrh	r3, [r7, #6]
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	2301      	movs	r3, #1
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	2302      	movs	r3, #2
 800968a:	2200      	movs	r2, #0
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fae4 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af04      	add	r7, sp, #16
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	4611      	mov	r1, r2
 80096a8:	461a      	mov	r2, r3
 80096aa:	460b      	mov	r3, r1
 80096ac:	80fb      	strh	r3, [r7, #6]
 80096ae:	4613      	mov	r3, r2
 80096b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096b2:	7979      	ldrb	r1, [r7, #5]
 80096b4:	2300      	movs	r3, #0
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	88fb      	ldrh	r3, [r7, #6]
 80096ba:	9302      	str	r3, [sp, #8]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	2301      	movs	r3, #1
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	2302      	movs	r3, #2
 80096c6:	2201      	movs	r2, #1
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fac6 	bl	8009c5a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af04      	add	r7, sp, #16
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	4608      	mov	r0, r1
 80096e2:	4611      	mov	r1, r2
 80096e4:	461a      	mov	r2, r3
 80096e6:	4603      	mov	r3, r0
 80096e8:	70fb      	strb	r3, [r7, #3]
 80096ea:	460b      	mov	r3, r1
 80096ec:	70bb      	strb	r3, [r7, #2]
 80096ee:	4613      	mov	r3, r2
 80096f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096f2:	7878      	ldrb	r0, [r7, #1]
 80096f4:	78ba      	ldrb	r2, [r7, #2]
 80096f6:	78f9      	ldrb	r1, [r7, #3]
 80096f8:	8b3b      	ldrh	r3, [r7, #24]
 80096fa:	9302      	str	r3, [sp, #8]
 80096fc:	7d3b      	ldrb	r3, [r7, #20]
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	7c3b      	ldrb	r3, [r7, #16]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	4603      	mov	r3, r0
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa59 	bl	8009bbe <USBH_LL_OpenPipe>

  return USBH_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	4619      	mov	r1, r3
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa78 	bl	8009c1c <USBH_LL_ClosePipe>

  return USBH_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f836 	bl	80097b4 <USBH_GetFreePipe>
 8009748:	4603      	mov	r3, r0
 800974a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800974c:	89fb      	ldrh	r3, [r7, #14]
 800974e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009752:	4293      	cmp	r3, r2
 8009754:	d00a      	beq.n	800976c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	89fb      	ldrh	r3, [r7, #14]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	33e0      	adds	r3, #224	; 0xe0
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800976c:	89fb      	ldrh	r3, [r7, #14]
 800976e:	b2db      	uxtb	r3, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	2b0f      	cmp	r3, #15
 8009788:	d80d      	bhi.n	80097a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	33e0      	adds	r3, #224	; 0xe0
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	33e0      	adds	r3, #224	; 0xe0
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	440b      	add	r3, r1
 80097a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e00f      	b.n	80097e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	33e0      	adds	r3, #224	; 0xe0
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	e007      	b.n	80097f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	3301      	adds	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	2b0f      	cmp	r3, #15
 80097ea:	d9ec      	bls.n	80097c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8009800:	2200      	movs	r2, #0
 8009802:	490e      	ldr	r1, [pc, #56]	; (800983c <MX_USB_HOST_Init+0x40>)
 8009804:	480e      	ldr	r0, [pc, #56]	; (8009840 <MX_USB_HOST_Init+0x44>)
 8009806:	f7fe fba7 	bl	8007f58 <USBH_Init>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009810:	f7f7 fb12 	bl	8000e38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8009814:	490b      	ldr	r1, [pc, #44]	; (8009844 <MX_USB_HOST_Init+0x48>)
 8009816:	480a      	ldr	r0, [pc, #40]	; (8009840 <MX_USB_HOST_Init+0x44>)
 8009818:	f7fe fc2c 	bl	8008074 <USBH_RegisterClass>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009822:	f7f7 fb09 	bl	8000e38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8009826:	4806      	ldr	r0, [pc, #24]	; (8009840 <MX_USB_HOST_Init+0x44>)
 8009828:	f7fe fcb0 	bl	800818c <USBH_Start>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009832:	f7f7 fb01 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009836:	bf00      	nop
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	0800985d 	.word	0x0800985d
 8009840:	200003c4 	.word	0x200003c4
 8009844:	20000010 	.word	0x20000010

08009848 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800984c:	4802      	ldr	r0, [pc, #8]	; (8009858 <MX_USB_HOST_Process+0x10>)
 800984e:	f7fe fcad 	bl	80081ac <USBH_Process>
}
 8009852:	bf00      	nop
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200003c4 	.word	0x200003c4

0800985c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	3b01      	subs	r3, #1
 800986c:	2b04      	cmp	r3, #4
 800986e:	d819      	bhi.n	80098a4 <USBH_UserProcess+0x48>
 8009870:	a201      	add	r2, pc, #4	; (adr r2, 8009878 <USBH_UserProcess+0x1c>)
 8009872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009876:	bf00      	nop
 8009878:	080098a5 	.word	0x080098a5
 800987c:	08009895 	.word	0x08009895
 8009880:	080098a5 	.word	0x080098a5
 8009884:	0800989d 	.word	0x0800989d
 8009888:	0800988d 	.word	0x0800988d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <USBH_UserProcess+0x58>)
 800988e:	2203      	movs	r2, #3
 8009890:	701a      	strb	r2, [r3, #0]
  break;
 8009892:	e008      	b.n	80098a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <USBH_UserProcess+0x58>)
 8009896:	2202      	movs	r2, #2
 8009898:	701a      	strb	r2, [r3, #0]
  break;
 800989a:	e004      	b.n	80098a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <USBH_UserProcess+0x58>)
 800989e:	2201      	movs	r2, #1
 80098a0:	701a      	strb	r2, [r3, #0]
  break;
 80098a2:	e000      	b.n	80098a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80098a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	2000079c 	.word	0x2000079c

080098b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	; 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098c0:	f107 0314 	add.w	r3, r7, #20
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a24      	ldr	r2, [pc, #144]	; (8009968 <HAL_HCD_MspInit+0xb0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d141      	bne.n	800995e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098da:	2300      	movs	r3, #0
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	4b23      	ldr	r3, [pc, #140]	; (800996c <HAL_HCD_MspInit+0xb4>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	4a22      	ldr	r2, [pc, #136]	; (800996c <HAL_HCD_MspInit+0xb4>)
 80098e4:	f043 0302 	orr.w	r3, r3, #2
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
 80098ea:	4b20      	ldr	r3, [pc, #128]	; (800996c <HAL_HCD_MspInit+0xb4>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80098f6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80098fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098fc:	2302      	movs	r3, #2
 80098fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009900:	2300      	movs	r3, #0
 8009902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009904:	2300      	movs	r3, #0
 8009906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009908:	230c      	movs	r3, #12
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4619      	mov	r1, r3
 8009912:	4817      	ldr	r0, [pc, #92]	; (8009970 <HAL_HCD_MspInit+0xb8>)
 8009914:	f7f8 fc56 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8009918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800991c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800991e:	2300      	movs	r3, #0
 8009920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8009926:	f107 0314 	add.w	r3, r7, #20
 800992a:	4619      	mov	r1, r3
 800992c:	4810      	ldr	r0, [pc, #64]	; (8009970 <HAL_HCD_MspInit+0xb8>)
 800992e:	f7f8 fc49 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	4b0d      	ldr	r3, [pc, #52]	; (800996c <HAL_HCD_MspInit+0xb4>)
 8009938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993a:	4a0c      	ldr	r2, [pc, #48]	; (800996c <HAL_HCD_MspInit+0xb4>)
 800993c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009940:	6313      	str	r3, [r2, #48]	; 0x30
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <HAL_HCD_MspInit+0xb4>)
 8009944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800994e:	2200      	movs	r2, #0
 8009950:	2100      	movs	r1, #0
 8009952:	204d      	movs	r0, #77	; 0x4d
 8009954:	f7f8 f95e 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009958:	204d      	movs	r0, #77	; 0x4d
 800995a:	f7f8 f977 	bl	8001c4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800995e:	bf00      	nop
 8009960:	3728      	adds	r7, #40	; 0x28
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40040000 	.word	0x40040000
 800996c:	40023800 	.word	0x40023800
 8009970:	40020400 	.word	0x40020400

08009974 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fff1 	bl	800896a <USBH_LL_IncTimer>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800999e:	4618      	mov	r0, r3
 80099a0:	f7ff f829 	bl	80089f6 <USBH_LL_Connect>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f832 	bl	8008a24 <USBH_LL_Disconnect>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
 80099d4:	4613      	mov	r3, r2
 80099d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe ffe3 	bl	80089be <USBH_LL_PortEnabled>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe ffe3 	bl	80089da <USBH_LL_PortDisabled>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d132      	bne.n	8009a94 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a19      	ldr	r2, [pc, #100]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a3a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009a3e:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a40:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <USBH_LL_Init+0x88>)
 8009a42:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8009a44:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a46:	220c      	movs	r2, #12
 8009a48:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009a56:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a58:	2202      	movs	r2, #2
 8009a5a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009a62:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009a68:	4b0d      	ldr	r3, [pc, #52]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8009a74:	480a      	ldr	r0, [pc, #40]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a76:	f7f8 fd6a 	bl	800254e <HAL_HCD_Init>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009a80:	f7f7 f9da 	bl	8000e38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009a84:	4806      	ldr	r0, [pc, #24]	; (8009aa0 <USBH_LL_Init+0x84>)
 8009a86:	f7f9 f94e 	bl	8002d26 <HAL_HCD_GetCurrentFrame>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fe ff5c 	bl	800894c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200007a0 	.word	0x200007a0
 8009aa4:	40040000 	.word	0x40040000

08009aa8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7f9 f8bb 	bl	8002c3a <HAL_HCD_Start>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 f95c 	bl	8009d88 <USBH_Get_USB_Status>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b084      	sub	sp, #16
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f9 f8c3 	bl	8002c80 <HAL_HCD_Stop>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f941 	bl	8009d88 <USBH_Get_USB_Status>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f9 f90b 	bl	8002d42 <HAL_HCD_GetCurrentSpeed>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d00c      	beq.n	8009b4c <USBH_LL_GetSpeed+0x38>
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d80d      	bhi.n	8009b52 <USBH_LL_GetSpeed+0x3e>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <USBH_LL_GetSpeed+0x2c>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d003      	beq.n	8009b46 <USBH_LL_GetSpeed+0x32>
 8009b3e:	e008      	b.n	8009b52 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
    break;
 8009b44:	e008      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009b46:	2301      	movs	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4a:	e005      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b50:	e002      	b.n	8009b58 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009b52:	2301      	movs	r3, #1
 8009b54:	73fb      	strb	r3, [r7, #15]
    break;
 8009b56:	bf00      	nop
  }
  return  speed;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f9 f89e 	bl	8002cba <HAL_HCD_ResetPort>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 f8ff 	bl	8009d88 <USBH_Get_USB_Status>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f9 f8a5 	bl	8002cfe <HAL_HCD_HC_GetXferCount>
 8009bb4:	4603      	mov	r3, r0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bbe:	b590      	push	{r4, r7, lr}
 8009bc0:	b089      	sub	sp, #36	; 0x24
 8009bc2:	af04      	add	r7, sp, #16
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4611      	mov	r1, r2
 8009bca:	461a      	mov	r2, r3
 8009bcc:	4603      	mov	r3, r0
 8009bce:	70fb      	strb	r3, [r7, #3]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70bb      	strb	r3, [r7, #2]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009be6:	787c      	ldrb	r4, [r7, #1]
 8009be8:	78ba      	ldrb	r2, [r7, #2]
 8009bea:	78f9      	ldrb	r1, [r7, #3]
 8009bec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009bee:	9302      	str	r3, [sp, #8]
 8009bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	f7f8 fd08 	bl	8002612 <HAL_HCD_HC_Init>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f8bd 	bl	8009d88 <USBH_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd90      	pop	{r4, r7, pc}

08009c1c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f8 fd78 	bl	8002730 <HAL_HCD_HC_Halt>
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f89e 	bl	8009d88 <USBH_Get_USB_Status>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b089      	sub	sp, #36	; 0x24
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	4608      	mov	r0, r1
 8009c64:	4611      	mov	r1, r2
 8009c66:	461a      	mov	r2, r3
 8009c68:	4603      	mov	r3, r0
 8009c6a:	70fb      	strb	r3, [r7, #3]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70bb      	strb	r3, [r7, #2]
 8009c70:	4613      	mov	r3, r2
 8009c72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c82:	787c      	ldrb	r4, [r7, #1]
 8009c84:	78ba      	ldrb	r2, [r7, #2]
 8009c86:	78f9      	ldrb	r1, [r7, #3]
 8009c88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c90:	9302      	str	r3, [sp, #8]
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	f7f8 fd6b 	bl	8002778 <HAL_HCD_HC_SubmitRequest>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f86d 	bl	8009d88 <USBH_Get_USB_Status>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd90      	pop	{r4, r7, pc}

08009cbc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7f8 ffff 	bl	8002cd6 <HAL_HCD_HC_GetURBState>
 8009cd8:	4603      	mov	r3, r0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d103      	bne.n	8009d00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f870 	bl	8009de0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d00:	20c8      	movs	r0, #200	; 0xc8
 8009d02:	f7f7 feab 	bl	8001a5c <HAL_Delay>
  return USBH_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	212c      	movs	r1, #44	; 0x2c
 8009d2e:	fb01 f303 	mul.w	r3, r1, r3
 8009d32:	4413      	add	r3, r2
 8009d34:	333b      	adds	r3, #59	; 0x3b
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	212c      	movs	r1, #44	; 0x2c
 8009d42:	fb01 f303 	mul.w	r3, r1, r3
 8009d46:	4413      	add	r3, r2
 8009d48:	3354      	adds	r3, #84	; 0x54
 8009d4a:	78ba      	ldrb	r2, [r7, #2]
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	e008      	b.n	8009d62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	212c      	movs	r1, #44	; 0x2c
 8009d56:	fb01 f303 	mul.w	r3, r1, r3
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3355      	adds	r3, #85	; 0x55
 8009d5e:	78ba      	ldrb	r2, [r7, #2]
 8009d60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7f7 fe6f 	bl	8001a5c <HAL_Delay>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d817      	bhi.n	8009dcc <USBH_Get_USB_Status+0x44>
 8009d9c:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <USBH_Get_USB_Status+0x1c>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009db5 	.word	0x08009db5
 8009da8:	08009dbb 	.word	0x08009dbb
 8009dac:	08009dc1 	.word	0x08009dc1
 8009db0:	08009dc7 	.word	0x08009dc7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
    break;
 8009db8:	e00b      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbe:	e008      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc4:	e005      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dca:	e002      	b.n	8009dd2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd0:	bf00      	nop
  }
  return usb_status;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009dee:	79fb      	ldrb	r3, [r7, #7]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]
 8009df8:	e001      	b.n	8009dfe <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	461a      	mov	r2, r3
 8009e02:	2110      	movs	r1, #16
 8009e04:	4803      	ldr	r0, [pc, #12]	; (8009e14 <MX_DriverVbusHS+0x34>)
 8009e06:	f7f8 fb89 	bl	800251c <HAL_GPIO_WritePin>
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	40020800 	.word	0x40020800

08009e18 <__errno>:
 8009e18:	4b01      	ldr	r3, [pc, #4]	; (8009e20 <__errno+0x8>)
 8009e1a:	6818      	ldr	r0, [r3, #0]
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20000030 	.word	0x20000030

08009e24 <__libc_init_array>:
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	4d0d      	ldr	r5, [pc, #52]	; (8009e5c <__libc_init_array+0x38>)
 8009e28:	4c0d      	ldr	r4, [pc, #52]	; (8009e60 <__libc_init_array+0x3c>)
 8009e2a:	1b64      	subs	r4, r4, r5
 8009e2c:	10a4      	asrs	r4, r4, #2
 8009e2e:	2600      	movs	r6, #0
 8009e30:	42a6      	cmp	r6, r4
 8009e32:	d109      	bne.n	8009e48 <__libc_init_array+0x24>
 8009e34:	4d0b      	ldr	r5, [pc, #44]	; (8009e64 <__libc_init_array+0x40>)
 8009e36:	4c0c      	ldr	r4, [pc, #48]	; (8009e68 <__libc_init_array+0x44>)
 8009e38:	f001 f834 	bl	800aea4 <_init>
 8009e3c:	1b64      	subs	r4, r4, r5
 8009e3e:	10a4      	asrs	r4, r4, #2
 8009e40:	2600      	movs	r6, #0
 8009e42:	42a6      	cmp	r6, r4
 8009e44:	d105      	bne.n	8009e52 <__libc_init_array+0x2e>
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4c:	4798      	blx	r3
 8009e4e:	3601      	adds	r6, #1
 8009e50:	e7ee      	b.n	8009e30 <__libc_init_array+0xc>
 8009e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e56:	4798      	blx	r3
 8009e58:	3601      	adds	r6, #1
 8009e5a:	e7f2      	b.n	8009e42 <__libc_init_array+0x1e>
 8009e5c:	0800b4c0 	.word	0x0800b4c0
 8009e60:	0800b4c0 	.word	0x0800b4c0
 8009e64:	0800b4c0 	.word	0x0800b4c0
 8009e68:	0800b4c4 	.word	0x0800b4c4

08009e6c <malloc>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <malloc+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f000 b87f 	b.w	8009f74 <_malloc_r>
 8009e76:	bf00      	nop
 8009e78:	20000030 	.word	0x20000030

08009e7c <free>:
 8009e7c:	4b02      	ldr	r3, [pc, #8]	; (8009e88 <free+0xc>)
 8009e7e:	4601      	mov	r1, r0
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	f000 b80b 	b.w	8009e9c <_free_r>
 8009e86:	bf00      	nop
 8009e88:	20000030 	.word	0x20000030

08009e8c <memset>:
 8009e8c:	4402      	add	r2, r0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d100      	bne.n	8009e96 <memset+0xa>
 8009e94:	4770      	bx	lr
 8009e96:	f803 1b01 	strb.w	r1, [r3], #1
 8009e9a:	e7f9      	b.n	8009e90 <memset+0x4>

08009e9c <_free_r>:
 8009e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d044      	beq.n	8009f2c <_free_r+0x90>
 8009ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea6:	9001      	str	r0, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8009eae:	bfb8      	it	lt
 8009eb0:	18e4      	addlt	r4, r4, r3
 8009eb2:	f000 fc51 	bl	800a758 <__malloc_lock>
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	; (8009f30 <_free_r+0x94>)
 8009eb8:	9801      	ldr	r0, [sp, #4]
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	b933      	cbnz	r3, 8009ecc <_free_r+0x30>
 8009ebe:	6063      	str	r3, [r4, #4]
 8009ec0:	6014      	str	r4, [r2, #0]
 8009ec2:	b003      	add	sp, #12
 8009ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ec8:	f000 bc4c 	b.w	800a764 <__malloc_unlock>
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d908      	bls.n	8009ee2 <_free_r+0x46>
 8009ed0:	6825      	ldr	r5, [r4, #0]
 8009ed2:	1961      	adds	r1, r4, r5
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	bf01      	itttt	eq
 8009ed8:	6819      	ldreq	r1, [r3, #0]
 8009eda:	685b      	ldreq	r3, [r3, #4]
 8009edc:	1949      	addeq	r1, r1, r5
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	e7ed      	b.n	8009ebe <_free_r+0x22>
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b10b      	cbz	r3, 8009eec <_free_r+0x50>
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d9fa      	bls.n	8009ee2 <_free_r+0x46>
 8009eec:	6811      	ldr	r1, [r2, #0]
 8009eee:	1855      	adds	r5, r2, r1
 8009ef0:	42a5      	cmp	r5, r4
 8009ef2:	d10b      	bne.n	8009f0c <_free_r+0x70>
 8009ef4:	6824      	ldr	r4, [r4, #0]
 8009ef6:	4421      	add	r1, r4
 8009ef8:	1854      	adds	r4, r2, r1
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	d1e0      	bne.n	8009ec2 <_free_r+0x26>
 8009f00:	681c      	ldr	r4, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6053      	str	r3, [r2, #4]
 8009f06:	4421      	add	r1, r4
 8009f08:	6011      	str	r1, [r2, #0]
 8009f0a:	e7da      	b.n	8009ec2 <_free_r+0x26>
 8009f0c:	d902      	bls.n	8009f14 <_free_r+0x78>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	e7d6      	b.n	8009ec2 <_free_r+0x26>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf04      	itt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	bf04      	itt	eq
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	6054      	str	r4, [r2, #4]
 8009f2a:	e7ca      	b.n	8009ec2 <_free_r+0x26>
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bd30      	pop	{r4, r5, pc}
 8009f30:	20000aa4 	.word	0x20000aa4

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0e      	ldr	r6, [pc, #56]	; (8009f70 <sbrk_aligned+0x3c>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f000 f91a 	bl	800a178 <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 f915 	bl	800a178 <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <sbrk_aligned+0x34>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d007      	beq.n	8009f6c <sbrk_aligned+0x38>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f90a 	bl	800a178 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d101      	bne.n	8009f6c <sbrk_aligned+0x38>
 8009f68:	f04f 34ff 	mov.w	r4, #4294967295
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	20000aa8 	.word	0x20000aa8

08009f74 <_malloc_r>:
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	1ccd      	adds	r5, r1, #3
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db01      	blt.n	8009f90 <_malloc_r+0x1c>
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d905      	bls.n	8009f9c <_malloc_r+0x28>
 8009f90:	230c      	movs	r3, #12
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	2600      	movs	r6, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	4e2e      	ldr	r6, [pc, #184]	; (800a058 <_malloc_r+0xe4>)
 8009f9e:	f000 fbdb 	bl	800a758 <__malloc_lock>
 8009fa2:	6833      	ldr	r3, [r6, #0]
 8009fa4:	461c      	mov	r4, r3
 8009fa6:	bb34      	cbnz	r4, 8009ff6 <_malloc_r+0x82>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4638      	mov	r0, r7
 8009fac:	f7ff ffc2 	bl	8009f34 <sbrk_aligned>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	d14d      	bne.n	800a052 <_malloc_r+0xde>
 8009fb6:	6834      	ldr	r4, [r6, #0]
 8009fb8:	4626      	mov	r6, r4
 8009fba:	2e00      	cmp	r6, #0
 8009fbc:	d140      	bne.n	800a040 <_malloc_r+0xcc>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	eb04 0803 	add.w	r8, r4, r3
 8009fc8:	f000 f8d6 	bl	800a178 <_sbrk_r>
 8009fcc:	4580      	cmp	r8, r0
 8009fce:	d13a      	bne.n	800a046 <_malloc_r+0xd2>
 8009fd0:	6821      	ldr	r1, [r4, #0]
 8009fd2:	3503      	adds	r5, #3
 8009fd4:	1a6d      	subs	r5, r5, r1
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff ffa5 	bl	8009f34 <sbrk_aligned>
 8009fea:	3001      	adds	r0, #1
 8009fec:	d02b      	beq.n	800a046 <_malloc_r+0xd2>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	442b      	add	r3, r5
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	e00e      	b.n	800a014 <_malloc_r+0xa0>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	1b52      	subs	r2, r2, r5
 8009ffa:	d41e      	bmi.n	800a03a <_malloc_r+0xc6>
 8009ffc:	2a0b      	cmp	r2, #11
 8009ffe:	d916      	bls.n	800a02e <_malloc_r+0xba>
 800a000:	1961      	adds	r1, r4, r5
 800a002:	42a3      	cmp	r3, r4
 800a004:	6025      	str	r5, [r4, #0]
 800a006:	bf18      	it	ne
 800a008:	6059      	strne	r1, [r3, #4]
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	bf08      	it	eq
 800a00e:	6031      	streq	r1, [r6, #0]
 800a010:	5162      	str	r2, [r4, r5]
 800a012:	604b      	str	r3, [r1, #4]
 800a014:	4638      	mov	r0, r7
 800a016:	f104 060b 	add.w	r6, r4, #11
 800a01a:	f000 fba3 	bl	800a764 <__malloc_unlock>
 800a01e:	f026 0607 	bic.w	r6, r6, #7
 800a022:	1d23      	adds	r3, r4, #4
 800a024:	1af2      	subs	r2, r6, r3
 800a026:	d0b6      	beq.n	8009f96 <_malloc_r+0x22>
 800a028:	1b9b      	subs	r3, r3, r6
 800a02a:	50a3      	str	r3, [r4, r2]
 800a02c:	e7b3      	b.n	8009f96 <_malloc_r+0x22>
 800a02e:	6862      	ldr	r2, [r4, #4]
 800a030:	42a3      	cmp	r3, r4
 800a032:	bf0c      	ite	eq
 800a034:	6032      	streq	r2, [r6, #0]
 800a036:	605a      	strne	r2, [r3, #4]
 800a038:	e7ec      	b.n	800a014 <_malloc_r+0xa0>
 800a03a:	4623      	mov	r3, r4
 800a03c:	6864      	ldr	r4, [r4, #4]
 800a03e:	e7b2      	b.n	8009fa6 <_malloc_r+0x32>
 800a040:	4634      	mov	r4, r6
 800a042:	6876      	ldr	r6, [r6, #4]
 800a044:	e7b9      	b.n	8009fba <_malloc_r+0x46>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f000 fb8a 	bl	800a764 <__malloc_unlock>
 800a050:	e7a1      	b.n	8009f96 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7de      	b.n	800a014 <_malloc_r+0xa0>
 800a056:	bf00      	nop
 800a058:	20000aa4 	.word	0x20000aa4

0800a05c <iprintf>:
 800a05c:	b40f      	push	{r0, r1, r2, r3}
 800a05e:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <iprintf+0x2c>)
 800a060:	b513      	push	{r0, r1, r4, lr}
 800a062:	681c      	ldr	r4, [r3, #0]
 800a064:	b124      	cbz	r4, 800a070 <iprintf+0x14>
 800a066:	69a3      	ldr	r3, [r4, #24]
 800a068:	b913      	cbnz	r3, 800a070 <iprintf+0x14>
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fa6e 	bl	800a54c <__sinit>
 800a070:	ab05      	add	r3, sp, #20
 800a072:	9a04      	ldr	r2, [sp, #16]
 800a074:	68a1      	ldr	r1, [r4, #8]
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 fba3 	bl	800a7c4 <_vfiprintf_r>
 800a07e:	b002      	add	sp, #8
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a084:	b004      	add	sp, #16
 800a086:	4770      	bx	lr
 800a088:	20000030 	.word	0x20000030

0800a08c <_puts_r>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	460e      	mov	r6, r1
 800a090:	4605      	mov	r5, r0
 800a092:	b118      	cbz	r0, 800a09c <_puts_r+0x10>
 800a094:	6983      	ldr	r3, [r0, #24]
 800a096:	b90b      	cbnz	r3, 800a09c <_puts_r+0x10>
 800a098:	f000 fa58 	bl	800a54c <__sinit>
 800a09c:	69ab      	ldr	r3, [r5, #24]
 800a09e:	68ac      	ldr	r4, [r5, #8]
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_puts_r+0x1c>
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f000 fa52 	bl	800a54c <__sinit>
 800a0a8:	4b2c      	ldr	r3, [pc, #176]	; (800a15c <_puts_r+0xd0>)
 800a0aa:	429c      	cmp	r4, r3
 800a0ac:	d120      	bne.n	800a0f0 <_puts_r+0x64>
 800a0ae:	686c      	ldr	r4, [r5, #4]
 800a0b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0b2:	07db      	lsls	r3, r3, #31
 800a0b4:	d405      	bmi.n	800a0c2 <_puts_r+0x36>
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	0598      	lsls	r0, r3, #22
 800a0ba:	d402      	bmi.n	800a0c2 <_puts_r+0x36>
 800a0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0be:	f000 fae3 	bl	800a688 <__retarget_lock_acquire_recursive>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	0719      	lsls	r1, r3, #28
 800a0c6:	d51d      	bpl.n	800a104 <_puts_r+0x78>
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	b1db      	cbz	r3, 800a104 <_puts_r+0x78>
 800a0cc:	3e01      	subs	r6, #1
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	60a3      	str	r3, [r4, #8]
 800a0d8:	bb39      	cbnz	r1, 800a12a <_puts_r+0x9e>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	da38      	bge.n	800a150 <_puts_r+0xc4>
 800a0de:	4622      	mov	r2, r4
 800a0e0:	210a      	movs	r1, #10
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f858 	bl	800a198 <__swbuf_r>
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	d011      	beq.n	800a110 <_puts_r+0x84>
 800a0ec:	250a      	movs	r5, #10
 800a0ee:	e011      	b.n	800a114 <_puts_r+0x88>
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <_puts_r+0xd4>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <_puts_r+0x6e>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7da      	b.n	800a0b0 <_puts_r+0x24>
 800a0fa:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <_puts_r+0xd8>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	bf08      	it	eq
 800a100:	68ec      	ldreq	r4, [r5, #12]
 800a102:	e7d5      	b.n	800a0b0 <_puts_r+0x24>
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f898 	bl	800a23c <__swsetup_r>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d0dd      	beq.n	800a0cc <_puts_r+0x40>
 800a110:	f04f 35ff 	mov.w	r5, #4294967295
 800a114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a116:	07da      	lsls	r2, r3, #31
 800a118:	d405      	bmi.n	800a126 <_puts_r+0x9a>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	059b      	lsls	r3, r3, #22
 800a11e:	d402      	bmi.n	800a126 <_puts_r+0x9a>
 800a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a122:	f000 fab2 	bl	800a68a <__retarget_lock_release_recursive>
 800a126:	4628      	mov	r0, r5
 800a128:	bd70      	pop	{r4, r5, r6, pc}
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	da04      	bge.n	800a138 <_puts_r+0xac>
 800a12e:	69a2      	ldr	r2, [r4, #24]
 800a130:	429a      	cmp	r2, r3
 800a132:	dc06      	bgt.n	800a142 <_puts_r+0xb6>
 800a134:	290a      	cmp	r1, #10
 800a136:	d004      	beq.n	800a142 <_puts_r+0xb6>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	7019      	strb	r1, [r3, #0]
 800a140:	e7c5      	b.n	800a0ce <_puts_r+0x42>
 800a142:	4622      	mov	r2, r4
 800a144:	4628      	mov	r0, r5
 800a146:	f000 f827 	bl	800a198 <__swbuf_r>
 800a14a:	3001      	adds	r0, #1
 800a14c:	d1bf      	bne.n	800a0ce <_puts_r+0x42>
 800a14e:	e7df      	b.n	800a110 <_puts_r+0x84>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	250a      	movs	r5, #10
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	6022      	str	r2, [r4, #0]
 800a158:	701d      	strb	r5, [r3, #0]
 800a15a:	e7db      	b.n	800a114 <_puts_r+0x88>
 800a15c:	0800b444 	.word	0x0800b444
 800a160:	0800b464 	.word	0x0800b464
 800a164:	0800b424 	.word	0x0800b424

0800a168 <puts>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <puts+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f7ff bf8d 	b.w	800a08c <_puts_r>
 800a172:	bf00      	nop
 800a174:	20000030 	.word	0x20000030

0800a178 <_sbrk_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d06      	ldr	r5, [pc, #24]	; (800a194 <_sbrk_r+0x1c>)
 800a17c:	2300      	movs	r3, #0
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	602b      	str	r3, [r5, #0]
 800a184:	f7f7 fbb6 	bl	80018f4 <_sbrk>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_sbrk_r+0x1a>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_sbrk_r+0x1a>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20000ab0 	.word	0x20000ab0

0800a198 <__swbuf_r>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	460e      	mov	r6, r1
 800a19c:	4614      	mov	r4, r2
 800a19e:	4605      	mov	r5, r0
 800a1a0:	b118      	cbz	r0, 800a1aa <__swbuf_r+0x12>
 800a1a2:	6983      	ldr	r3, [r0, #24]
 800a1a4:	b90b      	cbnz	r3, 800a1aa <__swbuf_r+0x12>
 800a1a6:	f000 f9d1 	bl	800a54c <__sinit>
 800a1aa:	4b21      	ldr	r3, [pc, #132]	; (800a230 <__swbuf_r+0x98>)
 800a1ac:	429c      	cmp	r4, r3
 800a1ae:	d12b      	bne.n	800a208 <__swbuf_r+0x70>
 800a1b0:	686c      	ldr	r4, [r5, #4]
 800a1b2:	69a3      	ldr	r3, [r4, #24]
 800a1b4:	60a3      	str	r3, [r4, #8]
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	071a      	lsls	r2, r3, #28
 800a1ba:	d52f      	bpl.n	800a21c <__swbuf_r+0x84>
 800a1bc:	6923      	ldr	r3, [r4, #16]
 800a1be:	b36b      	cbz	r3, 800a21c <__swbuf_r+0x84>
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	6820      	ldr	r0, [r4, #0]
 800a1c4:	1ac0      	subs	r0, r0, r3
 800a1c6:	6963      	ldr	r3, [r4, #20]
 800a1c8:	b2f6      	uxtb	r6, r6
 800a1ca:	4283      	cmp	r3, r0
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	dc04      	bgt.n	800a1da <__swbuf_r+0x42>
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f926 	bl	800a424 <_fflush_r>
 800a1d8:	bb30      	cbnz	r0, 800a228 <__swbuf_r+0x90>
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	60a3      	str	r3, [r4, #8]
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	701e      	strb	r6, [r3, #0]
 800a1e8:	6963      	ldr	r3, [r4, #20]
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	4283      	cmp	r3, r0
 800a1ee:	d004      	beq.n	800a1fa <__swbuf_r+0x62>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	07db      	lsls	r3, r3, #31
 800a1f4:	d506      	bpl.n	800a204 <__swbuf_r+0x6c>
 800a1f6:	2e0a      	cmp	r6, #10
 800a1f8:	d104      	bne.n	800a204 <__swbuf_r+0x6c>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 f911 	bl	800a424 <_fflush_r>
 800a202:	b988      	cbnz	r0, 800a228 <__swbuf_r+0x90>
 800a204:	4638      	mov	r0, r7
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <__swbuf_r+0x9c>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d101      	bne.n	800a212 <__swbuf_r+0x7a>
 800a20e:	68ac      	ldr	r4, [r5, #8]
 800a210:	e7cf      	b.n	800a1b2 <__swbuf_r+0x1a>
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <__swbuf_r+0xa0>)
 800a214:	429c      	cmp	r4, r3
 800a216:	bf08      	it	eq
 800a218:	68ec      	ldreq	r4, [r5, #12]
 800a21a:	e7ca      	b.n	800a1b2 <__swbuf_r+0x1a>
 800a21c:	4621      	mov	r1, r4
 800a21e:	4628      	mov	r0, r5
 800a220:	f000 f80c 	bl	800a23c <__swsetup_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	d0cb      	beq.n	800a1c0 <__swbuf_r+0x28>
 800a228:	f04f 37ff 	mov.w	r7, #4294967295
 800a22c:	e7ea      	b.n	800a204 <__swbuf_r+0x6c>
 800a22e:	bf00      	nop
 800a230:	0800b444 	.word	0x0800b444
 800a234:	0800b464 	.word	0x0800b464
 800a238:	0800b424 	.word	0x0800b424

0800a23c <__swsetup_r>:
 800a23c:	4b32      	ldr	r3, [pc, #200]	; (800a308 <__swsetup_r+0xcc>)
 800a23e:	b570      	push	{r4, r5, r6, lr}
 800a240:	681d      	ldr	r5, [r3, #0]
 800a242:	4606      	mov	r6, r0
 800a244:	460c      	mov	r4, r1
 800a246:	b125      	cbz	r5, 800a252 <__swsetup_r+0x16>
 800a248:	69ab      	ldr	r3, [r5, #24]
 800a24a:	b913      	cbnz	r3, 800a252 <__swsetup_r+0x16>
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 f97d 	bl	800a54c <__sinit>
 800a252:	4b2e      	ldr	r3, [pc, #184]	; (800a30c <__swsetup_r+0xd0>)
 800a254:	429c      	cmp	r4, r3
 800a256:	d10f      	bne.n	800a278 <__swsetup_r+0x3c>
 800a258:	686c      	ldr	r4, [r5, #4]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a260:	0719      	lsls	r1, r3, #28
 800a262:	d42c      	bmi.n	800a2be <__swsetup_r+0x82>
 800a264:	06dd      	lsls	r5, r3, #27
 800a266:	d411      	bmi.n	800a28c <__swsetup_r+0x50>
 800a268:	2309      	movs	r3, #9
 800a26a:	6033      	str	r3, [r6, #0]
 800a26c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	e03e      	b.n	800a2f6 <__swsetup_r+0xba>
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <__swsetup_r+0xd4>)
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d101      	bne.n	800a282 <__swsetup_r+0x46>
 800a27e:	68ac      	ldr	r4, [r5, #8]
 800a280:	e7eb      	b.n	800a25a <__swsetup_r+0x1e>
 800a282:	4b24      	ldr	r3, [pc, #144]	; (800a314 <__swsetup_r+0xd8>)
 800a284:	429c      	cmp	r4, r3
 800a286:	bf08      	it	eq
 800a288:	68ec      	ldreq	r4, [r5, #12]
 800a28a:	e7e6      	b.n	800a25a <__swsetup_r+0x1e>
 800a28c:	0758      	lsls	r0, r3, #29
 800a28e:	d512      	bpl.n	800a2b6 <__swsetup_r+0x7a>
 800a290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a292:	b141      	cbz	r1, 800a2a6 <__swsetup_r+0x6a>
 800a294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a298:	4299      	cmp	r1, r3
 800a29a:	d002      	beq.n	800a2a2 <__swsetup_r+0x66>
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fdfd 	bl	8009e9c <_free_r>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6063      	str	r3, [r4, #4]
 800a2b2:	6923      	ldr	r3, [r4, #16]
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	89a3      	ldrh	r3, [r4, #12]
 800a2b8:	f043 0308 	orr.w	r3, r3, #8
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	6923      	ldr	r3, [r4, #16]
 800a2c0:	b94b      	cbnz	r3, 800a2d6 <__swsetup_r+0x9a>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2cc:	d003      	beq.n	800a2d6 <__swsetup_r+0x9a>
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f000 fa01 	bl	800a6d8 <__smakebuf_r>
 800a2d6:	89a0      	ldrh	r0, [r4, #12]
 800a2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2dc:	f010 0301 	ands.w	r3, r0, #1
 800a2e0:	d00a      	beq.n	800a2f8 <__swsetup_r+0xbc>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6963      	ldr	r3, [r4, #20]
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b943      	cbnz	r3, 800a302 <__swsetup_r+0xc6>
 800a2f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f4:	d1ba      	bne.n	800a26c <__swsetup_r+0x30>
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
 800a2f8:	0781      	lsls	r1, r0, #30
 800a2fa:	bf58      	it	pl
 800a2fc:	6963      	ldrpl	r3, [r4, #20]
 800a2fe:	60a3      	str	r3, [r4, #8]
 800a300:	e7f4      	b.n	800a2ec <__swsetup_r+0xb0>
 800a302:	2000      	movs	r0, #0
 800a304:	e7f7      	b.n	800a2f6 <__swsetup_r+0xba>
 800a306:	bf00      	nop
 800a308:	20000030 	.word	0x20000030
 800a30c:	0800b444 	.word	0x0800b444
 800a310:	0800b464 	.word	0x0800b464
 800a314:	0800b424 	.word	0x0800b424

0800a318 <__sflush_r>:
 800a318:	898a      	ldrh	r2, [r1, #12]
 800a31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	4605      	mov	r5, r0
 800a320:	0710      	lsls	r0, r2, #28
 800a322:	460c      	mov	r4, r1
 800a324:	d458      	bmi.n	800a3d8 <__sflush_r+0xc0>
 800a326:	684b      	ldr	r3, [r1, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc05      	bgt.n	800a338 <__sflush_r+0x20>
 800a32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	dc02      	bgt.n	800a338 <__sflush_r+0x20>
 800a332:	2000      	movs	r0, #0
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d0f9      	beq.n	800a332 <__sflush_r+0x1a>
 800a33e:	2300      	movs	r3, #0
 800a340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a344:	682f      	ldr	r7, [r5, #0]
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	d032      	beq.n	800a3b0 <__sflush_r+0x98>
 800a34a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a34c:	89a3      	ldrh	r3, [r4, #12]
 800a34e:	075a      	lsls	r2, r3, #29
 800a350:	d505      	bpl.n	800a35e <__sflush_r+0x46>
 800a352:	6863      	ldr	r3, [r4, #4]
 800a354:	1ac0      	subs	r0, r0, r3
 800a356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a358:	b10b      	cbz	r3, 800a35e <__sflush_r+0x46>
 800a35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a35c:	1ac0      	subs	r0, r0, r3
 800a35e:	2300      	movs	r3, #0
 800a360:	4602      	mov	r2, r0
 800a362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a364:	6a21      	ldr	r1, [r4, #32]
 800a366:	4628      	mov	r0, r5
 800a368:	47b0      	blx	r6
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	d106      	bne.n	800a37e <__sflush_r+0x66>
 800a370:	6829      	ldr	r1, [r5, #0]
 800a372:	291d      	cmp	r1, #29
 800a374:	d82c      	bhi.n	800a3d0 <__sflush_r+0xb8>
 800a376:	4a2a      	ldr	r2, [pc, #168]	; (800a420 <__sflush_r+0x108>)
 800a378:	40ca      	lsrs	r2, r1
 800a37a:	07d6      	lsls	r6, r2, #31
 800a37c:	d528      	bpl.n	800a3d0 <__sflush_r+0xb8>
 800a37e:	2200      	movs	r2, #0
 800a380:	6062      	str	r2, [r4, #4]
 800a382:	04d9      	lsls	r1, r3, #19
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	6022      	str	r2, [r4, #0]
 800a388:	d504      	bpl.n	800a394 <__sflush_r+0x7c>
 800a38a:	1c42      	adds	r2, r0, #1
 800a38c:	d101      	bne.n	800a392 <__sflush_r+0x7a>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b903      	cbnz	r3, 800a394 <__sflush_r+0x7c>
 800a392:	6560      	str	r0, [r4, #84]	; 0x54
 800a394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a396:	602f      	str	r7, [r5, #0]
 800a398:	2900      	cmp	r1, #0
 800a39a:	d0ca      	beq.n	800a332 <__sflush_r+0x1a>
 800a39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d002      	beq.n	800a3aa <__sflush_r+0x92>
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f7ff fd79 	bl	8009e9c <_free_r>
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ae:	e7c1      	b.n	800a334 <__sflush_r+0x1c>
 800a3b0:	6a21      	ldr	r1, [r4, #32]
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b0      	blx	r6
 800a3b8:	1c41      	adds	r1, r0, #1
 800a3ba:	d1c7      	bne.n	800a34c <__sflush_r+0x34>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0c4      	beq.n	800a34c <__sflush_r+0x34>
 800a3c2:	2b1d      	cmp	r3, #29
 800a3c4:	d001      	beq.n	800a3ca <__sflush_r+0xb2>
 800a3c6:	2b16      	cmp	r3, #22
 800a3c8:	d101      	bne.n	800a3ce <__sflush_r+0xb6>
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	e7b1      	b.n	800a332 <__sflush_r+0x1a>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d4:	81a3      	strh	r3, [r4, #12]
 800a3d6:	e7ad      	b.n	800a334 <__sflush_r+0x1c>
 800a3d8:	690f      	ldr	r7, [r1, #16]
 800a3da:	2f00      	cmp	r7, #0
 800a3dc:	d0a9      	beq.n	800a332 <__sflush_r+0x1a>
 800a3de:	0793      	lsls	r3, r2, #30
 800a3e0:	680e      	ldr	r6, [r1, #0]
 800a3e2:	bf08      	it	eq
 800a3e4:	694b      	ldreq	r3, [r1, #20]
 800a3e6:	600f      	str	r7, [r1, #0]
 800a3e8:	bf18      	it	ne
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	eba6 0807 	sub.w	r8, r6, r7
 800a3f0:	608b      	str	r3, [r1, #8]
 800a3f2:	f1b8 0f00 	cmp.w	r8, #0
 800a3f6:	dd9c      	ble.n	800a332 <__sflush_r+0x1a>
 800a3f8:	6a21      	ldr	r1, [r4, #32]
 800a3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3fc:	4643      	mov	r3, r8
 800a3fe:	463a      	mov	r2, r7
 800a400:	4628      	mov	r0, r5
 800a402:	47b0      	blx	r6
 800a404:	2800      	cmp	r0, #0
 800a406:	dc06      	bgt.n	800a416 <__sflush_r+0xfe>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a40e:	81a3      	strh	r3, [r4, #12]
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	e78e      	b.n	800a334 <__sflush_r+0x1c>
 800a416:	4407      	add	r7, r0
 800a418:	eba8 0800 	sub.w	r8, r8, r0
 800a41c:	e7e9      	b.n	800a3f2 <__sflush_r+0xda>
 800a41e:	bf00      	nop
 800a420:	20400001 	.word	0x20400001

0800a424 <_fflush_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	690b      	ldr	r3, [r1, #16]
 800a428:	4605      	mov	r5, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	b913      	cbnz	r3, 800a434 <_fflush_r+0x10>
 800a42e:	2500      	movs	r5, #0
 800a430:	4628      	mov	r0, r5
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	b118      	cbz	r0, 800a43e <_fflush_r+0x1a>
 800a436:	6983      	ldr	r3, [r0, #24]
 800a438:	b90b      	cbnz	r3, 800a43e <_fflush_r+0x1a>
 800a43a:	f000 f887 	bl	800a54c <__sinit>
 800a43e:	4b14      	ldr	r3, [pc, #80]	; (800a490 <_fflush_r+0x6c>)
 800a440:	429c      	cmp	r4, r3
 800a442:	d11b      	bne.n	800a47c <_fflush_r+0x58>
 800a444:	686c      	ldr	r4, [r5, #4]
 800a446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ef      	beq.n	800a42e <_fflush_r+0xa>
 800a44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a450:	07d0      	lsls	r0, r2, #31
 800a452:	d404      	bmi.n	800a45e <_fflush_r+0x3a>
 800a454:	0599      	lsls	r1, r3, #22
 800a456:	d402      	bmi.n	800a45e <_fflush_r+0x3a>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f000 f915 	bl	800a688 <__retarget_lock_acquire_recursive>
 800a45e:	4628      	mov	r0, r5
 800a460:	4621      	mov	r1, r4
 800a462:	f7ff ff59 	bl	800a318 <__sflush_r>
 800a466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a468:	07da      	lsls	r2, r3, #31
 800a46a:	4605      	mov	r5, r0
 800a46c:	d4e0      	bmi.n	800a430 <_fflush_r+0xc>
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	059b      	lsls	r3, r3, #22
 800a472:	d4dd      	bmi.n	800a430 <_fflush_r+0xc>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f000 f908 	bl	800a68a <__retarget_lock_release_recursive>
 800a47a:	e7d9      	b.n	800a430 <_fflush_r+0xc>
 800a47c:	4b05      	ldr	r3, [pc, #20]	; (800a494 <_fflush_r+0x70>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	d101      	bne.n	800a486 <_fflush_r+0x62>
 800a482:	68ac      	ldr	r4, [r5, #8]
 800a484:	e7df      	b.n	800a446 <_fflush_r+0x22>
 800a486:	4b04      	ldr	r3, [pc, #16]	; (800a498 <_fflush_r+0x74>)
 800a488:	429c      	cmp	r4, r3
 800a48a:	bf08      	it	eq
 800a48c:	68ec      	ldreq	r4, [r5, #12]
 800a48e:	e7da      	b.n	800a446 <_fflush_r+0x22>
 800a490:	0800b444 	.word	0x0800b444
 800a494:	0800b464 	.word	0x0800b464
 800a498:	0800b424 	.word	0x0800b424

0800a49c <std>:
 800a49c:	2300      	movs	r3, #0
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4aa:	6083      	str	r3, [r0, #8]
 800a4ac:	8181      	strh	r1, [r0, #12]
 800a4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a4b0:	81c2      	strh	r2, [r0, #14]
 800a4b2:	6183      	str	r3, [r0, #24]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	2208      	movs	r2, #8
 800a4b8:	305c      	adds	r0, #92	; 0x5c
 800a4ba:	f7ff fce7 	bl	8009e8c <memset>
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <std+0x38>)
 800a4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <std+0x3c>)
 800a4c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <std+0x40>)
 800a4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ca:	4b05      	ldr	r3, [pc, #20]	; (800a4e0 <std+0x44>)
 800a4cc:	6224      	str	r4, [r4, #32]
 800a4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800ad4d 	.word	0x0800ad4d
 800a4d8:	0800ad6f 	.word	0x0800ad6f
 800a4dc:	0800ada7 	.word	0x0800ada7
 800a4e0:	0800adcb 	.word	0x0800adcb

0800a4e4 <_cleanup_r>:
 800a4e4:	4901      	ldr	r1, [pc, #4]	; (800a4ec <_cleanup_r+0x8>)
 800a4e6:	f000 b8af 	b.w	800a648 <_fwalk_reent>
 800a4ea:	bf00      	nop
 800a4ec:	0800a425 	.word	0x0800a425

0800a4f0 <__sfmoreglue>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	2268      	movs	r2, #104	; 0x68
 800a4f4:	1e4d      	subs	r5, r1, #1
 800a4f6:	4355      	muls	r5, r2
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4fe:	f7ff fd39 	bl	8009f74 <_malloc_r>
 800a502:	4604      	mov	r4, r0
 800a504:	b140      	cbz	r0, 800a518 <__sfmoreglue+0x28>
 800a506:	2100      	movs	r1, #0
 800a508:	e9c0 1600 	strd	r1, r6, [r0]
 800a50c:	300c      	adds	r0, #12
 800a50e:	60a0      	str	r0, [r4, #8]
 800a510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a514:	f7ff fcba 	bl	8009e8c <memset>
 800a518:	4620      	mov	r0, r4
 800a51a:	bd70      	pop	{r4, r5, r6, pc}

0800a51c <__sfp_lock_acquire>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__sfp_lock_acquire+0x8>)
 800a51e:	f000 b8b3 	b.w	800a688 <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	20000aad 	.word	0x20000aad

0800a528 <__sfp_lock_release>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__sfp_lock_release+0x8>)
 800a52a:	f000 b8ae 	b.w	800a68a <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	20000aad 	.word	0x20000aad

0800a534 <__sinit_lock_acquire>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__sinit_lock_acquire+0x8>)
 800a536:	f000 b8a7 	b.w	800a688 <__retarget_lock_acquire_recursive>
 800a53a:	bf00      	nop
 800a53c:	20000aae 	.word	0x20000aae

0800a540 <__sinit_lock_release>:
 800a540:	4801      	ldr	r0, [pc, #4]	; (800a548 <__sinit_lock_release+0x8>)
 800a542:	f000 b8a2 	b.w	800a68a <__retarget_lock_release_recursive>
 800a546:	bf00      	nop
 800a548:	20000aae 	.word	0x20000aae

0800a54c <__sinit>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	4604      	mov	r4, r0
 800a550:	f7ff fff0 	bl	800a534 <__sinit_lock_acquire>
 800a554:	69a3      	ldr	r3, [r4, #24]
 800a556:	b11b      	cbz	r3, 800a560 <__sinit+0x14>
 800a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55c:	f7ff bff0 	b.w	800a540 <__sinit_lock_release>
 800a560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a564:	6523      	str	r3, [r4, #80]	; 0x50
 800a566:	4b13      	ldr	r3, [pc, #76]	; (800a5b4 <__sinit+0x68>)
 800a568:	4a13      	ldr	r2, [pc, #76]	; (800a5b8 <__sinit+0x6c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a56e:	42a3      	cmp	r3, r4
 800a570:	bf04      	itt	eq
 800a572:	2301      	moveq	r3, #1
 800a574:	61a3      	streq	r3, [r4, #24]
 800a576:	4620      	mov	r0, r4
 800a578:	f000 f820 	bl	800a5bc <__sfp>
 800a57c:	6060      	str	r0, [r4, #4]
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 f81c 	bl	800a5bc <__sfp>
 800a584:	60a0      	str	r0, [r4, #8]
 800a586:	4620      	mov	r0, r4
 800a588:	f000 f818 	bl	800a5bc <__sfp>
 800a58c:	2200      	movs	r2, #0
 800a58e:	60e0      	str	r0, [r4, #12]
 800a590:	2104      	movs	r1, #4
 800a592:	6860      	ldr	r0, [r4, #4]
 800a594:	f7ff ff82 	bl	800a49c <std>
 800a598:	68a0      	ldr	r0, [r4, #8]
 800a59a:	2201      	movs	r2, #1
 800a59c:	2109      	movs	r1, #9
 800a59e:	f7ff ff7d 	bl	800a49c <std>
 800a5a2:	68e0      	ldr	r0, [r4, #12]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	2112      	movs	r1, #18
 800a5a8:	f7ff ff78 	bl	800a49c <std>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	61a3      	str	r3, [r4, #24]
 800a5b0:	e7d2      	b.n	800a558 <__sinit+0xc>
 800a5b2:	bf00      	nop
 800a5b4:	0800b420 	.word	0x0800b420
 800a5b8:	0800a4e5 	.word	0x0800a4e5

0800a5bc <__sfp>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4607      	mov	r7, r0
 800a5c0:	f7ff ffac 	bl	800a51c <__sfp_lock_acquire>
 800a5c4:	4b1e      	ldr	r3, [pc, #120]	; (800a640 <__sfp+0x84>)
 800a5c6:	681e      	ldr	r6, [r3, #0]
 800a5c8:	69b3      	ldr	r3, [r6, #24]
 800a5ca:	b913      	cbnz	r3, 800a5d2 <__sfp+0x16>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ffbd 	bl	800a54c <__sinit>
 800a5d2:	3648      	adds	r6, #72	; 0x48
 800a5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	d503      	bpl.n	800a5e4 <__sfp+0x28>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	b30b      	cbz	r3, 800a624 <__sfp+0x68>
 800a5e0:	6836      	ldr	r6, [r6, #0]
 800a5e2:	e7f7      	b.n	800a5d4 <__sfp+0x18>
 800a5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5e8:	b9d5      	cbnz	r5, 800a620 <__sfp+0x64>
 800a5ea:	4b16      	ldr	r3, [pc, #88]	; (800a644 <__sfp+0x88>)
 800a5ec:	60e3      	str	r3, [r4, #12]
 800a5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a5f4:	f000 f847 	bl	800a686 <__retarget_lock_init_recursive>
 800a5f8:	f7ff ff96 	bl	800a528 <__sfp_lock_release>
 800a5fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a604:	6025      	str	r5, [r4, #0]
 800a606:	61a5      	str	r5, [r4, #24]
 800a608:	2208      	movs	r2, #8
 800a60a:	4629      	mov	r1, r5
 800a60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a610:	f7ff fc3c 	bl	8009e8c <memset>
 800a614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a61c:	4620      	mov	r0, r4
 800a61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a620:	3468      	adds	r4, #104	; 0x68
 800a622:	e7d9      	b.n	800a5d8 <__sfp+0x1c>
 800a624:	2104      	movs	r1, #4
 800a626:	4638      	mov	r0, r7
 800a628:	f7ff ff62 	bl	800a4f0 <__sfmoreglue>
 800a62c:	4604      	mov	r4, r0
 800a62e:	6030      	str	r0, [r6, #0]
 800a630:	2800      	cmp	r0, #0
 800a632:	d1d5      	bne.n	800a5e0 <__sfp+0x24>
 800a634:	f7ff ff78 	bl	800a528 <__sfp_lock_release>
 800a638:	230c      	movs	r3, #12
 800a63a:	603b      	str	r3, [r7, #0]
 800a63c:	e7ee      	b.n	800a61c <__sfp+0x60>
 800a63e:	bf00      	nop
 800a640:	0800b420 	.word	0x0800b420
 800a644:	ffff0001 	.word	0xffff0001

0800a648 <_fwalk_reent>:
 800a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a64c:	4606      	mov	r6, r0
 800a64e:	4688      	mov	r8, r1
 800a650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a654:	2700      	movs	r7, #0
 800a656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a65a:	f1b9 0901 	subs.w	r9, r9, #1
 800a65e:	d505      	bpl.n	800a66c <_fwalk_reent+0x24>
 800a660:	6824      	ldr	r4, [r4, #0]
 800a662:	2c00      	cmp	r4, #0
 800a664:	d1f7      	bne.n	800a656 <_fwalk_reent+0xe>
 800a666:	4638      	mov	r0, r7
 800a668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66c:	89ab      	ldrh	r3, [r5, #12]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d907      	bls.n	800a682 <_fwalk_reent+0x3a>
 800a672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a676:	3301      	adds	r3, #1
 800a678:	d003      	beq.n	800a682 <_fwalk_reent+0x3a>
 800a67a:	4629      	mov	r1, r5
 800a67c:	4630      	mov	r0, r6
 800a67e:	47c0      	blx	r8
 800a680:	4307      	orrs	r7, r0
 800a682:	3568      	adds	r5, #104	; 0x68
 800a684:	e7e9      	b.n	800a65a <_fwalk_reent+0x12>

0800a686 <__retarget_lock_init_recursive>:
 800a686:	4770      	bx	lr

0800a688 <__retarget_lock_acquire_recursive>:
 800a688:	4770      	bx	lr

0800a68a <__retarget_lock_release_recursive>:
 800a68a:	4770      	bx	lr

0800a68c <__swhatbuf_r>:
 800a68c:	b570      	push	{r4, r5, r6, lr}
 800a68e:	460e      	mov	r6, r1
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	2900      	cmp	r1, #0
 800a696:	b096      	sub	sp, #88	; 0x58
 800a698:	4614      	mov	r4, r2
 800a69a:	461d      	mov	r5, r3
 800a69c:	da08      	bge.n	800a6b0 <__swhatbuf_r+0x24>
 800a69e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	061a      	lsls	r2, r3, #24
 800a6a8:	d410      	bmi.n	800a6cc <__swhatbuf_r+0x40>
 800a6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6ae:	e00e      	b.n	800a6ce <__swhatbuf_r+0x42>
 800a6b0:	466a      	mov	r2, sp
 800a6b2:	f000 fbb1 	bl	800ae18 <_fstat_r>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	dbf1      	blt.n	800a69e <__swhatbuf_r+0x12>
 800a6ba:	9a01      	ldr	r2, [sp, #4]
 800a6bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6c4:	425a      	negs	r2, r3
 800a6c6:	415a      	adcs	r2, r3
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	e7ee      	b.n	800a6aa <__swhatbuf_r+0x1e>
 800a6cc:	2340      	movs	r3, #64	; 0x40
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	b016      	add	sp, #88	; 0x58
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6d8 <__smakebuf_r>:
 800a6d8:	898b      	ldrh	r3, [r1, #12]
 800a6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6dc:	079d      	lsls	r5, r3, #30
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	d507      	bpl.n	800a6f4 <__smakebuf_r+0x1c>
 800a6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	6163      	str	r3, [r4, #20]
 800a6f0:	b002      	add	sp, #8
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	ab01      	add	r3, sp, #4
 800a6f6:	466a      	mov	r2, sp
 800a6f8:	f7ff ffc8 	bl	800a68c <__swhatbuf_r>
 800a6fc:	9900      	ldr	r1, [sp, #0]
 800a6fe:	4605      	mov	r5, r0
 800a700:	4630      	mov	r0, r6
 800a702:	f7ff fc37 	bl	8009f74 <_malloc_r>
 800a706:	b948      	cbnz	r0, 800a71c <__smakebuf_r+0x44>
 800a708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70c:	059a      	lsls	r2, r3, #22
 800a70e:	d4ef      	bmi.n	800a6f0 <__smakebuf_r+0x18>
 800a710:	f023 0303 	bic.w	r3, r3, #3
 800a714:	f043 0302 	orr.w	r3, r3, #2
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7e3      	b.n	800a6e4 <__smakebuf_r+0xc>
 800a71c:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <__smakebuf_r+0x7c>)
 800a71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	6020      	str	r0, [r4, #0]
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	6163      	str	r3, [r4, #20]
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	6120      	str	r0, [r4, #16]
 800a732:	b15b      	cbz	r3, 800a74c <__smakebuf_r+0x74>
 800a734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a738:	4630      	mov	r0, r6
 800a73a:	f000 fb7f 	bl	800ae3c <_isatty_r>
 800a73e:	b128      	cbz	r0, 800a74c <__smakebuf_r+0x74>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	89a0      	ldrh	r0, [r4, #12]
 800a74e:	4305      	orrs	r5, r0
 800a750:	81a5      	strh	r5, [r4, #12]
 800a752:	e7cd      	b.n	800a6f0 <__smakebuf_r+0x18>
 800a754:	0800a4e5 	.word	0x0800a4e5

0800a758 <__malloc_lock>:
 800a758:	4801      	ldr	r0, [pc, #4]	; (800a760 <__malloc_lock+0x8>)
 800a75a:	f7ff bf95 	b.w	800a688 <__retarget_lock_acquire_recursive>
 800a75e:	bf00      	nop
 800a760:	20000aac 	.word	0x20000aac

0800a764 <__malloc_unlock>:
 800a764:	4801      	ldr	r0, [pc, #4]	; (800a76c <__malloc_unlock+0x8>)
 800a766:	f7ff bf90 	b.w	800a68a <__retarget_lock_release_recursive>
 800a76a:	bf00      	nop
 800a76c:	20000aac 	.word	0x20000aac

0800a770 <__sfputc_r>:
 800a770:	6893      	ldr	r3, [r2, #8]
 800a772:	3b01      	subs	r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	b410      	push	{r4}
 800a778:	6093      	str	r3, [r2, #8]
 800a77a:	da08      	bge.n	800a78e <__sfputc_r+0x1e>
 800a77c:	6994      	ldr	r4, [r2, #24]
 800a77e:	42a3      	cmp	r3, r4
 800a780:	db01      	blt.n	800a786 <__sfputc_r+0x16>
 800a782:	290a      	cmp	r1, #10
 800a784:	d103      	bne.n	800a78e <__sfputc_r+0x1e>
 800a786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78a:	f7ff bd05 	b.w	800a198 <__swbuf_r>
 800a78e:	6813      	ldr	r3, [r2, #0]
 800a790:	1c58      	adds	r0, r3, #1
 800a792:	6010      	str	r0, [r2, #0]
 800a794:	7019      	strb	r1, [r3, #0]
 800a796:	4608      	mov	r0, r1
 800a798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <__sfputs_r>:
 800a79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	18d5      	adds	r5, r2, r3
 800a7a8:	42ac      	cmp	r4, r5
 800a7aa:	d101      	bne.n	800a7b0 <__sfputs_r+0x12>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	e007      	b.n	800a7c0 <__sfputs_r+0x22>
 800a7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b4:	463a      	mov	r2, r7
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff ffda 	bl	800a770 <__sfputc_r>
 800a7bc:	1c43      	adds	r3, r0, #1
 800a7be:	d1f3      	bne.n	800a7a8 <__sfputs_r+0xa>
 800a7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c4 <_vfiprintf_r>:
 800a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	b09d      	sub	sp, #116	; 0x74
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	4698      	mov	r8, r3
 800a7d0:	4606      	mov	r6, r0
 800a7d2:	b118      	cbz	r0, 800a7dc <_vfiprintf_r+0x18>
 800a7d4:	6983      	ldr	r3, [r0, #24]
 800a7d6:	b90b      	cbnz	r3, 800a7dc <_vfiprintf_r+0x18>
 800a7d8:	f7ff feb8 	bl	800a54c <__sinit>
 800a7dc:	4b89      	ldr	r3, [pc, #548]	; (800aa04 <_vfiprintf_r+0x240>)
 800a7de:	429d      	cmp	r5, r3
 800a7e0:	d11b      	bne.n	800a81a <_vfiprintf_r+0x56>
 800a7e2:	6875      	ldr	r5, [r6, #4]
 800a7e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e6:	07d9      	lsls	r1, r3, #31
 800a7e8:	d405      	bmi.n	800a7f6 <_vfiprintf_r+0x32>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d402      	bmi.n	800a7f6 <_vfiprintf_r+0x32>
 800a7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f2:	f7ff ff49 	bl	800a688 <__retarget_lock_acquire_recursive>
 800a7f6:	89ab      	ldrh	r3, [r5, #12]
 800a7f8:	071b      	lsls	r3, r3, #28
 800a7fa:	d501      	bpl.n	800a800 <_vfiprintf_r+0x3c>
 800a7fc:	692b      	ldr	r3, [r5, #16]
 800a7fe:	b9eb      	cbnz	r3, 800a83c <_vfiprintf_r+0x78>
 800a800:	4629      	mov	r1, r5
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff fd1a 	bl	800a23c <__swsetup_r>
 800a808:	b1c0      	cbz	r0, 800a83c <_vfiprintf_r+0x78>
 800a80a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a80c:	07dc      	lsls	r4, r3, #31
 800a80e:	d50e      	bpl.n	800a82e <_vfiprintf_r+0x6a>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	b01d      	add	sp, #116	; 0x74
 800a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81a:	4b7b      	ldr	r3, [pc, #492]	; (800aa08 <_vfiprintf_r+0x244>)
 800a81c:	429d      	cmp	r5, r3
 800a81e:	d101      	bne.n	800a824 <_vfiprintf_r+0x60>
 800a820:	68b5      	ldr	r5, [r6, #8]
 800a822:	e7df      	b.n	800a7e4 <_vfiprintf_r+0x20>
 800a824:	4b79      	ldr	r3, [pc, #484]	; (800aa0c <_vfiprintf_r+0x248>)
 800a826:	429d      	cmp	r5, r3
 800a828:	bf08      	it	eq
 800a82a:	68f5      	ldreq	r5, [r6, #12]
 800a82c:	e7da      	b.n	800a7e4 <_vfiprintf_r+0x20>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	0598      	lsls	r0, r3, #22
 800a832:	d4ed      	bmi.n	800a810 <_vfiprintf_r+0x4c>
 800a834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a836:	f7ff ff28 	bl	800a68a <__retarget_lock_release_recursive>
 800a83a:	e7e9      	b.n	800a810 <_vfiprintf_r+0x4c>
 800a83c:	2300      	movs	r3, #0
 800a83e:	9309      	str	r3, [sp, #36]	; 0x24
 800a840:	2320      	movs	r3, #32
 800a842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a846:	f8cd 800c 	str.w	r8, [sp, #12]
 800a84a:	2330      	movs	r3, #48	; 0x30
 800a84c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aa10 <_vfiprintf_r+0x24c>
 800a850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a854:	f04f 0901 	mov.w	r9, #1
 800a858:	4623      	mov	r3, r4
 800a85a:	469a      	mov	sl, r3
 800a85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a860:	b10a      	cbz	r2, 800a866 <_vfiprintf_r+0xa2>
 800a862:	2a25      	cmp	r2, #37	; 0x25
 800a864:	d1f9      	bne.n	800a85a <_vfiprintf_r+0x96>
 800a866:	ebba 0b04 	subs.w	fp, sl, r4
 800a86a:	d00b      	beq.n	800a884 <_vfiprintf_r+0xc0>
 800a86c:	465b      	mov	r3, fp
 800a86e:	4622      	mov	r2, r4
 800a870:	4629      	mov	r1, r5
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff93 	bl	800a79e <__sfputs_r>
 800a878:	3001      	adds	r0, #1
 800a87a:	f000 80aa 	beq.w	800a9d2 <_vfiprintf_r+0x20e>
 800a87e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a880:	445a      	add	r2, fp
 800a882:	9209      	str	r2, [sp, #36]	; 0x24
 800a884:	f89a 3000 	ldrb.w	r3, [sl]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 80a2 	beq.w	800a9d2 <_vfiprintf_r+0x20e>
 800a88e:	2300      	movs	r3, #0
 800a890:	f04f 32ff 	mov.w	r2, #4294967295
 800a894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a898:	f10a 0a01 	add.w	sl, sl, #1
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	9307      	str	r3, [sp, #28]
 800a8a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8a6:	4654      	mov	r4, sl
 800a8a8:	2205      	movs	r2, #5
 800a8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ae:	4858      	ldr	r0, [pc, #352]	; (800aa10 <_vfiprintf_r+0x24c>)
 800a8b0:	f7f5 fc9e 	bl	80001f0 <memchr>
 800a8b4:	9a04      	ldr	r2, [sp, #16]
 800a8b6:	b9d8      	cbnz	r0, 800a8f0 <_vfiprintf_r+0x12c>
 800a8b8:	06d1      	lsls	r1, r2, #27
 800a8ba:	bf44      	itt	mi
 800a8bc:	2320      	movmi	r3, #32
 800a8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c2:	0713      	lsls	r3, r2, #28
 800a8c4:	bf44      	itt	mi
 800a8c6:	232b      	movmi	r3, #43	; 0x2b
 800a8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d2:	d015      	beq.n	800a900 <_vfiprintf_r+0x13c>
 800a8d4:	9a07      	ldr	r2, [sp, #28]
 800a8d6:	4654      	mov	r4, sl
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f04f 0c0a 	mov.w	ip, #10
 800a8de:	4621      	mov	r1, r4
 800a8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8e4:	3b30      	subs	r3, #48	; 0x30
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d94e      	bls.n	800a988 <_vfiprintf_r+0x1c4>
 800a8ea:	b1b0      	cbz	r0, 800a91a <_vfiprintf_r+0x156>
 800a8ec:	9207      	str	r2, [sp, #28]
 800a8ee:	e014      	b.n	800a91a <_vfiprintf_r+0x156>
 800a8f0:	eba0 0308 	sub.w	r3, r0, r8
 800a8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	46a2      	mov	sl, r4
 800a8fe:	e7d2      	b.n	800a8a6 <_vfiprintf_r+0xe2>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	1d19      	adds	r1, r3, #4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	9103      	str	r1, [sp, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfbb      	ittet	lt
 800a90c:	425b      	neglt	r3, r3
 800a90e:	f042 0202 	orrlt.w	r2, r2, #2
 800a912:	9307      	strge	r3, [sp, #28]
 800a914:	9307      	strlt	r3, [sp, #28]
 800a916:	bfb8      	it	lt
 800a918:	9204      	strlt	r2, [sp, #16]
 800a91a:	7823      	ldrb	r3, [r4, #0]
 800a91c:	2b2e      	cmp	r3, #46	; 0x2e
 800a91e:	d10c      	bne.n	800a93a <_vfiprintf_r+0x176>
 800a920:	7863      	ldrb	r3, [r4, #1]
 800a922:	2b2a      	cmp	r3, #42	; 0x2a
 800a924:	d135      	bne.n	800a992 <_vfiprintf_r+0x1ce>
 800a926:	9b03      	ldr	r3, [sp, #12]
 800a928:	1d1a      	adds	r2, r3, #4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	9203      	str	r2, [sp, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bfb8      	it	lt
 800a932:	f04f 33ff 	movlt.w	r3, #4294967295
 800a936:	3402      	adds	r4, #2
 800a938:	9305      	str	r3, [sp, #20]
 800a93a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aa20 <_vfiprintf_r+0x25c>
 800a93e:	7821      	ldrb	r1, [r4, #0]
 800a940:	2203      	movs	r2, #3
 800a942:	4650      	mov	r0, sl
 800a944:	f7f5 fc54 	bl	80001f0 <memchr>
 800a948:	b140      	cbz	r0, 800a95c <_vfiprintf_r+0x198>
 800a94a:	2340      	movs	r3, #64	; 0x40
 800a94c:	eba0 000a 	sub.w	r0, r0, sl
 800a950:	fa03 f000 	lsl.w	r0, r3, r0
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	4303      	orrs	r3, r0
 800a958:	3401      	adds	r4, #1
 800a95a:	9304      	str	r3, [sp, #16]
 800a95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a960:	482c      	ldr	r0, [pc, #176]	; (800aa14 <_vfiprintf_r+0x250>)
 800a962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a966:	2206      	movs	r2, #6
 800a968:	f7f5 fc42 	bl	80001f0 <memchr>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d03f      	beq.n	800a9f0 <_vfiprintf_r+0x22c>
 800a970:	4b29      	ldr	r3, [pc, #164]	; (800aa18 <_vfiprintf_r+0x254>)
 800a972:	bb1b      	cbnz	r3, 800a9bc <_vfiprintf_r+0x1f8>
 800a974:	9b03      	ldr	r3, [sp, #12]
 800a976:	3307      	adds	r3, #7
 800a978:	f023 0307 	bic.w	r3, r3, #7
 800a97c:	3308      	adds	r3, #8
 800a97e:	9303      	str	r3, [sp, #12]
 800a980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a982:	443b      	add	r3, r7
 800a984:	9309      	str	r3, [sp, #36]	; 0x24
 800a986:	e767      	b.n	800a858 <_vfiprintf_r+0x94>
 800a988:	fb0c 3202 	mla	r2, ip, r2, r3
 800a98c:	460c      	mov	r4, r1
 800a98e:	2001      	movs	r0, #1
 800a990:	e7a5      	b.n	800a8de <_vfiprintf_r+0x11a>
 800a992:	2300      	movs	r3, #0
 800a994:	3401      	adds	r4, #1
 800a996:	9305      	str	r3, [sp, #20]
 800a998:	4619      	mov	r1, r3
 800a99a:	f04f 0c0a 	mov.w	ip, #10
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a4:	3a30      	subs	r2, #48	; 0x30
 800a9a6:	2a09      	cmp	r2, #9
 800a9a8:	d903      	bls.n	800a9b2 <_vfiprintf_r+0x1ee>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d0c5      	beq.n	800a93a <_vfiprintf_r+0x176>
 800a9ae:	9105      	str	r1, [sp, #20]
 800a9b0:	e7c3      	b.n	800a93a <_vfiprintf_r+0x176>
 800a9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e7f0      	b.n	800a99e <_vfiprintf_r+0x1da>
 800a9bc:	ab03      	add	r3, sp, #12
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	462a      	mov	r2, r5
 800a9c2:	4b16      	ldr	r3, [pc, #88]	; (800aa1c <_vfiprintf_r+0x258>)
 800a9c4:	a904      	add	r1, sp, #16
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f3af 8000 	nop.w
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	1c78      	adds	r0, r7, #1
 800a9d0:	d1d6      	bne.n	800a980 <_vfiprintf_r+0x1bc>
 800a9d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d4:	07d9      	lsls	r1, r3, #31
 800a9d6:	d405      	bmi.n	800a9e4 <_vfiprintf_r+0x220>
 800a9d8:	89ab      	ldrh	r3, [r5, #12]
 800a9da:	059a      	lsls	r2, r3, #22
 800a9dc:	d402      	bmi.n	800a9e4 <_vfiprintf_r+0x220>
 800a9de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9e0:	f7ff fe53 	bl	800a68a <__retarget_lock_release_recursive>
 800a9e4:	89ab      	ldrh	r3, [r5, #12]
 800a9e6:	065b      	lsls	r3, r3, #25
 800a9e8:	f53f af12 	bmi.w	800a810 <_vfiprintf_r+0x4c>
 800a9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ee:	e711      	b.n	800a814 <_vfiprintf_r+0x50>
 800a9f0:	ab03      	add	r3, sp, #12
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <_vfiprintf_r+0x258>)
 800a9f8:	a904      	add	r1, sp, #16
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f000 f880 	bl	800ab00 <_printf_i>
 800aa00:	e7e4      	b.n	800a9cc <_vfiprintf_r+0x208>
 800aa02:	bf00      	nop
 800aa04:	0800b444 	.word	0x0800b444
 800aa08:	0800b464 	.word	0x0800b464
 800aa0c:	0800b424 	.word	0x0800b424
 800aa10:	0800b484 	.word	0x0800b484
 800aa14:	0800b48e 	.word	0x0800b48e
 800aa18:	00000000 	.word	0x00000000
 800aa1c:	0800a79f 	.word	0x0800a79f
 800aa20:	0800b48a 	.word	0x0800b48a

0800aa24 <_printf_common>:
 800aa24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa28:	4616      	mov	r6, r2
 800aa2a:	4699      	mov	r9, r3
 800aa2c:	688a      	ldr	r2, [r1, #8]
 800aa2e:	690b      	ldr	r3, [r1, #16]
 800aa30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bfb8      	it	lt
 800aa38:	4613      	movlt	r3, r2
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa40:	4607      	mov	r7, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	b10a      	cbz	r2, 800aa4a <_printf_common+0x26>
 800aa46:	3301      	adds	r3, #1
 800aa48:	6033      	str	r3, [r6, #0]
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	0699      	lsls	r1, r3, #26
 800aa4e:	bf42      	ittt	mi
 800aa50:	6833      	ldrmi	r3, [r6, #0]
 800aa52:	3302      	addmi	r3, #2
 800aa54:	6033      	strmi	r3, [r6, #0]
 800aa56:	6825      	ldr	r5, [r4, #0]
 800aa58:	f015 0506 	ands.w	r5, r5, #6
 800aa5c:	d106      	bne.n	800aa6c <_printf_common+0x48>
 800aa5e:	f104 0a19 	add.w	sl, r4, #25
 800aa62:	68e3      	ldr	r3, [r4, #12]
 800aa64:	6832      	ldr	r2, [r6, #0]
 800aa66:	1a9b      	subs	r3, r3, r2
 800aa68:	42ab      	cmp	r3, r5
 800aa6a:	dc26      	bgt.n	800aaba <_printf_common+0x96>
 800aa6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa70:	1e13      	subs	r3, r2, #0
 800aa72:	6822      	ldr	r2, [r4, #0]
 800aa74:	bf18      	it	ne
 800aa76:	2301      	movne	r3, #1
 800aa78:	0692      	lsls	r2, r2, #26
 800aa7a:	d42b      	bmi.n	800aad4 <_printf_common+0xb0>
 800aa7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa80:	4649      	mov	r1, r9
 800aa82:	4638      	mov	r0, r7
 800aa84:	47c0      	blx	r8
 800aa86:	3001      	adds	r0, #1
 800aa88:	d01e      	beq.n	800aac8 <_printf_common+0xa4>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	68e5      	ldr	r5, [r4, #12]
 800aa8e:	6832      	ldr	r2, [r6, #0]
 800aa90:	f003 0306 	and.w	r3, r3, #6
 800aa94:	2b04      	cmp	r3, #4
 800aa96:	bf08      	it	eq
 800aa98:	1aad      	subeq	r5, r5, r2
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	6922      	ldr	r2, [r4, #16]
 800aa9e:	bf0c      	ite	eq
 800aaa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa4:	2500      	movne	r5, #0
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	bfc4      	itt	gt
 800aaaa:	1a9b      	subgt	r3, r3, r2
 800aaac:	18ed      	addgt	r5, r5, r3
 800aaae:	2600      	movs	r6, #0
 800aab0:	341a      	adds	r4, #26
 800aab2:	42b5      	cmp	r5, r6
 800aab4:	d11a      	bne.n	800aaec <_printf_common+0xc8>
 800aab6:	2000      	movs	r0, #0
 800aab8:	e008      	b.n	800aacc <_printf_common+0xa8>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4652      	mov	r2, sl
 800aabe:	4649      	mov	r1, r9
 800aac0:	4638      	mov	r0, r7
 800aac2:	47c0      	blx	r8
 800aac4:	3001      	adds	r0, #1
 800aac6:	d103      	bne.n	800aad0 <_printf_common+0xac>
 800aac8:	f04f 30ff 	mov.w	r0, #4294967295
 800aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad0:	3501      	adds	r5, #1
 800aad2:	e7c6      	b.n	800aa62 <_printf_common+0x3e>
 800aad4:	18e1      	adds	r1, r4, r3
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	2030      	movs	r0, #48	; 0x30
 800aada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aade:	4422      	add	r2, r4
 800aae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae8:	3302      	adds	r3, #2
 800aaea:	e7c7      	b.n	800aa7c <_printf_common+0x58>
 800aaec:	2301      	movs	r3, #1
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	47c0      	blx	r8
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	d0e6      	beq.n	800aac8 <_printf_common+0xa4>
 800aafa:	3601      	adds	r6, #1
 800aafc:	e7d9      	b.n	800aab2 <_printf_common+0x8e>
	...

0800ab00 <_printf_i>:
 800ab00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab04:	7e0f      	ldrb	r7, [r1, #24]
 800ab06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab08:	2f78      	cmp	r7, #120	; 0x78
 800ab0a:	4691      	mov	r9, r2
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	469a      	mov	sl, r3
 800ab12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab16:	d807      	bhi.n	800ab28 <_printf_i+0x28>
 800ab18:	2f62      	cmp	r7, #98	; 0x62
 800ab1a:	d80a      	bhi.n	800ab32 <_printf_i+0x32>
 800ab1c:	2f00      	cmp	r7, #0
 800ab1e:	f000 80d8 	beq.w	800acd2 <_printf_i+0x1d2>
 800ab22:	2f58      	cmp	r7, #88	; 0x58
 800ab24:	f000 80a3 	beq.w	800ac6e <_printf_i+0x16e>
 800ab28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab30:	e03a      	b.n	800aba8 <_printf_i+0xa8>
 800ab32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab36:	2b15      	cmp	r3, #21
 800ab38:	d8f6      	bhi.n	800ab28 <_printf_i+0x28>
 800ab3a:	a101      	add	r1, pc, #4	; (adr r1, 800ab40 <_printf_i+0x40>)
 800ab3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab40:	0800ab99 	.word	0x0800ab99
 800ab44:	0800abad 	.word	0x0800abad
 800ab48:	0800ab29 	.word	0x0800ab29
 800ab4c:	0800ab29 	.word	0x0800ab29
 800ab50:	0800ab29 	.word	0x0800ab29
 800ab54:	0800ab29 	.word	0x0800ab29
 800ab58:	0800abad 	.word	0x0800abad
 800ab5c:	0800ab29 	.word	0x0800ab29
 800ab60:	0800ab29 	.word	0x0800ab29
 800ab64:	0800ab29 	.word	0x0800ab29
 800ab68:	0800ab29 	.word	0x0800ab29
 800ab6c:	0800acb9 	.word	0x0800acb9
 800ab70:	0800abdd 	.word	0x0800abdd
 800ab74:	0800ac9b 	.word	0x0800ac9b
 800ab78:	0800ab29 	.word	0x0800ab29
 800ab7c:	0800ab29 	.word	0x0800ab29
 800ab80:	0800acdb 	.word	0x0800acdb
 800ab84:	0800ab29 	.word	0x0800ab29
 800ab88:	0800abdd 	.word	0x0800abdd
 800ab8c:	0800ab29 	.word	0x0800ab29
 800ab90:	0800ab29 	.word	0x0800ab29
 800ab94:	0800aca3 	.word	0x0800aca3
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	1d1a      	adds	r2, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	602a      	str	r2, [r5, #0]
 800aba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba8:	2301      	movs	r3, #1
 800abaa:	e0a3      	b.n	800acf4 <_printf_i+0x1f4>
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	6829      	ldr	r1, [r5, #0]
 800abb0:	0606      	lsls	r6, r0, #24
 800abb2:	f101 0304 	add.w	r3, r1, #4
 800abb6:	d50a      	bpl.n	800abce <_printf_i+0xce>
 800abb8:	680e      	ldr	r6, [r1, #0]
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	da03      	bge.n	800abc8 <_printf_i+0xc8>
 800abc0:	232d      	movs	r3, #45	; 0x2d
 800abc2:	4276      	negs	r6, r6
 800abc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc8:	485e      	ldr	r0, [pc, #376]	; (800ad44 <_printf_i+0x244>)
 800abca:	230a      	movs	r3, #10
 800abcc:	e019      	b.n	800ac02 <_printf_i+0x102>
 800abce:	680e      	ldr	r6, [r1, #0]
 800abd0:	602b      	str	r3, [r5, #0]
 800abd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abd6:	bf18      	it	ne
 800abd8:	b236      	sxthne	r6, r6
 800abda:	e7ef      	b.n	800abbc <_printf_i+0xbc>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	6820      	ldr	r0, [r4, #0]
 800abe0:	1d19      	adds	r1, r3, #4
 800abe2:	6029      	str	r1, [r5, #0]
 800abe4:	0601      	lsls	r1, r0, #24
 800abe6:	d501      	bpl.n	800abec <_printf_i+0xec>
 800abe8:	681e      	ldr	r6, [r3, #0]
 800abea:	e002      	b.n	800abf2 <_printf_i+0xf2>
 800abec:	0646      	lsls	r6, r0, #25
 800abee:	d5fb      	bpl.n	800abe8 <_printf_i+0xe8>
 800abf0:	881e      	ldrh	r6, [r3, #0]
 800abf2:	4854      	ldr	r0, [pc, #336]	; (800ad44 <_printf_i+0x244>)
 800abf4:	2f6f      	cmp	r7, #111	; 0x6f
 800abf6:	bf0c      	ite	eq
 800abf8:	2308      	moveq	r3, #8
 800abfa:	230a      	movne	r3, #10
 800abfc:	2100      	movs	r1, #0
 800abfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac02:	6865      	ldr	r5, [r4, #4]
 800ac04:	60a5      	str	r5, [r4, #8]
 800ac06:	2d00      	cmp	r5, #0
 800ac08:	bfa2      	ittt	ge
 800ac0a:	6821      	ldrge	r1, [r4, #0]
 800ac0c:	f021 0104 	bicge.w	r1, r1, #4
 800ac10:	6021      	strge	r1, [r4, #0]
 800ac12:	b90e      	cbnz	r6, 800ac18 <_printf_i+0x118>
 800ac14:	2d00      	cmp	r5, #0
 800ac16:	d04d      	beq.n	800acb4 <_printf_i+0x1b4>
 800ac18:	4615      	mov	r5, r2
 800ac1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac1e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac22:	5dc7      	ldrb	r7, [r0, r7]
 800ac24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac28:	4637      	mov	r7, r6
 800ac2a:	42bb      	cmp	r3, r7
 800ac2c:	460e      	mov	r6, r1
 800ac2e:	d9f4      	bls.n	800ac1a <_printf_i+0x11a>
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d10b      	bne.n	800ac4c <_printf_i+0x14c>
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	07de      	lsls	r6, r3, #31
 800ac38:	d508      	bpl.n	800ac4c <_printf_i+0x14c>
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	6861      	ldr	r1, [r4, #4]
 800ac3e:	4299      	cmp	r1, r3
 800ac40:	bfde      	ittt	le
 800ac42:	2330      	movle	r3, #48	; 0x30
 800ac44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac4c:	1b52      	subs	r2, r2, r5
 800ac4e:	6122      	str	r2, [r4, #16]
 800ac50:	f8cd a000 	str.w	sl, [sp]
 800ac54:	464b      	mov	r3, r9
 800ac56:	aa03      	add	r2, sp, #12
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	f7ff fee2 	bl	800aa24 <_printf_common>
 800ac60:	3001      	adds	r0, #1
 800ac62:	d14c      	bne.n	800acfe <_printf_i+0x1fe>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b004      	add	sp, #16
 800ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6e:	4835      	ldr	r0, [pc, #212]	; (800ad44 <_printf_i+0x244>)
 800ac70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac74:	6829      	ldr	r1, [r5, #0]
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac7c:	6029      	str	r1, [r5, #0]
 800ac7e:	061d      	lsls	r5, r3, #24
 800ac80:	d514      	bpl.n	800acac <_printf_i+0x1ac>
 800ac82:	07df      	lsls	r7, r3, #31
 800ac84:	bf44      	itt	mi
 800ac86:	f043 0320 	orrmi.w	r3, r3, #32
 800ac8a:	6023      	strmi	r3, [r4, #0]
 800ac8c:	b91e      	cbnz	r6, 800ac96 <_printf_i+0x196>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	f023 0320 	bic.w	r3, r3, #32
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	2310      	movs	r3, #16
 800ac98:	e7b0      	b.n	800abfc <_printf_i+0xfc>
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	f043 0320 	orr.w	r3, r3, #32
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	2378      	movs	r3, #120	; 0x78
 800aca4:	4828      	ldr	r0, [pc, #160]	; (800ad48 <_printf_i+0x248>)
 800aca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acaa:	e7e3      	b.n	800ac74 <_printf_i+0x174>
 800acac:	0659      	lsls	r1, r3, #25
 800acae:	bf48      	it	mi
 800acb0:	b2b6      	uxthmi	r6, r6
 800acb2:	e7e6      	b.n	800ac82 <_printf_i+0x182>
 800acb4:	4615      	mov	r5, r2
 800acb6:	e7bb      	b.n	800ac30 <_printf_i+0x130>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	6826      	ldr	r6, [r4, #0]
 800acbc:	6961      	ldr	r1, [r4, #20]
 800acbe:	1d18      	adds	r0, r3, #4
 800acc0:	6028      	str	r0, [r5, #0]
 800acc2:	0635      	lsls	r5, r6, #24
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	d501      	bpl.n	800accc <_printf_i+0x1cc>
 800acc8:	6019      	str	r1, [r3, #0]
 800acca:	e002      	b.n	800acd2 <_printf_i+0x1d2>
 800accc:	0670      	lsls	r0, r6, #25
 800acce:	d5fb      	bpl.n	800acc8 <_printf_i+0x1c8>
 800acd0:	8019      	strh	r1, [r3, #0]
 800acd2:	2300      	movs	r3, #0
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	4615      	mov	r5, r2
 800acd8:	e7ba      	b.n	800ac50 <_printf_i+0x150>
 800acda:	682b      	ldr	r3, [r5, #0]
 800acdc:	1d1a      	adds	r2, r3, #4
 800acde:	602a      	str	r2, [r5, #0]
 800ace0:	681d      	ldr	r5, [r3, #0]
 800ace2:	6862      	ldr	r2, [r4, #4]
 800ace4:	2100      	movs	r1, #0
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7f5 fa82 	bl	80001f0 <memchr>
 800acec:	b108      	cbz	r0, 800acf2 <_printf_i+0x1f2>
 800acee:	1b40      	subs	r0, r0, r5
 800acf0:	6060      	str	r0, [r4, #4]
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	6123      	str	r3, [r4, #16]
 800acf6:	2300      	movs	r3, #0
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	e7a8      	b.n	800ac50 <_printf_i+0x150>
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	462a      	mov	r2, r5
 800ad02:	4649      	mov	r1, r9
 800ad04:	4640      	mov	r0, r8
 800ad06:	47d0      	blx	sl
 800ad08:	3001      	adds	r0, #1
 800ad0a:	d0ab      	beq.n	800ac64 <_printf_i+0x164>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	079b      	lsls	r3, r3, #30
 800ad10:	d413      	bmi.n	800ad3a <_printf_i+0x23a>
 800ad12:	68e0      	ldr	r0, [r4, #12]
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	4298      	cmp	r0, r3
 800ad18:	bfb8      	it	lt
 800ad1a:	4618      	movlt	r0, r3
 800ad1c:	e7a4      	b.n	800ac68 <_printf_i+0x168>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4632      	mov	r2, r6
 800ad22:	4649      	mov	r1, r9
 800ad24:	4640      	mov	r0, r8
 800ad26:	47d0      	blx	sl
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d09b      	beq.n	800ac64 <_printf_i+0x164>
 800ad2c:	3501      	adds	r5, #1
 800ad2e:	68e3      	ldr	r3, [r4, #12]
 800ad30:	9903      	ldr	r1, [sp, #12]
 800ad32:	1a5b      	subs	r3, r3, r1
 800ad34:	42ab      	cmp	r3, r5
 800ad36:	dcf2      	bgt.n	800ad1e <_printf_i+0x21e>
 800ad38:	e7eb      	b.n	800ad12 <_printf_i+0x212>
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	f104 0619 	add.w	r6, r4, #25
 800ad40:	e7f5      	b.n	800ad2e <_printf_i+0x22e>
 800ad42:	bf00      	nop
 800ad44:	0800b495 	.word	0x0800b495
 800ad48:	0800b4a6 	.word	0x0800b4a6

0800ad4c <__sread>:
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	460c      	mov	r4, r1
 800ad50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad54:	f000 f894 	bl	800ae80 <_read_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	bfab      	itete	ge
 800ad5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad60:	181b      	addge	r3, r3, r0
 800ad62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad66:	bfac      	ite	ge
 800ad68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad6a:	81a3      	strhlt	r3, [r4, #12]
 800ad6c:	bd10      	pop	{r4, pc}

0800ad6e <__swrite>:
 800ad6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad72:	461f      	mov	r7, r3
 800ad74:	898b      	ldrh	r3, [r1, #12]
 800ad76:	05db      	lsls	r3, r3, #23
 800ad78:	4605      	mov	r5, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	4616      	mov	r6, r2
 800ad7e:	d505      	bpl.n	800ad8c <__swrite+0x1e>
 800ad80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad84:	2302      	movs	r3, #2
 800ad86:	2200      	movs	r2, #0
 800ad88:	f000 f868 	bl	800ae5c <_lseek_r>
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	4632      	mov	r2, r6
 800ad9a:	463b      	mov	r3, r7
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	f000 b817 	b.w	800add4 <_write_r>

0800ada6 <__sseek>:
 800ada6:	b510      	push	{r4, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adae:	f000 f855 	bl	800ae5c <_lseek_r>
 800adb2:	1c43      	adds	r3, r0, #1
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	bf15      	itete	ne
 800adb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adc2:	81a3      	strheq	r3, [r4, #12]
 800adc4:	bf18      	it	ne
 800adc6:	81a3      	strhne	r3, [r4, #12]
 800adc8:	bd10      	pop	{r4, pc}

0800adca <__sclose>:
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 b813 	b.w	800adf8 <_close_r>
	...

0800add4 <_write_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_write_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f6 fd35 	bl	8001852 <_write>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_write_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_write_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000ab0 	.word	0x20000ab0

0800adf8 <_close_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	; (800ae14 <_close_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f6 fd41 	bl	800188a <_close>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_close_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_close_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	20000ab0 	.word	0x20000ab0

0800ae18 <_fstat_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d07      	ldr	r5, [pc, #28]	; (800ae38 <_fstat_r+0x20>)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	4611      	mov	r1, r2
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	f7f6 fd3c 	bl	80018a2 <_fstat>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	d102      	bne.n	800ae34 <_fstat_r+0x1c>
 800ae2e:	682b      	ldr	r3, [r5, #0]
 800ae30:	b103      	cbz	r3, 800ae34 <_fstat_r+0x1c>
 800ae32:	6023      	str	r3, [r4, #0]
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	bf00      	nop
 800ae38:	20000ab0 	.word	0x20000ab0

0800ae3c <_isatty_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d06      	ldr	r5, [pc, #24]	; (800ae58 <_isatty_r+0x1c>)
 800ae40:	2300      	movs	r3, #0
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	602b      	str	r3, [r5, #0]
 800ae48:	f7f6 fd3b 	bl	80018c2 <_isatty>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_isatty_r+0x1a>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_isatty_r+0x1a>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	20000ab0 	.word	0x20000ab0

0800ae5c <_lseek_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d07      	ldr	r5, [pc, #28]	; (800ae7c <_lseek_r+0x20>)
 800ae60:	4604      	mov	r4, r0
 800ae62:	4608      	mov	r0, r1
 800ae64:	4611      	mov	r1, r2
 800ae66:	2200      	movs	r2, #0
 800ae68:	602a      	str	r2, [r5, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f7f6 fd34 	bl	80018d8 <_lseek>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_lseek_r+0x1e>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_lseek_r+0x1e>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20000ab0 	.word	0x20000ab0

0800ae80 <_read_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d07      	ldr	r5, [pc, #28]	; (800aea0 <_read_r+0x20>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f7f6 fcc2 	bl	8001818 <_read>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_read_r+0x1e>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_read_r+0x1e>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20000ab0 	.word	0x20000ab0

0800aea4 <_init>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr

0800aeb0 <_fini>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr
